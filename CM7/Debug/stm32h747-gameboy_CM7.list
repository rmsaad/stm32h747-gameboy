
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041d68  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c948  0804c948  0006107c  2**0
                  CONTENTS
  4 .ARM          00000000  0804c948  0804c948  0006107c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0804c948  0804c948  0006107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804c948  0804c948  0005c948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804c94c  0804c94c  0005c94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000107c  24000000  0804c950  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b48  2400107c  0804d9cc  0006107c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24011bc4  0804d9cc  00061bc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0006107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008a387  00000000  00000000  000610aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ce8  00000000  00000000  000eb431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e40b  00000000  00000000  000f3119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002860  00000000  00000000  00111528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004eb0  00000000  00000000  00113d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000491dc  00000000  00000000  00118c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003704b  00000000  00000000  00161e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c9e25  00000000  00000000  00198e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00362c84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007970  00000000  00000000  00362cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400107c 	.word	0x2400107c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800abc8 	.word	0x0800abc8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24001080 	.word	0x24001080
 80002d4:	0800abc8 	.word	0x0800abc8

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vGBMBCsetControllerType>:
 * @brief sets the cartridge type for use in this file corresponding to data stored at the memory location 0x147
 * @param code data stored at memory location 0x147
 * @returns Nothing
 */
void vGBMBCsetControllerType(uint8_t code){
	ucgbMBCcontrollerCode = code;
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <vGBMBCsetControllerType+0x8>)
 80003c2:	7018      	strb	r0, [r3, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	24001099 	.word	0x24001099

080003cc <ucGBMBCreadBankX>:
 * @brief This function will return data from a ROM location in the memory map depending on the MBC type
 * @param address memory map address
 * @returns data stored at specified ROM address
 */
uint8_t ucGBMBCreadBankX(uint16_t address){
	if(address < CARTROM_BANKX){
 80003cc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80003d0:	d302      	bcc.n	80003d8 <ucGBMBCreadBankX+0xc>
		return (uint8_t) rom[address];
	}else if(ucgbMBCcontrollerCode == 0){
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <ucGBMBCreadBankX+0x2c>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b91b      	cbnz	r3, 80003e0 <ucGBMBCreadBankX+0x14>
		return (uint8_t) rom[address];
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <ucGBMBCreadBankX+0x30>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	5c18      	ldrb	r0, [r3, r0]
 80003de:	4770      	bx	lr
	}else{
		return (uint8_t) rom[((ucgbMBCoffsetHigh + ucgbMBCoffsetLow - 1) * 0x4000) + (address)];
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <ucGBMBCreadBankX+0x34>)
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <ucGBMBCreadBankX+0x38>)
 80003e4:	7811      	ldrb	r1, [r2, #0]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <ucGBMBCreadBankX+0x30>)
 80003ea:	440b      	add	r3, r1
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	eb02 3383 	add.w	r3, r2, r3, lsl #14
 80003f4:	5c18      	ldrb	r0, [r3, r0]
	}
}
 80003f6:	4770      	bx	lr
 80003f8:	24001099 	.word	0x24001099
 80003fc:	24001018 	.word	0x24001018
 8000400:	24000008 	.word	0x24000008
 8000404:	2400109a 	.word	0x2400109a

08000408 <vGBMBCwrite>:
 * @param address memory map address
 * @param data byte to be written to MBC register
 * @returns Nothing
 */
void vGBMBCwrite(uint16_t address, uint8_t data){
	if(ucgbMBCcontrollerCode > 0){
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <vGBMBCwrite+0x50>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b163      	cbz	r3, 8000428 <vGBMBCwrite+0x20>
		if(address < 0x2000){
 800040e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000412:	d20a      	bcs.n	800042a <vGBMBCwrite+0x22>
			if(data  == 0x0A){
 8000414:	290a      	cmp	r1, #10
				ucgbMBCramEN = 1;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <vGBMBCwrite+0x54>)
			if(data  == 0x0A){
 8000418:	d01b      	beq.n	8000452 <vGBMBCwrite+0x4a>
			}else{
				ucgbMBCramEN = 0;
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
 800041e:	4770      	bx	lr
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
			}else{

			}
		}else{
			ucgbMBCbankMode = (data & 0x01);
 8000420:	f001 0101 	and.w	r1, r1, #1
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <vGBMBCwrite+0x58>)
 8000426:	7019      	strb	r1, [r3, #0]
		}
	}
}
 8000428:	4770      	bx	lr
		}else if(address < 0x4000){
 800042a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800042e:	d30c      	bcc.n	800044a <vGBMBCwrite+0x42>
		}else if(address < 0x6000){
 8000430:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 8000434:	d2f4      	bcs.n	8000420 <vGBMBCwrite+0x18>
			if(ucgbMBCbankMode == 0){
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <vGBMBCwrite+0x58>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f4      	bne.n	8000428 <vGBMBCwrite+0x20>
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
 800043e:	0149      	lsls	r1, r1, #5
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <vGBMBCwrite+0x5c>)
 8000442:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8000446:	7019      	strb	r1, [r3, #0]
 8000448:	4770      	bx	lr
			if(ucgbMBCoffsetLow == 0){
 800044a:	f011 011f 	ands.w	r1, r1, #31
				ucgbMBCoffsetLow = 1;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <vGBMBCwrite+0x60>)
			if(ucgbMBCoffsetLow == 0){
 8000450:	d1e9      	bne.n	8000426 <vGBMBCwrite+0x1e>
				ucgbMBCoffsetLow = 1;
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	4770      	bx	lr
 8000458:	24001099 	.word	0x24001099
 800045c:	2400109b 	.word	0x2400109b
 8000460:	24001098 	.word	0x24001098
 8000464:	2400109a 	.word	0x2400109a
 8000468:	24000008 	.word	0x24000008

0800046c <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 8000470:	4a02      	ldr	r2, [pc, #8]	; (800047c <vINCs_BC+0xc>)
 8000472:	8853      	ldrh	r3, [r2, #2]
 8000474:	3301      	adds	r3, #1
 8000476:	8053      	strh	r3, [r2, #2]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24001658 	.word	0x24001658

08000480 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 8000480:	4a02      	ldr	r2, [pc, #8]	; (800048c <vDECs_BC+0xc>)
 8000482:	8853      	ldrh	r3, [r2, #2]
 8000484:	3b01      	subs	r3, #1
 8000486:	8053      	strh	r3, [r2, #2]
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	24001658 	.word	0x24001658

08000490 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <vSTOP+0x8>)
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	240010a5 	.word	0x240010a5

0800049c <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 800049c:	4a02      	ldr	r2, [pc, #8]	; (80004a8 <vINCs_DE+0xc>)
 800049e:	8893      	ldrh	r3, [r2, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	8093      	strh	r3, [r2, #4]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	24001658 	.word	0x24001658

080004ac <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 80004ac:	4a02      	ldr	r2, [pc, #8]	; (80004b8 <vDECs_DE+0xc>)
 80004ae:	8893      	ldrh	r3, [r2, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	8093      	strh	r3, [r2, #4]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24001658 	.word	0x24001658

080004bc <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 80004bc:	4a02      	ldr	r2, [pc, #8]	; (80004c8 <vINCs_HL+0xc>)
 80004be:	88d3      	ldrh	r3, [r2, #6]
 80004c0:	3301      	adds	r3, #1
 80004c2:	80d3      	strh	r3, [r2, #6]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	24001658 	.word	0x24001658

080004cc <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 80004cc:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <vDECs_HL+0xc>)
 80004ce:	88d3      	ldrh	r3, [r2, #6]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	80d3      	strh	r3, [r2, #6]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	24001658 	.word	0x24001658

080004dc <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <vINCs_SP+0xc>)
 80004de:	8913      	ldrh	r3, [r2, #8]
 80004e0:	3301      	adds	r3, #1
 80004e2:	8113      	strh	r3, [r2, #8]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	24001658 	.word	0x24001658

080004ec <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004ec:	4a02      	ldr	r2, [pc, #8]	; (80004f8 <vDECs_SP+0xc>)
 80004ee:	8913      	ldrh	r3, [r2, #8]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	8113      	strh	r3, [r2, #8]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	24001658 	.word	0x24001658

080004fc <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <vLD_B_C+0x8>)
 80004fe:	789a      	ldrb	r2, [r3, #2]
 8000500:	70da      	strb	r2, [r3, #3]
 8000502:	4770      	bx	lr
 8000504:	24001658 	.word	0x24001658

08000508 <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <vLD_B_D+0x8>)
 800050a:	795a      	ldrb	r2, [r3, #5]
 800050c:	70da      	strb	r2, [r3, #3]
 800050e:	4770      	bx	lr
 8000510:	24001658 	.word	0x24001658

08000514 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000514:	4b01      	ldr	r3, [pc, #4]	; (800051c <vLD_B_E+0x8>)
 8000516:	791a      	ldrb	r2, [r3, #4]
 8000518:	70da      	strb	r2, [r3, #3]
 800051a:	4770      	bx	lr
 800051c:	24001658 	.word	0x24001658

08000520 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <vLD_B_H+0x8>)
 8000522:	79da      	ldrb	r2, [r3, #7]
 8000524:	70da      	strb	r2, [r3, #3]
 8000526:	4770      	bx	lr
 8000528:	24001658 	.word	0x24001658

0800052c <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <vLD_B_L+0x8>)
 800052e:	799a      	ldrb	r2, [r3, #6]
 8000530:	70da      	strb	r2, [r3, #3]
 8000532:	4770      	bx	lr
 8000534:	24001658 	.word	0x24001658

08000538 <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <vLD_B_A+0x8>)
 800053a:	785a      	ldrb	r2, [r3, #1]
 800053c:	70da      	strb	r2, [r3, #3]
 800053e:	4770      	bx	lr
 8000540:	24001658 	.word	0x24001658

08000544 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <vLD_C_B+0x8>)
 8000546:	78da      	ldrb	r2, [r3, #3]
 8000548:	709a      	strb	r2, [r3, #2]
 800054a:	4770      	bx	lr
 800054c:	24001658 	.word	0x24001658

08000550 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <vLD_C_D+0x8>)
 8000552:	795a      	ldrb	r2, [r3, #5]
 8000554:	709a      	strb	r2, [r3, #2]
 8000556:	4770      	bx	lr
 8000558:	24001658 	.word	0x24001658

0800055c <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <vLD_C_E+0x8>)
 800055e:	791a      	ldrb	r2, [r3, #4]
 8000560:	709a      	strb	r2, [r3, #2]
 8000562:	4770      	bx	lr
 8000564:	24001658 	.word	0x24001658

08000568 <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <vLD_C_H+0x8>)
 800056a:	79da      	ldrb	r2, [r3, #7]
 800056c:	709a      	strb	r2, [r3, #2]
 800056e:	4770      	bx	lr
 8000570:	24001658 	.word	0x24001658

08000574 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <vLD_C_L+0x8>)
 8000576:	799a      	ldrb	r2, [r3, #6]
 8000578:	709a      	strb	r2, [r3, #2]
 800057a:	4770      	bx	lr
 800057c:	24001658 	.word	0x24001658

08000580 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <vLD_C_A+0x8>)
 8000582:	785a      	ldrb	r2, [r3, #1]
 8000584:	709a      	strb	r2, [r3, #2]
 8000586:	4770      	bx	lr
 8000588:	24001658 	.word	0x24001658

0800058c <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <vLD_D_B+0x8>)
 800058e:	78da      	ldrb	r2, [r3, #3]
 8000590:	715a      	strb	r2, [r3, #5]
 8000592:	4770      	bx	lr
 8000594:	24001658 	.word	0x24001658

08000598 <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <vLD_D_C+0x8>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	715a      	strb	r2, [r3, #5]
 800059e:	4770      	bx	lr
 80005a0:	24001658 	.word	0x24001658

080005a4 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80005a4:	4b01      	ldr	r3, [pc, #4]	; (80005ac <vLD_D_E+0x8>)
 80005a6:	791a      	ldrb	r2, [r3, #4]
 80005a8:	715a      	strb	r2, [r3, #5]
 80005aa:	4770      	bx	lr
 80005ac:	24001658 	.word	0x24001658

080005b0 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <vLD_D_H+0x8>)
 80005b2:	79da      	ldrb	r2, [r3, #7]
 80005b4:	715a      	strb	r2, [r3, #5]
 80005b6:	4770      	bx	lr
 80005b8:	24001658 	.word	0x24001658

080005bc <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <vLD_D_L+0x8>)
 80005be:	799a      	ldrb	r2, [r3, #6]
 80005c0:	715a      	strb	r2, [r3, #5]
 80005c2:	4770      	bx	lr
 80005c4:	24001658 	.word	0x24001658

080005c8 <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <vLD_D_A+0x8>)
 80005ca:	785a      	ldrb	r2, [r3, #1]
 80005cc:	715a      	strb	r2, [r3, #5]
 80005ce:	4770      	bx	lr
 80005d0:	24001658 	.word	0x24001658

080005d4 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <vLD_E_B+0x8>)
 80005d6:	78da      	ldrb	r2, [r3, #3]
 80005d8:	711a      	strb	r2, [r3, #4]
 80005da:	4770      	bx	lr
 80005dc:	24001658 	.word	0x24001658

080005e0 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <vLD_E_C+0x8>)
 80005e2:	789a      	ldrb	r2, [r3, #2]
 80005e4:	711a      	strb	r2, [r3, #4]
 80005e6:	4770      	bx	lr
 80005e8:	24001658 	.word	0x24001658

080005ec <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <vLD_E_D+0x8>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	711a      	strb	r2, [r3, #4]
 80005f2:	4770      	bx	lr
 80005f4:	24001658 	.word	0x24001658

080005f8 <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <vLD_E_H+0x8>)
 80005fa:	79da      	ldrb	r2, [r3, #7]
 80005fc:	711a      	strb	r2, [r3, #4]
 80005fe:	4770      	bx	lr
 8000600:	24001658 	.word	0x24001658

08000604 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <vLD_E_L+0x8>)
 8000606:	799a      	ldrb	r2, [r3, #6]
 8000608:	711a      	strb	r2, [r3, #4]
 800060a:	4770      	bx	lr
 800060c:	24001658 	.word	0x24001658

08000610 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <vLD_E_A+0x8>)
 8000612:	785a      	ldrb	r2, [r3, #1]
 8000614:	711a      	strb	r2, [r3, #4]
 8000616:	4770      	bx	lr
 8000618:	24001658 	.word	0x24001658

0800061c <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <vLD_H_B+0x8>)
 800061e:	78da      	ldrb	r2, [r3, #3]
 8000620:	71da      	strb	r2, [r3, #7]
 8000622:	4770      	bx	lr
 8000624:	24001658 	.word	0x24001658

08000628 <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <vLD_H_C+0x8>)
 800062a:	789a      	ldrb	r2, [r3, #2]
 800062c:	71da      	strb	r2, [r3, #7]
 800062e:	4770      	bx	lr
 8000630:	24001658 	.word	0x24001658

08000634 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <vLD_H_D+0x8>)
 8000636:	795a      	ldrb	r2, [r3, #5]
 8000638:	71da      	strb	r2, [r3, #7]
 800063a:	4770      	bx	lr
 800063c:	24001658 	.word	0x24001658

08000640 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <vLD_H_E+0x8>)
 8000642:	791a      	ldrb	r2, [r3, #4]
 8000644:	71da      	strb	r2, [r3, #7]
 8000646:	4770      	bx	lr
 8000648:	24001658 	.word	0x24001658

0800064c <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <vLD_H_L+0x8>)
 800064e:	799a      	ldrb	r2, [r3, #6]
 8000650:	71da      	strb	r2, [r3, #7]
 8000652:	4770      	bx	lr
 8000654:	24001658 	.word	0x24001658

08000658 <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <vLD_H_A+0x8>)
 800065a:	785a      	ldrb	r2, [r3, #1]
 800065c:	71da      	strb	r2, [r3, #7]
 800065e:	4770      	bx	lr
 8000660:	24001658 	.word	0x24001658

08000664 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <vLD_L_B+0x8>)
 8000666:	78da      	ldrb	r2, [r3, #3]
 8000668:	719a      	strb	r2, [r3, #6]
 800066a:	4770      	bx	lr
 800066c:	24001658 	.word	0x24001658

08000670 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <vLD_L_C+0x8>)
 8000672:	789a      	ldrb	r2, [r3, #2]
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	4770      	bx	lr
 8000678:	24001658 	.word	0x24001658

0800067c <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <vLD_L_D+0x8>)
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	719a      	strb	r2, [r3, #6]
 8000682:	4770      	bx	lr
 8000684:	24001658 	.word	0x24001658

08000688 <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <vLD_L_E+0x8>)
 800068a:	791a      	ldrb	r2, [r3, #4]
 800068c:	719a      	strb	r2, [r3, #6]
 800068e:	4770      	bx	lr
 8000690:	24001658 	.word	0x24001658

08000694 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <vLD_L_H+0x8>)
 8000696:	79da      	ldrb	r2, [r3, #7]
 8000698:	719a      	strb	r2, [r3, #6]
 800069a:	4770      	bx	lr
 800069c:	24001658 	.word	0x24001658

080006a0 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <vLD_L_A+0x8>)
 80006a2:	785a      	ldrb	r2, [r3, #1]
 80006a4:	719a      	strb	r2, [r3, #6]
 80006a6:	4770      	bx	lr
 80006a8:	24001658 	.word	0x24001658

080006ac <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <vHALT+0x8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	4770      	bx	lr
 80006b4:	240010a1 	.word	0x240010a1

080006b8 <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <vLD_A_B+0x8>)
 80006ba:	78da      	ldrb	r2, [r3, #3]
 80006bc:	705a      	strb	r2, [r3, #1]
 80006be:	4770      	bx	lr
 80006c0:	24001658 	.word	0x24001658

080006c4 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <vLD_A_C+0x8>)
 80006c6:	789a      	ldrb	r2, [r3, #2]
 80006c8:	705a      	strb	r2, [r3, #1]
 80006ca:	4770      	bx	lr
 80006cc:	24001658 	.word	0x24001658

080006d0 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <vLD_A_D+0x8>)
 80006d2:	795a      	ldrb	r2, [r3, #5]
 80006d4:	705a      	strb	r2, [r3, #1]
 80006d6:	4770      	bx	lr
 80006d8:	24001658 	.word	0x24001658

080006dc <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <vLD_A_E+0x8>)
 80006de:	791a      	ldrb	r2, [r3, #4]
 80006e0:	705a      	strb	r2, [r3, #1]
 80006e2:	4770      	bx	lr
 80006e4:	24001658 	.word	0x24001658

080006e8 <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <vLD_A_H+0x8>)
 80006ea:	79da      	ldrb	r2, [r3, #7]
 80006ec:	705a      	strb	r2, [r3, #1]
 80006ee:	4770      	bx	lr
 80006f0:	24001658 	.word	0x24001658

080006f4 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <vLD_A_L+0x8>)
 80006f6:	799a      	ldrb	r2, [r3, #6]
 80006f8:	705a      	strb	r2, [r3, #1]
 80006fa:	4770      	bx	lr
 80006fc:	24001658 	.word	0x24001658

08000700 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <vAND_B+0x18>)
 8000702:	785a      	ldrb	r2, [r3, #1]
 8000704:	78d9      	ldrb	r1, [r3, #3]
 8000706:	400a      	ands	r2, r1
 8000708:	2a00      	cmp	r2, #0
 800070a:	705a      	strb	r2, [r3, #1]
 800070c:	bf0c      	ite	eq
 800070e:	22a0      	moveq	r2, #160	; 0xa0
 8000710:	2220      	movne	r2, #32
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	24001658 	.word	0x24001658

0800071c <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <vAND_C+0x18>)
 800071e:	785a      	ldrb	r2, [r3, #1]
 8000720:	7899      	ldrb	r1, [r3, #2]
 8000722:	400a      	ands	r2, r1
 8000724:	2a00      	cmp	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
 8000728:	bf0c      	ite	eq
 800072a:	22a0      	moveq	r2, #160	; 0xa0
 800072c:	2220      	movne	r2, #32
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	24001658 	.word	0x24001658

08000738 <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <vAND_D+0x18>)
 800073a:	785a      	ldrb	r2, [r3, #1]
 800073c:	7959      	ldrb	r1, [r3, #5]
 800073e:	400a      	ands	r2, r1
 8000740:	2a00      	cmp	r2, #0
 8000742:	705a      	strb	r2, [r3, #1]
 8000744:	bf0c      	ite	eq
 8000746:	22a0      	moveq	r2, #160	; 0xa0
 8000748:	2220      	movne	r2, #32
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	24001658 	.word	0x24001658

08000754 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <vAND_E+0x18>)
 8000756:	785a      	ldrb	r2, [r3, #1]
 8000758:	7919      	ldrb	r1, [r3, #4]
 800075a:	400a      	ands	r2, r1
 800075c:	2a00      	cmp	r2, #0
 800075e:	705a      	strb	r2, [r3, #1]
 8000760:	bf0c      	ite	eq
 8000762:	22a0      	moveq	r2, #160	; 0xa0
 8000764:	2220      	movne	r2, #32
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	24001658 	.word	0x24001658

08000770 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <vAND_H+0x18>)
 8000772:	785a      	ldrb	r2, [r3, #1]
 8000774:	79d9      	ldrb	r1, [r3, #7]
 8000776:	400a      	ands	r2, r1
 8000778:	2a00      	cmp	r2, #0
 800077a:	705a      	strb	r2, [r3, #1]
 800077c:	bf0c      	ite	eq
 800077e:	22a0      	moveq	r2, #160	; 0xa0
 8000780:	2220      	movne	r2, #32
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	24001658 	.word	0x24001658

0800078c <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <vAND_L+0x18>)
 800078e:	785a      	ldrb	r2, [r3, #1]
 8000790:	7999      	ldrb	r1, [r3, #6]
 8000792:	400a      	ands	r2, r1
 8000794:	2a00      	cmp	r2, #0
 8000796:	705a      	strb	r2, [r3, #1]
 8000798:	bf0c      	ite	eq
 800079a:	22a0      	moveq	r2, #160	; 0xa0
 800079c:	2220      	movne	r2, #32
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	24001658 	.word	0x24001658

080007a8 <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <vAND_A+0x10>)
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	22a0      	moveq	r2, #160	; 0xa0
 80007b2:	2220      	movne	r2, #32
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	4770      	bx	lr
 80007b8:	24001658 	.word	0x24001658

080007bc <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <vXOR_B+0x18>)
 80007be:	785a      	ldrb	r2, [r3, #1]
 80007c0:	78d9      	ldrb	r1, [r3, #3]
 80007c2:	ea82 0001 	eor.w	r0, r2, r1
 80007c6:	428a      	cmp	r2, r1
 80007c8:	bf0c      	ite	eq
 80007ca:	2280      	moveq	r2, #128	; 0x80
 80007cc:	2200      	movne	r2, #0
 80007ce:	7058      	strb	r0, [r3, #1]
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	4770      	bx	lr
 80007d4:	24001658 	.word	0x24001658

080007d8 <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <vXOR_C+0x18>)
 80007da:	785a      	ldrb	r2, [r3, #1]
 80007dc:	7899      	ldrb	r1, [r3, #2]
 80007de:	ea82 0001 	eor.w	r0, r2, r1
 80007e2:	428a      	cmp	r2, r1
 80007e4:	bf0c      	ite	eq
 80007e6:	2280      	moveq	r2, #128	; 0x80
 80007e8:	2200      	movne	r2, #0
 80007ea:	7058      	strb	r0, [r3, #1]
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	4770      	bx	lr
 80007f0:	24001658 	.word	0x24001658

080007f4 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <vXOR_D+0x18>)
 80007f6:	785a      	ldrb	r2, [r3, #1]
 80007f8:	7959      	ldrb	r1, [r3, #5]
 80007fa:	ea82 0001 	eor.w	r0, r2, r1
 80007fe:	428a      	cmp	r2, r1
 8000800:	bf0c      	ite	eq
 8000802:	2280      	moveq	r2, #128	; 0x80
 8000804:	2200      	movne	r2, #0
 8000806:	7058      	strb	r0, [r3, #1]
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	4770      	bx	lr
 800080c:	24001658 	.word	0x24001658

08000810 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <vXOR_E+0x18>)
 8000812:	785a      	ldrb	r2, [r3, #1]
 8000814:	7919      	ldrb	r1, [r3, #4]
 8000816:	ea82 0001 	eor.w	r0, r2, r1
 800081a:	428a      	cmp	r2, r1
 800081c:	bf0c      	ite	eq
 800081e:	2280      	moveq	r2, #128	; 0x80
 8000820:	2200      	movne	r2, #0
 8000822:	7058      	strb	r0, [r3, #1]
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	4770      	bx	lr
 8000828:	24001658 	.word	0x24001658

0800082c <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <vXOR_H+0x18>)
 800082e:	785a      	ldrb	r2, [r3, #1]
 8000830:	79d9      	ldrb	r1, [r3, #7]
 8000832:	ea82 0001 	eor.w	r0, r2, r1
 8000836:	428a      	cmp	r2, r1
 8000838:	bf0c      	ite	eq
 800083a:	2280      	moveq	r2, #128	; 0x80
 800083c:	2200      	movne	r2, #0
 800083e:	7058      	strb	r0, [r3, #1]
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	4770      	bx	lr
 8000844:	24001658 	.word	0x24001658

08000848 <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <vXOR_L+0x18>)
 800084a:	785a      	ldrb	r2, [r3, #1]
 800084c:	7999      	ldrb	r1, [r3, #6]
 800084e:	ea82 0001 	eor.w	r0, r2, r1
 8000852:	428a      	cmp	r2, r1
 8000854:	bf0c      	ite	eq
 8000856:	2280      	moveq	r2, #128	; 0x80
 8000858:	2200      	movne	r2, #0
 800085a:	7058      	strb	r0, [r3, #1]
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	4770      	bx	lr
 8000860:	24001658 	.word	0x24001658

08000864 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <vXOR_A+0x8>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	4770      	bx	lr
 800086c:	24001658 	.word	0x24001658

08000870 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <vOR_B+0x18>)
 8000872:	785a      	ldrb	r2, [r3, #1]
 8000874:	78d9      	ldrb	r1, [r3, #3]
 8000876:	430a      	orrs	r2, r1
 8000878:	2a00      	cmp	r2, #0
 800087a:	705a      	strb	r2, [r3, #1]
 800087c:	bf0c      	ite	eq
 800087e:	2280      	moveq	r2, #128	; 0x80
 8000880:	2200      	movne	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	24001658 	.word	0x24001658

0800088c <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <vOR_C+0x18>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	7899      	ldrb	r1, [r3, #2]
 8000892:	430a      	orrs	r2, r1
 8000894:	2a00      	cmp	r2, #0
 8000896:	705a      	strb	r2, [r3, #1]
 8000898:	bf0c      	ite	eq
 800089a:	2280      	moveq	r2, #128	; 0x80
 800089c:	2200      	movne	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	24001658 	.word	0x24001658

080008a8 <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <vOR_D+0x18>)
 80008aa:	785a      	ldrb	r2, [r3, #1]
 80008ac:	7959      	ldrb	r1, [r3, #5]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	705a      	strb	r2, [r3, #1]
 80008b4:	bf0c      	ite	eq
 80008b6:	2280      	moveq	r2, #128	; 0x80
 80008b8:	2200      	movne	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	24001658 	.word	0x24001658

080008c4 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <vOR_E+0x18>)
 80008c6:	785a      	ldrb	r2, [r3, #1]
 80008c8:	7919      	ldrb	r1, [r3, #4]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	705a      	strb	r2, [r3, #1]
 80008d0:	bf0c      	ite	eq
 80008d2:	2280      	moveq	r2, #128	; 0x80
 80008d4:	2200      	movne	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	24001658 	.word	0x24001658

080008e0 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <vOR_H+0x18>)
 80008e2:	785a      	ldrb	r2, [r3, #1]
 80008e4:	79d9      	ldrb	r1, [r3, #7]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	705a      	strb	r2, [r3, #1]
 80008ec:	bf0c      	ite	eq
 80008ee:	2280      	moveq	r2, #128	; 0x80
 80008f0:	2200      	movne	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	24001658 	.word	0x24001658

080008fc <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <vOR_L+0x18>)
 80008fe:	785a      	ldrb	r2, [r3, #1]
 8000900:	7999      	ldrb	r1, [r3, #6]
 8000902:	430a      	orrs	r2, r1
 8000904:	2a00      	cmp	r2, #0
 8000906:	705a      	strb	r2, [r3, #1]
 8000908:	bf0c      	ite	eq
 800090a:	2280      	moveq	r2, #128	; 0x80
 800090c:	2200      	movne	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	24001658 	.word	0x24001658

08000918 <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <vOR_A+0x10>)
 800091a:	785a      	ldrb	r2, [r3, #1]
 800091c:	2a00      	cmp	r2, #0
 800091e:	bf0c      	ite	eq
 8000920:	2280      	moveq	r2, #128	; 0x80
 8000922:	2200      	movne	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	4770      	bx	lr
 8000928:	24001658 	.word	0x24001658

0800092c <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <vJP_HL+0x8>)
 800092e:	88da      	ldrh	r2, [r3, #6]
 8000930:	815a      	strh	r2, [r3, #10]
 8000932:	4770      	bx	lr
 8000934:	24001658 	.word	0x24001658

08000938 <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 8000938:	4b01      	ldr	r3, [pc, #4]	; (8000940 <vDI+0x8>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	4770      	bx	lr
 8000940:	240010a2 	.word	0x240010a2

08000944 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <vLDs_SP_HL+0x8>)
 8000946:	88da      	ldrh	r2, [r3, #6]
 8000948:	811a      	strh	r2, [r3, #8]
 800094a:	4770      	bx	lr
 800094c:	24001658 	.word	0x24001658

08000950 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <vEI+0x8>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	4770      	bx	lr
 8000958:	240010a2 	.word	0x240010a2

0800095c <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 800095c:	b510      	push	{r4, lr}
 800095e:	4c04      	ldr	r4, [pc, #16]	; (8000970 <vLD_B_d8+0x14>)
 8000960:	8960      	ldrh	r0, [r4, #10]
 8000962:	3801      	subs	r0, #1
 8000964:	b280      	uxth	r0, r0
 8000966:	f002 fe9d 	bl	80036a4 <ucGBMemoryRead>
 800096a:	70e0      	strb	r0, [r4, #3]
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop
 8000970:	24001658 	.word	0x24001658

08000974 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000974:	b510      	push	{r4, lr}
 8000976:	4c03      	ldr	r4, [pc, #12]	; (8000984 <vLD_A_BC+0x10>)
 8000978:	8860      	ldrh	r0, [r4, #2]
 800097a:	f002 fe93 	bl	80036a4 <ucGBMemoryRead>
 800097e:	7060      	strb	r0, [r4, #1]
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	24001658 	.word	0x24001658

08000988 <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 8000988:	b510      	push	{r4, lr}
 800098a:	4c04      	ldr	r4, [pc, #16]	; (800099c <vLD_C_d8+0x14>)
 800098c:	8960      	ldrh	r0, [r4, #10]
 800098e:	3801      	subs	r0, #1
 8000990:	b280      	uxth	r0, r0
 8000992:	f002 fe87 	bl	80036a4 <ucGBMemoryRead>
 8000996:	70a0      	strb	r0, [r4, #2]
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	24001658 	.word	0x24001658

080009a0 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80009a0:	b510      	push	{r4, lr}
 80009a2:	4c04      	ldr	r4, [pc, #16]	; (80009b4 <vLD_D_d8+0x14>)
 80009a4:	8960      	ldrh	r0, [r4, #10]
 80009a6:	3801      	subs	r0, #1
 80009a8:	b280      	uxth	r0, r0
 80009aa:	f002 fe7b 	bl	80036a4 <ucGBMemoryRead>
 80009ae:	7160      	strb	r0, [r4, #5]
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	24001658 	.word	0x24001658

080009b8 <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 80009b8:	b510      	push	{r4, lr}
 80009ba:	4c05      	ldr	r4, [pc, #20]	; (80009d0 <vJR_r8+0x18>)
 80009bc:	8960      	ldrh	r0, [r4, #10]
 80009be:	3801      	subs	r0, #1
 80009c0:	b280      	uxth	r0, r0
 80009c2:	f002 fe6f 	bl	80036a4 <ucGBMemoryRead>
 80009c6:	8963      	ldrh	r3, [r4, #10]
 80009c8:	fa43 f080 	sxtab	r0, r3, r0
 80009cc:	8160      	strh	r0, [r4, #10]
 80009ce:	bd10      	pop	{r4, pc}
 80009d0:	24001658 	.word	0x24001658

080009d4 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4c03      	ldr	r4, [pc, #12]	; (80009e4 <vLD_A_DE+0x10>)
 80009d8:	88a0      	ldrh	r0, [r4, #4]
 80009da:	f002 fe63 	bl	80036a4 <ucGBMemoryRead>
 80009de:	7060      	strb	r0, [r4, #1]
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	bf00      	nop
 80009e4:	24001658 	.word	0x24001658

080009e8 <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 80009e8:	b510      	push	{r4, lr}
 80009ea:	4c04      	ldr	r4, [pc, #16]	; (80009fc <vLD_E_d8+0x14>)
 80009ec:	8960      	ldrh	r0, [r4, #10]
 80009ee:	3801      	subs	r0, #1
 80009f0:	b280      	uxth	r0, r0
 80009f2:	f002 fe57 	bl	80036a4 <ucGBMemoryRead>
 80009f6:	7120      	strb	r0, [r4, #4]
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	bf00      	nop
 80009fc:	24001658 	.word	0x24001658

08000a00 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4c04      	ldr	r4, [pc, #16]	; (8000a14 <vLD_H_d8+0x14>)
 8000a04:	8960      	ldrh	r0, [r4, #10]
 8000a06:	3801      	subs	r0, #1
 8000a08:	b280      	uxth	r0, r0
 8000a0a:	f002 fe4b 	bl	80036a4 <ucGBMemoryRead>
 8000a0e:	71e0      	strb	r0, [r4, #7]
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	24001658 	.word	0x24001658

08000a18 <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <vLD_A_HLI+0x14>)
 8000a1c:	88e0      	ldrh	r0, [r4, #6]
 8000a1e:	f002 fe41 	bl	80036a4 <ucGBMemoryRead>
 8000a22:	88e3      	ldrh	r3, [r4, #6]
 8000a24:	7060      	strb	r0, [r4, #1]
 8000a26:	3301      	adds	r3, #1
 8000a28:	80e3      	strh	r3, [r4, #6]
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	24001658 	.word	0x24001658

08000a30 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c04      	ldr	r4, [pc, #16]	; (8000a44 <vLD_L_d8+0x14>)
 8000a34:	8960      	ldrh	r0, [r4, #10]
 8000a36:	3801      	subs	r0, #1
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	f002 fe33 	bl	80036a4 <ucGBMemoryRead>
 8000a3e:	71a0      	strb	r0, [r4, #6]
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	24001658 	.word	0x24001658

08000a48 <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 8000a48:	b510      	push	{r4, lr}
 8000a4a:	4c04      	ldr	r4, [pc, #16]	; (8000a5c <vLD_A_HLD+0x14>)
 8000a4c:	88e0      	ldrh	r0, [r4, #6]
 8000a4e:	f002 fe29 	bl	80036a4 <ucGBMemoryRead>
 8000a52:	88e3      	ldrh	r3, [r4, #6]
 8000a54:	7060      	strb	r0, [r4, #1]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	80e3      	strh	r3, [r4, #6]
 8000a5a:	bd10      	pop	{r4, pc}
 8000a5c:	24001658 	.word	0x24001658

08000a60 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c04      	ldr	r4, [pc, #16]	; (8000a74 <vLD_A_d8+0x14>)
 8000a64:	8960      	ldrh	r0, [r4, #10]
 8000a66:	3801      	subs	r0, #1
 8000a68:	b280      	uxth	r0, r0
 8000a6a:	f002 fe1b 	bl	80036a4 <ucGBMemoryRead>
 8000a6e:	7060      	strb	r0, [r4, #1]
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	bf00      	nop
 8000a74:	24001658 	.word	0x24001658

08000a78 <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c03      	ldr	r4, [pc, #12]	; (8000a88 <vLD_B_HL+0x10>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fe11 	bl	80036a4 <ucGBMemoryRead>
 8000a82:	70e0      	strb	r0, [r4, #3]
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	bf00      	nop
 8000a88:	24001658 	.word	0x24001658

08000a8c <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4c03      	ldr	r4, [pc, #12]	; (8000a9c <vLD_C_HL+0x10>)
 8000a90:	88e0      	ldrh	r0, [r4, #6]
 8000a92:	f002 fe07 	bl	80036a4 <ucGBMemoryRead>
 8000a96:	70a0      	strb	r0, [r4, #2]
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24001658 	.word	0x24001658

08000aa0 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	4c03      	ldr	r4, [pc, #12]	; (8000ab0 <vLD_D_HL+0x10>)
 8000aa4:	88e0      	ldrh	r0, [r4, #6]
 8000aa6:	f002 fdfd 	bl	80036a4 <ucGBMemoryRead>
 8000aaa:	7160      	strb	r0, [r4, #5]
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	24001658 	.word	0x24001658

08000ab4 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000ab4:	b510      	push	{r4, lr}
 8000ab6:	4c03      	ldr	r4, [pc, #12]	; (8000ac4 <vLD_E_HL+0x10>)
 8000ab8:	88e0      	ldrh	r0, [r4, #6]
 8000aba:	f002 fdf3 	bl	80036a4 <ucGBMemoryRead>
 8000abe:	7120      	strb	r0, [r4, #4]
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	bf00      	nop
 8000ac4:	24001658 	.word	0x24001658

08000ac8 <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000ac8:	b510      	push	{r4, lr}
 8000aca:	4c03      	ldr	r4, [pc, #12]	; (8000ad8 <vLD_H_HL+0x10>)
 8000acc:	88e0      	ldrh	r0, [r4, #6]
 8000ace:	f002 fde9 	bl	80036a4 <ucGBMemoryRead>
 8000ad2:	71e0      	strb	r0, [r4, #7]
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24001658 	.word	0x24001658

08000adc <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000adc:	b510      	push	{r4, lr}
 8000ade:	4c03      	ldr	r4, [pc, #12]	; (8000aec <vLD_L_HL+0x10>)
 8000ae0:	88e0      	ldrh	r0, [r4, #6]
 8000ae2:	f002 fddf 	bl	80036a4 <ucGBMemoryRead>
 8000ae6:	71a0      	strb	r0, [r4, #6]
 8000ae8:	bd10      	pop	{r4, pc}
 8000aea:	bf00      	nop
 8000aec:	24001658 	.word	0x24001658

08000af0 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4c03      	ldr	r4, [pc, #12]	; (8000b00 <vLD_A_HL+0x10>)
 8000af4:	88e0      	ldrh	r0, [r4, #6]
 8000af6:	f002 fdd5 	bl	80036a4 <ucGBMemoryRead>
 8000afa:	7060      	strb	r0, [r4, #1]
 8000afc:	bd10      	pop	{r4, pc}
 8000afe:	bf00      	nop
 8000b00:	24001658 	.word	0x24001658

08000b04 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4c06      	ldr	r4, [pc, #24]	; (8000b20 <vAND_HL+0x1c>)
 8000b08:	88e0      	ldrh	r0, [r4, #6]
 8000b0a:	f002 fdcb 	bl	80036a4 <ucGBMemoryRead>
 8000b0e:	7863      	ldrb	r3, [r4, #1]
 8000b10:	4018      	ands	r0, r3
 8000b12:	2800      	cmp	r0, #0
 8000b14:	7060      	strb	r0, [r4, #1]
 8000b16:	bf0c      	ite	eq
 8000b18:	23a0      	moveq	r3, #160	; 0xa0
 8000b1a:	2320      	movne	r3, #32
 8000b1c:	7023      	strb	r3, [r4, #0]
 8000b1e:	bd10      	pop	{r4, pc}
 8000b20:	24001658 	.word	0x24001658

08000b24 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4c07      	ldr	r4, [pc, #28]	; (8000b44 <vXOR_HL+0x20>)
 8000b28:	88e0      	ldrh	r0, [r4, #6]
 8000b2a:	f002 fdbb 	bl	80036a4 <ucGBMemoryRead>
 8000b2e:	7863      	ldrb	r3, [r4, #1]
 8000b30:	ea83 0200 	eor.w	r2, r3, r0
 8000b34:	4283      	cmp	r3, r0
 8000b36:	bf0c      	ite	eq
 8000b38:	2080      	moveq	r0, #128	; 0x80
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	7062      	strb	r2, [r4, #1]
 8000b3e:	7020      	strb	r0, [r4, #0]
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	24001658 	.word	0x24001658

08000b48 <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4c07      	ldr	r4, [pc, #28]	; (8000b68 <vOR_HL+0x20>)
 8000b4c:	88e0      	ldrh	r0, [r4, #6]
 8000b4e:	f002 fda9 	bl	80036a4 <ucGBMemoryRead>
 8000b52:	7863      	ldrb	r3, [r4, #1]
 8000b54:	4318      	orrs	r0, r3
 8000b56:	b2c0      	uxtb	r0, r0
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	7060      	strb	r0, [r4, #1]
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2380      	moveq	r3, #128	; 0x80
 8000b60:	2300      	movne	r3, #0
 8000b62:	7023      	strb	r3, [r4, #0]
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	24001658 	.word	0x24001658

08000b6c <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <vPREFIX+0x1c>)
 8000b6e:	8958      	ldrh	r0, [r3, #10]
 8000b70:	3801      	subs	r0, #1
 8000b72:	b510      	push	{r4, lr}
 8000b74:	b280      	uxth	r0, r0
 8000b76:	f002 fd95 	bl	80036a4 <ucGBMemoryRead>
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <vPREFIX+0x20>)
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b80:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b84:	4718      	bx	r3
 8000b86:	bf00      	nop
 8000b88:	24001658 	.word	0x24001658
 8000b8c:	2400080c 	.word	0x2400080c

08000b90 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4c07      	ldr	r4, [pc, #28]	; (8000bb0 <vAND_d8+0x20>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3801      	subs	r0, #1
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fd83 	bl	80036a4 <ucGBMemoryRead>
 8000b9e:	7863      	ldrb	r3, [r4, #1]
 8000ba0:	4018      	ands	r0, r3
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	7060      	strb	r0, [r4, #1]
 8000ba6:	bf0c      	ite	eq
 8000ba8:	23a0      	moveq	r3, #160	; 0xa0
 8000baa:	2320      	movne	r3, #32
 8000bac:	7023      	strb	r3, [r4, #0]
 8000bae:	bd10      	pop	{r4, pc}
 8000bb0:	24001658 	.word	0x24001658

08000bb4 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4c08      	ldr	r4, [pc, #32]	; (8000bd8 <vXOR_d8+0x24>)
 8000bb8:	8960      	ldrh	r0, [r4, #10]
 8000bba:	3801      	subs	r0, #1
 8000bbc:	b280      	uxth	r0, r0
 8000bbe:	f002 fd71 	bl	80036a4 <ucGBMemoryRead>
 8000bc2:	7863      	ldrb	r3, [r4, #1]
 8000bc4:	ea83 0200 	eor.w	r2, r3, r0
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	bf0c      	ite	eq
 8000bcc:	2080      	moveq	r0, #128	; 0x80
 8000bce:	2000      	movne	r0, #0
 8000bd0:	7062      	strb	r2, [r4, #1]
 8000bd2:	7020      	strb	r0, [r4, #0]
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24001658 	.word	0x24001658

08000bdc <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4c06      	ldr	r4, [pc, #24]	; (8000bf8 <vLDH_A_a8+0x1c>)
 8000be0:	8960      	ldrh	r0, [r4, #10]
 8000be2:	3801      	subs	r0, #1
 8000be4:	b280      	uxth	r0, r0
 8000be6:	f002 fd5d 	bl	80036a4 <ucGBMemoryRead>
 8000bea:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bee:	b280      	uxth	r0, r0
 8000bf0:	f002 fd58 	bl	80036a4 <ucGBMemoryRead>
 8000bf4:	7060      	strb	r0, [r4, #1]
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	24001658 	.word	0x24001658

08000bfc <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4c04      	ldr	r4, [pc, #16]	; (8000c10 <vLD_A_fC+0x14>)
 8000c00:	78a0      	ldrb	r0, [r4, #2]
 8000c02:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000c06:	b280      	uxth	r0, r0
 8000c08:	f002 fd4c 	bl	80036a4 <ucGBMemoryRead>
 8000c0c:	7060      	strb	r0, [r4, #1]
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	24001658 	.word	0x24001658

08000c14 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4c08      	ldr	r4, [pc, #32]	; (8000c38 <vOR_d8+0x24>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fd41 	bl	80036a4 <ucGBMemoryRead>
 8000c22:	7863      	ldrb	r3, [r4, #1]
 8000c24:	4318      	orrs	r0, r3
 8000c26:	b2c0      	uxtb	r0, r0
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	7060      	strb	r0, [r4, #1]
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2380      	moveq	r3, #128	; 0x80
 8000c30:	2300      	movne	r3, #0
 8000c32:	7023      	strb	r3, [r4, #0]
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	24001658 	.word	0x24001658

08000c3c <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <vLDs_BC_d16+0x28>)
 8000c40:	8960      	ldrh	r0, [r4, #10]
 8000c42:	3802      	subs	r0, #2
 8000c44:	b280      	uxth	r0, r0
 8000c46:	f002 fd2d 	bl	80036a4 <ucGBMemoryRead>
 8000c4a:	8963      	ldrh	r3, [r4, #10]
 8000c4c:	4605      	mov	r5, r0
 8000c4e:	1e58      	subs	r0, r3, #1
 8000c50:	b280      	uxth	r0, r0
 8000c52:	f002 fd27 	bl	80036a4 <ucGBMemoryRead>
 8000c56:	4601      	mov	r1, r0
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f002 f813 	bl	8002c84 <usConcat16BitBigEndian>
 8000c5e:	8060      	strh	r0, [r4, #2]
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	24001658 	.word	0x24001658

08000c68 <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4c09      	ldr	r4, [pc, #36]	; (8000c90 <vLDs_DE_d16+0x28>)
 8000c6c:	8960      	ldrh	r0, [r4, #10]
 8000c6e:	3802      	subs	r0, #2
 8000c70:	b280      	uxth	r0, r0
 8000c72:	f002 fd17 	bl	80036a4 <ucGBMemoryRead>
 8000c76:	8963      	ldrh	r3, [r4, #10]
 8000c78:	4605      	mov	r5, r0
 8000c7a:	1e58      	subs	r0, r3, #1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	f002 fd11 	bl	80036a4 <ucGBMemoryRead>
 8000c82:	4601      	mov	r1, r0
 8000c84:	4628      	mov	r0, r5
 8000c86:	f001 fffd 	bl	8002c84 <usConcat16BitBigEndian>
 8000c8a:	80a0      	strh	r0, [r4, #4]
 8000c8c:	bd38      	pop	{r3, r4, r5, pc}
 8000c8e:	bf00      	nop
 8000c90:	24001658 	.word	0x24001658

08000c94 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4c09      	ldr	r4, [pc, #36]	; (8000cbc <vLDs_HL_d16+0x28>)
 8000c98:	8960      	ldrh	r0, [r4, #10]
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	b280      	uxth	r0, r0
 8000c9e:	f002 fd01 	bl	80036a4 <ucGBMemoryRead>
 8000ca2:	8963      	ldrh	r3, [r4, #10]
 8000ca4:	4605      	mov	r5, r0
 8000ca6:	1e58      	subs	r0, r3, #1
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	f002 fcfb 	bl	80036a4 <ucGBMemoryRead>
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f001 ffe7 	bl	8002c84 <usConcat16BitBigEndian>
 8000cb6:	80e0      	strh	r0, [r4, #6]
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop
 8000cbc:	24001658 	.word	0x24001658

08000cc0 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4c09      	ldr	r4, [pc, #36]	; (8000ce8 <vLDs_SP_d16+0x28>)
 8000cc4:	8960      	ldrh	r0, [r4, #10]
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	b280      	uxth	r0, r0
 8000cca:	f002 fceb 	bl	80036a4 <ucGBMemoryRead>
 8000cce:	8963      	ldrh	r3, [r4, #10]
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	1e58      	subs	r0, r3, #1
 8000cd4:	b280      	uxth	r0, r0
 8000cd6:	f002 fce5 	bl	80036a4 <ucGBMemoryRead>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f001 ffd1 	bl	8002c84 <usConcat16BitBigEndian>
 8000ce2:	8120      	strh	r0, [r4, #8]
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24001658 	.word	0x24001658

08000cec <vJP_a16>:
void vJP_a16(){       reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4c09      	ldr	r4, [pc, #36]	; (8000d14 <vJP_a16+0x28>)
 8000cf0:	8960      	ldrh	r0, [r4, #10]
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	b280      	uxth	r0, r0
 8000cf6:	f002 fcd5 	bl	80036a4 <ucGBMemoryRead>
 8000cfa:	8963      	ldrh	r3, [r4, #10]
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	1e58      	subs	r0, r3, #1
 8000d00:	b280      	uxth	r0, r0
 8000d02:	f002 fccf 	bl	80036a4 <ucGBMemoryRead>
 8000d06:	4601      	mov	r1, r0
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f001 ffbb 	bl	8002c84 <usConcat16BitBigEndian>
 8000d0e:	8160      	strh	r0, [r4, #10]
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	bf00      	nop
 8000d14:	24001658 	.word	0x24001658

08000d18 <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <vLD_A_a16+0x2c>)
 8000d1c:	8960      	ldrh	r0, [r4, #10]
 8000d1e:	3802      	subs	r0, #2
 8000d20:	b280      	uxth	r0, r0
 8000d22:	f002 fcbf 	bl	80036a4 <ucGBMemoryRead>
 8000d26:	8963      	ldrh	r3, [r4, #10]
 8000d28:	4605      	mov	r5, r0
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	f002 fcb9 	bl	80036a4 <ucGBMemoryRead>
 8000d32:	4601      	mov	r1, r0
 8000d34:	4628      	mov	r0, r5
 8000d36:	f001 ffa5 	bl	8002c84 <usConcat16BitBigEndian>
 8000d3a:	f002 fcb3 	bl	80036a4 <ucGBMemoryRead>
 8000d3e:	7060      	strb	r0, [r4, #1]
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
 8000d42:	bf00      	nop
 8000d44:	24001658 	.word	0x24001658

08000d48 <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <vLD_BC_A+0xc>)
 8000d4a:	7859      	ldrb	r1, [r3, #1]
 8000d4c:	8858      	ldrh	r0, [r3, #2]
 8000d4e:	f002 bcd1 	b.w	80036f4 <vGBMemoryWrite>
 8000d52:	bf00      	nop
 8000d54:	24001658 	.word	0x24001658

08000d58 <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <vLD_DE_A+0xc>)
 8000d5a:	7859      	ldrb	r1, [r3, #1]
 8000d5c:	8898      	ldrh	r0, [r3, #4]
 8000d5e:	f002 bcc9 	b.w	80036f4 <vGBMemoryWrite>
 8000d62:	bf00      	nop
 8000d64:	24001658 	.word	0x24001658

08000d68 <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	4c04      	ldr	r4, [pc, #16]	; (8000d7c <vLD_HLI_A+0x14>)
 8000d6c:	7861      	ldrb	r1, [r4, #1]
 8000d6e:	88e0      	ldrh	r0, [r4, #6]
 8000d70:	f002 fcc0 	bl	80036f4 <vGBMemoryWrite>
 8000d74:	88e3      	ldrh	r3, [r4, #6]
 8000d76:	3301      	adds	r3, #1
 8000d78:	80e3      	strh	r3, [r4, #6]
 8000d7a:	bd10      	pop	{r4, pc}
 8000d7c:	24001658 	.word	0x24001658

08000d80 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4c04      	ldr	r4, [pc, #16]	; (8000d94 <vLD_HLD_A+0x14>)
 8000d84:	7861      	ldrb	r1, [r4, #1]
 8000d86:	88e0      	ldrh	r0, [r4, #6]
 8000d88:	f002 fcb4 	bl	80036f4 <vGBMemoryWrite>
 8000d8c:	88e3      	ldrh	r3, [r4, #6]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	80e3      	strh	r3, [r4, #6]
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	24001658 	.word	0x24001658

08000d98 <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <vLD_HL_d8+0x1c>)
 8000d9a:	8958      	ldrh	r0, [r3, #10]
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	b510      	push	{r4, lr}
 8000da0:	88dc      	ldrh	r4, [r3, #6]
 8000da2:	b280      	uxth	r0, r0
 8000da4:	f002 fc7e 	bl	80036a4 <ucGBMemoryRead>
 8000da8:	4601      	mov	r1, r0
 8000daa:	4620      	mov	r0, r4
 8000dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db0:	f002 bca0 	b.w	80036f4 <vGBMemoryWrite>
 8000db4:	24001658 	.word	0x24001658

08000db8 <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <vLD_HL_B+0xc>)
 8000dba:	78d9      	ldrb	r1, [r3, #3]
 8000dbc:	88d8      	ldrh	r0, [r3, #6]
 8000dbe:	f002 bc99 	b.w	80036f4 <vGBMemoryWrite>
 8000dc2:	bf00      	nop
 8000dc4:	24001658 	.word	0x24001658

08000dc8 <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <vLD_HL_C+0xc>)
 8000dca:	7899      	ldrb	r1, [r3, #2]
 8000dcc:	88d8      	ldrh	r0, [r3, #6]
 8000dce:	f002 bc91 	b.w	80036f4 <vGBMemoryWrite>
 8000dd2:	bf00      	nop
 8000dd4:	24001658 	.word	0x24001658

08000dd8 <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <vLD_HL_D+0xc>)
 8000dda:	7959      	ldrb	r1, [r3, #5]
 8000ddc:	88d8      	ldrh	r0, [r3, #6]
 8000dde:	f002 bc89 	b.w	80036f4 <vGBMemoryWrite>
 8000de2:	bf00      	nop
 8000de4:	24001658 	.word	0x24001658

08000de8 <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <vLD_HL_E+0xc>)
 8000dea:	7919      	ldrb	r1, [r3, #4]
 8000dec:	88d8      	ldrh	r0, [r3, #6]
 8000dee:	f002 bc81 	b.w	80036f4 <vGBMemoryWrite>
 8000df2:	bf00      	nop
 8000df4:	24001658 	.word	0x24001658

08000df8 <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <vLD_HL_H+0xc>)
 8000dfa:	79d9      	ldrb	r1, [r3, #7]
 8000dfc:	88d8      	ldrh	r0, [r3, #6]
 8000dfe:	f002 bc79 	b.w	80036f4 <vGBMemoryWrite>
 8000e02:	bf00      	nop
 8000e04:	24001658 	.word	0x24001658

08000e08 <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <vLD_HL_L+0xc>)
 8000e0a:	7999      	ldrb	r1, [r3, #6]
 8000e0c:	88d8      	ldrh	r0, [r3, #6]
 8000e0e:	f002 bc71 	b.w	80036f4 <vGBMemoryWrite>
 8000e12:	bf00      	nop
 8000e14:	24001658 	.word	0x24001658

08000e18 <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <vLD_HL_A+0xc>)
 8000e1a:	7859      	ldrb	r1, [r3, #1]
 8000e1c:	88d8      	ldrh	r0, [r3, #6]
 8000e1e:	f002 bc69 	b.w	80036f4 <vGBMemoryWrite>
 8000e22:	bf00      	nop
 8000e24:	24001658 	.word	0x24001658

08000e28 <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4c07      	ldr	r4, [pc, #28]	; (8000e48 <vLDH_a8_A+0x20>)
 8000e2c:	8960      	ldrh	r0, [r4, #10]
 8000e2e:	3801      	subs	r0, #1
 8000e30:	b280      	uxth	r0, r0
 8000e32:	f002 fc37 	bl	80036a4 <ucGBMemoryRead>
 8000e36:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e3a:	7861      	ldrb	r1, [r4, #1]
 8000e3c:	b280      	uxth	r0, r0
 8000e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e42:	f002 bc57 	b.w	80036f4 <vGBMemoryWrite>
 8000e46:	bf00      	nop
 8000e48:	24001658 	.word	0x24001658

08000e4c <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <vLD_fC_A+0x10>)
 8000e4e:	7898      	ldrb	r0, [r3, #2]
 8000e50:	7859      	ldrb	r1, [r3, #1]
 8000e52:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e56:	b280      	uxth	r0, r0
 8000e58:	f002 bc4c 	b.w	80036f4 <vGBMemoryWrite>
 8000e5c:	24001658 	.word	0x24001658

08000e60 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <vLD_a16_A+0x2c>)
 8000e64:	8960      	ldrh	r0, [r4, #10]
 8000e66:	3802      	subs	r0, #2
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	f002 fc1b 	bl	80036a4 <ucGBMemoryRead>
 8000e6e:	8963      	ldrh	r3, [r4, #10]
 8000e70:	4605      	mov	r5, r0
 8000e72:	1e58      	subs	r0, r3, #1
 8000e74:	b280      	uxth	r0, r0
 8000e76:	f002 fc15 	bl	80036a4 <ucGBMemoryRead>
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f001 ff01 	bl	8002c84 <usConcat16BitBigEndian>
 8000e82:	7861      	ldrb	r1, [r4, #1]
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f002 bc34 	b.w	80036f4 <vGBMemoryWrite>
 8000e8c:	24001658 	.word	0x24001658

08000e90 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e90:	4901      	ldr	r1, [pc, #4]	; (8000e98 <vINC_B+0x8>)
 8000e92:	1cc8      	adds	r0, r1, #3
 8000e94:	f001 bf0e 	b.w	8002cb4 <v8bitRegisterINC>
 8000e98:	24001658 	.word	0x24001658

08000e9c <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e9c:	4901      	ldr	r1, [pc, #4]	; (8000ea4 <vINC_C+0x8>)
 8000e9e:	1c88      	adds	r0, r1, #2
 8000ea0:	f001 bf08 	b.w	8002cb4 <v8bitRegisterINC>
 8000ea4:	24001658 	.word	0x24001658

08000ea8 <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000ea8:	4901      	ldr	r1, [pc, #4]	; (8000eb0 <vINC_D+0x8>)
 8000eaa:	1d48      	adds	r0, r1, #5
 8000eac:	f001 bf02 	b.w	8002cb4 <v8bitRegisterINC>
 8000eb0:	24001658 	.word	0x24001658

08000eb4 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000eb4:	4901      	ldr	r1, [pc, #4]	; (8000ebc <vINC_E+0x8>)
 8000eb6:	1d08      	adds	r0, r1, #4
 8000eb8:	f001 befc 	b.w	8002cb4 <v8bitRegisterINC>
 8000ebc:	24001658 	.word	0x24001658

08000ec0 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000ec0:	4901      	ldr	r1, [pc, #4]	; (8000ec8 <vINC_H+0x8>)
 8000ec2:	1dc8      	adds	r0, r1, #7
 8000ec4:	f001 bef6 	b.w	8002cb4 <v8bitRegisterINC>
 8000ec8:	24001658 	.word	0x24001658

08000ecc <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000ecc:	4901      	ldr	r1, [pc, #4]	; (8000ed4 <vINC_L+0x8>)
 8000ece:	1d88      	adds	r0, r1, #6
 8000ed0:	f001 bef0 	b.w	8002cb4 <v8bitRegisterINC>
 8000ed4:	24001658 	.word	0x24001658

08000ed8 <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000ed8:	4901      	ldr	r1, [pc, #4]	; (8000ee0 <vINC_A+0x8>)
 8000eda:	1c48      	adds	r0, r1, #1
 8000edc:	f001 beea 	b.w	8002cb4 <v8bitRegisterINC>
 8000ee0:	24001658 	.word	0x24001658

08000ee4 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000ee4:	4901      	ldr	r1, [pc, #4]	; (8000eec <vDEC_B+0x8>)
 8000ee6:	1cc8      	adds	r0, r1, #3
 8000ee8:	f001 bf02 	b.w	8002cf0 <v8bitRegisterDEC>
 8000eec:	24001658 	.word	0x24001658

08000ef0 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000ef0:	4901      	ldr	r1, [pc, #4]	; (8000ef8 <vDEC_C+0x8>)
 8000ef2:	1c88      	adds	r0, r1, #2
 8000ef4:	f001 befc 	b.w	8002cf0 <v8bitRegisterDEC>
 8000ef8:	24001658 	.word	0x24001658

08000efc <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000efc:	4901      	ldr	r1, [pc, #4]	; (8000f04 <vDEC_D+0x8>)
 8000efe:	1d48      	adds	r0, r1, #5
 8000f00:	f001 bef6 	b.w	8002cf0 <v8bitRegisterDEC>
 8000f04:	24001658 	.word	0x24001658

08000f08 <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vDEC_E+0x8>)
 8000f0a:	1d08      	adds	r0, r1, #4
 8000f0c:	f001 bef0 	b.w	8002cf0 <v8bitRegisterDEC>
 8000f10:	24001658 	.word	0x24001658

08000f14 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vDEC_H+0x8>)
 8000f16:	1dc8      	adds	r0, r1, #7
 8000f18:	f001 beea 	b.w	8002cf0 <v8bitRegisterDEC>
 8000f1c:	24001658 	.word	0x24001658

08000f20 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vDEC_L+0x8>)
 8000f22:	1d88      	adds	r0, r1, #6
 8000f24:	f001 bee4 	b.w	8002cf0 <v8bitRegisterDEC>
 8000f28:	24001658 	.word	0x24001658

08000f2c <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000f2c:	4901      	ldr	r1, [pc, #4]	; (8000f34 <vDEC_A+0x8>)
 8000f2e:	1c48      	adds	r0, r1, #1
 8000f30:	f001 bede 	b.w	8002cf0 <v8bitRegisterDEC>
 8000f34:	24001658 	.word	0x24001658

08000f38 <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000f38:	4901      	ldr	r1, [pc, #4]	; (8000f40 <vRLCA+0x8>)
 8000f3a:	1c48      	adds	r0, r1, #1
 8000f3c:	f001 bef8 	b.w	8002d30 <vGBFunctionRLCA>
 8000f40:	24001658 	.word	0x24001658

08000f44 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <vLDs_a16_SP+0x2c>)
 8000f48:	8960      	ldrh	r0, [r4, #10]
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	b280      	uxth	r0, r0
 8000f4e:	f002 fba9 	bl	80036a4 <ucGBMemoryRead>
 8000f52:	8963      	ldrh	r3, [r4, #10]
 8000f54:	4605      	mov	r5, r0
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	b280      	uxth	r0, r0
 8000f5a:	f002 fba3 	bl	80036a4 <ucGBMemoryRead>
 8000f5e:	4601      	mov	r1, r0
 8000f60:	4628      	mov	r0, r5
 8000f62:	f001 fe8f 	bl	8002c84 <usConcat16BitBigEndian>
 8000f66:	8921      	ldrh	r1, [r4, #8]
 8000f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f6c:	f002 bc3e 	b.w	80037ec <vGBMemoryWriteShort>
 8000f70:	24001658 	.word	0x24001658

08000f74 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000f74:	4a02      	ldr	r2, [pc, #8]	; (8000f80 <vADDs_HL_BC+0xc>)
 8000f76:	8851      	ldrh	r1, [r2, #2]
 8000f78:	1d90      	adds	r0, r2, #6
 8000f7a:	f001 bef7 	b.w	8002d6c <vGBFunction16bitADD>
 8000f7e:	bf00      	nop
 8000f80:	24001658 	.word	0x24001658

08000f84 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000f84:	4a02      	ldr	r2, [pc, #8]	; (8000f90 <vADDs_HL_DE+0xc>)
 8000f86:	8891      	ldrh	r1, [r2, #4]
 8000f88:	1d90      	adds	r0, r2, #6
 8000f8a:	f001 beef 	b.w	8002d6c <vGBFunction16bitADD>
 8000f8e:	bf00      	nop
 8000f90:	24001658 	.word	0x24001658

08000f94 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <vADDs_HL_HL+0xc>)
 8000f96:	4602      	mov	r2, r0
 8000f98:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000f9c:	f001 bee6 	b.w	8002d6c <vGBFunction16bitADD>
 8000fa0:	24001658 	.word	0x24001658

08000fa4 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000fa4:	4a02      	ldr	r2, [pc, #8]	; (8000fb0 <vADDs_HL_SP+0xc>)
 8000fa6:	8911      	ldrh	r1, [r2, #8]
 8000fa8:	1d90      	adds	r0, r2, #6
 8000faa:	f001 bedf 	b.w	8002d6c <vGBFunction16bitADD>
 8000fae:	bf00      	nop
 8000fb0:	24001658 	.word	0x24001658

08000fb4 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000fb4:	4901      	ldr	r1, [pc, #4]	; (8000fbc <vRRCA+0x8>)
 8000fb6:	1c48      	adds	r0, r1, #1
 8000fb8:	f001 bec6 	b.w	8002d48 <vGBFunctionRRCA>
 8000fbc:	24001658 	.word	0x24001658

08000fc0 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000fc0:	4901      	ldr	r1, [pc, #4]	; (8000fc8 <vRLA+0x8>)
 8000fc2:	1c48      	adds	r0, r1, #1
 8000fc4:	f001 befa 	b.w	8002dbc <vGBFunctionRLA>
 8000fc8:	24001658 	.word	0x24001658

08000fcc <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000fcc:	4901      	ldr	r1, [pc, #4]	; (8000fd4 <vRRA+0x8>)
 8000fce:	1c48      	adds	r0, r1, #1
 8000fd0:	f001 bf02 	b.w	8002dd8 <vGBFunctionRRA>
 8000fd4:	24001658 	.word	0x24001658

08000fd8 <vJR_NZ_r8>:
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d08      	ldr	r5, [pc, #32]	; (8000ffc <vJR_NZ_r8+0x24>)
 8000fdc:	462c      	mov	r4, r5
 8000fde:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fe2:	3801      	subs	r0, #1
 8000fe4:	b280      	uxth	r0, r0
 8000fe6:	f002 fb5d 	bl	80036a4 <ucGBMemoryRead>
 8000fea:	4629      	mov	r1, r5
 8000fec:	4602      	mov	r2, r0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f001 ff00 	bl	8002df4 <vGBFunctionJR_NZ>
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <vJR_NZ_r8+0x28>)
 8000ff6:	7018      	strb	r0, [r3, #0]
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24001658 	.word	0x24001658
 8001000:	240010a0 	.word	0x240010a0

08001004 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8001004:	4901      	ldr	r1, [pc, #4]	; (800100c <vDAA+0x8>)
 8001006:	1c48      	adds	r0, r1, #1
 8001008:	f001 bf00 	b.w	8002e0c <vGBFunctionDAA>
 800100c:	24001658 	.word	0x24001658

08001010 <vJR_Z_r8>:
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d08      	ldr	r5, [pc, #32]	; (8001034 <vJR_Z_r8+0x24>)
 8001014:	462c      	mov	r4, r5
 8001016:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800101a:	3801      	subs	r0, #1
 800101c:	b280      	uxth	r0, r0
 800101e:	f002 fb41 	bl	80036a4 <ucGBMemoryRead>
 8001022:	4629      	mov	r1, r5
 8001024:	4602      	mov	r2, r0
 8001026:	4620      	mov	r0, r4
 8001028:	f001 ff2e 	bl	8002e88 <vGBFunctionJR_Z>
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <vJR_Z_r8+0x28>)
 800102e:	7018      	strb	r0, [r3, #0]
 8001030:	bd38      	pop	{r3, r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	24001658 	.word	0x24001658
 8001038:	240010a0 	.word	0x240010a0

0800103c <vCPL>:
void vCPL(){          reg.A = ~(reg.A); vSetBit(&reg.F, N_FLAG); vSetBit(&reg.F, H_FLAG);}
 800103c:	b510      	push	{r4, lr}
 800103e:	4c07      	ldr	r4, [pc, #28]	; (800105c <vCPL+0x20>)
 8001040:	2106      	movs	r1, #6
 8001042:	7863      	ldrb	r3, [r4, #1]
 8001044:	4620      	mov	r0, r4
 8001046:	43db      	mvns	r3, r3
 8001048:	7063      	strb	r3, [r4, #1]
 800104a:	f001 fe1f 	bl	8002c8c <vSetBit>
 800104e:	4620      	mov	r0, r4
 8001050:	2105      	movs	r1, #5
 8001052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001056:	f001 be19 	b.w	8002c8c <vSetBit>
 800105a:	bf00      	nop
 800105c:	24001658 	.word	0x24001658

08001060 <vSET_0_B>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      vResetBit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      vSetBit(&reg.B, 0);}
 8001060:	2100      	movs	r1, #0
 8001062:	4801      	ldr	r0, [pc, #4]	; (8001068 <vSET_0_B+0x8>)
 8001064:	f001 be12 	b.w	8002c8c <vSetBit>
 8001068:	2400165b 	.word	0x2400165b

0800106c <vSET_0_C>:
void vSET_0_C(){      vSetBit(&reg.C, 0);}
 800106c:	2100      	movs	r1, #0
 800106e:	4801      	ldr	r0, [pc, #4]	; (8001074 <vSET_0_C+0x8>)
 8001070:	f001 be0c 	b.w	8002c8c <vSetBit>
 8001074:	2400165a 	.word	0x2400165a

08001078 <vSET_0_D>:
void vSET_0_D(){      vSetBit(&reg.D, 0);}
 8001078:	2100      	movs	r1, #0
 800107a:	4801      	ldr	r0, [pc, #4]	; (8001080 <vSET_0_D+0x8>)
 800107c:	f001 be06 	b.w	8002c8c <vSetBit>
 8001080:	2400165d 	.word	0x2400165d

08001084 <vSET_0_E>:
void vSET_0_E(){      vSetBit(&reg.E, 0);}
 8001084:	2100      	movs	r1, #0
 8001086:	4801      	ldr	r0, [pc, #4]	; (800108c <vSET_0_E+0x8>)
 8001088:	f001 be00 	b.w	8002c8c <vSetBit>
 800108c:	2400165c 	.word	0x2400165c

08001090 <vSET_0_H>:
void vSET_0_H(){      vSetBit(&reg.H, 0);}
 8001090:	2100      	movs	r1, #0
 8001092:	4801      	ldr	r0, [pc, #4]	; (8001098 <vSET_0_H+0x8>)
 8001094:	f001 bdfa 	b.w	8002c8c <vSetBit>
 8001098:	2400165f 	.word	0x2400165f

0800109c <vSET_0_L>:
void vSET_0_L(){      vSetBit(&reg.L, 0);}
 800109c:	2100      	movs	r1, #0
 800109e:	4801      	ldr	r0, [pc, #4]	; (80010a4 <vSET_0_L+0x8>)
 80010a0:	f001 bdf4 	b.w	8002c8c <vSetBit>
 80010a4:	2400165e 	.word	0x2400165e

080010a8 <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      vSetBit(&reg.A, 0);}
 80010a8:	2100      	movs	r1, #0
 80010aa:	4801      	ldr	r0, [pc, #4]	; (80010b0 <vSET_0_A+0x8>)
 80010ac:	f001 bdee 	b.w	8002c8c <vSetBit>
 80010b0:	24001659 	.word	0x24001659

080010b4 <vSET_1_B>:
void vSET_1_B(){      vSetBit(&reg.B, 1);}
 80010b4:	2101      	movs	r1, #1
 80010b6:	4801      	ldr	r0, [pc, #4]	; (80010bc <vSET_1_B+0x8>)
 80010b8:	f001 bde8 	b.w	8002c8c <vSetBit>
 80010bc:	2400165b 	.word	0x2400165b

080010c0 <vSET_1_C>:
void vSET_1_C(){      vSetBit(&reg.C, 1);}
 80010c0:	2101      	movs	r1, #1
 80010c2:	4801      	ldr	r0, [pc, #4]	; (80010c8 <vSET_1_C+0x8>)
 80010c4:	f001 bde2 	b.w	8002c8c <vSetBit>
 80010c8:	2400165a 	.word	0x2400165a

080010cc <vSET_1_D>:
void vSET_1_D(){      vSetBit(&reg.D, 1);}
 80010cc:	2101      	movs	r1, #1
 80010ce:	4801      	ldr	r0, [pc, #4]	; (80010d4 <vSET_1_D+0x8>)
 80010d0:	f001 bddc 	b.w	8002c8c <vSetBit>
 80010d4:	2400165d 	.word	0x2400165d

080010d8 <vSET_1_E>:
void vSET_1_E(){      vSetBit(&reg.E, 1);}
 80010d8:	2101      	movs	r1, #1
 80010da:	4801      	ldr	r0, [pc, #4]	; (80010e0 <vSET_1_E+0x8>)
 80010dc:	f001 bdd6 	b.w	8002c8c <vSetBit>
 80010e0:	2400165c 	.word	0x2400165c

080010e4 <vSET_1_H>:
void vSET_1_H(){      vSetBit(&reg.H, 1);}
 80010e4:	2101      	movs	r1, #1
 80010e6:	4801      	ldr	r0, [pc, #4]	; (80010ec <vSET_1_H+0x8>)
 80010e8:	f001 bdd0 	b.w	8002c8c <vSetBit>
 80010ec:	2400165f 	.word	0x2400165f

080010f0 <vSET_1_L>:
void vSET_1_L(){      vSetBit(&reg.L, 1);}
 80010f0:	2101      	movs	r1, #1
 80010f2:	4801      	ldr	r0, [pc, #4]	; (80010f8 <vSET_1_L+0x8>)
 80010f4:	f001 bdca 	b.w	8002c8c <vSetBit>
 80010f8:	2400165e 	.word	0x2400165e

080010fc <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      vSetBit(&reg.A, 1);}
 80010fc:	2101      	movs	r1, #1
 80010fe:	4801      	ldr	r0, [pc, #4]	; (8001104 <vSET_1_A+0x8>)
 8001100:	f001 bdc4 	b.w	8002c8c <vSetBit>
 8001104:	24001659 	.word	0x24001659

08001108 <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      vSetBit(&reg.B, 2);}
 8001108:	2102      	movs	r1, #2
 800110a:	4801      	ldr	r0, [pc, #4]	; (8001110 <vSET_2_B+0x8>)
 800110c:	f001 bdbe 	b.w	8002c8c <vSetBit>
 8001110:	2400165b 	.word	0x2400165b

08001114 <vSET_2_C>:
void vSET_2_C(){      vSetBit(&reg.C, 2);}
 8001114:	2102      	movs	r1, #2
 8001116:	4801      	ldr	r0, [pc, #4]	; (800111c <vSET_2_C+0x8>)
 8001118:	f001 bdb8 	b.w	8002c8c <vSetBit>
 800111c:	2400165a 	.word	0x2400165a

08001120 <vSET_2_D>:
void vSET_2_D(){      vSetBit(&reg.D, 2);}
 8001120:	2102      	movs	r1, #2
 8001122:	4801      	ldr	r0, [pc, #4]	; (8001128 <vSET_2_D+0x8>)
 8001124:	f001 bdb2 	b.w	8002c8c <vSetBit>
 8001128:	2400165d 	.word	0x2400165d

0800112c <vSET_2_E>:
void vSET_2_E(){      vSetBit(&reg.E, 2);}
 800112c:	2102      	movs	r1, #2
 800112e:	4801      	ldr	r0, [pc, #4]	; (8001134 <vSET_2_E+0x8>)
 8001130:	f001 bdac 	b.w	8002c8c <vSetBit>
 8001134:	2400165c 	.word	0x2400165c

08001138 <vSET_2_H>:
void vSET_2_H(){      vSetBit(&reg.H, 2);}
 8001138:	2102      	movs	r1, #2
 800113a:	4801      	ldr	r0, [pc, #4]	; (8001140 <vSET_2_H+0x8>)
 800113c:	f001 bda6 	b.w	8002c8c <vSetBit>
 8001140:	2400165f 	.word	0x2400165f

08001144 <vSET_2_L>:
void vSET_2_L(){      vSetBit(&reg.L, 2);}
 8001144:	2102      	movs	r1, #2
 8001146:	4801      	ldr	r0, [pc, #4]	; (800114c <vSET_2_L+0x8>)
 8001148:	f001 bda0 	b.w	8002c8c <vSetBit>
 800114c:	2400165e 	.word	0x2400165e

08001150 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      vSetBit(&reg.A, 2);}
 8001150:	2102      	movs	r1, #2
 8001152:	4801      	ldr	r0, [pc, #4]	; (8001158 <vSET_2_A+0x8>)
 8001154:	f001 bd9a 	b.w	8002c8c <vSetBit>
 8001158:	24001659 	.word	0x24001659

0800115c <vSET_3_B>:
void vSET_3_B(){      vSetBit(&reg.B, 3);}
 800115c:	2103      	movs	r1, #3
 800115e:	4801      	ldr	r0, [pc, #4]	; (8001164 <vSET_3_B+0x8>)
 8001160:	f001 bd94 	b.w	8002c8c <vSetBit>
 8001164:	2400165b 	.word	0x2400165b

08001168 <vSET_3_C>:
void vSET_3_C(){      vSetBit(&reg.C, 3);}
 8001168:	2103      	movs	r1, #3
 800116a:	4801      	ldr	r0, [pc, #4]	; (8001170 <vSET_3_C+0x8>)
 800116c:	f001 bd8e 	b.w	8002c8c <vSetBit>
 8001170:	2400165a 	.word	0x2400165a

08001174 <vSET_3_D>:
void vSET_3_D(){      vSetBit(&reg.D, 3);}
 8001174:	2103      	movs	r1, #3
 8001176:	4801      	ldr	r0, [pc, #4]	; (800117c <vSET_3_D+0x8>)
 8001178:	f001 bd88 	b.w	8002c8c <vSetBit>
 800117c:	2400165d 	.word	0x2400165d

08001180 <vSET_3_E>:
void vSET_3_E(){      vSetBit(&reg.E, 3);}
 8001180:	2103      	movs	r1, #3
 8001182:	4801      	ldr	r0, [pc, #4]	; (8001188 <vSET_3_E+0x8>)
 8001184:	f001 bd82 	b.w	8002c8c <vSetBit>
 8001188:	2400165c 	.word	0x2400165c

0800118c <vSET_3_H>:
void vSET_3_H(){      vSetBit(&reg.H, 3);}
 800118c:	2103      	movs	r1, #3
 800118e:	4801      	ldr	r0, [pc, #4]	; (8001194 <vSET_3_H+0x8>)
 8001190:	f001 bd7c 	b.w	8002c8c <vSetBit>
 8001194:	2400165f 	.word	0x2400165f

08001198 <vSET_3_L>:
void vSET_3_L(){      vSetBit(&reg.L, 3);}
 8001198:	2103      	movs	r1, #3
 800119a:	4801      	ldr	r0, [pc, #4]	; (80011a0 <vSET_3_L+0x8>)
 800119c:	f001 bd76 	b.w	8002c8c <vSetBit>
 80011a0:	2400165e 	.word	0x2400165e

080011a4 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      vSetBit(&reg.A, 3);}
 80011a4:	2103      	movs	r1, #3
 80011a6:	4801      	ldr	r0, [pc, #4]	; (80011ac <vSET_3_A+0x8>)
 80011a8:	f001 bd70 	b.w	8002c8c <vSetBit>
 80011ac:	24001659 	.word	0x24001659

080011b0 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      vSetBit(&reg.B, 4);}
 80011b0:	2104      	movs	r1, #4
 80011b2:	4801      	ldr	r0, [pc, #4]	; (80011b8 <vSET_4_B+0x8>)
 80011b4:	f001 bd6a 	b.w	8002c8c <vSetBit>
 80011b8:	2400165b 	.word	0x2400165b

080011bc <vSET_4_C>:
void vSET_4_C(){      vSetBit(&reg.C, 4);}
 80011bc:	2104      	movs	r1, #4
 80011be:	4801      	ldr	r0, [pc, #4]	; (80011c4 <vSET_4_C+0x8>)
 80011c0:	f001 bd64 	b.w	8002c8c <vSetBit>
 80011c4:	2400165a 	.word	0x2400165a

080011c8 <vSET_4_D>:
void vSET_4_D(){      vSetBit(&reg.D, 4);}
 80011c8:	2104      	movs	r1, #4
 80011ca:	4801      	ldr	r0, [pc, #4]	; (80011d0 <vSET_4_D+0x8>)
 80011cc:	f001 bd5e 	b.w	8002c8c <vSetBit>
 80011d0:	2400165d 	.word	0x2400165d

080011d4 <vSET_4_E>:
void vSET_4_E(){      vSetBit(&reg.E, 4);}
 80011d4:	2104      	movs	r1, #4
 80011d6:	4801      	ldr	r0, [pc, #4]	; (80011dc <vSET_4_E+0x8>)
 80011d8:	f001 bd58 	b.w	8002c8c <vSetBit>
 80011dc:	2400165c 	.word	0x2400165c

080011e0 <vSET_4_H>:
void vSET_4_H(){      vSetBit(&reg.H, 4);}
 80011e0:	2104      	movs	r1, #4
 80011e2:	4801      	ldr	r0, [pc, #4]	; (80011e8 <vSET_4_H+0x8>)
 80011e4:	f001 bd52 	b.w	8002c8c <vSetBit>
 80011e8:	2400165f 	.word	0x2400165f

080011ec <vSET_4_L>:
void vSET_4_L(){      vSetBit(&reg.L, 4);}
 80011ec:	2104      	movs	r1, #4
 80011ee:	4801      	ldr	r0, [pc, #4]	; (80011f4 <vSET_4_L+0x8>)
 80011f0:	f001 bd4c 	b.w	8002c8c <vSetBit>
 80011f4:	2400165e 	.word	0x2400165e

080011f8 <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      vSetBit(&reg.A, 4);}
 80011f8:	2104      	movs	r1, #4
 80011fa:	4801      	ldr	r0, [pc, #4]	; (8001200 <vSET_4_A+0x8>)
 80011fc:	f001 bd46 	b.w	8002c8c <vSetBit>
 8001200:	24001659 	.word	0x24001659

08001204 <vSET_5_B>:
void vSET_5_B(){      vSetBit(&reg.B, 5);}
 8001204:	2105      	movs	r1, #5
 8001206:	4801      	ldr	r0, [pc, #4]	; (800120c <vSET_5_B+0x8>)
 8001208:	f001 bd40 	b.w	8002c8c <vSetBit>
 800120c:	2400165b 	.word	0x2400165b

08001210 <vSET_5_C>:
void vSET_5_C(){      vSetBit(&reg.C, 5);}
 8001210:	2105      	movs	r1, #5
 8001212:	4801      	ldr	r0, [pc, #4]	; (8001218 <vSET_5_C+0x8>)
 8001214:	f001 bd3a 	b.w	8002c8c <vSetBit>
 8001218:	2400165a 	.word	0x2400165a

0800121c <vSET_5_D>:
void vSET_5_D(){      vSetBit(&reg.D, 5);}
 800121c:	2105      	movs	r1, #5
 800121e:	4801      	ldr	r0, [pc, #4]	; (8001224 <vSET_5_D+0x8>)
 8001220:	f001 bd34 	b.w	8002c8c <vSetBit>
 8001224:	2400165d 	.word	0x2400165d

08001228 <vSET_5_E>:
void vSET_5_E(){      vSetBit(&reg.E, 5);}
 8001228:	2105      	movs	r1, #5
 800122a:	4801      	ldr	r0, [pc, #4]	; (8001230 <vSET_5_E+0x8>)
 800122c:	f001 bd2e 	b.w	8002c8c <vSetBit>
 8001230:	2400165c 	.word	0x2400165c

08001234 <vSET_5_H>:
void vSET_5_H(){      vSetBit(&reg.H, 5);}
 8001234:	2105      	movs	r1, #5
 8001236:	4801      	ldr	r0, [pc, #4]	; (800123c <vSET_5_H+0x8>)
 8001238:	f001 bd28 	b.w	8002c8c <vSetBit>
 800123c:	2400165f 	.word	0x2400165f

08001240 <vSET_5_L>:
void vSET_5_L(){      vSetBit(&reg.L, 5);}
 8001240:	2105      	movs	r1, #5
 8001242:	4801      	ldr	r0, [pc, #4]	; (8001248 <vSET_5_L+0x8>)
 8001244:	f001 bd22 	b.w	8002c8c <vSetBit>
 8001248:	2400165e 	.word	0x2400165e

0800124c <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      vSetBit(&reg.A, 5);}
 800124c:	2105      	movs	r1, #5
 800124e:	4801      	ldr	r0, [pc, #4]	; (8001254 <vSET_5_A+0x8>)
 8001250:	f001 bd1c 	b.w	8002c8c <vSetBit>
 8001254:	24001659 	.word	0x24001659

08001258 <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      vSetBit(&reg.B, 6);}
 8001258:	2106      	movs	r1, #6
 800125a:	4801      	ldr	r0, [pc, #4]	; (8001260 <vSET_6_B+0x8>)
 800125c:	f001 bd16 	b.w	8002c8c <vSetBit>
 8001260:	2400165b 	.word	0x2400165b

08001264 <vSET_6_C>:
void vSET_6_C(){      vSetBit(&reg.C, 6);}
 8001264:	2106      	movs	r1, #6
 8001266:	4801      	ldr	r0, [pc, #4]	; (800126c <vSET_6_C+0x8>)
 8001268:	f001 bd10 	b.w	8002c8c <vSetBit>
 800126c:	2400165a 	.word	0x2400165a

08001270 <vSET_6_D>:
void vSET_6_D(){      vSetBit(&reg.D, 6);}
 8001270:	2106      	movs	r1, #6
 8001272:	4801      	ldr	r0, [pc, #4]	; (8001278 <vSET_6_D+0x8>)
 8001274:	f001 bd0a 	b.w	8002c8c <vSetBit>
 8001278:	2400165d 	.word	0x2400165d

0800127c <vSET_6_E>:
void vSET_6_E(){      vSetBit(&reg.E, 6);}
 800127c:	2106      	movs	r1, #6
 800127e:	4801      	ldr	r0, [pc, #4]	; (8001284 <vSET_6_E+0x8>)
 8001280:	f001 bd04 	b.w	8002c8c <vSetBit>
 8001284:	2400165c 	.word	0x2400165c

08001288 <vSET_6_H>:
void vSET_6_H(){      vSetBit(&reg.H, 6);}
 8001288:	2106      	movs	r1, #6
 800128a:	4801      	ldr	r0, [pc, #4]	; (8001290 <vSET_6_H+0x8>)
 800128c:	f001 bcfe 	b.w	8002c8c <vSetBit>
 8001290:	2400165f 	.word	0x2400165f

08001294 <vSET_6_L>:
void vSET_6_L(){      vSetBit(&reg.L, 6);}
 8001294:	2106      	movs	r1, #6
 8001296:	4801      	ldr	r0, [pc, #4]	; (800129c <vSET_6_L+0x8>)
 8001298:	f001 bcf8 	b.w	8002c8c <vSetBit>
 800129c:	2400165e 	.word	0x2400165e

080012a0 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      vSetBit(&reg.A, 6);}
 80012a0:	2106      	movs	r1, #6
 80012a2:	4801      	ldr	r0, [pc, #4]	; (80012a8 <vSET_6_A+0x8>)
 80012a4:	f001 bcf2 	b.w	8002c8c <vSetBit>
 80012a8:	24001659 	.word	0x24001659

080012ac <vSET_7_B>:
void vSET_7_B(){      vSetBit(&reg.B, 7);}
 80012ac:	2107      	movs	r1, #7
 80012ae:	4801      	ldr	r0, [pc, #4]	; (80012b4 <vSET_7_B+0x8>)
 80012b0:	f001 bcec 	b.w	8002c8c <vSetBit>
 80012b4:	2400165b 	.word	0x2400165b

080012b8 <vSET_7_C>:
void vSET_7_C(){      vSetBit(&reg.C, 7);}
 80012b8:	2107      	movs	r1, #7
 80012ba:	4801      	ldr	r0, [pc, #4]	; (80012c0 <vSET_7_C+0x8>)
 80012bc:	f001 bce6 	b.w	8002c8c <vSetBit>
 80012c0:	2400165a 	.word	0x2400165a

080012c4 <vSET_7_D>:
void vSET_7_D(){      vSetBit(&reg.D, 7);}
 80012c4:	2107      	movs	r1, #7
 80012c6:	4801      	ldr	r0, [pc, #4]	; (80012cc <vSET_7_D+0x8>)
 80012c8:	f001 bce0 	b.w	8002c8c <vSetBit>
 80012cc:	2400165d 	.word	0x2400165d

080012d0 <vSET_7_E>:
void vSET_7_E(){      vSetBit(&reg.E, 7);}
 80012d0:	2107      	movs	r1, #7
 80012d2:	4801      	ldr	r0, [pc, #4]	; (80012d8 <vSET_7_E+0x8>)
 80012d4:	f001 bcda 	b.w	8002c8c <vSetBit>
 80012d8:	2400165c 	.word	0x2400165c

080012dc <vSET_7_H>:
void vSET_7_H(){      vSetBit(&reg.H, 7);}
 80012dc:	2107      	movs	r1, #7
 80012de:	4801      	ldr	r0, [pc, #4]	; (80012e4 <vSET_7_H+0x8>)
 80012e0:	f001 bcd4 	b.w	8002c8c <vSetBit>
 80012e4:	2400165f 	.word	0x2400165f

080012e8 <vSET_7_L>:
void vSET_7_L(){      vSetBit(&reg.L, 7);}
 80012e8:	2107      	movs	r1, #7
 80012ea:	4801      	ldr	r0, [pc, #4]	; (80012f0 <vSET_7_L+0x8>)
 80012ec:	f001 bcce 	b.w	8002c8c <vSetBit>
 80012f0:	2400165e 	.word	0x2400165e

080012f4 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      vSetBit(&reg.A, 7);}
 80012f4:	2107      	movs	r1, #7
 80012f6:	4801      	ldr	r0, [pc, #4]	; (80012fc <vSET_7_A+0x8>)
 80012f8:	f001 bcc8 	b.w	8002c8c <vSetBit>
 80012fc:	24001659 	.word	0x24001659

08001300 <vJR_NC_r8>:
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d08      	ldr	r5, [pc, #32]	; (8001324 <vJR_NC_r8+0x24>)
 8001304:	462c      	mov	r4, r5
 8001306:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800130a:	3801      	subs	r0, #1
 800130c:	b280      	uxth	r0, r0
 800130e:	f002 f9c9 	bl	80036a4 <ucGBMemoryRead>
 8001312:	4629      	mov	r1, r5
 8001314:	4602      	mov	r2, r0
 8001316:	4620      	mov	r0, r4
 8001318:	f001 fdc2 	bl	8002ea0 <vGBFunctionJR_NC>
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <vJR_NC_r8+0x28>)
 800131e:	7018      	strb	r0, [r3, #0]
 8001320:	bd38      	pop	{r3, r4, r5, pc}
 8001322:	bf00      	nop
 8001324:	24001658 	.word	0x24001658
 8001328:	240010a0 	.word	0x240010a0

0800132c <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 800132c:	4901      	ldr	r1, [pc, #4]	; (8001334 <vINC_HL+0x8>)
 800132e:	88c8      	ldrh	r0, [r1, #6]
 8001330:	f001 bdc2 	b.w	8002eb8 <vMemoryLocationINC>
 8001334:	24001658 	.word	0x24001658

08001338 <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 8001338:	4901      	ldr	r1, [pc, #4]	; (8001340 <vDEC_HL+0x8>)
 800133a:	88c8      	ldrh	r0, [r1, #6]
 800133c:	f001 bde6 	b.w	8002f0c <vMemoryLocationDEC>
 8001340:	24001658 	.word	0x24001658

08001344 <vSCF>:
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
 8001344:	b508      	push	{r3, lr}
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <vSCF+0x20>)
 8001348:	2106      	movs	r1, #6
 800134a:	f001 fca7 	bl	8002c9c <vResetBit>
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <vSCF+0x20>)
 8001350:	2105      	movs	r1, #5
 8001352:	f001 fca3 	bl	8002c9c <vResetBit>
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <vSCF+0x20>)
 8001358:	2104      	movs	r1, #4
 800135a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800135e:	f001 bc95 	b.w	8002c8c <vSetBit>
 8001362:	bf00      	nop
 8001364:	24001658 	.word	0x24001658

08001368 <vRES_0_B>:
void vRES_0_B(){      vResetBit(&reg.B, 0);}
 8001368:	2100      	movs	r1, #0
 800136a:	4801      	ldr	r0, [pc, #4]	; (8001370 <vRES_0_B+0x8>)
 800136c:	f001 bc96 	b.w	8002c9c <vResetBit>
 8001370:	2400165b 	.word	0x2400165b

08001374 <vRES_0_C>:
void vRES_0_C(){      vResetBit(&reg.C, 0);}
 8001374:	2100      	movs	r1, #0
 8001376:	4801      	ldr	r0, [pc, #4]	; (800137c <vRES_0_C+0x8>)
 8001378:	f001 bc90 	b.w	8002c9c <vResetBit>
 800137c:	2400165a 	.word	0x2400165a

08001380 <vRES_0_D>:
void vRES_0_D(){      vResetBit(&reg.D, 0);}
 8001380:	2100      	movs	r1, #0
 8001382:	4801      	ldr	r0, [pc, #4]	; (8001388 <vRES_0_D+0x8>)
 8001384:	f001 bc8a 	b.w	8002c9c <vResetBit>
 8001388:	2400165d 	.word	0x2400165d

0800138c <vRES_0_E>:
void vRES_0_E(){      vResetBit(&reg.E, 0);}
 800138c:	2100      	movs	r1, #0
 800138e:	4801      	ldr	r0, [pc, #4]	; (8001394 <vRES_0_E+0x8>)
 8001390:	f001 bc84 	b.w	8002c9c <vResetBit>
 8001394:	2400165c 	.word	0x2400165c

08001398 <vRES_0_H>:
void vRES_0_H(){      vResetBit(&reg.H, 0);}
 8001398:	2100      	movs	r1, #0
 800139a:	4801      	ldr	r0, [pc, #4]	; (80013a0 <vRES_0_H+0x8>)
 800139c:	f001 bc7e 	b.w	8002c9c <vResetBit>
 80013a0:	2400165f 	.word	0x2400165f

080013a4 <vRES_0_L>:
void vRES_0_L(){      vResetBit(&reg.L, 0);}
 80013a4:	2100      	movs	r1, #0
 80013a6:	4801      	ldr	r0, [pc, #4]	; (80013ac <vRES_0_L+0x8>)
 80013a8:	f001 bc78 	b.w	8002c9c <vResetBit>
 80013ac:	2400165e 	.word	0x2400165e

080013b0 <vRES_0_A>:
void vRES_0_A(){      vResetBit(&reg.A, 0);}
 80013b0:	2100      	movs	r1, #0
 80013b2:	4801      	ldr	r0, [pc, #4]	; (80013b8 <vRES_0_A+0x8>)
 80013b4:	f001 bc72 	b.w	8002c9c <vResetBit>
 80013b8:	24001659 	.word	0x24001659

080013bc <vRES_1_B>:
void vRES_1_B(){      vResetBit(&reg.B, 1);}
 80013bc:	2101      	movs	r1, #1
 80013be:	4801      	ldr	r0, [pc, #4]	; (80013c4 <vRES_1_B+0x8>)
 80013c0:	f001 bc6c 	b.w	8002c9c <vResetBit>
 80013c4:	2400165b 	.word	0x2400165b

080013c8 <vRES_1_C>:
void vRES_1_C(){      vResetBit(&reg.C, 1);}
 80013c8:	2101      	movs	r1, #1
 80013ca:	4801      	ldr	r0, [pc, #4]	; (80013d0 <vRES_1_C+0x8>)
 80013cc:	f001 bc66 	b.w	8002c9c <vResetBit>
 80013d0:	2400165a 	.word	0x2400165a

080013d4 <vRES_1_D>:
void vRES_1_D(){      vResetBit(&reg.D, 1);}
 80013d4:	2101      	movs	r1, #1
 80013d6:	4801      	ldr	r0, [pc, #4]	; (80013dc <vRES_1_D+0x8>)
 80013d8:	f001 bc60 	b.w	8002c9c <vResetBit>
 80013dc:	2400165d 	.word	0x2400165d

080013e0 <vRES_1_E>:
void vRES_1_E(){      vResetBit(&reg.E, 1);}
 80013e0:	2101      	movs	r1, #1
 80013e2:	4801      	ldr	r0, [pc, #4]	; (80013e8 <vRES_1_E+0x8>)
 80013e4:	f001 bc5a 	b.w	8002c9c <vResetBit>
 80013e8:	2400165c 	.word	0x2400165c

080013ec <vRES_1_H>:
void vRES_1_H(){      vResetBit(&reg.H, 1);}
 80013ec:	2101      	movs	r1, #1
 80013ee:	4801      	ldr	r0, [pc, #4]	; (80013f4 <vRES_1_H+0x8>)
 80013f0:	f001 bc54 	b.w	8002c9c <vResetBit>
 80013f4:	2400165f 	.word	0x2400165f

080013f8 <vRES_1_L>:
void vRES_1_L(){      vResetBit(&reg.L, 1);}
 80013f8:	2101      	movs	r1, #1
 80013fa:	4801      	ldr	r0, [pc, #4]	; (8001400 <vRES_1_L+0x8>)
 80013fc:	f001 bc4e 	b.w	8002c9c <vResetBit>
 8001400:	2400165e 	.word	0x2400165e

08001404 <vRES_1_A>:
void vRES_1_A(){      vResetBit(&reg.A, 1);}
 8001404:	2101      	movs	r1, #1
 8001406:	4801      	ldr	r0, [pc, #4]	; (800140c <vRES_1_A+0x8>)
 8001408:	f001 bc48 	b.w	8002c9c <vResetBit>
 800140c:	24001659 	.word	0x24001659

08001410 <vRES_2_B>:
void vRES_2_B(){      vResetBit(&reg.B, 2);}
 8001410:	2102      	movs	r1, #2
 8001412:	4801      	ldr	r0, [pc, #4]	; (8001418 <vRES_2_B+0x8>)
 8001414:	f001 bc42 	b.w	8002c9c <vResetBit>
 8001418:	2400165b 	.word	0x2400165b

0800141c <vRES_2_C>:
void vRES_2_C(){      vResetBit(&reg.C, 2);}
 800141c:	2102      	movs	r1, #2
 800141e:	4801      	ldr	r0, [pc, #4]	; (8001424 <vRES_2_C+0x8>)
 8001420:	f001 bc3c 	b.w	8002c9c <vResetBit>
 8001424:	2400165a 	.word	0x2400165a

08001428 <vRES_2_D>:
void vRES_2_D(){      vResetBit(&reg.D, 2);}
 8001428:	2102      	movs	r1, #2
 800142a:	4801      	ldr	r0, [pc, #4]	; (8001430 <vRES_2_D+0x8>)
 800142c:	f001 bc36 	b.w	8002c9c <vResetBit>
 8001430:	2400165d 	.word	0x2400165d

08001434 <vRES_2_E>:
void vRES_2_E(){      vResetBit(&reg.E, 2);}
 8001434:	2102      	movs	r1, #2
 8001436:	4801      	ldr	r0, [pc, #4]	; (800143c <vRES_2_E+0x8>)
 8001438:	f001 bc30 	b.w	8002c9c <vResetBit>
 800143c:	2400165c 	.word	0x2400165c

08001440 <vRES_2_H>:
void vRES_2_H(){      vResetBit(&reg.H, 2);}
 8001440:	2102      	movs	r1, #2
 8001442:	4801      	ldr	r0, [pc, #4]	; (8001448 <vRES_2_H+0x8>)
 8001444:	f001 bc2a 	b.w	8002c9c <vResetBit>
 8001448:	2400165f 	.word	0x2400165f

0800144c <vRES_2_L>:
void vRES_2_L(){      vResetBit(&reg.L, 2);}
 800144c:	2102      	movs	r1, #2
 800144e:	4801      	ldr	r0, [pc, #4]	; (8001454 <vRES_2_L+0x8>)
 8001450:	f001 bc24 	b.w	8002c9c <vResetBit>
 8001454:	2400165e 	.word	0x2400165e

08001458 <vRES_2_A>:
void vRES_2_A(){      vResetBit(&reg.A, 2);}
 8001458:	2102      	movs	r1, #2
 800145a:	4801      	ldr	r0, [pc, #4]	; (8001460 <vRES_2_A+0x8>)
 800145c:	f001 bc1e 	b.w	8002c9c <vResetBit>
 8001460:	24001659 	.word	0x24001659

08001464 <vRES_3_B>:
void vRES_3_B(){      vResetBit(&reg.B, 3);}
 8001464:	2103      	movs	r1, #3
 8001466:	4801      	ldr	r0, [pc, #4]	; (800146c <vRES_3_B+0x8>)
 8001468:	f001 bc18 	b.w	8002c9c <vResetBit>
 800146c:	2400165b 	.word	0x2400165b

08001470 <vRES_3_C>:
void vRES_3_C(){      vResetBit(&reg.C, 3);}
 8001470:	2103      	movs	r1, #3
 8001472:	4801      	ldr	r0, [pc, #4]	; (8001478 <vRES_3_C+0x8>)
 8001474:	f001 bc12 	b.w	8002c9c <vResetBit>
 8001478:	2400165a 	.word	0x2400165a

0800147c <vRES_3_D>:
void vRES_3_D(){      vResetBit(&reg.D, 3);}
 800147c:	2103      	movs	r1, #3
 800147e:	4801      	ldr	r0, [pc, #4]	; (8001484 <vRES_3_D+0x8>)
 8001480:	f001 bc0c 	b.w	8002c9c <vResetBit>
 8001484:	2400165d 	.word	0x2400165d

08001488 <vRES_3_E>:
void vRES_3_E(){      vResetBit(&reg.E, 3);}
 8001488:	2103      	movs	r1, #3
 800148a:	4801      	ldr	r0, [pc, #4]	; (8001490 <vRES_3_E+0x8>)
 800148c:	f001 bc06 	b.w	8002c9c <vResetBit>
 8001490:	2400165c 	.word	0x2400165c

08001494 <vRES_3_H>:
void vRES_3_H(){      vResetBit(&reg.H, 3);}
 8001494:	2103      	movs	r1, #3
 8001496:	4801      	ldr	r0, [pc, #4]	; (800149c <vRES_3_H+0x8>)
 8001498:	f001 bc00 	b.w	8002c9c <vResetBit>
 800149c:	2400165f 	.word	0x2400165f

080014a0 <vRES_3_L>:
void vRES_3_L(){      vResetBit(&reg.L, 3);}
 80014a0:	2103      	movs	r1, #3
 80014a2:	4801      	ldr	r0, [pc, #4]	; (80014a8 <vRES_3_L+0x8>)
 80014a4:	f001 bbfa 	b.w	8002c9c <vResetBit>
 80014a8:	2400165e 	.word	0x2400165e

080014ac <vRES_3_A>:
void vRES_3_A(){      vResetBit(&reg.A, 3);}
 80014ac:	2103      	movs	r1, #3
 80014ae:	4801      	ldr	r0, [pc, #4]	; (80014b4 <vRES_3_A+0x8>)
 80014b0:	f001 bbf4 	b.w	8002c9c <vResetBit>
 80014b4:	24001659 	.word	0x24001659

080014b8 <vRES_4_B>:
void vRES_4_B(){      vResetBit(&reg.B, 4);}
 80014b8:	2104      	movs	r1, #4
 80014ba:	4801      	ldr	r0, [pc, #4]	; (80014c0 <vRES_4_B+0x8>)
 80014bc:	f001 bbee 	b.w	8002c9c <vResetBit>
 80014c0:	2400165b 	.word	0x2400165b

080014c4 <vRES_4_C>:
void vRES_4_C(){      vResetBit(&reg.C, 4);}
 80014c4:	2104      	movs	r1, #4
 80014c6:	4801      	ldr	r0, [pc, #4]	; (80014cc <vRES_4_C+0x8>)
 80014c8:	f001 bbe8 	b.w	8002c9c <vResetBit>
 80014cc:	2400165a 	.word	0x2400165a

080014d0 <vRES_4_D>:
void vRES_4_D(){      vResetBit(&reg.D, 4);}
 80014d0:	2104      	movs	r1, #4
 80014d2:	4801      	ldr	r0, [pc, #4]	; (80014d8 <vRES_4_D+0x8>)
 80014d4:	f001 bbe2 	b.w	8002c9c <vResetBit>
 80014d8:	2400165d 	.word	0x2400165d

080014dc <vRES_4_E>:
void vRES_4_E(){      vResetBit(&reg.E, 4);}
 80014dc:	2104      	movs	r1, #4
 80014de:	4801      	ldr	r0, [pc, #4]	; (80014e4 <vRES_4_E+0x8>)
 80014e0:	f001 bbdc 	b.w	8002c9c <vResetBit>
 80014e4:	2400165c 	.word	0x2400165c

080014e8 <vRES_4_H>:
void vRES_4_H(){      vResetBit(&reg.H, 4);}
 80014e8:	2104      	movs	r1, #4
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <vRES_4_H+0x8>)
 80014ec:	f001 bbd6 	b.w	8002c9c <vResetBit>
 80014f0:	2400165f 	.word	0x2400165f

080014f4 <vRES_4_L>:
void vRES_4_L(){      vResetBit(&reg.L, 4);}
 80014f4:	2104      	movs	r1, #4
 80014f6:	4801      	ldr	r0, [pc, #4]	; (80014fc <vRES_4_L+0x8>)
 80014f8:	f001 bbd0 	b.w	8002c9c <vResetBit>
 80014fc:	2400165e 	.word	0x2400165e

08001500 <vRES_4_A>:
void vRES_4_A(){      vResetBit(&reg.A, 4);}
 8001500:	2104      	movs	r1, #4
 8001502:	4801      	ldr	r0, [pc, #4]	; (8001508 <vRES_4_A+0x8>)
 8001504:	f001 bbca 	b.w	8002c9c <vResetBit>
 8001508:	24001659 	.word	0x24001659

0800150c <vRES_5_B>:
void vRES_5_B(){      vResetBit(&reg.B, 5);}
 800150c:	2105      	movs	r1, #5
 800150e:	4801      	ldr	r0, [pc, #4]	; (8001514 <vRES_5_B+0x8>)
 8001510:	f001 bbc4 	b.w	8002c9c <vResetBit>
 8001514:	2400165b 	.word	0x2400165b

08001518 <vRES_5_C>:
void vRES_5_C(){      vResetBit(&reg.C, 5);}
 8001518:	2105      	movs	r1, #5
 800151a:	4801      	ldr	r0, [pc, #4]	; (8001520 <vRES_5_C+0x8>)
 800151c:	f001 bbbe 	b.w	8002c9c <vResetBit>
 8001520:	2400165a 	.word	0x2400165a

08001524 <vRES_5_D>:
void vRES_5_D(){      vResetBit(&reg.D, 5);}
 8001524:	2105      	movs	r1, #5
 8001526:	4801      	ldr	r0, [pc, #4]	; (800152c <vRES_5_D+0x8>)
 8001528:	f001 bbb8 	b.w	8002c9c <vResetBit>
 800152c:	2400165d 	.word	0x2400165d

08001530 <vRES_5_E>:
void vRES_5_E(){      vResetBit(&reg.E, 5);}
 8001530:	2105      	movs	r1, #5
 8001532:	4801      	ldr	r0, [pc, #4]	; (8001538 <vRES_5_E+0x8>)
 8001534:	f001 bbb2 	b.w	8002c9c <vResetBit>
 8001538:	2400165c 	.word	0x2400165c

0800153c <vRES_5_H>:
void vRES_5_H(){      vResetBit(&reg.H, 5);}
 800153c:	2105      	movs	r1, #5
 800153e:	4801      	ldr	r0, [pc, #4]	; (8001544 <vRES_5_H+0x8>)
 8001540:	f001 bbac 	b.w	8002c9c <vResetBit>
 8001544:	2400165f 	.word	0x2400165f

08001548 <vRES_5_L>:
void vRES_5_L(){      vResetBit(&reg.L, 5);}
 8001548:	2105      	movs	r1, #5
 800154a:	4801      	ldr	r0, [pc, #4]	; (8001550 <vRES_5_L+0x8>)
 800154c:	f001 bba6 	b.w	8002c9c <vResetBit>
 8001550:	2400165e 	.word	0x2400165e

08001554 <vRES_5_A>:
void vRES_5_A(){      vResetBit(&reg.A, 5);}
 8001554:	2105      	movs	r1, #5
 8001556:	4801      	ldr	r0, [pc, #4]	; (800155c <vRES_5_A+0x8>)
 8001558:	f001 bba0 	b.w	8002c9c <vResetBit>
 800155c:	24001659 	.word	0x24001659

08001560 <vRES_6_B>:
void vRES_6_B(){      vResetBit(&reg.B, 6);}
 8001560:	2106      	movs	r1, #6
 8001562:	4801      	ldr	r0, [pc, #4]	; (8001568 <vRES_6_B+0x8>)
 8001564:	f001 bb9a 	b.w	8002c9c <vResetBit>
 8001568:	2400165b 	.word	0x2400165b

0800156c <vRES_6_C>:
void vRES_6_C(){      vResetBit(&reg.C, 6);}
 800156c:	2106      	movs	r1, #6
 800156e:	4801      	ldr	r0, [pc, #4]	; (8001574 <vRES_6_C+0x8>)
 8001570:	f001 bb94 	b.w	8002c9c <vResetBit>
 8001574:	2400165a 	.word	0x2400165a

08001578 <vRES_6_D>:
void vRES_6_D(){      vResetBit(&reg.D, 6);}
 8001578:	2106      	movs	r1, #6
 800157a:	4801      	ldr	r0, [pc, #4]	; (8001580 <vRES_6_D+0x8>)
 800157c:	f001 bb8e 	b.w	8002c9c <vResetBit>
 8001580:	2400165d 	.word	0x2400165d

08001584 <vRES_6_E>:
void vRES_6_E(){      vResetBit(&reg.E, 6);}
 8001584:	2106      	movs	r1, #6
 8001586:	4801      	ldr	r0, [pc, #4]	; (800158c <vRES_6_E+0x8>)
 8001588:	f001 bb88 	b.w	8002c9c <vResetBit>
 800158c:	2400165c 	.word	0x2400165c

08001590 <vRES_6_H>:
void vRES_6_H(){      vResetBit(&reg.H, 6);}
 8001590:	2106      	movs	r1, #6
 8001592:	4801      	ldr	r0, [pc, #4]	; (8001598 <vRES_6_H+0x8>)
 8001594:	f001 bb82 	b.w	8002c9c <vResetBit>
 8001598:	2400165f 	.word	0x2400165f

0800159c <vRES_6_L>:
void vRES_6_L(){      vResetBit(&reg.L, 6);}
 800159c:	2106      	movs	r1, #6
 800159e:	4801      	ldr	r0, [pc, #4]	; (80015a4 <vRES_6_L+0x8>)
 80015a0:	f001 bb7c 	b.w	8002c9c <vResetBit>
 80015a4:	2400165e 	.word	0x2400165e

080015a8 <vRES_6_A>:
void vRES_6_A(){      vResetBit(&reg.A, 6);}
 80015a8:	2106      	movs	r1, #6
 80015aa:	4801      	ldr	r0, [pc, #4]	; (80015b0 <vRES_6_A+0x8>)
 80015ac:	f001 bb76 	b.w	8002c9c <vResetBit>
 80015b0:	24001659 	.word	0x24001659

080015b4 <vRES_7_B>:
void vRES_7_B(){      vResetBit(&reg.B, 7);}
 80015b4:	2107      	movs	r1, #7
 80015b6:	4801      	ldr	r0, [pc, #4]	; (80015bc <vRES_7_B+0x8>)
 80015b8:	f001 bb70 	b.w	8002c9c <vResetBit>
 80015bc:	2400165b 	.word	0x2400165b

080015c0 <vRES_7_C>:
void vRES_7_C(){      vResetBit(&reg.C, 7);}
 80015c0:	2107      	movs	r1, #7
 80015c2:	4801      	ldr	r0, [pc, #4]	; (80015c8 <vRES_7_C+0x8>)
 80015c4:	f001 bb6a 	b.w	8002c9c <vResetBit>
 80015c8:	2400165a 	.word	0x2400165a

080015cc <vRES_7_D>:
void vRES_7_D(){      vResetBit(&reg.D, 7);}
 80015cc:	2107      	movs	r1, #7
 80015ce:	4801      	ldr	r0, [pc, #4]	; (80015d4 <vRES_7_D+0x8>)
 80015d0:	f001 bb64 	b.w	8002c9c <vResetBit>
 80015d4:	2400165d 	.word	0x2400165d

080015d8 <vRES_7_E>:
void vRES_7_E(){      vResetBit(&reg.E, 7);}
 80015d8:	2107      	movs	r1, #7
 80015da:	4801      	ldr	r0, [pc, #4]	; (80015e0 <vRES_7_E+0x8>)
 80015dc:	f001 bb5e 	b.w	8002c9c <vResetBit>
 80015e0:	2400165c 	.word	0x2400165c

080015e4 <vRES_7_H>:
void vRES_7_H(){      vResetBit(&reg.H, 7);}
 80015e4:	2107      	movs	r1, #7
 80015e6:	4801      	ldr	r0, [pc, #4]	; (80015ec <vRES_7_H+0x8>)
 80015e8:	f001 bb58 	b.w	8002c9c <vResetBit>
 80015ec:	2400165f 	.word	0x2400165f

080015f0 <vRES_7_L>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
 80015f0:	2107      	movs	r1, #7
 80015f2:	4801      	ldr	r0, [pc, #4]	; (80015f8 <vRES_7_L+0x8>)
 80015f4:	f001 bb52 	b.w	8002c9c <vResetBit>
 80015f8:	2400165e 	.word	0x2400165e

080015fc <vRES_7_A>:
void vRES_7_A(){      vResetBit(&reg.A, 7);}
 80015fc:	2107      	movs	r1, #7
 80015fe:	4801      	ldr	r0, [pc, #4]	; (8001604 <vRES_7_A+0x8>)
 8001600:	f001 bb4c 	b.w	8002c9c <vResetBit>
 8001604:	24001659 	.word	0x24001659

08001608 <vJR_C_r8>:
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	4d08      	ldr	r5, [pc, #32]	; (800162c <vJR_C_r8+0x24>)
 800160c:	462c      	mov	r4, r5
 800160e:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001612:	3801      	subs	r0, #1
 8001614:	b280      	uxth	r0, r0
 8001616:	f002 f845 	bl	80036a4 <ucGBMemoryRead>
 800161a:	4629      	mov	r1, r5
 800161c:	4602      	mov	r2, r0
 800161e:	4620      	mov	r0, r4
 8001620:	f001 fc9c 	bl	8002f5c <vGBFunctionJR_C>
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <vJR_C_r8+0x28>)
 8001626:	7018      	strb	r0, [r3, #0]
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	24001658 	.word	0x24001658
 8001630:	240010a0 	.word	0x240010a0

08001634 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADD_A_B+0xc>)
 8001636:	78ca      	ldrb	r2, [r1, #3]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc9b 	b.w	8002f74 <vGBFunctionADD>
 800163e:	bf00      	nop
 8001640:	24001658 	.word	0x24001658

08001644 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADD_A_C+0xc>)
 8001646:	788a      	ldrb	r2, [r1, #2]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc93 	b.w	8002f74 <vGBFunctionADD>
 800164e:	bf00      	nop
 8001650:	24001658 	.word	0x24001658

08001654 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADD_A_D+0xc>)
 8001656:	794a      	ldrb	r2, [r1, #5]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc8b 	b.w	8002f74 <vGBFunctionADD>
 800165e:	bf00      	nop
 8001660:	24001658 	.word	0x24001658

08001664 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 8001664:	4902      	ldr	r1, [pc, #8]	; (8001670 <vADD_A_E+0xc>)
 8001666:	790a      	ldrb	r2, [r1, #4]
 8001668:	1c48      	adds	r0, r1, #1
 800166a:	f001 bc83 	b.w	8002f74 <vGBFunctionADD>
 800166e:	bf00      	nop
 8001670:	24001658 	.word	0x24001658

08001674 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 8001674:	4902      	ldr	r1, [pc, #8]	; (8001680 <vADD_A_H+0xc>)
 8001676:	79ca      	ldrb	r2, [r1, #7]
 8001678:	1c48      	adds	r0, r1, #1
 800167a:	f001 bc7b 	b.w	8002f74 <vGBFunctionADD>
 800167e:	bf00      	nop
 8001680:	24001658 	.word	0x24001658

08001684 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <vADD_A_L+0xc>)
 8001686:	798a      	ldrb	r2, [r1, #6]
 8001688:	1c48      	adds	r0, r1, #1
 800168a:	f001 bc73 	b.w	8002f74 <vGBFunctionADD>
 800168e:	bf00      	nop
 8001690:	24001658 	.word	0x24001658

08001694 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001694:	b510      	push	{r4, lr}
 8001696:	4c05      	ldr	r4, [pc, #20]	; (80016ac <vADD_A_HL+0x18>)
 8001698:	88e0      	ldrh	r0, [r4, #6]
 800169a:	f002 f803 	bl	80036a4 <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc64 	b.w	8002f74 <vGBFunctionADD>
 80016ac:	24001658 	.word	0x24001658

080016b0 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <vADD_A_A+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016b8:	f001 bc5c 	b.w	8002f74 <vGBFunctionADD>
 80016bc:	24001658 	.word	0x24001658

080016c0 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4c06      	ldr	r4, [pc, #24]	; (80016dc <vADD_A_d8+0x1c>)
 80016c4:	8960      	ldrh	r0, [r4, #10]
 80016c6:	3801      	subs	r0, #1
 80016c8:	b280      	uxth	r0, r0
 80016ca:	f001 ffeb 	bl	80036a4 <ucGBMemoryRead>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4602      	mov	r2, r0
 80016d2:	1c60      	adds	r0, r4, #1
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f001 bc4c 	b.w	8002f74 <vGBFunctionADD>
 80016dc:	24001658 	.word	0x24001658

080016e0 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vADC_A_B+0xc>)
 80016e2:	78ca      	ldrb	r2, [r1, #3]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc73 	b.w	8002fd0 <vGBFunctionADC>
 80016ea:	bf00      	nop
 80016ec:	24001658 	.word	0x24001658

080016f0 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vADC_A_C+0xc>)
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc6b 	b.w	8002fd0 <vGBFunctionADC>
 80016fa:	bf00      	nop
 80016fc:	24001658 	.word	0x24001658

08001700 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vADC_A_D+0xc>)
 8001702:	794a      	ldrb	r2, [r1, #5]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc63 	b.w	8002fd0 <vGBFunctionADC>
 800170a:	bf00      	nop
 800170c:	24001658 	.word	0x24001658

08001710 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001710:	4902      	ldr	r1, [pc, #8]	; (800171c <vADC_A_E+0xc>)
 8001712:	790a      	ldrb	r2, [r1, #4]
 8001714:	1c48      	adds	r0, r1, #1
 8001716:	f001 bc5b 	b.w	8002fd0 <vGBFunctionADC>
 800171a:	bf00      	nop
 800171c:	24001658 	.word	0x24001658

08001720 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001720:	4902      	ldr	r1, [pc, #8]	; (800172c <vADC_A_H+0xc>)
 8001722:	79ca      	ldrb	r2, [r1, #7]
 8001724:	1c48      	adds	r0, r1, #1
 8001726:	f001 bc53 	b.w	8002fd0 <vGBFunctionADC>
 800172a:	bf00      	nop
 800172c:	24001658 	.word	0x24001658

08001730 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <vADC_A_L+0xc>)
 8001732:	798a      	ldrb	r2, [r1, #6]
 8001734:	1c48      	adds	r0, r1, #1
 8001736:	f001 bc4b 	b.w	8002fd0 <vGBFunctionADC>
 800173a:	bf00      	nop
 800173c:	24001658 	.word	0x24001658

08001740 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001740:	b510      	push	{r4, lr}
 8001742:	4c05      	ldr	r4, [pc, #20]	; (8001758 <vADC_A_HL+0x18>)
 8001744:	88e0      	ldrh	r0, [r4, #6]
 8001746:	f001 ffad 	bl	80036a4 <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bc3c 	b.w	8002fd0 <vGBFunctionADC>
 8001758:	24001658 	.word	0x24001658

0800175c <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <vADC_A_A+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001764:	f001 bc34 	b.w	8002fd0 <vGBFunctionADC>
 8001768:	24001658 	.word	0x24001658

0800176c <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800176c:	b510      	push	{r4, lr}
 800176e:	4c06      	ldr	r4, [pc, #24]	; (8001788 <vADC_A_d8+0x1c>)
 8001770:	8960      	ldrh	r0, [r4, #10]
 8001772:	3801      	subs	r0, #1
 8001774:	b280      	uxth	r0, r0
 8001776:	f001 ff95 	bl	80036a4 <ucGBMemoryRead>
 800177a:	4621      	mov	r1, r4
 800177c:	4602      	mov	r2, r0
 800177e:	1c60      	adds	r0, r4, #1
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f001 bc24 	b.w	8002fd0 <vGBFunctionADC>
 8001788:	24001658 	.word	0x24001658

0800178c <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSUB_B+0xc>)
 800178e:	78ca      	ldrb	r2, [r1, #3]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bc4f 	b.w	8003034 <vGBFunctionSUB>
 8001796:	bf00      	nop
 8001798:	24001658 	.word	0x24001658

0800179c <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSUB_C+0xc>)
 800179e:	788a      	ldrb	r2, [r1, #2]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bc47 	b.w	8003034 <vGBFunctionSUB>
 80017a6:	bf00      	nop
 80017a8:	24001658 	.word	0x24001658

080017ac <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSUB_D+0xc>)
 80017ae:	794a      	ldrb	r2, [r1, #5]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bc3f 	b.w	8003034 <vGBFunctionSUB>
 80017b6:	bf00      	nop
 80017b8:	24001658 	.word	0x24001658

080017bc <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80017bc:	4902      	ldr	r1, [pc, #8]	; (80017c8 <vSUB_E+0xc>)
 80017be:	790a      	ldrb	r2, [r1, #4]
 80017c0:	1c48      	adds	r0, r1, #1
 80017c2:	f001 bc37 	b.w	8003034 <vGBFunctionSUB>
 80017c6:	bf00      	nop
 80017c8:	24001658 	.word	0x24001658

080017cc <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 80017cc:	4902      	ldr	r1, [pc, #8]	; (80017d8 <vSUB_H+0xc>)
 80017ce:	79ca      	ldrb	r2, [r1, #7]
 80017d0:	1c48      	adds	r0, r1, #1
 80017d2:	f001 bc2f 	b.w	8003034 <vGBFunctionSUB>
 80017d6:	bf00      	nop
 80017d8:	24001658 	.word	0x24001658

080017dc <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 80017dc:	4902      	ldr	r1, [pc, #8]	; (80017e8 <vSUB_L+0xc>)
 80017de:	798a      	ldrb	r2, [r1, #6]
 80017e0:	1c48      	adds	r0, r1, #1
 80017e2:	f001 bc27 	b.w	8003034 <vGBFunctionSUB>
 80017e6:	bf00      	nop
 80017e8:	24001658 	.word	0x24001658

080017ec <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4c05      	ldr	r4, [pc, #20]	; (8001804 <vSUB_HL+0x18>)
 80017f0:	88e0      	ldrh	r0, [r4, #6]
 80017f2:	f001 ff57 	bl	80036a4 <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bc18 	b.w	8003034 <vGBFunctionSUB>
 8001804:	24001658 	.word	0x24001658

08001808 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <vSUB_A+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001810:	f001 bc10 	b.w	8003034 <vGBFunctionSUB>
 8001814:	24001658 	.word	0x24001658

08001818 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001818:	b510      	push	{r4, lr}
 800181a:	4c06      	ldr	r4, [pc, #24]	; (8001834 <vSUB_d8+0x1c>)
 800181c:	8960      	ldrh	r0, [r4, #10]
 800181e:	3801      	subs	r0, #1
 8001820:	b280      	uxth	r0, r0
 8001822:	f001 ff3f 	bl	80036a4 <ucGBMemoryRead>
 8001826:	4621      	mov	r1, r4
 8001828:	4602      	mov	r2, r0
 800182a:	1c60      	adds	r0, r4, #1
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	f001 bc00 	b.w	8003034 <vGBFunctionSUB>
 8001834:	24001658 	.word	0x24001658

08001838 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vSBC_A_B+0xc>)
 800183a:	78ca      	ldrb	r2, [r1, #3]
 800183c:	1c48      	adds	r0, r1, #1
 800183e:	f001 bc2f 	b.w	80030a0 <vGBFunctionSBC>
 8001842:	bf00      	nop
 8001844:	24001658 	.word	0x24001658

08001848 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vSBC_A_C+0xc>)
 800184a:	788a      	ldrb	r2, [r1, #2]
 800184c:	1c48      	adds	r0, r1, #1
 800184e:	f001 bc27 	b.w	80030a0 <vGBFunctionSBC>
 8001852:	bf00      	nop
 8001854:	24001658 	.word	0x24001658

08001858 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vSBC_A_D+0xc>)
 800185a:	794a      	ldrb	r2, [r1, #5]
 800185c:	1c48      	adds	r0, r1, #1
 800185e:	f001 bc1f 	b.w	80030a0 <vGBFunctionSBC>
 8001862:	bf00      	nop
 8001864:	24001658 	.word	0x24001658

08001868 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vSBC_A_E+0xc>)
 800186a:	790a      	ldrb	r2, [r1, #4]
 800186c:	1c48      	adds	r0, r1, #1
 800186e:	f001 bc17 	b.w	80030a0 <vGBFunctionSBC>
 8001872:	bf00      	nop
 8001874:	24001658 	.word	0x24001658

08001878 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 8001878:	4902      	ldr	r1, [pc, #8]	; (8001884 <vSBC_A_H+0xc>)
 800187a:	79ca      	ldrb	r2, [r1, #7]
 800187c:	1c48      	adds	r0, r1, #1
 800187e:	f001 bc0f 	b.w	80030a0 <vGBFunctionSBC>
 8001882:	bf00      	nop
 8001884:	24001658 	.word	0x24001658

08001888 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 8001888:	4902      	ldr	r1, [pc, #8]	; (8001894 <vSBC_A_L+0xc>)
 800188a:	798a      	ldrb	r2, [r1, #6]
 800188c:	1c48      	adds	r0, r1, #1
 800188e:	f001 bc07 	b.w	80030a0 <vGBFunctionSBC>
 8001892:	bf00      	nop
 8001894:	24001658 	.word	0x24001658

08001898 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001898:	b510      	push	{r4, lr}
 800189a:	4c05      	ldr	r4, [pc, #20]	; (80018b0 <vSBC_A_HL+0x18>)
 800189c:	88e0      	ldrh	r0, [r4, #6]
 800189e:	f001 ff01 	bl	80036a4 <ucGBMemoryRead>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4602      	mov	r2, r0
 80018a6:	1c60      	adds	r0, r4, #1
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f001 bbf8 	b.w	80030a0 <vGBFunctionSBC>
 80018b0:	24001658 	.word	0x24001658

080018b4 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <vSBC_A_A+0xc>)
 80018b6:	4601      	mov	r1, r0
 80018b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80018bc:	f001 bbf0 	b.w	80030a0 <vGBFunctionSBC>
 80018c0:	24001658 	.word	0x24001658

080018c4 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4c06      	ldr	r4, [pc, #24]	; (80018e0 <vSBC_A_d8+0x1c>)
 80018c8:	8960      	ldrh	r0, [r4, #10]
 80018ca:	3801      	subs	r0, #1
 80018cc:	b280      	uxth	r0, r0
 80018ce:	f001 fee9 	bl	80036a4 <ucGBMemoryRead>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4602      	mov	r2, r0
 80018d6:	1c60      	adds	r0, r4, #1
 80018d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018dc:	f001 bbe0 	b.w	80030a0 <vGBFunctionSBC>
 80018e0:	24001658 	.word	0x24001658

080018e4 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 80018e4:	4902      	ldr	r1, [pc, #8]	; (80018f0 <vCP_B+0xc>)
 80018e6:	78ca      	ldrb	r2, [r1, #3]
 80018e8:	7848      	ldrb	r0, [r1, #1]
 80018ea:	f001 bc11 	b.w	8003110 <vGBFunctionCP>
 80018ee:	bf00      	nop
 80018f0:	24001658 	.word	0x24001658

080018f4 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 80018f4:	4902      	ldr	r1, [pc, #8]	; (8001900 <vCP_C+0xc>)
 80018f6:	788a      	ldrb	r2, [r1, #2]
 80018f8:	7848      	ldrb	r0, [r1, #1]
 80018fa:	f001 bc09 	b.w	8003110 <vGBFunctionCP>
 80018fe:	bf00      	nop
 8001900:	24001658 	.word	0x24001658

08001904 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001904:	4902      	ldr	r1, [pc, #8]	; (8001910 <vCP_D+0xc>)
 8001906:	794a      	ldrb	r2, [r1, #5]
 8001908:	7848      	ldrb	r0, [r1, #1]
 800190a:	f001 bc01 	b.w	8003110 <vGBFunctionCP>
 800190e:	bf00      	nop
 8001910:	24001658 	.word	0x24001658

08001914 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001914:	4902      	ldr	r1, [pc, #8]	; (8001920 <vCP_E+0xc>)
 8001916:	790a      	ldrb	r2, [r1, #4]
 8001918:	7848      	ldrb	r0, [r1, #1]
 800191a:	f001 bbf9 	b.w	8003110 <vGBFunctionCP>
 800191e:	bf00      	nop
 8001920:	24001658 	.word	0x24001658

08001924 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001924:	4902      	ldr	r1, [pc, #8]	; (8001930 <vCP_H+0xc>)
 8001926:	79ca      	ldrb	r2, [r1, #7]
 8001928:	7848      	ldrb	r0, [r1, #1]
 800192a:	f001 bbf1 	b.w	8003110 <vGBFunctionCP>
 800192e:	bf00      	nop
 8001930:	24001658 	.word	0x24001658

08001934 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <vCP_L+0xc>)
 8001936:	798a      	ldrb	r2, [r1, #6]
 8001938:	7848      	ldrb	r0, [r1, #1]
 800193a:	f001 bbe9 	b.w	8003110 <vGBFunctionCP>
 800193e:	bf00      	nop
 8001940:	24001658 	.word	0x24001658

08001944 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	4c06      	ldr	r4, [pc, #24]	; (8001960 <vCP_HL+0x1c>)
 8001948:	7865      	ldrb	r5, [r4, #1]
 800194a:	88e0      	ldrh	r0, [r4, #6]
 800194c:	f001 feaa 	bl	80036a4 <ucGBMemoryRead>
 8001950:	4621      	mov	r1, r4
 8001952:	4602      	mov	r2, r0
 8001954:	4628      	mov	r0, r5
 8001956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195a:	f001 bbd9 	b.w	8003110 <vGBFunctionCP>
 800195e:	bf00      	nop
 8001960:	24001658 	.word	0x24001658

08001964 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 8001964:	4902      	ldr	r1, [pc, #8]	; (8001970 <vCP_A+0xc>)
 8001966:	784a      	ldrb	r2, [r1, #1]
 8001968:	4610      	mov	r0, r2
 800196a:	f001 bbd1 	b.w	8003110 <vGBFunctionCP>
 800196e:	bf00      	nop
 8001970:	24001658 	.word	0x24001658

08001974 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4c07      	ldr	r4, [pc, #28]	; (8001994 <vCP_d8+0x20>)
 8001978:	8960      	ldrh	r0, [r4, #10]
 800197a:	7865      	ldrb	r5, [r4, #1]
 800197c:	3801      	subs	r0, #1
 800197e:	b280      	uxth	r0, r0
 8001980:	f001 fe90 	bl	80036a4 <ucGBMemoryRead>
 8001984:	4621      	mov	r1, r4
 8001986:	4602      	mov	r2, r0
 8001988:	4628      	mov	r0, r5
 800198a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800198e:	f001 bbbf 	b.w	8003110 <vGBFunctionCP>
 8001992:	bf00      	nop
 8001994:	24001658 	.word	0x24001658

08001998 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 8001998:	4901      	ldr	r1, [pc, #4]	; (80019a0 <vRET+0x8>)
 800199a:	1e88      	subs	r0, r1, #2
 800199c:	f001 bbd6 	b.w	800314c <vGBFunctionRET>
 80019a0:	24001662 	.word	0x24001662

080019a4 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <vRETI+0x10>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <vRETI+0x14>)
 80019aa:	1e88      	subs	r0, r1, #2
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	f001 bbcd 	b.w	800314c <vGBFunctionRET>
 80019b2:	bf00      	nop
 80019b4:	24001662 	.word	0x24001662
 80019b8:	240010a2 	.word	0x240010a2

080019bc <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80019bc:	4901      	ldr	r1, [pc, #4]	; (80019c4 <vPOP_BC+0x8>)
 80019be:	1d88      	adds	r0, r1, #6
 80019c0:	f001 bbd8 	b.w	8003174 <vGBFunctionPOP>
 80019c4:	2400165a 	.word	0x2400165a

080019c8 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 80019c8:	4901      	ldr	r1, [pc, #4]	; (80019d0 <vPOP_DE+0x8>)
 80019ca:	1d08      	adds	r0, r1, #4
 80019cc:	f001 bbd2 	b.w	8003174 <vGBFunctionPOP>
 80019d0:	2400165c 	.word	0x2400165c

080019d4 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 80019d4:	4901      	ldr	r1, [pc, #4]	; (80019dc <vPOP_HL+0x8>)
 80019d6:	1c88      	adds	r0, r1, #2
 80019d8:	f001 bbcc 	b.w	8003174 <vGBFunctionPOP>
 80019dc:	2400165e 	.word	0x2400165e

080019e0 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4c05      	ldr	r4, [pc, #20]	; (80019f8 <vPOP_AF+0x18>)
 80019e4:	4621      	mov	r1, r4
 80019e6:	f104 0008 	add.w	r0, r4, #8
 80019ea:	f001 fbc3 	bl	8003174 <vGBFunctionPOP>
 80019ee:	8823      	ldrh	r3, [r4, #0]
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	8023      	strh	r3, [r4, #0]
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	24001658 	.word	0x24001658

080019fc <vJP_NZ_a16>:
void vJP_NZ_a16(){    ucCustomDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4d0d      	ldr	r5, [pc, #52]	; (8001a34 <vJP_NZ_a16+0x38>)
 8001a00:	8968      	ldrh	r0, [r5, #10]
 8001a02:	462c      	mov	r4, r5
 8001a04:	3802      	subs	r0, #2
 8001a06:	b280      	uxth	r0, r0
 8001a08:	f001 fe4c 	bl	80036a4 <ucGBMemoryRead>
 8001a0c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001a10:	4606      	mov	r6, r0
 8001a12:	1e58      	subs	r0, r3, #1
 8001a14:	b280      	uxth	r0, r0
 8001a16:	f001 fe45 	bl	80036a4 <ucGBMemoryRead>
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f001 f931 	bl	8002c84 <usConcat16BitBigEndian>
 8001a22:	4629      	mov	r1, r5
 8001a24:	4602      	mov	r2, r0
 8001a26:	4620      	mov	r0, r4
 8001a28:	f001 fba6 	bl	8003178 <vGBFunctionJP_NZ_a16>
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <vJP_NZ_a16+0x3c>)
 8001a2e:	7018      	strb	r0, [r3, #0]
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	bf00      	nop
 8001a34:	24001658 	.word	0x24001658
 8001a38:	240010a0 	.word	0x240010a0

08001a3c <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  ucCustomDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <vCALL_NZ_a16+0x14>)
 8001a3e:	b508      	push	{r3, lr}
 8001a40:	f1a2 0108 	sub.w	r1, r2, #8
 8001a44:	1c90      	adds	r0, r2, #2
 8001a46:	f001 fbb3 	bl	80031b0 <vGBFunctionCALL_NZ_a16>
 8001a4a:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <vCALL_NZ_a16+0x18>)
 8001a4c:	7018      	strb	r0, [r3, #0]
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	24001660 	.word	0x24001660
 8001a54:	240010a0 	.word	0x240010a0

08001a58 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001a58:	4901      	ldr	r1, [pc, #4]	; (8001a60 <vPUSH_BC+0x8>)
 8001a5a:	1d88      	adds	r0, r1, #6
 8001a5c:	f001 bb94 	b.w	8003188 <vGBFunctionPUSH>
 8001a60:	2400165a 	.word	0x2400165a

08001a64 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4c04      	ldr	r4, [pc, #16]	; (8001a78 <vRST_00H+0x14>)
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1ea0      	subs	r0, r4, #2
 8001a6c:	f001 fb8c 	bl	8003188 <vGBFunctionPUSH>
 8001a70:	3c0a      	subs	r4, #10
 8001a72:	2300      	movs	r3, #0
 8001a74:	8163      	strh	r3, [r4, #10]
 8001a76:	bd10      	pop	{r4, pc}
 8001a78:	24001662 	.word	0x24001662

08001a7c <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8001a7c:	490b      	ldr	r1, [pc, #44]	; (8001aac <vCALL_a16+0x30>)
 8001a7e:	b538      	push	{r3, r4, r5, lr}
 8001a80:	460c      	mov	r4, r1
 8001a82:	1e88      	subs	r0, r1, #2
 8001a84:	f001 fb80 	bl	8003188 <vGBFunctionPUSH>
 8001a88:	f834 090a 	ldrh.w	r0, [r4], #-10
 8001a8c:	3802      	subs	r0, #2
 8001a8e:	b280      	uxth	r0, r0
 8001a90:	f001 fe08 	bl	80036a4 <ucGBMemoryRead>
 8001a94:	8963      	ldrh	r3, [r4, #10]
 8001a96:	4605      	mov	r5, r0
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	b280      	uxth	r0, r0
 8001a9c:	f001 fe02 	bl	80036a4 <ucGBMemoryRead>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f001 f8ee 	bl	8002c84 <usConcat16BitBigEndian>
 8001aa8:	8160      	strh	r0, [r4, #10]
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
 8001aac:	24001662 	.word	0x24001662

08001ab0 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4c04      	ldr	r4, [pc, #16]	; (8001ac4 <vRST_08H+0x14>)
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	1ea0      	subs	r0, r4, #2
 8001ab8:	f001 fb66 	bl	8003188 <vGBFunctionPUSH>
 8001abc:	2308      	movs	r3, #8
 8001abe:	8023      	strh	r3, [r4, #0]
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	24001662 	.word	0x24001662

08001ac8 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001ac8:	4901      	ldr	r1, [pc, #4]	; (8001ad0 <vPUSH_DE+0x8>)
 8001aca:	1d08      	adds	r0, r1, #4
 8001acc:	f001 bb5c 	b.w	8003188 <vGBFunctionPUSH>
 8001ad0:	2400165c 	.word	0x2400165c

08001ad4 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4c04      	ldr	r4, [pc, #16]	; (8001ae8 <vRST_10H+0x14>)
 8001ad8:	4621      	mov	r1, r4
 8001ada:	1ea0      	subs	r0, r4, #2
 8001adc:	f001 fb54 	bl	8003188 <vGBFunctionPUSH>
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	8023      	strh	r3, [r4, #0]
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	24001662 	.word	0x24001662

08001aec <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4c04      	ldr	r4, [pc, #16]	; (8001b00 <vRST_18H+0x14>)
 8001af0:	4621      	mov	r1, r4
 8001af2:	1ea0      	subs	r0, r4, #2
 8001af4:	f001 fb48 	bl	8003188 <vGBFunctionPUSH>
 8001af8:	2318      	movs	r3, #24
 8001afa:	8023      	strh	r3, [r4, #0]
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	bf00      	nop
 8001b00:	24001662 	.word	0x24001662

08001b04 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001b04:	4901      	ldr	r1, [pc, #4]	; (8001b0c <vPUSH_HL+0x8>)
 8001b06:	1c88      	adds	r0, r1, #2
 8001b08:	f001 bb3e 	b.w	8003188 <vGBFunctionPUSH>
 8001b0c:	2400165e 	.word	0x2400165e

08001b10 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001b10:	b510      	push	{r4, lr}
 8001b12:	4c04      	ldr	r4, [pc, #16]	; (8001b24 <vRST20H+0x14>)
 8001b14:	4621      	mov	r1, r4
 8001b16:	1ea0      	subs	r0, r4, #2
 8001b18:	f001 fb36 	bl	8003188 <vGBFunctionPUSH>
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	8023      	strh	r3, [r4, #0]
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	bf00      	nop
 8001b24:	24001662 	.word	0x24001662

08001b28 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	4c04      	ldr	r4, [pc, #16]	; (8001b3c <vRST_28H+0x14>)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	1ea0      	subs	r0, r4, #2
 8001b30:	f001 fb2a 	bl	8003188 <vGBFunctionPUSH>
 8001b34:	2328      	movs	r3, #40	; 0x28
 8001b36:	8023      	strh	r3, [r4, #0]
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24001662 	.word	0x24001662

08001b40 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001b40:	4902      	ldr	r1, [pc, #8]	; (8001b4c <vPUSH_AF+0xc>)
 8001b42:	f101 0008 	add.w	r0, r1, #8
 8001b46:	f001 bb1f 	b.w	8003188 <vGBFunctionPUSH>
 8001b4a:	bf00      	nop
 8001b4c:	24001658 	.word	0x24001658

08001b50 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4c04      	ldr	r4, [pc, #16]	; (8001b64 <vRST_30H+0x14>)
 8001b54:	4621      	mov	r1, r4
 8001b56:	1ea0      	subs	r0, r4, #2
 8001b58:	f001 fb16 	bl	8003188 <vGBFunctionPUSH>
 8001b5c:	2330      	movs	r3, #48	; 0x30
 8001b5e:	8023      	strh	r3, [r4, #0]
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop
 8001b64:	24001662 	.word	0x24001662

08001b68 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4c04      	ldr	r4, [pc, #16]	; (8001b7c <vRST_38H+0x14>)
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	1ea0      	subs	r0, r4, #2
 8001b70:	f001 fb0a 	bl	8003188 <vGBFunctionPUSH>
 8001b74:	2338      	movs	r3, #56	; 0x38
 8001b76:	8023      	strh	r3, [r4, #0]
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24001662 	.word	0x24001662

08001b80 <vJP_Z_a16>:
void vJP_Z_a16(){     ucCustomDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	4d0d      	ldr	r5, [pc, #52]	; (8001bb8 <vJP_Z_a16+0x38>)
 8001b84:	8968      	ldrh	r0, [r5, #10]
 8001b86:	462c      	mov	r4, r5
 8001b88:	3802      	subs	r0, #2
 8001b8a:	b280      	uxth	r0, r0
 8001b8c:	f001 fd8a 	bl	80036a4 <ucGBMemoryRead>
 8001b90:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b94:	4606      	mov	r6, r0
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	b280      	uxth	r0, r0
 8001b9a:	f001 fd83 	bl	80036a4 <ucGBMemoryRead>
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f001 f86f 	bl	8002c84 <usConcat16BitBigEndian>
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4620      	mov	r0, r4
 8001bac:	f001 fb1c 	bl	80031e8 <vGBFunctionJP_Z_a16>
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <vJP_Z_a16+0x3c>)
 8001bb2:	7018      	strb	r0, [r3, #0]
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24001658 	.word	0x24001658
 8001bbc:	240010a0 	.word	0x240010a0

08001bc0 <vCALL_Z_a16>:
void vCALL_Z_a16(){   ucCustomDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <vCALL_Z_a16+0x14>)
 8001bc2:	b508      	push	{r3, lr}
 8001bc4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bc8:	1c90      	adds	r0, r2, #2
 8001bca:	f001 fb15 	bl	80031f8 <vGBFunctionCALL_Z_a16>
 8001bce:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <vCALL_Z_a16+0x18>)
 8001bd0:	7018      	strb	r0, [r3, #0]
 8001bd2:	bd08      	pop	{r3, pc}
 8001bd4:	24001660 	.word	0x24001660
 8001bd8:	240010a0 	.word	0x240010a0

08001bdc <vJP_NC_a16>:
void vJP_NC_a16(){    ucCustomDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	4d0d      	ldr	r5, [pc, #52]	; (8001c14 <vJP_NC_a16+0x38>)
 8001be0:	8968      	ldrh	r0, [r5, #10]
 8001be2:	462c      	mov	r4, r5
 8001be4:	3802      	subs	r0, #2
 8001be6:	b280      	uxth	r0, r0
 8001be8:	f001 fd5c 	bl	80036a4 <ucGBMemoryRead>
 8001bec:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	b280      	uxth	r0, r0
 8001bf6:	f001 fd55 	bl	80036a4 <ucGBMemoryRead>
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f001 f841 	bl	8002c84 <usConcat16BitBigEndian>
 8001c02:	4629      	mov	r1, r5
 8001c04:	4602      	mov	r2, r0
 8001c06:	4620      	mov	r0, r4
 8001c08:	f001 fb12 	bl	8003230 <vGBFunctionJP_NC_a16>
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <vJP_NC_a16+0x3c>)
 8001c0e:	7018      	strb	r0, [r3, #0]
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	bf00      	nop
 8001c14:	24001658 	.word	0x24001658
 8001c18:	240010a0 	.word	0x240010a0

08001c1c <vCALL_NC_a16>:
void vCALL_NC_a16(){  ucCustomDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <vCALL_NC_a16+0x14>)
 8001c1e:	b508      	push	{r3, lr}
 8001c20:	f1a2 0108 	sub.w	r1, r2, #8
 8001c24:	1c90      	adds	r0, r2, #2
 8001c26:	f001 fb0b 	bl	8003240 <vGBFunctionCALL_NC_a16>
 8001c2a:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <vCALL_NC_a16+0x18>)
 8001c2c:	7018      	strb	r0, [r3, #0]
 8001c2e:	bd08      	pop	{r3, pc}
 8001c30:	24001660 	.word	0x24001660
 8001c34:	240010a0 	.word	0x240010a0

08001c38 <vJP_C_a16>:
void vJP_C_a16(){     ucCustomDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4d0d      	ldr	r5, [pc, #52]	; (8001c70 <vJP_C_a16+0x38>)
 8001c3c:	8968      	ldrh	r0, [r5, #10]
 8001c3e:	462c      	mov	r4, r5
 8001c40:	3802      	subs	r0, #2
 8001c42:	b280      	uxth	r0, r0
 8001c44:	f001 fd2e 	bl	80036a4 <ucGBMemoryRead>
 8001c48:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001c4c:	4606      	mov	r6, r0
 8001c4e:	1e58      	subs	r0, r3, #1
 8001c50:	b280      	uxth	r0, r0
 8001c52:	f001 fd27 	bl	80036a4 <ucGBMemoryRead>
 8001c56:	4601      	mov	r1, r0
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f001 f813 	bl	8002c84 <usConcat16BitBigEndian>
 8001c5e:	4629      	mov	r1, r5
 8001c60:	4602      	mov	r2, r0
 8001c62:	4620      	mov	r0, r4
 8001c64:	f001 fb08 	bl	8003278 <vGBFunctionJP_C_a16>
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <vJP_C_a16+0x3c>)
 8001c6a:	7018      	strb	r0, [r3, #0]
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
 8001c6e:	bf00      	nop
 8001c70:	24001658 	.word	0x24001658
 8001c74:	240010a0 	.word	0x240010a0

08001c78 <vCALL_C_a16>:
void vCALL_C_a16(){   ucCustomDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <vCALL_C_a16+0x14>)
 8001c7a:	b508      	push	{r3, lr}
 8001c7c:	f1a2 0108 	sub.w	r1, r2, #8
 8001c80:	1c90      	adds	r0, r2, #2
 8001c82:	f001 fb01 	bl	8003288 <vGBFunctionCALL_C_a16>
 8001c86:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <vCALL_C_a16+0x18>)
 8001c88:	7018      	strb	r0, [r3, #0]
 8001c8a:	bd08      	pop	{r3, pc}
 8001c8c:	24001660 	.word	0x24001660
 8001c90:	240010a0 	.word	0x240010a0

08001c94 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4c07      	ldr	r4, [pc, #28]	; (8001cb4 <vADDs_SP_r8+0x20>)
 8001c98:	8960      	ldrh	r0, [r4, #10]
 8001c9a:	3801      	subs	r0, #1
 8001c9c:	b280      	uxth	r0, r0
 8001c9e:	f001 fd01 	bl	80036a4 <ucGBMemoryRead>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f104 0008 	add.w	r0, r4, #8
 8001caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cae:	f001 bb07 	b.w	80032c0 <vGBFunctionADD_SP_r8>
 8001cb2:	bf00      	nop
 8001cb4:	24001658 	.word	0x24001658

08001cb8 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	4c07      	ldr	r4, [pc, #28]	; (8001cd8 <vLDs_HL_SP_r8+0x20>)
 8001cbc:	8960      	ldrh	r0, [r4, #10]
 8001cbe:	3801      	subs	r0, #1
 8001cc0:	b280      	uxth	r0, r0
 8001cc2:	f001 fcef 	bl	80036a4 <ucGBMemoryRead>
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f104 0108 	add.w	r1, r4, #8
 8001cce:	1da0      	adds	r0, r4, #6
 8001cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd4:	f001 bb1c 	b.w	8003310 <vGBFunctionLD_HL_SP_r8>
 8001cd8:	24001658 	.word	0x24001658

08001cdc <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	4c03      	ldr	r4, [pc, #12]	; (8001cec <vRLC_B+0x10>)
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	78e0      	ldrb	r0, [r4, #3]
 8001ce4:	f001 fb3c 	bl	8003360 <ucGBFunctionRLC>
 8001ce8:	70e0      	strb	r0, [r4, #3]
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	24001658 	.word	0x24001658

08001cf0 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4c03      	ldr	r4, [pc, #12]	; (8001d00 <vRLC_C+0x10>)
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	78a0      	ldrb	r0, [r4, #2]
 8001cf8:	f001 fb32 	bl	8003360 <ucGBFunctionRLC>
 8001cfc:	70a0      	strb	r0, [r4, #2]
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	24001658 	.word	0x24001658

08001d04 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4c03      	ldr	r4, [pc, #12]	; (8001d14 <vRLC_D+0x10>)
 8001d08:	4621      	mov	r1, r4
 8001d0a:	7960      	ldrb	r0, [r4, #5]
 8001d0c:	f001 fb28 	bl	8003360 <ucGBFunctionRLC>
 8001d10:	7160      	strb	r0, [r4, #5]
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	24001658 	.word	0x24001658

08001d18 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4c03      	ldr	r4, [pc, #12]	; (8001d28 <vRLC_E+0x10>)
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	7920      	ldrb	r0, [r4, #4]
 8001d20:	f001 fb1e 	bl	8003360 <ucGBFunctionRLC>
 8001d24:	7120      	strb	r0, [r4, #4]
 8001d26:	bd10      	pop	{r4, pc}
 8001d28:	24001658 	.word	0x24001658

08001d2c <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4c03      	ldr	r4, [pc, #12]	; (8001d3c <vRLC_H+0x10>)
 8001d30:	4621      	mov	r1, r4
 8001d32:	79e0      	ldrb	r0, [r4, #7]
 8001d34:	f001 fb14 	bl	8003360 <ucGBFunctionRLC>
 8001d38:	71e0      	strb	r0, [r4, #7]
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	24001658 	.word	0x24001658

08001d40 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4c03      	ldr	r4, [pc, #12]	; (8001d50 <vRLC_L+0x10>)
 8001d44:	4621      	mov	r1, r4
 8001d46:	79a0      	ldrb	r0, [r4, #6]
 8001d48:	f001 fb0a 	bl	8003360 <ucGBFunctionRLC>
 8001d4c:	71a0      	strb	r0, [r4, #6]
 8001d4e:	bd10      	pop	{r4, pc}
 8001d50:	24001658 	.word	0x24001658

08001d54 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4d07      	ldr	r5, [pc, #28]	; (8001d74 <vRLC_HL+0x20>)
 8001d58:	88ec      	ldrh	r4, [r5, #6]
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f001 fca2 	bl	80036a4 <ucGBMemoryRead>
 8001d60:	4629      	mov	r1, r5
 8001d62:	f001 fafd 	bl	8003360 <ucGBFunctionRLC>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4620      	mov	r0, r4
 8001d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d6e:	f001 bcc1 	b.w	80036f4 <vGBMemoryWrite>
 8001d72:	bf00      	nop
 8001d74:	24001658 	.word	0x24001658

08001d78 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4c03      	ldr	r4, [pc, #12]	; (8001d88 <vRLC_A+0x10>)
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	7860      	ldrb	r0, [r4, #1]
 8001d80:	f001 faee 	bl	8003360 <ucGBFunctionRLC>
 8001d84:	7060      	strb	r0, [r4, #1]
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	24001658 	.word	0x24001658

08001d8c <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4c03      	ldr	r4, [pc, #12]	; (8001d9c <vRRC_B+0x10>)
 8001d90:	4621      	mov	r1, r4
 8001d92:	78e0      	ldrb	r0, [r4, #3]
 8001d94:	f001 fb00 	bl	8003398 <ucGBFunctionRRC>
 8001d98:	70e0      	strb	r0, [r4, #3]
 8001d9a:	bd10      	pop	{r4, pc}
 8001d9c:	24001658 	.word	0x24001658

08001da0 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001da0:	b510      	push	{r4, lr}
 8001da2:	4c03      	ldr	r4, [pc, #12]	; (8001db0 <vRRC_C+0x10>)
 8001da4:	4621      	mov	r1, r4
 8001da6:	78a0      	ldrb	r0, [r4, #2]
 8001da8:	f001 faf6 	bl	8003398 <ucGBFunctionRRC>
 8001dac:	70a0      	strb	r0, [r4, #2]
 8001dae:	bd10      	pop	{r4, pc}
 8001db0:	24001658 	.word	0x24001658

08001db4 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4c03      	ldr	r4, [pc, #12]	; (8001dc4 <vRRC_D+0x10>)
 8001db8:	4621      	mov	r1, r4
 8001dba:	7960      	ldrb	r0, [r4, #5]
 8001dbc:	f001 faec 	bl	8003398 <ucGBFunctionRRC>
 8001dc0:	7160      	strb	r0, [r4, #5]
 8001dc2:	bd10      	pop	{r4, pc}
 8001dc4:	24001658 	.word	0x24001658

08001dc8 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	4c03      	ldr	r4, [pc, #12]	; (8001dd8 <vRRC_E+0x10>)
 8001dcc:	4621      	mov	r1, r4
 8001dce:	7920      	ldrb	r0, [r4, #4]
 8001dd0:	f001 fae2 	bl	8003398 <ucGBFunctionRRC>
 8001dd4:	7120      	strb	r0, [r4, #4]
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	24001658 	.word	0x24001658

08001ddc <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4c03      	ldr	r4, [pc, #12]	; (8001dec <vRRC_H+0x10>)
 8001de0:	4621      	mov	r1, r4
 8001de2:	79e0      	ldrb	r0, [r4, #7]
 8001de4:	f001 fad8 	bl	8003398 <ucGBFunctionRRC>
 8001de8:	71e0      	strb	r0, [r4, #7]
 8001dea:	bd10      	pop	{r4, pc}
 8001dec:	24001658 	.word	0x24001658

08001df0 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4c03      	ldr	r4, [pc, #12]	; (8001e00 <vRRC_L+0x10>)
 8001df4:	4621      	mov	r1, r4
 8001df6:	79a0      	ldrb	r0, [r4, #6]
 8001df8:	f001 face 	bl	8003398 <ucGBFunctionRRC>
 8001dfc:	71a0      	strb	r0, [r4, #6]
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	24001658 	.word	0x24001658

08001e04 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d07      	ldr	r5, [pc, #28]	; (8001e24 <vRRC_HL+0x20>)
 8001e08:	88ec      	ldrh	r4, [r5, #6]
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f001 fc4a 	bl	80036a4 <ucGBMemoryRead>
 8001e10:	4629      	mov	r1, r5
 8001e12:	f001 fac1 	bl	8003398 <ucGBFunctionRRC>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4620      	mov	r0, r4
 8001e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e1e:	f001 bc69 	b.w	80036f4 <vGBMemoryWrite>
 8001e22:	bf00      	nop
 8001e24:	24001658 	.word	0x24001658

08001e28 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4c03      	ldr	r4, [pc, #12]	; (8001e38 <vRRC_A+0x10>)
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	7860      	ldrb	r0, [r4, #1]
 8001e30:	f001 fab2 	bl	8003398 <ucGBFunctionRRC>
 8001e34:	7060      	strb	r0, [r4, #1]
 8001e36:	bd10      	pop	{r4, pc}
 8001e38:	24001658 	.word	0x24001658

08001e3c <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001e3c:	b510      	push	{r4, lr}
 8001e3e:	4c03      	ldr	r4, [pc, #12]	; (8001e4c <vRL_B+0x10>)
 8001e40:	4621      	mov	r1, r4
 8001e42:	78e0      	ldrb	r0, [r4, #3]
 8001e44:	f001 fac4 	bl	80033d0 <ucGBFunctionRL>
 8001e48:	70e0      	strb	r0, [r4, #3]
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	24001658 	.word	0x24001658

08001e50 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4c03      	ldr	r4, [pc, #12]	; (8001e60 <vRL_C+0x10>)
 8001e54:	4621      	mov	r1, r4
 8001e56:	78a0      	ldrb	r0, [r4, #2]
 8001e58:	f001 faba 	bl	80033d0 <ucGBFunctionRL>
 8001e5c:	70a0      	strb	r0, [r4, #2]
 8001e5e:	bd10      	pop	{r4, pc}
 8001e60:	24001658 	.word	0x24001658

08001e64 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4c03      	ldr	r4, [pc, #12]	; (8001e74 <vRL_D+0x10>)
 8001e68:	4621      	mov	r1, r4
 8001e6a:	7960      	ldrb	r0, [r4, #5]
 8001e6c:	f001 fab0 	bl	80033d0 <ucGBFunctionRL>
 8001e70:	7160      	strb	r0, [r4, #5]
 8001e72:	bd10      	pop	{r4, pc}
 8001e74:	24001658 	.word	0x24001658

08001e78 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	4c03      	ldr	r4, [pc, #12]	; (8001e88 <vRL_E+0x10>)
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	7920      	ldrb	r0, [r4, #4]
 8001e80:	f001 faa6 	bl	80033d0 <ucGBFunctionRL>
 8001e84:	7120      	strb	r0, [r4, #4]
 8001e86:	bd10      	pop	{r4, pc}
 8001e88:	24001658 	.word	0x24001658

08001e8c <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	4c03      	ldr	r4, [pc, #12]	; (8001e9c <vRL_H+0x10>)
 8001e90:	4621      	mov	r1, r4
 8001e92:	79e0      	ldrb	r0, [r4, #7]
 8001e94:	f001 fa9c 	bl	80033d0 <ucGBFunctionRL>
 8001e98:	71e0      	strb	r0, [r4, #7]
 8001e9a:	bd10      	pop	{r4, pc}
 8001e9c:	24001658 	.word	0x24001658

08001ea0 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4c03      	ldr	r4, [pc, #12]	; (8001eb0 <vRL_L+0x10>)
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	79a0      	ldrb	r0, [r4, #6]
 8001ea8:	f001 fa92 	bl	80033d0 <ucGBFunctionRL>
 8001eac:	71a0      	strb	r0, [r4, #6]
 8001eae:	bd10      	pop	{r4, pc}
 8001eb0:	24001658 	.word	0x24001658

08001eb4 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d07      	ldr	r5, [pc, #28]	; (8001ed4 <vRL_HL+0x20>)
 8001eb8:	88ec      	ldrh	r4, [r5, #6]
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f001 fbf2 	bl	80036a4 <ucGBMemoryRead>
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f001 fa85 	bl	80033d0 <ucGBFunctionRL>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ece:	f001 bc11 	b.w	80036f4 <vGBMemoryWrite>
 8001ed2:	bf00      	nop
 8001ed4:	24001658 	.word	0x24001658

08001ed8 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4c03      	ldr	r4, [pc, #12]	; (8001ee8 <vRL_A+0x10>)
 8001edc:	4621      	mov	r1, r4
 8001ede:	7860      	ldrb	r0, [r4, #1]
 8001ee0:	f001 fa76 	bl	80033d0 <ucGBFunctionRL>
 8001ee4:	7060      	strb	r0, [r4, #1]
 8001ee6:	bd10      	pop	{r4, pc}
 8001ee8:	24001658 	.word	0x24001658

08001eec <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001eec:	b510      	push	{r4, lr}
 8001eee:	4c03      	ldr	r4, [pc, #12]	; (8001efc <vRR_B+0x10>)
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	78e0      	ldrb	r0, [r4, #3]
 8001ef4:	f001 fa86 	bl	8003404 <ucGBFunctionRR>
 8001ef8:	70e0      	strb	r0, [r4, #3]
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	24001658 	.word	0x24001658

08001f00 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4c03      	ldr	r4, [pc, #12]	; (8001f10 <vRR_C+0x10>)
 8001f04:	4621      	mov	r1, r4
 8001f06:	78a0      	ldrb	r0, [r4, #2]
 8001f08:	f001 fa7c 	bl	8003404 <ucGBFunctionRR>
 8001f0c:	70a0      	strb	r0, [r4, #2]
 8001f0e:	bd10      	pop	{r4, pc}
 8001f10:	24001658 	.word	0x24001658

08001f14 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4c03      	ldr	r4, [pc, #12]	; (8001f24 <vRR_D+0x10>)
 8001f18:	4621      	mov	r1, r4
 8001f1a:	7960      	ldrb	r0, [r4, #5]
 8001f1c:	f001 fa72 	bl	8003404 <ucGBFunctionRR>
 8001f20:	7160      	strb	r0, [r4, #5]
 8001f22:	bd10      	pop	{r4, pc}
 8001f24:	24001658 	.word	0x24001658

08001f28 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	4c03      	ldr	r4, [pc, #12]	; (8001f38 <vRR_E+0x10>)
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	7920      	ldrb	r0, [r4, #4]
 8001f30:	f001 fa68 	bl	8003404 <ucGBFunctionRR>
 8001f34:	7120      	strb	r0, [r4, #4]
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	24001658 	.word	0x24001658

08001f3c <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	4c03      	ldr	r4, [pc, #12]	; (8001f4c <vRR_H+0x10>)
 8001f40:	4621      	mov	r1, r4
 8001f42:	79e0      	ldrb	r0, [r4, #7]
 8001f44:	f001 fa5e 	bl	8003404 <ucGBFunctionRR>
 8001f48:	71e0      	strb	r0, [r4, #7]
 8001f4a:	bd10      	pop	{r4, pc}
 8001f4c:	24001658 	.word	0x24001658

08001f50 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4c03      	ldr	r4, [pc, #12]	; (8001f60 <vRR_L+0x10>)
 8001f54:	4621      	mov	r1, r4
 8001f56:	79a0      	ldrb	r0, [r4, #6]
 8001f58:	f001 fa54 	bl	8003404 <ucGBFunctionRR>
 8001f5c:	71a0      	strb	r0, [r4, #6]
 8001f5e:	bd10      	pop	{r4, pc}
 8001f60:	24001658 	.word	0x24001658

08001f64 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d07      	ldr	r5, [pc, #28]	; (8001f84 <vRR_HL+0x20>)
 8001f68:	88ec      	ldrh	r4, [r5, #6]
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f001 fb9a 	bl	80036a4 <ucGBMemoryRead>
 8001f70:	4629      	mov	r1, r5
 8001f72:	f001 fa47 	bl	8003404 <ucGBFunctionRR>
 8001f76:	4601      	mov	r1, r0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f7e:	f001 bbb9 	b.w	80036f4 <vGBMemoryWrite>
 8001f82:	bf00      	nop
 8001f84:	24001658 	.word	0x24001658

08001f88 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4c03      	ldr	r4, [pc, #12]	; (8001f98 <vRR_A+0x10>)
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	7860      	ldrb	r0, [r4, #1]
 8001f90:	f001 fa38 	bl	8003404 <ucGBFunctionRR>
 8001f94:	7060      	strb	r0, [r4, #1]
 8001f96:	bd10      	pop	{r4, pc}
 8001f98:	24001658 	.word	0x24001658

08001f9c <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4c03      	ldr	r4, [pc, #12]	; (8001fac <vSLA_B+0x10>)
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	78e0      	ldrb	r0, [r4, #3]
 8001fa4:	f001 fa4a 	bl	800343c <ucGBFunctionSLA>
 8001fa8:	70e0      	strb	r0, [r4, #3]
 8001faa:	bd10      	pop	{r4, pc}
 8001fac:	24001658 	.word	0x24001658

08001fb0 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4c03      	ldr	r4, [pc, #12]	; (8001fc0 <vSLA_C+0x10>)
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	78a0      	ldrb	r0, [r4, #2]
 8001fb8:	f001 fa40 	bl	800343c <ucGBFunctionSLA>
 8001fbc:	70a0      	strb	r0, [r4, #2]
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	24001658 	.word	0x24001658

08001fc4 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	4c03      	ldr	r4, [pc, #12]	; (8001fd4 <vSLA_D+0x10>)
 8001fc8:	4621      	mov	r1, r4
 8001fca:	7960      	ldrb	r0, [r4, #5]
 8001fcc:	f001 fa36 	bl	800343c <ucGBFunctionSLA>
 8001fd0:	7160      	strb	r0, [r4, #5]
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	24001658 	.word	0x24001658

08001fd8 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	4c03      	ldr	r4, [pc, #12]	; (8001fe8 <vSLA_E+0x10>)
 8001fdc:	4621      	mov	r1, r4
 8001fde:	7920      	ldrb	r0, [r4, #4]
 8001fe0:	f001 fa2c 	bl	800343c <ucGBFunctionSLA>
 8001fe4:	7120      	strb	r0, [r4, #4]
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	24001658 	.word	0x24001658

08001fec <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4c03      	ldr	r4, [pc, #12]	; (8001ffc <vSLA_H+0x10>)
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	79e0      	ldrb	r0, [r4, #7]
 8001ff4:	f001 fa22 	bl	800343c <ucGBFunctionSLA>
 8001ff8:	71e0      	strb	r0, [r4, #7]
 8001ffa:	bd10      	pop	{r4, pc}
 8001ffc:	24001658 	.word	0x24001658

08002000 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8002000:	b510      	push	{r4, lr}
 8002002:	4c03      	ldr	r4, [pc, #12]	; (8002010 <vSLA_L+0x10>)
 8002004:	4621      	mov	r1, r4
 8002006:	79a0      	ldrb	r0, [r4, #6]
 8002008:	f001 fa18 	bl	800343c <ucGBFunctionSLA>
 800200c:	71a0      	strb	r0, [r4, #6]
 800200e:	bd10      	pop	{r4, pc}
 8002010:	24001658 	.word	0x24001658

08002014 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4d07      	ldr	r5, [pc, #28]	; (8002034 <vSLA_HL+0x20>)
 8002018:	88ec      	ldrh	r4, [r5, #6]
 800201a:	4620      	mov	r0, r4
 800201c:	f001 fb42 	bl	80036a4 <ucGBMemoryRead>
 8002020:	4629      	mov	r1, r5
 8002022:	f001 fa0b 	bl	800343c <ucGBFunctionSLA>
 8002026:	4601      	mov	r1, r0
 8002028:	4620      	mov	r0, r4
 800202a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800202e:	f001 bb61 	b.w	80036f4 <vGBMemoryWrite>
 8002032:	bf00      	nop
 8002034:	24001658 	.word	0x24001658

08002038 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8002038:	b510      	push	{r4, lr}
 800203a:	4c03      	ldr	r4, [pc, #12]	; (8002048 <vSLA_A+0x10>)
 800203c:	4621      	mov	r1, r4
 800203e:	7860      	ldrb	r0, [r4, #1]
 8002040:	f001 f9fc 	bl	800343c <ucGBFunctionSLA>
 8002044:	7060      	strb	r0, [r4, #1]
 8002046:	bd10      	pop	{r4, pc}
 8002048:	24001658 	.word	0x24001658

0800204c <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 800204c:	b510      	push	{r4, lr}
 800204e:	4c03      	ldr	r4, [pc, #12]	; (800205c <vSRA_B+0x10>)
 8002050:	4621      	mov	r1, r4
 8002052:	78e0      	ldrb	r0, [r4, #3]
 8002054:	f001 fa0a 	bl	800346c <ucGBFunctionSRA>
 8002058:	70e0      	strb	r0, [r4, #3]
 800205a:	bd10      	pop	{r4, pc}
 800205c:	24001658 	.word	0x24001658

08002060 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8002060:	b510      	push	{r4, lr}
 8002062:	4c03      	ldr	r4, [pc, #12]	; (8002070 <vSRA_C+0x10>)
 8002064:	4621      	mov	r1, r4
 8002066:	78a0      	ldrb	r0, [r4, #2]
 8002068:	f001 fa00 	bl	800346c <ucGBFunctionSRA>
 800206c:	70a0      	strb	r0, [r4, #2]
 800206e:	bd10      	pop	{r4, pc}
 8002070:	24001658 	.word	0x24001658

08002074 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8002074:	b510      	push	{r4, lr}
 8002076:	4c03      	ldr	r4, [pc, #12]	; (8002084 <vSRA_D+0x10>)
 8002078:	4621      	mov	r1, r4
 800207a:	7960      	ldrb	r0, [r4, #5]
 800207c:	f001 f9f6 	bl	800346c <ucGBFunctionSRA>
 8002080:	7160      	strb	r0, [r4, #5]
 8002082:	bd10      	pop	{r4, pc}
 8002084:	24001658 	.word	0x24001658

08002088 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8002088:	b510      	push	{r4, lr}
 800208a:	4c03      	ldr	r4, [pc, #12]	; (8002098 <vSRA_E+0x10>)
 800208c:	4621      	mov	r1, r4
 800208e:	7920      	ldrb	r0, [r4, #4]
 8002090:	f001 f9ec 	bl	800346c <ucGBFunctionSRA>
 8002094:	7120      	strb	r0, [r4, #4]
 8002096:	bd10      	pop	{r4, pc}
 8002098:	24001658 	.word	0x24001658

0800209c <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 800209c:	b510      	push	{r4, lr}
 800209e:	4c03      	ldr	r4, [pc, #12]	; (80020ac <vSRA_H+0x10>)
 80020a0:	4621      	mov	r1, r4
 80020a2:	79e0      	ldrb	r0, [r4, #7]
 80020a4:	f001 f9e2 	bl	800346c <ucGBFunctionSRA>
 80020a8:	71e0      	strb	r0, [r4, #7]
 80020aa:	bd10      	pop	{r4, pc}
 80020ac:	24001658 	.word	0x24001658

080020b0 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4c03      	ldr	r4, [pc, #12]	; (80020c0 <vSRA_L+0x10>)
 80020b4:	4621      	mov	r1, r4
 80020b6:	79a0      	ldrb	r0, [r4, #6]
 80020b8:	f001 f9d8 	bl	800346c <ucGBFunctionSRA>
 80020bc:	71a0      	strb	r0, [r4, #6]
 80020be:	bd10      	pop	{r4, pc}
 80020c0:	24001658 	.word	0x24001658

080020c4 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4d07      	ldr	r5, [pc, #28]	; (80020e4 <vSRA_HL+0x20>)
 80020c8:	88ec      	ldrh	r4, [r5, #6]
 80020ca:	4620      	mov	r0, r4
 80020cc:	f001 faea 	bl	80036a4 <ucGBMemoryRead>
 80020d0:	4629      	mov	r1, r5
 80020d2:	f001 f9cb 	bl	800346c <ucGBFunctionSRA>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4620      	mov	r0, r4
 80020da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020de:	f001 bb09 	b.w	80036f4 <vGBMemoryWrite>
 80020e2:	bf00      	nop
 80020e4:	24001658 	.word	0x24001658

080020e8 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4c03      	ldr	r4, [pc, #12]	; (80020f8 <vSRA_A+0x10>)
 80020ec:	4621      	mov	r1, r4
 80020ee:	7860      	ldrb	r0, [r4, #1]
 80020f0:	f001 f9bc 	bl	800346c <ucGBFunctionSRA>
 80020f4:	7060      	strb	r0, [r4, #1]
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	24001658 	.word	0x24001658

080020fc <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4c03      	ldr	r4, [pc, #12]	; (800210c <vSWAP_B+0x10>)
 8002100:	4621      	mov	r1, r4
 8002102:	78e0      	ldrb	r0, [r4, #3]
 8002104:	f001 f9cc 	bl	80034a0 <ucGBFunctionSWAP>
 8002108:	70e0      	strb	r0, [r4, #3]
 800210a:	bd10      	pop	{r4, pc}
 800210c:	24001658 	.word	0x24001658

08002110 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002110:	b510      	push	{r4, lr}
 8002112:	4c03      	ldr	r4, [pc, #12]	; (8002120 <vSWAP_C+0x10>)
 8002114:	4621      	mov	r1, r4
 8002116:	78a0      	ldrb	r0, [r4, #2]
 8002118:	f001 f9c2 	bl	80034a0 <ucGBFunctionSWAP>
 800211c:	70a0      	strb	r0, [r4, #2]
 800211e:	bd10      	pop	{r4, pc}
 8002120:	24001658 	.word	0x24001658

08002124 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002124:	b510      	push	{r4, lr}
 8002126:	4c03      	ldr	r4, [pc, #12]	; (8002134 <vSWAP_D+0x10>)
 8002128:	4621      	mov	r1, r4
 800212a:	7960      	ldrb	r0, [r4, #5]
 800212c:	f001 f9b8 	bl	80034a0 <ucGBFunctionSWAP>
 8002130:	7160      	strb	r0, [r4, #5]
 8002132:	bd10      	pop	{r4, pc}
 8002134:	24001658 	.word	0x24001658

08002138 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002138:	b510      	push	{r4, lr}
 800213a:	4c03      	ldr	r4, [pc, #12]	; (8002148 <vSWAP_E+0x10>)
 800213c:	4621      	mov	r1, r4
 800213e:	7920      	ldrb	r0, [r4, #4]
 8002140:	f001 f9ae 	bl	80034a0 <ucGBFunctionSWAP>
 8002144:	7120      	strb	r0, [r4, #4]
 8002146:	bd10      	pop	{r4, pc}
 8002148:	24001658 	.word	0x24001658

0800214c <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 800214c:	b510      	push	{r4, lr}
 800214e:	4c03      	ldr	r4, [pc, #12]	; (800215c <vSWAP_H+0x10>)
 8002150:	4621      	mov	r1, r4
 8002152:	79e0      	ldrb	r0, [r4, #7]
 8002154:	f001 f9a4 	bl	80034a0 <ucGBFunctionSWAP>
 8002158:	71e0      	strb	r0, [r4, #7]
 800215a:	bd10      	pop	{r4, pc}
 800215c:	24001658 	.word	0x24001658

08002160 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002160:	b510      	push	{r4, lr}
 8002162:	4c03      	ldr	r4, [pc, #12]	; (8002170 <vSWAP_L+0x10>)
 8002164:	4621      	mov	r1, r4
 8002166:	79a0      	ldrb	r0, [r4, #6]
 8002168:	f001 f99a 	bl	80034a0 <ucGBFunctionSWAP>
 800216c:	71a0      	strb	r0, [r4, #6]
 800216e:	bd10      	pop	{r4, pc}
 8002170:	24001658 	.word	0x24001658

08002174 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4d07      	ldr	r5, [pc, #28]	; (8002194 <vSWAP_HL+0x20>)
 8002178:	88ec      	ldrh	r4, [r5, #6]
 800217a:	4620      	mov	r0, r4
 800217c:	f001 fa92 	bl	80036a4 <ucGBMemoryRead>
 8002180:	4629      	mov	r1, r5
 8002182:	f001 f98d 	bl	80034a0 <ucGBFunctionSWAP>
 8002186:	4601      	mov	r1, r0
 8002188:	4620      	mov	r0, r4
 800218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800218e:	f001 bab1 	b.w	80036f4 <vGBMemoryWrite>
 8002192:	bf00      	nop
 8002194:	24001658 	.word	0x24001658

08002198 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 8002198:	b510      	push	{r4, lr}
 800219a:	4c03      	ldr	r4, [pc, #12]	; (80021a8 <vSWAP_A+0x10>)
 800219c:	4621      	mov	r1, r4
 800219e:	7860      	ldrb	r0, [r4, #1]
 80021a0:	f001 f97e 	bl	80034a0 <ucGBFunctionSWAP>
 80021a4:	7060      	strb	r0, [r4, #1]
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	24001658 	.word	0x24001658

080021ac <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80021ac:	b510      	push	{r4, lr}
 80021ae:	4c03      	ldr	r4, [pc, #12]	; (80021bc <vSRL_B+0x10>)
 80021b0:	4621      	mov	r1, r4
 80021b2:	78e0      	ldrb	r0, [r4, #3]
 80021b4:	f001 f98a 	bl	80034cc <ucGBFunctionSRL>
 80021b8:	70e0      	strb	r0, [r4, #3]
 80021ba:	bd10      	pop	{r4, pc}
 80021bc:	24001658 	.word	0x24001658

080021c0 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4c03      	ldr	r4, [pc, #12]	; (80021d0 <vSRL_C+0x10>)
 80021c4:	4621      	mov	r1, r4
 80021c6:	78a0      	ldrb	r0, [r4, #2]
 80021c8:	f001 f980 	bl	80034cc <ucGBFunctionSRL>
 80021cc:	70a0      	strb	r0, [r4, #2]
 80021ce:	bd10      	pop	{r4, pc}
 80021d0:	24001658 	.word	0x24001658

080021d4 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 80021d4:	b510      	push	{r4, lr}
 80021d6:	4c03      	ldr	r4, [pc, #12]	; (80021e4 <vSRL_D+0x10>)
 80021d8:	4621      	mov	r1, r4
 80021da:	7960      	ldrb	r0, [r4, #5]
 80021dc:	f001 f976 	bl	80034cc <ucGBFunctionSRL>
 80021e0:	7160      	strb	r0, [r4, #5]
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	24001658 	.word	0x24001658

080021e8 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4c03      	ldr	r4, [pc, #12]	; (80021f8 <vSRL_E+0x10>)
 80021ec:	4621      	mov	r1, r4
 80021ee:	7920      	ldrb	r0, [r4, #4]
 80021f0:	f001 f96c 	bl	80034cc <ucGBFunctionSRL>
 80021f4:	7120      	strb	r0, [r4, #4]
 80021f6:	bd10      	pop	{r4, pc}
 80021f8:	24001658 	.word	0x24001658

080021fc <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4c03      	ldr	r4, [pc, #12]	; (800220c <vSRL_H+0x10>)
 8002200:	4621      	mov	r1, r4
 8002202:	79e0      	ldrb	r0, [r4, #7]
 8002204:	f001 f962 	bl	80034cc <ucGBFunctionSRL>
 8002208:	71e0      	strb	r0, [r4, #7]
 800220a:	bd10      	pop	{r4, pc}
 800220c:	24001658 	.word	0x24001658

08002210 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002210:	b510      	push	{r4, lr}
 8002212:	4c03      	ldr	r4, [pc, #12]	; (8002220 <vSRL_L+0x10>)
 8002214:	4621      	mov	r1, r4
 8002216:	79a0      	ldrb	r0, [r4, #6]
 8002218:	f001 f958 	bl	80034cc <ucGBFunctionSRL>
 800221c:	71a0      	strb	r0, [r4, #6]
 800221e:	bd10      	pop	{r4, pc}
 8002220:	24001658 	.word	0x24001658

08002224 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	; (8002244 <vSRL_HL+0x20>)
 8002228:	88ec      	ldrh	r4, [r5, #6]
 800222a:	4620      	mov	r0, r4
 800222c:	f001 fa3a 	bl	80036a4 <ucGBMemoryRead>
 8002230:	4629      	mov	r1, r5
 8002232:	f001 f94b 	bl	80034cc <ucGBFunctionSRL>
 8002236:	4601      	mov	r1, r0
 8002238:	4620      	mov	r0, r4
 800223a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800223e:	f001 ba59 	b.w	80036f4 <vGBMemoryWrite>
 8002242:	bf00      	nop
 8002244:	24001658 	.word	0x24001658

08002248 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002248:	b510      	push	{r4, lr}
 800224a:	4c03      	ldr	r4, [pc, #12]	; (8002258 <vSRL_A+0x10>)
 800224c:	4621      	mov	r1, r4
 800224e:	7860      	ldrb	r0, [r4, #1]
 8002250:	f001 f93c 	bl	80034cc <ucGBFunctionSRL>
 8002254:	7060      	strb	r0, [r4, #1]
 8002256:	bd10      	pop	{r4, pc}
 8002258:	24001658 	.word	0x24001658

0800225c <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_0_B+0xc>)
 800225e:	2100      	movs	r1, #0
 8002260:	78d0      	ldrb	r0, [r2, #3]
 8002262:	f001 b947 	b.w	80034f4 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	24001658 	.word	0x24001658

0800226c <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_0_C+0xc>)
 800226e:	2100      	movs	r1, #0
 8002270:	7890      	ldrb	r0, [r2, #2]
 8002272:	f001 b93f 	b.w	80034f4 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	24001658 	.word	0x24001658

0800227c <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_0_D+0xc>)
 800227e:	2100      	movs	r1, #0
 8002280:	7950      	ldrb	r0, [r2, #5]
 8002282:	f001 b937 	b.w	80034f4 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	24001658 	.word	0x24001658

0800228c <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <vBIT_0_E+0xc>)
 800228e:	2100      	movs	r1, #0
 8002290:	7910      	ldrb	r0, [r2, #4]
 8002292:	f001 b92f 	b.w	80034f4 <vGBFunctionBIT>
 8002296:	bf00      	nop
 8002298:	24001658 	.word	0x24001658

0800229c <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <vBIT_0_H+0xc>)
 800229e:	2100      	movs	r1, #0
 80022a0:	79d0      	ldrb	r0, [r2, #7]
 80022a2:	f001 b927 	b.w	80034f4 <vGBFunctionBIT>
 80022a6:	bf00      	nop
 80022a8:	24001658 	.word	0x24001658

080022ac <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80022ac:	4a02      	ldr	r2, [pc, #8]	; (80022b8 <vBIT_0_L+0xc>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	7990      	ldrb	r0, [r2, #6]
 80022b2:	f001 b91f 	b.w	80034f4 <vGBFunctionBIT>
 80022b6:	bf00      	nop
 80022b8:	24001658 	.word	0x24001658

080022bc <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80022bc:	b510      	push	{r4, lr}
 80022be:	4c05      	ldr	r4, [pc, #20]	; (80022d4 <vBIT_0_HL+0x18>)
 80022c0:	88e0      	ldrh	r0, [r4, #6]
 80022c2:	f001 f9ef 	bl	80036a4 <ucGBMemoryRead>
 80022c6:	4622      	mov	r2, r4
 80022c8:	2100      	movs	r1, #0
 80022ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ce:	f001 b911 	b.w	80034f4 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	24001658 	.word	0x24001658

080022d8 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_0_A+0xc>)
 80022da:	2100      	movs	r1, #0
 80022dc:	7850      	ldrb	r0, [r2, #1]
 80022de:	f001 b909 	b.w	80034f4 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	24001658 	.word	0x24001658

080022e8 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_1_B+0xc>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	78d0      	ldrb	r0, [r2, #3]
 80022ee:	f001 b901 	b.w	80034f4 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	24001658 	.word	0x24001658

080022f8 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_1_C+0xc>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	7890      	ldrb	r0, [r2, #2]
 80022fe:	f001 b8f9 	b.w	80034f4 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	24001658 	.word	0x24001658

08002308 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_1_D+0xc>)
 800230a:	2101      	movs	r1, #1
 800230c:	7950      	ldrb	r0, [r2, #5]
 800230e:	f001 b8f1 	b.w	80034f4 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	24001658 	.word	0x24001658

08002318 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <vBIT_1_E+0xc>)
 800231a:	2101      	movs	r1, #1
 800231c:	7910      	ldrb	r0, [r2, #4]
 800231e:	f001 b8e9 	b.w	80034f4 <vGBFunctionBIT>
 8002322:	bf00      	nop
 8002324:	24001658 	.word	0x24001658

08002328 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 8002328:	4a02      	ldr	r2, [pc, #8]	; (8002334 <vBIT_1_H+0xc>)
 800232a:	2101      	movs	r1, #1
 800232c:	79d0      	ldrb	r0, [r2, #7]
 800232e:	f001 b8e1 	b.w	80034f4 <vGBFunctionBIT>
 8002332:	bf00      	nop
 8002334:	24001658 	.word	0x24001658

08002338 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002338:	4a02      	ldr	r2, [pc, #8]	; (8002344 <vBIT_1_L+0xc>)
 800233a:	2101      	movs	r1, #1
 800233c:	7990      	ldrb	r0, [r2, #6]
 800233e:	f001 b8d9 	b.w	80034f4 <vGBFunctionBIT>
 8002342:	bf00      	nop
 8002344:	24001658 	.word	0x24001658

08002348 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002348:	b510      	push	{r4, lr}
 800234a:	4c05      	ldr	r4, [pc, #20]	; (8002360 <vBIT_1_HL+0x18>)
 800234c:	88e0      	ldrh	r0, [r4, #6]
 800234e:	f001 f9a9 	bl	80036a4 <ucGBMemoryRead>
 8002352:	4622      	mov	r2, r4
 8002354:	2101      	movs	r1, #1
 8002356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235a:	f001 b8cb 	b.w	80034f4 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	24001658 	.word	0x24001658

08002364 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_1_A+0xc>)
 8002366:	2101      	movs	r1, #1
 8002368:	7850      	ldrb	r0, [r2, #1]
 800236a:	f001 b8c3 	b.w	80034f4 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	24001658 	.word	0x24001658

08002374 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_2_B+0xc>)
 8002376:	2102      	movs	r1, #2
 8002378:	78d0      	ldrb	r0, [r2, #3]
 800237a:	f001 b8bb 	b.w	80034f4 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	24001658 	.word	0x24001658

08002384 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_2_C+0xc>)
 8002386:	2102      	movs	r1, #2
 8002388:	7890      	ldrb	r0, [r2, #2]
 800238a:	f001 b8b3 	b.w	80034f4 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	24001658 	.word	0x24001658

08002394 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_2_D+0xc>)
 8002396:	2102      	movs	r1, #2
 8002398:	7950      	ldrb	r0, [r2, #5]
 800239a:	f001 b8ab 	b.w	80034f4 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	24001658 	.word	0x24001658

080023a4 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <vBIT_2_E+0xc>)
 80023a6:	2102      	movs	r1, #2
 80023a8:	7910      	ldrb	r0, [r2, #4]
 80023aa:	f001 b8a3 	b.w	80034f4 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	24001658 	.word	0x24001658

080023b4 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <vBIT_2_H+0xc>)
 80023b6:	2102      	movs	r1, #2
 80023b8:	79d0      	ldrb	r0, [r2, #7]
 80023ba:	f001 b89b 	b.w	80034f4 <vGBFunctionBIT>
 80023be:	bf00      	nop
 80023c0:	24001658 	.word	0x24001658

080023c4 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80023c4:	4a02      	ldr	r2, [pc, #8]	; (80023d0 <vBIT_2_L+0xc>)
 80023c6:	2102      	movs	r1, #2
 80023c8:	7990      	ldrb	r0, [r2, #6]
 80023ca:	f001 b893 	b.w	80034f4 <vGBFunctionBIT>
 80023ce:	bf00      	nop
 80023d0:	24001658 	.word	0x24001658

080023d4 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4c05      	ldr	r4, [pc, #20]	; (80023ec <vBIT_2_HL+0x18>)
 80023d8:	88e0      	ldrh	r0, [r4, #6]
 80023da:	f001 f963 	bl	80036a4 <ucGBMemoryRead>
 80023de:	4622      	mov	r2, r4
 80023e0:	2102      	movs	r1, #2
 80023e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023e6:	f001 b885 	b.w	80034f4 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	24001658 	.word	0x24001658

080023f0 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_2_A+0xc>)
 80023f2:	2102      	movs	r1, #2
 80023f4:	7850      	ldrb	r0, [r2, #1]
 80023f6:	f001 b87d 	b.w	80034f4 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	24001658 	.word	0x24001658

08002400 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_3_B+0xc>)
 8002402:	2103      	movs	r1, #3
 8002404:	78d0      	ldrb	r0, [r2, #3]
 8002406:	f001 b875 	b.w	80034f4 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	24001658 	.word	0x24001658

08002410 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_3_C+0xc>)
 8002412:	2103      	movs	r1, #3
 8002414:	7890      	ldrb	r0, [r2, #2]
 8002416:	f001 b86d 	b.w	80034f4 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	24001658 	.word	0x24001658

08002420 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_3_D+0xc>)
 8002422:	2103      	movs	r1, #3
 8002424:	7950      	ldrb	r0, [r2, #5]
 8002426:	f001 b865 	b.w	80034f4 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	24001658 	.word	0x24001658

08002430 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <vBIT_3_E+0xc>)
 8002432:	2103      	movs	r1, #3
 8002434:	7910      	ldrb	r0, [r2, #4]
 8002436:	f001 b85d 	b.w	80034f4 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	24001658 	.word	0x24001658

08002440 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002440:	4a02      	ldr	r2, [pc, #8]	; (800244c <vBIT_3_H+0xc>)
 8002442:	2103      	movs	r1, #3
 8002444:	79d0      	ldrb	r0, [r2, #7]
 8002446:	f001 b855 	b.w	80034f4 <vGBFunctionBIT>
 800244a:	bf00      	nop
 800244c:	24001658 	.word	0x24001658

08002450 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <vBIT_3_L+0xc>)
 8002452:	2103      	movs	r1, #3
 8002454:	7990      	ldrb	r0, [r2, #6]
 8002456:	f001 b84d 	b.w	80034f4 <vGBFunctionBIT>
 800245a:	bf00      	nop
 800245c:	24001658 	.word	0x24001658

08002460 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 8002460:	b510      	push	{r4, lr}
 8002462:	4c05      	ldr	r4, [pc, #20]	; (8002478 <vBIT_3_HL+0x18>)
 8002464:	88e0      	ldrh	r0, [r4, #6]
 8002466:	f001 f91d 	bl	80036a4 <ucGBMemoryRead>
 800246a:	4622      	mov	r2, r4
 800246c:	2103      	movs	r1, #3
 800246e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002472:	f001 b83f 	b.w	80034f4 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	24001658 	.word	0x24001658

0800247c <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_3_A+0xc>)
 800247e:	2103      	movs	r1, #3
 8002480:	7850      	ldrb	r0, [r2, #1]
 8002482:	f001 b837 	b.w	80034f4 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	24001658 	.word	0x24001658

0800248c <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_4_B+0xc>)
 800248e:	2104      	movs	r1, #4
 8002490:	78d0      	ldrb	r0, [r2, #3]
 8002492:	f001 b82f 	b.w	80034f4 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	24001658 	.word	0x24001658

0800249c <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_4_C+0xc>)
 800249e:	2104      	movs	r1, #4
 80024a0:	7890      	ldrb	r0, [r2, #2]
 80024a2:	f001 b827 	b.w	80034f4 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	24001658 	.word	0x24001658

080024ac <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_4_D+0xc>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	7950      	ldrb	r0, [r2, #5]
 80024b2:	f001 b81f 	b.w	80034f4 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	24001658 	.word	0x24001658

080024bc <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <vBIT_4_E+0xc>)
 80024be:	2104      	movs	r1, #4
 80024c0:	7910      	ldrb	r0, [r2, #4]
 80024c2:	f001 b817 	b.w	80034f4 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	24001658 	.word	0x24001658

080024cc <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <vBIT_4_H+0xc>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	79d0      	ldrb	r0, [r2, #7]
 80024d2:	f001 b80f 	b.w	80034f4 <vGBFunctionBIT>
 80024d6:	bf00      	nop
 80024d8:	24001658 	.word	0x24001658

080024dc <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 80024dc:	4a02      	ldr	r2, [pc, #8]	; (80024e8 <vBIT_4_L+0xc>)
 80024de:	2104      	movs	r1, #4
 80024e0:	7990      	ldrb	r0, [r2, #6]
 80024e2:	f001 b807 	b.w	80034f4 <vGBFunctionBIT>
 80024e6:	bf00      	nop
 80024e8:	24001658 	.word	0x24001658

080024ec <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4c05      	ldr	r4, [pc, #20]	; (8002504 <vBIT_4_HL+0x18>)
 80024f0:	88e0      	ldrh	r0, [r4, #6]
 80024f2:	f001 f8d7 	bl	80036a4 <ucGBMemoryRead>
 80024f6:	4622      	mov	r2, r4
 80024f8:	2104      	movs	r1, #4
 80024fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024fe:	f000 bff9 	b.w	80034f4 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	24001658 	.word	0x24001658

08002508 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_4_A+0xc>)
 800250a:	2104      	movs	r1, #4
 800250c:	7850      	ldrb	r0, [r2, #1]
 800250e:	f000 bff1 	b.w	80034f4 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	24001658 	.word	0x24001658

08002518 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_5_B+0xc>)
 800251a:	2105      	movs	r1, #5
 800251c:	78d0      	ldrb	r0, [r2, #3]
 800251e:	f000 bfe9 	b.w	80034f4 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	24001658 	.word	0x24001658

08002528 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_5_C+0xc>)
 800252a:	2105      	movs	r1, #5
 800252c:	7890      	ldrb	r0, [r2, #2]
 800252e:	f000 bfe1 	b.w	80034f4 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	24001658 	.word	0x24001658

08002538 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_5_D+0xc>)
 800253a:	2105      	movs	r1, #5
 800253c:	7950      	ldrb	r0, [r2, #5]
 800253e:	f000 bfd9 	b.w	80034f4 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	24001658 	.word	0x24001658

08002548 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002548:	4a02      	ldr	r2, [pc, #8]	; (8002554 <vBIT_5_E+0xc>)
 800254a:	2105      	movs	r1, #5
 800254c:	7910      	ldrb	r0, [r2, #4]
 800254e:	f000 bfd1 	b.w	80034f4 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	24001658 	.word	0x24001658

08002558 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <vBIT_5_H+0xc>)
 800255a:	2105      	movs	r1, #5
 800255c:	79d0      	ldrb	r0, [r2, #7]
 800255e:	f000 bfc9 	b.w	80034f4 <vGBFunctionBIT>
 8002562:	bf00      	nop
 8002564:	24001658 	.word	0x24001658

08002568 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <vBIT_5_L+0xc>)
 800256a:	2105      	movs	r1, #5
 800256c:	7990      	ldrb	r0, [r2, #6]
 800256e:	f000 bfc1 	b.w	80034f4 <vGBFunctionBIT>
 8002572:	bf00      	nop
 8002574:	24001658 	.word	0x24001658

08002578 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 8002578:	b510      	push	{r4, lr}
 800257a:	4c05      	ldr	r4, [pc, #20]	; (8002590 <vBIT_5_HL+0x18>)
 800257c:	88e0      	ldrh	r0, [r4, #6]
 800257e:	f001 f891 	bl	80036a4 <ucGBMemoryRead>
 8002582:	4622      	mov	r2, r4
 8002584:	2105      	movs	r1, #5
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800258a:	f000 bfb3 	b.w	80034f4 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	24001658 	.word	0x24001658

08002594 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_5_A+0xc>)
 8002596:	2105      	movs	r1, #5
 8002598:	7850      	ldrb	r0, [r2, #1]
 800259a:	f000 bfab 	b.w	80034f4 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	24001658 	.word	0x24001658

080025a4 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_6_B+0xc>)
 80025a6:	2106      	movs	r1, #6
 80025a8:	78d0      	ldrb	r0, [r2, #3]
 80025aa:	f000 bfa3 	b.w	80034f4 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	24001658 	.word	0x24001658

080025b4 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_6_C+0xc>)
 80025b6:	2106      	movs	r1, #6
 80025b8:	7890      	ldrb	r0, [r2, #2]
 80025ba:	f000 bf9b 	b.w	80034f4 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	24001658 	.word	0x24001658

080025c4 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_6_D+0xc>)
 80025c6:	2106      	movs	r1, #6
 80025c8:	7950      	ldrb	r0, [r2, #5]
 80025ca:	f000 bf93 	b.w	80034f4 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	24001658 	.word	0x24001658

080025d4 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 80025d4:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <vBIT_6_E+0xc>)
 80025d6:	2106      	movs	r1, #6
 80025d8:	7910      	ldrb	r0, [r2, #4]
 80025da:	f000 bf8b 	b.w	80034f4 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	24001658 	.word	0x24001658

080025e4 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 80025e4:	4a02      	ldr	r2, [pc, #8]	; (80025f0 <vBIT_6_H+0xc>)
 80025e6:	2106      	movs	r1, #6
 80025e8:	79d0      	ldrb	r0, [r2, #7]
 80025ea:	f000 bf83 	b.w	80034f4 <vGBFunctionBIT>
 80025ee:	bf00      	nop
 80025f0:	24001658 	.word	0x24001658

080025f4 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 80025f4:	4a02      	ldr	r2, [pc, #8]	; (8002600 <vBIT_6_L+0xc>)
 80025f6:	2106      	movs	r1, #6
 80025f8:	7990      	ldrb	r0, [r2, #6]
 80025fa:	f000 bf7b 	b.w	80034f4 <vGBFunctionBIT>
 80025fe:	bf00      	nop
 8002600:	24001658 	.word	0x24001658

08002604 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002604:	b510      	push	{r4, lr}
 8002606:	4c05      	ldr	r4, [pc, #20]	; (800261c <vBIT_6_HL+0x18>)
 8002608:	88e0      	ldrh	r0, [r4, #6]
 800260a:	f001 f84b 	bl	80036a4 <ucGBMemoryRead>
 800260e:	4622      	mov	r2, r4
 8002610:	2106      	movs	r1, #6
 8002612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002616:	f000 bf6d 	b.w	80034f4 <vGBFunctionBIT>
 800261a:	bf00      	nop
 800261c:	24001658 	.word	0x24001658

08002620 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002620:	4a02      	ldr	r2, [pc, #8]	; (800262c <vBIT_6_A+0xc>)
 8002622:	2106      	movs	r1, #6
 8002624:	7850      	ldrb	r0, [r2, #1]
 8002626:	f000 bf65 	b.w	80034f4 <vGBFunctionBIT>
 800262a:	bf00      	nop
 800262c:	24001658 	.word	0x24001658

08002630 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002630:	4a02      	ldr	r2, [pc, #8]	; (800263c <vBIT_7_B+0xc>)
 8002632:	2107      	movs	r1, #7
 8002634:	78d0      	ldrb	r0, [r2, #3]
 8002636:	f000 bf5d 	b.w	80034f4 <vGBFunctionBIT>
 800263a:	bf00      	nop
 800263c:	24001658 	.word	0x24001658

08002640 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002640:	4a02      	ldr	r2, [pc, #8]	; (800264c <vBIT_7_C+0xc>)
 8002642:	2107      	movs	r1, #7
 8002644:	7890      	ldrb	r0, [r2, #2]
 8002646:	f000 bf55 	b.w	80034f4 <vGBFunctionBIT>
 800264a:	bf00      	nop
 800264c:	24001658 	.word	0x24001658

08002650 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <vBIT_7_D+0xc>)
 8002652:	2107      	movs	r1, #7
 8002654:	7950      	ldrb	r0, [r2, #5]
 8002656:	f000 bf4d 	b.w	80034f4 <vGBFunctionBIT>
 800265a:	bf00      	nop
 800265c:	24001658 	.word	0x24001658

08002660 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 8002660:	4a02      	ldr	r2, [pc, #8]	; (800266c <vBIT_7_E+0xc>)
 8002662:	2107      	movs	r1, #7
 8002664:	7910      	ldrb	r0, [r2, #4]
 8002666:	f000 bf45 	b.w	80034f4 <vGBFunctionBIT>
 800266a:	bf00      	nop
 800266c:	24001658 	.word	0x24001658

08002670 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <vBIT_7_H+0xc>)
 8002672:	2107      	movs	r1, #7
 8002674:	79d0      	ldrb	r0, [r2, #7]
 8002676:	f000 bf3d 	b.w	80034f4 <vGBFunctionBIT>
 800267a:	bf00      	nop
 800267c:	24001658 	.word	0x24001658

08002680 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 8002680:	4a02      	ldr	r2, [pc, #8]	; (800268c <vBIT_7_L+0xc>)
 8002682:	2107      	movs	r1, #7
 8002684:	7990      	ldrb	r0, [r2, #6]
 8002686:	f000 bf35 	b.w	80034f4 <vGBFunctionBIT>
 800268a:	bf00      	nop
 800268c:	24001658 	.word	0x24001658

08002690 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 8002690:	b510      	push	{r4, lr}
 8002692:	4c05      	ldr	r4, [pc, #20]	; (80026a8 <vBIT_7_HL+0x18>)
 8002694:	88e0      	ldrh	r0, [r4, #6]
 8002696:	f001 f805 	bl	80036a4 <ucGBMemoryRead>
 800269a:	4622      	mov	r2, r4
 800269c:	2107      	movs	r1, #7
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a2:	f000 bf27 	b.w	80034f4 <vGBFunctionBIT>
 80026a6:	bf00      	nop
 80026a8:	24001658 	.word	0x24001658

080026ac <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80026ac:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <vBIT_7_A+0xc>)
 80026ae:	2107      	movs	r1, #7
 80026b0:	7850      	ldrb	r0, [r2, #1]
 80026b2:	f000 bf1f 	b.w	80034f4 <vGBFunctionBIT>
 80026b6:	bf00      	nop
 80026b8:	24001658 	.word	0x24001658

080026bc <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <vRES_0_HL+0x1c>)
 80026be:	2100      	movs	r1, #0
 80026c0:	b510      	push	{r4, lr}
 80026c2:	88dc      	ldrh	r4, [r3, #6]
 80026c4:	4620      	mov	r0, r4
 80026c6:	f000 ff2d 	bl	8003524 <ucGBFunctionRESHL>
 80026ca:	4601      	mov	r1, r0
 80026cc:	4620      	mov	r0, r4
 80026ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d2:	f001 b80f 	b.w	80036f4 <vGBMemoryWrite>
 80026d6:	bf00      	nop
 80026d8:	24001658 	.word	0x24001658

080026dc <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <vRES_1_HL+0x1c>)
 80026de:	2101      	movs	r1, #1
 80026e0:	b510      	push	{r4, lr}
 80026e2:	88dc      	ldrh	r4, [r3, #6]
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 ff1d 	bl	8003524 <ucGBFunctionRESHL>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4620      	mov	r0, r4
 80026ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f2:	f000 bfff 	b.w	80036f4 <vGBMemoryWrite>
 80026f6:	bf00      	nop
 80026f8:	24001658 	.word	0x24001658

080026fc <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <vRES_2_HL+0x1c>)
 80026fe:	2102      	movs	r1, #2
 8002700:	b510      	push	{r4, lr}
 8002702:	88dc      	ldrh	r4, [r3, #6]
 8002704:	4620      	mov	r0, r4
 8002706:	f000 ff0d 	bl	8003524 <ucGBFunctionRESHL>
 800270a:	4601      	mov	r1, r0
 800270c:	4620      	mov	r0, r4
 800270e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002712:	f000 bfef 	b.w	80036f4 <vGBMemoryWrite>
 8002716:	bf00      	nop
 8002718:	24001658 	.word	0x24001658

0800271c <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <vRES_3_HL+0x1c>)
 800271e:	2103      	movs	r1, #3
 8002720:	b510      	push	{r4, lr}
 8002722:	88dc      	ldrh	r4, [r3, #6]
 8002724:	4620      	mov	r0, r4
 8002726:	f000 fefd 	bl	8003524 <ucGBFunctionRESHL>
 800272a:	4601      	mov	r1, r0
 800272c:	4620      	mov	r0, r4
 800272e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002732:	f000 bfdf 	b.w	80036f4 <vGBMemoryWrite>
 8002736:	bf00      	nop
 8002738:	24001658 	.word	0x24001658

0800273c <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <vRES_4_HL+0x1c>)
 800273e:	2104      	movs	r1, #4
 8002740:	b510      	push	{r4, lr}
 8002742:	88dc      	ldrh	r4, [r3, #6]
 8002744:	4620      	mov	r0, r4
 8002746:	f000 feed 	bl	8003524 <ucGBFunctionRESHL>
 800274a:	4601      	mov	r1, r0
 800274c:	4620      	mov	r0, r4
 800274e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002752:	f000 bfcf 	b.w	80036f4 <vGBMemoryWrite>
 8002756:	bf00      	nop
 8002758:	24001658 	.word	0x24001658

0800275c <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <vRES_5_HL+0x1c>)
 800275e:	2105      	movs	r1, #5
 8002760:	b510      	push	{r4, lr}
 8002762:	88dc      	ldrh	r4, [r3, #6]
 8002764:	4620      	mov	r0, r4
 8002766:	f000 fedd 	bl	8003524 <ucGBFunctionRESHL>
 800276a:	4601      	mov	r1, r0
 800276c:	4620      	mov	r0, r4
 800276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002772:	f000 bfbf 	b.w	80036f4 <vGBMemoryWrite>
 8002776:	bf00      	nop
 8002778:	24001658 	.word	0x24001658

0800277c <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <vRES_6_HL+0x1c>)
 800277e:	2106      	movs	r1, #6
 8002780:	b510      	push	{r4, lr}
 8002782:	88dc      	ldrh	r4, [r3, #6]
 8002784:	4620      	mov	r0, r4
 8002786:	f000 fecd 	bl	8003524 <ucGBFunctionRESHL>
 800278a:	4601      	mov	r1, r0
 800278c:	4620      	mov	r0, r4
 800278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002792:	f000 bfaf 	b.w	80036f4 <vGBMemoryWrite>
 8002796:	bf00      	nop
 8002798:	24001658 	.word	0x24001658

0800279c <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <vRES_7_HL+0x1c>)
 800279e:	2107      	movs	r1, #7
 80027a0:	b510      	push	{r4, lr}
 80027a2:	88dc      	ldrh	r4, [r3, #6]
 80027a4:	4620      	mov	r0, r4
 80027a6:	f000 febd 	bl	8003524 <ucGBFunctionRESHL>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4620      	mov	r0, r4
 80027ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b2:	f000 bf9f 	b.w	80036f4 <vGBMemoryWrite>
 80027b6:	bf00      	nop
 80027b8:	24001658 	.word	0x24001658

080027bc <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <vSET_0_HL+0x1c>)
 80027be:	2100      	movs	r1, #0
 80027c0:	b510      	push	{r4, lr}
 80027c2:	88dc      	ldrh	r4, [r3, #6]
 80027c4:	4620      	mov	r0, r4
 80027c6:	f000 feb9 	bl	800353c <ucGBFunctionSETHL>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4620      	mov	r0, r4
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d2:	f000 bf8f 	b.w	80036f4 <vGBMemoryWrite>
 80027d6:	bf00      	nop
 80027d8:	24001658 	.word	0x24001658

080027dc <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <vSET_1_HL+0x1c>)
 80027de:	2101      	movs	r1, #1
 80027e0:	b510      	push	{r4, lr}
 80027e2:	88dc      	ldrh	r4, [r3, #6]
 80027e4:	4620      	mov	r0, r4
 80027e6:	f000 fea9 	bl	800353c <ucGBFunctionSETHL>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4620      	mov	r0, r4
 80027ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f2:	f000 bf7f 	b.w	80036f4 <vGBMemoryWrite>
 80027f6:	bf00      	nop
 80027f8:	24001658 	.word	0x24001658

080027fc <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <vSET_2_HL+0x1c>)
 80027fe:	2102      	movs	r1, #2
 8002800:	b510      	push	{r4, lr}
 8002802:	88dc      	ldrh	r4, [r3, #6]
 8002804:	4620      	mov	r0, r4
 8002806:	f000 fe99 	bl	800353c <ucGBFunctionSETHL>
 800280a:	4601      	mov	r1, r0
 800280c:	4620      	mov	r0, r4
 800280e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002812:	f000 bf6f 	b.w	80036f4 <vGBMemoryWrite>
 8002816:	bf00      	nop
 8002818:	24001658 	.word	0x24001658

0800281c <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <vSET_3_HL+0x1c>)
 800281e:	2103      	movs	r1, #3
 8002820:	b510      	push	{r4, lr}
 8002822:	88dc      	ldrh	r4, [r3, #6]
 8002824:	4620      	mov	r0, r4
 8002826:	f000 fe89 	bl	800353c <ucGBFunctionSETHL>
 800282a:	4601      	mov	r1, r0
 800282c:	4620      	mov	r0, r4
 800282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002832:	f000 bf5f 	b.w	80036f4 <vGBMemoryWrite>
 8002836:	bf00      	nop
 8002838:	24001658 	.word	0x24001658

0800283c <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <vSET_4_HL+0x1c>)
 800283e:	2104      	movs	r1, #4
 8002840:	b510      	push	{r4, lr}
 8002842:	88dc      	ldrh	r4, [r3, #6]
 8002844:	4620      	mov	r0, r4
 8002846:	f000 fe79 	bl	800353c <ucGBFunctionSETHL>
 800284a:	4601      	mov	r1, r0
 800284c:	4620      	mov	r0, r4
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002852:	f000 bf4f 	b.w	80036f4 <vGBMemoryWrite>
 8002856:	bf00      	nop
 8002858:	24001658 	.word	0x24001658

0800285c <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <vSET_5_HL+0x1c>)
 800285e:	2105      	movs	r1, #5
 8002860:	b510      	push	{r4, lr}
 8002862:	88dc      	ldrh	r4, [r3, #6]
 8002864:	4620      	mov	r0, r4
 8002866:	f000 fe69 	bl	800353c <ucGBFunctionSETHL>
 800286a:	4601      	mov	r1, r0
 800286c:	4620      	mov	r0, r4
 800286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002872:	f000 bf3f 	b.w	80036f4 <vGBMemoryWrite>
 8002876:	bf00      	nop
 8002878:	24001658 	.word	0x24001658

0800287c <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <vSET_6_HL+0x1c>)
 800287e:	2106      	movs	r1, #6
 8002880:	b510      	push	{r4, lr}
 8002882:	88dc      	ldrh	r4, [r3, #6]
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fe59 	bl	800353c <ucGBFunctionSETHL>
 800288a:	4601      	mov	r1, r0
 800288c:	4620      	mov	r0, r4
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002892:	f000 bf2f 	b.w	80036f4 <vGBMemoryWrite>
 8002896:	bf00      	nop
 8002898:	24001658 	.word	0x24001658

0800289c <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <vSET_7_HL+0x1c>)
 800289e:	2107      	movs	r1, #7
 80028a0:	b510      	push	{r4, lr}
 80028a2:	88dc      	ldrh	r4, [r3, #6]
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 fe49 	bl	800353c <ucGBFunctionSETHL>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4620      	mov	r0, r4
 80028ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b2:	f000 bf1f 	b.w	80036f4 <vGBMemoryWrite>
 80028b6:	bf00      	nop
 80028b8:	24001658 	.word	0x24001658

080028bc <vCCF>:
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}
 80028bc:	b510      	push	{r4, lr}
 80028be:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <vCCF+0x38>)
 80028c0:	2106      	movs	r1, #6
 80028c2:	4620      	mov	r0, r4
 80028c4:	f000 f9ea 	bl	8002c9c <vResetBit>
 80028c8:	4620      	mov	r0, r4
 80028ca:	2105      	movs	r1, #5
 80028cc:	f000 f9e6 	bl	8002c9c <vResetBit>
 80028d0:	7820      	ldrb	r0, [r4, #0]
 80028d2:	2104      	movs	r1, #4
 80028d4:	f000 f9ea 	bl	8002cac <ucCheckBit>
 80028d8:	b128      	cbz	r0, 80028e6 <vCCF+0x2a>
 80028da:	4620      	mov	r0, r4
 80028dc:	2104      	movs	r1, #4
 80028de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e2:	f000 b9db 	b.w	8002c9c <vResetBit>
 80028e6:	4620      	mov	r0, r4
 80028e8:	2104      	movs	r1, #4
 80028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ee:	f000 b9cd 	b.w	8002c8c <vSetBit>
 80028f2:	bf00      	nop
 80028f4:	24001658 	.word	0x24001658

080028f8 <vRET_C.part.0>:
void vRET_NZ(){       ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028f8:	4901      	ldr	r1, [pc, #4]	; (8002900 <vRET_C.part.0+0x8>)
 80028fa:	1e88      	subs	r0, r1, #2
 80028fc:	f000 bc26 	b.w	800314c <vGBFunctionRET>
 8002900:	24001662 	.word	0x24001662

08002904 <vRET_NZ>:
 8002904:	b510      	push	{r4, lr}
 8002906:	4c0b      	ldr	r4, [pc, #44]	; (8002934 <vRET_NZ+0x30>)
 8002908:	2107      	movs	r1, #7
 800290a:	7820      	ldrb	r0, [r4, #0]
 800290c:	f000 f9ce 	bl	8002cac <ucCheckBit>
 8002910:	2800      	cmp	r0, #0
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <vRET_NZ+0x34>)
 8002914:	f04f 0107 	mov.w	r1, #7
 8002918:	bf14      	ite	ne
 800291a:	2208      	movne	r2, #8
 800291c:	2214      	moveq	r2, #20
 800291e:	7820      	ldrb	r0, [r4, #0]
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	f000 f9c3 	bl	8002cac <ucCheckBit>
 8002926:	b100      	cbz	r0, 800292a <vRET_NZ+0x26>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292e:	f7ff bfe3 	b.w	80028f8 <vRET_C.part.0>
 8002932:	bf00      	nop
 8002934:	24001658 	.word	0x24001658
 8002938:	240010a0 	.word	0x240010a0

0800293c <vRET_Z>:
void vRET_Z(){        ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 800293c:	b510      	push	{r4, lr}
 800293e:	4c0b      	ldr	r4, [pc, #44]	; (800296c <vRET_Z+0x30>)
 8002940:	2107      	movs	r1, #7
 8002942:	7820      	ldrb	r0, [r4, #0]
 8002944:	f000 f9b2 	bl	8002cac <ucCheckBit>
 8002948:	2800      	cmp	r0, #0
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <vRET_Z+0x34>)
 800294c:	f04f 0107 	mov.w	r1, #7
 8002950:	bf14      	ite	ne
 8002952:	2214      	movne	r2, #20
 8002954:	2208      	moveq	r2, #8
 8002956:	7820      	ldrb	r0, [r4, #0]
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	f000 f9a7 	bl	8002cac <ucCheckBit>
 800295e:	b900      	cbnz	r0, 8002962 <vRET_Z+0x26>
 8002960:	bd10      	pop	{r4, pc}
 8002962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002966:	f7ff bfc7 	b.w	80028f8 <vRET_C.part.0>
 800296a:	bf00      	nop
 800296c:	24001658 	.word	0x24001658
 8002970:	240010a0 	.word	0x240010a0

08002974 <vRET_NC>:
void vRET_NC(){       ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002974:	b510      	push	{r4, lr}
 8002976:	4c0b      	ldr	r4, [pc, #44]	; (80029a4 <vRET_NC+0x30>)
 8002978:	2104      	movs	r1, #4
 800297a:	7820      	ldrb	r0, [r4, #0]
 800297c:	f000 f996 	bl	8002cac <ucCheckBit>
 8002980:	2800      	cmp	r0, #0
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <vRET_NC+0x34>)
 8002984:	f04f 0104 	mov.w	r1, #4
 8002988:	bf14      	ite	ne
 800298a:	2208      	movne	r2, #8
 800298c:	2214      	moveq	r2, #20
 800298e:	7820      	ldrb	r0, [r4, #0]
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	f000 f98b 	bl	8002cac <ucCheckBit>
 8002996:	b100      	cbz	r0, 800299a <vRET_NC+0x26>
 8002998:	bd10      	pop	{r4, pc}
 800299a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299e:	f7ff bfab 	b.w	80028f8 <vRET_C.part.0>
 80029a2:	bf00      	nop
 80029a4:	24001658 	.word	0x24001658
 80029a8:	240010a0 	.word	0x240010a0

080029ac <vRET_C>:
void vRET_C(){        ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4c0b      	ldr	r4, [pc, #44]	; (80029dc <vRET_C+0x30>)
 80029b0:	2104      	movs	r1, #4
 80029b2:	7820      	ldrb	r0, [r4, #0]
 80029b4:	f000 f97a 	bl	8002cac <ucCheckBit>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <vRET_C+0x34>)
 80029bc:	f04f 0104 	mov.w	r1, #4
 80029c0:	bf14      	ite	ne
 80029c2:	2214      	movne	r2, #20
 80029c4:	2208      	moveq	r2, #8
 80029c6:	7820      	ldrb	r0, [r4, #0]
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	f000 f96f 	bl	8002cac <ucCheckBit>
 80029ce:	b900      	cbnz	r0, 80029d2 <vRET_C+0x26>
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029d6:	f7ff bf8f 	b.w	80028f8 <vRET_C.part.0>
 80029da:	bf00      	nop
 80029dc:	24001658 	.word	0x24001658
 80029e0:	240010a0 	.word	0x240010a0

080029e4 <vLD_A_A>:
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <vLD_B_B>:
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <vLD_C_C>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <vLD_D_D>:
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <vLD_E_E>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <vLD_H_H>:
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <vLD_L_L>:
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <ucGetTstate>:

/**
 * @returns amount of T-states that the current instruction takes to execute
 */
uint8_t ucGetTstate(){
	return uctStates;
 8002a00:	4b01      	ldr	r3, [pc, #4]	; (8002a08 <ucGetTstate+0x8>)
}
 8002a02:	7818      	ldrb	r0, [r3, #0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	240010a6 	.word	0x240010a6

08002a0c <prvGBCPUInterruptHandler>:

/**
 * @brief If the corresponding IE and IF are both set then jump to the corresponding ISR
 * @returns Nothing
 */
void prvGBCPUInterruptHandler(){
 8002a0c:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002a0e:	4d39      	ldr	r5, [pc, #228]	; (8002af4 <prvGBCPUInterruptHandler+0xe8>)
 8002a10:	782c      	ldrb	r4, [r5, #0]
 8002a12:	2c01      	cmp	r4, #1
 8002a14:	d002      	beq.n	8002a1c <prvGBCPUInterruptHandler+0x10>
			    uctStates += 5*4;
			}
		}

	}else{
		ucOneCycleInterruptDelay++;
 8002a16:	3401      	adds	r4, #1
 8002a18:	702c      	strb	r4, [r5, #0]
	}
}
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002a1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a20:	f000 fe40 	bl	80036a4 <ucGBMemoryRead>
 8002a24:	4606      	mov	r6, r0
 8002a26:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a2a:	f000 fe3b 	bl	80036a4 <ucGBMemoryRead>
 8002a2e:	4030      	ands	r0, r6
 8002a30:	06c6      	lsls	r6, r0, #27
 8002a32:	d0f2      	beq.n	8002a1a <prvGBCPUInterruptHandler+0xe>
			ucHALTED = 0;
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <prvGBCPUInterruptHandler+0xec>)
			ucInterruptMasterEnable = 0;
 8002a36:	2600      	movs	r6, #0
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <prvGBCPUInterruptHandler+0xf0>)
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucHALTED = 0;
 8002a3e:	701e      	strb	r6, [r3, #0]
			ucInterruptMasterEnable = 0;
 8002a40:	7016      	strb	r6, [r2, #0]
			ucOneCycleInterruptDelay = 0;
 8002a42:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a44:	f000 fe2e 	bl	80036a4 <ucGBMemoryRead>
 8002a48:	4605      	mov	r5, r0
 8002a4a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a4e:	f000 fe29 	bl	80036a4 <ucGBMemoryRead>
 8002a52:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a54:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a56:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a58:	d418      	bmi.n	8002a8c <prvGBCPUInterruptHandler+0x80>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a5a:	0798      	lsls	r0, r3, #30
 8002a5c:	d423      	bmi.n	8002aa6 <prvGBCPUInterruptHandler+0x9a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a5e:	0759      	lsls	r1, r3, #29
 8002a60:	d42e      	bmi.n	8002ac0 <prvGBCPUInterruptHandler+0xb4>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002a62:	071a      	lsls	r2, r3, #28
 8002a64:	d439      	bmi.n	8002ada <prvGBCPUInterruptHandler+0xce>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = JOYPAD_VECTOR;
 8002a66:	06db      	lsls	r3, r3, #27
 8002a68:	d5d7      	bpl.n	8002a1a <prvGBCPUInterruptHandler+0xe>
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a70:	f000 fdf6 	bl	8003660 <vGBMemoryResetBit>
 8002a74:	4922      	ldr	r1, [pc, #136]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002a76:	1e88      	subs	r0, r1, #2
 8002a78:	f000 fb86 	bl	8003188 <vGBFunctionPUSH>
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002a7e:	2260      	movs	r2, #96	; 0x60
 8002a80:	815a      	strh	r2, [r3, #10]
			    uctStates += 5*4;
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <prvGBCPUInterruptHandler+0xfc>)
 8002a84:	7813      	ldrb	r3, [r2, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	7013      	strb	r3, [r2, #0]
}
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a8c:	4631      	mov	r1, r6
 8002a8e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a92:	f000 fde5 	bl	8003660 <vGBMemoryResetBit>
 8002a96:	491a      	ldr	r1, [pc, #104]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002a98:	1e88      	subs	r0, r1, #2
 8002a9a:	f000 fb75 	bl	8003188 <vGBFunctionPUSH>
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002aa4:	e7ed      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002aac:	f000 fdd8 	bl	8003660 <vGBMemoryResetBit>
 8002ab0:	4913      	ldr	r1, [pc, #76]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002ab2:	1e88      	subs	r0, r1, #2
 8002ab4:	f000 fb68 	bl	8003188 <vGBFunctionPUSH>
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aba:	2248      	movs	r2, #72	; 0x48
 8002abc:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002abe:	e7e0      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ac6:	f000 fdcb 	bl	8003660 <vGBMemoryResetBit>
 8002aca:	490d      	ldr	r1, [pc, #52]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002acc:	1e88      	subs	r0, r1, #2
 8002ace:	f000 fb5b 	bl	8003188 <vGBFunctionPUSH>
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002ad4:	2250      	movs	r2, #80	; 0x50
 8002ad6:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002ad8:	e7d3      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002ada:	2103      	movs	r1, #3
 8002adc:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ae0:	f000 fdbe 	bl	8003660 <vGBMemoryResetBit>
 8002ae4:	4906      	ldr	r1, [pc, #24]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002ae6:	1e88      	subs	r0, r1, #2
 8002ae8:	f000 fb4e 	bl	8003188 <vGBFunctionPUSH>
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aee:	2258      	movs	r2, #88	; 0x58
 8002af0:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002af2:	e7c6      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
 8002af4:	240010a4 	.word	0x240010a4
 8002af8:	240010a1 	.word	0x240010a1
 8002afc:	240010a2 	.word	0x240010a2
 8002b00:	24001662 	.word	0x24001662
 8002b04:	24001658 	.word	0x24001658
 8002b08:	240010a6 	.word	0x240010a6

08002b0c <prvGBCPUHaltedHandler>:
/**
 * @brief If the CPU is halted and ucInterruptMasterEnable is not set, then this function will unhalt the CPU if both IE and IF flags are set
 * without jumping to the ISR
 * @returns Nothing
 */
void prvGBCPUHaltedHandler(){
 8002b0c:	b538      	push	{r3, r4, r5, lr}
    if(ucOneCycleInterruptDelay == 1){
 8002b0e:	4c13      	ldr	r4, [pc, #76]	; (8002b5c <prvGBCPUHaltedHandler+0x50>)
 8002b10:	7823      	ldrb	r3, [r4, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d002      	beq.n	8002b1c <prvGBCPUHaltedHandler+0x10>
                }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
                }
            }

    }else{
        ucOneCycleInterruptDelay++;
 8002b16:	3301      	adds	r3, #1
 8002b18:	7023      	strb	r3, [r4, #0]
    }
}
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
            if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002b1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b20:	f000 fdc0 	bl	80036a4 <ucGBMemoryRead>
 8002b24:	4605      	mov	r5, r0
 8002b26:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b2a:	f000 fdbb 	bl	80036a4 <ucGBMemoryRead>
 8002b2e:	4028      	ands	r0, r5
 8002b30:	06c2      	lsls	r2, r0, #27
 8002b32:	d0f2      	beq.n	8002b1a <prvGBCPUHaltedHandler+0xe>
                ucInterruptMasterEnable = 0;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvGBCPUHaltedHandler+0x54>)
 8002b36:	2500      	movs	r5, #0
                uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b38:	f64f 70ff 	movw	r0, #65535	; 0xffff
                ucInterruptMasterEnable = 0;
 8002b3c:	701d      	strb	r5, [r3, #0]
                ucOneCycleInterruptDelay = 0;
 8002b3e:	7025      	strb	r5, [r4, #0]
                uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b40:	f000 fdb0 	bl	80036a4 <ucGBMemoryRead>
 8002b44:	4604      	mov	r4, r0
 8002b46:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b4a:	f000 fdab 	bl	80036a4 <ucGBMemoryRead>
 8002b4e:	4020      	ands	r0, r4
                }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
 8002b50:	06c3      	lsls	r3, r0, #27
 8002b52:	d0e2      	beq.n	8002b1a <prvGBCPUHaltedHandler+0xe>
                if      (InterruptSetandEn &  VBLANK_INTERRUPT){ ucHALTED = 0;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <prvGBCPUHaltedHandler+0x58>)
 8002b56:	701d      	strb	r5, [r3, #0]
}
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	bf00      	nop
 8002b5c:	240010a4 	.word	0x240010a4
 8002b60:	240010a2 	.word	0x240010a2
 8002b64:	240010a1 	.word	0x240010a1

08002b68 <prvGBCPUinstr>:
/**
 * @brief fetch, decode and execute 1 CPU instruction, increment timers and jump to interrupt handler
 * @param opcode Opcode of instruction to be executed
 * @returns Nothing
 */
void prvGBCPUinstr(uint8_t opcode){
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if(reg.PC == usDebugPC){
 8002b6a:	4e2c      	ldr	r6, [pc, #176]	; (8002c1c <prvGBCPUinstr+0xb4>)
void prvGBCPUinstr(uint8_t opcode){
 8002b6c:	4604      	mov	r4, r0
    if(reg.PC == usDebugPC){
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <prvGBCPUinstr+0xb8>)
 8002b70:	8972      	ldrh	r2, [r6, #10]
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d103      	bne.n	8002b80 <prvGBCPUinstr+0x18>
	    ucMemoryBreakPointTrigger++;
 8002b78:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <prvGBCPUinstr+0xbc>)
 8002b7a:	7813      	ldrb	r3, [r2, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	7013      	strb	r3, [r2, #0]
	}

	if(!ucHALTED){
 8002b80:	4d29      	ldr	r5, [pc, #164]	; (8002c28 <prvGBCPUinstr+0xc0>)
 8002b82:	782b      	ldrb	r3, [r5, #0]
 8002b84:	b163      	cbz	r3, 8002ba0 <prvGBCPUinstr+0x38>
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002b88:	7818      	ldrb	r0, [r3, #0]
		    uctStates = instructions[opcode].Tstate;
		}

	}

	vGBMemoryIncTimers(uctStates >> 2);
 8002b8a:	0880      	lsrs	r0, r0, #2
 8002b8c:	f000 fe5e 	bl	800384c <vGBMemoryIncTimers>

	if(ucInterruptMasterEnable == 1){
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <prvGBCPUinstr+0xc8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d018      	beq.n	8002bca <prvGBCPUinstr+0x62>
		prvGBCPUInterruptHandler();
	}else if(ucHALTED == 1){
 8002b98:	782b      	ldrb	r3, [r5, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d01e      	beq.n	8002bdc <prvGBCPUinstr+0x74>
		prvGBCPUHaltedHandler();
	}
}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vGBMemorySetOP(opcode);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 fcd5 	bl	8003550 <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ba6:	2ccb      	cmp	r4, #203	; 0xcb
 8002ba8:	d01c      	beq.n	8002be4 <prvGBCPUinstr+0x7c>
 8002baa:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <prvGBCPUinstr+0xcc>)
 8002bac:	8971      	ldrh	r1, [r6, #10]
 8002bae:	eb02 07c4 	add.w	r7, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bb2:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bb6:	793b      	ldrb	r3, [r7, #4]
 8002bb8:	440b      	add	r3, r1
 8002bba:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002bbc:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002bbe:	7978      	ldrb	r0, [r7, #5]
 8002bc0:	28ff      	cmp	r0, #255	; 0xff
 8002bc2:	d006      	beq.n	8002bd2 <prvGBCPUinstr+0x6a>
		    uctStates = instructions[opcode].Tstate;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002bc6:	7018      	strb	r0, [r3, #0]
 8002bc8:	e7df      	b.n	8002b8a <prvGBCPUinstr+0x22>
}
 8002bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvGBCPUInterruptHandler();
 8002bce:	f7ff bf1d 	b.w	8002a0c <prvGBCPUInterruptHandler>
		    uctStates = ucCustomDuration;
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <prvGBCPUinstr+0xd0>)
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002bd6:	7810      	ldrb	r0, [r2, #0]
 8002bd8:	7018      	strb	r0, [r3, #0]
 8002bda:	e7d6      	b.n	8002b8a <prvGBCPUinstr+0x22>
}
 8002bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvGBCPUHaltedHandler();
 8002be0:	f7ff bf94 	b.w	8002b0c <prvGBCPUHaltedHandler>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002be4:	8970      	ldrh	r0, [r6, #10]
 8002be6:	4c15      	ldr	r4, [pc, #84]	; (8002c3c <prvGBCPUinstr+0xd4>)
 8002be8:	3001      	adds	r0, #1
 8002bea:	b280      	uxth	r0, r0
 8002bec:	f000 fd5a 	bl	80036a4 <ucGBMemoryRead>
 8002bf0:	8971      	ldrh	r1, [r6, #10]
 8002bf2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <prvGBCPUinstr+0xcc>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bf8:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002bfa:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bfe:	440b      	add	r3, r1
 8002c00:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002c02:	4790      	blx	r2
		    uctStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002c04:	8970      	ldrh	r0, [r6, #10]
 8002c06:	3801      	subs	r0, #1
 8002c08:	b280      	uxth	r0, r0
 8002c0a:	f000 fd4b 	bl	80036a4 <ucGBMemoryRead>
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002c10:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002c14:	7940      	ldrb	r0, [r0, #5]
 8002c16:	7018      	strb	r0, [r3, #0]
 8002c18:	e7b7      	b.n	8002b8a <prvGBCPUinstr+0x22>
 8002c1a:	bf00      	nop
 8002c1c:	24001658 	.word	0x24001658
 8002c20:	2400100c 	.word	0x2400100c
 8002c24:	240010a3 	.word	0x240010a3
 8002c28:	240010a1 	.word	0x240010a1
 8002c2c:	240010a6 	.word	0x240010a6
 8002c30:	240010a2 	.word	0x240010a2
 8002c34:	2400000c 	.word	0x2400000c
 8002c38:	240010a0 	.word	0x240010a0
 8002c3c:	2400080c 	.word	0x2400080c

08002c40 <vGBCPUStep>:
void vGBCPUStep(){
 8002c40:	b538      	push	{r3, r4, r5, lr}
	if(reg.PC <= 0xFF){
 8002c42:	4c0e      	ldr	r4, [pc, #56]	; (8002c7c <vGBCPUStep+0x3c>)
 8002c44:	8960      	ldrh	r0, [r4, #10]
 8002c46:	28ff      	cmp	r0, #255	; 0xff
 8002c48:	d902      	bls.n	8002c50 <vGBCPUStep+0x10>
		if(n == 0){
 8002c4a:	4d0d      	ldr	r5, [pc, #52]	; (8002c80 <vGBCPUStep+0x40>)
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	b12b      	cbz	r3, 8002c5c <vGBCPUStep+0x1c>
		prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c50:	f000 fd28 	bl	80036a4 <ucGBMemoryRead>
}
 8002c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c58:	f7ff bf86 	b.w	8002b68 <prvGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002c5c:	f001 faa6 	bl	80041ac <getRomPointer>
 8002c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c64:	f000 fc7a 	bl	800355c <vGBMemoryLoad>
			n = 1;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	8960      	ldrh	r0, [r4, #10]
 8002c6c:	602b      	str	r3, [r5, #0]
		prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c6e:	f000 fd19 	bl	80036a4 <ucGBMemoryRead>
}
 8002c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c76:	f7ff bf77 	b.w	8002b68 <prvGBCPUinstr>
 8002c7a:	bf00      	nop
 8002c7c:	24001658 	.word	0x24001658
 8002c80:	2400109c 	.word	0x2400109c

08002c84 <usConcat16BitBigEndian>:
 * @param x Lower address
 * @param y Higher address
 * @returns Newly concatenated short value
 */
uint16_t usConcat16BitBigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002c84:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002c88:	b280      	uxth	r0, r0
 8002c8a:	4770      	bx	lr

08002c8c <vSetBit>:
 * @param n Register/memory location
 * @param bit The bit to be set (0 - 7)
 * @returns Nothing
 */
void vSetBit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	fa03 f101 	lsl.w	r1, r3, r1
 8002c92:	7803      	ldrb	r3, [r0, #0]
 8002c94:	4319      	orrs	r1, r3
 8002c96:	7001      	strb	r1, [r0, #0]
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <vResetBit>:
 * @param n Register/memory location
 * @param bit The bit to be reset (0 - 7)
 * @returns Nothing
 */
void vResetBit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	fa03 f101 	lsl.w	r1, r3, r1
 8002ca2:	7803      	ldrb	r3, [r0, #0]
 8002ca4:	ea23 0101 	bic.w	r1, r3, r1
 8002ca8:	7001      	strb	r1, [r0, #0]
}
 8002caa:	4770      	bx	lr

08002cac <ucCheckBit>:
 * @param n Value of register/memory location
 * @param bit The bit to be checked (0 - 7)
 * @returns Value of checked bit
 */
uint8_t ucCheckBit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002cac:	4108      	asrs	r0, r1
}
 8002cae:	f000 0001 	and.w	r0, r0, #1
 8002cb2:	4770      	bx	lr

08002cb4 <v8bitRegisterINC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002cb4:	7803      	ldrb	r3, [r0, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002cbc:	780b      	ldrb	r3, [r1, #0]
 8002cbe:	bf0c      	ite	eq
 8002cc0:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002cc4:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002cc8:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002cca:	7803      	ldrb	r3, [r0, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002cd0:	f991 2000 	ldrsb.w	r2, [r1]
 8002cd4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002cd8:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002cda:	7800      	ldrb	r0, [r0, #0]
 8002cdc:	b118      	cbz	r0, 8002ce6 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002cde:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002ce2:	700b      	strb	r3, [r1, #0]
}
 8002ce4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	700b      	strb	r3, [r1, #0]
}
 8002cee:	4770      	bx	lr

08002cf0 <v8bitRegisterDEC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002cf0:	7803      	ldrb	r3, [r0, #0]
 8002cf2:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002cf6:	780b      	ldrb	r3, [r1, #0]
 8002cf8:	bf14      	ite	ne
 8002cfa:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002cfe:	f043 0320 	orreq.w	r3, r3, #32
 8002d02:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002d04:	7803      	ldrb	r3, [r0, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002d0a:	f991 3000 	ldrsb.w	r3, [r1]
 8002d0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d12:	700a      	strb	r2, [r1, #0]
	vSetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002d14:	7802      	ldrb	r2, [r0, #0]
 8002d16:	b12a      	cbz	r2, 8002d24 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d20:	700b      	strb	r3, [r1, #0]
}
 8002d22:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002d24:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	700b      	strb	r3, [r1, #0]
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002d30:	7802      	ldrb	r2, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d32:	09d3      	lsrs	r3, r2, #7
 8002d34:	bf0c      	ite	eq
 8002d36:	2300      	moveq	r3, #0
 8002d38:	2310      	movne	r3, #16
 8002d3a:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002d3c:	7803      	ldrb	r3, [r0, #0]
 8002d3e:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002d40:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002d44:	7003      	strb	r3, [r0, #0]
}
 8002d46:	4770      	bx	lr

08002d48 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002d48:	7803      	ldrb	r3, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d4a:	f013 0301 	ands.w	r3, r3, #1
 8002d4e:	d007      	beq.n	8002d60 <vGBFunctionRRCA+0x18>
 8002d50:	2310      	movs	r3, #16
 8002d52:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d54:	7803      	ldrb	r3, [r0, #0]
 8002d56:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d5c:	7003      	strb	r3, [r0, #0]
}
 8002d5e:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d60:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d62:	7803      	ldrb	r3, [r0, #0]
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) vSetBit(reg, 7);
}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <vGBFunction16bitADD>:
 * @param reg16 value of a 16 bit register
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002d6c:	8803      	ldrh	r3, [r0, #0]
 8002d6e:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d70:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002d72:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d74:	d517      	bpl.n	8002da6 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002d76:	f992 3000 	ldrsb.w	r3, [r2]
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	b2dc      	uxtb	r4, r3
 8002d80:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002d82:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002d86:	8804      	ldrh	r4, [r0, #0]
 8002d88:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002d8c:	42a5      	cmp	r5, r4
 8002d8e:	d211      	bcs.n	8002db4 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002d98:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d9a:	7813      	ldrb	r3, [r2, #0]
 8002d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	vResetBit(flagReg, N_FLAG);
}
 8002da0:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002da2:	7013      	strb	r3, [r2, #0]
}
 8002da4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002da6:	f992 4000 	ldrsb.w	r4, [r2]
 8002daa:	f024 0310 	bic.w	r3, r4, #16
 8002dae:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002db2:	e7e5      	b.n	8002d80 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002db4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002db8:	e7ed      	b.n	8002d96 <vGBFunction16bitADD+0x2a>
 8002dba:	bf00      	nop

08002dbc <vGBFunctionRLA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dbc:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002dc0:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dc2:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002dc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dc8:	f002 0210 	and.w	r2, r2, #16
 8002dcc:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002dce:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002dd0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002dd4:	7003      	strb	r3, [r0, #0]
}
 8002dd6:	4770      	bx	lr

08002dd8 <vGBFunctionRRA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dd8:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002dda:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ddc:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002dde:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002de0:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002de4:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002de6:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002de8:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002dea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002dee:	7003      	strb	r3, [r0, #0]
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002df4:	7809      	ldrb	r1, [r1, #0]
 * @param regPC
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002df6:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002df8:	09c9      	lsrs	r1, r1, #7
 8002dfa:	d105      	bne.n	8002e08 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002dfc:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002dfe:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e00:	fa41 f282 	sxtab	r2, r1, r2
 8002e04:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e06:	4770      	bx	lr
		return 8;
 8002e08:	2008      	movs	r0, #8
	}
}
 8002e0a:	4770      	bx	lr

08002e0c <vGBFunctionDAA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002e0c:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002e0e:	b410      	push	{r4}
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002e10:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002e14:	7804      	ldrb	r4, [r0, #0]
 8002e16:	b2a3      	uxth	r3, r4
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002e18:	d012      	beq.n	8002e40 <vGBFunctionDAA+0x34>
		if(ucCheckBit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002e1a:	0694      	lsls	r4, r2, #26
 8002e1c:	bf48      	it	mi
 8002e1e:	33fa      	addmi	r3, #250	; 0xfa
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e20:	06d2      	lsls	r2, r2, #27
 8002e22:	d425      	bmi.n	8002e70 <vGBFunctionDAA+0x64>
	}else{
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
		}else{ vResetBit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002e24:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e26:	f991 2000 	ldrsb.w	r2, [r1]
 8002e2a:	f022 0320 	bic.w	r3, r2, #32
 8002e2e:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, H_FLAG);
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002e30:	7800      	ldrb	r0, [r0, #0]
 8002e32:	b1b0      	cbz	r0, 8002e62 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002e34:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e3c:	700b      	strb	r3, [r1, #0]
 8002e3e:	4770      	bx	lr
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e40:	f012 0f20 	tst.w	r2, #32
 8002e44:	d017      	beq.n	8002e76 <vGBFunctionDAA+0x6a>
 8002e46:	3306      	adds	r3, #6
 8002e48:	b29b      	uxth	r3, r3
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e4a:	06d4      	lsls	r4, r2, #27
 8002e4c:	d403      	bmi.n	8002e56 <vGBFunctionDAA+0x4a>
 8002e4e:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002e52:	2c90      	cmp	r4, #144	; 0x90
 8002e54:	d914      	bls.n	8002e80 <vGBFunctionDAA+0x74>
 8002e56:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002e58:	f042 0210 	orr.w	r2, r2, #16
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e5c:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002e5e:	700a      	strb	r2, [r1, #0]
}
 8002e60:	e7e0      	b.n	8002e24 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002e66:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	700b      	strb	r3, [r1, #0]
}
 8002e6e:	4770      	bx	lr
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e70:	33a0      	adds	r3, #160	; 0xa0
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	e7d6      	b.n	8002e24 <vGBFunctionDAA+0x18>
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e76:	f004 040f 	and.w	r4, r4, #15
 8002e7a:	2c09      	cmp	r4, #9
 8002e7c:	d9e5      	bls.n	8002e4a <vGBFunctionDAA+0x3e>
 8002e7e:	e7e2      	b.n	8002e46 <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002e80:	f022 0210 	bic.w	r2, r2, #16
 8002e84:	700a      	strb	r2, [r1, #0]
}
 8002e86:	e7cd      	b.n	8002e24 <vGBFunctionDAA+0x18>

08002e88 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002e88:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e8a:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002e8c:	09c9      	lsrs	r1, r1, #7
 8002e8e:	d005      	beq.n	8002e9c <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002e90:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e92:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e94:	fa41 f282 	sxtab	r2, r1, r2
 8002e98:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e9a:	4770      	bx	lr
	}else{
		return 8;
 8002e9c:	2008      	movs	r0, #8
	}
}
 8002e9e:	4770      	bx	lr

08002ea0 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002ea0:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002ea2:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002ea4:	06c9      	lsls	r1, r1, #27
 8002ea6:	d405      	bmi.n	8002eb4 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002ea8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002eaa:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002eac:	fa41 f282 	sxtab	r2, r1, r2
 8002eb0:	801a      	strh	r2, [r3, #0]
		return 12;
 8002eb2:	4770      	bx	lr
		return 8;
 8002eb4:	2008      	movs	r0, #8
	}
}
 8002eb6:	4770      	bx	lr

08002eb8 <vMemoryLocationINC>:
 * @brief
 * @param loc
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002ebe:	f000 fbf1 	bl	80036a4 <ucGBMemoryRead>
 8002ec2:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002ec6:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002ec8:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002eca:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002ecc:	bf0c      	ite	eq
 8002ece:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ed2:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002ed6:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002ed8:	f000 fbe4 	bl	80036a4 <ucGBMemoryRead>
 8002edc:	4601      	mov	r1, r0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	3101      	adds	r1, #1
 8002ee2:	b2c9      	uxtb	r1, r1
 8002ee4:	f000 fc06 	bl	80036f4 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002ee8:	7823      	ldrb	r3, [r4, #0]
	vResetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002eea:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef0:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ef2:	f000 fbd7 	bl	80036a4 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002ef6:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ef8:	b118      	cbz	r0, 8002f02 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efe:	7023      	strb	r3, [r4, #0]
}
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	7023      	strb	r3, [r4, #0]
}
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
 8002f0a:	bf00      	nop

08002f0c <vMemoryLocationDEC>:
 * @brief
 * @param loc
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002f12:	f000 fbc7 	bl	80036a4 <ucGBMemoryRead>
 8002f16:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002f18:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f1a:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002f1c:	bf14      	ite	ne
 8002f1e:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002f22:	f043 0320 	orreq.w	r3, r3, #32
 8002f26:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f28:	f000 fbbc 	bl	80036a4 <ucGBMemoryRead>
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4628      	mov	r0, r5
 8002f30:	3901      	subs	r1, #1
 8002f32:	b2c9      	uxtb	r1, r1
 8002f34:	f000 fbde 	bl	80036f4 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002f38:	7823      	ldrb	r3, [r4, #0]
	vSetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f3a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f40:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f42:	f000 fbaf 	bl	80036a4 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002f46:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f48:	b118      	cbz	r0, 8002f52 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4e:	7023      	strb	r3, [r4, #0]
}
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	7023      	strb	r3, [r4, #0]
}
 8002f58:	bd38      	pop	{r3, r4, r5, pc}
 8002f5a:	bf00      	nop

08002f5c <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002f5c:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002f5e:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002f60:	06c9      	lsls	r1, r1, #27
 8002f62:	d505      	bpl.n	8002f70 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002f64:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002f66:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002f68:	fa41 f282 	sxtab	r2, r1, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
		return 12;
 8002f6e:	4770      	bx	lr
	}else{
		return 8;
 8002f70:	2008      	movs	r0, #8
	}
}
 8002f72:	4770      	bx	lr

08002f74 <vGBFunctionADD>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002f74:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f76:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f78:	f002 050f 	and.w	r5, r2, #15
 8002f7c:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002f80:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f82:	1963      	adds	r3, r4, r5
 8002f84:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002f86:	f991 3000 	ldrsb.w	r3, [r1]
 8002f8a:	bfcc      	ite	gt
 8002f8c:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002f90:	f023 0320 	bicle.w	r3, r3, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002f94:	2aff      	cmp	r2, #255	; 0xff
 8002f96:	dd0d      	ble.n	8002fb4 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002f98:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002f9c:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002fa4:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002fa6:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002fa8:	b162      	cbz	r2, 8002fc4 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fae:	bc30      	pop	{r4, r5}
 8002fb0:	700b      	strb	r3, [r1, #0]
 8002fb2:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002fb4:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	700b      	strb	r3, [r1, #0]
 8002fbc:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002fbe:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002fc0:	2a00      	cmp	r2, #0
 8002fc2:	d1f2      	bne.n	8002faa <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002fc8:	bc30      	pop	{r4, r5}
 8002fca:	700b      	strb	r3, [r1, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <vGBFunctionADC>:
 * @param regA Pointer to the A register
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002fd0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fd2:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fd4:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fd8:	7804      	ldrb	r4, [r0, #0]
 8002fda:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002fde:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fe0:	f004 070f 	and.w	r7, r4, #15
 8002fe4:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fe6:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fe8:	19e2      	adds	r2, r4, r7
 8002fea:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002fec:	bfcc      	ite	gt
 8002fee:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002ff2:	f025 0520 	bicle.w	r5, r5, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002ff8:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002ffa:	dd0d      	ble.n	8003018 <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002ffc:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8003000:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8003002:	f045 0510 	orr.w	r5, r5, #16
 8003006:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8003008:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 800300a:	b163      	cbz	r3, 8003026 <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 800300c:	780b      	ldrb	r3, [r1, #0]
 800300e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003012:	bcf0      	pop	{r4, r5, r6, r7}
 8003014:	700b      	strb	r3, [r1, #0]
 8003016:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003018:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 800301c:	b2db      	uxtb	r3, r3
 800301e:	700d      	strb	r5, [r1, #0]
 8003020:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f2      	bne.n	800300c <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8003026:	780b      	ldrb	r3, [r1, #0]
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 800302c:	bcf0      	pop	{r4, r5, r6, r7}
 800302e:	700b      	strb	r3, [r1, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <vGBFunctionSUB>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003034:	7803      	ldrb	r3, [r0, #0]
 8003036:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8003038:	b430      	push	{r4, r5}
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800303a:	d21d      	bcs.n	8003078 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 800303c:	f991 3000 	ldrsb.w	r3, [r1]
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	b2dc      	uxtb	r4, r3
 8003046:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003048:	f002 050f 	and.w	r5, r2, #15
 800304c:	7804      	ldrb	r4, [r0, #0]
 800304e:	f004 040f 	and.w	r4, r4, #15
 8003052:	42a5      	cmp	r5, r4
 8003054:	d920      	bls.n	8003098 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	b2db      	uxtb	r3, r3
 800305c:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 800305e:	7803      	ldrb	r3, [r0, #0]
 8003060:	1a9a      	subs	r2, r3, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8003066:	b172      	cbz	r2, 8003086 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8003068:	780b      	ldrb	r3, [r1, #0]
 800306a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 8003072:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003074:	700b      	strb	r3, [r1, #0]
}
 8003076:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003078:	f991 4000 	ldrsb.w	r4, [r1]
 800307c:	f024 0310 	bic.w	r3, r4, #16
 8003080:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8003084:	e7df      	b.n	8003046 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8003086:	f991 3000 	ldrsb.w	r3, [r1]
 800308a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8003092:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003094:	700b      	strb	r3, [r1, #0]
}
 8003096:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003098:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 800309c:	e7de      	b.n	800305c <vGBFunctionSUB+0x28>
 800309e:	bf00      	nop

080030a0 <vGBFunctionSBC>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + ucCheckBit(*flagReg, C_FLAG);
 80030a0:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 80030a2:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 80030a4:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) < 0x0) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 80030a8:	7804      	ldrb	r4, [r0, #0]
 80030aa:	f002 060f 	and.w	r6, r2, #15
 80030ae:	f004 040f 	and.w	r4, r4, #15
 80030b2:	442e      	add	r6, r5
 80030b4:	1ba4      	subs	r4, r4, r6
 80030b6:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 80030b8:	bfb4      	ite	lt
 80030ba:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80030be:	f023 0320 	bicge.w	r3, r3, #32
 80030c2:	700b      	strb	r3, [r1, #0]
 80030c4:	b25e      	sxtb	r6, r3
	(*regA - regValue - ucCheckBit(*flagReg, C_FLAG) < 0 ) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80030c6:	7804      	ldrb	r4, [r0, #0]
 80030c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030cc:	1aa4      	subs	r4, r4, r2
 80030ce:	1ae3      	subs	r3, r4, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db19      	blt.n	8003108 <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 80030d4:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 80030d8:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 80030da:	7804      	ldrb	r4, [r0, #0]
 80030dc:	1aa3      	subs	r3, r4, r2
 80030de:	1b5b      	subs	r3, r3, r5
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80030e4:	b13b      	cbz	r3, 80030f6 <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 80030e6:	780b      	ldrb	r3, [r1, #0]
 80030e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 80030ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 80030f0:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 80030f2:	700b      	strb	r3, [r1, #0]
}
 80030f4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80030f6:	f991 3000 	ldrsb.w	r3, [r1]
 80030fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8003102:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003104:	700b      	strb	r3, [r1, #0]
}
 8003106:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003108:	f046 0310 	orr.w	r3, r6, #16
 800310c:	b2db      	uxtb	r3, r3
}
 800310e:	e7e3      	b.n	80030d8 <vGBFunctionSBC+0x38>

08003110 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8003110:	f991 3000 	ldrsb.w	r3, [r1]
 * @param flagReg Pointer to the flag register
 * @param regValue Value of a register/memory location
 * @returns Nothing
 */
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003114:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8003116:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003118:	f002 040f 	and.w	r4, r2, #15
 800311c:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8003120:	bf8c      	ite	hi
 8003122:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003126:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 800312a:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 800312c:	bf8c      	ite	hi
 800312e:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003132:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003136:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8003138:	bf0c      	ite	eq
 800313a:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800313e:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 8003146:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003148:	700b      	strb	r3, [r1, #0]
}
 800314a:	4770      	bx	lr

0800314c <vGBFunctionRET>:
 * @brief Pop two bytes from the stack and jump to that address
 * @param regSP Pointer to the Stack Pointer register
 * @param regPC Pointer to the Program Counter register
 * @returns Nothing
 */
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	4604      	mov	r4, r0
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003150:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003152:	460e      	mov	r6, r1
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003154:	f000 faa6 	bl	80036a4 <ucGBMemoryRead>
 8003158:	8823      	ldrh	r3, [r4, #0]
 800315a:	4605      	mov	r5, r0
 800315c:	1c58      	adds	r0, r3, #1
 800315e:	b280      	uxth	r0, r0
 8003160:	f000 faa0 	bl	80036a4 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003164:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003168:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 800316a:	8823      	ldrh	r3, [r4, #0]
 800316c:	3302      	adds	r3, #2
 800316e:	8023      	strh	r3, [r4, #0]
}
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	bf00      	nop

08003174 <vGBFunctionPOP>:
 8003174:	f7ff bfea 	b.w	800314c <vGBFunctionRET>

08003178 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8003178:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 800317a:	09db      	lsrs	r3, r3, #7
 800317c:	d102      	bne.n	8003184 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800317e:	8002      	strh	r2, [r0, #0]
		return 16;
 8003180:	2010      	movs	r0, #16
 8003182:	4770      	bx	lr
		return 12;
 8003184:	200c      	movs	r0, #12
	}
}
 8003186:	4770      	bx	lr

08003188 <vGBFunctionPUSH>:
 * @brief Pushes 16 bit register onto stack
 * @param regSP Pointer to Stack Pointer register
 * @param reg16 Pointer to 16 bit register
 * @returns Nothing
 */
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 800318c:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800318e:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003190:	8809      	ldrh	r1, [r1, #0]
 8003192:	3801      	subs	r0, #1
 8003194:	0a09      	lsrs	r1, r1, #8
 8003196:	b280      	uxth	r0, r0
 8003198:	f000 faac 	bl	80036f4 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 800319c:	8820      	ldrh	r0, [r4, #0]
 800319e:	7829      	ldrb	r1, [r5, #0]
 80031a0:	3802      	subs	r0, #2
 80031a2:	b280      	uxth	r0, r0
 80031a4:	f000 faa6 	bl	80036f4 <vGBMemoryWrite>
	*regSP -= 2;
 80031a8:	8823      	ldrh	r3, [r4, #0]
 80031aa:	3b02      	subs	r3, #2
 80031ac:	8023      	strh	r3, [r4, #0]
}
 80031ae:	bd38      	pop	{r3, r4, r5, pc}

080031b0 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031b0:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031b2:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031b4:	09db      	lsrs	r3, r3, #7
 80031b6:	d001      	beq.n	80031bc <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 80031b8:	200c      	movs	r0, #12
}
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031bc:	4604      	mov	r4, r0
 80031be:	4610      	mov	r0, r2
 80031c0:	4621      	mov	r1, r4
 80031c2:	f7ff ffe1 	bl	8003188 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031c6:	8820      	ldrh	r0, [r4, #0]
 80031c8:	3802      	subs	r0, #2
 80031ca:	b280      	uxth	r0, r0
 80031cc:	f000 fa6a 	bl	80036a4 <ucGBMemoryRead>
 80031d0:	8823      	ldrh	r3, [r4, #0]
 80031d2:	4605      	mov	r5, r0
 80031d4:	1e58      	subs	r0, r3, #1
 80031d6:	b280      	uxth	r0, r0
 80031d8:	f000 fa64 	bl	80036a4 <ucGBMemoryRead>
 80031dc:	4603      	mov	r3, r0
		return 24;
 80031de:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031e0:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031e4:	8025      	strh	r5, [r4, #0]
}
 80031e6:	bd38      	pop	{r3, r4, r5, pc}

080031e8 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80031e8:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031ea:	09db      	lsrs	r3, r3, #7
 80031ec:	d002      	beq.n	80031f4 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 80031ee:	8002      	strh	r2, [r0, #0]
		return 16;
 80031f0:	2010      	movs	r0, #16
 80031f2:	4770      	bx	lr
	}else{
		return 12;
 80031f4:	200c      	movs	r0, #12
	}
}
 80031f6:	4770      	bx	lr

080031f8 <vGBFunctionCALL_Z_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031f8:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031fa:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031fc:	09db      	lsrs	r3, r3, #7
 80031fe:	d101      	bne.n	8003204 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003200:	200c      	movs	r0, #12
	}
}
 8003202:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003204:	4604      	mov	r4, r0
 8003206:	4610      	mov	r0, r2
 8003208:	4621      	mov	r1, r4
 800320a:	f7ff ffbd 	bl	8003188 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800320e:	8820      	ldrh	r0, [r4, #0]
 8003210:	3802      	subs	r0, #2
 8003212:	b280      	uxth	r0, r0
 8003214:	f000 fa46 	bl	80036a4 <ucGBMemoryRead>
 8003218:	8823      	ldrh	r3, [r4, #0]
 800321a:	4605      	mov	r5, r0
 800321c:	1e58      	subs	r0, r3, #1
 800321e:	b280      	uxth	r0, r0
 8003220:	f000 fa40 	bl	80036a4 <ucGBMemoryRead>
 8003224:	4603      	mov	r3, r0
		return 24;
 8003226:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003228:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800322c:	8025      	strh	r5, [r4, #0]
}
 800322e:	bd38      	pop	{r3, r4, r5, pc}

08003230 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8003230:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003232:	06db      	lsls	r3, r3, #27
 8003234:	d402      	bmi.n	800323c <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003236:	8002      	strh	r2, [r0, #0]
		return 16;
 8003238:	2010      	movs	r0, #16
 800323a:	4770      	bx	lr
		return 12;
 800323c:	200c      	movs	r0, #12
	}
}
 800323e:	4770      	bx	lr

08003240 <vGBFunctionCALL_NC_a16>:
 * @param regPC
 * @param flagReg Pointer to the flag register
 * @param regSP
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003240:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003242:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003244:	06db      	lsls	r3, r3, #27
 8003246:	d501      	bpl.n	800324c <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 8003248:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 800324a:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 800324c:	4604      	mov	r4, r0
 800324e:	4610      	mov	r0, r2
 8003250:	4621      	mov	r1, r4
 8003252:	f7ff ff99 	bl	8003188 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003256:	8820      	ldrh	r0, [r4, #0]
 8003258:	3802      	subs	r0, #2
 800325a:	b280      	uxth	r0, r0
 800325c:	f000 fa22 	bl	80036a4 <ucGBMemoryRead>
 8003260:	8823      	ldrh	r3, [r4, #0]
 8003262:	4605      	mov	r5, r0
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	b280      	uxth	r0, r0
 8003268:	f000 fa1c 	bl	80036a4 <ucGBMemoryRead>
 800326c:	4603      	mov	r3, r0
		return 24;
 800326e:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003270:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003274:	8025      	strh	r5, [r4, #0]
}
 8003276:	bd38      	pop	{r3, r4, r5, pc}

08003278 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 8003278:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 800327a:	06db      	lsls	r3, r3, #27
 800327c:	d502      	bpl.n	8003284 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 800327e:	8002      	strh	r2, [r0, #0]
		return 16;
 8003280:	2010      	movs	r0, #16
 8003282:	4770      	bx	lr
	}else{
		return 12;
 8003284:	200c      	movs	r0, #12
	}
}
 8003286:	4770      	bx	lr

08003288 <vGBFunctionCALL_C_a16>:
 * @param regPC
 * @param flagReg Pointer to the flag register
 * @param regSP
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003288:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800328a:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 800328c:	06db      	lsls	r3, r3, #27
 800328e:	d401      	bmi.n	8003294 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003290:	200c      	movs	r0, #12
	}
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003294:	4604      	mov	r4, r0
 8003296:	4610      	mov	r0, r2
 8003298:	4621      	mov	r1, r4
 800329a:	f7ff ff75 	bl	8003188 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800329e:	8820      	ldrh	r0, [r4, #0]
 80032a0:	3802      	subs	r0, #2
 80032a2:	b280      	uxth	r0, r0
 80032a4:	f000 f9fe 	bl	80036a4 <ucGBMemoryRead>
 80032a8:	8823      	ldrh	r3, [r4, #0]
 80032aa:	4605      	mov	r5, r0
 80032ac:	1e58      	subs	r0, r3, #1
 80032ae:	b280      	uxth	r0, r0
 80032b0:	f000 f9f8 	bl	80036a4 <ucGBMemoryRead>
 80032b4:	4603      	mov	r3, r0
		return 24;
 80032b6:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80032b8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80032bc:	8025      	strh	r5, [r4, #0]
}
 80032be:	bd38      	pop	{r3, r4, r5, pc}

080032c0 <vGBFunctionADD_SP_r8>:
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 80032c0:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80032c2:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 80032c4:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	b2e5      	uxtb	r5, r4
 80032ca:	429d      	cmp	r5, r3
 80032cc:	d219      	bcs.n	8003302 <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80032ce:	f991 3000 	ldrsb.w	r3, [r1]
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	b2dd      	uxtb	r5, r3
 80032d8:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80032da:	f004 040f 	and.w	r4, r4, #15
 80032de:	8805      	ldrh	r5, [r0, #0]
 80032e0:	f005 050f 	and.w	r5, r5, #15
 80032e4:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80032e6:	bf34      	ite	cc
 80032e8:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80032ec:	f023 0320 	biccs.w	r3, r3, #32
 80032f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f4:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 80032f6:	8803      	ldrh	r3, [r0, #0]
 80032f8:	fa43 f282 	sxtab	r2, r3, r2
}
 80032fc:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 80032fe:	8002      	strh	r2, [r0, #0]
}
 8003300:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003302:	f991 5000 	ldrsb.w	r5, [r1]
 8003306:	f025 0310 	bic.w	r3, r5, #16
 800330a:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 800330e:	e7e3      	b.n	80032d8 <vGBFunctionADD_SP_r8+0x18>

08003310 <vGBFunctionLD_HL_SP_r8>:
 * @param regSP Pointer to the SP register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003310:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 8003312:	880c      	ldrh	r4, [r1, #0]
 8003314:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003316:	b2e4      	uxtb	r4, r4
 8003318:	b2ee      	uxtb	r6, r5
 800331a:	42a6      	cmp	r6, r4
 800331c:	d219      	bcs.n	8003352 <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800331e:	f992 4000 	ldrsb.w	r4, [r2]
 8003322:	f044 0410 	orr.w	r4, r4, #16
 8003326:	b2e6      	uxtb	r6, r4
 8003328:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 800332a:	f005 050f 	and.w	r5, r5, #15
 800332e:	880e      	ldrh	r6, [r1, #0]
 8003330:	f006 060f 	and.w	r6, r6, #15
 8003334:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 8003336:	bf34      	ite	cc
 8003338:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 800333c:	f024 0420 	biccs.w	r4, r4, #32
 8003340:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003344:	7014      	strb	r4, [r2, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 8003346:	880a      	ldrh	r2, [r1, #0]
 8003348:	fa42 f383 	sxtab	r3, r2, r3
}
 800334c:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 800334e:	8003      	strh	r3, [r0, #0]
}
 8003350:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003352:	f992 6000 	ldrsb.w	r6, [r2]
 8003356:	f026 0410 	bic.w	r4, r6, #16
 800335a:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 800335e:	e7e3      	b.n	8003328 <vGBFunctionLD_HL_SP_r8+0x18>

08003360 <ucGBFunctionRLC>:
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 7);
	regValue <<= 1;
 8003360:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 8003362:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003364:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003368:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800336c:	d10a      	bne.n	8003384 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 800336e:	f991 3000 	ldrsb.w	r3, [r1]
 8003372:	f063 037f 	orn	r3, r3, #127	; 0x7f
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003376:	b152      	cbz	r2, 800338e <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 8003378:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800337c:	f043 0310 	orr.w	r3, r3, #16
 8003380:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003382:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003384:	780b      	ldrb	r3, [r1, #0]
 8003386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800338a:	2a00      	cmp	r2, #0
 800338c:	d1f4      	bne.n	8003378 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 800338e:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003392:	700b      	strb	r3, [r1, #0]
}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <ucGBFunctionRRC>:
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) vSetBit(&regValue, 7);
 8003398:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800339a:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) vSetBit(&regValue, 7);
 800339e:	d509      	bpl.n	80033b4 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 80033a0:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 80033a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 80033a6:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
	return regValue;
}
 80033aa:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 80033ac:	f043 0310 	orr.w	r3, r3, #16
 80033b0:	700b      	strb	r3, [r1, #0]
}
 80033b2:	4770      	bx	lr
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033b4:	b942      	cbnz	r2, 80033c8 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 80033b6:	f991 3000 	ldrsb.w	r3, [r1]
 80033ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80033be:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 80033c2:	4610      	mov	r0, r2
 80033c4:	700b      	strb	r3, [r1, #0]
 80033c6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033c8:	780b      	ldrb	r3, [r1, #0]
 80033ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033ce:	e7f6      	b.n	80033be <ucGBFunctionRRC+0x26>

080033d0 <ucGBFunctionRL>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 80033d0:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033d2:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80033d6:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80033da:	bf14      	ite	ne
 80033dc:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033e0:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80033e4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80033e8:	b25b      	sxtb	r3, r3
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033ea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033ee:	d105      	bne.n	80033fc <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 80033f0:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033fa:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	700b      	strb	r3, [r1, #0]
}
 8003402:	4770      	bx	lr

08003404 <ucGBFunctionRR>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 8003404:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003406:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800340a:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 800340e:	bf14      	ite	ne
 8003410:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003414:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 8003418:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800341a:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 800341c:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003420:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003424:	d105      	bne.n	8003432 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 8003426:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800342a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342e:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003430:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	700b      	strb	r3, [r1, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <ucGBFunctionSLA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800343c:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 800343e:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 8003442:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 8003446:	bf4c      	ite	mi
 8003448:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800344c:	f023 0310 	bicpl.w	r3, r3, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003450:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003454:	d105      	bne.n	8003462 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 8003456:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003460:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	700b      	strb	r3, [r1, #0]
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <ucGBFunctionSRA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 800346c:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003470:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003474:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 8003478:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 800347c:	bf14      	ite	ne
 800347e:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003482:	f022 0210 	biceq.w	r2, r2, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003486:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800348a:	d105      	bne.n	8003498 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 800348c:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003496:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003498:	f002 031f 	and.w	r3, r2, #31
 800349c:	700b      	strb	r3, [r1, #0]
}
 800349e:	4770      	bx	lr

080034a0 <ucGBFunctionSWAP>:
 * @param regValue value of the register or memory location
 * @param flagReg Pointer to the flag register
 * @returns New value of the register or memory
 */
uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 80034a0:	0903      	lsrs	r3, r0, #4
 80034a2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80034a6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80034aa:	d107      	bne.n	80034bc <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 80034ac:	f991 3000 	ldrsb.w	r3, [r1]
 80034b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	vResetBit(flagReg, C_FLAG);
	return regValue;
}
 80034ba:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034bc:	780b      	ldrb	r3, [r1, #0]
 80034be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	700b      	strb	r3, [r1, #0]
}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <ucGBFunctionSRL>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80034cc:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 80034ce:	f991 3000 	ldrsb.w	r3, [r1]
 80034d2:	bf4c      	ite	mi
 80034d4:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80034d8:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80034dc:	0840      	lsrs	r0, r0, #1
 80034de:	d105      	bne.n	80034ec <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80034e0:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80034ea:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	700b      	strb	r3, [r1, #0]
}
 80034f2:	4770      	bx	lr

080034f4 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80034f4:	fa40 f101 	asr.w	r1, r0, r1
 * @param bit The bit to be tested
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(ucCheckBit(regValue, bit) != 0) ?  vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80034f8:	07cb      	lsls	r3, r1, #31
 80034fa:	d508      	bpl.n	800350e <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80034fc:	7813      	ldrb	r3, [r2, #0]
 80034fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	7013      	strb	r3, [r2, #0]
	vResetBit(flagReg, N_FLAG);
	vSetBit(flagReg, H_FLAG);
}
 800350c:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 800350e:	f992 3000 	ldrsb.w	r3, [r2]
 8003512:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	7013      	strb	r3, [r2, #0]
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <ucGBFunctionRESHL>:
 * @brief Resets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be reset (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003524:	b510      	push	{r4, lr}
 8003526:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003528:	f000 f8bc 	bl	80036a4 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 800352c:	2301      	movs	r3, #1
 800352e:	fa03 f104 	lsl.w	r1, r3, r4
 8003532:	ea20 0001 	bic.w	r0, r0, r1
	vResetBit(&tempRes, bit);
	return tempRes;
}
 8003536:	b2c0      	uxtb	r0, r0
 8003538:	bd10      	pop	{r4, pc}
 800353a:	bf00      	nop

0800353c <ucGBFunctionSETHL>:
 * @brief Sets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be set (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 800353c:	b510      	push	{r4, lr}
 800353e:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003540:	f000 f8b0 	bl	80036a4 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003544:	2301      	movs	r3, #1
 8003546:	fa03 f104 	lsl.w	r1, r3, r4
 800354a:	4308      	orrs	r0, r1
	vSetBit(&tempRes, bit);
	return tempRes;
}
 800354c:	b2c0      	uxtb	r0, r0
 800354e:	bd10      	pop	{r4, pc}

08003550 <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
    ucCurrentOP = op;
 8003550:	4b01      	ldr	r3, [pc, #4]	; (8003558 <vGBMemorySetOP+0x8>)
 8003552:	7018      	strb	r0, [r3, #0]
}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	24011669 	.word	0x24011669

0800355c <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 800355c:	4603      	mov	r3, r0
 800355e:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <vGBMemoryLoad+0xc>)
 8003562:	4619      	mov	r1, r3
 8003564:	f007 bb1a 	b.w	800ab9c <memcpy>
 8003568:	24001668 	.word	0x24001668

0800356c <prvGBMemoryJoypad>:
/**
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @param data data trying to be written to Joypad Register.
 * @return Joypad Keys pressed
 */
uint8_t prvGBMemoryJoypad(){
 800356c:	b538      	push	{r3, r4, r5, lr}
    uint32_t value = 0;
	uint8_t mask = 0;

	if(ucJoypadSELdir == 0x10){
 800356e:	4c25      	ldr	r4, [pc, #148]	; (8003604 <prvGBMemoryJoypad+0x98>)
 8003570:	7822      	ldrb	r2, [r4, #0]
 8003572:	2a10      	cmp	r2, #16
 8003574:	d009      	beq.n	800358a <prvGBMemoryJoypad+0x1e>
	    HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
		value = HAL_ADC_GetValue(&hadc3) >> 12;
	}else if(ucJoypadSELbut == 0x20){
 8003576:	4d24      	ldr	r5, [pc, #144]	; (8003608 <prvGBMemoryJoypad+0x9c>)
 8003578:	782b      	ldrb	r3, [r5, #0]
 800357a:	2b20      	cmp	r3, #32
 800357c:	d029      	beq.n	80035d2 <prvGBMemoryJoypad+0x66>
 800357e:	200e      	movs	r0, #14
		}else{
		    mask = (0x1);
		}
	}

	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 8003580:	4310      	orrs	r0, r2
 8003582:	4318      	orrs	r0, r3
}
 8003584:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003588:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc3);
 800358a:	4820      	ldr	r0, [pc, #128]	; (800360c <prvGBMemoryJoypad+0xa0>)
 800358c:	f003 f992 	bl	80068b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	481d      	ldr	r0, [pc, #116]	; (800360c <prvGBMemoryJoypad+0xa0>)
 8003596:	f002 fe7b 	bl	8006290 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc3) >> 12;
 800359a:	481c      	ldr	r0, [pc, #112]	; (800360c <prvGBMemoryJoypad+0xa0>)
 800359c:	f002 ff02 	bl	80063a4 <HAL_ADC_GetValue>
 80035a0:	4d19      	ldr	r5, [pc, #100]	; (8003608 <prvGBMemoryJoypad+0x9c>)
 80035a2:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035a4:	280f      	cmp	r0, #15
 80035a6:	d022      	beq.n	80035ee <prvGBMemoryJoypad+0x82>
	    if((value >> 3) & 0x1){
 80035a8:	0703      	lsls	r3, r0, #28
 80035aa:	d40a      	bmi.n	80035c2 <prvGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 80035ac:	f000 0306 	and.w	r3, r0, #6
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	782b      	ldrb	r3, [r5, #0]
 80035b4:	d022      	beq.n	80035fc <prvGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 80035b6:	2802      	cmp	r0, #2
 80035b8:	7822      	ldrb	r2, [r4, #0]
 80035ba:	bf8c      	ite	hi
 80035bc:	200d      	movhi	r0, #13
 80035be:	200e      	movls	r0, #14
 80035c0:	e7de      	b.n	8003580 <prvGBMemoryJoypad+0x14>
 80035c2:	7822      	ldrb	r2, [r4, #0]
	    if((value >> 3) & 0x1){
 80035c4:	200b      	movs	r0, #11
 80035c6:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 80035c8:	4310      	orrs	r0, r2
 80035ca:	4318      	orrs	r0, r3
}
 80035cc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035d0:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc1);
 80035d2:	480f      	ldr	r0, [pc, #60]	; (8003610 <prvGBMemoryJoypad+0xa4>)
 80035d4:	f003 f96e 	bl	80068b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <prvGBMemoryJoypad+0xa4>)
 80035de:	f002 fe57 	bl	8006290 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 80035e2:	480b      	ldr	r0, [pc, #44]	; (8003610 <prvGBMemoryJoypad+0xa4>)
 80035e4:	f002 fede 	bl	80063a4 <HAL_ADC_GetValue>
 80035e8:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035ea:	280f      	cmp	r0, #15
 80035ec:	d1dc      	bne.n	80035a8 <prvGBMemoryJoypad+0x3c>
 80035ee:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 80035f0:	782b      	ldrb	r3, [r5, #0]
 80035f2:	4310      	orrs	r0, r2
 80035f4:	4318      	orrs	r0, r3
}
 80035f6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 80035fc:	2007      	movs	r0, #7
 80035fe:	7822      	ldrb	r2, [r4, #0]
 8003600:	e7be      	b.n	8003580 <prvGBMemoryJoypad+0x14>
 8003602:	bf00      	nop
 8003604:	2401166a 	.word	0x2401166a
 8003608:	24001665 	.word	0x24001665
 800360c:	24011850 	.word	0x24011850
 8003610:	240117ec 	.word	0x240117ec

08003614 <vGBMemorySetBit>:
 * @param address memory map address
 * @param bit which bit to set (0 - 7)
 * @returns Nothing
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003614:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003618:	b29b      	uxth	r3, r3
 800361a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800361e:	d302      	bcc.n	8003626 <vGBMemorySetBit+0x12>
	    mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 8003620:	0403      	lsls	r3, r0, #16
 8003622:	d411      	bmi.n	8003648 <vGBMemorySetBit+0x34>
 8003624:	4770      	bx	lr
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 8003626:	2301      	movs	r3, #1
 8003628:	4a0c      	ldr	r2, [pc, #48]	; (800365c <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 800362a:	b410      	push	{r4}
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 800362c:	fa03 f101 	lsl.w	r1, r3, r1
 8003630:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8003634:	b249      	sxtb	r1, r1
 8003636:	5d13      	ldrb	r3, [r2, r4]
 8003638:	430b      	orrs	r3, r1
 800363a:	5513      	strb	r3, [r2, r4]
	    return;

	mem.ram[address] |= (0x1 << bit);
 800363c:	5c13      	ldrb	r3, [r2, r0]
 800363e:	4319      	orrs	r1, r3
 8003640:	5411      	strb	r1, [r2, r0]
}
 8003642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	2301      	movs	r3, #1
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <vGBMemorySetBit+0x48>)
 800364c:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 8003650:	5c13      	ldrb	r3, [r2, r0]
 8003652:	b249      	sxtb	r1, r1
 8003654:	4319      	orrs	r1, r3
 8003656:	5411      	strb	r1, [r2, r0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	24001668 	.word	0x24001668

08003660 <vGBMemoryResetBit>:
 * @param bit which bit to reset (0 - 7)
 * @returns Nothing
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

    if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003660:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8003664:	b292      	uxth	r2, r2
 8003666:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 800366a:	b430      	push	{r4, r5}
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 800366c:	d20f      	bcs.n	800368e <vGBMemoryResetBit+0x2e>
	    mem.ram[address - 0x2000] &= ~(0x1 << bit);
 800366e:	2201      	movs	r2, #1
 8003670:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 8003674:	4c0a      	ldr	r4, [pc, #40]	; (80036a0 <vGBMemoryResetBit+0x40>)
 8003676:	fa02 f101 	lsl.w	r1, r2, r1
 800367a:	5d62      	ldrb	r2, [r4, r5]
 800367c:	43cb      	mvns	r3, r1
 800367e:	b25b      	sxtb	r3, r3
 8003680:	401a      	ands	r2, r3
 8003682:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
	    return;

	mem.ram[address] &= ~(0x1 << bit);
 8003684:	5c22      	ldrb	r2, [r4, r0]
 8003686:	4013      	ands	r3, r2
 8003688:	5423      	strb	r3, [r4, r0]
}
 800368a:	bc30      	pop	{r4, r5}
 800368c:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800368e:	0403      	lsls	r3, r0, #16
 8003690:	d5fb      	bpl.n	800368a <vGBMemoryResetBit+0x2a>
 8003692:	2201      	movs	r2, #1
 8003694:	4c02      	ldr	r4, [pc, #8]	; (80036a0 <vGBMemoryResetBit+0x40>)
 8003696:	fa02 f301 	lsl.w	r3, r2, r1
 800369a:	43db      	mvns	r3, r3
 800369c:	b25b      	sxtb	r3, r3
 800369e:	e7f1      	b.n	8003684 <vGBMemoryResetBit+0x24>
 80036a0:	24001668 	.word	0x24001668

080036a4 <ucGBMemoryRead>:
 * @param address memory map address
 * @return data byte of data located in memory map
 */
uint8_t ucGBMemoryRead(uint16_t address){

    if(address >= 0xFF00){
 80036a4:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
uint8_t ucGBMemoryRead(uint16_t address){
 80036a8:	4603      	mov	r3, r0
    if(address >= 0xFF00){
 80036aa:	d307      	bcc.n	80036bc <ucGBMemoryRead+0x18>
	    if(address == JOY_ADDR){
 80036ac:	d019      	beq.n	80036e2 <ucGBMemoryRead+0x3e>
		    return prvGBMemoryJoypad();
		}

		if(address == SB_ADDR){
 80036ae:	f64f 7201 	movw	r2, #65281	; 0xff01
 80036b2:	4290      	cmp	r0, r2
 80036b4:	d017      	beq.n	80036e6 <ucGBMemoryRead+0x42>
 80036b6:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <ucGBMemoryRead+0x48>)
	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
	    return mem.ram[address - 0x2000];

	return mem.ram[address];
 80036b8:	5cd0      	ldrb	r0, [r2, r3]
 80036ba:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE) && mem.ram[0xFF50] != 0){
 80036bc:	0402      	lsls	r2, r0, #16
 80036be:	d407      	bmi.n	80036d0 <ucGBMemoryRead+0x2c>
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <ucGBMemoryRead+0x48>)
 80036c2:	f64f 7150 	movw	r1, #65360	; 0xff50
 80036c6:	5c51      	ldrb	r1, [r2, r1]
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d0f5      	beq.n	80036b8 <ucGBMemoryRead+0x14>
	    return ucGBMBCreadBankX(address);
 80036cc:	f7fc be7e 	b.w	80003cc <ucGBMBCreadBankX>
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80036d0:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 80036d4:	b292      	uxth	r2, r2
 80036d6:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 80036da:	d2ec      	bcs.n	80036b6 <ucGBMemoryRead+0x12>
	    return mem.ram[address - 0x2000];
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <ucGBMemoryRead+0x4c>)
 80036de:	5c80      	ldrb	r0, [r0, r2]
 80036e0:	4770      	bx	lr
		    return prvGBMemoryJoypad();
 80036e2:	f7ff bf43 	b.w	800356c <prvGBMemoryJoypad>
		    return 0xFF;
 80036e6:	20ff      	movs	r0, #255	; 0xff
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	24001668 	.word	0x24001668
 80036f0:	23fff668 	.word	0x23fff668

080036f4 <vGBMemoryWrite>:
    if(address >= 0xFF00){
 80036f4:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	460d      	mov	r5, r1
    if(address >= 0xFF00){
 80036fe:	d313      	bcc.n	8003728 <vGBMemoryWrite+0x34>
	    if(address == JOY_ADDR){
 8003700:	d021      	beq.n	8003746 <vGBMemoryWrite+0x52>
		else if(address == DMA_ADDR){
 8003702:	f64f 7346 	movw	r3, #65350	; 0xff46
 8003706:	4298      	cmp	r0, r3
 8003708:	d026      	beq.n	8003758 <vGBMemoryWrite+0x64>
		else if(address == DIV_ADDR){
 800370a:	f64f 7304 	movw	r3, #65284	; 0xff04
 800370e:	4298      	cmp	r0, r3
 8003710:	d036      	beq.n	8003780 <vGBMemoryWrite+0x8c>
		else if(address == TAC_ADDR){
 8003712:	f64f 7307 	movw	r3, #65287	; 0xff07
 8003716:	4298      	cmp	r0, r3
 8003718:	d043      	beq.n	80037a2 <vGBMemoryWrite+0xae>
		else if(address == STC_ADDR){
 800371a:	f64f 7302 	movw	r3, #65282	; 0xff02
 800371e:	4298      	cmp	r0, r3
 8003720:	d032      	beq.n	8003788 <vGBMemoryWrite+0x94>
	mem.ram[address] = data;
 8003722:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <vGBMemoryWrite+0xdc>)
 8003724:	551d      	strb	r5, [r3, r4]
}
 8003726:	bd70      	pop	{r4, r5, r6, pc}
	if((address >= CARTROM_BANK0 && address < VRAM_BASE)){
 8003728:	0403      	lsls	r3, r0, #16
 800372a:	d508      	bpl.n	800373e <vGBMemoryWrite+0x4a>
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 800372c:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003730:	b29b      	uxth	r3, r3
 8003732:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003736:	d2f4      	bcs.n	8003722 <vGBMemoryWrite+0x2e>
	    mem.ram[address - 0x2000] = data;
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <vGBMemoryWrite+0xe0>)
 800373a:	54e1      	strb	r1, [r4, r3]
}
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    vGBMBCwrite(address, data);
 8003742:	f7fc be61 	b.w	8000408 <vGBMBCwrite>
	        ucJoypadSELdir = data & 0x10;
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <vGBMemoryWrite+0xe4>)
 8003748:	f001 0110 	and.w	r1, r1, #16
	        ucJoypadSELbut = data & 0x20;
 800374c:	f005 0520 	and.w	r5, r5, #32
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <vGBMemoryWrite+0xe8>)
	        ucJoypadSELdir = data & 0x10;
 8003752:	7011      	strb	r1, [r2, #0]
	        ucJoypadSELbut = data & 0x20;
 8003754:	701d      	strb	r5, [r3, #0]
}
 8003756:	bd70      	pop	{r4, r5, r6, pc}
		    for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 8003758:	020d      	lsls	r5, r1, #8
 800375a:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 800375e:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 8003762:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8003766:	1960      	adds	r0, r4, r5
 8003768:	b280      	uxth	r0, r0
 800376a:	f7ff ff9b 	bl	80036a4 <ucGBMemoryRead>
 800376e:	4601      	mov	r1, r0
 8003770:	4620      	mov	r0, r4
 8003772:	3401      	adds	r4, #1
 8003774:	f7ff ffbe 	bl	80036f4 <vGBMemoryWrite>
 8003778:	b2a4      	uxth	r4, r4
 800377a:	42b4      	cmp	r4, r6
 800377c:	d1f3      	bne.n	8003766 <vGBMemoryWrite+0x72>
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}
		    mem.ram[DIV_ADDR] = 0;
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <vGBMemoryWrite+0xdc>)
 8003782:	2200      	movs	r2, #0
 8003784:	541a      	strb	r2, [r3, r0]
}
 8003786:	bd70      	pop	{r4, r5, r6, pc}
		    if(ucCheckBit(data, 7)){
 8003788:	2107      	movs	r1, #7
 800378a:	4628      	mov	r0, r5
 800378c:	f7ff fa8e 	bl	8002cac <ucCheckBit>
 8003790:	b110      	cbz	r0, 8003798 <vGBMemoryWrite+0xa4>
		        ucDataTransFlag = 1;
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <vGBMemoryWrite+0xec>)
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
			mem.ram[address] = data;
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <vGBMemoryWrite+0xdc>)
 800379a:	f64f 7302 	movw	r3, #65282	; 0xff02
 800379e:	54d5      	strb	r5, [r2, r3]
}
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
		    ucTimerStopStart = ucCheckBit(data, 2);
 80037a2:	2102      	movs	r1, #2
 80037a4:	4628      	mov	r0, r5
 80037a6:	f7ff fa81 	bl	8002cac <ucCheckBit>
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <vGBMemoryWrite+0xf0>)
 80037ac:	4602      	mov	r2, r0
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037ae:	2101      	movs	r1, #1
 80037b0:	4628      	mov	r0, r5
		    ucTimerStopStart = ucCheckBit(data, 2);
 80037b2:	701a      	strb	r2, [r3, #0]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037b4:	f7ff fa7a 	bl	8002cac <ucCheckBit>
 80037b8:	4606      	mov	r6, r0
 80037ba:	2100      	movs	r1, #0
 80037bc:	4628      	mov	r0, r5
 80037be:	f7ff fa75 	bl	8002cac <ucCheckBit>
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <vGBMemoryWrite+0xf4>)
			mem.ram[address] = data;
 80037c4:	4a02      	ldr	r2, [pc, #8]	; (80037d0 <vGBMemoryWrite+0xdc>)
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037c6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
			mem.ram[address] = data;
 80037ca:	5515      	strb	r5, [r2, r4]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037cc:	7018      	strb	r0, [r3, #0]
}
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	24001668 	.word	0x24001668
 80037d4:	23fff668 	.word	0x23fff668
 80037d8:	2401166a 	.word	0x2401166a
 80037dc:	24001665 	.word	0x24001665
 80037e0:	240010ab 	.word	0x240010ab
 80037e4:	24011668 	.word	0x24011668
 80037e8:	24001664 	.word	0x24001664

080037ec <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	460d      	mov	r5, r1
    vGBMemoryWrite(address,   data & 0xFF);
 80037f2:	b2c9      	uxtb	r1, r1
 80037f4:	f7ff ff7e 	bl	80036f4 <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 80037f8:	1c60      	adds	r0, r4, #1
 80037fa:	0a29      	lsrs	r1, r5, #8
 80037fc:	b280      	uxth	r0, r0
}
 80037fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 8003802:	f7ff bf77 	b.w	80036f4 <vGBMemoryWrite>
 8003806:	bf00      	nop

08003808 <vGBMemoryInit>:
void vGBMemoryInit(){
 8003808:	b538      	push	{r3, r4, r5, lr}
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 800380a:	f240 1047 	movw	r0, #327	; 0x147
	mem.ram[IF_ADDR] = 0xE1;
 800380e:	25e1      	movs	r5, #225	; 0xe1
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 8003810:	f7ff ff48 	bl	80036a4 <ucGBMemoryRead>
	mem.ram[JOY_ADDR] = 0xCF;
 8003814:	24cf      	movs	r4, #207	; 0xcf
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 8003816:	f7fc fdd3 	bl	80003c0 <vGBMBCsetControllerType>
	mem.ram[JOY_ADDR] = 0xCF;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <vGBMemoryInit+0x30>)
	mem.ram[IF_ADDR] = 0xE1;
 800381c:	f64f 700f 	movw	r0, #65295	; 0xff0f
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003820:	21f8      	movs	r1, #248	; 0xf8
	mem.ram[JOY_ADDR] = 0xCF;
 8003822:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
	mem.ram[IF_ADDR] = 0xE1;
 8003826:	541d      	strb	r5, [r3, r0]
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003828:	f64f 7007 	movw	r0, #65287	; 0xff07
	mem.ram[JOY_ADDR] = 0xCF;
 800382c:	7014      	strb	r4, [r2, #0]
}
 800382e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003832:	f7ff bf5f 	b.w	80036f4 <vGBMemoryWrite>
 8003836:	bf00      	nop
 8003838:	24001668 	.word	0x24001668

0800383c <usGBMemoryReadShort>:
 * @brief Read from 2 sequential locations in memory map
 * @param address memory map address
 * @return Short information of data in memory map
 */
uint16_t usGBMemoryReadShort(uint16_t address){
    return usConcat16BitBigEndian(mem.ram[address], mem.ram[address+1]);
 800383c:	4b02      	ldr	r3, [pc, #8]	; (8003848 <usGBMemoryReadShort+0xc>)
 800383e:	181a      	adds	r2, r3, r0
 8003840:	5c18      	ldrb	r0, [r3, r0]
 8003842:	7851      	ldrb	r1, [r2, #1]
 8003844:	f7ff ba1e 	b.w	8002c84 <usConcat16BitBigEndian>
 8003848:	24001668 	.word	0x24001668

0800384c <vGBMemoryIncTimers>:
    static uint8_t timerDIV  = 0;
    static uint8_t timerTIMA = 0;
    static uint8_t oldTIMA   = 0;
    static uint8_t timerDiv8k = 0;

    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 800384c:	4a3d      	ldr	r2, [pc, #244]	; (8003944 <vGBMemoryIncTimers+0xf8>)
 800384e:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003854:	7813      	ldrb	r3, [r2, #0]
 8003856:	0084      	lsls	r4, r0, #2
 8003858:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800385c:	2dff      	cmp	r5, #255	; 0xff
 800385e:	dd0c      	ble.n	800387a <vGBMemoryIncTimers+0x2e>
        mem.ram[DIV_ADDR]++;
 8003860:	4e39      	ldr	r6, [pc, #228]	; (8003948 <vGBMemoryIncTimers+0xfc>)
 8003862:	f64f 7704 	movw	r7, #65284	; 0xff04

        if(ucDataTransFlag){
 8003866:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8003960 <vGBMemoryIncTimers+0x114>
        mem.ram[DIV_ADDR]++;
 800386a:	5df5      	ldrb	r5, [r6, r7]
        if(ucDataTransFlag){
 800386c:	f89c e000 	ldrb.w	lr, [ip]
        mem.ram[DIV_ADDR]++;
 8003870:	3501      	adds	r5, #1
 8003872:	55f5      	strb	r5, [r6, r7]
        if(ucDataTransFlag){
 8003874:	f1be 0f00 	cmp.w	lr, #0
 8003878:	d137      	bne.n	80038ea <vGBMemoryIncTimers+0x9e>
        }
    }

    timerDIV += (durationMcycle << 2);

    if(ucTimerStopStart){
 800387a:	4d34      	ldr	r5, [pc, #208]	; (800394c <vGBMemoryIncTimers+0x100>)
    timerDIV += (durationMcycle << 2);
 800387c:	4423      	add	r3, r4
    if(ucTimerStopStart){
 800387e:	782d      	ldrb	r5, [r5, #0]
    timerDIV += (durationMcycle << 2);
 8003880:	7013      	strb	r3, [r2, #0]
    if(ucTimerStopStart){
 8003882:	2d00      	cmp	r5, #0
 8003884:	d02f      	beq.n	80038e6 <vGBMemoryIncTimers+0x9a>
        uint16_t curDuration = 0;

        switch (ucClockMode) {
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <vGBMemoryIncTimers+0x104>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d835      	bhi.n	80038fa <vGBMemoryIncTimers+0xae>
 800388e:	e8df f003 	tbb	[pc, r3]
 8003892:	3c05      	.short	0x3c05
 8003894:	023f      	.short	0x023f
            case 0x0: curDuration = (durationMcycle << 0);  break;
            case 0x1: curDuration = (durationMcycle << 6);  break;
            case 0x2: curDuration = (durationMcycle << 4);  break;
            case 0x3: curDuration = (durationMcycle << 2);  break;
 8003896:	b2a1      	uxth	r1, r4
 8003898:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
            default:                                        break;
        }

        if(timerTIMA + curDuration > 0xFF){
 800389c:	4d2d      	ldr	r5, [pc, #180]	; (8003954 <vGBMemoryIncTimers+0x108>)
 800389e:	782a      	ldrb	r2, [r5, #0]
 80038a0:	4411      	add	r1, r2
 80038a2:	29ff      	cmp	r1, #255	; 0xff
 80038a4:	dd2c      	ble.n	8003900 <vGBMemoryIncTimers+0xb4>
            mem.ram[TIMA_ADDR]++;
 80038a6:	4c28      	ldr	r4, [pc, #160]	; (8003948 <vGBMemoryIncTimers+0xfc>)
 80038a8:	f64f 7605 	movw	r6, #65285	; 0xff05
        }

        if(timerTIMA + curDuration > 0x1FE){
 80038ac:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
            mem.ram[TIMA_ADDR]++;
 80038b0:	5da3      	ldrb	r3, [r4, r6]
 80038b2:	bfd4      	ite	le
 80038b4:	3301      	addle	r3, #1
            mem.ram[TIMA_ADDR]++;
 80038b6:	3302      	addgt	r3, #2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	55a3      	strb	r3, [r4, r6]
        }

        timerTIMA += curDuration;
 80038bc:	4410      	add	r0, r2

        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038be:	2b04      	cmp	r3, #4
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <vGBMemoryIncTimers+0x10c>)
        timerTIMA += curDuration;
 80038c2:	7028      	strb	r0, [r5, #0]
        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038c4:	d80e      	bhi.n	80038e4 <vGBMemoryIncTimers+0x98>
 80038c6:	7811      	ldrb	r1, [r2, #0]
 80038c8:	29ff      	cmp	r1, #255	; 0xff
 80038ca:	d10b      	bne.n	80038e4 <vGBMemoryIncTimers+0x98>
	mem.ram[address] |= (0x1 << bit);
 80038cc:	f64f 700f 	movw	r0, #65295	; 0xff0f
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038d0:	f64f 7306 	movw	r3, #65286	; 0xff06
 80038d4:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 80038d8:	5c21      	ldrb	r1, [r4, r0]
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038da:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 80038dc:	f041 0104 	orr.w	r1, r1, #4
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038e0:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 80038e2:	5421      	strb	r1, [r4, r0]
            vGBMemorySetBit(IF_ADDR, 2);
        }

        oldTIMA = mem.ram[TIMA_ADDR];
 80038e4:	7013      	strb	r3, [r2, #0]
    }
}
 80038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            timerDiv8k++;
 80038ea:	4f1c      	ldr	r7, [pc, #112]	; (800395c <vGBMemoryIncTimers+0x110>)
 80038ec:	783d      	ldrb	r5, [r7, #0]
 80038ee:	3501      	adds	r5, #1
 80038f0:	b2ed      	uxtb	r5, r5
            if(timerDiv8k == 0x10){
 80038f2:	2d10      	cmp	r5, #16
 80038f4:	d00f      	beq.n	8003916 <vGBMemoryIncTimers+0xca>
            timerDiv8k++;
 80038f6:	703d      	strb	r5, [r7, #0]
 80038f8:	e7bf      	b.n	800387a <vGBMemoryIncTimers+0x2e>
        if(timerTIMA + curDuration > 0xFF){
 80038fa:	4d16      	ldr	r5, [pc, #88]	; (8003954 <vGBMemoryIncTimers+0x108>)
 80038fc:	2000      	movs	r0, #0
 80038fe:	782a      	ldrb	r2, [r5, #0]
 8003900:	4c11      	ldr	r4, [pc, #68]	; (8003948 <vGBMemoryIncTimers+0xfc>)
 8003902:	f64f 7305 	movw	r3, #65285	; 0xff05
 8003906:	5ce3      	ldrb	r3, [r4, r3]
 8003908:	e7d8      	b.n	80038bc <vGBMemoryIncTimers+0x70>
            case 0x1: curDuration = (durationMcycle << 6);  break;
 800390a:	0181      	lsls	r1, r0, #6
 800390c:	b2c8      	uxtb	r0, r1
 800390e:	e7c5      	b.n	800389c <vGBMemoryIncTimers+0x50>
            case 0x2: curDuration = (durationMcycle << 4);  break;
 8003910:	0101      	lsls	r1, r0, #4
 8003912:	b2c8      	uxtb	r0, r1
 8003914:	e7c2      	b.n	800389c <vGBMemoryIncTimers+0x50>
	mem.ram[address] &= ~(0x1 << bit);
 8003916:	f64f 7902 	movw	r9, #65282	; 0xff02
	mem.ram[address] |= (0x1 << bit);
 800391a:	f64f 780f 	movw	r8, #65295	; 0xff0f
                timerDiv8k = 0;
 800391e:	f04f 0a00 	mov.w	sl, #0
	mem.ram[address] &= ~(0x1 << bit);
 8003922:	f816 e009 	ldrb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 8003926:	f816 5008 	ldrb.w	r5, [r6, r8]
	mem.ram[address] &= ~(0x1 << bit);
 800392a:	f00e 0e7f 	and.w	lr, lr, #127	; 0x7f
                timerDiv8k = 0;
 800392e:	f887 a000 	strb.w	sl, [r7]
	mem.ram[address] |= (0x1 << bit);
 8003932:	f045 0508 	orr.w	r5, r5, #8
                ucDataTransFlag = 0;
 8003936:	f88c a000 	strb.w	sl, [ip]
	mem.ram[address] &= ~(0x1 << bit);
 800393a:	f806 e009 	strb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 800393e:	f806 5008 	strb.w	r5, [r6, r8]
 8003942:	e79a      	b.n	800387a <vGBMemoryIncTimers+0x2e>
 8003944:	240010a8 	.word	0x240010a8
 8003948:	24001668 	.word	0x24001668
 800394c:	24011668 	.word	0x24011668
 8003950:	24001664 	.word	0x24001664
 8003954:	240010aa 	.word	0x240010aa
 8003958:	240010a7 	.word	0x240010a7
 800395c:	240010a9 	.word	0x240010a9
 8003960:	240010ab 	.word	0x240010ab

08003964 <prvSetMode.part.0>:
 * @return Nothing
 */
void prvSetMode(uint8_t mode){
    ucMode = mode;
    switch (mode) {
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003964:	2101      	movs	r1, #1
 8003966:	f64f 7041 	movw	r0, #65345	; 0xff41
void prvSetMode(uint8_t mode){
 800396a:	b508      	push	{r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800396c:	f7ff fe78 	bl	8003660 <vGBMemoryResetBit>
 8003970:	2100      	movs	r1, #0
 8003972:	f64f 7041 	movw	r0, #65345	; 0xff41
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
        default:                                                                       break;
    }
}
 8003976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800397a:	f7ff be71 	b.w	8003660 <vGBMemoryResetBit>
 800397e:	bf00      	nop

08003980 <vSetFrameBuffer>:
    memset(ucGBFrame, 0, 160 * 144 * 4 * ulScaleAmount);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <vSetFrameBuffer+0x18>)
 8003982:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <vSetFrameBuffer+0x1c>)
 8003988:	2100      	movs	r1, #0
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	fb02 f203 	mul.w	r2, r2, r3
 8003992:	f007 b911 	b.w	800abb8 <memset>
 8003996:	bf00      	nop
 8003998:	24001014 	.word	0x24001014
 800399c:	24001010 	.word	0x24001010

080039a0 <prvCheckBGP>:
void prvCheckBGP(){
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039a2:	f64f 7047 	movw	r0, #65351	; 0xff47
            case 2: ucBGPColorToPalette[i] = 3;  break;
 80039a6:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039a8:	f7ff fe7c 	bl	80036a4 <ucGBMemoryRead>
            case 3: ucBGPColorToPalette[i] = 4;  break;
 80039ac:	2604      	movs	r6, #4
 80039ae:	490c      	ldr	r1, [pc, #48]	; (80039e0 <prvCheckBGP+0x40>)
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039b0:	2200      	movs	r2, #0
            case 1: ucBGPColorToPalette[i] = 2;  break;
 80039b2:	2502      	movs	r5, #2
            case 0: ucBGPColorToPalette[i] = 1;  break;
 80039b4:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 80039b6:	fa40 f302 	asr.w	r3, r0, r2
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d00c      	beq.n	80039dc <prvCheckBGP+0x3c>
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d008      	beq.n	80039d8 <prvCheckBGP+0x38>
 80039c6:	2b01      	cmp	r3, #1
            case 0: ucBGPColorToPalette[i] = 1;  break;
 80039c8:	bf14      	ite	ne
 80039ca:	700c      	strbne	r4, [r1, #0]
            case 1: ucBGPColorToPalette[i] = 2;  break;
 80039cc:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 80039ce:	3202      	adds	r2, #2
 80039d0:	3101      	adds	r1, #1
 80039d2:	2a08      	cmp	r2, #8
 80039d4:	d1ef      	bne.n	80039b6 <prvCheckBGP+0x16>
}
 80039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucBGPColorToPalette[i] = 4;  break;
 80039d8:	700e      	strb	r6, [r1, #0]
 80039da:	e7f8      	b.n	80039ce <prvCheckBGP+0x2e>
            case 2: ucBGPColorToPalette[i] = 3;  break;
 80039dc:	700f      	strb	r7, [r1, #0]
 80039de:	e7f6      	b.n	80039ce <prvCheckBGP+0x2e>
 80039e0:	24011718 	.word	0x24011718

080039e4 <prvCheckOBP0>:
void prvCheckOBP0(){
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039e6:	f64f 7048 	movw	r0, #65352	; 0xff48
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 80039ea:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039ec:	f7ff fe5a 	bl	80036a4 <ucGBMemoryRead>
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 80039f0:	2604      	movs	r6, #4
 80039f2:	490c      	ldr	r1, [pc, #48]	; (8003a24 <prvCheckOBP0+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039f4:	2200      	movs	r2, #0
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 80039f6:	2502      	movs	r5, #2
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 80039f8:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 80039fa:	fa40 f302 	asr.w	r3, r0, r2
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d00c      	beq.n	8003a20 <prvCheckOBP0+0x3c>
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d008      	beq.n	8003a1c <prvCheckOBP0+0x38>
 8003a0a:	2b01      	cmp	r3, #1
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 8003a0c:	bf14      	ite	ne
 8003a0e:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 8003a10:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a12:	3202      	adds	r2, #2
 8003a14:	3101      	adds	r1, #1
 8003a16:	2a08      	cmp	r2, #8
 8003a18:	d1ef      	bne.n	80039fa <prvCheckOBP0+0x16>
}
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 8003a1c:	700e      	strb	r6, [r1, #0]
 8003a1e:	e7f8      	b.n	8003a12 <prvCheckOBP0+0x2e>
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 8003a20:	700f      	strb	r7, [r1, #0]
 8003a22:	e7f6      	b.n	8003a12 <prvCheckOBP0+0x2e>
 8003a24:	2401166c 	.word	0x2401166c

08003a28 <prvCheckOBP1>:
void prvCheckOBP1(){
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a2a:	f64f 7049 	movw	r0, #65353	; 0xff49
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 8003a2e:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a30:	f7ff fe38 	bl	80036a4 <ucGBMemoryRead>
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003a34:	2604      	movs	r6, #4
 8003a36:	490c      	ldr	r1, [pc, #48]	; (8003a68 <prvCheckOBP1+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a38:	2200      	movs	r2, #0
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a3a:	2502      	movs	r5, #2
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a3c:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 8003a3e:	fa40 f302 	asr.w	r3, r0, r2
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d00c      	beq.n	8003a64 <prvCheckOBP1+0x3c>
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d008      	beq.n	8003a60 <prvCheckOBP1+0x38>
 8003a4e:	2b01      	cmp	r3, #1
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a50:	bf14      	ite	ne
 8003a52:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a54:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a56:	3202      	adds	r2, #2
 8003a58:	3101      	adds	r1, #1
 8003a5a:	2a08      	cmp	r2, #8
 8003a5c:	d1ef      	bne.n	8003a3e <prvCheckOBP1+0x16>
}
 8003a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003a60:	700e      	strb	r6, [r1, #0]
 8003a62:	e7f8      	b.n	8003a56 <prvCheckOBP1+0x2e>
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 8003a64:	700f      	strb	r7, [r1, #0]
 8003a66:	e7f6      	b.n	8003a56 <prvCheckOBP1+0x2e>
 8003a68:	24011724 	.word	0x24011724

08003a6c <getTileLineData>:
    if (TileDataAddr == 0x8000){
 8003a6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	460d      	mov	r5, r1
    if (TileDataAddr == 0x8000){
 8003a74:	d00e      	beq.n	8003a94 <getTileLineData+0x28>
        int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 8003a76:	4418      	add	r0, r3
 8003a78:	4614      	mov	r4, r2
 8003a7a:	b280      	uxth	r0, r0
 8003a7c:	f7ff fe12 	bl	80036a4 <ucGBMemoryRead>
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a80:	1961      	adds	r1, r4, r5
        uint16_t temp2 =( temp + 128) * 0x10;
 8003a82:	b240      	sxtb	r0, r0
 8003a84:	3080      	adds	r0, #128	; 0x80
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a86:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a8e:	b280      	uxth	r0, r0
 8003a90:	f7ff bed4 	b.w	800383c <usGBMemoryReadShort>
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003a94:	4418      	add	r0, r3
 8003a96:	b280      	uxth	r0, r0
 8003a98:	f7ff fe04 	bl	80036a4 <ucGBMemoryRead>
 8003a9c:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 8003aa0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003aa8:	b280      	uxth	r0, r0
 8003aaa:	f7ff bec7 	b.w	800383c <usGBMemoryReadShort>
 8003aae:	bf00      	nop

08003ab0 <prvCheckLYC>:
void prvCheckLYC(uint8_t ly){
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4604      	mov	r4, r0
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003ab4:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003ab8:	f7ff fdf4 	bl	80036a4 <ucGBMemoryRead>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003abc:	2102      	movs	r1, #2
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003abe:	42a0      	cmp	r0, r4
        vGBMemorySetBit(STAT_ADDR, 2);
 8003ac0:	f64f 7041 	movw	r0, #65345	; 0xff41
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003ac4:	d003      	beq.n	8003ace <prvCheckLYC+0x1e>
}
 8003ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vGBMemoryResetBit(STAT_ADDR, 2);
 8003aca:	f7ff bdc9 	b.w	8003660 <vGBMemoryResetBit>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003ace:	f7ff fda1 	bl	8003614 <vGBMemorySetBit>
        if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 6))
 8003ad2:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003ad6:	f7ff fde5 	bl	80036a4 <ucGBMemoryRead>
 8003ada:	2106      	movs	r1, #6
 8003adc:	f7ff f8e6 	bl	8002cac <ucCheckBit>
 8003ae0:	b900      	cbnz	r0, 8003ae4 <prvCheckLYC+0x34>
}
 8003ae2:	bd10      	pop	{r4, pc}
            vGBMemorySetBit(IF_ADDR, 1);
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            vGBMemorySetBit(IF_ADDR, 1);
 8003aee:	f7ff bd91 	b.w	8003614 <vGBMemorySetBit>
 8003af2:	bf00      	nop

08003af4 <prvSetMode>:
void prvSetMode(uint8_t mode){
 8003af4:	b508      	push	{r3, lr}
    ucMode = mode;
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <prvSetMode+0x64>)
 8003af8:	7018      	strb	r0, [r3, #0]
    switch (mode) {
 8003afa:	2803      	cmp	r0, #3
 8003afc:	d82b      	bhi.n	8003b56 <prvSetMode+0x62>
 8003afe:	e8df f000 	tbb	[pc, r0]
 8003b02:	1202      	.short	0x1202
 8003b04:	061e      	.short	0x061e
}
 8003b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b0a:	f7ff bf2b 	b.w	8003964 <prvSetMode.part.0>
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b14:	f7ff fd7e 	bl	8003614 <vGBMemorySetBit>
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003b22:	f7ff bd77 	b.w	8003614 <vGBMemorySetBit>
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003b26:	2101      	movs	r1, #1
 8003b28:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b2c:	f7ff fd98 	bl	8003660 <vGBMemoryResetBit>
 8003b30:	2100      	movs	r1, #0
 8003b32:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003b3a:	f7ff bd6b 	b.w	8003614 <vGBMemorySetBit>
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b44:	f7ff fd66 	bl	8003614 <vGBMemorySetBit>
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003b52:	f7ff bd85 	b.w	8003660 <vGBMemoryResetBit>
}
 8003b56:	bd08      	pop	{r3, pc}
 8003b58:	24011720 	.word	0x24011720

08003b5c <prvUpdateBuffer>:
 * @details Updates and applies a pixel perfect image scaling algorithm on 1 pixel of the frame buffer when called.
 * @param data Color information for the current pixel
 * @param pixelPos X position for the current pixel
 * @returns Nothing
 */
void prvUpdateBuffer(uint8_t data, int pixelPos){
 8003b5c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    pixelPos *= ulScaleAmount;
 8003b60:	4f10      	ldr	r7, [pc, #64]	; (8003ba4 <prvUpdateBuffer+0x48>)
 8003b62:	783b      	ldrb	r3, [r7, #0]
 8003b64:	fb01 f103 	mul.w	r1, r1, r3
    for (int yStretch = 1; yStretch <= ulScaleAmount; yStretch++){
 8003b68:	b1cb      	cbz	r3, 8003b9e <prvUpdateBuffer+0x42>
 8003b6a:	2601      	movs	r6, #1
 8003b6c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003bac <prvUpdateBuffer+0x50>
 8003b70:	4d0d      	ldr	r5, [pc, #52]	; (8003ba8 <prvUpdateBuffer+0x4c>)
 8003b72:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8003bb0 <prvUpdateBuffer+0x54>
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b76:	2200      	movs	r2, #0
            ucGBFrame[pixelPos + xStretch + (ulCurLine) + (ulLineAdd * yStretch)] = data;
 8003b78:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7c:	682c      	ldr	r4, [r5, #0]
 8003b7e:	440b      	add	r3, r1
 8003b80:	4413      	add	r3, r2
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b82:	3201      	adds	r2, #1
            ucGBFrame[pixelPos + xStretch + (ulCurLine) + (ulLineAdd * yStretch)] = data;
 8003b84:	fb04 3306 	mla	r3, r4, r6, r3
 8003b88:	f8dc 4000 	ldr.w	r4, [ip]
 8003b8c:	5518      	strb	r0, [r3, r4]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b8e:	783b      	ldrb	r3, [r7, #0]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	dcf1      	bgt.n	8003b78 <prvUpdateBuffer+0x1c>
    for (int yStretch = 1; yStretch <= ulScaleAmount; yStretch++){
 8003b94:	3601      	adds	r6, #1
 8003b96:	42b3      	cmp	r3, r6
 8003b98:	db01      	blt.n	8003b9e <prvUpdateBuffer+0x42>
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1eb      	bne.n	8003b76 <prvUpdateBuffer+0x1a>
        }
    }
}
 8003b9e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003ba2:	4770      	bx	lr
 8003ba4:	24001014 	.word	0x24001014
 8003ba8:	24011670 	.word	0x24011670
 8003bac:	24001010 	.word	0x24001010
 8003bb0:	24011714 	.word	0x24011714

08003bb4 <prvGBPPUDrawLineWindow.part.0>:
 */
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
    if(WY > ly || WY > 143 || WX > 166)
        return;

    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003bb4:	1a82      	subs	r2, r0, r2
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bb6:	4250      	negs	r0, r2
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bbc:	f000 0007 	and.w	r0, r0, #7
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003bc0:	f1a1 0507 	sub.w	r5, r1, #7
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003bc4:	f3c2 06c4 	ubfx	r6, r2, #3, #5
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bc8:	f002 0107 	and.w	r1, r2, #7
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003bcc:	469b      	mov	fp, r3
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bce:	bf58      	it	pl
 8003bd0:	4241      	negpl	r1, r0

    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003bd2:	461a      	mov	r2, r3
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003bd4:	0176      	lsls	r6, r6, #5
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bd6:	0049      	lsls	r1, r1, #1
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003bd8:	f005 0407 	and.w	r4, r5, #7
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003bdc:	4630      	mov	r0, r6
        uint8_t pixelData = 0;

        switch (((tile_data << pixl_offset) & 0x8080)) {
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003bde:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003c98 <prvGBPPUDrawLineWindow.part.0+0xe4>
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003be2:	b2c9      	uxtb	r1, r1
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003be4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8003c9c <prvGBPPUDrawLineWindow.part.0+0xe8>
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003be8:	ed2d 8b02 	vpush	{d8}
 8003bec:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003bf0:	ee08 1a10 	vmov	s16, r1
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003bf4:	463b      	mov	r3, r7
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003bf6:	ee08 7a90 	vmov	s17, r7
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003bfa:	426f      	negs	r7, r5
 8003bfc:	f007 0707 	and.w	r7, r7, #7
 8003c00:	bf58      	it	pl
 8003c02:	427c      	negpl	r4, r7
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c04:	f7ff ff32 	bl	8003a6c <getTileLineData>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c08:	f248 0780 	movw	r7, #32896	; 0x8080
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c0c:	4680      	mov	r8, r0
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003c0e:	b2e4      	uxtb	r4, r4
    for(int j = (WX - 7); j < 160; j++){
 8003c10:	e010      	b.n	8003c34 <prvGBPPUDrawLineWindow.part.0+0x80>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d124      	bne.n	8003c60 <prvGBPPUDrawLineWindow.part.0+0xac>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8003c1c:	f805 3009 	strb.w	r3, [r5, r9]
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
        }

        prvUpdateBuffer(pixelData, j);
        pixl_offset++;
 8003c20:	3401      	adds	r4, #1
        prvUpdateBuffer(pixelData, j);
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7ff ff9a 	bl	8003b5c <prvUpdateBuffer>
        pixl_offset++;
 8003c28:	b2e4      	uxtb	r4, r4

        if(pixl_offset == 8){
 8003c2a:	2c08      	cmp	r4, #8
 8003c2c:	d01a      	beq.n	8003c64 <prvGBPPUDrawLineWindow.part.0+0xb0>
    for(int j = (WX - 7); j < 160; j++){
 8003c2e:	3501      	adds	r5, #1
 8003c30:	2da0      	cmp	r5, #160	; 0xa0
 8003c32:	d026      	beq.n	8003c82 <prvGBPPUDrawLineWindow.part.0+0xce>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c34:	fa08 f304 	lsl.w	r3, r8, r4
 8003c38:	403b      	ands	r3, r7
 8003c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3e:	d024      	beq.n	8003c8a <prvGBPPUDrawLineWindow.part.0+0xd6>
 8003c40:	dc06      	bgt.n	8003c50 <prvGBPPUDrawLineWindow.part.0+0x9c>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <prvGBPPUDrawLineWindow.part.0+0x5e>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003c46:	f89a 0000 	ldrb.w	r0, [sl]
 8003c4a:	f805 3009 	strb.w	r3, [r5, r9]
 8003c4e:	e7e7      	b.n	8003c20 <prvGBPPUDrawLineWindow.part.0+0x6c>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c50:	42bb      	cmp	r3, r7
 8003c52:	d105      	bne.n	8003c60 <prvGBPPUDrawLineWindow.part.0+0xac>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003c54:	2303      	movs	r3, #3
 8003c56:	f89a 0003 	ldrb.w	r0, [sl, #3]
 8003c5a:	f805 3009 	strb.w	r3, [r5, r9]
 8003c5e:	e7df      	b.n	8003c20 <prvGBPPUDrawLineWindow.part.0+0x6c>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7dd      	b.n	8003c20 <prvGBPPUDrawLineWindow.part.0+0x6c>
            tile_offset++;
 8003c64:	3601      	adds	r6, #1
    for(int j = (WX - 7); j < 160; j++){
 8003c66:	3501      	adds	r5, #1
            pixl_offset = 0;
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c68:	ee18 3a90 	vmov	r3, s17
 8003c6c:	465a      	mov	r2, fp
            tile_offset++;
 8003c6e:	b2b6      	uxth	r6, r6
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c70:	ee18 1a10 	vmov	r1, s16
            pixl_offset = 0;
 8003c74:	2400      	movs	r4, #0
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c76:	4630      	mov	r0, r6
 8003c78:	f7ff fef8 	bl	8003a6c <getTileLineData>
    for(int j = (WX - 7); j < 160; j++){
 8003c7c:	2da0      	cmp	r5, #160	; 0xa0
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c7e:	4680      	mov	r8, r0
    for(int j = (WX - 7); j < 160; j++){
 8003c80:	d1d8      	bne.n	8003c34 <prvGBPPUDrawLineWindow.part.0+0x80>
        }
    }
}
 8003c82:	ecbd 8b02 	vpop	{d8}
 8003c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8003c90:	f805 3009 	strb.w	r3, [r5, r9]
 8003c94:	e7c4      	b.n	8003c20 <prvGBPPUDrawLineWindow.part.0+0x6c>
 8003c96:	bf00      	nop
 8003c98:	24011718 	.word	0x24011718
 8003c9c:	24011674 	.word	0x24011674

08003ca0 <prvGBPPUDrawLineBackground>:
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003ca0:	4402      	add	r2, r0
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003ca6:	f002 0007 	and.w	r0, r2, #7
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003caa:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
 8003cae:	f3c2 05c4 	ubfx	r5, r2, #3, #5
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cb2:	461e      	mov	r6, r3
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003cb4:	0040      	lsls	r0, r0, #1
 8003cb6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003dbc <prvGBPPUDrawLineBackground+0x11c>
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003cba:	4632      	mov	r2, r6
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cbc:	f248 0780 	movw	r7, #32896	; 0x8080
 8003cc0:	f108 09a0 	add.w	r9, r8, #160	; 0xa0
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003cc4:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8003dc0 <prvGBPPUDrawLineBackground+0x120>
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cc8:	ed2d 8b04 	vpush	{d8-d9}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	ee08 3a90 	vmov	s17, r3
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003cd2:	ee08 0a10 	vmov	s16, r0
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cd6:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
    uint16_t first_tile = tile_offset % 32;
 8003cda:	f8cd a004 	str.w	sl, [sp, #4]
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003cde:	eb0a 1a45 	add.w	sl, sl, r5, lsl #5
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003ce2:	4623      	mov	r3, r4
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ce4:	ee09 4a10 	vmov	s18, r4
    uint8_t pixl_offset = SCX % 8;                                                              // gives current pixel offset
 8003ce8:	f001 0407 	and.w	r4, r1, #7
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003cec:	4601      	mov	r1, r0
 8003cee:	4650      	mov	r0, sl
 8003cf0:	4645      	mov	r5, r8
 8003cf2:	f7ff febb 	bl	8003a6c <getTileLineData>
 8003cf6:	4606      	mov	r6, r0
    for(int j = 0; j < 160; j++){
 8003cf8:	e00e      	b.n	8003d18 <prvGBPPUDrawLineBackground+0x78>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d147      	bne.n	8003d8e <prvGBPPUDrawLineBackground+0xee>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003d04:	702b      	strb	r3, [r5, #0]
        prvUpdateBuffer(pixelData, j);
 8003d06:	f7ff ff29 	bl	8003b5c <prvUpdateBuffer>
        pixl_offset++;
 8003d0a:	1c62      	adds	r2, r4, #1
 8003d0c:	b2d4      	uxtb	r4, r2
        if(pixl_offset == 8){
 8003d0e:	2c08      	cmp	r4, #8
 8003d10:	d016      	beq.n	8003d40 <prvGBPPUDrawLineBackground+0xa0>
    for(int j = 0; j < 160; j++){
 8003d12:	3501      	adds	r5, #1
 8003d14:	454d      	cmp	r5, r9
 8003d16:	d02e      	beq.n	8003d76 <prvGBPPUDrawLineBackground+0xd6>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d18:	fa06 f304 	lsl.w	r3, r6, r4
 8003d1c:	eba5 0108 	sub.w	r1, r5, r8
 8003d20:	403b      	ands	r3, r7
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	d034      	beq.n	8003d92 <prvGBPPUDrawLineBackground+0xf2>
 8003d28:	dc2a      	bgt.n	8003d80 <prvGBPPUDrawLineBackground+0xe0>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <prvGBPPUDrawLineBackground+0x5a>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003d2e:	f89b 0000 	ldrb.w	r0, [fp]
 8003d32:	702b      	strb	r3, [r5, #0]
        prvUpdateBuffer(pixelData, j);
 8003d34:	f7ff ff12 	bl	8003b5c <prvUpdateBuffer>
        pixl_offset++;
 8003d38:	1c62      	adds	r2, r4, #1
 8003d3a:	b2d4      	uxtb	r4, r2
        if(pixl_offset == 8){
 8003d3c:	2c08      	cmp	r4, #8
 8003d3e:	d1e8      	bne.n	8003d12 <prvGBPPUDrawLineBackground+0x72>
            tile_offset++;
 8003d40:	f10a 0601 	add.w	r6, sl, #1
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d44:	9901      	ldr	r1, [sp, #4]
 8003d46:	f006 031f 	and.w	r3, r6, #31
            tile_offset++;
 8003d4a:	b2b6      	uxth	r6, r6
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d4c:	18ca      	adds	r2, r1, r3
 8003d4e:	2a0b      	cmp	r2, #11
 8003d50:	dd01      	ble.n	8003d56 <prvGBPPUDrawLineBackground+0xb6>
 8003d52:	4299      	cmp	r1, r3
 8003d54:	d823      	bhi.n	8003d9e <prvGBPPUDrawLineBackground+0xfe>
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d56:	3501      	adds	r5, #1
 8003d58:	4630      	mov	r0, r6
 8003d5a:	ee19 3a10 	vmov	r3, s18
 8003d5e:	ee18 2a90 	vmov	r2, s17
 8003d62:	ee18 1a10 	vmov	r1, s16
            tile_offset++;
 8003d66:	46b2      	mov	sl, r6
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d68:	f7ff fe80 	bl	8003a6c <getTileLineData>
    for(int j = 0; j < 160; j++){
 8003d6c:	454d      	cmp	r5, r9
            pixl_offset = 0;
 8003d6e:	f04f 0400 	mov.w	r4, #0
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d72:	4606      	mov	r6, r0
    for(int j = 0; j < 160; j++){
 8003d74:	d1d0      	bne.n	8003d18 <prvGBPPUDrawLineBackground+0x78>
}
 8003d76:	b003      	add	sp, #12
 8003d78:	ecbd 8b04 	vpop	{d8-d9}
 8003d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d80:	42bb      	cmp	r3, r7
 8003d82:	d104      	bne.n	8003d8e <prvGBPPUDrawLineBackground+0xee>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003d84:	2303      	movs	r3, #3
 8003d86:	f89b 0003 	ldrb.w	r0, [fp, #3]
 8003d8a:	702b      	strb	r3, [r5, #0]
 8003d8c:	e7bb      	b.n	8003d06 <prvGBPPUDrawLineBackground+0x66>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e7b9      	b.n	8003d06 <prvGBPPUDrawLineBackground+0x66>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003d92:	f04f 0302 	mov.w	r3, #2
 8003d96:	f89b 0002 	ldrb.w	r0, [fp, #2]
 8003d9a:	702b      	strb	r3, [r5, #0]
 8003d9c:	e7b3      	b.n	8003d06 <prvGBPPUDrawLineBackground+0x66>
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d9e:	f1aa 001f 	sub.w	r0, sl, #31
 8003da2:	ee19 3a10 	vmov	r3, s18
 8003da6:	ee18 2a90 	vmov	r2, s17
 8003daa:	ee18 1a10 	vmov	r1, s16
 8003dae:	b280      	uxth	r0, r0
            tile_offset++;
 8003db0:	46b2      	mov	sl, r6
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003db2:	f7ff fe5b 	bl	8003a6c <getTileLineData>
            pixl_offset = 0;
 8003db6:	2400      	movs	r4, #0
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003db8:	4606      	mov	r6, r0
 8003dba:	e7aa      	b.n	8003d12 <prvGBPPUDrawLineBackground+0x72>
 8003dbc:	24011674 	.word	0x24011674
 8003dc0:	24011718 	.word	0x24011718

08003dc4 <prvGBPPUDrawLineObjects>:
 * @brief  Update frame buffer with object information
 * @details Populates the frame buffer with object sprites on line ly
 * @param ly LY Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLineObjects(uint8_t ly){
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003dcc:	b083      	sub	sp, #12
 8003dce:	4683      	mov	fp, r0
 8003dd0:	e006      	b.n	8003de0 <prvGBPPUDrawLineObjects+0x1c>
    for(int obj = 0; obj < 40; obj++){
 8003dd2:	3404      	adds	r4, #4
 8003dd4:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003dd8:	b2a4      	uxth	r4, r4
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	f000 8096 	beq.w	8003f0c <prvGBPPUDrawLineObjects+0x148>
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003de0:	4620      	mov	r0, r4
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003de2:	1ce5      	adds	r5, r4, #3
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003de4:	f7ff fc5e 	bl	80036a4 <ucGBMemoryRead>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003de8:	1c62      	adds	r2, r4, #1
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003dea:	f1a0 0310 	sub.w	r3, r0, #16
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dee:	b2ad      	uxth	r5, r5
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003df0:	b290      	uxth	r0, r2
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003df2:	b21e      	sxth	r6, r3
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003df4:	f7ff fc56 	bl	80036a4 <ucGBMemoryRead>
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003df8:	1ca2      	adds	r2, r4, #2
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003dfa:	9001      	str	r0, [sp, #4]
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003dfc:	b290      	uxth	r0, r2
 8003dfe:	f7ff fc51 	bl	80036a4 <ucGBMemoryRead>
 8003e02:	4682      	mov	sl, r0
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff fc4d 	bl	80036a4 <ucGBMemoryRead>
 8003e0a:	2107      	movs	r1, #7
 8003e0c:	f7fe ff4e 	bl	8002cac <ucCheckBit>
 8003e10:	4607      	mov	r7, r0
        uint8_t objYFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003e12:	4628      	mov	r0, r5
 8003e14:	f7ff fc46 	bl	80036a4 <ucGBMemoryRead>
 8003e18:	2106      	movs	r1, #6
 8003e1a:	f7fe ff47 	bl	8002cac <ucCheckBit>
 8003e1e:	4681      	mov	r9, r0
        uint8_t objXFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003e20:	4628      	mov	r0, r5
 8003e22:	f7ff fc3f 	bl	80036a4 <ucGBMemoryRead>
 8003e26:	2105      	movs	r1, #5
 8003e28:	f7fe ff40 	bl	8002cac <ucCheckBit>
 8003e2c:	4680      	mov	r8, r0
        uint8_t objPalette  = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f7ff fc38 	bl	80036a4 <ucGBMemoryRead>
 8003e34:	2104      	movs	r1, #4
 8003e36:	f7fe ff39 	bl	8002cac <ucCheckBit>
 8003e3a:	4605      	mov	r5, r0
        uint8_t objSize     = ucCheckBit(ucGBMemoryRead(LCDC_ADDR), 2);
 8003e3c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003e40:	f7ff fc30 	bl	80036a4 <ucGBMemoryRead>
 8003e44:	2102      	movs	r1, #2
 8003e46:	f7fe ff31 	bl	8002cac <ucCheckBit>

        uint8_t objHeight   = (objSize == 0) ? 8 : 16;
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2208      	moveq	r2, #8
 8003e50:	2210      	movne	r2, #16

        if(yCoordinate <= ly && (yCoordinate + objHeight) > ly){
 8003e52:	455e      	cmp	r6, fp
 8003e54:	dcbd      	bgt.n	8003dd2 <prvGBPPUDrawLineObjects+0xe>
 8003e56:	18b1      	adds	r1, r6, r2
 8003e58:	4559      	cmp	r1, fp
 8003e5a:	ddba      	ble.n	8003dd2 <prvGBPPUDrawLineObjects+0xe>

            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003e5c:	f1b9 0f00 	cmp.w	r9, #0
 8003e60:	d04f      	beq.n	8003f02 <prvGBPPUDrawLineObjects+0x13e>
 8003e62:	1e50      	subs	r0, r2, #1
 8003e64:	ebab 0306 	sub.w	r3, fp, r6
 8003e68:	1ac0      	subs	r0, r0, r3
 8003e6a:	0040      	lsls	r0, r0, #1
 8003e6c:	b2c0      	uxtb	r0, r0
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e6e:	f50a 6300 	add.w	r3, sl, #2048	; 0x800
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003e72:	4928      	ldr	r1, [pc, #160]	; (8003f14 <prvGBPPUDrawLineObjects+0x150>)
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <prvGBPPUDrawLineObjects+0x154>)
 8003e76:	4646      	mov	r6, r8
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e78:	eb00 1003 	add.w	r0, r0, r3, lsl #4
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){

                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
                uint8_t pixelData = 0;

                switch (colorInfo) {
 8003e7c:	f248 0a80 	movw	sl, #32896	; 0x8080
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	bf08      	it	eq
 8003e84:	460a      	moveq	r2, r1
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003e86:	2500      	movs	r5, #0
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e88:	b280      	uxth	r0, r0
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003e8a:	4691      	mov	r9, r2
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e8c:	f7ff fcd6 	bl	800383c <usGBMemoryReadShort>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	4680      	mov	r8, r0
 8003e94:	f1a3 0108 	sub.w	r1, r3, #8
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003e98:	b209      	sxth	r1, r1
 8003e9a:	b196      	cbz	r6, 8003ec2 <prvGBPPUDrawLineObjects+0xfe>
 8003e9c:	fa48 f305 	asr.w	r3, r8, r5
 8003ea0:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <prvGBPPUDrawLineObjects+0x158>)
 8003ea2:	ea02 13c3 	and.w	r3, r2, r3, lsl #7
 8003ea6:	b29b      	uxth	r3, r3
                switch (colorInfo) {
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eac:	d013      	beq.n	8003ed6 <prvGBPPUDrawLineObjects+0x112>
 8003eae:	4553      	cmp	r3, sl
 8003eb0:	d024      	beq.n	8003efc <prvGBPPUDrawLineObjects+0x138>
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d01f      	beq.n	8003ef6 <prvGBPPUDrawLineObjects+0x132>
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	3101      	adds	r1, #1
 8003eba:	2d08      	cmp	r5, #8
 8003ebc:	d089      	beq.n	8003dd2 <prvGBPPUDrawLineObjects+0xe>
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003ebe:	2e00      	cmp	r6, #0
 8003ec0:	d1ec      	bne.n	8003e9c <prvGBPPUDrawLineObjects+0xd8>
 8003ec2:	fa08 f305 	lsl.w	r3, r8, r5
 8003ec6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ece:	b29b      	uxth	r3, r3
                switch (colorInfo) {
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d1eb      	bne.n	8003eae <prvGBPPUDrawLineObjects+0xea>
                    case 0x0000: pixelData = 0;          break;
                    case 0x0080: pixelData = palette[1]; break;
                    case 0x8000: pixelData = palette[2]; break;
 8003ed6:	f899 0002 	ldrb.w	r0, [r9, #2]
                    case 0x8080: pixelData = palette[3]; break;
                }

                if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d0eb      	beq.n	8003eb6 <prvGBPPUDrawLineObjects+0xf2>
 8003ede:	299f      	cmp	r1, #159	; 0x9f
 8003ee0:	d8e9      	bhi.n	8003eb6 <prvGBPPUDrawLineObjects+0xf2>
                    if((objPrio) && ucBGWINline[xCoordinate + pixelNum]){
 8003ee2:	b11f      	cbz	r7, 8003eec <prvGBPPUDrawLineObjects+0x128>
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <prvGBPPUDrawLineObjects+0x15c>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e4      	bne.n	8003eb6 <prvGBPPUDrawLineObjects+0xf2>
                        // do nothing this circumstance
                    }else{
                        prvUpdateBuffer(pixelData, xCoordinate + pixelNum);
 8003eec:	9101      	str	r1, [sp, #4]
 8003eee:	f7ff fe35 	bl	8003b5c <prvUpdateBuffer>
 8003ef2:	9901      	ldr	r1, [sp, #4]
 8003ef4:	e7df      	b.n	8003eb6 <prvGBPPUDrawLineObjects+0xf2>
                    case 0x0080: pixelData = palette[1]; break;
 8003ef6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003efa:	e7ee      	b.n	8003eda <prvGBPPUDrawLineObjects+0x116>
                    case 0x8080: pixelData = palette[3]; break;
 8003efc:	f899 0003 	ldrb.w	r0, [r9, #3]
 8003f00:	e7eb      	b.n	8003eda <prvGBPPUDrawLineObjects+0x116>
            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003f02:	ebab 0006 	sub.w	r0, fp, r6
 8003f06:	0040      	lsls	r0, r0, #1
 8003f08:	b2c0      	uxtb	r0, r0
 8003f0a:	e7b0      	b.n	8003e6e <prvGBPPUDrawLineObjects+0xaa>
                    }
                }
            }
        }
    }
}
 8003f0c:	b003      	add	sp, #12
 8003f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	2401166c 	.word	0x2401166c
 8003f18:	24011724 	.word	0x24011724
 8003f1c:	ffff8080 	.word	0xffff8080
 8003f20:	24011674 	.word	0x24011674

08003f24 <prvGBPPUDrawLine>:
 * @param ly LY Register Value
 * @param SCX Scroll X Register Value
 * @param SCY Scroll Y Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	460e      	mov	r6, r1
 8003f2e:	4617      	mov	r7, r2

    // update Palettes
    prvCheckBGP();
 8003f30:	f7ff fd36 	bl	80039a0 <prvCheckBGP>
    prvCheckOBP0();
 8003f34:	f7ff fd56 	bl	80039e4 <prvCheckOBP0>
    prvCheckOBP1();
 8003f38:	f7ff fd76 	bl	8003a28 <prvCheckOBP1>
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f3c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f40:	f7ff fbb0 	bl	80036a4 <ucGBMemoryRead>

    uint16_t TileDataAddr = prvGetBackWinTileDataSel();
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f44:	4b38      	ldr	r3, [pc, #224]	; (8004028 <prvGBPPUDrawLine+0x104>)
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f46:	4602      	mov	r2, r0
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f48:	4938      	ldr	r1, [pc, #224]	; (800402c <prvGBPPUDrawLine+0x108>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
    ulLineAdd = ulScaleAmount * 160;

    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003f4c:	f64f 7040 	movw	r0, #65344	; 0xff40
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f50:	f012 0f10 	tst.w	r2, #16
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f54:	fb15 f403 	smulbb	r4, r5, r3
    ulLineAdd = ulScaleAmount * 160;
 8003f58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f5c:	bf14      	ite	ne
 8003f5e:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 8003f62:	f44f 4808 	moveq.w	r8, #34816	; 0x8800
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f66:	fb03 f304 	mul.w	r3, r3, r4
    ulLineAdd = ulScaleAmount * 160;
 8003f6a:	0152      	lsls	r2, r2, #5
 8003f6c:	4c30      	ldr	r4, [pc, #192]	; (8004030 <prvGBPPUDrawLine+0x10c>)
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ulLineAdd = ulScaleAmount * 160;
 8003f72:	6022      	str	r2, [r4, #0]
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	600b      	str	r3, [r1, #0]
    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003f78:	f7ff fb94 	bl	80036a4 <ucGBMemoryRead>
 8003f7c:	f010 0401 	ands.w	r4, r0, #1
 8003f80:	d10f      	bne.n	8003fa2 <prvGBPPUDrawLine+0x7e>
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
    }else{
        for(int j = 0; j < 160; j++){
            prvUpdateBuffer(1, j);
 8003f82:	4621      	mov	r1, r4
        for(int j = 0; j < 160; j++){
 8003f84:	3401      	adds	r4, #1
            prvUpdateBuffer(1, j);
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff fde8 	bl	8003b5c <prvUpdateBuffer>
        for(int j = 0; j < 160; j++){
 8003f8c:	2ca0      	cmp	r4, #160	; 0xa0
 8003f8e:	d1f8      	bne.n	8003f82 <prvGBPPUDrawLine+0x5e>
        }
    }

    if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003f90:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f94:	f7ff fb86 	bl	80036a4 <ucGBMemoryRead>
 8003f98:	0783      	lsls	r3, r0, #30
 8003f9a:	d43f      	bmi.n	800401c <prvGBPPUDrawLine+0xf8>
        prvGBPPUDrawLineObjects(ly);
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003fa2:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fa6:	f7ff fb7d 	bl	80036a4 <ucGBMemoryRead>
 8003faa:	f010 0f08 	tst.w	r0, #8
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8003fae:	463a      	mov	r2, r7
 8003fb0:	4631      	mov	r1, r6
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003fb2:	bf14      	ite	ne
 8003fb4:	f44f 441c 	movne.w	r4, #39936	; 0x9c00
 8003fb8:	f44f 4418 	moveq.w	r4, #38912	; 0x9800
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	9400      	str	r4, [sp, #0]
 8003fc2:	f7ff fe6d 	bl	8003ca0 <prvGBPPUDrawLineBackground>
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 8003fc6:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fca:	f7ff fb6b 	bl	80036a4 <ucGBMemoryRead>
 8003fce:	0682      	lsls	r2, r0, #26
 8003fd0:	d5de      	bpl.n	8003f90 <prvGBPPUDrawLine+0x6c>
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
 8003fd2:	f64f 704b 	movw	r0, #65355	; 0xff4b
 8003fd6:	f7ff fb65 	bl	80036a4 <ucGBMemoryRead>
 8003fda:	4604      	mov	r4, r0
 8003fdc:	f64f 704a 	movw	r0, #65354	; 0xff4a
 8003fe0:	f7ff fb60 	bl	80036a4 <ucGBMemoryRead>
 8003fe4:	4606      	mov	r6, r0
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003fe6:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fea:	f7ff fb5b 	bl	80036a4 <ucGBMemoryRead>
 8003fee:	f010 0f40 	tst.w	r0, #64	; 0x40
    if(WY > ly || WY > 143 || WX > 166)
 8003ff2:	462a      	mov	r2, r5
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003ff4:	bf14      	ite	ne
 8003ff6:	f44f 431c 	movne.w	r3, #39936	; 0x9c00
 8003ffa:	f44f 4318 	moveq.w	r3, #38912	; 0x9800
    if(WY > ly || WY > 143 || WX > 166)
 8003ffe:	2d8f      	cmp	r5, #143	; 0x8f
 8004000:	bf28      	it	cs
 8004002:	228f      	movcs	r2, #143	; 0x8f
 8004004:	4296      	cmp	r6, r2
 8004006:	d8c3      	bhi.n	8003f90 <prvGBPPUDrawLine+0x6c>
 8004008:	2ca6      	cmp	r4, #166	; 0xa6
 800400a:	d8c1      	bhi.n	8003f90 <prvGBPPUDrawLine+0x6c>
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4632      	mov	r2, r6
 8004010:	4643      	mov	r3, r8
 8004012:	4621      	mov	r1, r4
 8004014:	4628      	mov	r0, r5
 8004016:	f7ff fdcd 	bl	8003bb4 <prvGBPPUDrawLineWindow.part.0>
 800401a:	e7b9      	b.n	8003f90 <prvGBPPUDrawLine+0x6c>
        prvGBPPUDrawLineObjects(ly);
 800401c:	4628      	mov	r0, r5
}
 800401e:	b002      	add	sp, #8
 8004020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        prvGBPPUDrawLineObjects(ly);
 8004024:	f7ff bece 	b.w	8003dc4 <prvGBPPUDrawLineObjects>
 8004028:	24001014 	.word	0x24001014
 800402c:	24011714 	.word	0x24011714
 8004030:	24011670 	.word	0x24011670

08004034 <vGBPPUStep>:
void vGBPPUStep(){
 8004034:	b570      	push	{r4, r5, r6, lr}
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 8004036:	f64f 7040 	movw	r0, #65344	; 0xff40
void vGBPPUStep(){
 800403a:	b082      	sub	sp, #8
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 800403c:	f7ff fb32 	bl	80036a4 <ucGBMemoryRead>
 8004040:	0603      	lsls	r3, r0, #24
 8004042:	d409      	bmi.n	8004058 <vGBPPUStep+0x24>
        ucLY = 0;
 8004044:	2100      	movs	r1, #0
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <vGBPPUStep+0x160>)
        vGBMemoryWrite(LY_ADDR, ucLY);
 8004048:	f64f 7044 	movw	r0, #65348	; 0xff44
        ucLY = 0;
 800404c:	7019      	strb	r1, [r3, #0]
}
 800404e:	b002      	add	sp, #8
 8004050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        vGBMemoryWrite(LY_ADDR, ucLY);
 8004054:	f7ff bb4e 	b.w	80036f4 <vGBMemoryWrite>
        ultStatesTotal += ucGetTstate();
 8004058:	4c4f      	ldr	r4, [pc, #316]	; (8004198 <vGBPPUStep+0x164>)
 800405a:	f7fe fcd1 	bl	8002a00 <ucGetTstate>
            ucLY++;
 800405e:	4d4d      	ldr	r5, [pc, #308]	; (8004194 <vGBPPUStep+0x160>)
        ultStatesTotal += ucGetTstate();
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	4418      	add	r0, r3
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 8004064:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
        ultStatesTotal += ucGetTstate();
 8004068:	6020      	str	r0, [r4, #0]
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 800406a:	d845      	bhi.n	80040f8 <vGBPPUStep+0xc4>
        if (ucLY > 143){                                                                            // vblank region
 800406c:	782e      	ldrb	r6, [r5, #0]
 800406e:	2e8f      	cmp	r6, #143	; 0x8f
 8004070:	d905      	bls.n	800407e <vGBPPUStep+0x4a>
            if(ucMode != MODE_1){
 8004072:	4b4a      	ldr	r3, [pc, #296]	; (800419c <vGBPPUStep+0x168>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d127      	bne.n	80040ca <vGBPPUStep+0x96>
}
 800407a:	b002      	add	sp, #8
 800407c:	bd70      	pop	{r4, r5, r6, pc}
            if (ultStatesTotal <= 80 && ucMode != MODE_2)                                           // oam region
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	2b50      	cmp	r3, #80	; 0x50
 8004082:	d809      	bhi.n	8004098 <vGBPPUStep+0x64>
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <vGBPPUStep+0x168>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d0f6      	beq.n	800407a <vGBPPUStep+0x46>
                prvSetMode(MODE_2);
 800408c:	2002      	movs	r0, #2
}
 800408e:	b002      	add	sp, #8
 8004090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                prvSetMode(MODE_3);
 8004094:	f7ff bd2e 	b.w	8003af4 <prvSetMode>
            else if(ultStatesTotal > 80 && ultStatesTotal <= 252 && ucMode != MODE_3){              // vram region
 8004098:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 800409c:	2aab      	cmp	r2, #171	; 0xab
 800409e:	d83d      	bhi.n	800411c <vGBPPUStep+0xe8>
 80040a0:	4b3e      	ldr	r3, [pc, #248]	; (800419c <vGBPPUStep+0x168>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d0e8      	beq.n	800407a <vGBPPUStep+0x46>
                    prvGBPPUDrawLine(ucLY, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 80040a8:	f64f 7043 	movw	r0, #65347	; 0xff43
 80040ac:	f7ff fafa 	bl	80036a4 <ucGBMemoryRead>
 80040b0:	4601      	mov	r1, r0
 80040b2:	f64f 7042 	movw	r0, #65346	; 0xff42
 80040b6:	9101      	str	r1, [sp, #4]
 80040b8:	f7ff faf4 	bl	80036a4 <ucGBMemoryRead>
 80040bc:	9901      	ldr	r1, [sp, #4]
 80040be:	4602      	mov	r2, r0
 80040c0:	4630      	mov	r0, r6
 80040c2:	f7ff ff2f 	bl	8003f24 <prvGBPPUDrawLine>
                prvSetMode(MODE_3);
 80040c6:	2003      	movs	r0, #3
 80040c8:	e7e1      	b.n	800408e <vGBPPUStep+0x5a>
                prvSetMode(MODE_1);
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff fd12 	bl	8003af4 <prvSetMode>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 4))
 80040d0:	f64f 7041 	movw	r0, #65345	; 0xff41
 80040d4:	f7ff fae6 	bl	80036a4 <ucGBMemoryRead>
 80040d8:	2104      	movs	r1, #4
 80040da:	f7fe fde7 	bl	8002cac <ucCheckBit>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d14b      	bne.n	800417a <vGBPPUStep+0x146>
                if(ucLY == 0x90){
 80040e2:	782b      	ldrb	r3, [r5, #0]
 80040e4:	2b90      	cmp	r3, #144	; 0x90
 80040e6:	d1c8      	bne.n	800407a <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 0);
 80040e8:	2100      	movs	r1, #0
                    vGBMemorySetBit(IF_ADDR, 1);
 80040ea:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 80040ee:	b002      	add	sp, #8
 80040f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    vGBMemorySetBit(IF_ADDR, 1);
 80040f4:	f7ff ba8e 	b.w	8003614 <vGBMemorySetBit>
            ucLY++;
 80040f8:	7828      	ldrb	r0, [r5, #0]
 80040fa:	3001      	adds	r0, #1
 80040fc:	b2c0      	uxtb	r0, r0
 80040fe:	7028      	strb	r0, [r5, #0]
            prvCheckLYC(ucLY);
 8004100:	f7ff fcd6 	bl	8003ab0 <prvCheckLYC>
            if(ucLY > 153){                                                                         // end of vblank
 8004104:	7829      	ldrb	r1, [r5, #0]
 8004106:	2999      	cmp	r1, #153	; 0x99
 8004108:	d81e      	bhi.n	8004148 <vGBPPUStep+0x114>
            vGBMemoryWrite(LY_ADDR, ucLY);                                                          // update LY register
 800410a:	f64f 7044 	movw	r0, #65348	; 0xff44
 800410e:	f7ff faf1 	bl	80036f4 <vGBMemoryWrite>
            ultStatesTotal -= 456;
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	e7a7      	b.n	800406c <vGBPPUStep+0x38>
            }else if(ultStatesTotal > 252 && ultStatesTotal <= 456 && ucMode != MODE_0){            // hblank region
 800411c:	3bfd      	subs	r3, #253	; 0xfd
 800411e:	2bcb      	cmp	r3, #203	; 0xcb
 8004120:	d8ab      	bhi.n	800407a <vGBPPUStep+0x46>
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <vGBPPUStep+0x168>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	2a00      	cmp	r2, #0
 8004128:	d0a7      	beq.n	800407a <vGBPPUStep+0x46>
    ucMode = mode;
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
    switch (mode) {
 800412e:	f7ff fc19 	bl	8003964 <prvSetMode.part.0>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 3))
 8004132:	f64f 7041 	movw	r0, #65345	; 0xff41
 8004136:	f7ff fab5 	bl	80036a4 <ucGBMemoryRead>
 800413a:	2103      	movs	r1, #3
 800413c:	f7fe fdb6 	bl	8002cac <ucCheckBit>
 8004140:	2800      	cmp	r0, #0
 8004142:	d09a      	beq.n	800407a <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 1);
 8004144:	2101      	movs	r1, #1
 8004146:	e7d0      	b.n	80040ea <vGBPPUStep+0xb6>
                    displayFrameBuffer(ucGBFrame, ulScaleAmount);
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <vGBPPUStep+0x16c>)
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <vGBPPUStep+0x170>)
 800414c:	7811      	ldrb	r1, [r2, #0]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f000 fb20 	bl	8004794 <displayFrameBuffer>
                framePerSecondLimiter++;
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <vGBPPUStep+0x174>)
                prvSetMode(MODE_2);
 8004156:	2002      	movs	r0, #2
                framePerSecondLimiter++;
 8004158:	7813      	ldrb	r3, [r2, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	7013      	strb	r3, [r2, #0]
                prvSetMode(MODE_2);
 800415e:	f7ff fcc9 	bl	8003af4 <prvSetMode>
                ucLY = 0;
 8004162:	2300      	movs	r3, #0
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 8004164:	f64f 7041 	movw	r0, #65345	; 0xff41
                ucLY = 0;
 8004168:	702b      	strb	r3, [r5, #0]
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 800416a:	f7ff fa9b 	bl	80036a4 <ucGBMemoryRead>
 800416e:	2105      	movs	r1, #5
 8004170:	f7fe fd9c 	bl	8002cac <ucCheckBit>
 8004174:	b938      	cbnz	r0, 8004186 <vGBPPUStep+0x152>
 8004176:	7829      	ldrb	r1, [r5, #0]
 8004178:	e7c7      	b.n	800410a <vGBPPUStep+0xd6>
                    vGBMemorySetBit(IF_ADDR, 1);
 800417a:	2101      	movs	r1, #1
 800417c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8004180:	f7ff fa48 	bl	8003614 <vGBMemorySetBit>
 8004184:	e7ad      	b.n	80040e2 <vGBPPUStep+0xae>
                    vGBMemorySetBit(IF_ADDR, 1);
 8004186:	2101      	movs	r1, #1
 8004188:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800418c:	f7ff fa42 	bl	8003614 <vGBMemorySetBit>
 8004190:	e7f1      	b.n	8004176 <vGBPPUStep+0x142>
 8004192:	bf00      	nop
 8004194:	240010ad 	.word	0x240010ad
 8004198:	2401171c 	.word	0x2401171c
 800419c:	24011720 	.word	0x24011720
 80041a0:	24001014 	.word	0x24001014
 80041a4:	24001010 	.word	0x24001010
 80041a8:	240010ac 	.word	0x240010ac

080041ac <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <getRomPointer+0x8>)
}
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	24001018 	.word	0x24001018

080041b8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80041ba:	2004      	movs	r0, #4
{
 80041bc:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80041be:	f004 fb91 	bl	80088e4 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <SystemClock_Config+0xc8>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <SystemClock_Config+0xcc>)
 80041cc:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80041d0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041d6:	f002 0201 	and.w	r2, r2, #1
 80041da:	9201      	str	r2, [sp, #4]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80041e2:	619a      	str	r2, [r3, #24]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80041ee:	6983      	ldr	r3, [r0, #24]
 80041f0:	049b      	lsls	r3, r3, #18
 80041f2:	d5fc      	bpl.n	80041ee <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041f4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80041fa:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041fc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 80041fe:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004200:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;						// changed from 4 to 16 to make i2s work
 8004202:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004204:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004206:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004208:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800420a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800420c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800420e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004210:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004212:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;						// changed from 4 to 16 to make i2s work
 8004214:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004216:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004218:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800421c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004220:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004224:	f004 fb9a 	bl	800895c <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8004228:	b108      	cbz	r0, 800422e <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800422a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800422c:	e7fe      	b.n	800422c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800422e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8004230:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004232:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004234:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004238:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800423a:	4629      	mov	r1, r5
 800423c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800423e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004240:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004244:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004248:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800424c:	f004 ff1c 	bl	8009088 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8004250:	b108      	cbz	r0, 8004256 <SystemClock_Config+0x9e>
 8004252:	b672      	cpsid	i
  while (1)
 8004254:	e7fe      	b.n	8004254 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <SystemClock_Config+0xd0>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800425e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8004260:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004264:	f042 0202 	orr.w	r2, r2, #2
 8004268:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800426c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	9302      	str	r3, [sp, #8]
 8004276:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004278:	f002 f802 	bl	8006280 <HAL_EnableCompensationCell>
}
 800427c:	b01f      	add	sp, #124	; 0x7c
 800427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004280:	58000400 	.word	0x58000400
 8004284:	58024800 	.word	0x58024800
 8004288:	58024400 	.word	0x58024400

0800428c <PeriphCommonClock_Config>:
{
 800428c:	b530      	push	{r4, r5, lr}
 800428e:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004290:	229c      	movs	r2, #156	; 0x9c
 8004292:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8004294:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004296:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004298:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800429a:	f006 fc8d 	bl	800abb8 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800429e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80042a2:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80042a4:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80042a6:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042a8:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042aa:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80042ac:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80042ae:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80042b0:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80042b2:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80042b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80042b8:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042bc:	f005 f928 	bl	8009510 <HAL_RCCEx_PeriphCLKConfig>
 80042c0:	b108      	cbz	r0, 80042c6 <PeriphCommonClock_Config+0x3a>
 80042c2:	b672      	cpsid	i
  while (1)
 80042c4:	e7fe      	b.n	80042c4 <PeriphCommonClock_Config+0x38>
}
 80042c6:	b031      	add	sp, #196	; 0xc4
 80042c8:	bd30      	pop	{r4, r5, pc}
 80042ca:	bf00      	nop

080042cc <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80042cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d0:	49bb      	ldr	r1, [pc, #748]	; (80045c0 <main+0x2f4>)
 80042d2:	e002      	b.n	80042da <main+0xe>
 80042d4:	3b01      	subs	r3, #1
 80042d6:	f000 811e 	beq.w	8004516 <main+0x24a>
 80042da:	680a      	ldr	r2, [r1, #0]
 80042dc:	0410      	lsls	r0, r2, #16
 80042de:	d4f9      	bmi.n	80042d4 <main+0x8>
{
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	b092      	sub	sp, #72	; 0x48
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80042e6:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 80042e8:	f002 fe10 	bl	8006f0c <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80042ec:	4ab5      	ldr	r2, [pc, #724]	; (80045c4 <main+0x2f8>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80042ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 80042f2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80042f6:	a80b      	add	r0, sp, #44	; 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80042f8:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80042fc:	930e      	str	r3, [sp, #56]	; 0x38
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80042fe:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004302:	f002 fe25 	bl	8006f50 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004306:	2004      	movs	r0, #4
 8004308:	f002 fe10 	bl	8006f2c <HAL_MPU_Enable>
  HAL_Init();
 800430c:	f001 ff54 	bl	80061b8 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004310:	4aad      	ldr	r2, [pc, #692]	; (80045c8 <main+0x2fc>)
 8004312:	6953      	ldr	r3, [r2, #20]
 8004314:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004318:	d111      	bne.n	800433e <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800431a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800431e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004322:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800432a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800432e:	6953      	ldr	r3, [r2, #20]
 8004330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004334:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004336:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800433a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800433e:	4aa2      	ldr	r2, [pc, #648]	; (80045c8 <main+0x2fc>)
 8004340:	6953      	ldr	r3, [r2, #20]
 8004342:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004346:	d124      	bne.n	8004392 <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004348:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800434c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004350:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004354:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004358:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800435c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8004360:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004362:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004366:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004368:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800436c:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800436e:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	d1f8      	bne.n	8004368 <main+0x9c>
    } while(sets-- != 0U);
 8004376:	3820      	subs	r0, #32
 8004378:	f110 0f20 	cmn.w	r0, #32
 800437c:	d1f1      	bne.n	8004362 <main+0x96>
 800437e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004382:	6953      	ldr	r3, [r2, #20]
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6153      	str	r3, [r2, #20]
 800438a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800438e:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 8004392:	4c8b      	ldr	r4, [pc, #556]	; (80045c0 <main+0x2f4>)
  SystemClock_Config();
 8004394:	f7ff ff10 	bl	80041b8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8004398:	f7ff ff78 	bl	800428c <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 800439c:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 800439e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80043a2:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 80043a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043a8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80043ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 80043b8:	f004 f81e 	bl	80083f8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80043bc:	2100      	movs	r1, #0
 80043be:	4608      	mov	r0, r1
 80043c0:	f004 f828 	bl	8008414 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80043c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043c8:	e002      	b.n	80043d0 <main+0x104>
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f000 80a5 	beq.w	800451a <main+0x24e>
 80043d0:	682a      	ldr	r2, [r5, #0]
 80043d2:	0412      	lsls	r2, r2, #16
 80043d4:	d5f9      	bpl.n	80043ca <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043da:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043dc:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e0:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80043e4:	f44f 7880 	mov.w	r8, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80043e8:	a90b      	add	r1, sp, #44	; 0x2c
 80043ea:	4878      	ldr	r0, [pc, #480]	; (80045cc <main+0x300>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ec:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80043f0:	f44f 2900 	mov.w	r9, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043f8:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 80043fa:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80045e0 <main+0x314>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	4033      	ands	r3, r6
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004404:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800440e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004412:	4013      	ands	r3, r2
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004418:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004424:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004430:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800443c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	9305      	str	r3, [sp, #20]
 8004446:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004448:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004454:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	9306      	str	r3, [sp, #24]
 800445e:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004460:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004464:	f043 0320 	orr.w	r3, r3, #32
 8004468:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800446c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004472:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004476:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800447a:	9307      	str	r3, [sp, #28]
 800447c:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004482:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004484:	f003 fe8c 	bl	80081a0 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800448a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800448e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004492:	a90b      	add	r1, sp, #44	; 0x2c
 8004494:	484e      	ldr	r0, [pc, #312]	; (80045d0 <main+0x304>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004496:	ea43 0308 	orr.w	r3, r3, r8
 800449a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800449e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80044a2:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044a4:	ea03 0308 	and.w	r3, r3, r8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b0:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044b2:	f003 fe75 	bl	80081a0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ba:	a90b      	add	r1, sp, #44	; 0x2c
 80044bc:	4845      	ldr	r0, [pc, #276]	; (80045d4 <main+0x308>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044be:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c6:	f003 fe6b 	bl	80081a0 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80044ca:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044cc:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80044ce:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 80044d2:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 80044d4:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80044d6:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80044da:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80044de:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80044e2:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044e6:	f8ca 7010 	str.w	r7, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80044ea:	e9ca 3900 	strd	r3, r9, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 80044ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80044f2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80044f6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 80044fa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80044fe:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004502:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004506:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800450a:	f002 fb17 	bl	8006b3c <HAL_ADC_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	b128      	cbz	r0, 800451e <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 8004512:	b672      	cpsid	i
  while (1)
 8004514:	e7fe      	b.n	8004514 <main+0x248>
 8004516:	b672      	cpsid	i
 8004518:	e7fe      	b.n	8004518 <main+0x24c>
 800451a:	b672      	cpsid	i
 800451c:	e7fe      	b.n	800451c <main+0x250>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800451e:	a908      	add	r1, sp, #32
 8004520:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004522:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004524:	f002 fc16 	bl	8006d54 <HAL_ADCEx_MultiModeConfigChannel>
 8004528:	4603      	mov	r3, r0
 800452a:	b108      	cbz	r0, 8004530 <main+0x264>
 800452c:	b672      	cpsid	i
  while (1)
 800452e:	e7fe      	b.n	800452e <main+0x262>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004530:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004532:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004536:	4650      	mov	r0, sl
 8004538:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800453a:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 800453c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 8004540:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004542:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004544:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 8004546:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800454a:	f001 ff2f 	bl	80063ac <HAL_ADC_ConfigChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	b108      	cbz	r0, 8004556 <main+0x28a>
 8004552:	b672      	cpsid	i
  while (1)
 8004554:	e7fe      	b.n	8004554 <main+0x288>
  hadc3.Instance = ADC3;
 8004556:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80045e4 <main+0x318>
 800455a:	4a20      	ldr	r2, [pc, #128]	; (80045dc <main+0x310>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800455c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800455e:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004560:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004564:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004568:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800456c:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 8004570:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8004574:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004578:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800457c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8004580:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8004584:	e9ca 9301 	strd	r9, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004588:	e9ca 3703 	strd	r3, r7, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800458c:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004590:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004594:	f002 fad2 	bl	8006b3c <HAL_ADC_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	b108      	cbz	r0, 80045a0 <main+0x2d4>
 800459c:	b672      	cpsid	i
  while (1)
 800459e:	e7fe      	b.n	800459e <main+0x2d2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80045a0:	a90b      	add	r1, sp, #44	; 0x2c
 80045a2:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 80045a4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80045a8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80045ac:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 80045b0:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80045b4:	f001 fefa 	bl	80063ac <HAL_ADC_ConfigChannel>
 80045b8:	4604      	mov	r4, r0
 80045ba:	b1a8      	cbz	r0, 80045e8 <main+0x31c>
 80045bc:	b672      	cpsid	i
  while (1)
 80045be:	e7fe      	b.n	80045be <main+0x2f2>
 80045c0:	58024400 	.word	0x58024400
 80045c4:	03000018 	.word	0x03000018
 80045c8:	e000ed00 	.word	0xe000ed00
 80045cc:	58020000 	.word	0x58020000
 80045d0:	58022000 	.word	0x58022000
 80045d4:	58020800 	.word	0x58020800
 80045d8:	40022000 	.word	0x40022000
 80045dc:	58026000 	.word	0x58026000
 80045e0:	240117ec 	.word	0x240117ec
 80045e4:	24011850 	.word	0x24011850
  stm32h7_displaySetPalette();
 80045e8:	f000 f836 	bl	8004658 <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80045ec:	4631      	mov	r1, r6
 80045ee:	4620      	mov	r0, r4
 80045f0:	f001 fc80 	bl	8005ef4 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80045f4:	4813      	ldr	r0, [pc, #76]	; (8004644 <main+0x378>)
 80045f6:	f006 fa17 	bl	800aa28 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80045fa:	4620      	mov	r0, r4
 80045fc:	f006 fa46 	bl	800aa8c <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f006 fa96 	bl	800ab34 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f006 fa56 	bl	800aabc <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8004610:	480d      	ldr	r0, [pc, #52]	; (8004648 <main+0x37c>)
 8004612:	f006 fa4b 	bl	800aaac <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <main+0x380>)
 8004618:	f006 fa58 	bl	800aacc <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <main+0x384>)
 800461e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f7fe ff9a 	bl	800355c <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 8004628:	4641      	mov	r1, r8
 800462a:	480a      	ldr	r0, [pc, #40]	; (8004654 <main+0x388>)
 800462c:	f7fe ff96 	bl	800355c <vGBMemoryLoad>
  vGBMemoryInit();
 8004630:	f7ff f8ea 	bl	8003808 <vGBMemoryInit>
  vSetFrameBuffer();
 8004634:	f7ff f9a4 	bl	8003980 <vSetFrameBuffer>
      vGBCPUStep();
 8004638:	f7fe fb02 	bl	8002c40 <vGBCPUStep>
	  vGBPPUStep();
 800463c:	f7ff fcfa 	bl	8004034 <vGBPPUStep>
  while (1)
 8004640:	e7fa      	b.n	8004638 <main+0x36c>
 8004642:	bf00      	nop
 8004644:	0804ae64 	.word	0x0804ae64
 8004648:	ff0000ff 	.word	0xff0000ff
 800464c:	24001074 	.word	0x24001074
 8004650:	24001018 	.word	0x24001018
 8004654:	0804abf0 	.word	0x0804abf0

08004658 <stm32h7_displaySetPalette>:
};

static uint32_t clut_argb8888[256];
DMA2D_CLUTCfgTypeDef clut_cfg;

void stm32h7_displaySetPalette(){
 8004658:	b430      	push	{r4, r5}

	clut_argb8888[1] = LIGHTEST_GREEN;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <stm32h7_displaySetPalette+0x24>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 800465c:	2000      	movs	r0, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 800465e:	4c08      	ldr	r4, [pc, #32]	; (8004680 <stm32h7_displaySetPalette+0x28>)
	clut_cfg.Size = 255;
 8004660:	21ff      	movs	r1, #255	; 0xff
	clut_argb8888[2] = LIGHT_GREEN;
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <stm32h7_displaySetPalette+0x2c>)
	clut_argb8888[3] = DARK_GREEN;
 8004664:	4d08      	ldr	r5, [pc, #32]	; (8004688 <stm32h7_displaySetPalette+0x30>)
	clut_argb8888[1] = LIGHTEST_GREEN;
 8004666:	605c      	str	r4, [r3, #4]
	clut_argb8888[2] = LIGHT_GREEN;
 8004668:	609a      	str	r2, [r3, #8]
	clut_argb8888[4] = DARKEST_GREEN;
 800466a:	4c08      	ldr	r4, [pc, #32]	; (800468c <stm32h7_displaySetPalette+0x34>)
	clut_cfg.pCLUT = clut_argb8888;
 800466c:	4a08      	ldr	r2, [pc, #32]	; (8004690 <stm32h7_displaySetPalette+0x38>)
	clut_argb8888[4] = DARKEST_GREEN;
 800466e:	e9c3 5403 	strd	r5, r4, [r3, #12]
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 8004672:	e9c2 3000 	strd	r3, r0, [r2]
}
 8004676:	bc30      	pop	{r4, r5}
	clut_cfg.Size = 255;
 8004678:	6091      	str	r1, [r2, #8]
}
 800467a:	4770      	bx	lr
 800467c:	240010b0 	.word	0x240010b0
 8004680:	ff9bbc0f 	.word	0xff9bbc0f
 8004684:	ff8bac0f 	.word	0xff8bac0f
 8004688:	ff306230 	.word	0xff306230
 800468c:	ff0f380f 	.word	0xff0f380f
 8004690:	24011908 	.word	0x24011908

08004694 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8004694:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_LTDC_LineEventCallback+0x3c>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2a00      	cmp	r2, #0
 800469a:	db15      	blt.n	80046c8 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <HAL_LTDC_LineEventCallback+0x40>)
 800469e:	6802      	ldr	r2, [r0, #0]
{
 80046a0:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 80046a2:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 80046a4:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 80046a8:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 80046ac:	4d0a      	ldr	r5, [pc, #40]	; (80046d8 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 80046ae:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 80046b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80046b4:	f041 0101 	orr.w	r1, r1, #1
 80046b8:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80046ba:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 80046c0:	601c      	str	r4, [r3, #0]
}
 80046c2:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80046c4:	f004 b852 	b.w	800876c <HAL_LTDC_ProgramLineEvent>
 80046c8:	2100      	movs	r1, #0
 80046ca:	f004 b84f 	b.w	800876c <HAL_LTDC_ProgramLineEvent>
 80046ce:	bf00      	nop
 80046d0:	2400101c 	.word	0x2400101c
 80046d4:	0804acf0 	.word	0x0804acf0
 80046d8:	240014b0 	.word	0x240014b0

080046dc <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80046e2:	4c29      	ldr	r4, [pc, #164]	; (8004788 <CopyBuffer+0xac>)
 80046e4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80046e8:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 80046ec:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80046f0:	f04f 0c05 	mov.w	ip, #5
{
 80046f4:	461e      	mov	r6, r3
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 80046f6:	4b25      	ldr	r3, [pc, #148]	; (800478c <CopyBuffer+0xb0>)
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 80046f8:	f5ca 7548 	rsb	r5, sl, #800	; 0x320
{
 80046fc:	4680      	mov	r8, r0

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80046fe:	4620      	mov	r0, r4
{
 8004700:	460f      	mov	r7, r1
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004702:	60e5      	str	r5, [r4, #12]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004704:	2500      	movs	r5, #0
{
 8004706:	4691      	mov	r9, r2
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004708:	f8c4 b004 	str.w	fp, [r4, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800470c:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 800470e:	6225      	str	r5, [r4, #32]
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004710:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004712:	6465      	str	r5, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004714:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 8004718:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
  hdma2d.Instance          = DMA2D;
 800471c:	6023      	str	r3, [r4, #0]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800471e:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8004722:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8004726:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800472a:	f002 ffe5 	bl	80076f8 <HAL_DMA2D_Init>
 800472e:	b110      	cbz	r0, 8004736 <CopyBuffer+0x5a>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
		  }
    }
    }
  }
}
 8004730:	b003      	add	sp, #12
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8004736:	2101      	movs	r1, #1
 8004738:	4620      	mov	r0, r4
 800473a:	f003 f8ff 	bl	800793c <HAL_DMA2D_ConfigLayer>
 800473e:	2800      	cmp	r0, #0
 8004740:	d1f6      	bne.n	8004730 <CopyBuffer+0x54>
      if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 8004742:	2201      	movs	r2, #1
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <CopyBuffer+0xb4>)
 8004746:	4620      	mov	r0, r4
 8004748:	9200      	str	r2, [sp, #0]
 800474a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474c:	f003 f832 	bl	80077b4 <HAL_DMA2D_CLUTLoad>
 8004750:	2800      	cmp	r0, #0
 8004752:	d1ed      	bne.n	8004730 <CopyBuffer+0x54>
    	  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004754:	210a      	movs	r1, #10
 8004756:	4620      	mov	r0, r4
 8004758:	f003 f86a 	bl	8007830 <HAL_DMA2D_PollForTransfer>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 800475c:	f44f 7248 	mov.w	r2, #800	; 0x320
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8004760:	4653      	mov	r3, sl
 8004762:	4641      	mov	r1, r8
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004764:	fb02 9206 	mla	r2, r2, r6, r9
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8004768:	4620      	mov	r0, r4
 800476a:	9500      	str	r5, [sp, #0]
 800476c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8004770:	f003 f804 	bl	800777c <HAL_DMA2D_Start>
 8004774:	2800      	cmp	r0, #0
 8004776:	d1db      	bne.n	8004730 <CopyBuffer+0x54>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004778:	4620      	mov	r0, r4
 800477a:	210a      	movs	r1, #10
}
 800477c:	b003      	add	sp, #12
 800477e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004782:	f003 b855 	b.w	8007830 <HAL_DMA2D_PollForTransfer>
 8004786:	bf00      	nop
 8004788:	240014b4 	.word	0x240014b4
 800478c:	52001000 	.word	0x52001000
 8004790:	24011908 	.word	0x24011908

08004794 <displayFrameBuffer>:

void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount){
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	460c      	mov	r4, r1
 8004798:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 800479a:	2318      	movs	r3, #24
 800479c:	2200      	movs	r2, #0
 800479e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 80047a2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80047a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80047aa:	012d      	lsls	r5, r5, #4
 80047ac:	0164      	lsls	r4, r4, #5
 80047ae:	e9cd 4500 	strd	r4, r5, [sp]
 80047b2:	f7ff ff93 	bl	80046dc <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 80047b6:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <displayFrameBuffer+0x34>)
 80047b8:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 80047c2:	b003      	add	sp, #12
 80047c4:	bd30      	pop	{r4, r5, pc}
 80047c6:	bf00      	nop
 80047c8:	24011a44 	.word	0x24011a44

080047cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <HAL_MspInit+0x20>)
{
 80047ce:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80047d4:	f042 0202 	orr.w	r2, r2, #2
 80047d8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80047dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047e8:	b002      	add	sp, #8
 80047ea:	4770      	bx	lr
 80047ec:	58024400 	.word	0x58024400

080047f0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80047f0:	4938      	ldr	r1, [pc, #224]	; (80048d4 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f2:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80047f4:	6802      	ldr	r2, [r0, #0]
{
 80047f6:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80047f8:	428a      	cmp	r2, r1
{
 80047fa:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004800:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8004806:	d004      	beq.n	8004812 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8004808:	4933      	ldr	r1, [pc, #204]	; (80048d8 <HAL_ADC_MspInit+0xe8>)
 800480a:	428a      	cmp	r2, r1
 800480c:	d026      	beq.n	800485c <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800480e:	b00a      	add	sp, #40	; 0x28
 8004810:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004812:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004814:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004818:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800481c:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 800481e:	f042 0220 	orr.w	r2, r2, #32
 8004822:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004826:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800482a:	f002 0220 	and.w	r2, r2, #32
 800482e:	9200      	str	r2, [sp, #0]
 8004830:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004832:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800483e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800484a:	f001 fd0f 	bl	800626c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800484e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004852:	4608      	mov	r0, r1
 8004854:	f001 fd0a 	bl	800626c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004858:	b00a      	add	sp, #40	; 0x28
 800485a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 800485e:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004862:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004864:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004866:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 800486a:	481d      	ldr	r0, [pc, #116]	; (80048e0 <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800486c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8004870:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004874:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004878:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 800487c:	9402      	str	r4, [sp, #8]
 800487e:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004880:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004884:	f044 0420 	orr.w	r4, r4, #32
 8004888:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 800488c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004890:	f004 0420 	and.w	r4, r4, #32
 8004894:	9403      	str	r4, [sp, #12]
 8004896:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004898:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800489c:	f044 0404 	orr.w	r4, r4, #4
 80048a0:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80048a4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048aa:	f002 0204 	and.w	r2, r2, #4
 80048ae:	9204      	str	r2, [sp, #16]
 80048b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b2:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80048b6:	f003 fc73 	bl	80081a0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80048ba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80048be:	4608      	mov	r0, r1
 80048c0:	f001 fcd4 	bl	800626c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80048c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80048c8:	4608      	mov	r0, r1
 80048ca:	f001 fccf 	bl	800626c <HAL_SYSCFG_AnalogSwitchConfig>
}
 80048ce:	b00a      	add	sp, #40	; 0x28
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	bf00      	nop
 80048d4:	40022000 	.word	0x40022000
 80048d8:	58026000 	.word	0x58026000
 80048dc:	58024400 	.word	0x58024400
 80048e0:	58021400 	.word	0x58021400

080048e4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop

080048e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80048e8:	4c05      	ldr	r4, [pc, #20]	; (8004900 <HardFault_Handler+0x18>)
{
 80048ea:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80048ec:	4620      	mov	r0, r4
 80048ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048f2:	f003 fd77 	bl	80083e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80048f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048fa:	f001 fc9f 	bl	800623c <HAL_Delay>
  while (1)
 80048fe:	e7f5      	b.n	80048ec <HardFault_Handler+0x4>
 8004900:	58022000 	.word	0x58022000

08004904 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004904:	e7fe      	b.n	8004904 <MemManage_Handler>
 8004906:	bf00      	nop

08004908 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004908:	e7fe      	b.n	8004908 <BusFault_Handler>
 800490a:	bf00      	nop

0800490c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800490c:	e7fe      	b.n	800490c <UsageFault_Handler>
 800490e:	bf00      	nop

08004910 <SVC_Handler>:
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <DebugMon_Handler>:
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <PendSV_Handler>:
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800491c:	f001 bc7c 	b.w	8006218 <HAL_IncTick>

08004920 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <LTDC_IRQHandler+0x8>)
 8004922:	f003 be91 	b.w	8008648 <HAL_LTDC_IRQHandler>
 8004926:	bf00      	nop
 8004928:	24011a44 	.word	0x24011a44

0800492c <LTDC_ER_IRQHandler>:
 800492c:	f7ff bff8 	b.w	8004920 <LTDC_IRQHandler>

08004930 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <DSI_IRQHandler+0x8>)
 8004932:	f003 b957 	b.w	8007be4 <HAL_DSI_IRQHandler>
 8004936:	bf00      	nop
 8004938:	24011b08 	.word	0x24011b08

0800493c <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  BSP_AUDIO_OUT_IRQHandler(0);
 800493c:	2000      	movs	r0, #0
 800493e:	f000 bddd 	b.w	80054fc <BSP_AUDIO_OUT_IRQHandler>
 8004942:	bf00      	nop

08004944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800497c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004948:	f7fb fcc6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800494c:	480c      	ldr	r0, [pc, #48]	; (8004980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800494e:	490d      	ldr	r1, [pc, #52]	; (8004984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004954:	e002      	b.n	800495c <LoopCopyDataInit>

08004956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495a:	3304      	adds	r3, #4

0800495c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800495c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800495e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004960:	d3f9      	bcc.n	8004956 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004964:	4c0a      	ldr	r4, [pc, #40]	; (8004990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004968:	e001      	b.n	800496e <LoopFillZerobss>

0800496a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800496c:	3204      	adds	r2, #4

0800496e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800496e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004970:	d3fb      	bcc.n	800496a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004972:	f006 f8ef 	bl	800ab54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004976:	f7ff fca9 	bl	80042cc <main>
  bx  lr
 800497a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800497c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004980:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004984:	2400107c 	.word	0x2400107c
  ldr r2, =_sidata
 8004988:	0804c950 	.word	0x0804c950
  ldr r2, =_sbss
 800498c:	2400107c 	.word	0x2400107c
  ldr r4, =_ebss
 8004990:	24011bc4 	.word	0x24011bc4

08004994 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004994:	e7fe      	b.n	8004994 <ADC3_IRQHandler>
	...

08004998 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800499a:	4c0e      	ldr	r4, [pc, #56]	; (80049d4 <IS42S32800J_ModeRegConfig+0x3c>)
 800499c:	2304      	movs	r3, #4
{
 800499e:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 80049a0:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049a2:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049a4:	69d7      	ldr	r7, [r2, #28]
 80049a6:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049aa:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049ac:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 80049ae:	6955      	ldr	r5, [r2, #20]
 80049b0:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 80049b2:	6995      	ldr	r5, [r2, #24]
 80049b4:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 80049b6:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 80049bc:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049be:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 80049c0:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 80049c2:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049c4:	f005 ff4c 	bl	800a860 <HAL_SDRAM_SendCommand>
 80049c8:	3800      	subs	r0, #0
 80049ca:	bf18      	it	ne
 80049cc:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80049ce:	4240      	negs	r0, r0
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	2400151c 	.word	0x2400151c

080049d8 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80049d8:	680a      	ldr	r2, [r1, #0]
{
 80049da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80049dc:	4c22      	ldr	r4, [pc, #136]	; (8004a68 <IS42S32800J_Init+0x90>)
 80049de:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 80049e0:	2700      	movs	r7, #0
{
 80049e2:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 80049e4:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049e6:	4621      	mov	r1, r4
 80049e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80049ec:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 80049ee:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80049f0:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 80049f2:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049f4:	f005 ff34 	bl	800a860 <HAL_SDRAM_SendCommand>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d132      	bne.n	8004a62 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80049fc:	f001 fc18 	bl	8006230 <HAL_GetTick>
 8004a00:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004a02:	f001 fc15 	bl	8006230 <HAL_GetTick>
 8004a06:	4287      	cmp	r7, r0
 8004a08:	d0fb      	beq.n	8004a02 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a0a:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004a0c:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8004a0e:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004a10:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004a12:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004a18:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a1a:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8004a1c:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a1e:	4912      	ldr	r1, [pc, #72]	; (8004a68 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004a20:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a22:	f005 ff1d 	bl	800a860 <HAL_SDRAM_SendCommand>
 8004a26:	4603      	mov	r3, r0
 8004a28:	b9d8      	cbnz	r0, 8004a62 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004a2a:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8004a2c:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8004a2e:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8004a34:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a36:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8004a38:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a3a:	490b      	ldr	r1, [pc, #44]	; (8004a68 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004a3c:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004a3e:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a40:	f005 ff0e 	bl	800a860 <HAL_SDRAM_SendCommand>
 8004a44:	b968      	cbnz	r0, 8004a62 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004a46:	4629      	mov	r1, r5
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffa5 	bl	8004998 <IS42S32800J_ModeRegConfig>
 8004a4e:	b940      	cbnz	r0, 8004a62 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004a50:	68a9      	ldr	r1, [r5, #8]
 8004a52:	4630      	mov	r0, r6
 8004a54:	f005 ff24 	bl	800a8a0 <HAL_SDRAM_ProgramRefreshRate>
 8004a58:	3800      	subs	r0, #0
 8004a5a:	bf18      	it	ne
 8004a5c:	2001      	movne	r0, #1
 8004a5e:	4240      	negs	r0, r0
}
 8004a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8004a62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	2400151c 	.word	0x2400151c

08004a6c <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop

08004a74 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8004a76:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	600b      	str	r3, [r1, #0]
}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2400152c 	.word	0x2400152c

08004a84 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8004a86:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	600b      	str	r3, [r1, #0]
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	2400152c 	.word	0x2400152c

08004a94 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <OTM8009A_GetXSize+0x1c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	b123      	cbz	r3, 8004aa4 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8004a9a:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004a9e:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004aa0:	600b      	str	r3, [r1, #0]
}
 8004aa2:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004aa4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004aa8:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8004aaa:	600b      	str	r3, [r1, #0]
}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2400152c 	.word	0x2400152c

08004ab4 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <OTM8009A_GetYSize+0x1c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b123      	cbz	r3, 8004ac4 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004aba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004abe:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004ac0:	600b      	str	r3, [r1, #0]
}
 8004ac2:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004ac4:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004ac8:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004aca:	600b      	str	r3, [r1, #0]
}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	2400152c 	.word	0x2400152c

08004ad4 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop

08004af4 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004b04:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b06:	6884      	ldr	r4, [r0, #8]
 8004b08:	8800      	ldrh	r0, [r0, #0]
 8004b0a:	46a4      	mov	ip, r4
}
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b10:	4760      	bx	ip
 8004b12:	bf00      	nop

08004b14 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b14:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b16:	6844      	ldr	r4, [r0, #4]
 8004b18:	8800      	ldrh	r0, [r0, #0]
 8004b1a:	46a4      	mov	ip, r4
}
 8004b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b20:	4760      	bx	ip
 8004b22:	bf00      	nop

08004b24 <OTM8009A_Init>:
{
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f100 0710 	add.w	r7, r0, #16
{
 8004b2e:	b082      	sub	sp, #8
 8004b30:	4680      	mov	r8, r0
 8004b32:	4689      	mov	r9, r1
 8004b34:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b36:	4619      	mov	r1, r3
 8004b38:	4ae0      	ldr	r2, [pc, #896]	; (8004ebc <OTM8009A_Init+0x398>)
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f000 fcd6 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b40:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b42:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b44:	4ade      	ldr	r2, [pc, #888]	; (8004ec0 <OTM8009A_Init+0x39c>)
 8004b46:	21ff      	movs	r1, #255	; 0xff
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f000 fccf 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b50:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b52:	4adc      	ldr	r2, [pc, #880]	; (8004ec4 <OTM8009A_Init+0x3a0>)
 8004b54:	4619      	mov	r1, r3
 8004b56:	4638      	mov	r0, r7
 8004b58:	f000 fcc8 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b5c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b5e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b60:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b62:	4ad9      	ldr	r2, [pc, #868]	; (8004ec8 <OTM8009A_Init+0x3a4>)
 8004b64:	21ff      	movs	r1, #255	; 0xff
 8004b66:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b68:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b6a:	f000 fcbf 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b70:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b72:	4ad4      	ldr	r2, [pc, #848]	; (8004ec4 <OTM8009A_Init+0x3a0>)
 8004b74:	4619      	mov	r1, r3
 8004b76:	4638      	mov	r0, r7
 8004b78:	f000 fcb8 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b7e:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b80:	2300      	movs	r3, #0
 8004b82:	4ad2      	ldr	r2, [pc, #840]	; (8004ecc <OTM8009A_Init+0x3a8>)
 8004b84:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b86:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f000 fcaf 	bl	80054ec <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b92:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004b94:	4798      	blx	r3
 8004b96:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004b98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004b9c:	4798      	blx	r3
 8004b9e:	1b00      	subs	r0, r0, r4
 8004ba0:	2809      	cmp	r0, #9
 8004ba2:	d9f9      	bls.n	8004b98 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4aca      	ldr	r2, [pc, #808]	; (8004ed0 <OTM8009A_Init+0x3ac>)
 8004ba8:	4638      	mov	r0, r7
 8004baa:	4619      	mov	r1, r3
 8004bac:	f000 fc9e 	bl	80054ec <otm8009a_write_reg>
 8004bb0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4ac7      	ldr	r2, [pc, #796]	; (8004ed4 <OTM8009A_Init+0x3b0>)
 8004bb6:	21c4      	movs	r1, #196	; 0xc4
 8004bb8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004bba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004bbc:	f000 fc96 	bl	80054ec <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004bc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004bc4:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004bc6:	4798      	blx	r3
 8004bc8:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004bce:	4798      	blx	r3
 8004bd0:	1b40      	subs	r0, r0, r5
 8004bd2:	2809      	cmp	r0, #9
 8004bd4:	d9f9      	bls.n	8004bca <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4abf      	ldr	r2, [pc, #764]	; (8004ed8 <OTM8009A_Init+0x3b4>)
 8004bda:	4638      	mov	r0, r7
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f000 fc85 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004be2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004be4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004be6:	4abd      	ldr	r2, [pc, #756]	; (8004edc <OTM8009A_Init+0x3b8>)
 8004be8:	21c5      	movs	r1, #197	; 0xc5
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 fc7e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004bf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004bf2:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004bf4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4ab9      	ldr	r2, [pc, #740]	; (8004ee0 <OTM8009A_Init+0x3bc>)
 8004bfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004bfc:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004bfe:	f000 fc75 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c06:	4ab7      	ldr	r2, [pc, #732]	; (8004ee4 <OTM8009A_Init+0x3c0>)
 8004c08:	21c5      	movs	r1, #197	; 0xc5
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f000 fc6e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c16:	4619      	mov	r1, r3
 8004c18:	4ab3      	ldr	r2, [pc, #716]	; (8004ee8 <OTM8009A_Init+0x3c4>)
 8004c1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c1e:	f000 fc65 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c26:	4ab1      	ldr	r2, [pc, #708]	; (8004eec <OTM8009A_Init+0x3c8>)
 8004c28:	21c0      	movs	r1, #192	; 0xc0
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 fc5e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c36:	4619      	mov	r1, r3
 8004c38:	4aa0      	ldr	r2, [pc, #640]	; (8004ebc <OTM8009A_Init+0x398>)
 8004c3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c3e:	f000 fc55 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c46:	4aaa      	ldr	r2, [pc, #680]	; (8004ef0 <OTM8009A_Init+0x3cc>)
 8004c48:	21d9      	movs	r1, #217	; 0xd9
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f000 fc4e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c56:	4619      	mov	r1, r3
 8004c58:	4aa6      	ldr	r2, [pc, #664]	; (8004ef4 <OTM8009A_Init+0x3d0>)
 8004c5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c5e:	f000 fc45 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c66:	4aa4      	ldr	r2, [pc, #656]	; (8004ef8 <OTM8009A_Init+0x3d4>)
 8004c68:	21c1      	movs	r1, #193	; 0xc1
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f000 fc3e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c76:	4619      	mov	r1, r3
 8004c78:	4aa0      	ldr	r2, [pc, #640]	; (8004efc <OTM8009A_Init+0x3d8>)
 8004c7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c7e:	f000 fc35 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c86:	4a9e      	ldr	r2, [pc, #632]	; (8004f00 <OTM8009A_Init+0x3dc>)
 8004c88:	21c1      	movs	r1, #193	; 0xc1
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	f000 fc2e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c96:	4619      	mov	r1, r3
 8004c98:	4a9a      	ldr	r2, [pc, #616]	; (8004f04 <OTM8009A_Init+0x3e0>)
 8004c9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c9e:	f000 fc25 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ca2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004ca4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ca6:	4a98      	ldr	r2, [pc, #608]	; (8004f08 <OTM8009A_Init+0x3e4>)
 8004ca8:	21c5      	movs	r1, #197	; 0xc5
 8004caa:	4638      	mov	r0, r7
 8004cac:	f000 fc1e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cb2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4a94      	ldr	r2, [pc, #592]	; (8004f0c <OTM8009A_Init+0x3e8>)
 8004cba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cbe:	f000 fc15 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004cc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cc4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004cc6:	4a87      	ldr	r2, [pc, #540]	; (8004ee4 <OTM8009A_Init+0x3c0>)
 8004cc8:	21c5      	movs	r1, #197	; 0xc5
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f000 fc0e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004cd4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4a78      	ldr	r2, [pc, #480]	; (8004ebc <OTM8009A_Init+0x398>)
 8004cda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004cdc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cde:	f000 fc05 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ce2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ce4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ce6:	4a8a      	ldr	r2, [pc, #552]	; (8004f10 <OTM8009A_Init+0x3ec>)
 8004ce8:	21d8      	movs	r1, #216	; 0xd8
 8004cea:	4638      	mov	r0, r7
 8004cec:	f000 fbfe 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004cf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cf2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004cf4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4a86      	ldr	r2, [pc, #536]	; (8004f14 <OTM8009A_Init+0x3f0>)
 8004cfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004cfc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004cfe:	f000 fbf5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d06:	4a84      	ldr	r2, [pc, #528]	; (8004f18 <OTM8009A_Init+0x3f4>)
 8004d08:	21c5      	movs	r1, #197	; 0xc5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 fbee 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d16:	4619      	mov	r1, r3
 8004d18:	4a80      	ldr	r2, [pc, #512]	; (8004f1c <OTM8009A_Init+0x3f8>)
 8004d1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d1e:	f000 fbe5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d26:	4a7e      	ldr	r2, [pc, #504]	; (8004f20 <OTM8009A_Init+0x3fc>)
 8004d28:	21c0      	movs	r1, #192	; 0xc0
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f000 fbde 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d36:	4619      	mov	r1, r3
 8004d38:	4a7a      	ldr	r2, [pc, #488]	; (8004f24 <OTM8009A_Init+0x400>)
 8004d3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d3e:	f000 fbd5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d46:	4a78      	ldr	r2, [pc, #480]	; (8004f28 <OTM8009A_Init+0x404>)
 8004d48:	21c5      	movs	r1, #197	; 0xc5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f000 fbce 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d56:	4619      	mov	r1, r3
 8004d58:	4a66      	ldr	r2, [pc, #408]	; (8004ef4 <OTM8009A_Init+0x3d0>)
 8004d5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d5e:	f000 fbc5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d66:	4a71      	ldr	r2, [pc, #452]	; (8004f2c <OTM8009A_Init+0x408>)
 8004d68:	21c4      	movs	r1, #196	; 0xc4
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f000 fbbe 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d76:	4619      	mov	r1, r3
 8004d78:	4a60      	ldr	r2, [pc, #384]	; (8004efc <OTM8009A_Init+0x3d8>)
 8004d7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d7e:	f000 fbb5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d86:	4a6a      	ldr	r2, [pc, #424]	; (8004f30 <OTM8009A_Init+0x40c>)
 8004d88:	21c1      	movs	r1, #193	; 0xc1
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f000 fbae 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d96:	4619      	mov	r1, r3
 8004d98:	4a66      	ldr	r2, [pc, #408]	; (8004f34 <OTM8009A_Init+0x410>)
 8004d9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d9e:	f000 fba5 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004da2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004da4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004da6:	4a64      	ldr	r2, [pc, #400]	; (8004f38 <OTM8009A_Init+0x414>)
 8004da8:	21b3      	movs	r1, #179	; 0xb3
 8004daa:	4638      	mov	r0, r7
 8004dac:	f000 fb9e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004db0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004db2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004db4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004db6:	4619      	mov	r1, r3
 8004db8:	4a42      	ldr	r2, [pc, #264]	; (8004ec4 <OTM8009A_Init+0x3a0>)
 8004dba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004dbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dbe:	f000 fb95 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004dc2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dc4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <OTM8009A_Init+0x418>)
 8004dc8:	21ce      	movs	r1, #206	; 0xce
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f000 fb8e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004dd4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4a59      	ldr	r2, [pc, #356]	; (8004f40 <OTM8009A_Init+0x41c>)
 8004dda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004ddc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dde:	f000 fb85 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004de2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004de4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004de6:	4a57      	ldr	r2, [pc, #348]	; (8004f44 <OTM8009A_Init+0x420>)
 8004de8:	21ce      	movs	r1, #206	; 0xce
 8004dea:	4638      	mov	r0, r7
 8004dec:	f000 fb7e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004df0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004df2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004df4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004df6:	4619      	mov	r1, r3
 8004df8:	4a53      	ldr	r2, [pc, #332]	; (8004f48 <OTM8009A_Init+0x424>)
 8004dfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004dfc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dfe:	f000 fb75 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e02:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e06:	4a51      	ldr	r2, [pc, #324]	; (8004f4c <OTM8009A_Init+0x428>)
 8004e08:	21ce      	movs	r1, #206	; 0xce
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f000 fb6e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e16:	4619      	mov	r1, r3
 8004e18:	4a4d      	ldr	r2, [pc, #308]	; (8004f50 <OTM8009A_Init+0x42c>)
 8004e1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e1e:	f000 fb65 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e22:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e26:	4a4b      	ldr	r2, [pc, #300]	; (8004f54 <OTM8009A_Init+0x430>)
 8004e28:	21cf      	movs	r1, #207	; 0xcf
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f000 fb5e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e36:	4619      	mov	r1, r3
 8004e38:	4a47      	ldr	r2, [pc, #284]	; (8004f58 <OTM8009A_Init+0x434>)
 8004e3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e3e:	f000 fb55 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e46:	4a45      	ldr	r2, [pc, #276]	; (8004f5c <OTM8009A_Init+0x438>)
 8004e48:	21cf      	movs	r1, #207	; 0xcf
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f000 fb4e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e56:	4619      	mov	r1, r3
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <OTM8009A_Init+0x3a0>)
 8004e5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e5e:	f000 fb45 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e62:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e66:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <OTM8009A_Init+0x43c>)
 8004e68:	21cb      	movs	r1, #203	; 0xcb
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 fb3e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e76:	4619      	mov	r1, r3
 8004e78:	4a3a      	ldr	r2, [pc, #232]	; (8004f64 <OTM8009A_Init+0x440>)
 8004e7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e7e:	f000 fb35 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e82:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e86:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <OTM8009A_Init+0x444>)
 8004e88:	21cb      	movs	r1, #203	; 0xcb
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f000 fb2e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e96:	4619      	mov	r1, r3
 8004e98:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <OTM8009A_Init+0x41c>)
 8004e9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e9e:	f000 fb25 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ea2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ea4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ea6:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <OTM8009A_Init+0x448>)
 8004ea8:	21cb      	movs	r1, #203	; 0xcb
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 fb1e 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004eb2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004eb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	e05a      	b.n	8004f70 <OTM8009A_Init+0x44c>
 8004eba:	bf00      	nop
 8004ebc:	0804ae31 	.word	0x0804ae31
 8004ec0:	0804ad00 	.word	0x0804ad00
 8004ec4:	0804ae32 	.word	0x0804ae32
 8004ec8:	0804ad8c 	.word	0x0804ad8c
 8004ecc:	0804ae33 	.word	0x0804ae33
 8004ed0:	0804ae34 	.word	0x0804ae34
 8004ed4:	0804ae35 	.word	0x0804ae35
 8004ed8:	0804ae36 	.word	0x0804ae36
 8004edc:	0804ae37 	.word	0x0804ae37
 8004ee0:	0804ae38 	.word	0x0804ae38
 8004ee4:	0804ae39 	.word	0x0804ae39
 8004ee8:	0804ae3a 	.word	0x0804ae3a
 8004eec:	0804ae3b 	.word	0x0804ae3b
 8004ef0:	0804ae3c 	.word	0x0804ae3c
 8004ef4:	0804ae3d 	.word	0x0804ae3d
 8004ef8:	0804ae3e 	.word	0x0804ae3e
 8004efc:	0804ae3f 	.word	0x0804ae3f
 8004f00:	0804ae40 	.word	0x0804ae40
 8004f04:	0804ae41 	.word	0x0804ae41
 8004f08:	0804ae42 	.word	0x0804ae42
 8004f0c:	0804ae43 	.word	0x0804ae43
 8004f10:	0804ae00 	.word	0x0804ae00
 8004f14:	0804ae44 	.word	0x0804ae44
 8004f18:	0804ae45 	.word	0x0804ae45
 8004f1c:	0804ae46 	.word	0x0804ae46
 8004f20:	0804ae47 	.word	0x0804ae47
 8004f24:	0804ae48 	.word	0x0804ae48
 8004f28:	0804ae49 	.word	0x0804ae49
 8004f2c:	0804ae4a 	.word	0x0804ae4a
 8004f30:	0804ae4b 	.word	0x0804ae4b
 8004f34:	0804ae4c 	.word	0x0804ae4c
 8004f38:	0804ae04 	.word	0x0804ae04
 8004f3c:	0804ae08 	.word	0x0804ae08
 8004f40:	0804ae4d 	.word	0x0804ae4d
 8004f44:	0804ae10 	.word	0x0804ae10
 8004f48:	0804ae4e 	.word	0x0804ae4e
 8004f4c:	0804ae20 	.word	0x0804ae20
 8004f50:	0804ae4f 	.word	0x0804ae4f
 8004f54:	0804ad04 	.word	0x0804ad04
 8004f58:	0804ae50 	.word	0x0804ae50
 8004f5c:	0804ae5d 	.word	0x0804ae5d
 8004f60:	0804ad10 	.word	0x0804ad10
 8004f64:	0804ae51 	.word	0x0804ae51
 8004f68:	0804ad1c 	.word	0x0804ad1c
 8004f6c:	0804ad2c 	.word	0x0804ad2c
 8004f70:	4ad1      	ldr	r2, [pc, #836]	; (80052b8 <OTM8009A_Init+0x794>)
 8004f72:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f74:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f76:	f000 fab9 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f7a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f7e:	4acf      	ldr	r2, [pc, #828]	; (80052bc <OTM8009A_Init+0x798>)
 8004f80:	21cb      	movs	r1, #203	; 0xcb
 8004f82:	4638      	mov	r0, r7
 8004f84:	f000 fab2 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f8a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4acb      	ldr	r2, [pc, #812]	; (80052c0 <OTM8009A_Init+0x79c>)
 8004f92:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f94:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f96:	f000 faa9 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f9a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f9e:	4ac9      	ldr	r2, [pc, #804]	; (80052c4 <OTM8009A_Init+0x7a0>)
 8004fa0:	21cb      	movs	r1, #203	; 0xcb
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f000 faa2 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004faa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004fac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4ac5      	ldr	r2, [pc, #788]	; (80052c8 <OTM8009A_Init+0x7a4>)
 8004fb2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004fb4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fb6:	f000 fa99 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fbc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fbe:	4ac3      	ldr	r2, [pc, #780]	; (80052cc <OTM8009A_Init+0x7a8>)
 8004fc0:	21cb      	movs	r1, #203	; 0xcb
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f000 fa92 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fcc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4abf      	ldr	r2, [pc, #764]	; (80052d0 <OTM8009A_Init+0x7ac>)
 8004fd2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fd4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fd6:	f000 fa89 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fda:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fdc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fde:	4abd      	ldr	r2, [pc, #756]	; (80052d4 <OTM8009A_Init+0x7b0>)
 8004fe0:	21cb      	movs	r1, #203	; 0xcb
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f000 fa82 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fe8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4ab9      	ldr	r2, [pc, #740]	; (80052d8 <OTM8009A_Init+0x7b4>)
 8004ff2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004ff4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004ff6:	f000 fa79 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004ffa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004ffc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004ffe:	4ab7      	ldr	r2, [pc, #732]	; (80052dc <OTM8009A_Init+0x7b8>)
 8005000:	21cb      	movs	r1, #203	; 0xcb
 8005002:	4638      	mov	r0, r7
 8005004:	f000 fa72 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005008:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800500a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800500c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800500e:	4619      	mov	r1, r3
 8005010:	4ab3      	ldr	r2, [pc, #716]	; (80052e0 <OTM8009A_Init+0x7bc>)
 8005012:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005014:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005016:	f000 fa69 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800501a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800501c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800501e:	4ab1      	ldr	r2, [pc, #708]	; (80052e4 <OTM8009A_Init+0x7c0>)
 8005020:	21cc      	movs	r1, #204	; 0xcc
 8005022:	4638      	mov	r0, r7
 8005024:	f000 fa62 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005028:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800502a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800502c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800502e:	4619      	mov	r1, r3
 8005030:	4aad      	ldr	r2, [pc, #692]	; (80052e8 <OTM8009A_Init+0x7c4>)
 8005032:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005034:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005036:	f000 fa59 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800503a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800503c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800503e:	4aab      	ldr	r2, [pc, #684]	; (80052ec <OTM8009A_Init+0x7c8>)
 8005040:	21cc      	movs	r1, #204	; 0xcc
 8005042:	4638      	mov	r0, r7
 8005044:	f000 fa52 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005048:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800504a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800504c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800504e:	4619      	mov	r1, r3
 8005050:	4aa7      	ldr	r2, [pc, #668]	; (80052f0 <OTM8009A_Init+0x7cc>)
 8005052:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005054:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005056:	f000 fa49 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800505a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800505c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800505e:	4aa5      	ldr	r2, [pc, #660]	; (80052f4 <OTM8009A_Init+0x7d0>)
 8005060:	21cc      	movs	r1, #204	; 0xcc
 8005062:	4638      	mov	r0, r7
 8005064:	f000 fa42 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005068:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800506a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800506c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800506e:	4619      	mov	r1, r3
 8005070:	4a91      	ldr	r2, [pc, #580]	; (80052b8 <OTM8009A_Init+0x794>)
 8005072:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005074:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005076:	f000 fa39 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800507a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800507c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800507e:	4a9e      	ldr	r2, [pc, #632]	; (80052f8 <OTM8009A_Init+0x7d4>)
 8005080:	21cc      	movs	r1, #204	; 0xcc
 8005082:	4638      	mov	r0, r7
 8005084:	f000 fa32 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005088:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800508a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800508c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800508e:	4619      	mov	r1, r3
 8005090:	4a8b      	ldr	r2, [pc, #556]	; (80052c0 <OTM8009A_Init+0x79c>)
 8005092:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005094:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005096:	f000 fa29 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800509a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800509c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800509e:	4a97      	ldr	r2, [pc, #604]	; (80052fc <OTM8009A_Init+0x7d8>)
 80050a0:	21cc      	movs	r1, #204	; 0xcc
 80050a2:	4638      	mov	r0, r7
 80050a4:	f000 fa22 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050aa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050ae:	4619      	mov	r1, r3
 80050b0:	4a85      	ldr	r2, [pc, #532]	; (80052c8 <OTM8009A_Init+0x7a4>)
 80050b2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050b4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050b6:	f000 fa19 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050ba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050be:	4a90      	ldr	r2, [pc, #576]	; (8005300 <OTM8009A_Init+0x7dc>)
 80050c0:	21cc      	movs	r1, #204	; 0xcc
 80050c2:	4638      	mov	r0, r7
 80050c4:	f000 fa12 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050ca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050cc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050ce:	4619      	mov	r1, r3
 80050d0:	4a8c      	ldr	r2, [pc, #560]	; (8005304 <OTM8009A_Init+0x7e0>)
 80050d2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050d4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050d6:	f000 fa09 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050de:	4a8a      	ldr	r2, [pc, #552]	; (8005308 <OTM8009A_Init+0x7e4>)
 80050e0:	21c5      	movs	r1, #197	; 0xc5
 80050e2:	4638      	mov	r0, r7
 80050e4:	f000 fa02 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050ea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050ec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050ee:	4619      	mov	r1, r3
 80050f0:	4a86      	ldr	r2, [pc, #536]	; (800530c <OTM8009A_Init+0x7e8>)
 80050f2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050f4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050f6:	f000 f9f9 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050fe:	4a84      	ldr	r2, [pc, #528]	; (8005310 <OTM8009A_Init+0x7ec>)
 8005100:	21f5      	movs	r1, #245	; 0xf5
 8005102:	4638      	mov	r0, r7
 8005104:	f000 f9f2 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005108:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800510a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800510c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800510e:	4619      	mov	r1, r3
 8005110:	4a80      	ldr	r2, [pc, #512]	; (8005314 <OTM8009A_Init+0x7f0>)
 8005112:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005114:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005116:	f000 f9e9 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800511a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800511c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800511e:	4a7e      	ldr	r2, [pc, #504]	; (8005318 <OTM8009A_Init+0x7f4>)
 8005120:	21c6      	movs	r1, #198	; 0xc6
 8005122:	4638      	mov	r0, r7
 8005124:	f000 f9e2 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005128:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800512a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800512c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800512e:	4619      	mov	r1, r3
 8005130:	4a7a      	ldr	r2, [pc, #488]	; (800531c <OTM8009A_Init+0x7f8>)
 8005132:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005134:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005136:	f000 f9d9 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800513a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800513c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800513e:	4a78      	ldr	r2, [pc, #480]	; (8005320 <OTM8009A_Init+0x7fc>)
 8005140:	21ff      	movs	r1, #255	; 0xff
 8005142:	4638      	mov	r0, r7
 8005144:	f000 f9d2 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005148:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800514a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800514c:	4a73      	ldr	r2, [pc, #460]	; (800531c <OTM8009A_Init+0x7f8>)
 800514e:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005150:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005152:	4638      	mov	r0, r7
 8005154:	f000 f9ca 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005158:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800515a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800515c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800515e:	4619      	mov	r1, r3
 8005160:	4a6e      	ldr	r2, [pc, #440]	; (800531c <OTM8009A_Init+0x7f8>)
 8005162:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005164:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005166:	f000 f9c1 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800516a:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800516c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800516e:	4a6d      	ldr	r2, [pc, #436]	; (8005324 <OTM8009A_Init+0x800>)
 8005170:	21e1      	movs	r1, #225	; 0xe1
 8005172:	4638      	mov	r0, r7
 8005174:	f000 f9ba 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005178:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800517a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800517c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800517e:	4619      	mov	r1, r3
 8005180:	4a66      	ldr	r2, [pc, #408]	; (800531c <OTM8009A_Init+0x7f8>)
 8005182:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005184:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005186:	f000 f9b1 	bl	80054ec <otm8009a_write_reg>
 800518a:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800518c:	2310      	movs	r3, #16
 800518e:	4a66      	ldr	r2, [pc, #408]	; (8005328 <OTM8009A_Init+0x804>)
 8005190:	21e2      	movs	r1, #226	; 0xe2
 8005192:	4638      	mov	r0, r7
 8005194:	f000 f9aa 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005198:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800519a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800519c:	2300      	movs	r3, #0
 800519e:	4a63      	ldr	r2, [pc, #396]	; (800532c <OTM8009A_Init+0x808>)
 80051a0:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80051a2:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80051a4:	4638      	mov	r0, r7
 80051a6:	f000 f9a1 	bl	80054ec <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80051aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80051ae:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80051b0:	4798      	blx	r3
 80051b2:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80051b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80051b8:	4798      	blx	r3
 80051ba:	1b40      	subs	r0, r0, r5
 80051bc:	2877      	cmp	r0, #119	; 0x77
 80051be:	d9f9      	bls.n	80051b4 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 80051c0:	f1b9 0f00 	cmp.w	r9, #0
 80051c4:	d074      	beq.n	80052b0 <OTM8009A_Init+0x78c>
 80051c6:	f1b9 0f02 	cmp.w	r9, #2
 80051ca:	d14f      	bne.n	800526c <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80051cc:	2300      	movs	r3, #0
 80051ce:	4a58      	ldr	r2, [pc, #352]	; (8005330 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80051d0:	213a      	movs	r1, #58	; 0x3a
 80051d2:	4638      	mov	r0, r7
 80051d4:	f000 f98a 	bl	80054ec <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80051d8:	4d56      	ldr	r5, [pc, #344]	; (8005334 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80051da:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80051de:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80051e0:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80051e4:	d046      	beq.n	8005274 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80051e6:	2300      	movs	r3, #0
 80051e8:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80051ea:	2300      	movs	r3, #0
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <OTM8009A_Init+0x814>)
 80051ee:	2151      	movs	r1, #81	; 0x51
 80051f0:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80051f2:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80051f4:	f000 f97a 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80051f8:	4a50      	ldr	r2, [pc, #320]	; (800533c <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80051fa:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80051fe:	4653      	mov	r3, sl
 8005200:	2153      	movs	r1, #83	; 0x53
 8005202:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005204:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005208:	f000 f970 	bl	80054ec <otm8009a_write_reg>
 800520c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800520e:	4653      	mov	r3, sl
 8005210:	4a4b      	ldr	r2, [pc, #300]	; (8005340 <OTM8009A_Init+0x81c>)
 8005212:	2155      	movs	r1, #85	; 0x55
 8005214:	4638      	mov	r0, r7
 8005216:	f000 f969 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800521a:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800521c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800521e:	4653      	mov	r3, sl
 8005220:	4a48      	ldr	r2, [pc, #288]	; (8005344 <OTM8009A_Init+0x820>)
 8005222:	215e      	movs	r1, #94	; 0x5e
 8005224:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005226:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005228:	f000 f960 	bl	80054ec <otm8009a_write_reg>
 800522c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800522e:	4653      	mov	r3, sl
 8005230:	4a45      	ldr	r2, [pc, #276]	; (8005348 <OTM8009A_Init+0x824>)
 8005232:	2129      	movs	r1, #41	; 0x29
 8005234:	4638      	mov	r0, r7
 8005236:	f000 f959 	bl	80054ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800523a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800523c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800523e:	4653      	mov	r3, sl
 8005240:	4651      	mov	r1, sl
 8005242:	4a36      	ldr	r2, [pc, #216]	; (800531c <OTM8009A_Init+0x7f8>)
 8005244:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005246:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005248:	f000 f950 	bl	80054ec <otm8009a_write_reg>
 800524c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800524e:	4653      	mov	r3, sl
 8005250:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005252:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005254:	4a3d      	ldr	r2, [pc, #244]	; (800534c <OTM8009A_Init+0x828>)
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	f000 f948 	bl	80054ec <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800525c:	42c4      	cmn	r4, r0
}
 800525e:	bf14      	ite	ne
 8005260:	f04f 30ff 	movne.w	r0, #4294967295
 8005264:	4650      	moveq	r0, sl
 8005266:	b002      	add	sp, #8
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800526c:	f1ba 0f01 	cmp.w	sl, #1
 8005270:	4d30      	ldr	r5, [pc, #192]	; (8005334 <OTM8009A_Init+0x810>)
 8005272:	d1b8      	bne.n	80051e6 <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005274:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005276:	2300      	movs	r3, #0
 8005278:	f10d 0207 	add.w	r2, sp, #7
 800527c:	2136      	movs	r1, #54	; 0x36
 800527e:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005280:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005284:	f000 f932 	bl	80054ec <otm8009a_write_reg>
 8005288:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800528a:	2304      	movs	r3, #4
 800528c:	4a30      	ldr	r2, [pc, #192]	; (8005350 <OTM8009A_Init+0x82c>)
 800528e:	212a      	movs	r1, #42	; 0x2a
 8005290:	4638      	mov	r0, r7
 8005292:	f000 f92b 	bl	80054ec <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005296:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005298:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800529a:	2304      	movs	r3, #4
 800529c:	4a2d      	ldr	r2, [pc, #180]	; (8005354 <OTM8009A_Init+0x830>)
 800529e:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80052a0:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80052a2:	4638      	mov	r0, r7
 80052a4:	f000 f922 	bl	80054ec <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80052a8:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80052ac:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80052ae:	e79c      	b.n	80051ea <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80052b0:	464b      	mov	r3, r9
 80052b2:	4a29      	ldr	r2, [pc, #164]	; (8005358 <OTM8009A_Init+0x834>)
 80052b4:	e78c      	b.n	80051d0 <OTM8009A_Init+0x6ac>
 80052b6:	bf00      	nop
 80052b8:	0804ae4e 	.word	0x0804ae4e
 80052bc:	0804ad3c 	.word	0x0804ad3c
 80052c0:	0804ae4f 	.word	0x0804ae4f
 80052c4:	0804ad48 	.word	0x0804ad48
 80052c8:	0804ae50 	.word	0x0804ae50
 80052cc:	0804ad58 	.word	0x0804ad58
 80052d0:	0804ae52 	.word	0x0804ae52
 80052d4:	0804ad68 	.word	0x0804ad68
 80052d8:	0804ae53 	.word	0x0804ae53
 80052dc:	0804ad74 	.word	0x0804ad74
 80052e0:	0804ae32 	.word	0x0804ae32
 80052e4:	0804ad80 	.word	0x0804ad80
 80052e8:	0804ae51 	.word	0x0804ae51
 80052ec:	0804ad90 	.word	0x0804ad90
 80052f0:	0804ae4d 	.word	0x0804ae4d
 80052f4:	0804ada0 	.word	0x0804ada0
 80052f8:	0804adb0 	.word	0x0804adb0
 80052fc:	0804adbc 	.word	0x0804adbc
 8005300:	0804adcc 	.word	0x0804adcc
 8005304:	0804ae3d 	.word	0x0804ae3d
 8005308:	0804ae5e 	.word	0x0804ae5e
 800530c:	0804ae5f 	.word	0x0804ae5f
 8005310:	0804ae60 	.word	0x0804ae60
 8005314:	0804ae61 	.word	0x0804ae61
 8005318:	0804ae62 	.word	0x0804ae62
 800531c:	0804ae31 	.word	0x0804ae31
 8005320:	0804addc 	.word	0x0804addc
 8005324:	0804ade0 	.word	0x0804ade0
 8005328:	0804adf0 	.word	0x0804adf0
 800532c:	0804ae54 	.word	0x0804ae54
 8005330:	0804ae55 	.word	0x0804ae55
 8005334:	2400152c 	.word	0x2400152c
 8005338:	0804ae57 	.word	0x0804ae57
 800533c:	0804ae58 	.word	0x0804ae58
 8005340:	0804ae59 	.word	0x0804ae59
 8005344:	0804ae5a 	.word	0x0804ae5a
 8005348:	0804ae5b 	.word	0x0804ae5b
 800534c:	0804ae5c 	.word	0x0804ae5c
 8005350:	0804acf8 	.word	0x0804acf8
 8005354:	0804acfc 	.word	0x0804acfc
 8005358:	0804ae56 	.word	0x0804ae56

0800535c <OTM8009A_SetBrightness>:
{
 800535c:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800535e:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8005362:	4e0b      	ldr	r6, [pc, #44]	; (8005390 <OTM8009A_SetBrightness+0x34>)
{
 8005364:	b082      	sub	sp, #8
 8005366:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005368:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800536c:	2300      	movs	r3, #0
 800536e:	f10d 0207 	add.w	r2, sp, #7
 8005372:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005374:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8005376:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005378:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800537c:	f000 f8b6 	bl	80054ec <otm8009a_write_reg>
 8005380:	b918      	cbnz	r0, 800538a <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8005382:	4b04      	ldr	r3, [pc, #16]	; (8005394 <OTM8009A_SetBrightness+0x38>)
 8005384:	609d      	str	r5, [r3, #8]
}
 8005386:	b002      	add	sp, #8
 8005388:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 800538a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800538e:	e7fa      	b.n	8005386 <OTM8009A_SetBrightness+0x2a>
 8005390:	51eb851f 	.word	0x51eb851f
 8005394:	2400152c 	.word	0x2400152c

08005398 <OTM8009A_DisplayOn>:
{
 8005398:	b500      	push	{lr}
 800539a:	b083      	sub	sp, #12
  uint8_t display = 0;
 800539c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800539e:	2129      	movs	r1, #41	; 0x29
 80053a0:	3010      	adds	r0, #16
 80053a2:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80053a6:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80053aa:	f000 f89f 	bl	80054ec <otm8009a_write_reg>
 80053ae:	3800      	subs	r0, #0
 80053b0:	bf18      	it	ne
 80053b2:	2001      	movne	r0, #1
}
 80053b4:	4240      	negs	r0, r0
 80053b6:	b003      	add	sp, #12
 80053b8:	f85d fb04 	ldr.w	pc, [sp], #4

080053bc <OTM8009A_DisplayOff>:
{
 80053bc:	b500      	push	{lr}
 80053be:	b083      	sub	sp, #12
  uint8_t display = 0;
 80053c0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80053c2:	2128      	movs	r1, #40	; 0x28
 80053c4:	3010      	adds	r0, #16
 80053c6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80053ca:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80053ce:	f000 f88d 	bl	80054ec <otm8009a_write_reg>
 80053d2:	3800      	subs	r0, #0
 80053d4:	bf18      	it	ne
 80053d6:	2001      	movne	r0, #1
}
 80053d8:	4240      	negs	r0, r0
 80053da:	b003      	add	sp, #12
 80053dc:	f85d fb04 	ldr.w	pc, [sp], #4

080053e0 <OTM8009A_SetOrientation>:
{
 80053e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80053e2:	2360      	movs	r3, #96	; 0x60
{
 80053e4:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80053e6:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80053e8:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80053ea:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80053ee:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80053f2:	d83e      	bhi.n	8005472 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80053f4:	d020      	beq.n	8005438 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80053f6:	f100 0510 	add.w	r5, r0, #16
 80053fa:	4633      	mov	r3, r6
 80053fc:	f10d 0207 	add.w	r2, sp, #7
 8005400:	2136      	movs	r1, #54	; 0x36
 8005402:	4628      	mov	r0, r5
 8005404:	f000 f872 	bl	80054ec <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005408:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800540a:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <OTM8009A_SetOrientation+0x98>)
 800540e:	212a      	movs	r1, #42	; 0x2a
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f86b 	bl	80054ec <otm8009a_write_reg>
 8005416:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005418:	2304      	movs	r3, #4
 800541a:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800541c:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <OTM8009A_SetOrientation+0x9c>)
 8005420:	212b      	movs	r1, #43	; 0x2b
 8005422:	f000 f863 	bl	80054ec <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005426:	4b16      	ldr	r3, [pc, #88]	; (8005480 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005428:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800542a:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 800542c:	3800      	subs	r0, #0
 800542e:	bf18      	it	ne
 8005430:	2001      	movne	r0, #1
 8005432:	4240      	negs	r0, r0
}
 8005434:	b003      	add	sp, #12
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005438:	f100 0510 	add.w	r5, r0, #16
 800543c:	4633      	mov	r3, r6
 800543e:	460f      	mov	r7, r1
 8005440:	f10d 0206 	add.w	r2, sp, #6
 8005444:	2136      	movs	r1, #54	; 0x36
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f850 	bl	80054ec <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800544c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800544e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005450:	4a09      	ldr	r2, [pc, #36]	; (8005478 <OTM8009A_SetOrientation+0x98>)
 8005452:	212a      	movs	r1, #42	; 0x2a
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f849 	bl	80054ec <otm8009a_write_reg>
 800545a:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800545c:	2304      	movs	r3, #4
 800545e:	4628      	mov	r0, r5
 8005460:	4a06      	ldr	r2, [pc, #24]	; (800547c <OTM8009A_SetOrientation+0x9c>)
 8005462:	212b      	movs	r1, #43	; 0x2b
 8005464:	f000 f842 	bl	80054ec <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005468:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800546c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800546e:	601f      	str	r7, [r3, #0]
 8005470:	e7dc      	b.n	800542c <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005476:	e7dd      	b.n	8005434 <OTM8009A_SetOrientation+0x54>
 8005478:	0804acf8 	.word	0x0804acf8
 800547c:	0804acfc 	.word	0x0804acfc
 8005480:	2400152c 	.word	0x2400152c

08005484 <OTM8009A_ReadID>:
{ 
 8005484:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8005486:	3010      	adds	r0, #16
 8005488:	21da      	movs	r1, #218	; 0xda
{ 
 800548a:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800548c:	2300      	movs	r3, #0
 800548e:	f000 f825 	bl	80054dc <otm8009a_read_reg>
 8005492:	3800      	subs	r0, #0
 8005494:	bf18      	it	ne
 8005496:	2001      	movne	r0, #1
}  
 8005498:	4240      	negs	r0, r0
 800549a:	bd08      	pop	{r3, pc}

0800549c <OTM8009A_DrawVLine>:
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop

080054a4 <OTM8009A_GetPixel>:
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop

080054ac <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80054ac:	b178      	cbz	r0, 80054ce <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054ae:	684a      	ldr	r2, [r1, #4]
 80054b0:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 80054b2:	2000      	movs	r0, #0
{
 80054b4:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 80054b6:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80054ba:	4906      	ldr	r1, [pc, #24]	; (80054d4 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054bc:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80054be:	4a06      	ldr	r2, [pc, #24]	; (80054d8 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80054c0:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80054c4:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 80054c8:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80054ca:	611a      	str	r2, [r3, #16]
}
 80054cc:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80054d2:	4770      	bx	lr
 80054d4:	08004b05 	.word	0x08004b05
 80054d8:	08004b15 	.word	0x08004b15

080054dc <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80054dc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80054de:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80054e2:	46a4      	mov	ip, r4
}
 80054e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80054e8:	4760      	bx	ip
 80054ea:	bf00      	nop

080054ec <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80054ec:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80054ee:	6804      	ldr	r4, [r0, #0]
 80054f0:	6880      	ldr	r0, [r0, #8]
 80054f2:	46a4      	mov	ip, r4
}
 80054f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80054f8:	4760      	bx	ip
 80054fa:	bf00      	nop

080054fc <BSP_AUDIO_OUT_IRQHandler>:
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
  if (Instance == 0U)
 80054fc:	b100      	cbz	r0, 8005500 <BSP_AUDIO_OUT_IRQHandler+0x4>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
  }
}
 80054fe:	4770      	bx	lr
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <BSP_AUDIO_OUT_IRQHandler+0x10>)
 8005502:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005506:	f001 bd4b 	b.w	8006fa0 <HAL_DMA_IRQHandler>
 800550a:	bf00      	nop
 800550c:	240119ac 	.word	0x240119ac

08005510 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8005510:	f000 be8e 	b.w	8006230 <HAL_GetTick>

08005514 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005514:	b910      	cbnz	r0, 800551c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005516:	4b03      	ldr	r3, [pc, #12]	; (8005524 <BSP_LCD_SetActiveLayer+0x10>)
 8005518:	6099      	str	r1, [r3, #8]
 800551a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800551c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	24011aec 	.word	0x24011aec

08005528 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005528:	b918      	cbnz	r0, 8005532 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800552a:	4b03      	ldr	r3, [pc, #12]	; (8005538 <BSP_LCD_GetPixelFormat+0x10>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005532:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005536:	4770      	bx	lr
 8005538:	24011aec 	.word	0x24011aec

0800553c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800553c:	b948      	cbnz	r0, 8005552 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <BSP_LCD_GetXSize+0x1c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	b11b      	cbz	r3, 800554e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <BSP_LCD_GetXSize+0x20>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800554e:	4618      	mov	r0, r3
  }

  return ret;
}
 8005550:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005552:	f06f 0001 	mvn.w	r0, #1
 8005556:	4770      	bx	lr
 8005558:	2400153c 	.word	0x2400153c
 800555c:	24011aec 	.word	0x24011aec

08005560 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005560:	b948      	cbnz	r0, 8005576 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <BSP_LCD_GetYSize+0x1c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005568:	b11b      	cbz	r3, 8005572 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <BSP_LCD_GetYSize+0x20>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	600b      	str	r3, [r1, #0]
 8005570:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8005572:	4618      	mov	r0, r3
  }

  return ret;
}
 8005574:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005576:	f06f 0001 	mvn.w	r0, #1
 800557a:	4770      	bx	lr
 800557c:	2400153c 	.word	0x2400153c
 8005580:	24011aec 	.word	0x24011aec

08005584 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800558c:	b39c      	cbz	r4, 80055f6 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800558e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005592:	4d1a      	ldr	r5, [pc, #104]	; (80055fc <BSP_LCD_FillRGBRect+0x78>)
 8005594:	eb04 0802 	add.w	r8, r4, r2
 8005598:	eb0b 0e01 	add.w	lr, fp, r1
 800559c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80055a0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005600 <BSP_LCD_FillRGBRect+0x7c>
 80055a4:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 80055a6:	f1bb 0f00 	cmp.w	fp, #0
 80055aa:	d021      	beq.n	80055f0 <BSP_LCD_FillRGBRect+0x6c>
 80055ac:	460c      	mov	r4, r1
 80055ae:	e00a      	b.n	80055c6 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055b0:	682e      	ldr	r6, [r5, #0]
 80055b2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80055b4:	fb06 4602 	mla	r6, r6, r2, r4
 80055b8:	3401      	adds	r4, #1
 80055ba:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80055be:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 80055c0:	6928      	ldr	r0, [r5, #16]
 80055c2:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80055c4:	d014      	beq.n	80055f0 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055c6:	68a8      	ldr	r0, [r5, #8]
 80055c8:	f8d3 9000 	ldr.w	r9, [r3]
 80055cc:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055d0:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055d4:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d0ea      	beq.n	80055b0 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055da:	682e      	ldr	r6, [r5, #0]
 80055dc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80055de:	fb06 4602 	mla	r6, r6, r2, r4
 80055e2:	3401      	adds	r4, #1
 80055e4:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 80055e8:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 80055ea:	6928      	ldr	r0, [r5, #16]
 80055ec:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80055ee:	d1ea      	bne.n	80055c6 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 80055f0:	3201      	adds	r2, #1
 80055f2:	4542      	cmp	r2, r8
 80055f4:	d1d7      	bne.n	80055a6 <BSP_LCD_FillRGBRect+0x22>
}
 80055f6:	2000      	movs	r0, #0
 80055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	24011aec 	.word	0x24011aec
 8005600:	24011a44 	.word	0x24011a44

08005604 <BSP_LCD_ReadPixel>:
{
 8005604:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005606:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800560a:	4e10      	ldr	r6, [pc, #64]	; (800564c <BSP_LCD_ReadPixel+0x48>)
 800560c:	4f10      	ldr	r7, [pc, #64]	; (8005650 <BSP_LCD_ReadPixel+0x4c>)
 800560e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005612:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005616:	0080      	lsls	r0, r0, #2
 8005618:	68ac      	ldr	r4, [r5, #8]
 800561a:	fb0c 7404 	mla	r4, ip, r4, r7
 800561e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005620:	b94d      	cbnz	r5, 8005636 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005622:	5830      	ldr	r0, [r6, r0]
 8005624:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8005626:	fb00 1202 	mla	r2, r0, r2, r1
}
 800562a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800562c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8005630:	bcf0      	pop	{r4, r5, r6, r7}
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005636:	5835      	ldr	r5, [r6, r0]
 8005638:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800563a:	fb05 1202 	mla	r2, r5, r2, r1
 800563e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8005642:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005644:	b292      	uxth	r2, r2
}
 8005646:	bcf0      	pop	{r4, r5, r6, r7}
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	4770      	bx	lr
 800564c:	24011aec 	.word	0x24011aec
 8005650:	24011a44 	.word	0x24011a44

08005654 <BSP_LCD_WritePixel>:
{
 8005654:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005656:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800565a:	4e0f      	ldr	r6, [pc, #60]	; (8005698 <BSP_LCD_WritePixel+0x44>)
 800565c:	4f0f      	ldr	r7, [pc, #60]	; (800569c <BSP_LCD_WritePixel+0x48>)
 800565e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005662:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005666:	0080      	lsls	r0, r0, #2
 8005668:	68ac      	ldr	r4, [r5, #8]
 800566a:	fb0c 7404 	mla	r4, ip, r4, r7
 800566e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005670:	b945      	cbnz	r5, 8005684 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005672:	5830      	ldr	r0, [r6, r0]
 8005674:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8005676:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 800567a:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800567c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8005680:	bcf0      	pop	{r4, r5, r6, r7}
 8005682:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005684:	5835      	ldr	r5, [r6, r0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800568a:	fb05 1202 	mla	r2, r5, r2, r1
}
 800568e:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005690:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8005694:	2000      	movs	r0, #0
 8005696:	4770      	bx	lr
 8005698:	24011aec 	.word	0x24011aec
 800569c:	24011a44 	.word	0x24011a44

080056a0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80056a0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80056a2:	2406      	movs	r4, #6
{
 80056a4:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80056a6:	9101      	str	r1, [sp, #4]
 80056a8:	4601      	mov	r1, r0
 80056aa:	9202      	str	r2, [sp, #8]
 80056ac:	9400      	str	r4, [sp, #0]
 80056ae:	4805      	ldr	r0, [pc, #20]	; (80056c4 <DSI_IO_Read+0x24>)
 80056b0:	f002 fcee 	bl	8008090 <HAL_DSI_Read>
 80056b4:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80056b6:	bf14      	ite	ne
 80056b8:	f06f 0007 	mvnne.w	r0, #7
 80056bc:	2000      	moveq	r0, #0
 80056be:	b004      	add	sp, #16
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	24011b08 	.word	0x24011b08

080056c8 <BSP_LCD_DrawBitmap>:
{
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056cc:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80056d0:	4e4f      	ldr	r6, [pc, #316]	; (8005810 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056d2:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056d4:	f04f 0934 	mov.w	r9, #52	; 0x34
 80056d8:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80056dc:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 80056e0:	f8df e138 	ldr.w	lr, [pc, #312]	; 800581c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056e4:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056e6:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056ea:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056ee:	68b9      	ldr	r1, [r7, #8]
{
 80056f0:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80056f2:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056f4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056f8:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80056fc:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005700:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005704:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005706:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800570a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800570e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005712:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005714:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005718:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800571c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005720:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005722:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005726:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800572a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800572e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005730:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8005734:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005736:	4465      	add	r5, ip
 8005738:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800573a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800573c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800573e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8005742:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005746:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005748:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 800574c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800574e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005752:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005754:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8005758:	d957      	bls.n	800580a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800575a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800575e:	2c08      	cmp	r4, #8
 8005760:	bf34      	ite	cc
 8005762:	f04f 0b02 	movcc.w	fp, #2
 8005766:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800576a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800576e:	9c03      	ldr	r4, [sp, #12]
 8005770:	f10a 35ff 	add.w	r5, sl, #4294967295
 8005774:	fb04 f909 	mul.w	r9, r4, r9
 8005778:	fb09 1505 	mla	r5, r9, r5, r1
 800577c:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800577e:	f1ba 0f00 	cmp.w	sl, #0
 8005782:	d03e      	beq.n	8005802 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005784:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8005786:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800578a:	2700      	movs	r7, #0
 800578c:	4c21      	ldr	r4, [pc, #132]	; (8005814 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800578e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005792:	e006      	b.n	80057a2 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005794:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8005796:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005798:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800579a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800579c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 80057a0:	d02f      	beq.n	8005802 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057a2:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 80057a4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80057a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80057aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80057ae:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 80057b0:	4919      	ldr	r1, [pc, #100]	; (8005818 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80057b2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 80057b6:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80057ba:	bf18      	it	ne
 80057bc:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80057be:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80057c0:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80057c2:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80057c6:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80057ca:	4812      	ldr	r0, [pc, #72]	; (8005814 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 80057cc:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80057d0:	f001 ff92 	bl	80076f8 <HAL_DMA2D_Init>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1dd      	bne.n	8005794 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80057d8:	2101      	movs	r1, #1
 80057da:	480e      	ldr	r0, [pc, #56]	; (8005814 <BSP_LCD_DrawBitmap+0x14c>)
 80057dc:	f002 f8ae 	bl	800793c <HAL_DMA2D_ConfigLayer>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1d7      	bne.n	8005794 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80057e4:	2001      	movs	r0, #1
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	4642      	mov	r2, r8
 80057ea:	4629      	mov	r1, r5
 80057ec:	9000      	str	r0, [sp, #0]
 80057ee:	4809      	ldr	r0, [pc, #36]	; (8005814 <BSP_LCD_DrawBitmap+0x14c>)
 80057f0:	f001 ffc4 	bl	800777c <HAL_DMA2D_Start>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1cd      	bne.n	8005794 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80057f8:	2132      	movs	r1, #50	; 0x32
 80057fa:	4806      	ldr	r0, [pc, #24]	; (8005814 <BSP_LCD_DrawBitmap+0x14c>)
 80057fc:	f002 f818 	bl	8007830 <HAL_DMA2D_PollForTransfer>
 8005800:	e7c8      	b.n	8005794 <BSP_LCD_DrawBitmap+0xcc>
}
 8005802:	2000      	movs	r0, #0
 8005804:	b005      	add	sp, #20
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800580a:	f04f 0b00 	mov.w	fp, #0
 800580e:	e7ac      	b.n	800576a <BSP_LCD_DrawBitmap+0xa2>
 8005810:	24011aec 	.word	0x24011aec
 8005814:	24011b24 	.word	0x24011b24
 8005818:	52001000 	.word	0x52001000
 800581c:	24011a44 	.word	0x24011a44

08005820 <LL_FillBuffer>:
{
 8005820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005824:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005828:	4c28      	ldr	r4, [pc, #160]	; (80058cc <LL_FillBuffer+0xac>)
{
 800582a:	4617      	mov	r7, r2
 800582c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 800582e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8005832:	4698      	mov	r8, r3
 8005834:	460e      	mov	r6, r1
 8005836:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005838:	68c2      	ldr	r2, [r0, #12]
{
 800583a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 800583c:	2a02      	cmp	r2, #2
 800583e:	d00f      	beq.n	8005860 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005840:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8005842:	4c23      	ldr	r4, [pc, #140]	; (80058d0 <LL_FillBuffer+0xb0>)
 8005844:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8005848:	4922      	ldr	r1, [pc, #136]	; (80058d4 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800584a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800584c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800584e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8005850:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005854:	f001 ff50 	bl	80076f8 <HAL_DMA2D_Init>
 8005858:	b308      	cbz	r0, 800589e <LL_FillBuffer+0x7e>
}
 800585a:	b002      	add	sp, #8
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8005860:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8005864:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8005868:	f005 041f 	and.w	r4, r5, #31
 800586c:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8005870:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8005874:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005878:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800587c:	3521      	adds	r5, #33	; 0x21
 800587e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8005882:	3117      	adds	r1, #23
 8005884:	09ad      	lsrs	r5, r5, #6
 8005886:	0989      	lsrs	r1, r1, #6
 8005888:	022d      	lsls	r5, r5, #8
 800588a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800588e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005892:	3017      	adds	r0, #23
 8005894:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005898:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800589c:	e7d1      	b.n	8005842 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800589e:	2101      	movs	r1, #1
 80058a0:	4620      	mov	r0, r4
 80058a2:	f002 f84b 	bl	800793c <HAL_DMA2D_ConfigLayer>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d1d7      	bne.n	800585a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80058aa:	463b      	mov	r3, r7
 80058ac:	4632      	mov	r2, r6
 80058ae:	4629      	mov	r1, r5
 80058b0:	4620      	mov	r0, r4
 80058b2:	f8cd 8000 	str.w	r8, [sp]
 80058b6:	f001 ff61 	bl	800777c <HAL_DMA2D_Start>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d1cd      	bne.n	800585a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80058be:	4620      	mov	r0, r4
 80058c0:	2119      	movs	r1, #25
}
 80058c2:	b002      	add	sp, #8
 80058c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80058c8:	f001 bfb2 	b.w	8007830 <HAL_DMA2D_PollForTransfer>
 80058cc:	24011aec 	.word	0x24011aec
 80058d0:	24011b24 	.word	0x24011b24
 80058d4:	52001000 	.word	0x52001000

080058d8 <BSP_LCD_DrawHLine>:
{
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80058dc:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80058e0:	4f12      	ldr	r7, [pc, #72]	; (800592c <BSP_LCD_DrawHLine+0x54>)
{
 80058e2:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80058e4:	f8df e048 	ldr.w	lr, [pc, #72]	; 8005930 <BSP_LCD_DrawHLine+0x58>
 80058e8:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80058ec:	f04f 0834 	mov.w	r8, #52	; 0x34
 80058f0:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80058f4:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80058f8:	688d      	ldr	r5, [r1, #8]
{
 80058fa:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80058fc:	690e      	ldr	r6, [r1, #16]
 80058fe:	fb02 4207 	mla	r2, r2, r7, r4
 8005902:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005906:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005908:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800590a:	bf38      	it	cc
 800590c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800590e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005910:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005914:	9a08      	ldr	r2, [sp, #32]
 8005916:	9400      	str	r4, [sp, #0]
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	461a      	mov	r2, r3
 800591c:	2301      	movs	r3, #1
 800591e:	f7ff ff7f 	bl	8005820 <LL_FillBuffer>
}
 8005922:	4620      	mov	r0, r4
 8005924:	b002      	add	sp, #8
 8005926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592a:	bf00      	nop
 800592c:	24011aec 	.word	0x24011aec
 8005930:	24011a44 	.word	0x24011a44

08005934 <BSP_LCD_DrawVLine>:
{
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005938:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800593c:	4c11      	ldr	r4, [pc, #68]	; (8005984 <BSP_LCD_DrawVLine+0x50>)
 800593e:	4d12      	ldr	r5, [pc, #72]	; (8005988 <BSP_LCD_DrawVLine+0x54>)
 8005940:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005944:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005948:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800594c:	eb02 0c03 	add.w	ip, r2, r3
{
 8005950:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005952:	68be      	ldr	r6, [r7, #8]
 8005954:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005958:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800595a:	fb08 5606 	mla	r6, r8, r6, r5
 800595e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005960:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005962:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005964:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005966:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800596a:	bf88      	it	hi
 800596c:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800596e:	9a08      	ldr	r2, [sp, #32]
 8005970:	e9cd 4200 	strd	r4, r2, [sp]
 8005974:	2201      	movs	r2, #1
 8005976:	f7ff ff53 	bl	8005820 <LL_FillBuffer>
}
 800597a:	2000      	movs	r0, #0
 800597c:	b002      	add	sp, #8
 800597e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005982:	bf00      	nop
 8005984:	24011aec 	.word	0x24011aec
 8005988:	24011a44 	.word	0x24011a44

0800598c <BSP_LCD_FillRect>:
{
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800598e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005992:	4f0e      	ldr	r7, [pc, #56]	; (80059cc <BSP_LCD_FillRect+0x40>)
 8005994:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005998:	4d0d      	ldr	r5, [pc, #52]	; (80059d0 <BSP_LCD_FillRect+0x44>)
 800599a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800599e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 80059a2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059a4:	68b7      	ldr	r7, [r6, #8]
 80059a6:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80059aa:	1ae4      	subs	r4, r4, r3
 80059ac:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059ae:	fb0e 5507 	mla	r5, lr, r7, r5
 80059b2:	6937      	ldr	r7, [r6, #16]
{
 80059b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059b6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80059b8:	9400      	str	r4, [sp, #0]
 80059ba:	fb07 3101 	mla	r1, r7, r1, r3
 80059be:	9b08      	ldr	r3, [sp, #32]
 80059c0:	9601      	str	r6, [sp, #4]
 80059c2:	f7ff ff2d 	bl	8005820 <LL_FillBuffer>
}
 80059c6:	2000      	movs	r0, #0
 80059c8:	b003      	add	sp, #12
 80059ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059cc:	24011aec 	.word	0x24011aec
 80059d0:	24011a44 	.word	0x24011a44

080059d4 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 80059d6:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 80059d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80059dc:	f042 0208 	orr.w	r2, r2, #8
 80059e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80059e4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80059e8:	f002 0208 	and.w	r2, r2, #8
 80059ec:	9201      	str	r2, [sp, #4]
 80059ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 80059f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059f4:	f042 0208 	orr.w	r2, r2, #8
 80059f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80059fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a00:	f022 0208 	bic.w	r2, r2, #8
 8005a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005a08:	b002      	add	sp, #8
 8005a0a:	4770      	bx	lr
 8005a0c:	58024400 	.word	0x58024400

08005a10 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005a12:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005a18:	f042 0210 	orr.w	r2, r2, #16
 8005a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005a20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005a24:	f002 0210 	and.w	r2, r2, #16
 8005a28:	9201      	str	r2, [sp, #4]
 8005a2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005a2c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a2e:	f042 0210 	orr.w	r2, r2, #16
 8005a32:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005a34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a36:	f022 0210 	bic.w	r2, r2, #16
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	4770      	bx	lr
 8005a40:	58024400 	.word	0x58024400

08005a44 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8005a46:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8005a48:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a4c:	f042 0210 	orr.w	r2, r2, #16
 8005a50:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005a54:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a58:	f002 0210 	and.w	r2, r2, #16
 8005a5c:	9201      	str	r2, [sp, #4]
 8005a5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8005a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a64:	f042 0210 	orr.w	r2, r2, #16
 8005a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8005a6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a70:	f022 0210 	bic.w	r2, r2, #16
 8005a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005a78:	b002      	add	sp, #8
 8005a7a:	4770      	bx	lr
 8005a7c:	58024400 	.word	0x58024400

08005a80 <DSI_IO_Write>:
  if(Size <= 1U)
 8005a80:	2b01      	cmp	r3, #1
{
 8005a82:	b530      	push	{r4, r5, lr}
 8005a84:	460d      	mov	r5, r1
 8005a86:	b083      	sub	sp, #12
 8005a88:	4601      	mov	r1, r0
  if(Size <= 1U)
 8005a8a:	d909      	bls.n	8005aa0 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8005a8c:	480a      	ldr	r0, [pc, #40]	; (8005ab8 <DSI_IO_Write+0x38>)
 8005a8e:	e9cd 5200 	strd	r5, r2, [sp]
 8005a92:	2239      	movs	r2, #57	; 0x39
 8005a94:	f002 fa90 	bl	8007fb8 <HAL_DSI_LongWrite>
 8005a98:	b958      	cbnz	r0, 8005ab2 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8005a9a:	2000      	movs	r0, #0
}
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005aa0:	5cd0      	ldrb	r0, [r2, r3]
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	2215      	movs	r2, #21
 8005aa6:	9000      	str	r0, [sp, #0]
 8005aa8:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <DSI_IO_Write+0x38>)
 8005aaa:	f002 fa71 	bl	8007f90 <HAL_DSI_ShortWrite>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d0f3      	beq.n	8005a9a <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005ab2:	f06f 0007 	mvn.w	r0, #7
 8005ab6:	e7f1      	b.n	8005a9c <DSI_IO_Write+0x1c>
 8005ab8:	24011b08 	.word	0x24011b08

08005abc <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <BSP_LCD_Reset+0x5c>)
 8005abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005ac8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8005acc:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8005ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005ad2:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005ad4:	4c11      	ldr	r4, [pc, #68]	; (8005b1c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005ad6:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005adc:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005ae6:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae8:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005aea:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005aee:	f002 fb57 	bl	80081a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005af2:	4629      	mov	r1, r5
 8005af4:	4620      	mov	r0, r4
 8005af6:	2200      	movs	r2, #0
 8005af8:	f002 fc70 	bl	80083dc <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8005afc:	2014      	movs	r0, #20
 8005afe:	f000 fb9d 	bl	800623c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005b02:	4632      	mov	r2, r6
 8005b04:	4629      	mov	r1, r5
 8005b06:	4620      	mov	r0, r4
 8005b08:	f002 fc68 	bl	80083dc <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8005b0c:	200a      	movs	r0, #10
 8005b0e:	f000 fb95 	bl	800623c <HAL_Delay>
}
 8005b12:	b007      	add	sp, #28
 8005b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	58021800 	.word	0x58021800

08005b20 <MX_DSIHOST_DSI_Init>:
{
 8005b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005b24:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005b28:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8005b2a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8005b2c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005b30:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005b32:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005b36:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8005b3a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005b3c:	60c6      	str	r6, [r0, #12]
{
 8005b3e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005b40:	4669      	mov	r1, sp
{
 8005b42:	4604      	mov	r4, r0
 8005b44:	4690      	mov	r8, r2
 8005b46:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005b48:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8005b4a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005b4e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005b52:	f001 ff85 	bl	8007a60 <HAL_DSI_Init>
 8005b56:	b118      	cbz	r0, 8005b60 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005b58:	4630      	mov	r0, r6
}
 8005b5a:	b01e      	add	sp, #120	; 0x78
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <MX_DSIHOST_DSI_Init+0xd0>)
 8005b66:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005b68:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b6a:	fb03 2207 	mla	r2, r3, r7, r2
 8005b6e:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005b70:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005b72:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b74:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005b78:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005b7c:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005b80:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b84:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005b86:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005b88:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005b8a:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8005b8c:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005b8e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005b92:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005b96:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8005b9a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b9c:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005ba2:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005ba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005ba8:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8005baa:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8005bae:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005bb2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005bb6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005bba:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8005bbc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005bc0:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005bc2:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005bc6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005bca:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005bce:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005bd0:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005bd4:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005bd8:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005bdc:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005be0:	f002 f876 	bl	8007cd0 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005be4:	3800      	subs	r0, #0
 8005be6:	bf18      	it	ne
 8005be8:	2001      	movne	r0, #1
}
 8005bea:	b01e      	add	sp, #120	; 0x78
 8005bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf0:	0042c1d8 	.word	0x0042c1d8
 8005bf4:	4c751ce3 	.word	0x4c751ce3

08005bf8 <MX_LTDC_Init>:
{
 8005bf8:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8005bfa:	4d0e      	ldr	r5, [pc, #56]	; (8005c34 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005bfc:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005c00:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005c02:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005c04:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005c06:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005c08:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005c0a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005c0c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005c0e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005c10:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005c12:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005c14:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005c16:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005c18:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005c1a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8005c1c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8005c1e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005c22:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005c24:	6181      	str	r1, [r0, #24]
}
 8005c26:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005c28:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005c2c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005c30:	f002 bc92 	b.w	8008558 <HAL_LTDC_Init>
 8005c34:	50001000 	.word	0x50001000

08005c38 <MX_LTDC_ConfigLayer>:
{
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8005c3e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005c40:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005c42:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005c44:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005c46:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005c48:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8005c4c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8005c4e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005c50:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005c54:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005c58:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8005c5c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005c5e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005c60:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005c62:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005c64:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005c66:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005c68:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8005c6a:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005c6c:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8005c6e:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005c72:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005c76:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005c78:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005c7a:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005c7c:	f002 fd46 	bl	800870c <HAL_LTDC_ConfigLayer>
}
 8005c80:	b00f      	add	sp, #60	; 0x3c
 8005c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c84 <MX_LTDC_ClockConfig>:
{
 8005c84:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005c86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005c8a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005c8c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005c8e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005c94:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005c96:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005c98:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005c9a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005c9c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005c9e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005ca0:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005ca2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005ca6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005caa:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005cae:	f003 fc2f 	bl	8009510 <HAL_RCCEx_PeriphCLKConfig>
}
 8005cb2:	b031      	add	sp, #196	; 0xc4
 8005cb4:	bd30      	pop	{r4, r5, pc}
 8005cb6:	bf00      	nop

08005cb8 <BSP_LCD_InitEx>:
{
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005cbc:	2901      	cmp	r1, #1
{
 8005cbe:	b093      	sub	sp, #76	; 0x4c
 8005cc0:	461d      	mov	r5, r3
 8005cc2:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005cc6:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005cc8:	f200 80f2 	bhi.w	8005eb0 <BSP_LCD_InitEx+0x1f8>
 8005ccc:	1e03      	subs	r3, r0, #0
 8005cce:	bf18      	it	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f040 80ec 	bne.w	8005eb0 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005cd8:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005cda:	2901      	cmp	r1, #1
 8005cdc:	f200 80e8 	bhi.w	8005eb0 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005ce0:	2a02      	cmp	r2, #2
 8005ce2:	f000 80ab 	beq.w	8005e3c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005ce6:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005ce8:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005cea:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005cec:	4c72      	ldr	r4, [pc, #456]	; (8005eb8 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005cee:	2000      	movs	r0, #0
 8005cf0:	4f72      	ldr	r7, [pc, #456]	; (8005ebc <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005cf6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005cfa:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005cfc:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005d00:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005d02:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005d06:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005d08:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005d0c:	f7ff fed6 	bl	8005abc <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d10:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005d14:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005d16:	a90c      	add	r1, sp, #48	; 0x30
 8005d18:	4869      	ldr	r0, [pc, #420]	; (8005ec0 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d1a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8005d1e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005d22:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005d26:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d2a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005d2e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005d30:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d32:	f8cd c014 	str.w	ip, [sp, #20]
 8005d36:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d3a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005d3e:	f002 fa2f 	bl	80081a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005d42:	2201      	movs	r2, #1
 8005d44:	4649      	mov	r1, r9
 8005d46:	485e      	ldr	r0, [pc, #376]	; (8005ec0 <BSP_LCD_InitEx+0x208>)
 8005d48:	f002 fb48 	bl	80083dc <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8005d4c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005d50:	a90c      	add	r1, sp, #48	; 0x30
 8005d52:	485b      	ldr	r0, [pc, #364]	; (8005ec0 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005d54:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005d58:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005ef0 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8005d5c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005d60:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005d64:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005d66:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d6a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005d6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005d72:	9406      	str	r4, [sp, #24]
 8005d74:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005d76:	f002 fa13 	bl	80081a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	4850      	ldr	r0, [pc, #320]	; (8005ec0 <BSP_LCD_InitEx+0x208>)
 8005d80:	f002 fb2c 	bl	80083dc <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005d84:	4632      	mov	r2, r6
 8005d86:	210f      	movs	r1, #15
 8005d88:	2058      	movs	r0, #88	; 0x58
 8005d8a:	f001 f85f 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005d8e:	2058      	movs	r0, #88	; 0x58
 8005d90:	f001 f896 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005d94:	4632      	mov	r2, r6
 8005d96:	210f      	movs	r1, #15
 8005d98:	205a      	movs	r0, #90	; 0x5a
 8005d9a:	f001 f857 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005d9e:	205a      	movs	r0, #90	; 0x5a
 8005da0:	f001 f88e 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005da4:	4632      	mov	r2, r6
 8005da6:	210f      	movs	r1, #15
 8005da8:	207b      	movs	r0, #123	; 0x7b
 8005daa:	f001 f84f 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005dae:	207b      	movs	r0, #123	; 0x7b
 8005db0:	f001 f886 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005db4:	4c43      	ldr	r4, [pc, #268]	; (8005ec4 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005db6:	4844      	ldr	r0, [pc, #272]	; (8005ec8 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005db8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005dbc:	4943      	ldr	r1, [pc, #268]	; (8005ecc <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005dbe:	4e44      	ldr	r6, [pc, #272]	; (8005ed0 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005dc0:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005dc2:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005dc4:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005dc8:	f7ff fe04 	bl	80059d4 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	4282      	cmp	r2, r0
 8005dd4:	d03a      	beq.n	8005e4c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005dd6:	680a      	ldr	r2, [r1, #0]
 8005dd8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005ddc:	d031      	beq.n	8005e42 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005dde:	4642      	mov	r2, r8
 8005de0:	4629      	mov	r1, r5
 8005de2:	483a      	ldr	r0, [pc, #232]	; (8005ecc <BSP_LCD_InitEx+0x214>)
 8005de4:	f7ff fe9c 	bl	8005b20 <MX_DSIHOST_DSI_Init>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d15c      	bne.n	8005ea6 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005dec:	4835      	ldr	r0, [pc, #212]	; (8005ec4 <BSP_LCD_InitEx+0x20c>)
 8005dee:	f7ff ff49 	bl	8005c84 <MX_LTDC_ClockConfig>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d157      	bne.n	8005ea6 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005df6:	4642      	mov	r2, r8
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4832      	ldr	r0, [pc, #200]	; (8005ec4 <BSP_LCD_InitEx+0x20c>)
 8005dfc:	f7ff fefc 	bl	8005bf8 <MX_LTDC_Init>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d150      	bne.n	8005ea6 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005e04:	f000 f8b2 	bl	8005f6c <BSP_SDRAM_Init>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d14c      	bne.n	8005ea6 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005e0c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005e0e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e12:	4601      	mov	r1, r0
      config.X0          = 0;
 8005e14:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e16:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005e18:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8005e1c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e20:	4828      	ldr	r0, [pc, #160]	; (8005ec4 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005e22:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e26:	f7ff ff07 	bl	8005c38 <MX_LTDC_ConfigLayer>
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	b190      	cbz	r0, 8005e54 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005e2e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005e32:	2301      	movs	r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]
}
 8005e36:	b013      	add	sp, #76	; 0x4c
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8005e3c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8005e3e:	9201      	str	r2, [sp, #4]
 8005e40:	e754      	b.n	8005cec <BSP_LCD_InitEx+0x34>
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	f7ff fdfe 	bl	8005a44 <DSI_MspInit.part.0>
 8005e48:	9b02      	ldr	r3, [sp, #8]
 8005e4a:	e7c8      	b.n	8005dde <BSP_LCD_InitEx+0x126>
 8005e4c:	f7ff fde0 	bl	8005a10 <DMA2D_MspInit.part.0>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	e7c0      	b.n	8005dd6 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005e54:	481d      	ldr	r0, [pc, #116]	; (8005ecc <BSP_LCD_InitEx+0x214>)
 8005e56:	f002 f873 	bl	8007f40 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	481b      	ldr	r0, [pc, #108]	; (8005ecc <BSP_LCD_InitEx+0x214>)
 8005e5e:	f002 f85b 	bl	8007f18 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005e64:	4d1c      	ldr	r5, [pc, #112]	; (8005ed8 <BSP_LCD_InitEx+0x220>)
 8005e66:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005e68:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8005e6a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005e6c:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8005e6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005e70:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005e74:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005e78:	f7ff fb18 	bl	80054ac <OTM8009A_RegisterBusIO>
 8005e7c:	b980      	cbnz	r0, 8005ea0 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005e7e:	4c19      	ldr	r4, [pc, #100]	; (8005ee4 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005e80:	4628      	mov	r0, r5
 8005e82:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005e84:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005e86:	f7ff fafd 	bl	8005484 <OTM8009A_ReadID>
 8005e8a:	b948      	cbnz	r0, 8005ea0 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005e8c:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <BSP_LCD_InitEx+0x230>)
 8005e8e:	4d17      	ldr	r5, [pc, #92]	; (8005eec <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	9a03      	ldr	r2, [sp, #12]
 8005e94:	9901      	ldr	r1, [sp, #4]
 8005e96:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005e98:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005e9a:	47a0      	blx	r4
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0c8      	beq.n	8005e32 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ea0:	f06f 0006 	mvn.w	r0, #6
 8005ea4:	e7c5      	b.n	8005e32 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ea6:	f06f 0003 	mvn.w	r0, #3
}
 8005eaa:	b013      	add	sp, #76	; 0x4c
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005eb0:	f06f 0001 	mvn.w	r0, #1
 8005eb4:	e7bf      	b.n	8005e36 <BSP_LCD_InitEx+0x17e>
 8005eb6:	bf00      	nop
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	24011aec 	.word	0x24011aec
 8005ec0:	58022400 	.word	0x58022400
 8005ec4:	24011a44 	.word	0x24011a44
 8005ec8:	52001000 	.word	0x52001000
 8005ecc:	24011b08 	.word	0x24011b08
 8005ed0:	50001000 	.word	0x50001000
 8005ed4:	08005511 	.word	0x08005511
 8005ed8:	24001540 	.word	0x24001540
 8005edc:	08005a81 	.word	0x08005a81
 8005ee0:	080056a1 	.word	0x080056a1
 8005ee4:	24001538 	.word	0x24001538
 8005ee8:	24001020 	.word	0x24001020
 8005eec:	2400153c 	.word	0x2400153c
 8005ef0:	24011b24 	.word	0x24011b24

08005ef4 <BSP_LCD_Init>:
{
 8005ef4:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005ef6:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005efa:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005efc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005f00:	2201      	movs	r2, #1
 8005f02:	9400      	str	r4, [sp, #0]
 8005f04:	f7ff fed8 	bl	8005cb8 <BSP_LCD_InitEx>
}
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd10      	pop	{r4, pc}

08005f0c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005f0e:	4915      	ldr	r1, [pc, #84]	; (8005f64 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005f10:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005f12:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005f18:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8005f1c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005f20:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005f24:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005f26:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005f28:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005f2a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005f2c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005f2e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005f30:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005f32:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005f34:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005f36:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005f38:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005f3a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005f3c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8005f3e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005f40:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005f42:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005f44:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005f46:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005f48:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005f4c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005f50:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005f52:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005f56:	f004 fc59 	bl	800a80c <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8005f5a:	1b40      	subs	r0, r0, r5
 8005f5c:	bf18      	it	ne
 8005f5e:	2001      	movne	r0, #1
 8005f60:	b009      	add	sp, #36	; 0x24
 8005f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f64:	52004140 	.word	0x52004140
 8005f68:	24011b8c 	.word	0x24011b8c

08005f6c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f040 80e1 	bne.w	8006134 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f72:	4b73      	ldr	r3, [pc, #460]	; (8006140 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f74:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005f84:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005f8a:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005f8c:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005f8e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f94:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005f96:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f9a:	9201      	str	r2, [sp, #4]
 8005f9c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005f9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005fa8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fac:	400a      	ands	r2, r1
 8005fae:	9202      	str	r2, [sp, #8]
 8005fb0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fb6:	f042 0208 	orr.w	r2, r2, #8
 8005fba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fc2:	f002 0208 	and.w	r2, r2, #8
 8005fc6:	9203      	str	r2, [sp, #12]
 8005fc8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fce:	f042 0210 	orr.w	r2, r2, #16
 8005fd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fda:	f002 0210 	and.w	r2, r2, #16
 8005fde:	9204      	str	r2, [sp, #16]
 8005fe0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005fe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fe6:	f042 0220 	orr.w	r2, r2, #32
 8005fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ff2:	f002 0220 	and.w	r2, r2, #32
 8005ff6:	9205      	str	r2, [sp, #20]
 8005ff8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006002:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006006:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800600a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800600e:	9206      	str	r2, [sp, #24]
 8006010:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800601a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800601e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006022:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800602a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800602e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006032:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006036:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800603a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800603e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006044:	483f      	ldr	r0, [pc, #252]	; (8006144 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006046:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006048:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800604a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800604c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800604e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006050:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006052:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006054:	f002 f8a4 	bl	80081a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006058:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800605c:	a909      	add	r1, sp, #36	; 0x24
 800605e:	483a      	ldr	r0, [pc, #232]	; (8006148 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006062:	f002 f89d 	bl	80081a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006066:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800606a:	a909      	add	r1, sp, #36	; 0x24
 800606c:	4837      	ldr	r0, [pc, #220]	; (800614c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800606e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006070:	f002 f896 	bl	80081a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006074:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006078:	a909      	add	r1, sp, #36	; 0x24
 800607a:	4835      	ldr	r0, [pc, #212]	; (8006150 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800607c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800607e:	f002 f88f 	bl	80081a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006082:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006086:	a909      	add	r1, sp, #36	; 0x24
 8006088:	4832      	ldr	r0, [pc, #200]	; (8006154 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800608a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800608c:	f002 f888 	bl	80081a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006090:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006094:	a909      	add	r1, sp, #36	; 0x24
 8006096:	4830      	ldr	r0, [pc, #192]	; (8006158 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006098:	4c30      	ldr	r4, [pc, #192]	; (800615c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800609c:	f002 f880 	bl	80081a0 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80060a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80060a4:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80060a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80060ac:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80060ae:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80060b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80060b4:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80060b6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80060b8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80060ba:	4a29      	ldr	r2, [pc, #164]	; (8006160 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80060bc:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80060be:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 80060c0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80060c2:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80060c4:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80060c6:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80060c8:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80060cc:	4e25      	ldr	r6, [pc, #148]	; (8006164 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80060ce:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80060d0:	6334      	str	r4, [r6, #48]	; 0x30
 80060d2:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80060d4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80060d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80060dc:	f002 fbe0 	bl	80088a0 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 80060e0:	4620      	mov	r0, r4
 80060e2:	f002 fb63 	bl	80087ac <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80060e6:	462a      	mov	r2, r5
 80060e8:	210f      	movs	r1, #15
 80060ea:	207a      	movs	r0, #122	; 0x7a
 80060ec:	f000 feae 	bl	8006e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80060f0:	207a      	movs	r0, #122	; 0x7a
 80060f2:	f000 fee5 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7ff ff08 	bl	8005f0c <MX_SDRAM_Init>
 80060fc:	4603      	mov	r3, r0
 80060fe:	b9e0      	cbnz	r0, 800613a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006100:	4919      	ldr	r1, [pc, #100]	; (8006168 <BSP_SDRAM_Init+0x1fc>)
 8006102:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006106:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800610a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800610e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006110:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006112:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006114:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006116:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006118:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800611a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800611e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006120:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006122:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006124:	f7fe fc58 	bl	80049d8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006128:	2800      	cmp	r0, #0
 800612a:	bf18      	it	ne
 800612c:	f06f 0004 	mvnne.w	r0, #4
}
 8006130:	b00f      	add	sp, #60	; 0x3c
 8006132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006134:	f06f 0001 	mvn.w	r0, #1
}
 8006138:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	e7f7      	b.n	8006130 <BSP_SDRAM_Init+0x1c4>
 8006140:	58024400 	.word	0x58024400
 8006144:	58020c00 	.word	0x58020c00
 8006148:	58021000 	.word	0x58021000
 800614c:	58021400 	.word	0x58021400
 8006150:	58021800 	.word	0x58021800
 8006154:	58021c00 	.word	0x58021c00
 8006158:	58022000 	.word	0x58022000
 800615c:	24001560 	.word	0x24001560
 8006160:	52000040 	.word	0x52000040
 8006164:	24011b8c 	.word	0x24011b8c
 8006168:	240015cc 	.word	0x240015cc

0800616c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <HAL_InitTick+0x40>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b90b      	cbnz	r3, 8006176 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006172:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006174:	4770      	bx	lr
{
 8006176:	b510      	push	{r4, lr}
 8006178:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800617a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800617e:	4a0c      	ldr	r2, [pc, #48]	; (80061b0 <HAL_InitTick+0x44>)
 8006180:	fbb0 f3f3 	udiv	r3, r0, r3
 8006184:	6810      	ldr	r0, [r2, #0]
 8006186:	fbb0 f0f3 	udiv	r0, r0, r3
 800618a:	f000 fea7 	bl	8006edc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800618e:	2c0f      	cmp	r4, #15
 8006190:	d800      	bhi.n	8006194 <HAL_InitTick+0x28>
 8006192:	b108      	cbz	r0, 8006198 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006194:	2001      	movs	r0, #1
}
 8006196:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006198:	2200      	movs	r2, #0
 800619a:	4621      	mov	r1, r4
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	f000 fe54 	bl	8006e4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <HAL_InitTick+0x48>)
 80061a6:	2000      	movs	r0, #0
 80061a8:	601c      	str	r4, [r3, #0]
}
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	2400106c 	.word	0x2400106c
 80061b0:	24000000 	.word	0x24000000
 80061b4:	24001070 	.word	0x24001070

080061b8 <HAL_Init>:
{
 80061b8:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061ba:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061bc:	4c12      	ldr	r4, [pc, #72]	; (8006208 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061be:	f000 fe31 	bl	8006e24 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061c2:	4d12      	ldr	r5, [pc, #72]	; (800620c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c4:	f002 fec0 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <HAL_Init+0x58>)
 80061ca:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061cc:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061ce:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061d0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061d2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061d6:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061d8:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061da:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061dc:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 80061e0:	4c0c      	ldr	r4, [pc, #48]	; (8006214 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e2:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061e6:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80061ec:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061ee:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061f0:	f7ff ffbc 	bl	800616c <HAL_InitTick>
 80061f4:	b110      	cbz	r0, 80061fc <HAL_Init+0x44>
    return HAL_ERROR;
 80061f6:	2401      	movs	r4, #1
}
 80061f8:	4620      	mov	r0, r4
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	4604      	mov	r4, r0
  HAL_MspInit();
 80061fe:	f7fe fae5 	bl	80047cc <HAL_MspInit>
}
 8006202:	4620      	mov	r0, r4
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	bf00      	nop
 8006208:	0800abe0 	.word	0x0800abe0
 800620c:	24000004 	.word	0x24000004
 8006210:	58024400 	.word	0x58024400
 8006214:	24000000 	.word	0x24000000

08006218 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_IncTick+0x10>)
 800621a:	4b04      	ldr	r3, [pc, #16]	; (800622c <HAL_IncTick+0x14>)
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	440b      	add	r3, r1
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	24011bc0 	.word	0x24011bc0
 800622c:	2400106c 	.word	0x2400106c

08006230 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006230:	4b01      	ldr	r3, [pc, #4]	; (8006238 <HAL_GetTick+0x8>)
 8006232:	6818      	ldr	r0, [r3, #0]
}
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	24011bc0 	.word	0x24011bc0

0800623c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006240:	f7ff fff6 	bl	8006230 <HAL_GetTick>
 8006244:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006246:	1c63      	adds	r3, r4, #1
 8006248:	d002      	beq.n	8006250 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <HAL_Delay+0x20>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006250:	f7ff ffee 	bl	8006230 <HAL_GetTick>
 8006254:	1b43      	subs	r3, r0, r5
 8006256:	42a3      	cmp	r3, r4
 8006258:	d3fa      	bcc.n	8006250 <HAL_Delay+0x14>
  {
  }
}
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	2400106c 	.word	0x2400106c

08006260 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006260:	4b01      	ldr	r3, [pc, #4]	; (8006268 <HAL_GetREVID+0x8>)
 8006262:	6818      	ldr	r0, [r3, #0]
}
 8006264:	0c00      	lsrs	r0, r0, #16
 8006266:	4770      	bx	lr
 8006268:	5c001000 	.word	0x5c001000

0800626c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800626c:	4a03      	ldr	r2, [pc, #12]	; (800627c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800626e:	6853      	ldr	r3, [r2, #4]
 8006270:	ea23 0000 	bic.w	r0, r3, r0
 8006274:	4301      	orrs	r1, r0
 8006276:	6051      	str	r1, [r2, #4]
}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	58000400 	.word	0x58000400

08006280 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8006280:	4a02      	ldr	r2, [pc, #8]	; (800628c <HAL_EnableCompensationCell+0xc>)
 8006282:	6a13      	ldr	r3, [r2, #32]
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6213      	str	r3, [r2, #32]
}
 800628a:	4770      	bx	lr
 800628c:	58000400 	.word	0x58000400

08006290 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006290:	4a40      	ldr	r2, [pc, #256]	; (8006394 <HAL_ADC_PollForConversion+0x104>)
 8006292:	6803      	ldr	r3, [r0, #0]
 8006294:	4293      	cmp	r3, r2
{
 8006296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629a:	4606      	mov	r6, r0
 800629c:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800629e:	d044      	beq.n	800632a <HAL_ADC_PollForConversion+0x9a>
 80062a0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_ADC_PollForConversion+0x9a>
 80062a8:	4a3b      	ldr	r2, [pc, #236]	; (8006398 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80062aa:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062ac:	6897      	ldr	r7, [r2, #8]
 80062ae:	2c08      	cmp	r4, #8
 80062b0:	f007 071f 	and.w	r7, r7, #31
 80062b4:	d00a      	beq.n	80062cc <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062b6:	2f09      	cmp	r7, #9
 80062b8:	d84d      	bhi.n	8006356 <HAL_ADC_PollForConversion+0xc6>
 80062ba:	f240 2121 	movw	r1, #545	; 0x221
 80062be:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062c0:	07c9      	lsls	r1, r1, #31
 80062c2:	d548      	bpl.n	8006356 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	07da      	lsls	r2, r3, #31
 80062c8:	d449      	bmi.n	800635e <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80062ca:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80062cc:	f7ff ffb0 	bl	8006230 <HAL_GetTick>
 80062d0:	6832      	ldr	r2, [r6, #0]
 80062d2:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80062d4:	e001      	b.n	80062da <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80062d6:	1c6b      	adds	r3, r5, #1
 80062d8:	d129      	bne.n	800632e <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	4223      	tst	r3, r4
 80062de:	d0fa      	beq.n	80062d6 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062e0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80062e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062e6:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80062e8:	68d3      	ldr	r3, [r2, #12]
 80062ea:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80062ee:	d10f      	bne.n	8006310 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80062f0:	7d73      	ldrb	r3, [r6, #21]
 80062f2:	b96b      	cbnz	r3, 8006310 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062f4:	6813      	ldr	r3, [r2, #0]
 80062f6:	0718      	lsls	r0, r3, #28
 80062f8:	d50a      	bpl.n	8006310 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062fa:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80062fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006300:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006302:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006304:	04d9      	lsls	r1, r3, #19
 8006306:	d403      	bmi.n	8006310 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006308:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006310:	4b22      	ldr	r3, [pc, #136]	; (800639c <HAL_ADC_PollForConversion+0x10c>)
 8006312:	429a      	cmp	r2, r3
 8006314:	d02e      	beq.n	8006374 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006316:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006318:	2c08      	cmp	r4, #8
 800631a:	d027      	beq.n	800636c <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800631c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8006320:	d134      	bne.n	800638c <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006322:	230c      	movs	r3, #12
 8006324:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <HAL_ADC_PollForConversion+0x110>)
 800632c:	e7bd      	b.n	80062aa <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800632e:	f7ff ff7f 	bl	8006230 <HAL_GetTick>
 8006332:	eba0 0008 	sub.w	r0, r0, r8
 8006336:	6832      	ldr	r2, [r6, #0]
 8006338:	42a8      	cmp	r0, r5
 800633a:	d801      	bhi.n	8006340 <HAL_ADC_PollForConversion+0xb0>
 800633c:	2d00      	cmp	r5, #0
 800633e:	d1cc      	bne.n	80062da <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006340:	6813      	ldr	r3, [r2, #0]
 8006342:	4023      	ands	r3, r4
 8006344:	d1c9      	bne.n	80062da <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006346:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006348:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800634a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800634e:	f042 0204 	orr.w	r2, r2, #4
 8006352:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006354:	e7e7      	b.n	8006326 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006356:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006358:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800635c:	d0b5      	beq.n	80062ca <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800635e:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 8006360:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006362:	f043 0320 	orr.w	r3, r3, #32
 8006366:	6573      	str	r3, [r6, #84]	; 0x54
}
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800636c:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800636e:	6014      	str	r4, [r2, #0]
}
 8006370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006374:	2f09      	cmp	r7, #9
 8006376:	d902      	bls.n	800637e <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_ADC_PollForConversion+0x104>)
 800637a:	68d8      	ldr	r0, [r3, #12]
 800637c:	e7cc      	b.n	8006318 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800637e:	f240 2321 	movw	r3, #545	; 0x221
 8006382:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006386:	07fb      	lsls	r3, r7, #31
 8006388:	d4c5      	bmi.n	8006316 <HAL_ADC_PollForConversion+0x86>
 800638a:	e7f5      	b.n	8006378 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 800638c:	2000      	movs	r0, #0
}
 800638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006392:	bf00      	nop
 8006394:	40022000 	.word	0x40022000
 8006398:	58026300 	.word	0x58026300
 800639c:	40022100 	.word	0x40022100
 80063a0:	40022300 	.word	0x40022300

080063a4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80063a4:	6803      	ldr	r3, [r0, #0]
 80063a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop

080063ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80063ae:	2200      	movs	r2, #0
{
 80063b0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80063b2:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063b4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80063b8:	2a01      	cmp	r2, #1
 80063ba:	f000 813a 	beq.w	8006632 <HAL_ADC_ConfigChannel+0x286>
 80063be:	4603      	mov	r3, r0
 80063c0:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80063c4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063c8:	6894      	ldr	r4, [r2, #8]
 80063ca:	0766      	lsls	r6, r4, #29
 80063cc:	f100 8099 	bmi.w	8006502 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063d0:	680c      	ldr	r4, [r1, #0]
 80063d2:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80063d6:	2d00      	cmp	r5, #0
 80063d8:	f040 809e 	bne.w	8006518 <HAL_ADC_ConfigChannel+0x16c>
 80063dc:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80063e0:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063e4:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 80063e6:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063e8:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80063ea:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 80063ec:	4034      	ands	r4, r6
 80063ee:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80063f0:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80063f4:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 80063f8:	40a6      	lsls	r6, r4
 80063fa:	61d0      	str	r0, [r2, #28]
 80063fc:	fa0c f404 	lsl.w	r4, ip, r4
 8006400:	5978      	ldr	r0, [r7, r5]
 8006402:	ea20 0006 	bic.w	r0, r0, r6
 8006406:	4320      	orrs	r0, r4
 8006408:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800640a:	6890      	ldr	r0, [r2, #8]
 800640c:	0745      	lsls	r5, r0, #29
 800640e:	f100 8081 	bmi.w	8006514 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006412:	6895      	ldr	r5, [r2, #8]
 8006414:	f015 0508 	ands.w	r5, r5, #8
 8006418:	d157      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800641a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800641c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006420:	2007      	movs	r0, #7
 8006422:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006424:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006428:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800642c:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8006430:	fa00 fe04 	lsl.w	lr, r0, r4
 8006434:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006438:	4fc3      	ldr	r7, [pc, #780]	; (8006748 <HAL_ADC_ConfigChannel+0x39c>)
 800643a:	f85c 0006 	ldr.w	r0, [ip, r6]
 800643e:	ea20 000e 	bic.w	r0, r0, lr
 8006442:	4320      	orrs	r0, r4
 8006444:	f84c 0006 	str.w	r0, [ip, r6]
 8006448:	6838      	ldr	r0, [r7, #0]
 800644a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800644e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006452:	f000 8098 	beq.w	8006586 <HAL_ADC_ConfigChannel+0x1da>
 8006456:	68d0      	ldr	r0, [r2, #12]
 8006458:	68d6      	ldr	r6, [r2, #12]
 800645a:	f010 0f10 	tst.w	r0, #16
 800645e:	6948      	ldr	r0, [r1, #20]
 8006460:	f040 8107 	bne.w	8006672 <HAL_ADC_ConfigChannel+0x2c6>
 8006464:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8006468:	0076      	lsls	r6, r6, #1
 800646a:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800646e:	690f      	ldr	r7, [r1, #16]
 8006470:	2f04      	cmp	r7, #4
 8006472:	f000 80e1 	beq.w	8006638 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006476:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 800647a:	6808      	ldr	r0, [r1, #0]
 800647c:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8006480:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006484:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006488:	ea40 000c 	orr.w	r0, r0, ip
 800648c:	4330      	orrs	r0, r6
 800648e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006492:	7e4f      	ldrb	r7, [r1, #25]
 8006494:	690e      	ldr	r6, [r1, #16]
 8006496:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006498:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800649c:	bf0c      	ite	eq
 800649e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80064a2:	2700      	movne	r7, #0
 80064a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80064a8:	4338      	orrs	r0, r7
 80064aa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064ae:	7e0c      	ldrb	r4, [r1, #24]
 80064b0:	6908      	ldr	r0, [r1, #16]
 80064b2:	2c01      	cmp	r4, #1
 80064b4:	d104      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x114>
 80064b6:	f000 001f 	and.w	r0, r0, #31
 80064ba:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80064be:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80064c0:	6910      	ldr	r0, [r2, #16]
 80064c2:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80064c6:	4305      	orrs	r5, r0
 80064c8:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064ca:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064cc:	07c4      	lsls	r4, r0, #31
 80064ce:	d416      	bmi.n	80064fe <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80064d0:	68ce      	ldr	r6, [r1, #12]
 80064d2:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80064d4:	f006 0718 	and.w	r7, r6, #24
 80064d8:	4c9c      	ldr	r4, [pc, #624]	; (800674c <HAL_ADC_ConfigChannel+0x3a0>)
 80064da:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80064de:	40fc      	lsrs	r4, r7
 80064e0:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064e4:	f8df c288 	ldr.w	ip, [pc, #648]	; 8006770 <HAL_ADC_ConfigChannel+0x3c4>
 80064e8:	4004      	ands	r4, r0
 80064ea:	ea25 0507 	bic.w	r5, r5, r7
 80064ee:	4566      	cmp	r6, ip
 80064f0:	ea44 0405 	orr.w	r4, r4, r5
 80064f4:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 80064f8:	d04d      	beq.n	8006596 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064fa:	2800      	cmp	r0, #0
 80064fc:	db15      	blt.n	800652a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064fe:	2000      	movs	r0, #0
 8006500:	e003      	b.n	800650a <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006504:	f042 0220 	orr.w	r2, r2, #32
 8006508:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006510:	b003      	add	sp, #12
 8006512:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006514:	6890      	ldr	r0, [r2, #8]
 8006516:	e7d8      	b.n	80064ca <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800651c:	b115      	cbz	r5, 8006524 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800651e:	fab5 f585 	clz	r5, r5
 8006522:	40a8      	lsls	r0, r5
 8006524:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006528:	e75c      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800652a:	4989      	ldr	r1, [pc, #548]	; (8006750 <HAL_ADC_ConfigChannel+0x3a4>)
 800652c:	428a      	cmp	r2, r1
 800652e:	f000 80c6 	beq.w	80066be <HAL_ADC_ConfigChannel+0x312>
 8006532:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006536:	428a      	cmp	r2, r1
 8006538:	f000 80c1 	beq.w	80066be <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800653c:	4e85      	ldr	r6, [pc, #532]	; (8006754 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800653e:	4d86      	ldr	r5, [pc, #536]	; (8006758 <HAL_ADC_ConfigChannel+0x3ac>)
 8006540:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006542:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006544:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006548:	43e4      	mvns	r4, r4
 800654a:	f004 0401 	and.w	r4, r4, #1
 800654e:	2c00      	cmp	r4, #0
 8006550:	f000 80c3 	beq.w	80066da <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006554:	4c81      	ldr	r4, [pc, #516]	; (800675c <HAL_ADC_ConfigChannel+0x3b0>)
 8006556:	42a0      	cmp	r0, r4
 8006558:	f000 810c 	beq.w	8006774 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800655c:	4c80      	ldr	r4, [pc, #512]	; (8006760 <HAL_ADC_ConfigChannel+0x3b4>)
 800655e:	42a0      	cmp	r0, r4
 8006560:	f000 812b 	beq.w	80067ba <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006564:	4c7f      	ldr	r4, [pc, #508]	; (8006764 <HAL_ADC_ConfigChannel+0x3b8>)
 8006566:	42a0      	cmp	r0, r4
 8006568:	d1c9      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 800656a:	0249      	lsls	r1, r1, #9
 800656c:	d4c7      	bmi.n	80064fe <HAL_ADC_ConfigChannel+0x152>
 800656e:	4979      	ldr	r1, [pc, #484]	; (8006754 <HAL_ADC_ConfigChannel+0x3a8>)
 8006570:	428a      	cmp	r2, r1
 8006572:	d1c4      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006574:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006576:	2000      	movs	r0, #0
 8006578:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800657c:	4332      	orrs	r2, r6
 800657e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006582:	60aa      	str	r2, [r5, #8]
}
 8006584:	e7c1      	b.n	800650a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006586:	68d6      	ldr	r6, [r2, #12]
 8006588:	6948      	ldr	r0, [r1, #20]
 800658a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800658e:	0076      	lsls	r6, r6, #1
 8006590:	fa00 f606 	lsl.w	r6, r0, r6
 8006594:	e76b      	b.n	800646e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006596:	2f00      	cmp	r7, #0
 8006598:	d071      	beq.n	800667e <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800659e:	2c00      	cmp	r4, #0
 80065a0:	f000 80af 	beq.w	8006702 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80065a4:	fab4 f484 	clz	r4, r4
 80065a8:	3401      	adds	r4, #1
 80065aa:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ae:	2c09      	cmp	r4, #9
 80065b0:	f240 80a7 	bls.w	8006702 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	f000 8112 	beq.w	80067e2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80065be:	fab5 f585 	clz	r5, r5
 80065c2:	3501      	adds	r5, #1
 80065c4:	06ad      	lsls	r5, r5, #26
 80065c6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	f000 8105 	beq.w	80067de <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80065d4:	2601      	movs	r6, #1
 80065d6:	fab4 f484 	clz	r4, r4
 80065da:	4434      	add	r4, r6
 80065dc:	f004 041f 	and.w	r4, r4, #31
 80065e0:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065e4:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f000 80f5 	beq.w	80067da <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 80065f0:	fab0 f480 	clz	r4, r0
 80065f4:	3401      	adds	r4, #1
 80065f6:	f004 041f 	and.w	r4, r4, #31
 80065fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80065fe:	f1a4 001e 	sub.w	r0, r4, #30
 8006602:	0500      	lsls	r0, r0, #20
 8006604:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006608:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 800660a:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800660e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8006612:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006614:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8006616:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800661a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800661e:	fa0c fc00 	lsl.w	ip, ip, r0
 8006622:	4086      	lsls	r6, r0
 8006624:	597c      	ldr	r4, [r7, r5]
 8006626:	ea24 000c 	bic.w	r0, r4, ip
 800662a:	4330      	orrs	r0, r6
 800662c:	5178      	str	r0, [r7, r5]
 800662e:	6808      	ldr	r0, [r1, #0]
}
 8006630:	e763      	b.n	80064fa <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8006632:	2002      	movs	r0, #2
}
 8006634:	b003      	add	sp, #12
 8006636:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006638:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800663a:	680d      	ldr	r5, [r1, #0]
 800663c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006640:	06ac      	lsls	r4, r5, #26
 8006642:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8006646:	d030      	beq.n	80066aa <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006648:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800664a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800664e:	4284      	cmp	r4, r0
 8006650:	d026      	beq.n	80066a0 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006652:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006654:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006658:	4284      	cmp	r4, r0
 800665a:	d02b      	beq.n	80066b4 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800665c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800665e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006662:	4284      	cmp	r4, r0
 8006664:	f47f af31 	bne.w	80064ca <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006668:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800666a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800666e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8006670:	e72b      	b.n	80064ca <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006672:	0876      	lsrs	r6, r6, #1
 8006674:	f006 0608 	and.w	r6, r6, #8
 8006678:	fa00 f606 	lsl.w	r6, r0, r6
 800667c:	e6f7      	b.n	800646e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800667e:	0e80      	lsrs	r0, r0, #26
 8006680:	1c44      	adds	r4, r0, #1
 8006682:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006686:	2e09      	cmp	r6, #9
 8006688:	d82d      	bhi.n	80066e6 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800668a:	06a5      	lsls	r5, r4, #26
 800668c:	2401      	movs	r4, #1
 800668e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006692:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006696:	fa04 f606 	lsl.w	r6, r4, r6
 800669a:	0500      	lsls	r0, r0, #20
 800669c:	4335      	orrs	r5, r6
 800669e:	e7b3      	b.n	8006608 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80066a0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80066a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066a6:	6650      	str	r0, [r2, #100]	; 0x64
 80066a8:	e7d3      	b.n	8006652 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80066aa:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80066ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066b0:	6610      	str	r0, [r2, #96]	; 0x60
 80066b2:	e7c9      	b.n	8006648 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80066b4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80066b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066ba:	6690      	str	r0, [r2, #104]	; 0x68
 80066bc:	e7ce      	b.n	800665c <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066be:	492a      	ldr	r1, [pc, #168]	; (8006768 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066c0:	4e23      	ldr	r6, [pc, #140]	; (8006750 <HAL_ADC_ConfigChannel+0x3a4>)
 80066c2:	4c2a      	ldr	r4, [pc, #168]	; (800676c <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066c4:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066c6:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066c8:	68b7      	ldr	r7, [r6, #8]
 80066ca:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066cc:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066d0:	433c      	orrs	r4, r7
 80066d2:	43e4      	mvns	r4, r4
 80066d4:	f004 0401 	and.w	r4, r4, #1
 80066d8:	e739      	b.n	800654e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80066dc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066de:	f042 0220 	orr.w	r2, r2, #32
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80066e4:	e711      	b.n	800650a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066e6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80066ea:	2701      	movs	r7, #1
 80066ec:	06a5      	lsls	r5, r4, #26
 80066ee:	381e      	subs	r0, #30
 80066f0:	fa07 f606 	lsl.w	r6, r7, r6
 80066f4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80066f8:	0500      	lsls	r0, r0, #20
 80066fa:	4335      	orrs	r5, r6
 80066fc:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006700:	e782      	b.n	8006608 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006702:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006706:	2c00      	cmp	r4, #0
 8006708:	d073      	beq.n	80067f2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800670a:	fab4 f484 	clz	r4, r4
 800670e:	3401      	adds	r4, #1
 8006710:	06a4      	lsls	r4, r4, #26
 8006712:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006716:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 800671a:	2e00      	cmp	r6, #0
 800671c:	d067      	beq.n	80067ee <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800671e:	2501      	movs	r5, #1
 8006720:	fab6 f686 	clz	r6, r6
 8006724:	442e      	add	r6, r5
 8006726:	f006 061f 	and.w	r6, r6, #31
 800672a:	40b5      	lsls	r5, r6
 800672c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800672e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006732:	2800      	cmp	r0, #0
 8006734:	d058      	beq.n	80067e8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006736:	fab0 f480 	clz	r4, r0
 800673a:	3401      	adds	r4, #1
 800673c:	f004 041f 	and.w	r4, r4, #31
 8006740:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006744:	0520      	lsls	r0, r4, #20
 8006746:	e75f      	b.n	8006608 <HAL_ADC_ConfigChannel+0x25c>
 8006748:	5c001000 	.word	0x5c001000
 800674c:	000fffff 	.word	0x000fffff
 8006750:	40022000 	.word	0x40022000
 8006754:	58026000 	.word	0x58026000
 8006758:	58026300 	.word	0x58026300
 800675c:	cb840000 	.word	0xcb840000
 8006760:	c7520000 	.word	0xc7520000
 8006764:	cfb80000 	.word	0xcfb80000
 8006768:	40022300 	.word	0x40022300
 800676c:	40022100 	.word	0x40022100
 8006770:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006774:	0208      	lsls	r0, r1, #8
 8006776:	f53f aec2 	bmi.w	80064fe <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800677a:	491f      	ldr	r1, [pc, #124]	; (80067f8 <HAL_ADC_ConfigChannel+0x44c>)
 800677c:	428a      	cmp	r2, r1
 800677e:	f47f aebe 	bne.w	80064fe <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <HAL_ADC_ConfigChannel+0x450>)
 8006784:	481e      	ldr	r0, [pc, #120]	; (8006800 <HAL_ADC_ConfigChannel+0x454>)
 8006786:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006788:	68a9      	ldr	r1, [r5, #8]
 800678a:	0992      	lsrs	r2, r2, #6
 800678c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006790:	fba0 0202 	umull	r0, r2, r0, r2
 8006794:	4331      	orrs	r1, r6
 8006796:	0992      	lsrs	r2, r2, #6
 8006798:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800679c:	3201      	adds	r2, #1
 800679e:	60a9      	str	r1, [r5, #8]
 80067a0:	0052      	lsls	r2, r2, #1
 80067a2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80067a4:	9a01      	ldr	r2, [sp, #4]
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	f43f aea9 	beq.w	80064fe <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80067ac:	9a01      	ldr	r2, [sp, #4]
 80067ae:	3a01      	subs	r2, #1
 80067b0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d1f9      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x400>
 80067b8:	e6a1      	b.n	80064fe <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80067ba:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80067be:	f47f ae9e 	bne.w	80064fe <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067c2:	490d      	ldr	r1, [pc, #52]	; (80067f8 <HAL_ADC_ConfigChannel+0x44c>)
 80067c4:	428a      	cmp	r2, r1
 80067c6:	f47f ae9a 	bne.w	80064fe <HAL_ADC_ConfigChannel+0x152>
 80067ca:	68aa      	ldr	r2, [r5, #8]
 80067cc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80067d0:	4332      	orrs	r2, r6
 80067d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80067d6:	60aa      	str	r2, [r5, #8]
}
 80067d8:	e697      	b.n	800650a <HAL_ADC_ConfigChannel+0x15e>
 80067da:	480a      	ldr	r0, [pc, #40]	; (8006804 <HAL_ADC_ConfigChannel+0x458>)
 80067dc:	e714      	b.n	8006608 <HAL_ADC_ConfigChannel+0x25c>
 80067de:	2402      	movs	r4, #2
 80067e0:	e700      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x238>
 80067e2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80067e6:	e6f0      	b.n	80065ca <HAL_ADC_ConfigChannel+0x21e>
 80067e8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80067ec:	e70c      	b.n	8006608 <HAL_ADC_ConfigChannel+0x25c>
 80067ee:	2502      	movs	r5, #2
 80067f0:	e79c      	b.n	800672c <HAL_ADC_ConfigChannel+0x380>
 80067f2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80067f6:	e78e      	b.n	8006716 <HAL_ADC_ConfigChannel+0x36a>
 80067f8:	58026000 	.word	0x58026000
 80067fc:	24000000 	.word	0x24000000
 8006800:	053e2d63 	.word	0x053e2d63
 8006804:	fe500000 	.word	0xfe500000

08006808 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006808:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	07d1      	lsls	r1, r2, #31
 800680e:	d501      	bpl.n	8006814 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006810:	2000      	movs	r0, #0
}
 8006812:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006814:	6899      	ldr	r1, [r3, #8]
 8006816:	4a21      	ldr	r2, [pc, #132]	; (800689c <ADC_Enable+0x94>)
 8006818:	4211      	tst	r1, r2
{
 800681a:	b570      	push	{r4, r5, r6, lr}
 800681c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800681e:	d008      	beq.n	8006832 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006820:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8006822:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006824:	f043 0310 	orr.w	r3, r3, #16
 8006828:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800682a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800682c:	4303      	orrs	r3, r0
 800682e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006830:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <ADC_Enable+0x98>)
 8006836:	400a      	ands	r2, r1
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800683e:	f7ff fcf7 	bl	8006230 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006846:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006848:	4293      	cmp	r3, r2
 800684a:	d01f      	beq.n	800688c <ADC_Enable+0x84>
 800684c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006850:	4293      	cmp	r3, r2
 8006852:	d01b      	beq.n	800688c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006854:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <ADC_Enable+0xa0>)
 8006856:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	07d6      	lsls	r6, r2, #31
 800685c:	d414      	bmi.n	8006888 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 800685e:	4e10      	ldr	r6, [pc, #64]	; (80068a0 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006860:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006862:	07d0      	lsls	r0, r2, #31
 8006864:	d404      	bmi.n	8006870 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	4032      	ands	r2, r6
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006870:	f7ff fcde 	bl	8006230 <HAL_GetTick>
 8006874:	1b43      	subs	r3, r0, r5
 8006876:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006878:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800687a:	d902      	bls.n	8006882 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	07d1      	lsls	r1, r2, #31
 8006880:	d5ce      	bpl.n	8006820 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	07d2      	lsls	r2, r2, #31
 8006886:	d5eb      	bpl.n	8006860 <ADC_Enable+0x58>
  return HAL_OK;
 8006888:	2000      	movs	r0, #0
}
 800688a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800688c:	4a07      	ldr	r2, [pc, #28]	; (80068ac <ADC_Enable+0xa4>)
 800688e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006890:	06d2      	lsls	r2, r2, #27
 8006892:	d0e1      	beq.n	8006858 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006894:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006896:	4293      	cmp	r3, r2
 8006898:	d1de      	bne.n	8006858 <ADC_Enable+0x50>
 800689a:	e7f5      	b.n	8006888 <ADC_Enable+0x80>
 800689c:	8000003f 	.word	0x8000003f
 80068a0:	7fffffc0 	.word	0x7fffffc0
 80068a4:	40022000 	.word	0x40022000
 80068a8:	58026300 	.word	0x58026300
 80068ac:	40022300 	.word	0x40022300
 80068b0:	40022100 	.word	0x40022100

080068b4 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068b4:	4a39      	ldr	r2, [pc, #228]	; (800699c <HAL_ADC_Start+0xe8>)
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	4293      	cmp	r3, r2
{
 80068ba:	b570      	push	{r4, r5, r6, lr}
 80068bc:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068be:	d045      	beq.n	800694c <HAL_ADC_Start+0x98>
 80068c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d041      	beq.n	800694c <HAL_ADC_Start+0x98>
 80068c8:	4a35      	ldr	r2, [pc, #212]	; (80069a0 <HAL_ADC_Start+0xec>)
 80068ca:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068cc:	689d      	ldr	r5, [r3, #8]
 80068ce:	f015 0504 	ands.w	r5, r5, #4
 80068d2:	d141      	bne.n	8006958 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 80068d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d03d      	beq.n	8006958 <HAL_ADC_Start+0xa4>
 80068dc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80068de:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80068e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80068e4:	f7ff ff90 	bl	8006808 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d137      	bne.n	800695c <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 80068ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80068ee:	f006 061f 	and.w	r6, r6, #31
 80068f2:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068f4:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80068f6:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068f8:	492b      	ldr	r1, [pc, #172]	; (80069a8 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 80068fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068fe:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 8006900:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006902:	d044      	beq.n	800698e <HAL_ADC_Start+0xda>
 8006904:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006906:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006908:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800690c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800690e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006914:	d03f      	beq.n	8006996 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006916:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006918:	f022 0206 	bic.w	r2, r2, #6
 800691c:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800691e:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8006920:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006922:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006924:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006926:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800692a:	d020      	beq.n	800696e <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800692c:	2e09      	cmp	r6, #9
 800692e:	d918      	bls.n	8006962 <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006930:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006936:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006938:	68cb      	ldr	r3, [r1, #12]
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	d505      	bpl.n	800694a <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800693e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006948:	6563      	str	r3, [r4, #84]	; 0x54
}
 800694a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800694c:	4a17      	ldr	r2, [pc, #92]	; (80069ac <HAL_ADC_Start+0xf8>)
 800694e:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006950:	689d      	ldr	r5, [r3, #8]
 8006952:	f015 0504 	ands.w	r5, r5, #4
 8006956:	d0bd      	beq.n	80068d4 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8006958:	2002      	movs	r0, #2
}
 800695a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800695c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8006960:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006962:	f240 2221 	movw	r2, #545	; 0x221
 8006966:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800696a:	07f5      	lsls	r5, r6, #31
 800696c:	d5e0      	bpl.n	8006930 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	0192      	lsls	r2, r2, #6
 8006972:	d505      	bpl.n	8006980 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006974:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006976:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800697a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800697e:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <HAL_ADC_Start+0xfc>)
 8006984:	400a      	ands	r2, r1
 8006986:	f042 0204 	orr.w	r2, r2, #4
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800698e:	4903      	ldr	r1, [pc, #12]	; (800699c <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006990:	2e00      	cmp	r6, #0
 8006992:	d0b8      	beq.n	8006906 <HAL_ADC_Start+0x52>
 8006994:	e7bb      	b.n	800690e <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006996:	65a2      	str	r2, [r4, #88]	; 0x58
 8006998:	e7c1      	b.n	800691e <HAL_ADC_Start+0x6a>
 800699a:	bf00      	nop
 800699c:	40022000 	.word	0x40022000
 80069a0:	58026300 	.word	0x58026300
 80069a4:	fffff0fe 	.word	0xfffff0fe
 80069a8:	40022100 	.word	0x40022100
 80069ac:	40022300 	.word	0x40022300
 80069b0:	7fffffc0 	.word	0x7fffffc0

080069b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80069b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069b6:	4a5a      	ldr	r2, [pc, #360]	; (8006b20 <ADC_ConfigureBoostMode+0x16c>)
{
 80069b8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069ba:	6803      	ldr	r3, [r0, #0]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d029      	beq.n	8006a14 <ADC_ConfigureBoostMode+0x60>
 80069c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d025      	beq.n	8006a14 <ADC_ConfigureBoostMode+0x60>
 80069c8:	4b56      	ldr	r3, [pc, #344]	; (8006b24 <ADC_ConfigureBoostMode+0x170>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b333      	cbz	r3, 8006a26 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80069d8:	f002 fc80 	bl	80092dc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80069dc:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80069de:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e4:	f000 808b 	beq.w	8006afe <ADC_ConfigureBoostMode+0x14a>
 80069e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069ec:	d06f      	beq.n	8006ace <ADC_ConfigureBoostMode+0x11a>
 80069ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f2:	f000 8084 	beq.w	8006afe <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80069f6:	f7ff fc33 	bl	8006260 <HAL_GetREVID>
 80069fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80069fe:	4298      	cmp	r0, r3
 8006a00:	d84e      	bhi.n	8006aa0 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8006a02:	4b49      	ldr	r3, [pc, #292]	; (8006b28 <ADC_ConfigureBoostMode+0x174>)
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d92d      	bls.n	8006a64 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	6893      	ldr	r3, [r2, #8]
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a10:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a14:	4b45      	ldr	r3, [pc, #276]	; (8006b2c <ADC_ConfigureBoostMode+0x178>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1d8      	bne.n	80069d8 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a2a:	f003 fd6b 	bl	800a504 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006a2e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a30:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006a32:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a36:	d06c      	beq.n	8006b12 <ADC_ConfigureBoostMode+0x15e>
 8006a38:	d808      	bhi.n	8006a4c <ADC_ConfigureBoostMode+0x98>
 8006a3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a3e:	d050      	beq.n	8006ae2 <ADC_ConfigureBoostMode+0x12e>
 8006a40:	d916      	bls.n	8006a70 <ADC_ConfigureBoostMode+0xbc>
 8006a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a46:	d1d6      	bne.n	80069f6 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8006a48:	0945      	lsrs	r5, r0, #5
        break;
 8006a4a:	e7d4      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006a4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a50:	d045      	beq.n	8006ade <ADC_ConfigureBoostMode+0x12a>
 8006a52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a56:	d1ce      	bne.n	80069f6 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a58:	f7ff fc02 	bl	8006260 <HAL_GetREVID>
 8006a5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a60:	4298      	cmp	r0, r3
 8006a62:	d840      	bhi.n	8006ae6 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	6893      	ldr	r3, [r2, #8]
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	6093      	str	r3, [r2, #8]
}
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8006a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a74:	d006      	beq.n	8006a84 <ADC_ConfigureBoostMode+0xd0>
 8006a76:	d90a      	bls.n	8006a8e <ADC_ConfigureBoostMode+0xda>
 8006a78:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006a7c:	d002      	beq.n	8006a84 <ADC_ConfigureBoostMode+0xd0>
 8006a7e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a82:	d1b8      	bne.n	80069f6 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a84:	0c9b      	lsrs	r3, r3, #18
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006a8c:	e7b3      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a92:	d0f7      	beq.n	8006a84 <ADC_ConfigureBoostMode+0xd0>
 8006a94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a98:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006a9c:	d0f2      	beq.n	8006a84 <ADC_ConfigureBoostMode+0xd0>
 8006a9e:	e7aa      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006aa0:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <ADC_ConfigureBoostMode+0x17c>)
 8006aa2:	429d      	cmp	r5, r3
 8006aa4:	d805      	bhi.n	8006ab2 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	6893      	ldr	r3, [r2, #8]
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aae:	6093      	str	r3, [r2, #8]
}
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006ab2:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <ADC_ConfigureBoostMode+0x180>)
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	d91a      	bls.n	8006aee <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006ab8:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006aba:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006abc:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006abe:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006ac0:	d829      	bhi.n	8006b16 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aca:	6093      	str	r3, [r2, #8]
}
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8006ace:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006ad0:	f7ff fbc6 	bl	8006260 <HAL_GetREVID>
 8006ad4:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	d8e1      	bhi.n	8006aa0 <ADC_ConfigureBoostMode+0xec>
 8006adc:	e791      	b.n	8006a02 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8006ade:	09c5      	lsrs	r5, r0, #7
        break;
 8006ae0:	e789      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8006ae2:	0905      	lsrs	r5, r0, #4
        break;
 8006ae4:	e787      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006ae6:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <ADC_ConfigureBoostMode+0x17c>)
 8006ae8:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006aec:	d2db      	bcs.n	8006aa6 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	6893      	ldr	r3, [r2, #8]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afa:	6093      	str	r3, [r2, #8]
}
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b04:	f7ff fbac 	bl	8006260 <HAL_GetREVID>
 8006b08:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	d8c7      	bhi.n	8006aa0 <ADC_ConfigureBoostMode+0xec>
 8006b10:	e777      	b.n	8006a02 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8006b12:	0985      	lsrs	r5, r0, #6
        break;
 8006b14:	e76f      	b.n	80069f6 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b1a:	6093      	str	r3, [r2, #8]
}
 8006b1c:	bd38      	pop	{r3, r4, r5, pc}
 8006b1e:	bf00      	nop
 8006b20:	40022000 	.word	0x40022000
 8006b24:	58026300 	.word	0x58026300
 8006b28:	01312d00 	.word	0x01312d00
 8006b2c:	40022300 	.word	0x40022300
 8006b30:	00bebc21 	.word	0x00bebc21
 8006b34:	017d7841 	.word	0x017d7841
 8006b38:	02faf081 	.word	0x02faf081

08006b3c <HAL_ADC_Init>:
{
 8006b3c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006b3e:	2300      	movs	r3, #0
{
 8006b40:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006b42:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f000 80d0 	beq.w	8006cea <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006b4a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	f000 80ba 	beq.w	8006cc8 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006b54:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b56:	6893      	ldr	r3, [r2, #8]
 8006b58:	009d      	lsls	r5, r3, #2
 8006b5a:	d503      	bpl.n	8006b64 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b5c:	6891      	ldr	r1, [r2, #8]
 8006b5e:	4b71      	ldr	r3, [pc, #452]	; (8006d24 <HAL_ADC_Init+0x1e8>)
 8006b60:	400b      	ands	r3, r1
 8006b62:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b64:	6893      	ldr	r3, [r2, #8]
 8006b66:	00d8      	lsls	r0, r3, #3
 8006b68:	d416      	bmi.n	8006b98 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b6a:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_ADC_Init+0x1ec>)
 8006b6c:	4d6f      	ldr	r5, [pc, #444]	; (8006d2c <HAL_ADC_Init+0x1f0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006b70:	6890      	ldr	r0, [r2, #8]
 8006b72:	099b      	lsrs	r3, r3, #6
 8006b74:	496e      	ldr	r1, [pc, #440]	; (8006d30 <HAL_ADC_Init+0x1f4>)
 8006b76:	fba5 5303 	umull	r5, r3, r5, r3
 8006b7a:	4001      	ands	r1, r0
 8006b7c:	099b      	lsrs	r3, r3, #6
 8006b7e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006b82:	3301      	adds	r3, #1
 8006b84:	6091      	str	r1, [r2, #8]
 8006b86:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006b88:	9b01      	ldr	r3, [sp, #4]
 8006b8a:	b12b      	cbz	r3, 8006b98 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006b92:	9b01      	ldr	r3, [sp, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f9      	bne.n	8006b8c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	00d9      	lsls	r1, r3, #3
 8006b9c:	d424      	bmi.n	8006be8 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006ba0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ba2:	f043 0310 	orr.w	r3, r3, #16
 8006ba6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006baa:	432b      	orrs	r3, r5
 8006bac:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bae:	6893      	ldr	r3, [r2, #8]
 8006bb0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bb6:	d11d      	bne.n	8006bf4 <HAL_ADC_Init+0xb8>
 8006bb8:	06db      	lsls	r3, r3, #27
 8006bba:	d41b      	bmi.n	8006bf4 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bc8:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bca:	07de      	lsls	r6, r3, #31
 8006bcc:	d428      	bmi.n	8006c20 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_ADC_Init+0x1f8>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d017      	beq.n	8006c04 <HAL_ADC_Init+0xc8>
 8006bd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d013      	beq.n	8006c04 <HAL_ADC_Init+0xc8>
 8006bdc:	4b56      	ldr	r3, [pc, #344]	; (8006d38 <HAL_ADC_Init+0x1fc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	07d9      	lsls	r1, r3, #31
 8006be2:	d41d      	bmi.n	8006c20 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006be4:	4a55      	ldr	r2, [pc, #340]	; (8006d3c <HAL_ADC_Init+0x200>)
 8006be6:	e015      	b.n	8006c14 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006be8:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bea:	2500      	movs	r5, #0
 8006bec:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bf2:	d0e1      	beq.n	8006bb8 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006bf6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf8:	f043 0310 	orr.w	r3, r3, #16
}
 8006bfc:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bfe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c00:	b002      	add	sp, #8
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c04:	4a4b      	ldr	r2, [pc, #300]	; (8006d34 <HAL_ADC_Init+0x1f8>)
 8006c06:	4b4e      	ldr	r3, [pc, #312]	; (8006d40 <HAL_ADC_Init+0x204>)
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	07d8      	lsls	r0, r3, #31
 8006c10:	d406      	bmi.n	8006c20 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c12:	4a4c      	ldr	r2, [pc, #304]	; (8006d44 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c14:	6893      	ldr	r3, [r2, #8]
 8006c16:	6861      	ldr	r1, [r4, #4]
 8006c18:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006c20:	f7ff fb1e 	bl	8006260 <HAL_GetREVID>
 8006c24:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c28:	68a1      	ldr	r1, [r4, #8]
 8006c2a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006c2c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006c2e:	d851      	bhi.n	8006cd4 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c30:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006c32:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006c36:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006c3a:	4302      	orrs	r2, r0
 8006c3c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d103      	bne.n	8006c4a <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006c42:	6a23      	ldr	r3, [r4, #32]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4c:	b123      	cbz	r3, 8006c58 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006c4e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006c52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c54:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006c56:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	493b      	ldr	r1, [pc, #236]	; (8006d48 <HAL_ADC_Init+0x20c>)
 8006c5c:	68d8      	ldr	r0, [r3, #12]
 8006c5e:	4001      	ands	r1, r0
 8006c60:	430a      	orrs	r2, r1
 8006c62:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c6a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c6c:	d11c      	bne.n	8006ca8 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c6e:	0712      	lsls	r2, r2, #28
 8006c70:	d41a      	bmi.n	8006ca8 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006c72:	68d9      	ldr	r1, [r3, #12]
 8006c74:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006c76:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006c78:	400a      	ands	r2, r1
 8006c7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c7c:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006c80:	430a      	orrs	r2, r1
 8006c82:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006c84:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006c88:	2a01      	cmp	r2, #1
 8006c8a:	d03a      	beq.n	8006d02 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006c94:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006c96:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006ca2:	f7ff fe87 	bl	80069b4 <ADC_ConfigureBoostMode>
 8006ca6:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ca8:	68e2      	ldr	r2, [r4, #12]
 8006caa:	2a01      	cmp	r2, #1
 8006cac:	d021      	beq.n	8006cf2 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb0:	f022 020f 	bic.w	r2, r2, #15
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006cb8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006cc8:	f7fd fd92 	bl	80047f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006ccc:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006cce:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006cd2:	e73f      	b.n	8006b54 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006cd4:	2910      	cmp	r1, #16
 8006cd6:	d1ab      	bne.n	8006c30 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006cd8:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006cda:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006cdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006cde:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	f042 021c 	orr.w	r2, r2, #28
 8006ce8:	e7a9      	b.n	8006c3e <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006cea:	2501      	movs	r5, #1
}
 8006cec:	4628      	mov	r0, r5
 8006cee:	b002      	add	sp, #8
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cf4:	69a2      	ldr	r2, [r4, #24]
 8006cf6:	f021 010f 	bic.w	r1, r1, #15
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8006d00:	e7d9      	b.n	8006cb6 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006d02:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006d06:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006d08:	3901      	subs	r1, #1
 8006d0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d0c:	4332      	orrs	r2, r6
 8006d0e:	691e      	ldr	r6, [r3, #16]
 8006d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d14:	490e      	ldr	r1, [pc, #56]	; (8006d50 <HAL_ADC_Init+0x214>)
 8006d16:	4302      	orrs	r2, r0
 8006d18:	4031      	ands	r1, r6
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	611a      	str	r2, [r3, #16]
 8006d22:	e7b7      	b.n	8006c94 <HAL_ADC_Init+0x158>
 8006d24:	5fffffc0 	.word	0x5fffffc0
 8006d28:	24000000 	.word	0x24000000
 8006d2c:	053e2d63 	.word	0x053e2d63
 8006d30:	6fffffc0 	.word	0x6fffffc0
 8006d34:	40022000 	.word	0x40022000
 8006d38:	58026000 	.word	0x58026000
 8006d3c:	58026300 	.word	0x58026300
 8006d40:	40022100 	.word	0x40022100
 8006d44:	40022300 	.word	0x40022300
 8006d48:	fff0c003 	.word	0xfff0c003
 8006d4c:	ffffbffc 	.word	0xffffbffc
 8006d50:	fc00f81e 	.word	0xfc00f81e

08006d54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006d54:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d56:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006d5a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d5c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006d5e:	2a01      	cmp	r2, #1
 8006d60:	d04d      	beq.n	8006dfe <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006d62:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d64:	4c2b      	ldr	r4, [pc, #172]	; (8006e14 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006d66:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006d68:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d6a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006d6c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d6e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006d70:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006d74:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d76:	d008      	beq.n	8006d8a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d78:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d7e:	f041 0120 	orr.w	r1, r1, #32
 8006d82:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006d84:	b01a      	add	sp, #104	; 0x68
 8006d86:	bcf0      	pop	{r4, r5, r6, r7}
 8006d88:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d8a:	4c23      	ldr	r4, [pc, #140]	; (8006e18 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006d8c:	68a2      	ldr	r2, [r4, #8]
 8006d8e:	0752      	lsls	r2, r2, #29
 8006d90:	d50b      	bpl.n	8006daa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d92:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006d96:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d98:	f042 0220 	orr.w	r2, r2, #32
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006da4:	b01a      	add	sp, #104	; 0x68
 8006da6:	bcf0      	pop	{r4, r5, r6, r7}
 8006da8:	4770      	bx	lr
 8006daa:	68a8      	ldr	r0, [r5, #8]
 8006dac:	f010 0004 	ands.w	r0, r0, #4
 8006db0:	d1f0      	bne.n	8006d94 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006db2:	b1c6      	cbz	r6, 8006de6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006db4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006e20 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006db8:	684f      	ldr	r7, [r1, #4]
 8006dba:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006dbe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006dc2:	433a      	orrs	r2, r7
 8006dc4:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006dc8:	68ad      	ldr	r5, [r5, #8]
 8006dca:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dcc:	432a      	orrs	r2, r5
 8006dce:	07d4      	lsls	r4, r2, #31
 8006dd0:	d413      	bmi.n	8006dfa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006dd2:	688a      	ldr	r2, [r1, #8]
 8006dd4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006dd8:	4910      	ldr	r1, [pc, #64]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006dda:	4316      	orrs	r6, r2
 8006ddc:	4021      	ands	r1, r4
 8006dde:	430e      	orrs	r6, r1
 8006de0:	f8cc 6008 	str.w	r6, [ip, #8]
 8006de4:	e7db      	b.n	8006d9e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006de6:	490e      	ldr	r1, [pc, #56]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006de8:	688a      	ldr	r2, [r1, #8]
 8006dea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006dee:	608a      	str	r2, [r1, #8]
 8006df0:	68a8      	ldr	r0, [r5, #8]
 8006df2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006df4:	4302      	orrs	r2, r0
 8006df6:	07d0      	lsls	r0, r2, #31
 8006df8:	d505      	bpl.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e7cf      	b.n	8006d9e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006dfe:	2002      	movs	r0, #2
}
 8006e00:	b01a      	add	sp, #104	; 0x68
 8006e02:	bcf0      	pop	{r4, r5, r6, r7}
 8006e04:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006e06:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e08:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006e0c:	4022      	ands	r2, r4
 8006e0e:	608a      	str	r2, [r1, #8]
 8006e10:	e7c5      	b.n	8006d9e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006e12:	bf00      	nop
 8006e14:	40022000 	.word	0x40022000
 8006e18:	40022100 	.word	0x40022100
 8006e1c:	fffff0e0 	.word	0xfffff0e0
 8006e20:	40022300 	.word	0x40022300

08006e24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e24:	4907      	ldr	r1, [pc, #28]	; (8006e44 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e26:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e2a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e30:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e32:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006e36:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e38:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e3c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006e3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006e40:	60cb      	str	r3, [r1, #12]
 8006e42:	4770      	bx	lr
 8006e44:	e000ed00 	.word	0xe000ed00
 8006e48:	05fa0000 	.word	0x05fa0000

08006e4c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e4c:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <HAL_NVIC_SetPriority+0x68>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e54:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e56:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e5a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e5c:	2d04      	cmp	r5, #4
 8006e5e:	bf28      	it	cs
 8006e60:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e62:	2c06      	cmp	r4, #6
 8006e64:	d919      	bls.n	8006e9a <HAL_NVIC_SetPriority+0x4e>
 8006e66:	3b03      	subs	r3, #3
 8006e68:	f04f 34ff 	mov.w	r4, #4294967295
 8006e6c:	409c      	lsls	r4, r3
 8006e6e:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e72:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006e76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e78:	fa04 f405 	lsl.w	r4, r4, r5
 8006e7c:	ea21 0104 	bic.w	r1, r1, r4
 8006e80:	fa01 f103 	lsl.w	r1, r1, r3
 8006e84:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006e88:	db0a      	blt.n	8006ea0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8a:	0109      	lsls	r1, r1, #4
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <HAL_NVIC_SetPriority+0x6c>)
 8006e8e:	b2c9      	uxtb	r1, r1
 8006e90:	4403      	add	r3, r0
 8006e92:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e96:	bc30      	pop	{r4, r5}
 8006e98:	4770      	bx	lr
 8006e9a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	e7e8      	b.n	8006e72 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea0:	f000 000f 	and.w	r0, r0, #15
 8006ea4:	0109      	lsls	r1, r1, #4
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_NVIC_SetPriority+0x70>)
 8006ea8:	b2c9      	uxtb	r1, r1
 8006eaa:	4403      	add	r3, r0
 8006eac:	7619      	strb	r1, [r3, #24]
 8006eae:	bc30      	pop	{r4, r5}
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	e000ed00 	.word	0xe000ed00
 8006eb8:	e000e100 	.word	0xe000e100
 8006ebc:	e000ecfc 	.word	0xe000ecfc

08006ec0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	db07      	blt.n	8006ed4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f000 011f 	and.w	r1, r0, #31
 8006eca:	4a03      	ldr	r2, [pc, #12]	; (8006ed8 <HAL_NVIC_EnableIRQ+0x18>)
 8006ecc:	0940      	lsrs	r0, r0, #5
 8006ece:	408b      	lsls	r3, r1
 8006ed0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	e000e100 	.word	0xe000e100

08006edc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006edc:	3801      	subs	r0, #1
 8006ede:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006ee2:	d20d      	bcs.n	8006f00 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ee6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ee8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006eea:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eec:	25f0      	movs	r5, #240	; 0xf0
 8006eee:	4c06      	ldr	r4, [pc, #24]	; (8006f08 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ef0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ef2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006efa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006efc:	bc30      	pop	{r4, r5}
 8006efe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006f00:	2001      	movs	r0, #1
 8006f02:	4770      	bx	lr
 8006f04:	e000e010 	.word	0xe000e010
 8006f08:	e000ed00 	.word	0xe000ed00

08006f0c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006f0c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f10:	4a04      	ldr	r2, [pc, #16]	; (8006f24 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f12:	2000      	movs	r0, #0
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8006f1e:	6048      	str	r0, [r1, #4]
}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	e000ed00 	.word	0xe000ed00
 8006f28:	e000ed90 	.word	0xe000ed90

08006f2c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f2c:	4a06      	ldr	r2, [pc, #24]	; (8006f48 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f2e:	f040 0001 	orr.w	r0, r0, #1
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_MPU_Enable+0x20>)
 8006f34:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f42:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f46:	4770      	bx	lr
 8006f48:	e000ed00 	.word	0xe000ed00
 8006f4c:	e000ed90 	.word	0xe000ed90

08006f50 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006f50:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <HAL_MPU_ConfigRegion+0x4c>)
 8006f52:	7843      	ldrb	r3, [r0, #1]
 8006f54:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006f56:	7801      	ldrb	r1, [r0, #0]
 8006f58:	b1e9      	cbz	r1, 8006f96 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006f5a:	6843      	ldr	r3, [r0, #4]
{
 8006f5c:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8006f5e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f60:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f62:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f64:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006f66:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f68:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f6a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006f6e:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f70:	430b      	orrs	r3, r1
 8006f72:	7a01      	ldrb	r1, [r0, #8]
 8006f74:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f78:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f7a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f7e:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f80:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006f84:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006f88:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006f8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006f90:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f92:	6113      	str	r3, [r2, #16]
}
 8006f94:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8006f96:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006f98:	6111      	str	r1, [r2, #16]
 8006f9a:	4770      	bx	lr
 8006f9c:	e000ed90 	.word	0xe000ed90

08006fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr_dma  = regs_dma->ISR;
  tmpisr_bdma = regs_bdma->ISR;

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fa4:	4a9f      	ldr	r2, [pc, #636]	; (8007224 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 8006fa6:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fa8:	4e9f      	ldr	r6, [pc, #636]	; (8007228 <HAL_DMA_IRQHandler+0x288>)
{
 8006faa:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fac:	6803      	ldr	r3, [r0, #0]
{
 8006fae:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fb0:	499e      	ldr	r1, [pc, #632]	; (800722c <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bf18      	it	ne
 8006fb8:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 8006fba:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fbc:	bf08      	it	eq
 8006fbe:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fc0:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 8006fc2:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fc4:	bf18      	it	ne
 8006fc6:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8006fc8:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fca:	d04a      	beq.n	8007062 <HAL_DMA_IRQHandler+0xc2>
 8006fcc:	3230      	adds	r2, #48	; 0x30
 8006fce:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800723c <HAL_DMA_IRQHandler+0x29c>
 8006fd2:	4897      	ldr	r0, [pc, #604]	; (8007230 <HAL_DMA_IRQHandler+0x290>)
 8006fd4:	4573      	cmp	r3, lr
 8006fd6:	bf18      	it	ne
 8006fd8:	4293      	cmpne	r3, r2
 8006fda:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 8006fde:	bf0c      	ite	eq
 8006fe0:	2201      	moveq	r2, #1
 8006fe2:	2200      	movne	r2, #0
 8006fe4:	4283      	cmp	r3, r0
 8006fe6:	bf08      	it	eq
 8006fe8:	f042 0201 	orreq.w	r2, r2, #1
 8006fec:	3030      	adds	r0, #48	; 0x30
 8006fee:	4573      	cmp	r3, lr
 8006ff0:	bf08      	it	eq
 8006ff2:	f042 0201 	orreq.w	r2, r2, #1
 8006ff6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	bf08      	it	eq
 8006ffe:	f042 0201 	orreq.w	r2, r2, #1
 8007002:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007006:	4573      	cmp	r3, lr
 8007008:	bf08      	it	eq
 800700a:	f042 0201 	orreq.w	r2, r2, #1
 800700e:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8007012:	4283      	cmp	r3, r0
 8007014:	bf08      	it	eq
 8007016:	f042 0201 	orreq.w	r2, r2, #1
 800701a:	3030      	adds	r0, #48	; 0x30
 800701c:	4573      	cmp	r3, lr
 800701e:	bf08      	it	eq
 8007020:	f042 0201 	orreq.w	r2, r2, #1
 8007024:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007028:	4283      	cmp	r3, r0
 800702a:	bf08      	it	eq
 800702c:	f042 0201 	orreq.w	r2, r2, #1
 8007030:	3030      	adds	r0, #48	; 0x30
 8007032:	4573      	cmp	r3, lr
 8007034:	bf08      	it	eq
 8007036:	f042 0201 	orreq.w	r2, r2, #1
 800703a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800703e:	4283      	cmp	r3, r0
 8007040:	bf08      	it	eq
 8007042:	f042 0201 	orreq.w	r2, r2, #1
 8007046:	3030      	adds	r0, #48	; 0x30
 8007048:	4573      	cmp	r3, lr
 800704a:	bf08      	it	eq
 800704c:	f042 0201 	orreq.w	r2, r2, #1
 8007050:	4283      	cmp	r3, r0
 8007052:	bf08      	it	eq
 8007054:	f042 0201 	orreq.w	r2, r2, #1
 8007058:	b91a      	cbnz	r2, 8007062 <HAL_DMA_IRQHandler+0xc2>
 800705a:	4a76      	ldr	r2, [pc, #472]	; (8007234 <HAL_DMA_IRQHandler+0x294>)
 800705c:	4293      	cmp	r3, r2
 800705e:	f040 820b 	bne.w	8007478 <HAL_DMA_IRQHandler+0x4d8>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007062:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8007066:	2208      	movs	r2, #8
 8007068:	f001 0c1f 	and.w	ip, r1, #31
 800706c:	fa02 f20c 	lsl.w	r2, r2, ip
 8007070:	4217      	tst	r7, r2
 8007072:	f040 818d 	bne.w	8007390 <HAL_DMA_IRQHandler+0x3f0>
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007076:	fa27 f20c 	lsr.w	r2, r7, ip
 800707a:	07d2      	lsls	r2, r2, #31
 800707c:	d50c      	bpl.n	8007098 <HAL_DMA_IRQHandler+0xf8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	0610      	lsls	r0, r2, #24
 8007082:	d509      	bpl.n	8007098 <HAL_DMA_IRQHandler+0xf8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007084:	2201      	movs	r2, #1
 8007086:	fa02 f20c 	lsl.w	r2, r2, ip
 800708a:	60a2      	str	r2, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800708c:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8007090:	f042 0202 	orr.w	r2, r2, #2
 8007094:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007098:	f04f 0e04 	mov.w	lr, #4
 800709c:	fa0e f00c 	lsl.w	r0, lr, ip
 80070a0:	4238      	tst	r0, r7
 80070a2:	d05b      	beq.n	800715c <HAL_DMA_IRQHandler+0x1bc>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	d14f      	bne.n	8007148 <HAL_DMA_IRQHandler+0x1a8>
 80070a8:	4a63      	ldr	r2, [pc, #396]	; (8007238 <HAL_DMA_IRQHandler+0x298>)
 80070aa:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800723c <HAL_DMA_IRQHandler+0x29c>
 80070ae:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8007230 <HAL_DMA_IRQHandler+0x290>
 80070b2:	454b      	cmp	r3, r9
 80070b4:	bf18      	it	ne
 80070b6:	4293      	cmpne	r3, r2
 80070b8:	f109 0948 	add.w	r9, r9, #72	; 0x48
 80070bc:	bf0c      	ite	eq
 80070be:	2201      	moveq	r2, #1
 80070c0:	2200      	movne	r2, #0
 80070c2:	4543      	cmp	r3, r8
 80070c4:	bf08      	it	eq
 80070c6:	f042 0201 	orreq.w	r2, r2, #1
 80070ca:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80070ce:	454b      	cmp	r3, r9
 80070d0:	bf08      	it	eq
 80070d2:	f042 0201 	orreq.w	r2, r2, #1
 80070d6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80070da:	4543      	cmp	r3, r8
 80070dc:	bf08      	it	eq
 80070de:	f042 0201 	orreq.w	r2, r2, #1
 80070e2:	f508 785c 	add.w	r8, r8, #880	; 0x370
 80070e6:	454b      	cmp	r3, r9
 80070e8:	bf08      	it	eq
 80070ea:	f042 0201 	orreq.w	r2, r2, #1
 80070ee:	f509 795c 	add.w	r9, r9, #880	; 0x370
 80070f2:	4543      	cmp	r3, r8
 80070f4:	bf08      	it	eq
 80070f6:	f042 0201 	orreq.w	r2, r2, #1
 80070fa:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80070fe:	454b      	cmp	r3, r9
 8007100:	bf08      	it	eq
 8007102:	f042 0201 	orreq.w	r2, r2, #1
 8007106:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800710a:	4543      	cmp	r3, r8
 800710c:	bf08      	it	eq
 800710e:	f042 0201 	orreq.w	r2, r2, #1
 8007112:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007116:	454b      	cmp	r3, r9
 8007118:	bf08      	it	eq
 800711a:	f042 0201 	orreq.w	r2, r2, #1
 800711e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007122:	4543      	cmp	r3, r8
 8007124:	bf08      	it	eq
 8007126:	f042 0201 	orreq.w	r2, r2, #1
 800712a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800712e:	454b      	cmp	r3, r9
 8007130:	bf08      	it	eq
 8007132:	f042 0201 	orreq.w	r2, r2, #1
 8007136:	4543      	cmp	r3, r8
 8007138:	bf08      	it	eq
 800713a:	f042 0201 	orreq.w	r2, r2, #1
 800713e:	b91a      	cbnz	r2, 8007148 <HAL_DMA_IRQHandler+0x1a8>
 8007140:	4a3c      	ldr	r2, [pc, #240]	; (8007234 <HAL_DMA_IRQHandler+0x294>)
 8007142:	4293      	cmp	r3, r2
 8007144:	f040 822f 	bne.w	80075a6 <HAL_DMA_IRQHandler+0x606>
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	0792      	lsls	r2, r2, #30
 800714c:	d506      	bpl.n	800715c <HAL_DMA_IRQHandler+0x1bc>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800714e:	60a0      	str	r0, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007150:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8007154:	f042 0204 	orr.w	r2, r2, #4
 8007158:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800715c:	2210      	movs	r2, #16
 800715e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8007162:	ea1c 0f07 	tst.w	ip, r7
 8007166:	d06f      	beq.n	8007248 <HAL_DMA_IRQHandler+0x2a8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007168:	2e00      	cmp	r6, #0
 800716a:	d146      	bne.n	80071fa <HAL_DMA_IRQHandler+0x25a>
 800716c:	4a32      	ldr	r2, [pc, #200]	; (8007238 <HAL_DMA_IRQHandler+0x298>)
 800716e:	4833      	ldr	r0, [pc, #204]	; (800723c <HAL_DMA_IRQHandler+0x29c>)
 8007170:	4e2f      	ldr	r6, [pc, #188]	; (8007230 <HAL_DMA_IRQHandler+0x290>)
 8007172:	4283      	cmp	r3, r0
 8007174:	bf18      	it	ne
 8007176:	4293      	cmpne	r3, r2
 8007178:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800717c:	bf0c      	ite	eq
 800717e:	2201      	moveq	r2, #1
 8007180:	2200      	movne	r2, #0
 8007182:	42b3      	cmp	r3, r6
 8007184:	bf08      	it	eq
 8007186:	f042 0201 	orreq.w	r2, r2, #1
 800718a:	3630      	adds	r6, #48	; 0x30
 800718c:	4283      	cmp	r3, r0
 800718e:	bf08      	it	eq
 8007190:	f042 0201 	orreq.w	r2, r2, #1
 8007194:	3030      	adds	r0, #48	; 0x30
 8007196:	42b3      	cmp	r3, r6
 8007198:	bf08      	it	eq
 800719a:	f042 0201 	orreq.w	r2, r2, #1
 800719e:	f506 765c 	add.w	r6, r6, #880	; 0x370
 80071a2:	4283      	cmp	r3, r0
 80071a4:	bf08      	it	eq
 80071a6:	f042 0201 	orreq.w	r2, r2, #1
 80071aa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80071ae:	42b3      	cmp	r3, r6
 80071b0:	bf08      	it	eq
 80071b2:	f042 0201 	orreq.w	r2, r2, #1
 80071b6:	3630      	adds	r6, #48	; 0x30
 80071b8:	4283      	cmp	r3, r0
 80071ba:	bf08      	it	eq
 80071bc:	f042 0201 	orreq.w	r2, r2, #1
 80071c0:	3030      	adds	r0, #48	; 0x30
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	bf08      	it	eq
 80071c6:	f042 0201 	orreq.w	r2, r2, #1
 80071ca:	3630      	adds	r6, #48	; 0x30
 80071cc:	4283      	cmp	r3, r0
 80071ce:	bf08      	it	eq
 80071d0:	f042 0201 	orreq.w	r2, r2, #1
 80071d4:	3030      	adds	r0, #48	; 0x30
 80071d6:	42b3      	cmp	r3, r6
 80071d8:	bf08      	it	eq
 80071da:	f042 0201 	orreq.w	r2, r2, #1
 80071de:	3630      	adds	r6, #48	; 0x30
 80071e0:	4283      	cmp	r3, r0
 80071e2:	bf08      	it	eq
 80071e4:	f042 0201 	orreq.w	r2, r2, #1
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	bf08      	it	eq
 80071ec:	f042 0201 	orreq.w	r2, r2, #1
 80071f0:	b91a      	cbnz	r2, 80071fa <HAL_DMA_IRQHandler+0x25a>
 80071f2:	4a10      	ldr	r2, [pc, #64]	; (8007234 <HAL_DMA_IRQHandler+0x294>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	f040 81de 	bne.w	80075b6 <HAL_DMA_IRQHandler+0x616>
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8007200:	b312      	cbz	r2, 8007248 <HAL_DMA_IRQHandler+0x2a8>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007202:	f8c4 c008 	str.w	ip, [r4, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	0352      	lsls	r2, r2, #13
 800720a:	f100 818b 	bmi.w	8007524 <HAL_DMA_IRQHandler+0x584>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	05d6      	lsls	r6, r2, #23
 8007212:	d403      	bmi.n	800721c <HAL_DMA_IRQHandler+0x27c>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f022 0208 	bic.w	r2, r2, #8
 800721a:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800721c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007220:	b193      	cbz	r3, 8007248 <HAL_DMA_IRQHandler+0x2a8>
 8007222:	e00d      	b.n	8007240 <HAL_DMA_IRQHandler+0x2a0>
 8007224:	40020028 	.word	0x40020028
 8007228:	40020010 	.word	0x40020010
 800722c:	24000000 	.word	0x24000000
 8007230:	40020070 	.word	0x40020070
 8007234:	400204b8 	.word	0x400204b8
 8007238:	40020058 	.word	0x40020058
 800723c:	40020040 	.word	0x40020040
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007240:	4650      	mov	r0, sl
 8007242:	4798      	blx	r3
 8007244:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007248:	f001 011f 	and.w	r1, r1, #31
 800724c:	2620      	movs	r6, #32
 800724e:	408e      	lsls	r6, r1
 8007250:	423e      	tst	r6, r7
 8007252:	d06a      	beq.n	800732a <HAL_DMA_IRQHandler+0x38a>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007254:	f8da 2000 	ldr.w	r2, [sl]
 8007258:	4ba7      	ldr	r3, [pc, #668]	; (80074f8 <HAL_DMA_IRQHandler+0x558>)
 800725a:	48a8      	ldr	r0, [pc, #672]	; (80074fc <HAL_DMA_IRQHandler+0x55c>)
 800725c:	4fa8      	ldr	r7, [pc, #672]	; (8007500 <HAL_DMA_IRQHandler+0x560>)
 800725e:	4282      	cmp	r2, r0
 8007260:	bf18      	it	ne
 8007262:	429a      	cmpne	r2, r3
 8007264:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	42ba      	cmp	r2, r7
 8007270:	bf08      	it	eq
 8007272:	f043 0301 	orreq.w	r3, r3, #1
 8007276:	3730      	adds	r7, #48	; 0x30
 8007278:	4282      	cmp	r2, r0
 800727a:	bf08      	it	eq
 800727c:	f043 0301 	orreq.w	r3, r3, #1
 8007280:	3030      	adds	r0, #48	; 0x30
 8007282:	42ba      	cmp	r2, r7
 8007284:	bf08      	it	eq
 8007286:	f043 0301 	orreq.w	r3, r3, #1
 800728a:	3730      	adds	r7, #48	; 0x30
 800728c:	4282      	cmp	r2, r0
 800728e:	bf08      	it	eq
 8007290:	f043 0301 	orreq.w	r3, r3, #1
 8007294:	3030      	adds	r0, #48	; 0x30
 8007296:	42ba      	cmp	r2, r7
 8007298:	bf08      	it	eq
 800729a:	f043 0301 	orreq.w	r3, r3, #1
 800729e:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80072a2:	4282      	cmp	r2, r0
 80072a4:	bf08      	it	eq
 80072a6:	f043 0301 	orreq.w	r3, r3, #1
 80072aa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80072ae:	42ba      	cmp	r2, r7
 80072b0:	bf08      	it	eq
 80072b2:	f043 0301 	orreq.w	r3, r3, #1
 80072b6:	3730      	adds	r7, #48	; 0x30
 80072b8:	4282      	cmp	r2, r0
 80072ba:	bf08      	it	eq
 80072bc:	f043 0301 	orreq.w	r3, r3, #1
 80072c0:	3030      	adds	r0, #48	; 0x30
 80072c2:	42ba      	cmp	r2, r7
 80072c4:	bf08      	it	eq
 80072c6:	f043 0301 	orreq.w	r3, r3, #1
 80072ca:	3730      	adds	r7, #48	; 0x30
 80072cc:	4282      	cmp	r2, r0
 80072ce:	bf08      	it	eq
 80072d0:	f043 0301 	orreq.w	r3, r3, #1
 80072d4:	3030      	adds	r0, #48	; 0x30
 80072d6:	42ba      	cmp	r2, r7
 80072d8:	bf08      	it	eq
 80072da:	f043 0301 	orreq.w	r3, r3, #1
 80072de:	3730      	adds	r7, #48	; 0x30
 80072e0:	4282      	cmp	r2, r0
 80072e2:	bf08      	it	eq
 80072e4:	f043 0301 	orreq.w	r3, r3, #1
 80072e8:	42ba      	cmp	r2, r7
 80072ea:	bf08      	it	eq
 80072ec:	f043 0301 	orreq.w	r3, r3, #1
 80072f0:	b91b      	cbnz	r3, 80072fa <HAL_DMA_IRQHandler+0x35a>
 80072f2:	4b84      	ldr	r3, [pc, #528]	; (8007504 <HAL_DMA_IRQHandler+0x564>)
 80072f4:	429a      	cmp	r2, r3
 80072f6:	f040 8173 	bne.w	80075e0 <HAL_DMA_IRQHandler+0x640>
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007300:	b19b      	cbz	r3, 800732a <HAL_DMA_IRQHandler+0x38a>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007302:	60a6      	str	r6, [r4, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007304:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8007308:	2b04      	cmp	r3, #4
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800730a:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800730c:	f000 8114 	beq.w	8007538 <HAL_DMA_IRQHandler+0x598>
            hdma->XferAbortCallback(hdma);
          }
          return;
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007310:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007314:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007316:	f000 812d 	beq.w	8007574 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800731a:	031c      	lsls	r4, r3, #12
 800731c:	f140 8138 	bpl.w	8007590 <HAL_DMA_IRQHandler+0x5f0>

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
          }

          if(hdma->XferCpltCallback != NULL)
 8007320:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8007324:	b10b      	cbz	r3, 800732a <HAL_DMA_IRQHandler+0x38a>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007326:	4650      	mov	r0, sl
 8007328:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800732a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80df 	beq.w	80074f2 <HAL_DMA_IRQHandler+0x552>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007334:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8007338:	07d8      	lsls	r0, r3, #31
 800733a:	d51f      	bpl.n	800737c <HAL_DMA_IRQHandler+0x3dc>
      {
        hdma->State = HAL_DMA_STATE_ABORT;

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800733c:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8007340:	2404      	movs	r4, #4
 8007342:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007346:	6813      	ldr	r3, [r2, #0]
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800734e:	4b6e      	ldr	r3, [pc, #440]	; (8007508 <HAL_DMA_IRQHandler+0x568>)
 8007350:	fba3 3505 	umull	r3, r5, r3, r5
 8007354:	0aad      	lsrs	r5, r5, #10
 8007356:	e002      	b.n	800735e <HAL_DMA_IRQHandler+0x3be>
          if (++count > timeout)
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	07d9      	lsls	r1, r3, #31
 800735c:	d504      	bpl.n	8007368 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	3301      	adds	r3, #1
 8007362:	42ab      	cmp	r3, r5
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	d9f7      	bls.n	8007358 <HAL_DMA_IRQHandler+0x3b8>

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007368:	2300      	movs	r3, #0
 800736a:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	07db      	lsls	r3, r3, #31
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007372:	bf4c      	ite	mi
 8007374:	2303      	movmi	r3, #3
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007376:	2301      	movpl	r3, #1
 8007378:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800737c:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80b6 	beq.w	80074f2 <HAL_DMA_IRQHandler+0x552>
      hdma->State = HAL_DMA_STATE_READY;

      if (hdma->XferErrorCallback != NULL)
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007386:	4650      	mov	r0, sl
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007388:	b002      	add	sp, #8
 800738a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 800738e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	0740      	lsls	r0, r0, #29
 8007394:	d50a      	bpl.n	80073ac <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	f020 0004 	bic.w	r0, r0, #4
 800739c:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800739e:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073a0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ac:	fa27 f20c 	lsr.w	r2, r7, ip
 80073b0:	07d2      	lsls	r2, r2, #31
 80073b2:	f57f ae71 	bpl.w	8007098 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80073b6:	4a55      	ldr	r2, [pc, #340]	; (800750c <HAL_DMA_IRQHandler+0x56c>)
 80073b8:	4851      	ldr	r0, [pc, #324]	; (8007500 <HAL_DMA_IRQHandler+0x560>)
 80073ba:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8007520 <HAL_DMA_IRQHandler+0x580>
 80073be:	4283      	cmp	r3, r0
 80073c0:	bf18      	it	ne
 80073c2:	4293      	cmpne	r3, r2
 80073c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80073c8:	bf0c      	ite	eq
 80073ca:	2201      	moveq	r2, #1
 80073cc:	2200      	movne	r2, #0
 80073ce:	4543      	cmp	r3, r8
 80073d0:	bf08      	it	eq
 80073d2:	f042 0201 	orreq.w	r2, r2, #1
 80073d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80073da:	4283      	cmp	r3, r0
 80073dc:	bf08      	it	eq
 80073de:	f042 0201 	orreq.w	r2, r2, #1
 80073e2:	3030      	adds	r0, #48	; 0x30
 80073e4:	4543      	cmp	r3, r8
 80073e6:	bf08      	it	eq
 80073e8:	f042 0201 	orreq.w	r2, r2, #1
 80073ec:	f508 785c 	add.w	r8, r8, #880	; 0x370
 80073f0:	4283      	cmp	r3, r0
 80073f2:	bf08      	it	eq
 80073f4:	f042 0201 	orreq.w	r2, r2, #1
 80073f8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80073fc:	4543      	cmp	r3, r8
 80073fe:	bf08      	it	eq
 8007400:	f042 0201 	orreq.w	r2, r2, #1
 8007404:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007408:	4283      	cmp	r3, r0
 800740a:	bf08      	it	eq
 800740c:	f042 0201 	orreq.w	r2, r2, #1
 8007410:	3030      	adds	r0, #48	; 0x30
 8007412:	4543      	cmp	r3, r8
 8007414:	bf08      	it	eq
 8007416:	f042 0201 	orreq.w	r2, r2, #1
 800741a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800741e:	4283      	cmp	r3, r0
 8007420:	bf08      	it	eq
 8007422:	f042 0201 	orreq.w	r2, r2, #1
 8007426:	3030      	adds	r0, #48	; 0x30
 8007428:	4543      	cmp	r3, r8
 800742a:	bf08      	it	eq
 800742c:	f042 0201 	orreq.w	r2, r2, #1
 8007430:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007434:	4283      	cmp	r3, r0
 8007436:	bf08      	it	eq
 8007438:	f042 0201 	orreq.w	r2, r2, #1
 800743c:	3030      	adds	r0, #48	; 0x30
 800743e:	4543      	cmp	r3, r8
 8007440:	bf08      	it	eq
 8007442:	f042 0201 	orreq.w	r2, r2, #1
 8007446:	4283      	cmp	r3, r0
 8007448:	bf08      	it	eq
 800744a:	f042 0201 	orreq.w	r2, r2, #1
 800744e:	2a00      	cmp	r2, #0
 8007450:	f47f ae15 	bne.w	800707e <HAL_DMA_IRQHandler+0xde>
 8007454:	2e00      	cmp	r6, #0
 8007456:	f47f ae12 	bne.w	800707e <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800745a:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800745c:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800745e:	fa02 f20c 	lsl.w	r2, r2, ip
 8007462:	423a      	tst	r2, r7
 8007464:	f040 809f 	bne.w	80075a6 <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007468:	2210      	movs	r2, #16
 800746a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800746e:	ea17 0f0c 	tst.w	r7, ip
 8007472:	f43f aee9 	beq.w	8007248 <HAL_DMA_IRQHandler+0x2a8>
 8007476:	e679      	b.n	800716c <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007478:	4a25      	ldr	r2, [pc, #148]	; (8007510 <HAL_DMA_IRQHandler+0x570>)
 800747a:	4e26      	ldr	r6, [pc, #152]	; (8007514 <HAL_DMA_IRQHandler+0x574>)
 800747c:	4d26      	ldr	r5, [pc, #152]	; (8007518 <HAL_DMA_IRQHandler+0x578>)
 800747e:	42b3      	cmp	r3, r6
 8007480:	bf18      	it	ne
 8007482:	4293      	cmpne	r3, r2
 8007484:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8007488:	bf0c      	ite	eq
 800748a:	2201      	moveq	r2, #1
 800748c:	2200      	movne	r2, #0
 800748e:	42ab      	cmp	r3, r5
 8007490:	bf08      	it	eq
 8007492:	f042 0201 	orreq.w	r2, r2, #1
 8007496:	3528      	adds	r5, #40	; 0x28
 8007498:	42b3      	cmp	r3, r6
 800749a:	bf08      	it	eq
 800749c:	f042 0201 	orreq.w	r2, r2, #1
 80074a0:	3628      	adds	r6, #40	; 0x28
 80074a2:	42ab      	cmp	r3, r5
 80074a4:	bf08      	it	eq
 80074a6:	f042 0201 	orreq.w	r2, r2, #1
 80074aa:	3528      	adds	r5, #40	; 0x28
 80074ac:	42b3      	cmp	r3, r6
 80074ae:	bf08      	it	eq
 80074b0:	f042 0201 	orreq.w	r2, r2, #1
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	bf08      	it	eq
 80074b8:	f042 0201 	orreq.w	r2, r2, #1
 80074bc:	b912      	cbnz	r2, 80074c4 <HAL_DMA_IRQHandler+0x524>
 80074be:	4a17      	ldr	r2, [pc, #92]	; (800751c <HAL_DMA_IRQHandler+0x57c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d116      	bne.n	80074f2 <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074c4:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 80074c8:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074ca:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074cc:	f005 051f 	and.w	r5, r5, #31
 80074d0:	40ae      	lsls	r6, r5
 80074d2:	420e      	tst	r6, r1
 80074d4:	d073      	beq.n	80075be <HAL_DMA_IRQHandler+0x61e>
 80074d6:	0757      	lsls	r7, r2, #29
 80074d8:	d571      	bpl.n	80075be <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074da:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074dc:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074de:	f140 809f 	bpl.w	8007620 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074e2:	03d1      	lsls	r1, r2, #15
 80074e4:	f100 80a2 	bmi.w	800762c <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074e8:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f47f af4a 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
}
 80074f2:	b002      	add	sp, #8
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	40020010 	.word	0x40020010
 80074fc:	40020028 	.word	0x40020028
 8007500:	40020040 	.word	0x40020040
 8007504:	400204b8 	.word	0x400204b8
 8007508:	1b4e81b5 	.word	0x1b4e81b5
 800750c:	40020058 	.word	0x40020058
 8007510:	58025408 	.word	0x58025408
 8007514:	5802541c 	.word	0x5802541c
 8007518:	58025430 	.word	0x58025430
 800751c:	58025494 	.word	0x58025494
 8007520:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	031b      	lsls	r3, r3, #12
 8007528:	f57f ae78 	bpl.w	800721c <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800752c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f ae85 	bne.w	8007240 <HAL_DMA_IRQHandler+0x2a0>
 8007536:	e687      	b.n	8007248 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007538:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800753c:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007540:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007542:	6953      	ldr	r3, [r2, #20]
 8007544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007548:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800754a:	b33d      	cbz	r5, 800759c <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800754c:	6813      	ldr	r3, [r2, #0]
 800754e:	f023 0308 	bic.w	r3, r3, #8
 8007552:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007554:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8007556:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8007558:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800755a:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800755e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007562:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 8007564:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007568:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800756c:	2b00      	cmp	r3, #0
 800756e:	f47f af0a 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
 8007572:	e7be      	b.n	80074f2 <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007574:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007578:	f47f aed2 	bne.w	8007320 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800757c:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800757e:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007580:	f021 0110 	bic.w	r1, r1, #16
 8007584:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 8007586:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800758a:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 800758e:	e6c7      	b.n	8007320 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 8007590:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f aec6 	bne.w	8007326 <HAL_DMA_IRQHandler+0x386>
 800759a:	e6c6      	b.n	800732a <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800759c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1d3      	bne.n	800754c <HAL_DMA_IRQHandler+0x5ac>
 80075a4:	e7d6      	b.n	8007554 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075a6:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075a8:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075aa:	fa02 fc0c 	lsl.w	ip, r2, ip
 80075ae:	ea17 0f0c 	tst.w	r7, ip
 80075b2:	f43f ae49 	beq.w	8007248 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80075bc:	e620      	b.n	8007200 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075be:	2602      	movs	r6, #2
 80075c0:	40ae      	lsls	r6, r5
 80075c2:	420e      	tst	r6, r1
 80075c4:	d010      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x648>
 80075c6:	0797      	lsls	r7, r2, #30
 80075c8:	d50e      	bpl.n	80075e8 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075ca:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075cc:	0414      	lsls	r4, r2, #16
 80075ce:	d533      	bpl.n	8007638 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075d0:	03d0      	lsls	r0, r2, #15
 80075d2:	d43d      	bmi.n	8007650 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 80075d4:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f aed4 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
 80075de:	e788      	b.n	80074f2 <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075e0:	6813      	ldr	r3, [r2, #0]
 80075e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075e6:	e68b      	b.n	8007300 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80075e8:	2608      	movs	r6, #8
 80075ea:	40ae      	lsls	r6, r5
 80075ec:	420e      	tst	r6, r1
 80075ee:	d080      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x552>
 80075f0:	0711      	lsls	r1, r2, #28
 80075f2:	f57f af7e 	bpl.w	80074f2 <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075f6:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075f8:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80075fa:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075fc:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007600:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007604:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8007606:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800760a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800760c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007610:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007614:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007618:	2b00      	cmp	r3, #0
 800761a:	f47f aeb4 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
 800761e:	e768      	b.n	80074f2 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007620:	0692      	lsls	r2, r2, #26
 8007622:	d403      	bmi.n	800762c <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	f022 0204 	bic.w	r2, r2, #4
 800762a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800762c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f aea8 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
 8007636:	e75c      	b.n	80074f2 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007638:	f012 0220 	ands.w	r2, r2, #32
 800763c:	d108      	bne.n	8007650 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800763e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007640:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007642:	f021 010a 	bic.w	r1, r1, #10
 8007646:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8007648:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800764c:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007650:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	f47f ae96 	bne.w	8007386 <HAL_DMA_IRQHandler+0x3e6>
 800765a:	e74a      	b.n	80074f2 <HAL_DMA_IRQHandler+0x552>

0800765c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800765c:	b470      	push	{r4, r5, r6}
 800765e:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007660:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007664:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007668:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800766a:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800766e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8007672:	ea43 0304 	orr.w	r3, r3, r4
 8007676:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007678:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800767a:	d008      	beq.n	800768e <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800767c:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8007680:	d002      	beq.n	8007688 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007682:	60e9      	str	r1, [r5, #12]
  }
}
 8007684:	bc70      	pop	{r4, r5, r6}
 8007686:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007688:	6169      	str	r1, [r5, #20]
}
 800768a:	bc70      	pop	{r4, r5, r6}
 800768c:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800768e:	6883      	ldr	r3, [r0, #8]
 8007690:	b1b3      	cbz	r3, 80076c0 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007692:	2b01      	cmp	r3, #1
 8007694:	d017      	beq.n	80076c6 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007696:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007698:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800769c:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80076a0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80076a2:	d01e      	beq.n	80076e2 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80076a4:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80076a6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80076aa:	d00f      	beq.n	80076cc <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80076ac:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80076ae:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076b0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80076b2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076b4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80076b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80076bc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80076c0:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80076c2:	bc70      	pop	{r4, r5, r6}
 80076c4:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 80076c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80076ca:	e7f9      	b.n	80076c0 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 80076cc:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 80076ce:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80076d0:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 80076d2:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80076d4:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80076d8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80076dc:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80076e0:	e7ee      	b.n	80076c0 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 80076e2:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 80076e4:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80076e6:	02c9      	lsls	r1, r1, #11
 80076e8:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80076ec:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80076f0:	e7e6      	b.n	80076c0 <DMA2D_SetConfig+0x64>
 80076f2:	bf00      	nop

080076f4 <HAL_DMA2D_MspInit>:
}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop

080076f8 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d036      	beq.n	800776a <HAL_DMA2D_Init+0x72>
{
 80076fc:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80076fe:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8007702:	4604      	mov	r4, r0
 8007704:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007708:	b353      	cbz	r3, 8007760 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800770a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800770c:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800770e:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007710:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007712:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007716:	4916      	ldr	r1, [pc, #88]	; (8007770 <HAL_DMA2D_Init+0x78>)
 8007718:	681e      	ldr	r6, [r3, #0]
 800771a:	6862      	ldr	r2, [r4, #4]
 800771c:	4031      	ands	r1, r6
 800771e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007720:	4814      	ldr	r0, [pc, #80]	; (8007774 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007722:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007724:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007726:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007728:	69a1      	ldr	r1, [r4, #24]
 800772a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800772c:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800772e:	4912      	ldr	r1, [pc, #72]	; (8007778 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007730:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007732:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007734:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007736:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007738:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800773a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800773c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800773e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007740:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007742:	0552      	lsls	r2, r2, #21
 8007744:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007746:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800774a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800774e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007750:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007754:	430a      	orrs	r2, r1
 8007756:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007758:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800775a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800775e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8007760:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8007764:	f7ff ffc6 	bl	80076f4 <HAL_DMA2D_MspInit>
 8007768:	e7cf      	b.n	800770a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800776a:	2001      	movs	r0, #1
}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	fff8ffbf 	.word	0xfff8ffbf
 8007774:	fffffef8 	.word	0xfffffef8
 8007778:	ffff0000 	.word	0xffff0000

0800777c <HAL_DMA2D_Start>:
{
 800777c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800777e:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8007782:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8007784:	2d01      	cmp	r5, #1
 8007786:	d011      	beq.n	80077ac <HAL_DMA2D_Start+0x30>
 8007788:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800778a:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800778c:	2502      	movs	r5, #2
 800778e:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007790:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8007792:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007796:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800779a:	f7ff ff5f 	bl	800765c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800779e:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80077a0:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	4333      	orrs	r3, r6
 80077a6:	6013      	str	r3, [r2, #0]
}
 80077a8:	b003      	add	sp, #12
 80077aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80077ac:	2002      	movs	r0, #2
}
 80077ae:	b003      	add	sp, #12
 80077b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b2:	bf00      	nop

080077b4 <HAL_DMA2D_CLUTLoad>:
{
 80077b4:	b430      	push	{r4, r5}
 80077b6:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 80077b8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 80077bc:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 80077be:	2c01      	cmp	r4, #1
{
 80077c0:	e905 000e 	stmdb	r5, {r1, r2, r3}
 80077c4:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 80077c8:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 80077ca:	d02b      	beq.n	8007824 <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077cc:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 80077ce:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077d0:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80077d4:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 80077d6:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80077da:	b18a      	cbz	r2, 8007800 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80077dc:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	4c12      	ldr	r4, [pc, #72]	; (800782c <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 80077e2:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80077e4:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 80077e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80077ea:	69d1      	ldr	r1, [r2, #28]
 80077ec:	400c      	ands	r4, r1
 80077ee:	4323      	orrs	r3, r4
 80077f0:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 80077f2:	69d3      	ldr	r3, [r2, #28]
 80077f4:	f043 0320 	orr.w	r3, r3, #32
 80077f8:	61d3      	str	r3, [r2, #28]
}
 80077fa:	b004      	add	sp, #16
 80077fc:	bc30      	pop	{r4, r5}
 80077fe:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007800:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	4c09      	ldr	r4, [pc, #36]	; (800782c <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007806:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007808:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800780c:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 800780e:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007810:	400c      	ands	r4, r1
 8007812:	4323      	orrs	r3, r4
 8007814:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 8007816:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007818:	f043 0320 	orr.w	r3, r3, #32
 800781c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800781e:	b004      	add	sp, #16
 8007820:	bc30      	pop	{r4, r5}
 8007822:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8007824:	2002      	movs	r0, #2
}
 8007826:	b004      	add	sp, #16
 8007828:	bc30      	pop	{r4, r5}
 800782a:	4770      	bx	lr
 800782c:	ffff00ef 	.word	0xffff00ef

08007830 <HAL_DMA2D_PollForTransfer>:
{
 8007830:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8007832:	2300      	movs	r3, #0
{
 8007834:	b082      	sub	sp, #8
 8007836:	4605      	mov	r5, r0
 8007838:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 800783a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800783c:	6803      	ldr	r3, [r0, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	07d2      	lsls	r2, r2, #31
 8007842:	d40f      	bmi.n	8007864 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007844:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007846:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007848:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800784a:	0692      	lsls	r2, r2, #26
 800784c:	d433      	bmi.n	80078b6 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 800784e:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007850:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007852:	2101      	movs	r1, #1
  return HAL_OK;
 8007854:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007856:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8007858:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800785c:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8007860:	b002      	add	sp, #8
 8007862:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8007864:	f7fe fce4 	bl	8006230 <HAL_GetTick>
 8007868:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	e001      	b.n	8007872 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 800786e:	1c60      	adds	r0, r4, #1
 8007870:	d148      	bne.n	8007904 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	0791      	lsls	r1, r2, #30
 8007876:	d4e5      	bmi.n	8007844 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800787c:	9a01      	ldr	r2, [sp, #4]
 800787e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8007882:	d0f4      	beq.n	800786e <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	0696      	lsls	r6, r2, #26
 8007888:	d503      	bpl.n	8007892 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800788a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800788c:	f042 0202 	orr.w	r2, r2, #2
 8007890:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	07d4      	lsls	r4, r2, #31
 8007896:	d503      	bpl.n	80078a0 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007898:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80078a0:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078a2:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80078a4:	2200      	movs	r2, #0
        return HAL_ERROR;
 80078a6:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80078a8:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078aa:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 80078ae:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 80078b2:	b002      	add	sp, #8
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80078b6:	f7fe fcbb 	bl	8006230 <HAL_GetTick>
 80078ba:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	e001      	b.n	80078c4 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 80078c0:	1c61      	adds	r1, r4, #1
 80078c2:	d132      	bne.n	800792a <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	06d2      	lsls	r2, r2, #27
 80078c8:	d4c1      	bmi.n	800784e <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078ce:	9a01      	ldr	r2, [sp, #4]
 80078d0:	f012 0f29 	tst.w	r2, #41	; 0x29
 80078d4:	d0f4      	beq.n	80078c0 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078d6:	9a01      	ldr	r2, [sp, #4]
 80078d8:	0716      	lsls	r6, r2, #28
 80078da:	d503      	bpl.n	80078e4 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078dc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80078de:	f042 0204 	orr.w	r2, r2, #4
 80078e2:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078e4:	9a01      	ldr	r2, [sp, #4]
 80078e6:	0694      	lsls	r4, r2, #26
 80078e8:	d503      	bpl.n	80078f2 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078ea:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80078ec:	f042 0202 	orr.w	r2, r2, #2
 80078f0:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80078f2:	9a01      	ldr	r2, [sp, #4]
 80078f4:	07d0      	lsls	r0, r2, #31
 80078f6:	d503      	bpl.n	8007900 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078f8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007900:	2429      	movs	r4, #41	; 0x29
 8007902:	e7ce      	b.n	80078a2 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007904:	f7fe fc94 	bl	8006230 <HAL_GetTick>
 8007908:	1b80      	subs	r0, r0, r6
 800790a:	42a0      	cmp	r0, r4
 800790c:	d801      	bhi.n	8007912 <HAL_DMA2D_PollForTransfer+0xe2>
 800790e:	2c00      	cmp	r4, #0
 8007910:	d1ab      	bne.n	800786a <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007914:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8007916:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007918:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800791c:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800791e:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007922:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007924:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8007928:	e79a      	b.n	8007860 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800792a:	f7fe fc81 	bl	8006230 <HAL_GetTick>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	42a0      	cmp	r0, r4
 8007932:	d8ee      	bhi.n	8007912 <HAL_DMA2D_PollForTransfer+0xe2>
 8007934:	2c00      	cmp	r4, #0
 8007936:	d1c1      	bne.n	80078bc <HAL_DMA2D_PollForTransfer+0x8c>
 8007938:	e7eb      	b.n	8007912 <HAL_DMA2D_PollForTransfer+0xe2>
 800793a:	bf00      	nop

0800793c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800793c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8007940:	2a01      	cmp	r2, #1
 8007942:	d063      	beq.n	8007a0c <HAL_DMA2D_ConfigLayer+0xd0>
 8007944:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007946:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800794a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800794c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007950:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007952:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007954:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8007958:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800795c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800795e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8007960:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007962:	0512      	lsls	r2, r2, #20
 8007964:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007966:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800796a:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800796e:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007970:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007972:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007976:	d922      	bls.n	80079be <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007978:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800797a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800797e:	b981      	cbnz	r1, 80079a2 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	4923      	ldr	r1, [pc, #140]	; (8007a10 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007984:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007986:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007988:	4029      	ands	r1, r5
 800798a:	430a      	orrs	r2, r1
 800798c:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800798e:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8007990:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007992:	2101      	movs	r1, #1
  return HAL_OK;
 8007994:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007996:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800799a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800799e:	bc70      	pop	{r4, r5, r6}
 80079a0:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80079a2:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079a4:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80079a6:	d129      	bne.n	80079fc <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079a8:	69e6      	ldr	r6, [r4, #28]
 80079aa:	491a      	ldr	r1, [pc, #104]	; (8007a14 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80079ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079ae:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079b2:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 80079b6:	430a      	orrs	r2, r1
 80079b8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079ba:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079bc:	e7e8      	b.n	8007990 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80079be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80079c0:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80079c4:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80079c6:	b161      	cbz	r1, 80079e2 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079c8:	6819      	ldr	r1, [r3, #0]
 80079ca:	4c11      	ldr	r4, [pc, #68]	; (8007a10 <HAL_DMA2D_ConfigLayer+0xd4>)
 80079cc:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80079ce:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079d0:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079d2:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80079d4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079d8:	4322      	orrs	r2, r4
 80079da:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079dc:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80079de:	620d      	str	r5, [r1, #32]
 80079e0:	e7d6      	b.n	8007990 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	4c0a      	ldr	r4, [pc, #40]	; (8007a10 <HAL_DMA2D_ConfigLayer+0xd4>)
 80079e6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80079e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079ea:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079ec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80079ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079f2:	4322      	orrs	r2, r4
 80079f4:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079f6:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80079f8:	6288      	str	r0, [r1, #40]	; 0x28
 80079fa:	e7c9      	b.n	8007990 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079fc:	69e5      	ldr	r5, [r4, #28]
 80079fe:	4904      	ldr	r1, [pc, #16]	; (8007a10 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a00:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a02:	4029      	ands	r1, r5
 8007a04:	430a      	orrs	r2, r1
 8007a06:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a08:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a0a:	e7c1      	b.n	8007990 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8007a0c:	2002      	movs	r0, #2
}
 8007a0e:	4770      	bx	lr
 8007a10:	00ccfff0 	.word	0x00ccfff0
 8007a14:	00c0fff0 	.word	0x00c0fff0

08007a18 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	4688      	mov	r8, r1
 8007a20:	4617      	mov	r7, r2
 8007a22:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a24:	f7fe fc04 	bl	8006230 <HAL_GetTick>
 8007a28:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a2a:	e005      	b.n	8007a38 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007a2c:	f7fe fc00 	bl	8006230 <HAL_GetTick>
 8007a30:	1b84      	subs	r4, r0, r6
 8007a32:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8007a36:	d80e      	bhi.n	8007a56 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a38:	682c      	ldr	r4, [r5, #0]
 8007a3a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d5f5      	bpl.n	8007a2c <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007a40:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8007a44:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8007a46:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007a48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a4c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007a50:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8007a56:	2003      	movs	r0, #3
}
 8007a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007a5c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop

08007a60 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f000 80b3 	beq.w	8007bcc <HAL_DSI_Init+0x16c>
{
 8007a66:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007a68:	7c43      	ldrb	r3, [r0, #17]
{
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80a8 	beq.w	8007bc6 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8007a76:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007a78:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8007a7a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007a7c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007a7e:	9200      	str	r2, [sp, #0]
 8007a80:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007a84:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007a88:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007a8c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007a98:	f7fe fbca 	bl	8006230 <HAL_GetTick>
 8007a9c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007a9e:	e006      	b.n	8007aae <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007aa0:	f7fe fbc6 	bl	8006230 <HAL_GetTick>
 8007aa4:	1b83      	subs	r3, r0, r6
 8007aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aaa:	f200 8089 	bhi.w	8007bc0 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007ab4:	04d1      	lsls	r1, r2, #19
 8007ab6:	d5f3      	bpl.n	8007aa0 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007ab8:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007aba:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007abc:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007ac0:	682e      	ldr	r6, [r5, #0]
 8007ac2:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007ac4:	4942      	ldr	r1, [pc, #264]	; (8007bd0 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007ac6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8007aca:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007acc:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007ace:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007ad2:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007ad6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8007ada:	430a      	orrs	r2, r1
 8007adc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007ae0:	9001      	str	r0, [sp, #4]
 8007ae2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007aee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8007afa:	f7fe fb99 	bl	8006230 <HAL_GetTick>
 8007afe:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007b00:	e005      	b.n	8007b0e <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b02:	f7fe fb95 	bl	8006230 <HAL_GetTick>
 8007b06:	1b80      	subs	r0, r0, r6
 8007b08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b0c:	d858      	bhi.n	8007bc0 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007b14:	05d2      	lsls	r2, r2, #23
 8007b16:	d5f4      	bpl.n	8007b02 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b1c:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b20:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8007b22:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b24:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b28:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b2a:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007b32:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007b36:	f022 0203 	bic.w	r2, r2, #3
 8007b3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b3e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b42:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b44:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b46:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b48:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b4c:	bf38      	it	cc
 8007b4e:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b50:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007b54:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b58:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007b5a:	f020 0003 	bic.w	r0, r0, #3
 8007b5e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b66:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b68:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b6a:	682d      	ldr	r5, [r5, #0]
 8007b6c:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007b74:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b76:	fb0c f505 	mul.w	r5, ip, r5
 8007b7a:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007b7c:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b80:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007b84:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b86:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b88:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b8a:	ea46 060e 	orr.w	r6, r6, lr
 8007b8e:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8007b90:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007b92:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b96:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007b9a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8007b9e:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8007ba2:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007ba4:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8007ba8:	432a      	orrs	r2, r5
 8007baa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007bae:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007bb2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007bb6:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007bb8:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007bba:	7466      	strb	r6, [r4, #17]
}
 8007bbc:	b003      	add	sp, #12
 8007bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007bc0:	2003      	movs	r0, #3
}
 8007bc2:	b003      	add	sp, #12
 8007bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8007bc6:	f7ff ff49 	bl	8007a5c <HAL_DSI_MspInit>
 8007bca:	e754      	b.n	8007a76 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8007bcc:	2001      	movs	r0, #1
}
 8007bce:	4770      	bx	lr
 8007bd0:	fffc8603 	.word	0xfffc8603
 8007bd4:	003d0900 	.word	0x003d0900

08007bd8 <HAL_DSI_TearingEffectCallback>:
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <HAL_DSI_EndOfRefreshCallback>:
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <HAL_DSI_ErrorCallback>:
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007be4:	6803      	ldr	r3, [r0, #0]
 8007be6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007bea:	07d1      	lsls	r1, r2, #31
{
 8007bec:	b510      	push	{r4, lr}
 8007bee:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007bf0:	d503      	bpl.n	8007bfa <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007bf2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007bf6:	07d2      	lsls	r2, r2, #31
 8007bf8:	d462      	bmi.n	8007cc0 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007bfa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007bfe:	0791      	lsls	r1, r2, #30
 8007c00:	d503      	bpl.n	8007c0a <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007c02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007c06:	0792      	lsls	r2, r2, #30
 8007c08:	d44f      	bmi.n	8007caa <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007c0a:	69a3      	ldr	r3, [r4, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d04b      	beq.n	8007ca8 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007c10:	6821      	ldr	r1, [r4, #0]
 8007c12:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007c16:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007c1a:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007c1e:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007c20:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007c24:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007c26:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007c28:	b119      	cbz	r1, 8007c32 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007c2a:	6961      	ldr	r1, [r4, #20]
 8007c2c:	f041 0101 	orr.w	r1, r1, #1
 8007c30:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007c32:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007c36:	d003      	beq.n	8007c40 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007c38:	6962      	ldr	r2, [r4, #20]
 8007c3a:	f042 0202 	orr.w	r2, r2, #2
 8007c3e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007c40:	07d8      	lsls	r0, r3, #31
 8007c42:	d503      	bpl.n	8007c4c <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007c44:	6962      	ldr	r2, [r4, #20]
 8007c46:	f042 0204 	orr.w	r2, r2, #4
 8007c4a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007c4c:	0799      	lsls	r1, r3, #30
 8007c4e:	d503      	bpl.n	8007c58 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007c50:	6962      	ldr	r2, [r4, #20]
 8007c52:	f042 0208 	orr.w	r2, r2, #8
 8007c56:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007c58:	f013 0f0c 	tst.w	r3, #12
 8007c5c:	d003      	beq.n	8007c66 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007c5e:	6962      	ldr	r2, [r4, #20]
 8007c60:	f042 0210 	orr.w	r2, r2, #16
 8007c64:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007c66:	06da      	lsls	r2, r3, #27
 8007c68:	d503      	bpl.n	8007c72 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007c6a:	6962      	ldr	r2, [r4, #20]
 8007c6c:	f042 0220 	orr.w	r2, r2, #32
 8007c70:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007c72:	0698      	lsls	r0, r3, #26
 8007c74:	d503      	bpl.n	8007c7e <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007c76:	6962      	ldr	r2, [r4, #20]
 8007c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c7c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007c7e:	0659      	lsls	r1, r3, #25
 8007c80:	d503      	bpl.n	8007c8a <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007c82:	6962      	ldr	r2, [r4, #20]
 8007c84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c88:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007c8a:	061a      	lsls	r2, r3, #24
 8007c8c:	d503      	bpl.n	8007c96 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007c8e:	6962      	ldr	r2, [r4, #20]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c94:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007c96:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007c9a:	d003      	beq.n	8007ca4 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ca2:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007ca4:	6963      	ldr	r3, [r4, #20]
 8007ca6:	b93b      	cbnz	r3, 8007cb8 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007ca8:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007caa:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007cac:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007cae:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007cb2:	f7ff ff93 	bl	8007bdc <HAL_DSI_EndOfRefreshCallback>
 8007cb6:	e7a8      	b.n	8007c0a <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff ff91 	bl	8007be0 <HAL_DSI_ErrorCallback>
}
 8007cbe:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007cc6:	f7ff ff87 	bl	8007bd8 <HAL_DSI_TearingEffectCallback>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	e795      	b.n	8007bfa <HAL_DSI_IRQHandler+0x16>
 8007cce:	bf00      	nop

08007cd0 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007cd0:	7c03      	ldrb	r3, [r0, #16]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	f000 8113 	beq.w	8007efe <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007cd8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8007cda:	2201      	movs	r2, #1
{
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8007ce0:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007ce2:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007ce6:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007cec:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007cf0:	4e84      	ldr	r6, [pc, #528]	; (8007f04 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007cf2:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007cf4:	4d84      	ldr	r5, [pc, #528]	; (8007f08 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007cf6:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007cfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8007d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d0a:	f022 0203 	bic.w	r2, r2, #3
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007d10:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007d12:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007d16:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007d1a:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d1e:	ea06 0602 	and.w	r6, r6, r2
 8007d22:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d26:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007d2a:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d32:	ea02 0205 	and.w	r2, r2, r5
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007d38:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8007d3a:	ea47 0708 	orr.w	r7, r7, r8
 8007d3e:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007d40:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8007d42:	ea06 0605 	and.w	r6, r6, r5
 8007d46:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007d48:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8007d4a:	ea45 050e 	orr.w	r5, r5, lr
 8007d4e:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007d50:	68dd      	ldr	r5, [r3, #12]
 8007d52:	f025 0503 	bic.w	r5, r5, #3
 8007d56:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	ea42 020c 	orr.w	r2, r2, ip
 8007d5e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007d60:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007d62:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007d64:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007d68:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007d6c:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007d6e:	ea42 0206 	orr.w	r2, r2, r6
 8007d72:	695d      	ldr	r5, [r3, #20]
 8007d74:	ea42 0207 	orr.w	r2, r2, r7
 8007d78:	ea42 0205 	orr.w	r2, r2, r5
 8007d7c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	f022 020f 	bic.w	r2, r2, #15
 8007d84:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	ea42 0200 	orr.w	r2, r2, r0
 8007d8c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007d8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d92:	f022 020e 	bic.w	r2, r2, #14
 8007d96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8007d9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d9e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007da2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007da6:	d107      	bne.n	8007db8 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007da8:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007daa:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007dac:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8007db0:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	432a      	orrs	r2, r5
 8007db6:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007db8:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007dba:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007dbc:	4a53      	ldr	r2, [pc, #332]	; (8007f0c <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007dbe:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007dc0:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007dc2:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007dc6:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007dca:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007dcc:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007dce:	4f50      	ldr	r7, [pc, #320]	; (8007f10 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007dd0:	4305      	orrs	r5, r0
 8007dd2:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007dd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007dd6:	4010      	ands	r0, r2
 8007dd8:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8007ddc:	484d      	ldr	r0, [pc, #308]	; (8007f14 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007dde:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007de2:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dea:	4017      	ands	r7, r2
 8007dec:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007dee:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007df0:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007df4:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007df8:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8007dfa:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8007dfc:	4005      	ands	r5, r0
 8007dfe:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e02:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007e06:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8007e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e0e:	4002      	ands	r2, r0
 8007e10:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007e12:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007e14:	4a3b      	ldr	r2, [pc, #236]	; (8007f04 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007e16:	ea47 070e 	orr.w	r7, r7, lr
 8007e1a:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007e1c:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8007e1e:	4007      	ands	r7, r0

  return HAL_OK;
 8007e20:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007e22:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007e24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8007e26:	ea45 050c 	orr.w	r5, r5, ip
 8007e2a:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007e2c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007e2e:	402a      	ands	r2, r5
 8007e30:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e32:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007e34:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e36:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e3a:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007e3c:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e40:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007e42:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007e44:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8007e48:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4c:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007e50:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8007e56:	699f      	ldr	r7, [r3, #24]
 8007e58:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8007e5c:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007e5e:	699d      	ldr	r5, [r3, #24]
 8007e60:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007e64:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007e68:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8007e6a:	699d      	ldr	r5, [r3, #24]
 8007e6c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007e70:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007e78:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007e7c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8007e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007e86:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007e88:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007e8c:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007e90:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8007e92:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007e94:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8007e98:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007e9a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007e9c:	ea45 050e 	orr.w	r5, r5, lr
 8007ea0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8007ea2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007ea4:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8007ea8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eac:	ea42 020c 	orr.w	r2, r2, ip
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007eb2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007eb4:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007eb6:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007eba:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007ebe:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec2:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007ec4:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8007eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ecc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007ed2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007ed4:	ea45 050e 	orr.w	r5, r5, lr
 8007ed8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8007eda:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007edc:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007ee0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8007ee2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007ee4:	ea41 010c 	orr.w	r1, r1, ip
 8007ee8:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8007eea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007eec:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007ef0:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef4:	433a      	orrs	r2, r7
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8007ef8:	7426      	strb	r6, [r4, #16]
}
 8007efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8007efe:	2002      	movs	r0, #2
}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	ffffc000 	.word	0xffffc000
 8007f08:	ffffe000 	.word	0xffffe000
 8007f0c:	fffff000 	.word	0xfffff000
 8007f10:	ffff8000 	.word	0xffff8000
 8007f14:	fffffc00 	.word	0xfffffc00

08007f18 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f18:	7c02      	ldrb	r2, [r0, #16]
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	d00e      	beq.n	8007f3c <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f1e:	6802      	ldr	r2, [r0, #0]
 8007f20:	4603      	mov	r3, r0
{
 8007f22:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f24:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007f26:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f28:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8007f2c:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f2e:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007f30:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007f32:	4321      	orrs	r1, r4
 8007f34:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8007f36:	741d      	strb	r5, [r3, #16]
}
 8007f38:	bc30      	pop	{r4, r5}
 8007f3a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007f3c:	2002      	movs	r0, #2
}
 8007f3e:	4770      	bx	lr

08007f40 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f40:	7c03      	ldrb	r3, [r0, #16]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d021      	beq.n	8007f8a <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007f46:	6803      	ldr	r3, [r0, #0]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007f4c:	4608      	mov	r0, r1
{
 8007f4e:	b410      	push	{r4}
 8007f50:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8007f52:	9100      	str	r1, [sp, #0]
 8007f54:	685c      	ldr	r4, [r3, #4]
 8007f56:	f044 0401 	orr.w	r4, r4, #1
 8007f5a:	605c      	str	r4, [r3, #4]
 8007f5c:	685c      	ldr	r4, [r3, #4]
 8007f5e:	f004 0401 	and.w	r4, r4, #1
 8007f62:	9400      	str	r4, [sp, #0]
 8007f64:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007f66:	9101      	str	r1, [sp, #4]
 8007f68:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8007f6c:	f044 0408 	orr.w	r4, r4, #8
 8007f70:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8007f74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8007f78:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	9b01      	ldr	r3, [sp, #4]
}
 8007f82:	b003      	add	sp, #12
 8007f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f88:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007f8a:	2002      	movs	r0, #2
}
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007f90:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f92:	7c05      	ldrb	r5, [r0, #16]
{
 8007f94:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007f96:	2d01      	cmp	r5, #1
 8007f98:	d00a      	beq.n	8007fb0 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007f9a:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8007f9c:	2501      	movs	r5, #1
 8007f9e:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007fa0:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8007fa2:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007fa4:	f7ff fd38 	bl	8007a18 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007fac:	b002      	add	sp, #8
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8007fb0:	2002      	movs	r0, #2
}
 8007fb2:	b002      	add	sp, #8
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
 8007fb6:	bf00      	nop

08007fb8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007fbe:	7c03      	ldrb	r3, [r0, #16]
{
 8007fc0:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d05e      	beq.n	8008084 <HAL_DSI_LongWrite+0xcc>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4607      	mov	r7, r0
 8007fca:	4689      	mov	r9, r1
 8007fcc:	4692      	mov	sl, r2
 8007fce:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fd0:	f7fe f92e 	bl	8006230 <HAL_GetTick>
 8007fd4:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007fd6:	e005      	b.n	8007fe4 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007fd8:	f7fe f92a 	bl	8006230 <HAL_GetTick>
 8007fdc:	1b40      	subs	r0, r0, r5
 8007fde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007fe2:	d84b      	bhi.n	800807c <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8007fe8:	f014 0401 	ands.w	r4, r4, #1
 8007fec:	d0f4      	beq.n	8007fd8 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007fee:	4640      	mov	r0, r8
 8007ff0:	2803      	cmp	r0, #3
 8007ff2:	bf28      	it	cs
 8007ff4:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d046      	beq.n	800808a <HAL_DSI_LongWrite+0xd2>
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	1e5c      	subs	r4, r3, #1
 8008000:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8008002:	3301      	adds	r3, #1
 8008004:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8008008:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 800800a:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800800c:	fa02 f205 	lsl.w	r2, r2, r5
 8008010:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8008014:	d3f5      	bcc.n	8008002 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8008016:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8008018:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 800801a:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800801c:	ebb8 0000 	subs.w	r0, r8, r0
 8008020:	d017      	beq.n	8008052 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008022:	2804      	cmp	r0, #4
 8008024:	4684      	mov	ip, r0
 8008026:	f04f 0500 	mov.w	r5, #0
 800802a:	bf28      	it	cs
 800802c:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8008030:	462b      	mov	r3, r5
 8008032:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008036:	f816 4b01 	ldrb.w	r4, [r6], #1
 800803a:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 800803c:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800803e:	f105 0508 	add.w	r5, r5, #8
 8008042:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8008046:	d1f6      	bne.n	8008036 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8008048:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800804c:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 800804e:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8008050:	d1e7      	bne.n	8008022 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8008052:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008056:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800805a:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800805c:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8008060:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008062:	46c8      	mov	r8, r9
 8008064:	fa1f f989 	uxth.w	r9, r9
 8008068:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 800806c:	ea43 0309 	orr.w	r3, r3, r9
 8008070:	ea43 0308 	orr.w	r3, r3, r8
 8008074:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8008076:	743a      	strb	r2, [r7, #16]
}
 8008078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 800807c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800807e:	743c      	strb	r4, [r7, #16]
}
 8008080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8008084:	2002      	movs	r0, #2
}
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800808a:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 800808c:	e7e1      	b.n	8008052 <HAL_DSI_LongWrite+0x9a>
 800808e:	bf00      	nop

08008090 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008096:	7c02      	ldrb	r2, [r0, #16]
{
 8008098:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800809a:	2a01      	cmp	r2, #1
{
 800809c:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 800809e:	d070      	beq.n	8008182 <HAL_DSI_Read+0xf2>
 80080a0:	461e      	mov	r6, r3
 80080a2:	2301      	movs	r3, #1
 80080a4:	4607      	mov	r7, r0
 80080a6:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80080a8:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80080aa:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80080ac:	d80d      	bhi.n	80080ca <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80080ae:	2c06      	cmp	r4, #6
 80080b0:	d017      	beq.n	80080e2 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80080b2:	2c04      	cmp	r4, #4
 80080b4:	d04f      	beq.n	8008156 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80080b6:	2c14      	cmp	r4, #20
 80080b8:	d067      	beq.n	800818a <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80080ba:	2c24      	cmp	r4, #36	; 0x24
 80080bc:	d052      	beq.n	8008164 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 80080be:	2300      	movs	r3, #0
      return HAL_ERROR;
 80080c0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80080c2:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80080c4:	b002      	add	sp, #8
 80080c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80080ca:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80080ce:	b2f3      	uxtb	r3, r6
 80080d0:	2237      	movs	r2, #55	; 0x37
 80080d2:	f8cd c000 	str.w	ip, [sp]
 80080d6:	f7ff fc9f 	bl	8007a18 <DSI_ShortWrite>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d1ef      	bne.n	80080be <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80080de:	2c06      	cmp	r4, #6
 80080e0:	d1e7      	bne.n	80080b2 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80080e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80080e4:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 80080ec:	f043 0306 	orr.w	r3, r3, #6
 80080f0:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80080f2:	f7fe f89d 	bl	8006230 <HAL_GetTick>
 80080f6:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 80080f8:	e006      	b.n	8008108 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80080fa:	f7fe f899 	bl	8006230 <HAL_GetTick>
 80080fe:	eba0 0008 	sub.w	r0, r0, r8
 8008102:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008106:	d81b      	bhi.n	8008140 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8008108:	2e00      	cmp	r6, #0
 800810a:	dd1f      	ble.n	800814c <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008110:	f011 0110 	ands.w	r1, r1, #16
 8008114:	d1f1      	bne.n	80080fa <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8008116:	2e04      	cmp	r6, #4
 8008118:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 800811a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800811c:	bf28      	it	cs
 800811e:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8008120:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8008122:	fa22 f401 	lsr.w	r4, r2, r1
 8008126:	3108      	adds	r1, #8
 8008128:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 800812c:	429d      	cmp	r5, r3
 800812e:	d1f8      	bne.n	8008122 <HAL_DSI_Read+0x92>
 8008130:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008132:	f7fe f87d 	bl	8006230 <HAL_GetTick>
 8008136:	eba0 0008 	sub.w	r0, r0, r8
 800813a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800813e:	d9e3      	bls.n	8008108 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8008140:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008142:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008144:	743b      	strb	r3, [r7, #16]
}
 8008146:	b002      	add	sp, #8
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 800814c:	2000      	movs	r0, #0
 800814e:	7438      	strb	r0, [r7, #16]
}
 8008150:	b002      	add	sp, #8
 8008152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008156:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800815a:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800815c:	f043 0304 	orr.w	r3, r3, #4
 8008160:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8008162:	e7c6      	b.n	80080f2 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8008164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008166:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800816a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800816c:	7852      	ldrb	r2, [r2, #1]
 800816e:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8008174:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008176:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800817a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800817e:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8008180:	e7b7      	b.n	80080f2 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8008182:	2002      	movs	r0, #2
}
 8008184:	b002      	add	sp, #8
 8008186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800818a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800818c:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8008190:	7811      	ldrb	r1, [r2, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008194:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008198:	f043 0314 	orr.w	r3, r3, #20
 800819c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800819e:	e7a8      	b.n	80080f2 <HAL_DSI_Read+0x62>

080081a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a4:	680e      	ldr	r6, [r1, #0]
{
 80081a6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	f000 80d3 	beq.w	8008354 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80081ae:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081b0:	f8df a220 	ldr.w	sl, [pc, #544]	; 80083d4 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081b4:	f8df b220 	ldr.w	fp, [pc, #544]	; 80083d8 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081b8:	46b1      	mov	r9, r6
 80081ba:	e020      	b.n	80081fe <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80081bc:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081be:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081c2:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081c6:	f04f 0e0f 	mov.w	lr, #15
 80081ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081ce:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081d4:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 80081d8:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081da:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081de:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081e2:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081e6:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80081ea:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80081ec:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081ee:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081f0:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80081f2:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 80081f4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081f6:	fa39 f203 	lsrs.w	r2, r9, r3
 80081fa:	f000 80ab 	beq.w	8008354 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081fe:	2201      	movs	r2, #1
 8008200:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8008202:	ea12 0809 	ands.w	r8, r2, r9
 8008206:	d0f5      	beq.n	80081f4 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008208:	684c      	ldr	r4, [r1, #4]
 800820a:	005f      	lsls	r7, r3, #1
 800820c:	f024 0c10 	bic.w	ip, r4, #16
 8008210:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008214:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008216:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800821a:	f200 809e 	bhi.w	800835a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800821e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8008222:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008226:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008228:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800822a:	ea2e 0e05 	bic.w	lr, lr, r5
 800822e:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008230:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008232:	68ce      	ldr	r6, [r1, #12]
 8008234:	40be      	lsls	r6, r7
 8008236:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800823a:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800823c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8008240:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008244:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008248:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800824a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800824c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800824e:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008252:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008254:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008258:	fa02 f207 	lsl.w	r2, r2, r7
 800825c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8008260:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008262:	d0ab      	beq.n	80081bc <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8008264:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008266:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800826a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800826c:	fa02 f707 	lsl.w	r7, r2, r7
 8008270:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8008272:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008274:	00e6      	lsls	r6, r4, #3
 8008276:	d5bd      	bpl.n	80081f4 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008278:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800827c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008280:	f003 0203 	and.w	r2, r3, #3
 8008284:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008286:	f046 0602 	orr.w	r6, r6, #2
 800828a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800828e:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008290:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8008294:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8008298:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800829c:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082a0:	f006 0602 	and.w	r6, r6, #2
 80082a4:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082a6:	4e42      	ldr	r6, [pc, #264]	; (80083b0 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082a8:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082aa:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80082ac:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082ae:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082b2:	d020      	beq.n	80082f6 <HAL_GPIO_Init+0x156>
 80082b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80082b8:	42b0      	cmp	r0, r6
 80082ba:	d056      	beq.n	800836a <HAL_GPIO_Init+0x1ca>
 80082bc:	4e3d      	ldr	r6, [pc, #244]	; (80083b4 <HAL_GPIO_Init+0x214>)
 80082be:	42b0      	cmp	r0, r6
 80082c0:	d058      	beq.n	8008374 <HAL_GPIO_Init+0x1d4>
 80082c2:	4e3d      	ldr	r6, [pc, #244]	; (80083b8 <HAL_GPIO_Init+0x218>)
 80082c4:	42b0      	cmp	r0, r6
 80082c6:	d04b      	beq.n	8008360 <HAL_GPIO_Init+0x1c0>
 80082c8:	4e3c      	ldr	r6, [pc, #240]	; (80083bc <HAL_GPIO_Init+0x21c>)
 80082ca:	42b0      	cmp	r0, r6
 80082cc:	d05c      	beq.n	8008388 <HAL_GPIO_Init+0x1e8>
 80082ce:	4e3c      	ldr	r6, [pc, #240]	; (80083c0 <HAL_GPIO_Init+0x220>)
 80082d0:	42b0      	cmp	r0, r6
 80082d2:	d05e      	beq.n	8008392 <HAL_GPIO_Init+0x1f2>
 80082d4:	4e3b      	ldr	r6, [pc, #236]	; (80083c4 <HAL_GPIO_Init+0x224>)
 80082d6:	42b0      	cmp	r0, r6
 80082d8:	d051      	beq.n	800837e <HAL_GPIO_Init+0x1de>
 80082da:	4e3b      	ldr	r6, [pc, #236]	; (80083c8 <HAL_GPIO_Init+0x228>)
 80082dc:	42b0      	cmp	r0, r6
 80082de:	d05d      	beq.n	800839c <HAL_GPIO_Init+0x1fc>
 80082e0:	4e3a      	ldr	r6, [pc, #232]	; (80083cc <HAL_GPIO_Init+0x22c>)
 80082e2:	42b0      	cmp	r0, r6
 80082e4:	d05f      	beq.n	80083a6 <HAL_GPIO_Init+0x206>
 80082e6:	4e3a      	ldr	r6, [pc, #232]	; (80083d0 <HAL_GPIO_Init+0x230>)
 80082e8:	42b0      	cmp	r0, r6
 80082ea:	bf0c      	ite	eq
 80082ec:	2609      	moveq	r6, #9
 80082ee:	260a      	movne	r6, #10
 80082f0:	fa06 f202 	lsl.w	r2, r6, r2
 80082f4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082f6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80082f8:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80082fc:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008300:	03e5      	lsls	r5, r4, #15
    position++;
 8008302:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8008306:	bf54      	ite	pl
 8008308:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800830a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800830e:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008312:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8008314:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8008318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800831c:	bf54      	ite	pl
 800831e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008320:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008324:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8008326:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800832a:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800832c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008330:	bf54      	ite	pl
 8008332:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008334:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008338:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800833a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800833e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8008340:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8008342:	bf54      	ite	pl
 8008344:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8008346:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800834a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800834c:	fa39 f203 	lsrs.w	r2, r9, r3
 8008350:	f47f af55 	bne.w	80081fe <HAL_GPIO_Init+0x5e>
  }
}
 8008354:	b005      	add	sp, #20
 8008356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835a:	40bd      	lsls	r5, r7
 800835c:	43ed      	mvns	r5, r5
 800835e:	e775      	b.n	800824c <HAL_GPIO_Init+0xac>
 8008360:	2603      	movs	r6, #3
 8008362:	fa06 f202 	lsl.w	r2, r6, r2
 8008366:	4315      	orrs	r5, r2
 8008368:	e7c5      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 800836a:	2601      	movs	r6, #1
 800836c:	fa06 f202 	lsl.w	r2, r6, r2
 8008370:	4315      	orrs	r5, r2
 8008372:	e7c0      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 8008374:	2602      	movs	r6, #2
 8008376:	fa06 f202 	lsl.w	r2, r6, r2
 800837a:	4315      	orrs	r5, r2
 800837c:	e7bb      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 800837e:	2606      	movs	r6, #6
 8008380:	fa06 f202 	lsl.w	r2, r6, r2
 8008384:	4315      	orrs	r5, r2
 8008386:	e7b6      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 8008388:	2604      	movs	r6, #4
 800838a:	fa06 f202 	lsl.w	r2, r6, r2
 800838e:	4315      	orrs	r5, r2
 8008390:	e7b1      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 8008392:	2605      	movs	r6, #5
 8008394:	fa06 f202 	lsl.w	r2, r6, r2
 8008398:	4315      	orrs	r5, r2
 800839a:	e7ac      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 800839c:	2607      	movs	r6, #7
 800839e:	fa06 f202 	lsl.w	r2, r6, r2
 80083a2:	4315      	orrs	r5, r2
 80083a4:	e7a7      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 80083a6:	2608      	movs	r6, #8
 80083a8:	fa06 f202 	lsl.w	r2, r6, r2
 80083ac:	4315      	orrs	r5, r2
 80083ae:	e7a2      	b.n	80082f6 <HAL_GPIO_Init+0x156>
 80083b0:	58020000 	.word	0x58020000
 80083b4:	58020800 	.word	0x58020800
 80083b8:	58020c00 	.word	0x58020c00
 80083bc:	58021000 	.word	0x58021000
 80083c0:	58021400 	.word	0x58021400
 80083c4:	58021800 	.word	0x58021800
 80083c8:	58021c00 	.word	0x58021c00
 80083cc:	58022000 	.word	0x58022000
 80083d0:	58022400 	.word	0x58022400
 80083d4:	58024400 	.word	0x58024400
 80083d8:	58000080 	.word	0x58000080

080083dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083dc:	b902      	cbnz	r2, 80083e0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80083de:	0409      	lsls	r1, r1, #16
 80083e0:	6181      	str	r1, [r0, #24]
  }
}
 80083e2:	4770      	bx	lr

080083e4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083e4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083e6:	ea01 0203 	and.w	r2, r1, r3
 80083ea:	ea21 0103 	bic.w	r1, r1, r3
 80083ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083f2:	6181      	str	r1, [r0, #24]
}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop

080083f8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80083f8:	4a04      	ldr	r2, [pc, #16]	; (800840c <HAL_HSEM_FastTake+0x14>)
 80083fa:	3020      	adds	r0, #32
 80083fc:	4b04      	ldr	r3, [pc, #16]	; (8008410 <HAL_HSEM_FastTake+0x18>)
 80083fe:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8008402:	1ac0      	subs	r0, r0, r3
 8008404:	bf18      	it	ne
 8008406:	2001      	movne	r0, #1
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	58026400 	.word	0x58026400
 8008410:	80000300 	.word	0x80000300

08008414 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008414:	4b02      	ldr	r3, [pc, #8]	; (8008420 <HAL_HSEM_Release+0xc>)
 8008416:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800841a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800841e:	4770      	bx	lr
 8008420:	58026400 	.word	0x58026400

08008424 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008424:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008426:	f04f 0c00 	mov.w	ip, #0
{
 800842a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800842e:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008430:	6804      	ldr	r4, [r0, #0]
 8008432:	6848      	ldr	r0, [r1, #4]
{
 8008434:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008436:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008438:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800843a:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800843e:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008442:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008446:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008448:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800844c:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008450:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008452:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008456:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008458:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800845a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800845c:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008460:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008464:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008468:	4f38      	ldr	r7, [pc, #224]	; (800854c <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800846a:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800846c:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008470:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008474:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008476:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800847a:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800847c:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008480:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008484:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008486:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800848a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800848c:	68e5      	ldr	r5, [r4, #12]
 800848e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8008492:	444d      	add	r5, r9
 8008494:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008498:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800849a:	691d      	ldr	r5, [r3, #16]
 800849c:	f025 0507 	bic.w	r5, r5, #7
 80084a0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80084a2:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80084a6:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80084a8:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80084ac:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80084b0:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80084b4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80084b8:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80084bc:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 80084c0:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80084c4:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80084c6:	695d      	ldr	r5, [r3, #20]
 80084c8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80084cc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80084ce:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084d2:	69dd      	ldr	r5, [r3, #28]
 80084d4:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084d6:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084d8:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084da:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 80084de:	4305      	orrs	r5, r0
 80084e0:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80084e4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084e8:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084ea:	f1be 0f00 	cmp.w	lr, #0
 80084ee:	d00b      	beq.n	8008508 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084f0:	f1be 0f01 	cmp.w	lr, #1
 80084f4:	d026      	beq.n	8008544 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084f6:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084fa:	2d02      	cmp	r5, #2
 80084fc:	d902      	bls.n	8008504 <LTDC_SetConfig+0xe0>
 80084fe:	f1be 0f07 	cmp.w	lr, #7
 8008502:	d121      	bne.n	8008548 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008504:	2702      	movs	r7, #2
 8008506:	e000      	b.n	800850a <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8008508:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800850a:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800850c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800850e:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008510:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008514:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008518:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800851c:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800851e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008520:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008524:	490a      	ldr	r1, [pc, #40]	; (8008550 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008526:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800852a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800852c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800852e:	4001      	ands	r1, r0
 8008530:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008532:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008536:	58a3      	ldr	r3, [r4, r2]
 8008538:	f043 0301 	orr.w	r3, r3, #1
 800853c:	50a3      	str	r3, [r4, r2]
}
 800853e:	b003      	add	sp, #12
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8008544:	2703      	movs	r7, #3
 8008546:	e7e0      	b.n	800850a <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8008548:	2701      	movs	r7, #1
 800854a:	e7de      	b.n	800850a <LTDC_SetConfig+0xe6>
 800854c:	fffff8f8 	.word	0xfffff8f8
 8008550:	fffff800 	.word	0xfffff800

08008554 <HAL_LTDC_MspInit>:
}
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8008558:	2800      	cmp	r0, #0
 800855a:	d06d      	beq.n	8008638 <HAL_LTDC_Init+0xe0>
{
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800855e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8008562:	4604      	mov	r4, r0
 8008564:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008568:	2b00      	cmp	r3, #0
 800856a:	d060      	beq.n	800862e <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800856c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800856e:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008570:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008572:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008574:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008578:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800857a:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800857c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008580:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008584:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008586:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008588:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800858a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800858e:	4e2b      	ldr	r6, [pc, #172]	; (800863c <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008590:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008592:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008594:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008596:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008598:	4302      	orrs	r2, r0
 800859a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	4032      	ands	r2, r6
 80085a0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085a2:	6898      	ldr	r0, [r3, #8]
 80085a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80085a8:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085aa:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085ae:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085b2:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80085b4:	68d8      	ldr	r0, [r3, #12]
 80085b6:	4030      	ands	r0, r6
 80085b8:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80085c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085c2:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80085c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085ca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80085cc:	691a      	ldr	r2, [r3, #16]
 80085ce:	4032      	ands	r2, r6
 80085d0:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80085d2:	6918      	ldr	r0, [r3, #16]
 80085d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 80085d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80085da:	ea40 000c 	orr.w	r0, r0, ip
 80085de:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80085e0:	6958      	ldr	r0, [r3, #20]
 80085e2:	4006      	ands	r6, r0
 80085e4:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80085e6:	695a      	ldr	r2, [r3, #20]
 80085e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80085ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80085ee:	4302      	orrs	r2, r0
 80085f0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80085f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80085f4:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80085f8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80085fc:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008600:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008602:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008604:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008608:	4302      	orrs	r2, r0
  return HAL_OK;
 800860a:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800860c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8008610:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008614:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008618:	f042 0206 	orr.w	r2, r2, #6
 800861c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	432a      	orrs	r2, r5
 8008622:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008624:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008628:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800862c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800862e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008632:	f7ff ff8f 	bl	8008554 <HAL_LTDC_MspInit>
 8008636:	e799      	b.n	800856c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8008638:	2001      	movs	r0, #1
}
 800863a:	4770      	bx	lr
 800863c:	f000f800 	.word	0xf000f800

08008640 <HAL_LTDC_ErrorCallback>:
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <HAL_LTDC_ReloadEventCallback>:
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop

08008648 <HAL_LTDC_IRQHandler>:
{
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800864a:	6803      	ldr	r3, [r0, #0]
{
 800864c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800864e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008650:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008652:	0769      	lsls	r1, r5, #29
 8008654:	d501      	bpl.n	800865a <HAL_LTDC_IRQHandler+0x12>
 8008656:	0772      	lsls	r2, r6, #29
 8008658:	d41d      	bmi.n	8008696 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800865a:	07ab      	lsls	r3, r5, #30
 800865c:	d501      	bpl.n	8008662 <HAL_LTDC_IRQHandler+0x1a>
 800865e:	07b7      	lsls	r7, r6, #30
 8008660:	d42d      	bmi.n	80086be <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008662:	07e8      	lsls	r0, r5, #31
 8008664:	d501      	bpl.n	800866a <HAL_LTDC_IRQHandler+0x22>
 8008666:	07f1      	lsls	r1, r6, #31
 8008668:	d440      	bmi.n	80086ec <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800866a:	072a      	lsls	r2, r5, #28
 800866c:	d501      	bpl.n	8008672 <HAL_LTDC_IRQHandler+0x2a>
 800866e:	0733      	lsls	r3, r6, #28
 8008670:	d400      	bmi.n	8008674 <HAL_LTDC_IRQHandler+0x2c>
}
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008674:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008676:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8008678:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800867a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800867c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800867e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008680:	f022 0208 	bic.w	r2, r2, #8
 8008684:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008686:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008688:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800868c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008690:	f7ff ffd8 	bl	8008644 <HAL_LTDC_ReloadEventCallback>
}
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008698:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800869a:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800869c:	f022 0204 	bic.w	r2, r2, #4
 80086a0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80086a2:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80086a4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80086a8:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80086b4:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80086b8:	f7ff ffc2 	bl	8008640 <HAL_LTDC_ErrorCallback>
 80086bc:	e7cd      	b.n	800865a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80086be:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80086c0:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80086c2:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80086c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c6:	f022 0202 	bic.w	r2, r2, #2
 80086ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 80086cc:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80086ce:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 80086d0:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80086d2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80086d6:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80086da:	f043 0302 	orr.w	r3, r3, #2
 80086de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80086e2:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80086e6:	f7ff ffab 	bl	8008640 <HAL_LTDC_ErrorCallback>
 80086ea:	e7ba      	b.n	8008662 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80086ec:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80086ee:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80086f0:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80086f2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80086f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086f6:	f022 0201 	bic.w	r2, r2, #1
 80086fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80086fc:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80086fe:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008702:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008706:	f7fb ffc5 	bl	8004694 <HAL_LTDC_LineEventCallback>
 800870a:	e7ae      	b.n	800866a <HAL_LTDC_IRQHandler+0x22>

0800870c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800870c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008710:	2b01      	cmp	r3, #1
 8008712:	d028      	beq.n	8008766 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008714:	2302      	movs	r3, #2
 8008716:	4694      	mov	ip, r2
{
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800871c:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800871e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008722:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008724:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008728:	fb04 0402 	mla	r4, r4, r2, r0
 800872c:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 800872e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008732:	460f      	mov	r7, r1
 8008734:	3438      	adds	r4, #56	; 0x38
 8008736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800873c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008742:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008744:	4662      	mov	r2, ip
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800874a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800874c:	f7ff fe6a 	bl	8008424 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8008750:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008752:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8008754:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008756:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800875a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800875e:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8008762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8008766:	2002      	movs	r0, #2
}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800876c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8008770:	2a01      	cmp	r2, #1
 8008772:	d017      	beq.n	80087a4 <HAL_LTDC_ProgramLineEvent+0x38>
 8008774:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008776:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008778:	681a      	ldr	r2, [r3, #0]
{
 800877a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800877c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8008780:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008782:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8008784:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 8008786:	4e08      	ldr	r6, [pc, #32]	; (80087a8 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008788:	f020 0001 	bic.w	r0, r0, #1
 800878c:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 800878e:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8008790:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008792:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008794:	4329      	orrs	r1, r5
 8008796:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8008798:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800879c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 80087a0:	bc70      	pop	{r4, r5, r6}
 80087a2:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80087a4:	2002      	movs	r0, #2
}
 80087a6:	4770      	bx	lr
 80087a8:	50001000 	.word	0x50001000

080087ac <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80087b0:	f7fd fd3e 	bl	8006230 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80087b4:	2c00      	cmp	r4, #0
 80087b6:	d05a      	beq.n	800886e <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80087b8:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80087ba:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80087bc:	2100      	movs	r1, #0
 80087be:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80087c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80087c4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	f022 0201 	bic.w	r2, r2, #1
 80087ce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80087d0:	e005      	b.n	80087de <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80087d2:	f7fd fd2d 	bl	8006230 <HAL_GetTick>
 80087d6:	1b43      	subs	r3, r0, r5
 80087d8:	2b05      	cmp	r3, #5
 80087da:	d841      	bhi.n	8008860 <HAL_MDMA_Init+0xb4>
 80087dc:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	07d2      	lsls	r2, r2, #31
 80087e2:	d4f6      	bmi.n	80087d2 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80087e4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80087e8:	69e1      	ldr	r1, [r4, #28]
 80087ea:	4302      	orrs	r2, r0
 80087ec:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80087f4:	432a      	orrs	r2, r5
 80087f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80087f8:	4302      	orrs	r2, r0
 80087fa:	68a0      	ldr	r0, [r4, #8]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008800:	432a      	orrs	r2, r5
 8008802:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008804:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008806:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008808:	6920      	ldr	r0, [r4, #16]
 800880a:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800880c:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800880e:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008812:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008816:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008818:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800881a:	d103      	bne.n	8008824 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008822:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008824:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008826:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008828:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800882a:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800882c:	db30      	blt.n	8008890 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800882e:	b292      	uxth	r2, r2
 8008830:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008832:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008834:	2a00      	cmp	r2, #0
 8008836:	db1c      	blt.n	8008872 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008838:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800883a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800883e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008842:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008844:	d021      	beq.n	800888a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008846:	b2c9      	uxtb	r1, r1
 8008848:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800884a:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800884c:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800884e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008850:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008852:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008854:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008856:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800885a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800885e:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008860:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008862:	2303      	movs	r3, #3
      return HAL_ERROR;
 8008864:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008866:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800886c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800886e:	2001      	movs	r0, #1
}
 8008870:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008872:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008874:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008876:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800887a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800887e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008880:	6a18      	ldr	r0, [r3, #32]
 8008882:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008886:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008888:	d1dd      	bne.n	8008846 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800888a:	2200      	movs	r2, #0
 800888c:	629a      	str	r2, [r3, #40]	; 0x28
 800888e:	e7dc      	b.n	800884a <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008890:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008892:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008894:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008898:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800889a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800889c:	621a      	str	r2, [r3, #32]
 800889e:	e7c8      	b.n	8008832 <HAL_MDMA_Init+0x86>

080088a0 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80088a0:	b1f0      	cbz	r0, 80088e0 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 80088a2:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	4601      	mov	r1, r0
  return HAL_OK;
 80088a8:	4618      	mov	r0, r3
{
 80088aa:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 80088ac:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80088ae:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 80088b0:	f024 0401 	bic.w	r4, r4, #1
 80088b4:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80088b6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80088b8:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80088ba:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80088bc:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80088be:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80088c0:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80088c2:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80088c4:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80088c6:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80088c8:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80088ca:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80088cc:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 80088ce:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80088d2:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 80088d6:	664b      	str	r3, [r1, #100]	; 0x64
}
 80088d8:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 80088da:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 80088de:	4770      	bx	lr
    return HAL_ERROR;
 80088e0:	2001      	movs	r0, #1
}
 80088e2:	4770      	bx	lr

080088e4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80088e4:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <HAL_PWREx_ConfigSupply+0x74>)
 80088e6:	68d3      	ldr	r3, [r2, #12]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088ee:	68d3      	ldr	r3, [r2, #12]
{
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80088f4:	d005      	beq.n	8008902 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088fa:	1a18      	subs	r0, r3, r0
 80088fc:	bf18      	it	ne
 80088fe:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008900:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008902:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008906:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008908:	4303      	orrs	r3, r0
 800890a:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800890c:	f7fd fc90 	bl	8006230 <HAL_GetTick>
 8008910:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008912:	e005      	b.n	8008920 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008914:	f7fd fc8c 	bl	8006230 <HAL_GetTick>
 8008918:	1b43      	subs	r3, r0, r5
 800891a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800891e:	d819      	bhi.n	8008954 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008920:	6873      	ldr	r3, [r6, #4]
 8008922:	049a      	lsls	r2, r3, #18
 8008924:	d5f6      	bpl.n	8008914 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008926:	f1a4 031d 	sub.w	r3, r4, #29
 800892a:	2b01      	cmp	r3, #1
 800892c:	d905      	bls.n	800893a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800892e:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008932:	2801      	cmp	r0, #1
 8008934:	d901      	bls.n	800893a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8008936:	2000      	movs	r0, #0
}
 8008938:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800893a:	f7fd fc79 	bl	8006230 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800893e:	4d06      	ldr	r5, [pc, #24]	; (8008958 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008940:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008942:	68eb      	ldr	r3, [r5, #12]
 8008944:	03db      	lsls	r3, r3, #15
 8008946:	d4f6      	bmi.n	8008936 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008948:	f7fd fc72 	bl	8006230 <HAL_GetTick>
 800894c:	1b00      	subs	r0, r0, r4
 800894e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008952:	d9f6      	bls.n	8008942 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008954:	2001      	movs	r0, #1
}
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	58024800 	.word	0x58024800

0800895c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800895c:	2800      	cmp	r0, #0
 800895e:	f000 81f7 	beq.w	8008d50 <HAL_RCC_OscConfig+0x3f4>
{
 8008962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	4604      	mov	r4, r0
 8008968:	07d9      	lsls	r1, r3, #31
 800896a:	d52e      	bpl.n	80089ca <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800896c:	49b4      	ldr	r1, [pc, #720]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 800896e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008970:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008972:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008976:	2a10      	cmp	r2, #16
 8008978:	f000 812c 	beq.w	8008bd4 <HAL_RCC_OscConfig+0x278>
 800897c:	2a18      	cmp	r2, #24
 800897e:	f000 8124 	beq.w	8008bca <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008982:	6863      	ldr	r3, [r4, #4]
 8008984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008988:	f000 8167 	beq.w	8008c5a <HAL_RCC_OscConfig+0x2fe>
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 817f 	beq.w	8008c90 <HAL_RCC_OscConfig+0x334>
 8008992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008996:	4baa      	ldr	r3, [pc, #680]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	f000 8278 	beq.w	8008e8e <HAL_RCC_OscConfig+0x532>
 800899e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7fd fc40 	bl	8006230 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089b0:	4ea3      	ldr	r6, [pc, #652]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80089b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089b4:	e005      	b.n	80089c2 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089b6:	f7fd fc3b 	bl	8006230 <HAL_GetTick>
 80089ba:	1b40      	subs	r0, r0, r5
 80089bc:	2864      	cmp	r0, #100	; 0x64
 80089be:	f200 8165 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c2:	6833      	ldr	r3, [r6, #0]
 80089c4:	039f      	lsls	r7, r3, #14
 80089c6:	d5f6      	bpl.n	80089b6 <HAL_RCC_OscConfig+0x5a>
 80089c8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ca:	0799      	lsls	r1, r3, #30
 80089cc:	d521      	bpl.n	8008a12 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ce:	4a9c      	ldr	r2, [pc, #624]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 80089d0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089d4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80089d8:	f040 80a8 	bne.w	8008b2c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089dc:	4b98      	ldr	r3, [pc, #608]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	075b      	lsls	r3, r3, #29
 80089e2:	d503      	bpl.n	80089ec <HAL_RCC_OscConfig+0x90>
 80089e4:	68e3      	ldr	r3, [r4, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80ed 	beq.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ec:	f7fd fc38 	bl	8006260 <HAL_GetREVID>
 80089f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80089f4:	4298      	cmp	r0, r3
 80089f6:	f200 8189 	bhi.w	8008d0c <HAL_RCC_OscConfig+0x3b0>
 80089fa:	6922      	ldr	r2, [r4, #16]
 80089fc:	2a40      	cmp	r2, #64	; 0x40
 80089fe:	f000 824e 	beq.w	8008e9e <HAL_RCC_OscConfig+0x542>
 8008a02:	498f      	ldr	r1, [pc, #572]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008a04:	684b      	ldr	r3, [r1, #4]
 8008a06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a0a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a0e:	604b      	str	r3, [r1, #4]
 8008a10:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a12:	06d9      	lsls	r1, r3, #27
 8008a14:	d456      	bmi.n	8008ac4 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a16:	071d      	lsls	r5, r3, #28
 8008a18:	d517      	bpl.n	8008a4a <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a1a:	6963      	ldr	r3, [r4, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80b4 	beq.w	8008b8a <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a22:	4b87      	ldr	r3, [pc, #540]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008a24:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a26:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8008a28:	f042 0201 	orr.w	r2, r2, #1
 8008a2c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008a2e:	f7fd fbff 	bl	8006230 <HAL_GetTick>
 8008a32:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a34:	e005      	b.n	8008a42 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a36:	f7fd fbfb 	bl	8006230 <HAL_GetTick>
 8008a3a:	1b40      	subs	r0, r0, r5
 8008a3c:	2802      	cmp	r0, #2
 8008a3e:	f200 8125 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a42:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008a44:	0798      	lsls	r0, r3, #30
 8008a46:	d5f6      	bpl.n	8008a36 <HAL_RCC_OscConfig+0xda>
 8008a48:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a4a:	069a      	lsls	r2, r3, #26
 8008a4c:	d517      	bpl.n	8008a7e <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8134 	beq.w	8008cbe <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a56:	4b7a      	ldr	r3, [pc, #488]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008a58:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a5a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008a5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008a62:	f7fd fbe5 	bl	8006230 <HAL_GetTick>
 8008a66:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a68:	e005      	b.n	8008a76 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a6a:	f7fd fbe1 	bl	8006230 <HAL_GetTick>
 8008a6e:	1b40      	subs	r0, r0, r5
 8008a70:	2802      	cmp	r0, #2
 8008a72:	f200 810b 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a76:	6833      	ldr	r3, [r6, #0]
 8008a78:	049f      	lsls	r7, r3, #18
 8008a7a:	d5f6      	bpl.n	8008a6a <HAL_RCC_OscConfig+0x10e>
 8008a7c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a7e:	0759      	lsls	r1, r3, #29
 8008a80:	f100 80b2 	bmi.w	8008be8 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a86:	b1d8      	cbz	r0, 8008ac0 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a88:	4b6d      	ldr	r3, [pc, #436]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008a90:	2a18      	cmp	r2, #24
 8008a92:	f000 81ce 	beq.w	8008e32 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a96:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a98:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a9a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008a9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008aa0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008aa2:	f000 8161 	beq.w	8008d68 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa6:	f7fd fbc3 	bl	8006230 <HAL_GetTick>
 8008aaa:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aac:	e005      	b.n	8008aba <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aae:	f7fd fbbf 	bl	8006230 <HAL_GetTick>
 8008ab2:	1b00      	subs	r0, r0, r4
 8008ab4:	2802      	cmp	r0, #2
 8008ab6:	f200 80e9 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aba:	682b      	ldr	r3, [r5, #0]
 8008abc:	019b      	lsls	r3, r3, #6
 8008abe:	d4f6      	bmi.n	8008aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008ac0:	2000      	movs	r0, #0
}
 8008ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac4:	4a5e      	ldr	r2, [pc, #376]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008ac6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ac8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d072      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x25c>
 8008ad2:	2b18      	cmp	r3, #24
 8008ad4:	d06c      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ad6:	69e3      	ldr	r3, [r4, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8103 	beq.w	8008ce4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8008ade:	4b58      	ldr	r3, [pc, #352]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ae2:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8008ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ae8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008aea:	f7fd fba1 	bl	8006230 <HAL_GetTick>
 8008aee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008af0:	e005      	b.n	8008afe <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008af2:	f7fd fb9d 	bl	8006230 <HAL_GetTick>
 8008af6:	1b40      	subs	r0, r0, r5
 8008af8:	2802      	cmp	r0, #2
 8008afa:	f200 80c7 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008afe:	6833      	ldr	r3, [r6, #0]
 8008b00:	05db      	lsls	r3, r3, #23
 8008b02:	d5f6      	bpl.n	8008af2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b04:	f7fd fbac 	bl	8006260 <HAL_GetREVID>
 8008b08:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b0c:	4298      	cmp	r0, r3
 8008b0e:	f200 81e9 	bhi.w	8008ee4 <HAL_RCC_OscConfig+0x588>
 8008b12:	6a22      	ldr	r2, [r4, #32]
 8008b14:	6873      	ldr	r3, [r6, #4]
 8008b16:	2a20      	cmp	r2, #32
 8008b18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b1c:	bf0c      	ite	eq
 8008b1e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008b22:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008b26:	6073      	str	r3, [r6, #4]
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	e774      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b2c:	2b18      	cmp	r3, #24
 8008b2e:	f000 810b 	beq.w	8008d48 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b32:	68e2      	ldr	r2, [r4, #12]
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	f000 80f3 	beq.w	8008d20 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b3a:	4941      	ldr	r1, [pc, #260]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008b3c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b3e:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b40:	f023 0319 	bic.w	r3, r3, #25
 8008b44:	4313      	orrs	r3, r2
 8008b46:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008b48:	f7fd fb72 	bl	8006230 <HAL_GetTick>
 8008b4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b4e:	e005      	b.n	8008b5c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b50:	f7fd fb6e 	bl	8006230 <HAL_GetTick>
 8008b54:	1b40      	subs	r0, r0, r5
 8008b56:	2802      	cmp	r0, #2
 8008b58:	f200 8098 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	075f      	lsls	r7, r3, #29
 8008b60:	d5f6      	bpl.n	8008b50 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b62:	f7fd fb7d 	bl	8006260 <HAL_GetREVID>
 8008b66:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	f200 81c3 	bhi.w	8008ef6 <HAL_RCC_OscConfig+0x59a>
 8008b70:	6922      	ldr	r2, [r4, #16]
 8008b72:	6873      	ldr	r3, [r6, #4]
 8008b74:	2a40      	cmp	r2, #64	; 0x40
 8008b76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008b7a:	bf0c      	ite	eq
 8008b7c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008b80:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008b84:	6073      	str	r3, [r6, #4]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	e743      	b.n	8008a12 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8008b8a:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008b8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b8e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008b90:	f022 0201 	bic.w	r2, r2, #1
 8008b94:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008b96:	f7fd fb4b 	bl	8006230 <HAL_GetTick>
 8008b9a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b9c:	e004      	b.n	8008ba8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b9e:	f7fd fb47 	bl	8006230 <HAL_GetTick>
 8008ba2:	1b40      	subs	r0, r0, r5
 8008ba4:	2802      	cmp	r0, #2
 8008ba6:	d871      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ba8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008baa:	0799      	lsls	r1, r3, #30
 8008bac:	d4f7      	bmi.n	8008b9e <HAL_RCC_OscConfig+0x242>
 8008bae:	e74b      	b.n	8008a48 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008bb0:	f002 0203 	and.w	r2, r2, #3
 8008bb4:	2a01      	cmp	r2, #1
 8008bb6:	d18e      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bb8:	4b21      	ldr	r3, [pc, #132]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	05da      	lsls	r2, r3, #23
 8008bbe:	d552      	bpl.n	8008c66 <HAL_RCC_OscConfig+0x30a>
 8008bc0:	69e3      	ldr	r3, [r4, #28]
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d04f      	beq.n	8008c66 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8008bc6:	2001      	movs	r0, #1
}
 8008bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bca:	f001 0103 	and.w	r1, r1, #3
 8008bce:	2902      	cmp	r1, #2
 8008bd0:	f47f aed7 	bne.w	8008982 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd4:	4a1a      	ldr	r2, [pc, #104]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	0392      	lsls	r2, r2, #14
 8008bda:	f57f aef6 	bpl.w	80089ca <HAL_RCC_OscConfig+0x6e>
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	2a00      	cmp	r2, #0
 8008be2:	f47f aef2 	bne.w	80089ca <HAL_RCC_OscConfig+0x6e>
 8008be6:	e7ee      	b.n	8008bc6 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <HAL_RCC_OscConfig+0x2e8>)
 8008bea:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bec:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8008bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008bf4:	f7fd fb1c 	bl	8006230 <HAL_GetTick>
 8008bf8:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bfa:	e004      	b.n	8008c06 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008bfc:	f7fd fb18 	bl	8006230 <HAL_GetTick>
 8008c00:	1b40      	subs	r0, r0, r5
 8008c02:	2864      	cmp	r0, #100	; 0x64
 8008c04:	d842      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c06:	6833      	ldr	r3, [r6, #0]
 8008c08:	05da      	lsls	r2, r3, #23
 8008c0a:	d5f7      	bpl.n	8008bfc <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c0c:	68a3      	ldr	r3, [r4, #8]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	f000 817a 	beq.w	8008f08 <HAL_RCC_OscConfig+0x5ac>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 814b 	beq.w	8008eb0 <HAL_RCC_OscConfig+0x554>
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
 8008c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c20:	f000 8187 	beq.w	8008f32 <HAL_RCC_OscConfig+0x5d6>
 8008c24:	f022 0201 	bic.w	r2, r2, #1
 8008c28:	671a      	str	r2, [r3, #112]	; 0x70
 8008c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c2c:	f022 0204 	bic.w	r2, r2, #4
 8008c30:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008c32:	f7fd fafd 	bl	8006230 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c36:	4e02      	ldr	r6, [pc, #8]	; (8008c40 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c38:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008c3c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x2f6>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c48:	f7fd faf2 	bl	8006230 <HAL_GetTick>
 8008c4c:	1b40      	subs	r0, r0, r5
 8008c4e:	42b8      	cmp	r0, r7
 8008c50:	d81c      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008c54:	079b      	lsls	r3, r3, #30
 8008c56:	d5f7      	bpl.n	8008c48 <HAL_RCC_OscConfig+0x2ec>
 8008c58:	e714      	b.n	8008a84 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c5a:	4aae      	ldr	r2, [pc, #696]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008c5c:	6813      	ldr	r3, [r2, #0]
 8008c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c64:	e6a2      	b.n	80089ac <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c66:	f7fd fafb 	bl	8006260 <HAL_GetREVID>
 8008c6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	d870      	bhi.n	8008d54 <HAL_RCC_OscConfig+0x3f8>
 8008c72:	6a22      	ldr	r2, [r4, #32]
 8008c74:	2a20      	cmp	r2, #32
 8008c76:	f000 8153 	beq.w	8008f20 <HAL_RCC_OscConfig+0x5c4>
 8008c7a:	49a6      	ldr	r1, [pc, #664]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008c7c:	684b      	ldr	r3, [r1, #4]
 8008c7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c82:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008c86:	604b      	str	r3, [r1, #4]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	e6c4      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8008c8c:	2003      	movs	r0, #3
}
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c90:	4ba0      	ldr	r3, [pc, #640]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008c92:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c94:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ca2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008ca4:	f7fd fac4 	bl	8006230 <HAL_GetTick>
 8008ca8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008caa:	e004      	b.n	8008cb6 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cac:	f7fd fac0 	bl	8006230 <HAL_GetTick>
 8008cb0:	1b40      	subs	r0, r0, r5
 8008cb2:	2864      	cmp	r0, #100	; 0x64
 8008cb4:	d8ea      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cb6:	6833      	ldr	r3, [r6, #0]
 8008cb8:	0398      	lsls	r0, r3, #14
 8008cba:	d4f7      	bmi.n	8008cac <HAL_RCC_OscConfig+0x350>
 8008cbc:	e684      	b.n	80089c8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8008cbe:	4b95      	ldr	r3, [pc, #596]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008cc0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cc2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8008cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cc8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008cca:	f7fd fab1 	bl	8006230 <HAL_GetTick>
 8008cce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cd0:	e004      	b.n	8008cdc <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008cd2:	f7fd faad 	bl	8006230 <HAL_GetTick>
 8008cd6:	1b40      	subs	r0, r0, r5
 8008cd8:	2802      	cmp	r0, #2
 8008cda:	d8d7      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cdc:	6833      	ldr	r3, [r6, #0]
 8008cde:	0498      	lsls	r0, r3, #18
 8008ce0:	d4f7      	bmi.n	8008cd2 <HAL_RCC_OscConfig+0x376>
 8008ce2:	e6cb      	b.n	8008a7c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8008ce4:	4b8b      	ldr	r3, [pc, #556]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ce8:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8008cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008cf0:	f7fd fa9e 	bl	8006230 <HAL_GetTick>
 8008cf4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008cf6:	e004      	b.n	8008d02 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008cf8:	f7fd fa9a 	bl	8006230 <HAL_GetTick>
 8008cfc:	1b40      	subs	r0, r0, r5
 8008cfe:	2802      	cmp	r0, #2
 8008d00:	d8c4      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d02:	6833      	ldr	r3, [r6, #0]
 8008d04:	05df      	lsls	r7, r3, #23
 8008d06:	d4f7      	bmi.n	8008cf8 <HAL_RCC_OscConfig+0x39c>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	e684      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d0c:	4a81      	ldr	r2, [pc, #516]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008d0e:	6921      	ldr	r1, [r4, #16]
 8008d10:	6853      	ldr	r3, [r2, #4]
 8008d12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d1a:	6053      	str	r3, [r2, #4]
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	e678      	b.n	8008a12 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8008d20:	4b7c      	ldr	r3, [pc, #496]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008d22:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d24:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8008d26:	f022 0201 	bic.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d2c:	f7fd fa80 	bl	8006230 <HAL_GetTick>
 8008d30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d32:	e004      	b.n	8008d3e <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d34:	f7fd fa7c 	bl	8006230 <HAL_GetTick>
 8008d38:	1b40      	subs	r0, r0, r5
 8008d3a:	2802      	cmp	r0, #2
 8008d3c:	d8a6      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d3e:	6833      	ldr	r3, [r6, #0]
 8008d40:	0758      	lsls	r0, r3, #29
 8008d42:	d4f7      	bmi.n	8008d34 <HAL_RCC_OscConfig+0x3d8>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	e664      	b.n	8008a12 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d48:	0792      	lsls	r2, r2, #30
 8008d4a:	f47f aef2 	bne.w	8008b32 <HAL_RCC_OscConfig+0x1d6>
 8008d4e:	e645      	b.n	80089dc <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008d50:	2001      	movs	r0, #1
}
 8008d52:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d54:	4a6f      	ldr	r2, [pc, #444]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008d56:	6a21      	ldr	r1, [r4, #32]
 8008d58:	68d3      	ldr	r3, [r2, #12]
 8008d5a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008d5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d62:	60d3      	str	r3, [r2, #12]
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	e656      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8008d68:	f7fd fa62 	bl	8006230 <HAL_GetTick>
 8008d6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d6e:	e004      	b.n	8008d7a <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d70:	f7fd fa5e 	bl	8006230 <HAL_GetTick>
 8008d74:	1b80      	subs	r0, r0, r6
 8008d76:	2802      	cmp	r0, #2
 8008d78:	d888      	bhi.n	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	0199      	lsls	r1, r3, #6
 8008d7e:	d4f7      	bmi.n	8008d70 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008d82:	4b65      	ldr	r3, [pc, #404]	; (8008f18 <HAL_RCC_OscConfig+0x5bc>)
 8008d84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008d86:	4013      	ands	r3, r2
 8008d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d8a:	4964      	ldr	r1, [pc, #400]	; (8008f1c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d8c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d8e:	4e61      	ldr	r6, [pc, #388]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d90:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008d94:	62ab      	str	r3, [r5, #40]	; 0x28
 8008d96:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008d98:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8008d9c:	3f01      	subs	r7, #1
 8008d9e:	1e50      	subs	r0, r2, #1
 8008da0:	3b01      	subs	r3, #1
 8008da2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008da4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008da8:	025b      	lsls	r3, r3, #9
 8008daa:	0400      	lsls	r0, r0, #16
 8008dac:	3a01      	subs	r2, #1
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008db4:	0612      	lsls	r2, r2, #24
 8008db6:	4303      	orrs	r3, r0
 8008db8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008dbc:	433b      	orrs	r3, r7
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008dc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008dcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008dce:	4011      	ands	r1, r2
 8008dd0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008dd4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008dd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dda:	f023 030c 	bic.w	r3, r3, #12
 8008dde:	4313      	orrs	r3, r2
 8008de0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008de2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008de4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008de6:	f023 0302 	bic.w	r3, r3, #2
 8008dea:	4313      	orrs	r3, r2
 8008dec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008dee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dfc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008e16:	f7fd fa0b 	bl	8006230 <HAL_GetTick>
 8008e1a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e1c:	e005      	b.n	8008e2a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e1e:	f7fd fa07 	bl	8006230 <HAL_GetTick>
 8008e22:	1b00      	subs	r0, r0, r4
 8008e24:	2802      	cmp	r0, #2
 8008e26:	f63f af31 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e2a:	6833      	ldr	r3, [r6, #0]
 8008e2c:	019a      	lsls	r2, r3, #6
 8008e2e:	d5f6      	bpl.n	8008e1e <HAL_RCC_OscConfig+0x4c2>
 8008e30:	e646      	b.n	8008ac0 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e32:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e36:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e38:	f43f ae43 	beq.w	8008ac2 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008e42:	428b      	cmp	r3, r1
 8008e44:	f47f aebf 	bne.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e48:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	f47f aeb9 	bne.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008e56:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8008e5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	f47f aeb2 	bne.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e64:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008e68:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	f47f aeab 	bne.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e72:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8008e76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	f47f aea4 	bne.w	8008bc6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008e80:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008e84:	3801      	subs	r0, #1
  return HAL_OK;
 8008e86:	1a28      	subs	r0, r5, r0
 8008e88:	bf18      	it	ne
 8008e8a:	2001      	movne	r0, #1
}
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e8e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e586      	b.n	80089ac <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008ea0:	6853      	ldr	r3, [r2, #4]
 8008ea2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eaa:	6053      	str	r3, [r2, #4]
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	e5b0      	b.n	8008a12 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb0:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eb2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008eb8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	671a      	str	r2, [r3, #112]	; 0x70
 8008ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ec2:	f022 0204 	bic.w	r2, r2, #4
 8008ec6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008ec8:	f7fd f9b2 	bl	8006230 <HAL_GetTick>
 8008ecc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ece:	e005      	b.n	8008edc <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed0:	f7fd f9ae 	bl	8006230 <HAL_GetTick>
 8008ed4:	1b40      	subs	r0, r0, r5
 8008ed6:	42b8      	cmp	r0, r7
 8008ed8:	f63f aed8 	bhi.w	8008c8c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008edc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008ede:	0798      	lsls	r0, r3, #30
 8008ee0:	d4f6      	bmi.n	8008ed0 <HAL_RCC_OscConfig+0x574>
 8008ee2:	e5cf      	b.n	8008a84 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ee4:	68f3      	ldr	r3, [r6, #12]
 8008ee6:	6a22      	ldr	r2, [r4, #32]
 8008ee8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008eec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ef0:	60f3      	str	r3, [r6, #12]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	e58f      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef6:	6873      	ldr	r3, [r6, #4]
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008efe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f02:	6073      	str	r3, [r6, #4]
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	e584      	b.n	8008a12 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f08:	4a02      	ldr	r2, [pc, #8]	; (8008f14 <HAL_RCC_OscConfig+0x5b8>)
 8008f0a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f12:	e68e      	b.n	8008c32 <HAL_RCC_OscConfig+0x2d6>
 8008f14:	58024400 	.word	0x58024400
 8008f18:	fffffc0c 	.word	0xfffffc0c
 8008f1c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f20:	4a08      	ldr	r2, [pc, #32]	; (8008f44 <HAL_RCC_OscConfig+0x5e8>)
 8008f22:	6853      	ldr	r3, [r2, #4]
 8008f24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f2c:	6053      	str	r3, [r2, #4]
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	e571      	b.n	8008a16 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f32:	f042 0204 	orr.w	r2, r2, #4
 8008f36:	671a      	str	r2, [r3, #112]	; 0x70
 8008f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	671a      	str	r2, [r3, #112]	; 0x70
 8008f40:	e677      	b.n	8008c32 <HAL_RCC_OscConfig+0x2d6>
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400

08008f48 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f48:	4a47      	ldr	r2, [pc, #284]	; (8009068 <HAL_RCC_GetSysClockFreq+0x120>)
 8008f4a:	6913      	ldr	r3, [r2, #16]
 8008f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d004      	beq.n	8008f5e <HAL_RCC_GetSysClockFreq+0x16>
 8008f54:	2b18      	cmp	r3, #24
 8008f56:	d00d      	beq.n	8008f74 <HAL_RCC_GetSysClockFreq+0x2c>
 8008f58:	b11b      	cbz	r3, 8008f62 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f5a:	4844      	ldr	r0, [pc, #272]	; (800906c <HAL_RCC_GetSysClockFreq+0x124>)
 8008f5c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f5e:	4844      	ldr	r0, [pc, #272]	; (8009070 <HAL_RCC_GetSysClockFreq+0x128>)
 8008f60:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	0699      	lsls	r1, r3, #26
 8008f66:	d54a      	bpl.n	8008ffe <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f68:	6813      	ldr	r3, [r2, #0]
 8008f6a:	4842      	ldr	r0, [pc, #264]	; (8009074 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008f6c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008f70:	40d8      	lsrs	r0, r3
 8008f72:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f74:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008f76:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f78:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008f7c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f80:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f84:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008f86:	d038      	beq.n	8008ffa <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f88:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f8c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f90:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f94:	fb01 f105 	mul.w	r1, r1, r5
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	ee07 1a90 	vmov	s15, r1
 8008f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8008fa2:	d002      	beq.n	8008faa <HAL_RCC_GetSysClockFreq+0x62>
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d02c      	beq.n	8009002 <HAL_RCC_GetSysClockFreq+0xba>
 8008fa8:	b393      	cbz	r3, 8009010 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008faa:	ee07 0a90 	vmov	s15, r0
 8008fae:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8009078 <HAL_RCC_GetSysClockFreq+0x130>
 8008fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008fb8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008fbc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800907c <HAL_RCC_GetSysClockFreq+0x134>
 8008fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc4:	ee07 3a90 	vmov	s15, r3
 8008fc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008fd4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008fd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008fdc:	4b22      	ldr	r3, [pc, #136]	; (8009068 <HAL_RCC_GetSysClockFreq+0x120>)
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008fe4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008ffa:	bc30      	pop	{r4, r5}
 8008ffc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ffe:	481d      	ldr	r0, [pc, #116]	; (8009074 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009000:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009002:	ee07 0a90 	vmov	s15, r0
 8009006:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8009080 <HAL_RCC_GetSysClockFreq+0x138>
 800900a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900e:	e7d2      	b.n	8008fb6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	069b      	lsls	r3, r3, #26
 8009014:	d520      	bpl.n	8009058 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009016:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009018:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901c:	4915      	ldr	r1, [pc, #84]	; (8009074 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800901e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009022:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800902c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800902e:	eddf 4a13 	vldr	s9, [pc, #76]	; 800907c <HAL_RCC_GetSysClockFreq+0x134>
 8009032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009036:	ee06 1a10 	vmov	s12, r1
 800903a:	ee06 3a90 	vmov	s13, r3
 800903e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009042:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009046:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800904a:	eee7 6a24 	vfma.f32	s13, s14, s9
 800904e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009052:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009056:	e7c1      	b.n	8008fdc <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009058:	ee07 0a90 	vmov	s15, r0
 800905c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8009084 <HAL_RCC_GetSysClockFreq+0x13c>
 8009060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009064:	e7a7      	b.n	8008fb6 <HAL_RCC_GetSysClockFreq+0x6e>
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	003d0900 	.word	0x003d0900
 8009070:	017d7840 	.word	0x017d7840
 8009074:	03d09000 	.word	0x03d09000
 8009078:	4a742400 	.word	0x4a742400
 800907c:	39000000 	.word	0x39000000
 8009080:	4bbebc20 	.word	0x4bbebc20
 8009084:	4c742400 	.word	0x4c742400

08009088 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009088:	2800      	cmp	r0, #0
 800908a:	f000 810e 	beq.w	80092aa <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800908e:	4a8d      	ldr	r2, [pc, #564]	; (80092c4 <HAL_RCC_ClockConfig+0x23c>)
 8009090:	6813      	ldr	r3, [r2, #0]
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	428b      	cmp	r3, r1
{
 8009098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909c:	4604      	mov	r4, r0
 800909e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090a0:	d20c      	bcs.n	80090bc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	f023 030f 	bic.w	r3, r3, #15
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ac:	6813      	ldr	r3, [r2, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	428b      	cmp	r3, r1
 80090b4:	d002      	beq.n	80090bc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80090b6:	2001      	movs	r0, #1
}
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	075f      	lsls	r7, r3, #29
 80090c0:	d50b      	bpl.n	80090da <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090c2:	4981      	ldr	r1, [pc, #516]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 80090c4:	6920      	ldr	r0, [r4, #16]
 80090c6:	698a      	ldr	r2, [r1, #24]
 80090c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80090cc:	4290      	cmp	r0, r2
 80090ce:	d904      	bls.n	80090da <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090d0:	698a      	ldr	r2, [r1, #24]
 80090d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090d6:	4302      	orrs	r2, r0
 80090d8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090da:	071e      	lsls	r6, r3, #28
 80090dc:	d50b      	bpl.n	80090f6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090de:	497a      	ldr	r1, [pc, #488]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 80090e0:	6960      	ldr	r0, [r4, #20]
 80090e2:	69ca      	ldr	r2, [r1, #28]
 80090e4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80090e8:	4290      	cmp	r0, r2
 80090ea:	d904      	bls.n	80090f6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090ec:	69ca      	ldr	r2, [r1, #28]
 80090ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090f2:	4302      	orrs	r2, r0
 80090f4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090f6:	06d8      	lsls	r0, r3, #27
 80090f8:	d50b      	bpl.n	8009112 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090fa:	4973      	ldr	r1, [pc, #460]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 80090fc:	69a0      	ldr	r0, [r4, #24]
 80090fe:	69ca      	ldr	r2, [r1, #28]
 8009100:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009104:	4290      	cmp	r0, r2
 8009106:	d904      	bls.n	8009112 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009108:	69ca      	ldr	r2, [r1, #28]
 800910a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800910e:	4302      	orrs	r2, r0
 8009110:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009112:	0699      	lsls	r1, r3, #26
 8009114:	d50b      	bpl.n	800912e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009116:	496c      	ldr	r1, [pc, #432]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009118:	69e0      	ldr	r0, [r4, #28]
 800911a:	6a0a      	ldr	r2, [r1, #32]
 800911c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009120:	4290      	cmp	r0, r2
 8009122:	d904      	bls.n	800912e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009124:	6a0a      	ldr	r2, [r1, #32]
 8009126:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800912a:	4302      	orrs	r2, r0
 800912c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800912e:	079a      	lsls	r2, r3, #30
 8009130:	f140 80ad 	bpl.w	800928e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009134:	4864      	ldr	r0, [pc, #400]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009136:	68e1      	ldr	r1, [r4, #12]
 8009138:	6982      	ldr	r2, [r0, #24]
 800913a:	f002 020f 	and.w	r2, r2, #15
 800913e:	4291      	cmp	r1, r2
 8009140:	d904      	bls.n	800914c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009142:	6982      	ldr	r2, [r0, #24]
 8009144:	f022 020f 	bic.w	r2, r2, #15
 8009148:	430a      	orrs	r2, r1
 800914a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800914c:	07d8      	lsls	r0, r3, #31
 800914e:	d531      	bpl.n	80091b4 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009150:	4a5d      	ldr	r2, [pc, #372]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009152:	68a1      	ldr	r1, [r4, #8]
 8009154:	6993      	ldr	r3, [r2, #24]
 8009156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800915a:	430b      	orrs	r3, r1
 800915c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800915e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009160:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009162:	2902      	cmp	r1, #2
 8009164:	f000 80a3 	beq.w	80092ae <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009168:	2903      	cmp	r1, #3
 800916a:	f000 809a 	beq.w	80092a2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800916e:	2901      	cmp	r1, #1
 8009170:	f000 80a3 	beq.w	80092ba <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009174:	0758      	lsls	r0, r3, #29
 8009176:	d59e      	bpl.n	80090b6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009178:	4a53      	ldr	r2, [pc, #332]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800917a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800917e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009180:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	430b      	orrs	r3, r1
 8009188:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800918a:	f7fd f851 	bl	8006230 <HAL_GetTick>
 800918e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009190:	e005      	b.n	800919e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009192:	f7fd f84d 	bl	8006230 <HAL_GetTick>
 8009196:	1b80      	subs	r0, r0, r6
 8009198:	4540      	cmp	r0, r8
 800919a:	f200 808c 	bhi.w	80092b6 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6862      	ldr	r2, [r4, #4]
 80091a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80091aa:	d1f2      	bne.n	8009192 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	0799      	lsls	r1, r3, #30
 80091b0:	d506      	bpl.n	80091c0 <HAL_RCC_ClockConfig+0x138>
 80091b2:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b4:	4844      	ldr	r0, [pc, #272]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 80091b6:	6982      	ldr	r2, [r0, #24]
 80091b8:	f002 020f 	and.w	r2, r2, #15
 80091bc:	428a      	cmp	r2, r1
 80091be:	d86a      	bhi.n	8009296 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091c0:	4940      	ldr	r1, [pc, #256]	; (80092c4 <HAL_RCC_ClockConfig+0x23c>)
 80091c2:	680a      	ldr	r2, [r1, #0]
 80091c4:	f002 020f 	and.w	r2, r2, #15
 80091c8:	42aa      	cmp	r2, r5
 80091ca:	d90a      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091cc:	680a      	ldr	r2, [r1, #0]
 80091ce:	f022 020f 	bic.w	r2, r2, #15
 80091d2:	432a      	orrs	r2, r5
 80091d4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091d6:	680a      	ldr	r2, [r1, #0]
 80091d8:	f002 020f 	and.w	r2, r2, #15
 80091dc:	42aa      	cmp	r2, r5
 80091de:	f47f af6a 	bne.w	80090b6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091e2:	075a      	lsls	r2, r3, #29
 80091e4:	d50b      	bpl.n	80091fe <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091e6:	4938      	ldr	r1, [pc, #224]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 80091e8:	6920      	ldr	r0, [r4, #16]
 80091ea:	698a      	ldr	r2, [r1, #24]
 80091ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80091f0:	4290      	cmp	r0, r2
 80091f2:	d204      	bcs.n	80091fe <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091f4:	698a      	ldr	r2, [r1, #24]
 80091f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80091fa:	4302      	orrs	r2, r0
 80091fc:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091fe:	071f      	lsls	r7, r3, #28
 8009200:	d50b      	bpl.n	800921a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009202:	4931      	ldr	r1, [pc, #196]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009204:	6960      	ldr	r0, [r4, #20]
 8009206:	69ca      	ldr	r2, [r1, #28]
 8009208:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800920c:	4290      	cmp	r0, r2
 800920e:	d204      	bcs.n	800921a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009210:	69ca      	ldr	r2, [r1, #28]
 8009212:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009216:	4302      	orrs	r2, r0
 8009218:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800921a:	06de      	lsls	r6, r3, #27
 800921c:	d50b      	bpl.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800921e:	492a      	ldr	r1, [pc, #168]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009220:	69a0      	ldr	r0, [r4, #24]
 8009222:	69ca      	ldr	r2, [r1, #28]
 8009224:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009228:	4290      	cmp	r0, r2
 800922a:	d204      	bcs.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800922c:	69ca      	ldr	r2, [r1, #28]
 800922e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009232:	4302      	orrs	r2, r0
 8009234:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009236:	069d      	lsls	r5, r3, #26
 8009238:	d50b      	bpl.n	8009252 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800923a:	4a23      	ldr	r2, [pc, #140]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 800923c:	69e1      	ldr	r1, [r4, #28]
 800923e:	6a13      	ldr	r3, [r2, #32]
 8009240:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009244:	4299      	cmp	r1, r3
 8009246:	d204      	bcs.n	8009252 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009248:	6a13      	ldr	r3, [r2, #32]
 800924a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924e:	430b      	orrs	r3, r1
 8009250:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009252:	f7ff fe79 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 8009256:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <HAL_RCC_ClockConfig+0x240>)
 8009258:	4602      	mov	r2, r0
 800925a:	481c      	ldr	r0, [pc, #112]	; (80092cc <HAL_RCC_ClockConfig+0x244>)
 800925c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800925e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009260:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8009264:	4d1a      	ldr	r5, [pc, #104]	; (80092d0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	4c1a      	ldr	r4, [pc, #104]	; (80092d4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800926c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800926e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009270:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8009274:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009276:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800927a:	4d17      	ldr	r5, [pc, #92]	; (80092d8 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800927c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800927e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8009282:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009284:	6023      	str	r3, [r4, #0]
}
 8009286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800928a:	f7fc bf6f 	b.w	800616c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800928e:	07da      	lsls	r2, r3, #31
 8009290:	f53f af5e 	bmi.w	8009150 <HAL_RCC_ClockConfig+0xc8>
 8009294:	e794      	b.n	80091c0 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009296:	6982      	ldr	r2, [r0, #24]
 8009298:	f022 020f 	bic.w	r2, r2, #15
 800929c:	4311      	orrs	r1, r2
 800929e:	6181      	str	r1, [r0, #24]
 80092a0:	e78e      	b.n	80091c0 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092a2:	019f      	lsls	r7, r3, #6
 80092a4:	f53f af68 	bmi.w	8009178 <HAL_RCC_ClockConfig+0xf0>
 80092a8:	e705      	b.n	80090b6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80092aa:	2001      	movs	r0, #1
}
 80092ac:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ae:	039b      	lsls	r3, r3, #14
 80092b0:	f53f af62 	bmi.w	8009178 <HAL_RCC_ClockConfig+0xf0>
 80092b4:	e6ff      	b.n	80090b6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80092b6:	2003      	movs	r0, #3
 80092b8:	e6fe      	b.n	80090b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092ba:	05de      	lsls	r6, r3, #23
 80092bc:	f53f af5c 	bmi.w	8009178 <HAL_RCC_ClockConfig+0xf0>
 80092c0:	e6f9      	b.n	80090b6 <HAL_RCC_ClockConfig+0x2e>
 80092c2:	bf00      	nop
 80092c4:	52002000 	.word	0x52002000
 80092c8:	58024400 	.word	0x58024400
 80092cc:	0800abe0 	.word	0x0800abe0
 80092d0:	24001070 	.word	0x24001070
 80092d4:	24000004 	.word	0x24000004
 80092d8:	24000000 	.word	0x24000000

080092dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092dc:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092de:	f7ff fe33 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 80092e2:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <HAL_RCC_GetHCLKFreq+0x34>)
 80092e4:	490b      	ldr	r1, [pc, #44]	; (8009314 <HAL_RCC_GetHCLKFreq+0x38>)
 80092e6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092e8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092ee:	4c0a      	ldr	r4, [pc, #40]	; (8009318 <HAL_RCC_GetHCLKFreq+0x3c>)
 80092f0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f4:	4d09      	ldr	r5, [pc, #36]	; (800931c <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092f6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092f8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092fa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092fe:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009302:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009306:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800930a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800930c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	58024400 	.word	0x58024400
 8009314:	0800abe0 	.word	0x0800abe0
 8009318:	24000004 	.word	0x24000004
 800931c:	24000000 	.word	0x24000000

08009320 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009320:	4a3b      	ldr	r2, [pc, #236]	; (8009410 <RCCEx_PLL2_Config+0xf0>)
{
 8009322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009324:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	2b03      	cmp	r3, #3
 800932c:	d069      	beq.n	8009402 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	4606      	mov	r6, r0
 8009332:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009334:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8009336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800933a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800933c:	f7fc ff78 	bl	8006230 <HAL_GetTick>
 8009340:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009342:	e004      	b.n	800934e <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009344:	f7fc ff74 	bl	8006230 <HAL_GetTick>
 8009348:	1b43      	subs	r3, r0, r5
 800934a:	2b02      	cmp	r3, #2
 800934c:	d857      	bhi.n	80093fe <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	011a      	lsls	r2, r3, #4
 8009352:	d4f7      	bmi.n	8009344 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009356:	6832      	ldr	r2, [r6, #0]
 8009358:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800935c:	492d      	ldr	r1, [pc, #180]	; (8009414 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800935e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009362:	62a3      	str	r3, [r4, #40]	; 0x28
 8009364:	6875      	ldr	r5, [r6, #4]
 8009366:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800936a:	3d01      	subs	r5, #1
 800936c:	1e50      	subs	r0, r2, #1
 800936e:	3b01      	subs	r3, #1
 8009370:	6932      	ldr	r2, [r6, #16]
 8009372:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009376:	025b      	lsls	r3, r3, #9
 8009378:	0400      	lsls	r0, r0, #16
 800937a:	3a01      	subs	r2, #1
 800937c:	b29b      	uxth	r3, r3
 800937e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009382:	0612      	lsls	r2, r2, #24
 8009384:	4303      	orrs	r3, r0
 8009386:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800938a:	432b      	orrs	r3, r5
 800938c:	4313      	orrs	r3, r2
 800938e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009392:	6972      	ldr	r2, [r6, #20]
 8009394:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009398:	4313      	orrs	r3, r2
 800939a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800939c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800939e:	69b2      	ldr	r2, [r6, #24]
 80093a0:	f023 0320 	bic.w	r3, r3, #32
 80093a4:	4313      	orrs	r3, r2
 80093a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80093b2:	69f3      	ldr	r3, [r6, #28]
 80093b4:	4011      	ands	r1, r2
 80093b6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80093ba:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093be:	f043 0310 	orr.w	r3, r3, #16
 80093c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80093c6:	b1f7      	cbz	r7, 8009406 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093c8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093ca:	bf0c      	ite	eq
 80093cc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093d0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80093d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <RCCEx_PLL2_Config+0xf0>)
 80093d8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093da:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80093dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80093e0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80093e2:	f7fc ff25 	bl	8006230 <HAL_GetTick>
 80093e6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093e8:	e004      	b.n	80093f4 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093ea:	f7fc ff21 	bl	8006230 <HAL_GetTick>
 80093ee:	1b00      	subs	r0, r0, r4
 80093f0:	2802      	cmp	r0, #2
 80093f2:	d804      	bhi.n	80093fe <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	d5f7      	bpl.n	80093ea <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80093fa:	2000      	movs	r0, #0
}
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80093fe:	2003      	movs	r0, #3
}
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009402:	2001      	movs	r0, #1
}
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800940a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800940c:	e7e3      	b.n	80093d6 <RCCEx_PLL2_Config+0xb6>
 800940e:	bf00      	nop
 8009410:	58024400 	.word	0x58024400
 8009414:	ffff0007 	.word	0xffff0007

08009418 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009418:	4a3b      	ldr	r2, [pc, #236]	; (8009508 <RCCEx_PLL3_Config+0xf0>)
{
 800941a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800941c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d069      	beq.n	80094fa <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009426:	6813      	ldr	r3, [r2, #0]
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800942c:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800942e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009432:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009434:	f7fc fefc 	bl	8006230 <HAL_GetTick>
 8009438:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800943a:	e004      	b.n	8009446 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800943c:	f7fc fef8 	bl	8006230 <HAL_GetTick>
 8009440:	1b43      	subs	r3, r0, r5
 8009442:	2b02      	cmp	r3, #2
 8009444:	d857      	bhi.n	80094f6 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	009a      	lsls	r2, r3, #2
 800944a:	d4f7      	bmi.n	800943c <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800944c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800944e:	6832      	ldr	r2, [r6, #0]
 8009450:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009454:	492d      	ldr	r1, [pc, #180]	; (800950c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009456:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800945a:	62a3      	str	r3, [r4, #40]	; 0x28
 800945c:	6875      	ldr	r5, [r6, #4]
 800945e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009462:	3d01      	subs	r5, #1
 8009464:	1e50      	subs	r0, r2, #1
 8009466:	3b01      	subs	r3, #1
 8009468:	6932      	ldr	r2, [r6, #16]
 800946a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800946e:	025b      	lsls	r3, r3, #9
 8009470:	0400      	lsls	r0, r0, #16
 8009472:	3a01      	subs	r2, #1
 8009474:	b29b      	uxth	r3, r3
 8009476:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800947a:	0612      	lsls	r2, r2, #24
 800947c:	4303      	orrs	r3, r0
 800947e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009482:	432b      	orrs	r3, r5
 8009484:	4313      	orrs	r3, r2
 8009486:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800948a:	6972      	ldr	r2, [r6, #20]
 800948c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009490:	4313      	orrs	r3, r2
 8009492:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009496:	69b2      	ldr	r2, [r6, #24]
 8009498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800949c:	4313      	orrs	r3, r2
 800949e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80094aa:	69f3      	ldr	r3, [r6, #28]
 80094ac:	4011      	ands	r1, r2
 80094ae:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80094b2:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80094be:	b1f7      	cbz	r7, 80094fe <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094c0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094c2:	bf0c      	ite	eq
 80094c4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094c8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80094cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094ce:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <RCCEx_PLL3_Config+0xf0>)
 80094d0:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094d2:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80094d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094d8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80094da:	f7fc fea9 	bl	8006230 <HAL_GetTick>
 80094de:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094e0:	e004      	b.n	80094ec <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094e2:	f7fc fea5 	bl	8006230 <HAL_GetTick>
 80094e6:	1b00      	subs	r0, r0, r4
 80094e8:	2802      	cmp	r0, #2
 80094ea:	d804      	bhi.n	80094f6 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	d5f7      	bpl.n	80094e2 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80094f2:	2000      	movs	r0, #0
}
 80094f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80094f6:	2003      	movs	r0, #3
}
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80094fa:	2001      	movs	r0, #1
}
 80094fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009502:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009504:	e7e3      	b.n	80094ce <RCCEx_PLL3_Config+0xb6>
 8009506:	bf00      	nop
 8009508:	58024400 	.word	0x58024400
 800950c:	ffff0007 	.word	0xffff0007

08009510 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009514:	6803      	ldr	r3, [r0, #0]
{
 8009516:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009518:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800951c:	d01c      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800951e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009520:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009524:	f000 84c7 	beq.w	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8009528:	d823      	bhi.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800952a:	2a00      	cmp	r2, #0
 800952c:	f000 842c 	beq.w	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8009530:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009534:	d120      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009536:	2102      	movs	r1, #2
 8009538:	3004      	adds	r0, #4
 800953a:	f7ff fef1 	bl	8009320 <RCCEx_PLL2_Config>
 800953e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009540:	2e00      	cmp	r6, #0
 8009542:	f040 84c0 	bne.w	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8009546:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009548:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800954a:	48b0      	ldr	r0, [pc, #704]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800954c:	2600      	movs	r6, #0
 800954e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009550:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8009554:	430a      	orrs	r2, r1
 8009556:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009558:	05da      	lsls	r2, r3, #23
 800955a:	d511      	bpl.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800955c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800955e:	2a04      	cmp	r2, #4
 8009560:	f200 8580 	bhi.w	800a064 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8009564:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009568:	04c104ba 	.word	0x04c104ba
 800956c:	033b04b2 	.word	0x033b04b2
 8009570:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009572:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009576:	d0e8      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009578:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800957a:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800957e:	d4ed      	bmi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009580:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009582:	059f      	lsls	r7, r3, #22
 8009584:	d51b      	bpl.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009586:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009588:	2a80      	cmp	r2, #128	; 0x80
 800958a:	f000 84b7 	beq.w	8009efc <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800958e:	f200 8127 	bhi.w	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009592:	2a00      	cmp	r2, #0
 8009594:	f000 83e6 	beq.w	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8009598:	2a40      	cmp	r2, #64	; 0x40
 800959a:	f040 8128 	bne.w	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800959e:	2100      	movs	r1, #0
 80095a0:	1d20      	adds	r0, r4, #4
 80095a2:	f7ff febd 	bl	8009320 <RCCEx_PLL2_Config>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	f040 83cc 	bne.w	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80095b0:	4996      	ldr	r1, [pc, #600]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80095b2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80095b4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80095b6:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80095ba:	4302      	orrs	r2, r0
 80095bc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80095be:	0558      	lsls	r0, r3, #21
 80095c0:	d51f      	bpl.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80095c2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80095c6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80095ca:	f000 8462 	beq.w	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80095ce:	f200 8111 	bhi.w	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	f000 83c0 	beq.w	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80095d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80095dc:	f040 8112 	bne.w	8009804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095e0:	2100      	movs	r1, #0
 80095e2:	1d20      	adds	r0, r4, #4
 80095e4:	f7ff fe9c 	bl	8009320 <RCCEx_PLL2_Config>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	f040 83b1 	bne.w	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095f2:	4986      	ldr	r1, [pc, #536]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80095f4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80095f8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80095fa:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80095fe:	4302      	orrs	r2, r0
 8009600:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009602:	0519      	lsls	r1, r3, #20
 8009604:	d51f      	bpl.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009606:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800960a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800960e:	f000 8437 	beq.w	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8009612:	f200 80fd 	bhi.w	8009810 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009616:	2a00      	cmp	r2, #0
 8009618:	f000 83aa 	beq.w	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800961c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009620:	f040 80fe 	bne.w	8009820 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009624:	2100      	movs	r1, #0
 8009626:	1d20      	adds	r0, r4, #4
 8009628:	f7ff fe7a 	bl	8009320 <RCCEx_PLL2_Config>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009630:	2d00      	cmp	r5, #0
 8009632:	f040 8387 	bne.w	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009636:	4975      	ldr	r1, [pc, #468]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009638:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800963c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800963e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8009642:	4302      	orrs	r2, r0
 8009644:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009646:	019a      	lsls	r2, r3, #6
 8009648:	d518      	bpl.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800964a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800964c:	2a20      	cmp	r2, #32
 800964e:	f000 840d 	beq.w	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009652:	f200 80e8 	bhi.w	8009826 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8009656:	b13a      	cbz	r2, 8009668 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8009658:	2a10      	cmp	r2, #16
 800965a:	f040 80e7 	bne.w	800982c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800965e:	496b      	ldr	r1, [pc, #428]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009660:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009666:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009668:	2d00      	cmp	r5, #0
 800966a:	f040 83ba 	bne.w	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800966e:	4967      	ldr	r1, [pc, #412]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009670:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009672:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009674:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009678:	4302      	orrs	r2, r0
 800967a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800967c:	04df      	lsls	r7, r3, #19
 800967e:	d51d      	bpl.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009680:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009682:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009686:	f000 840d 	beq.w	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800968a:	f200 80d2 	bhi.w	8009832 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800968e:	2a00      	cmp	r2, #0
 8009690:	f000 8374 	beq.w	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8009694:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009698:	f040 80d3 	bne.w	8009842 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800969c:	2100      	movs	r1, #0
 800969e:	1d20      	adds	r0, r4, #4
 80096a0:	f7ff fe3e 	bl	8009320 <RCCEx_PLL2_Config>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096a8:	2d00      	cmp	r5, #0
 80096aa:	f040 834f 	bne.w	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096ae:	4957      	ldr	r1, [pc, #348]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80096b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80096b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80096b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80096b8:	4302      	orrs	r2, r0
 80096ba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096bc:	0498      	lsls	r0, r3, #18
 80096be:	d51b      	bpl.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 80096c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096c2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80096c6:	f000 83bd 	beq.w	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80096ca:	f200 80bd 	bhi.w	8009848 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80096ce:	b14a      	cbz	r2, 80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80096d0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80096d4:	f040 80c2 	bne.w	800985c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096d8:	2101      	movs	r1, #1
 80096da:	1d20      	adds	r0, r4, #4
 80096dc:	f7ff fe20 	bl	8009320 <RCCEx_PLL2_Config>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	f040 837e 	bne.w	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80096ea:	4948      	ldr	r1, [pc, #288]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80096ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80096ee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80096f0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80096f4:	4302      	orrs	r2, r0
 80096f6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096f8:	0459      	lsls	r1, r3, #17
 80096fa:	d51d      	bpl.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 80096fc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009700:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009704:	f000 83a8 	beq.w	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8009708:	f200 80ab 	bhi.w	8009862 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800970c:	b14a      	cbz	r2, 8009722 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800970e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009712:	f040 80b0 	bne.w	8009876 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009716:	2101      	movs	r1, #1
 8009718:	1d20      	adds	r0, r4, #4
 800971a:	f7ff fe01 	bl	8009320 <RCCEx_PLL2_Config>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009722:	2d00      	cmp	r5, #0
 8009724:	f040 8363 	bne.w	8009dee <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009728:	4938      	ldr	r1, [pc, #224]	; (800980c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800972a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800972e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009730:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009734:	4302      	orrs	r2, r0
 8009736:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	d509      	bpl.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 800973c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800973e:	2a00      	cmp	r2, #0
 8009740:	f000 8264 	beq.w	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8009744:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009748:	f000 825a 	beq.w	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800974c:	2601      	movs	r6, #1
 800974e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009750:	041f      	lsls	r7, r3, #16
 8009752:	d50d      	bpl.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8009754:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009756:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800975a:	f000 8420 	beq.w	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 800975e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009762:	f000 82ce 	beq.w	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009766:	2a00      	cmp	r2, #0
 8009768:	f000 82d1 	beq.w	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800976c:	2601      	movs	r6, #1
 800976e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009770:	01d8      	lsls	r0, r3, #7
 8009772:	f100 81cf 	bmi.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009776:	0259      	lsls	r1, r3, #9
 8009778:	f100 81ef 	bmi.w	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800977c:	07df      	lsls	r7, r3, #31
 800977e:	f140 8088 	bpl.w	8009892 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009782:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009784:	2a28      	cmp	r2, #40	; 0x28
 8009786:	f200 81cf 	bhi.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800978a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800978e:	007e      	.short	0x007e
 8009790:	01cd01cd 	.word	0x01cd01cd
 8009794:	01cd01cd 	.word	0x01cd01cd
 8009798:	01cd01cd 	.word	0x01cd01cd
 800979c:	03d401cd 	.word	0x03d401cd
 80097a0:	01cd01cd 	.word	0x01cd01cd
 80097a4:	01cd01cd 	.word	0x01cd01cd
 80097a8:	01cd01cd 	.word	0x01cd01cd
 80097ac:	007701cd 	.word	0x007701cd
 80097b0:	01cd01cd 	.word	0x01cd01cd
 80097b4:	01cd01cd 	.word	0x01cd01cd
 80097b8:	01cd01cd 	.word	0x01cd01cd
 80097bc:	007e01cd 	.word	0x007e01cd
 80097c0:	01cd01cd 	.word	0x01cd01cd
 80097c4:	01cd01cd 	.word	0x01cd01cd
 80097c8:	01cd01cd 	.word	0x01cd01cd
 80097cc:	007e01cd 	.word	0x007e01cd
 80097d0:	01cd01cd 	.word	0x01cd01cd
 80097d4:	01cd01cd 	.word	0x01cd01cd
 80097d8:	01cd01cd 	.word	0x01cd01cd
 80097dc:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 80097e0:	2ac0      	cmp	r2, #192	; 0xc0
 80097e2:	f43f aee2 	beq.w	80095aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80097e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80097ea:	f43f aede 	beq.w	80095aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80097ee:	2601      	movs	r6, #1
 80097f0:	4635      	mov	r5, r6
 80097f2:	e6e4      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80097f4:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80097f8:	f43f aef8 	beq.w	80095ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80097fc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009800:	f43f aef4 	beq.w	80095ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009804:	2601      	movs	r6, #1
 8009806:	4635      	mov	r5, r6
 8009808:	e6fb      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800980a:	bf00      	nop
 800980c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8009810:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009814:	f43f af0c 	beq.w	8009630 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009818:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800981c:	f43f af08 	beq.w	8009630 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009820:	2601      	movs	r6, #1
 8009822:	4635      	mov	r5, r6
 8009824:	e70f      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8009826:	2a30      	cmp	r2, #48	; 0x30
 8009828:	f43f af1e 	beq.w	8009668 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800982c:	2601      	movs	r6, #1
 800982e:	4635      	mov	r5, r6
 8009830:	e724      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009832:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009836:	f43f af37 	beq.w	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800983a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800983e:	f43f af33 	beq.w	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009842:	2601      	movs	r6, #1
 8009844:	4635      	mov	r5, r6
 8009846:	e739      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009848:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800984c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009850:	f43f af48 	beq.w	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009854:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8009858:	f43f af44 	beq.w	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800985c:	2601      	movs	r6, #1
 800985e:	4635      	mov	r5, r6
 8009860:	e74a      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009862:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009866:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800986a:	f43f af5a 	beq.w	8009722 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800986e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009872:	f43f af56 	beq.w	8009722 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009876:	2601      	movs	r6, #1
 8009878:	4635      	mov	r5, r6
 800987a:	e75d      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800987c:	2101      	movs	r1, #1
 800987e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009882:	f7ff fdc9 	bl	8009418 <RCCEx_PLL3_Config>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800988a:	2d00      	cmp	r5, #0
 800988c:	f000 82c0 	beq.w	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8009890:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009892:	0798      	lsls	r0, r3, #30
 8009894:	d516      	bpl.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009896:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009898:	2a05      	cmp	r2, #5
 800989a:	f200 83e6 	bhi.w	800a06a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800989e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80098a2:	000d      	.short	0x000d
 80098a4:	00060336 	.word	0x00060336
 80098a8:	000d000d 	.word	0x000d000d
 80098ac:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098ae:	2101      	movs	r1, #1
 80098b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098b4:	f7ff fdb0 	bl	8009418 <RCCEx_PLL3_Config>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098bc:	2d00      	cmp	r5, #0
 80098be:	f000 8279 	beq.w	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80098c2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098c4:	0759      	lsls	r1, r3, #29
 80098c6:	d517      	bpl.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80098c8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80098cc:	2a05      	cmp	r2, #5
 80098ce:	f200 83c6 	bhi.w	800a05e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 80098d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80098d6:	000d      	.short	0x000d
 80098d8:	00060326 	.word	0x00060326
 80098dc:	000d000d 	.word	0x000d000d
 80098e0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098e2:	2101      	movs	r1, #1
 80098e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098e8:	f7ff fd96 	bl	8009418 <RCCEx_PLL3_Config>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	f000 826a 	beq.w	8009dca <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80098f6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098f8:	069a      	lsls	r2, r3, #26
 80098fa:	d51d      	bpl.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80098fc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009900:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009904:	f000 8340 	beq.w	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8009908:	f200 81af 	bhi.w	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800990c:	b14a      	cbz	r2, 8009922 <HAL_RCCEx_PeriphCLKConfig+0x412>
 800990e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009912:	f040 81b4 	bne.w	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009916:	2100      	movs	r1, #0
 8009918:	1d20      	adds	r0, r4, #4
 800991a:	f7ff fd01 	bl	8009320 <RCCEx_PLL2_Config>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009922:	2d00      	cmp	r5, #0
 8009924:	f040 823c 	bne.w	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009928:	49b3      	ldr	r1, [pc, #716]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800992a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800992e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009930:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009934:	4302      	orrs	r2, r0
 8009936:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009938:	065f      	lsls	r7, r3, #25
 800993a:	d51d      	bpl.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800993c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009940:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009944:	f000 8334 	beq.w	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8009948:	f200 817f 	bhi.w	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800994c:	b14a      	cbz	r2, 8009962 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800994e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009952:	f040 8184 	bne.w	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009956:	2100      	movs	r1, #0
 8009958:	1d20      	adds	r0, r4, #4
 800995a:	f7ff fce1 	bl	8009320 <RCCEx_PLL2_Config>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009962:	2d00      	cmp	r5, #0
 8009964:	f040 8221 	bne.w	8009daa <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009968:	49a3      	ldr	r1, [pc, #652]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800996a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800996e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009970:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009974:	4302      	orrs	r2, r0
 8009976:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009978:	0618      	lsls	r0, r3, #24
 800997a:	d51d      	bpl.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800997c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009980:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009984:	f000 831f 	beq.w	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009988:	f200 814f 	bhi.w	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x71a>
 800998c:	b14a      	cbz	r2, 80099a2 <HAL_RCCEx_PeriphCLKConfig+0x492>
 800998e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009992:	f040 8154 	bne.w	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009996:	2100      	movs	r1, #0
 8009998:	1d20      	adds	r0, r4, #4
 800999a:	f7ff fcc1 	bl	8009320 <RCCEx_PLL2_Config>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	f040 81f7 	bne.w	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099a8:	4993      	ldr	r1, [pc, #588]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80099ae:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80099b0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80099b4:	4302      	orrs	r2, r0
 80099b6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80099b8:	0719      	lsls	r1, r3, #28
 80099ba:	d50b      	bpl.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80099bc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80099c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80099c4:	f000 831e 	beq.w	800a004 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80099c8:	488b      	ldr	r0, [pc, #556]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80099cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80099d0:	430a      	orrs	r2, r1
 80099d2:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099d4:	06da      	lsls	r2, r3, #27
 80099d6:	d50b      	bpl.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80099d8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80099dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80099e0:	f000 8305 	beq.w	8009fee <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099e4:	4884      	ldr	r0, [pc, #528]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80099e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80099ec:	430a      	orrs	r2, r1
 80099ee:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099f0:	031f      	lsls	r7, r3, #12
 80099f2:	d50e      	bpl.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80099f4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80099f8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80099fc:	f000 816b 	beq.w	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8009a00:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009a04:	f000 816e 	beq.w	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	f000 82e7 	beq.w	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a0e:	2601      	movs	r6, #1
 8009a10:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a12:	0358      	lsls	r0, r3, #13
 8009a14:	d50f      	bpl.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8009a16:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009a1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009a1e:	f000 8144 	beq.w	8009caa <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8009a22:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009a26:	f000 8147 	beq.w	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8009a2a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009a2e:	f000 82a2 	beq.w	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009a32:	2601      	movs	r6, #1
 8009a34:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a36:	03d9      	lsls	r1, r3, #15
 8009a38:	d517      	bpl.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009a3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	f000 8288 	beq.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8009a42:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009a46:	f040 817a 	bne.w	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	1d20      	adds	r0, r4, #4
 8009a4e:	f7ff fc67 	bl	8009320 <RCCEx_PLL2_Config>
 8009a52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	f040 81e5 	bne.w	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a5c:	4966      	ldr	r1, [pc, #408]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a60:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a66:	4302      	orrs	r2, r0
 8009a68:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a6a:	009a      	lsls	r2, r3, #2
 8009a6c:	f100 815c 	bmi.w	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a70:	039f      	lsls	r7, r3, #14
 8009a72:	d43f      	bmi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009a74:	1e30      	subs	r0, r6, #0
 8009a76:	bf18      	it	ne
 8009a78:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a7a:	02de      	lsls	r6, r3, #11
 8009a7c:	d506      	bpl.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a7e:	495e      	ldr	r1, [pc, #376]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a80:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009a82:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009a88:	432a      	orrs	r2, r5
 8009a8a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a8c:	00dd      	lsls	r5, r3, #3
 8009a8e:	d507      	bpl.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a90:	4959      	ldr	r1, [pc, #356]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a92:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009a96:	690a      	ldr	r2, [r1, #16]
 8009a98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a9c:	432a      	orrs	r2, r5
 8009a9e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009aa0:	0299      	lsls	r1, r3, #10
 8009aa2:	d506      	bpl.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009aa4:	4954      	ldr	r1, [pc, #336]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009aa6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009aa8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009aaa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009aae:	432a      	orrs	r2, r5
 8009ab0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ab2:	005a      	lsls	r2, r3, #1
 8009ab4:	d509      	bpl.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ab6:	4a50      	ldr	r2, [pc, #320]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ab8:	6911      	ldr	r1, [r2, #16]
 8009aba:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009abe:	6111      	str	r1, [r2, #16]
 8009ac0:	6911      	ldr	r1, [r2, #16]
 8009ac2:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8009ac6:	4329      	orrs	r1, r5
 8009ac8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da06      	bge.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ace:	494a      	ldr	r1, [pc, #296]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ad0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009ad2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009ad8:	432a      	orrs	r2, r5
 8009ada:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	d507      	bpl.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ae0:	4a45      	ldr	r2, [pc, #276]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ae2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009ae6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ae8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009aec:	430b      	orrs	r3, r1
 8009aee:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009af4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009af8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009afc:	f000 8232 	beq.w	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8009b00:	f240 80c3 	bls.w	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8009b04:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009b08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b0c:	f000 80c0 	beq.w	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009b10:	2001      	movs	r0, #1
 8009b12:	e7b2      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8009b14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009b16:	2a03      	cmp	r2, #3
 8009b18:	f200 82aa 	bhi.w	800a070 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8009b1c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009b20:	018a0010 	.word	0x018a0010
 8009b24:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b28:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b2a:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b2e:	f57f aec9 	bpl.w	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009b32:	e6b0      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b34:	2102      	movs	r1, #2
 8009b36:	1d20      	adds	r0, r4, #4
 8009b38:	f7ff fbf2 	bl	8009320 <RCCEx_PLL2_Config>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b40:	2d00      	cmp	r5, #0
 8009b42:	f040 8152 	bne.w	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b46:	492c      	ldr	r1, [pc, #176]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009b48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009b4a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009b4c:	f022 0203 	bic.w	r2, r2, #3
 8009b50:	4302      	orrs	r2, r0
 8009b52:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b54:	0259      	lsls	r1, r3, #9
 8009b56:	f57f ae11 	bpl.w	800977c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b5a:	4b28      	ldr	r3, [pc, #160]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b5e:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b64:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009b66:	f7fc fb63 	bl	8006230 <HAL_GetTick>
 8009b6a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b6c:	e005      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b6e:	f7fc fb5f 	bl	8006230 <HAL_GetTick>
 8009b72:	1bc0      	subs	r0, r0, r7
 8009b74:	2864      	cmp	r0, #100	; 0x64
 8009b76:	f200 81e8 	bhi.w	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7e:	05da      	lsls	r2, r3, #23
 8009b80:	d5f5      	bpl.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009b82:	2d00      	cmp	r5, #0
 8009b84:	f040 8267 	bne.w	800a056 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b88:	4a1b      	ldr	r2, [pc, #108]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009b8a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009b8e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009b90:	4059      	eors	r1, r3
 8009b92:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009b96:	d00b      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b98:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b9a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b9c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ba0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009ba4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ba6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009ba8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009bac:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009bae:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb4:	f000 8231 	beq.w	800a01a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bb8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009bbc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009bc0:	f000 823f 	beq.w	800a042 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8009bc4:	490c      	ldr	r1, [pc, #48]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009bc6:	690a      	ldr	r2, [r1, #16]
 8009bc8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009bcc:	610a      	str	r2, [r1, #16]
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bd4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	e5ce      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009bde:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	f040 80b5 	bne.w	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009be6:	4904      	ldr	r1, [pc, #16]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009bec:	f022 0207 	bic.w	r2, r2, #7
 8009bf0:	4302      	orrs	r2, r0
 8009bf2:	650a      	str	r2, [r1, #80]	; 0x50
 8009bf4:	e4c5      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009bf6:	bf00      	nop
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c00:	2101      	movs	r1, #1
 8009c02:	1d20      	adds	r0, r4, #4
 8009c04:	f7ff fb8c 	bl	8009320 <RCCEx_PLL2_Config>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	f040 810c 	bne.w	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009c12:	49b9      	ldr	r1, [pc, #740]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c14:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009c16:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009c18:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c1e:	ea42 0200 	orr.w	r2, r2, r0
 8009c22:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c24:	f57f ada4 	bpl.w	8009770 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009c28:	e594      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c2a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009c2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009c32:	f43f aeb6 	beq.w	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009c36:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009c3a:	f43f aeb2 	beq.w	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009c3e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c40:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c42:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c44:	f57f aec6 	bpl.w	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009c48:	e6b8      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c4a:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009c4e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009c52:	f43f ae86 	beq.w	8009962 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c56:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009c5a:	f43f ae82 	beq.w	8009962 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c5e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c60:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c64:	f57f aea8 	bpl.w	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c68:	e688      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c6a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009c6e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009c72:	f43f ae56 	beq.w	8009922 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009c76:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009c7a:	f43f ae52 	beq.w	8009922 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009c7e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c80:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c82:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c84:	f57f ae78 	bpl.w	8009978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009c88:	e658      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	f47f af40 	bne.w	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	f47f af3d 	bne.w	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c96:	4d98      	ldr	r5, [pc, #608]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009c98:	1e30      	subs	r0, r6, #0
 8009c9a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009c9c:	bf18      	it	ne
 8009c9e:	2001      	movne	r0, #1
 8009ca0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	656a      	str	r2, [r5, #84]	; 0x54
 8009ca8:	e6e7      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009caa:	2101      	movs	r1, #1
 8009cac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cb0:	f7ff fbb2 	bl	8009418 <RCCEx_PLL3_Config>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	f040 80a4 	bne.w	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cbe:	498e      	ldr	r1, [pc, #568]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009cc0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009cc4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009cc6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009cca:	4302      	orrs	r2, r0
 8009ccc:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cce:	03d9      	lsls	r1, r3, #15
 8009cd0:	f57f aecb 	bpl.w	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009cd4:	e6b1      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cd6:	2102      	movs	r1, #2
 8009cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cdc:	f7ff fb9c 	bl	8009418 <RCCEx_PLL3_Config>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ce4:	2d00      	cmp	r5, #0
 8009ce6:	f040 8089 	bne.w	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cea:	4983      	ldr	r1, [pc, #524]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009cec:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8009cf0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009cf2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009cf6:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009cf8:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cfa:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009cfc:	f57f ae9b 	bpl.w	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009d00:	e689      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d02:	2101      	movs	r1, #1
 8009d04:	1d20      	adds	r0, r4, #4
 8009d06:	f7ff fb0b 	bl	8009320 <RCCEx_PLL2_Config>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	d16f      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d12:	4979      	ldr	r1, [pc, #484]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d14:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009d16:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d1c:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d1e:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d20:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d22:	f57f ad28 	bpl.w	8009776 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009d26:	e6f5      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d28:	2102      	movs	r1, #2
 8009d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d2e:	f7ff fb73 	bl	8009418 <RCCEx_PLL3_Config>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f ae9b 	beq.w	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8009d3a:	2601      	movs	r6, #1
 8009d3c:	e698      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009d3e:	2601      	movs	r6, #1
 8009d40:	4635      	mov	r5, r6
 8009d42:	e692      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009d44:	462e      	mov	r6, r5
 8009d46:	e47e      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d48:	462e      	mov	r6, r5
 8009d4a:	e438      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009d4c:	462e      	mov	r6, r5
 8009d4e:	e4b5      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009d50:	462e      	mov	r6, r5
 8009d52:	e416      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009d54:	462e      	mov	r6, r5
 8009d56:	e454      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d58:	4967      	ldr	r1, [pc, #412]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d5a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d60:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d62:	e443      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d64:	4964      	ldr	r1, [pc, #400]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d6c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d6e:	e41c      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d70:	4961      	ldr	r1, [pc, #388]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d72:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d78:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d7a:	e459      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d7c:	495e      	ldr	r1, [pc, #376]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d7e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d84:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d86:	e48f      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d88:	485b      	ldr	r0, [pc, #364]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009d8c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009d90:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009d92:	f7ff bbda 	b.w	800954a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d96:	0719      	lsls	r1, r3, #28
 8009d98:	462e      	mov	r6, r5
 8009d9a:	f57f ae1b 	bpl.w	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009d9e:	e60d      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009da0:	065f      	lsls	r7, r3, #25
 8009da2:	462e      	mov	r6, r5
 8009da4:	f57f ade8 	bpl.w	8009978 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009da8:	e5c8      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009daa:	0618      	lsls	r0, r3, #24
 8009dac:	462e      	mov	r6, r5
 8009dae:	f57f ae03 	bpl.w	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009db2:	e5e3      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009db4:	4950      	ldr	r1, [pc, #320]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009db6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009db8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009dba:	f022 0207 	bic.w	r2, r2, #7
 8009dbe:	4302      	orrs	r2, r0
 8009dc0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dc2:	0759      	lsls	r1, r3, #29
 8009dc4:	f57f ad98 	bpl.w	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009dc8:	e57e      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009dca:	494b      	ldr	r1, [pc, #300]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009dcc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009dd0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009dd2:	f022 0207 	bic.w	r2, r2, #7
 8009dd6:	4302      	orrs	r2, r0
 8009dd8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dda:	069a      	lsls	r2, r3, #26
 8009ddc:	f57f adac 	bpl.w	8009938 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009de0:	e58c      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009de2:	462e      	mov	r6, r5
 8009de4:	e44a      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009de6:	462e      	mov	r6, r5
 8009de8:	e486      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009dea:	462e      	mov	r6, r5
 8009dec:	e4c3      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009dee:	462e      	mov	r6, r5
 8009df0:	e4a2      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009df2:	01d8      	lsls	r0, r3, #7
 8009df4:	462e      	mov	r6, r5
 8009df6:	f57f acbe 	bpl.w	8009776 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009dfa:	e68b      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dfc:	0358      	lsls	r0, r3, #13
 8009dfe:	462e      	mov	r6, r5
 8009e00:	f57f ae19 	bpl.w	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009e04:	e607      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e06:	03d9      	lsls	r1, r3, #15
 8009e08:	462e      	mov	r6, r5
 8009e0a:	f57f ae2e 	bpl.w	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009e0e:	e614      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e10:	4939      	ldr	r1, [pc, #228]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009e12:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009e14:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009e16:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8009e1a:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e1c:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e1e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e20:	f57f ad50 	bpl.w	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009e24:	e537      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009e26:	462e      	mov	r6, r5
 8009e28:	e61f      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e2a:	041f      	lsls	r7, r3, #16
 8009e2c:	462e      	mov	r6, r5
 8009e2e:	f57f ac9f 	bpl.w	8009770 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009e32:	e48f      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e34:	4930      	ldr	r1, [pc, #192]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009e36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009e38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009e3c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e3e:	2d00      	cmp	r5, #0
 8009e40:	d1d3      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8009e42:	e680      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e44:	2101      	movs	r1, #1
 8009e46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e4a:	f7ff fae5 	bl	8009418 <RCCEx_PLL3_Config>
 8009e4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	d1c7      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8009e56:	e448      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e58:	2101      	movs	r1, #1
 8009e5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e5e:	f7ff fadb 	bl	8009418 <RCCEx_PLL3_Config>
 8009e62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	d1c1      	bne.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8009e6a:	e45d      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	1d20      	adds	r0, r4, #4
 8009e70:	f7ff fa56 	bl	8009320 <RCCEx_PLL2_Config>
 8009e74:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	d1b2      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8009e7c:	f7ff bbf7 	b.w	800966e <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e80:	2100      	movs	r1, #0
 8009e82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e86:	f7ff fac7 	bl	8009418 <RCCEx_PLL3_Config>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	4605      	mov	r5, r0
      break;
 8009e8e:	f7ff bbcf 	b.w	8009630 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e92:	2100      	movs	r1, #0
 8009e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e98:	f7ff fabe 	bl	8009418 <RCCEx_PLL3_Config>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	4605      	mov	r5, r0
      break;
 8009ea0:	f7ff bba4 	b.w	80095ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009eaa:	f7ff fab5 	bl	8009418 <RCCEx_PLL3_Config>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	4605      	mov	r5, r0
      break;
 8009eb2:	f7ff bbf9 	b.w	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	3024      	adds	r0, #36	; 0x24
 8009eba:	f7ff faad 	bl	8009418 <RCCEx_PLL3_Config>
 8009ebe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009ec0:	2e00      	cmp	r6, #0
 8009ec2:	f43f ab40 	beq.w	8009546 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f7ff bb46 	b.w	8009558 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ed2:	f7ff faa1 	bl	8009418 <RCCEx_PLL3_Config>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	4605      	mov	r5, r0
      break;
 8009eda:	e681      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009edc:	4906      	ldr	r1, [pc, #24]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8009ede:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009ee2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009ee6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009ee8:	e67a      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eea:	2100      	movs	r1, #0
 8009eec:	1d20      	adds	r0, r4, #4
 8009eee:	f7ff fa17 	bl	8009320 <RCCEx_PLL2_Config>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	4605      	mov	r5, r0
      break;
 8009ef6:	e673      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009ef8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009efc:	2100      	movs	r1, #0
 8009efe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f02:	f7ff fa89 	bl	8009418 <RCCEx_PLL3_Config>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	4605      	mov	r5, r0
      break;
 8009f0a:	f7ff bb4e 	b.w	80095aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f0e:	2101      	movs	r1, #1
 8009f10:	1d20      	adds	r0, r4, #4
 8009f12:	f7ff fa05 	bl	8009320 <RCCEx_PLL2_Config>
 8009f16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	f47f acd1 	bne.w	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8009f20:	e748      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f22:	2101      	movs	r1, #1
 8009f24:	1d20      	adds	r0, r4, #4
 8009f26:	f7ff f9fb 	bl	8009320 <RCCEx_PLL2_Config>
 8009f2a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	f47f ace1 	bne.w	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009f34:	e749      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f36:	2101      	movs	r1, #1
 8009f38:	1d20      	adds	r0, r4, #4
 8009f3a:	f7ff f9f1 	bl	8009320 <RCCEx_PLL2_Config>
 8009f3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	f47f aca4 	bne.w	8009890 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8009f48:	e762      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8009f4a:	2603      	movs	r6, #3
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	4635      	mov	r5, r6
 8009f50:	e414      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f52:	4949      	ldr	r1, [pc, #292]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009f56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f5a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	f47f af62 	bne.w	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009f62:	e57b      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f64:	4844      	ldr	r0, [pc, #272]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009f68:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009f6c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	f47f adce 	bne.w	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8009f74:	e68f      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f76:	4940      	ldr	r1, [pc, #256]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f78:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009f7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f7e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	f47f af40 	bne.w	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009f86:	e69a      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f88:	2102      	movs	r1, #2
 8009f8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f8e:	f7ff fa43 	bl	8009418 <RCCEx_PLL3_Config>
 8009f92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	f47f af02 	bne.w	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8009f9c:	e4c4      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9e:	4936      	ldr	r1, [pc, #216]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009fa0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009fa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009fa6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	f47f af22 	bne.w	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009fae:	e6b0      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fb6:	f7ff fa2f 	bl	8009418 <RCCEx_PLL3_Config>
 8009fba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	f47f aef3 	bne.w	8009daa <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009fc4:	e4d0      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fc6:	2102      	movs	r1, #2
 8009fc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fcc:	f7ff fa24 	bl	8009418 <RCCEx_PLL3_Config>
 8009fd0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	f47f aede 	bne.w	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8009fda:	e4e5      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fdc:	1d20      	adds	r0, r4, #4
 8009fde:	f7ff f99f 	bl	8009320 <RCCEx_PLL2_Config>
 8009fe2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	f47f af08 	bne.w	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009fec:	e67d      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009fee:	2102      	movs	r1, #2
 8009ff0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ff4:	f7ff fa10 	bl	8009418 <RCCEx_PLL3_Config>
 8009ff8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009ffc:	b100      	cbz	r0, 800a000 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8009ffe:	2601      	movs	r6, #1
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	e4ef      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a004:	2102      	movs	r1, #2
 800a006:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a00a:	f7ff fa05 	bl	8009418 <RCCEx_PLL3_Config>
 800a00e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a012:	b100      	cbz	r0, 800a016 <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 800a014:	2601      	movs	r6, #1
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	e4d6      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800a01a:	f7fc f909 	bl	8006230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a01e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a022:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a026:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a028:	e004      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a02a:	f7fc f901 	bl	8006230 <HAL_GetTick>
 800a02e:	1bc0      	subs	r0, r0, r7
 800a030:	4548      	cmp	r0, r9
 800a032:	d88a      	bhi.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a034:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a038:	079b      	lsls	r3, r3, #30
 800a03a:	d5f6      	bpl.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a03c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800a040:	e5ba      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a042:	480d      	ldr	r0, [pc, #52]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a044:	4a0d      	ldr	r2, [pc, #52]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800a046:	6901      	ldr	r1, [r0, #16]
 800a048:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a04c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800a050:	430a      	orrs	r2, r1
 800a052:	6102      	str	r2, [r0, #16]
 800a054:	e5bb      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800a056:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a058:	462e      	mov	r6, r5
 800a05a:	f7ff bb8f 	b.w	800977c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a05e:	2601      	movs	r6, #1
 800a060:	4635      	mov	r5, r6
 800a062:	e449      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a064:	2601      	movs	r6, #1
 800a066:	f7ff ba8b 	b.w	8009580 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a06a:	2601      	movs	r6, #1
 800a06c:	4635      	mov	r5, r6
 800a06e:	e429      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800a070:	2601      	movs	r6, #1
 800a072:	4635      	mov	r5, r6
 800a074:	f7ff bb7f 	b.w	8009776 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a078:	58024400 	.word	0x58024400
 800a07c:	00ffffcf 	.word	0x00ffffcf

0800a080 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a080:	4b58      	ldr	r3, [pc, #352]	; (800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 800a082:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a084:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a086:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a088:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800a08a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a08e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a092:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800a094:	d05c      	beq.n	800a150 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a096:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a09a:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a09e:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0a2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a0a6:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0a8:	ee07 4a90 	vmov	s15, r4
 800a0ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a0b0:	d003      	beq.n	800a0ba <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800a0b2:	2902      	cmp	r1, #2
 800a0b4:	d075      	beq.n	800a1a2 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800a0b6:	2900      	cmp	r1, #0
 800a0b8:	d04f      	beq.n	800a15a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0ba:	ee07 2a90 	vmov	s15, r2
 800a0be:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800a0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a0cc:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	ee06 3a90 	vmov	s13, r3
 800a0d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a0dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0e0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a0e4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a0e8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a0ec:	4a3d      	ldr	r2, [pc, #244]	; (800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 800a0ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a0f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0f8:	ee07 3a10 	vmov	s14, r3
 800a0fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a100:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a102:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a10a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a10e:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a112:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a114:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a118:	ee07 3a10 	vmov	s14, r3
 800a11c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a120:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a130:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a132:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a13e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a146:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a14a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a14e:	4770      	bx	lr
 800a150:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a152:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a156:	6082      	str	r2, [r0, #8]
}
 800a158:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15a:	6819      	ldr	r1, [r3, #0]
 800a15c:	0689      	lsls	r1, r1, #26
 800a15e:	d527      	bpl.n	800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a160:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a162:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a166:	4a22      	ldr	r2, [pc, #136]	; (800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a168:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a16c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a176:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a178:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	ee06 2a10 	vmov	s12, r2
 800a184:	ee06 3a90 	vmov	s13, r3
 800a188:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a18c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a190:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a194:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a198:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a19c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a1a0:	e7a4      	b.n	800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1a2:	ee07 2a90 	vmov	s15, r2
 800a1a6:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800a1aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ae:	e78a      	b.n	800a0c6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1b0:	ee07 2a90 	vmov	s15, r2
 800a1b4:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1c2:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a1da:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a1de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1e2:	e783      	b.n	800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	4a742400 	.word	0x4a742400
 800a1ec:	39000000 	.word	0x39000000
 800a1f0:	03d09000 	.word	0x03d09000
 800a1f4:	4bbebc20 	.word	0x4bbebc20
 800a1f8:	4c742400 	.word	0x4c742400

0800a1fc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1fc:	4b58      	ldr	r3, [pc, #352]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 800a1fe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a200:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a202:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a204:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800a206:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a20a:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a20e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800a210:	d05c      	beq.n	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a212:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a216:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a21a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a21e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a222:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a224:	ee07 4a90 	vmov	s15, r4
 800a228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a22c:	d003      	beq.n	800a236 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800a22e:	2902      	cmp	r1, #2
 800a230:	d075      	beq.n	800a31e <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800a232:	2900      	cmp	r1, #0
 800a234:	d04f      	beq.n	800a2d6 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a236:	ee07 2a90 	vmov	s15, r2
 800a23a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800a23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a248:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a250:	ee06 3a90 	vmov	s13, r3
 800a254:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a258:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a25c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a260:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a264:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a268:	4a3d      	ldr	r2, [pc, #244]	; (800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800a26a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a26e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a270:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a274:	ee07 3a10 	vmov	s14, r3
 800a278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a27c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a27e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a28e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a290:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a294:	ee07 3a10 	vmov	s14, r3
 800a298:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a29c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a2a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a2ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a2ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a2c6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a2ca:	4770      	bx	lr
 800a2cc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2ce:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2d2:	6082      	str	r2, [r0, #8]
}
 800a2d4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d6:	6819      	ldr	r1, [r3, #0]
 800a2d8:	0689      	lsls	r1, r1, #26
 800a2da:	d527      	bpl.n	800a32c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2dc:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2de:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2e2:	4a22      	ldr	r2, [pc, #136]	; (800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2e4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2e8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2f2:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2f4:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	ee06 2a10 	vmov	s12, r2
 800a300:	ee06 3a90 	vmov	s13, r3
 800a304:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a308:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a30c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a310:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a314:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a318:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a31c:	e7a4      	b.n	800a268 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a31e:	ee07 2a90 	vmov	s15, r2
 800a322:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a370 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 800a326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a32a:	e78a      	b.n	800a242 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a32c:	ee07 2a90 	vmov	s15, r2
 800a330:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a374 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a33e:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a346:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a352:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a356:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a35a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a35e:	e783      	b.n	800a268 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a360:	58024400 	.word	0x58024400
 800a364:	4a742400 	.word	0x4a742400
 800a368:	39000000 	.word	0x39000000
 800a36c:	03d09000 	.word	0x03d09000
 800a370:	4bbebc20 	.word	0x4bbebc20
 800a374:	4c742400 	.word	0x4c742400

0800a378 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a378:	4b5c      	ldr	r3, [pc, #368]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 800a37a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a37c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a37e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a380:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800a382:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a386:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a38a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800a38c:	d05c      	beq.n	800a448 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a38e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a392:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a396:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a39a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a39e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3a0:	ee07 4a90 	vmov	s15, r4
 800a3a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a3a8:	d07e      	beq.n	800a4a8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800a3aa:	2902      	cmp	r1, #2
 800a3ac:	d075      	beq.n	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d04f      	beq.n	800a452 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3b2:	ee07 2a90 	vmov	s15, r2
 800a3b6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a3c4:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3cc:	ee06 3a90 	vmov	s13, r3
 800a3d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a3d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a3d8:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a3dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a3e0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a3e4:	4a41      	ldr	r2, [pc, #260]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800a3e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a3f0:	ee07 3a10 	vmov	s14, r3
 800a3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a3f8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a3fa:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a3fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a406:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a40a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a40c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a410:	ee07 3a10 	vmov	s14, r3
 800a414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a418:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a41c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a424:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a428:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a42a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a436:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a442:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a446:	4770      	bx	lr
 800a448:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a44a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a44e:	6082      	str	r2, [r0, #8]
}
 800a450:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a452:	6819      	ldr	r1, [r3, #0]
 800a454:	0689      	lsls	r1, r1, #26
 800a456:	d52e      	bpl.n	800a4b6 <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a458:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a45a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a45e:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a460:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a464:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a46e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a470:	eddf 4a20 	vldr	s9, [pc, #128]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a478:	ee06 2a10 	vmov	s12, r2
 800a47c:	ee06 3a90 	vmov	s13, r3
 800a480:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a484:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a488:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a48c:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a490:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a494:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a498:	e7a4      	b.n	800a3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a49a:	ee07 2a90 	vmov	s15, r2
 800a49e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a4fc <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 800a4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4a6:	e78a      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4a8:	ee07 2a90 	vmov	s15, r2
 800a4ac:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a500 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a4b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4b4:	e783      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4b6:	ee07 2a90 	vmov	s15, r2
 800a4ba:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 800a4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4c8:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4dc:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a4e8:	e77c      	b.n	800a3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 800a4ea:	bf00      	nop
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	4c742400 	.word	0x4c742400
 800a4f4:	39000000 	.word	0x39000000
 800a4f8:	03d09000 	.word	0x03d09000
 800a4fc:	4bbebc20 	.word	0x4bbebc20
 800a500:	4a742400 	.word	0x4a742400

0800a504 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a504:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a508:	b500      	push	{lr}
 800a50a:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a50c:	d077      	beq.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a50e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a512:	d02e      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a514:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a518:	f000 80cf 	beq.w	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a51c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a520:	f000 8080 	beq.w	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a524:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a528:	d05a      	beq.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a52a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a52e:	f000 8105 	beq.w	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a532:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a536:	f000 8110 	beq.w	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a53a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a53e:	f000 80e2 	beq.w	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a546:	d13a      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a548:	4ba9      	ldr	r3, [pc, #676]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800a550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a554:	f000 808e 	beq.w	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800a558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a55c:	f000 812e 	beq.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800a560:	bb6b      	cbnz	r3, 800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a562:	4aa3      	ldr	r2, [pc, #652]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 800a564:	4ba3      	ldr	r3, [pc, #652]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a566:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 800a568:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a56c:	bf18      	it	ne
 800a56e:	4618      	movne	r0, r3
 800a570:	e042      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a572:	4a9f      	ldr	r2, [pc, #636]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a574:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a576:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a57a:	2b80      	cmp	r3, #128	; 0x80
 800a57c:	f000 8098 	beq.w	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a580:	d921      	bls.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800a582:	2bc0      	cmp	r3, #192	; 0xc0
 800a584:	d037      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58a:	d118      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a58c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a58e:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a590:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a594:	0749      	lsls	r1, r1, #29
 800a596:	d502      	bpl.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80ae 	beq.w	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a59e:	4a94      	ldr	r2, [pc, #592]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	05d0      	lsls	r0, r2, #23
 800a5a4:	d503      	bpl.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5aa:	f000 80fb 	beq.w	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5ae:	4a90      	ldr	r2, [pc, #576]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	0391      	lsls	r1, r2, #14
 800a5b4:	d503      	bpl.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ba:	f000 80bd 	beq.w	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 800a5be:	2000      	movs	r0, #0
}
 800a5c0:	b005      	add	sp, #20
 800a5c2:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d04b      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a5ca:	2b40      	cmp	r3, #64	; 0x40
 800a5cc:	d1f7      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5ce:	6810      	ldr	r0, [r2, #0]
 800a5d0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a5d4:	d010      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d6:	a801      	add	r0, sp, #4
 800a5d8:	f7ff fd52 	bl	800a080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5dc:	9801      	ldr	r0, [sp, #4]
 800a5de:	e00b      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a5e0:	4a83      	ldr	r2, [pc, #524]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a5e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ec:	d060      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a5ee:	d936      	bls.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800a5f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5f4:	d178      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5f6:	4880      	ldr	r0, [pc, #512]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 800a5f8:	b005      	add	sp, #20
 800a5fa:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a5fe:	4b7c      	ldr	r3, [pc, #496]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b04      	cmp	r3, #4
 800a608:	d8d9      	bhi.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a675 	.word	0x0800a675
 800a614:	0800a699 	.word	0x0800a699
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a5f7 	.word	0x0800a5f7
 800a620:	0800a681 	.word	0x0800a681
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a624:	4a72      	ldr	r2, [pc, #456]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a626:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a628:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a62c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a630:	d03e      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a632:	d937      	bls.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800a634:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a638:	d0dd      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a63a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a63e:	d1be      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a640:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a642:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a648:	0752      	lsls	r2, r2, #29
 800a64a:	d5a8      	bpl.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1a6      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a650:	4b67      	ldr	r3, [pc, #412]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a652:	486a      	ldr	r0, [pc, #424]	; (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a65a:	40d8      	lsrs	r0, r3
 800a65c:	e7cc      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d146      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a662:	6810      	ldr	r0, [r2, #0]
 800a664:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a668:	d0c6      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a66a:	a801      	add	r0, sp, #4
 800a66c:	f7ff fe84 	bl	800a378 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a670:	9802      	ldr	r0, [sp, #8]
 800a672:	e7c1      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a674:	4b5e      	ldr	r3, [pc, #376]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a67c:	d0bc      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a67e:	e7f4      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a680:	4a5b      	ldr	r2, [pc, #364]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a682:	e783      	b.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a684:	4b5a      	ldr	r3, [pc, #360]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a68c:	d0b4      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a68e:	a801      	add	r0, sp, #4
 800a690:	f7ff fdb4 	bl	800a1fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a694:	9801      	ldr	r0, [sp, #4]
 800a696:	e7af      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a698:	4b55      	ldr	r3, [pc, #340]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a6a0:	d0aa      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6a2:	e798      	b.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0dc      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a6a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6ac:	d08f      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6ae:	e786      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6b0:	6810      	ldr	r0, [r2, #0]
 800a6b2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a6b6:	d09f      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6b8:	e7e9      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a6ba:	4a4d      	ldr	r2, [pc, #308]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a6bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a6be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a6c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6c6:	d0f3      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6c8:	d806      	bhi.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0c9      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a6ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d2:	f43f af7c 	beq.w	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6d6:	e772      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a6d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6dc:	d08b      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a6de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6e2:	f43f af53 	beq.w	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800a6e6:	e76a      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 800a6e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6ec:	d0a8      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a6ee:	e766      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f4:	f43f af6b 	beq.w	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6f8:	e761      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	483f      	ldr	r0, [pc, #252]	; (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a6fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a702:	40d8      	lsrs	r0, r3
 800a704:	e778      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a706:	4a3a      	ldr	r2, [pc, #232]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a708:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a70a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a70e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a712:	d066      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a714:	d82f      	bhi.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a71a:	d04f      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a720:	d131      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a722:	4b33      	ldr	r3, [pc, #204]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a72a:	f43f af65 	beq.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72e:	a801      	add	r0, sp, #4
 800a730:	f7ff fd64 	bl	800a1fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a734:	9802      	ldr	r0, [sp, #8]
 800a736:	e75f      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 800a738:	482e      	ldr	r0, [pc, #184]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a73a:	e75d      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a73c:	4a2c      	ldr	r2, [pc, #176]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a73e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a748:	d02e      	beq.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800a74a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a74e:	f43f af77 	beq.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a752:	2b00      	cmp	r3, #0
 800a754:	f47f af33 	bne.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a758:	e739      	b.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a75a:	4b25      	ldr	r3, [pc, #148]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a75c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800a75e:	03d2      	lsls	r2, r2, #15
 800a760:	d589      	bpl.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a768:	f43f af46 	beq.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76c:	a801      	add	r0, sp, #4
 800a76e:	f7ff fc87 	bl	800a080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a772:	9803      	ldr	r0, [sp, #12]
 800a774:	e740      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a77a:	d02a      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800a77c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a780:	f43f aeef 	beq.w	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800a784:	e71b      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a786:	2b00      	cmp	r3, #0
 800a788:	f47f af19 	bne.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a78c:	f7fe fda6 	bl	80092dc <HAL_RCC_GetHCLKFreq>
 800a790:	4b17      	ldr	r3, [pc, #92]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a792:	4a1b      	ldr	r2, [pc, #108]	; (800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a79a:	5cd3      	ldrb	r3, [r2, r3]
 800a79c:	f003 031f 	and.w	r3, r3, #31
 800a7a0:	40d8      	lsrs	r0, r3
          break;
 800a7a2:	e729      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800a7a4:	4817      	ldr	r0, [pc, #92]	; (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a7a6:	e727      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7a8:	6810      	ldr	r0, [r2, #0]
 800a7aa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a7ae:	f43f af23 	beq.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7b2:	a801      	add	r0, sp, #4
 800a7b4:	f7ff fd22 	bl	800a1fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7b8:	9803      	ldr	r0, [sp, #12]
 800a7ba:	e71d      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a7c4:	f43f af18 	beq.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c8:	a801      	add	r0, sp, #4
 800a7ca:	f7ff fc59 	bl	800a080 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7ce:	9802      	ldr	r0, [sp, #8]
 800a7d0:	e712      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7d2:	4a07      	ldr	r2, [pc, #28]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800a7d4:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7d6:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800a7d8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a7dc:	bf18      	it	ne
 800a7de:	4618      	movne	r0, r3
 800a7e0:	e70a      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7e2:	6810      	ldr	r0, [r2, #0]
 800a7e4:	f010 0004 	ands.w	r0, r0, #4
 800a7e8:	f43f af06 	beq.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a7ec:	e730      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a7ee:	bf00      	nop
 800a7f0:	58024400 	.word	0x58024400
 800a7f4:	017d7840 	.word	0x017d7840
 800a7f8:	00bb8000 	.word	0x00bb8000
 800a7fc:	03d09000 	.word	0x03d09000
 800a800:	0800abe0 	.word	0x0800abe0
 800a804:	003d0900 	.word	0x003d0900

0800a808 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop

0800a80c <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800a80c:	b318      	cbz	r0, 800a856 <HAL_SDRAM_Init+0x4a>
{
 800a80e:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a810:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a814:	460d      	mov	r5, r1
 800a816:	4604      	mov	r4, r0
 800a818:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a81c:	b1b3      	cbz	r3, 800a84c <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a81e:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a820:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a822:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a826:	f851 0b04 	ldr.w	r0, [r1], #4
 800a82a:	f000 f851 	bl	800a8d0 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a82e:	4629      	mov	r1, r5
 800a830:	e9d4 0200 	ldrd	r0, r2, [r4]
 800a834:	f000 f888 	bl	800a948 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800a838:	4a08      	ldr	r2, [pc, #32]	; (800a85c <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a83a:	2101      	movs	r1, #1
  return HAL_OK;
 800a83c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a83e:	6813      	ldr	r3, [r2, #0]
 800a840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a844:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a846:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a84c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a850:	f7ff ffda 	bl	800a808 <HAL_SDRAM_MspInit>
 800a854:	e7e3      	b.n	800a81e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a856:	2001      	movs	r0, #1
}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	52004000 	.word	0x52004000

0800a860 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a860:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a862:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a866:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a868:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a86a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a86c:	d004      	beq.n	800a878 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a86e:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a872:	2c01      	cmp	r4, #1
 800a874:	d001      	beq.n	800a87a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a876:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a878:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a87a:	2302      	movs	r3, #2
 800a87c:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a87e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a880:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a884:	f000 f8ac 	bl	800a9e0 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a888:	6833      	ldr	r3, [r6, #0]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d003      	beq.n	800a896 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a88e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a890:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 800a894:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a896:	2305      	movs	r3, #5
  return HAL_OK;
 800a898:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a89a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800a89e:	bd70      	pop	{r4, r5, r6, pc}

0800a8a0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a8a0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a8a2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a8a6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	b2d8      	uxtb	r0, r3
 800a8ac:	d005      	beq.n	800a8ba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a8ae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	b2dd      	uxtb	r5, r3
 800a8b6:	d001      	beq.n	800a8bc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a8b8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8bc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a8be:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a8c4:	f000 f8a2 	bl	800aa0c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a8c8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}

0800a8d0 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8d0:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8d2:	6802      	ldr	r2, [r0, #0]
{
 800a8d4:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8d6:	b9c3      	cbnz	r3, 800a90a <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8d8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800a8dc:	684c      	ldr	r4, [r1, #4]
 800a8de:	698e      	ldr	r6, [r1, #24]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a8e6:	4323      	orrs	r3, r4
 800a8e8:	690c      	ldr	r4, [r1, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	694a      	ldr	r2, [r1, #20]
 800a8ee:	432b      	orrs	r3, r5
 800a8f0:	69cd      	ldr	r5, [r1, #28]
 800a8f2:	4323      	orrs	r3, r4
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	4333      	orrs	r3, r6
 800a8f8:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800a8fc:	432b      	orrs	r3, r5
 800a8fe:	4323      	orrs	r3, r4
 800a900:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a902:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a904:	6003      	str	r3, [r0, #0]
}
 800a906:	2000      	movs	r0, #0
 800a908:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a90a:	69cb      	ldr	r3, [r1, #28]
 800a90c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a910:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a912:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a914:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a916:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800a91a:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a91c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a91e:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a920:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a922:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a924:	6842      	ldr	r2, [r0, #4]
 800a926:	4013      	ands	r3, r2
 800a928:	432b      	orrs	r3, r5
 800a92a:	690d      	ldr	r5, [r1, #16]
 800a92c:	4323      	orrs	r3, r4
 800a92e:	4333      	orrs	r3, r6
 800a930:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800a934:	432b      	orrs	r3, r5
 800a936:	4323      	orrs	r3, r4
 800a938:	4313      	orrs	r3, r2
}
 800a93a:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a93c:	6043      	str	r3, [r0, #4]
}
 800a93e:	2000      	movs	r0, #0
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	ffff8000 	.word	0xffff8000

0800a948 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a948:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a94a:	bb0a      	cbnz	r2, 800a990 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a94c:	684c      	ldr	r4, [r1, #4]
 800a94e:	6882      	ldr	r2, [r0, #8]
 800a950:	680d      	ldr	r5, [r1, #0]
 800a952:	1e63      	subs	r3, r4, #1
 800a954:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a958:	688c      	ldr	r4, [r1, #8]
 800a95a:	1e6e      	subs	r6, r5, #1
 800a95c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800a960:	1e65      	subs	r5, r4, #1
 800a962:	68cc      	ldr	r4, [r1, #12]
 800a964:	4333      	orrs	r3, r6
 800a966:	690a      	ldr	r2, [r1, #16]
 800a968:	1e66      	subs	r6, r4, #1
 800a96a:	694c      	ldr	r4, [r1, #20]
 800a96c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a970:	1e55      	subs	r5, r2, #1
 800a972:	698a      	ldr	r2, [r1, #24]
 800a974:	1e61      	subs	r1, r4, #1
 800a976:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800a97a:	3a01      	subs	r2, #1
 800a97c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a980:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a984:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a988:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a98a:	6083      	str	r3, [r0, #8]
}
 800a98c:	2000      	movs	r0, #0
 800a98e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a990:	6882      	ldr	r2, [r0, #8]
 800a992:	68cb      	ldr	r3, [r1, #12]
 800a994:	4c11      	ldr	r4, [pc, #68]	; (800a9dc <FMC_SDRAM_Timing_Init+0x94>)
 800a996:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a998:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a99a:	4014      	ands	r4, r2
 800a99c:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a99e:	1e5e      	subs	r6, r3, #1
 800a9a0:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9a8:	688d      	ldr	r5, [r1, #8]
 800a9aa:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9ac:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9b0:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9b2:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9b4:	68c2      	ldr	r2, [r0, #12]
 800a9b6:	690c      	ldr	r4, [r1, #16]
 800a9b8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a9bc:	6989      	ldr	r1, [r1, #24]
 800a9be:	3c01      	subs	r4, #1
 800a9c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800a9c4:	3901      	subs	r1, #1
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a9cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800a9d4:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9d6:	60c3      	str	r3, [r0, #12]
}
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4770      	bx	lr
 800a9dc:	ff0f0fff 	.word	0xff0f0fff

0800a9e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a9e0:	b470      	push	{r4, r5, r6}
 800a9e2:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a9e4:	68ce      	ldr	r6, [r1, #12]
 800a9e6:	4c08      	ldr	r4, [pc, #32]	; (800aa08 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a9e8:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a9ea:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a9ee:	6889      	ldr	r1, [r1, #8]
 800a9f0:	432b      	orrs	r3, r5
 800a9f2:	6915      	ldr	r5, [r2, #16]
 800a9f4:	3901      	subs	r1, #1
 800a9f6:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800a9fa:	402c      	ands	r4, r5
 800a9fc:	4323      	orrs	r3, r4
 800a9fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800aa02:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800aa04:	6113      	str	r3, [r2, #16]
}
 800aa06:	4770      	bx	lr
 800aa08:	ffc00000 	.word	0xffc00000

0800aa0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa0c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa0e:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800aa10:	2000      	movs	r0, #0
{
 800aa12:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa14:	6954      	ldr	r4, [r2, #20]
 800aa16:	4023      	ands	r3, r4
}
 800aa18:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa1c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800aa20:	6151      	str	r1, [r2, #20]
}
 800aa22:	4770      	bx	lr
 800aa24:	ffffc001 	.word	0xffffc001

0800aa28 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800aa28:	4603      	mov	r3, r0
 800aa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800aa2e:	4c15      	ldr	r4, [pc, #84]	; (800aa84 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800aa30:	2500      	movs	r5, #0
 800aa32:	4e15      	ldr	r6, [pc, #84]	; (800aa88 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800aa34:	4628      	mov	r0, r5
 800aa36:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800aa3a:	e9d3 7200 	ldrd	r7, r2, [r3]
 800aa3e:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800aa42:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800aa46:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800aa48:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800aa4c:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800aa4e:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800aa50:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800aa52:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800aa56:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800aa5a:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800aa5e:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800aa62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800aa64:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800aa66:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800aa68:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800aa6a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800aa6c:	6a23      	ldr	r3, [r4, #32]
 800aa6e:	f106 0118 	add.w	r1, r6, #24
 800aa72:	4628      	mov	r0, r5
 800aa74:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800aa76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa78:	f106 011c 	add.w	r1, r6, #28
 800aa7c:	4628      	mov	r0, r5
}
 800aa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800aa82:	4718      	bx	r3
 800aa84:	2400162c 	.word	0x2400162c
 800aa88:	240015ec 	.word	0x240015ec

0800aa8c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800aa8c:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <UTIL_LCD_SetLayer+0x18>)
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	b133      	cbz	r3, 800aaa2 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800aa94:	4d04      	ldr	r5, [pc, #16]	; (800aaa8 <UTIL_LCD_SetLayer+0x1c>)
 800aa96:	4604      	mov	r4, r0
 800aa98:	4601      	mov	r1, r0
 800aa9a:	6928      	ldr	r0, [r5, #16]
 800aa9c:	4798      	blx	r3
 800aa9e:	b900      	cbnz	r0, 800aaa2 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800aaa0:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	2400162c 	.word	0x2400162c
 800aaa8:	240015ec 	.word	0x240015ec

0800aaac <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800aaac:	4a02      	ldr	r2, [pc, #8]	; (800aab8 <UTIL_LCD_SetTextColor+0xc>)
 800aaae:	68d3      	ldr	r3, [r2, #12]
 800aab0:	015b      	lsls	r3, r3, #5
 800aab2:	50d0      	str	r0, [r2, r3]
}
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	240015ec 	.word	0x240015ec

0800aabc <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <UTIL_LCD_SetBackColor+0xc>)
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aac4:	6058      	str	r0, [r3, #4]
}
 800aac6:	4770      	bx	lr
 800aac8:	240015ec 	.word	0x240015ec

0800aacc <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800aacc:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <UTIL_LCD_SetFont+0xc>)
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aad4:	6098      	str	r0, [r3, #8]
}
 800aad6:	4770      	bx	lr
 800aad8:	240015ec 	.word	0x240015ec

0800aadc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aade:	4e13      	ldr	r6, [pc, #76]	; (800ab2c <UTIL_LCD_FillRect+0x50>)
{
 800aae0:	4615      	mov	r5, r2
 800aae2:	b083      	sub	sp, #12
 800aae4:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aae6:	69f7      	ldr	r7, [r6, #28]
{
 800aae8:	462b      	mov	r3, r5
 800aaea:	460a      	mov	r2, r1
 800aaec:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aaee:	2f02      	cmp	r7, #2
 800aaf0:	d008      	beq.n	800ab04 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800aaf2:	4f0f      	ldr	r7, [pc, #60]	; (800ab30 <UTIL_LCD_FillRect+0x54>)
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	e9cd 4500 	strd	r4, r5, [sp]
 800aafa:	693c      	ldr	r4, [r7, #16]
 800aafc:	6930      	ldr	r0, [r6, #16]
 800aafe:	47a0      	blx	r4
  }
}
 800ab00:	b003      	add	sp, #12
 800ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800ab04:	096f      	lsrs	r7, r5, #5
 800ab06:	9400      	str	r4, [sp, #0]
 800ab08:	0a29      	lsrs	r1, r5, #8
 800ab0a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800ab0e:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800ab12:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800ab16:	4601      	mov	r1, r0
 800ab18:	6930      	ldr	r0, [r6, #16]
 800ab1a:	433c      	orrs	r4, r7
 800ab1c:	4e04      	ldr	r6, [pc, #16]	; (800ab30 <UTIL_LCD_FillRect+0x54>)
 800ab1e:	4325      	orrs	r5, r4
 800ab20:	6934      	ldr	r4, [r6, #16]
 800ab22:	9501      	str	r5, [sp, #4]
 800ab24:	47a0      	blx	r4
}
 800ab26:	b003      	add	sp, #12
 800ab28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	240015ec 	.word	0x240015ec
 800ab30:	2400162c 	.word	0x2400162c

0800ab34 <UTIL_LCD_Clear>:
{
 800ab34:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800ab36:	2100      	movs	r1, #0
{
 800ab38:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800ab3a:	4a05      	ldr	r2, [pc, #20]	; (800ab50 <UTIL_LCD_Clear+0x1c>)
 800ab3c:	9000      	str	r0, [sp, #0]
 800ab3e:	4608      	mov	r0, r1
 800ab40:	6993      	ldr	r3, [r2, #24]
 800ab42:	6952      	ldr	r2, [r2, #20]
 800ab44:	f7ff ffca 	bl	800aadc <UTIL_LCD_FillRect>
}
 800ab48:	b003      	add	sp, #12
 800ab4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab4e:	bf00      	nop
 800ab50:	240015ec 	.word	0x240015ec

0800ab54 <__libc_init_array>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4d0d      	ldr	r5, [pc, #52]	; (800ab8c <__libc_init_array+0x38>)
 800ab58:	4c0d      	ldr	r4, [pc, #52]	; (800ab90 <__libc_init_array+0x3c>)
 800ab5a:	1b64      	subs	r4, r4, r5
 800ab5c:	10a4      	asrs	r4, r4, #2
 800ab5e:	2600      	movs	r6, #0
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	d109      	bne.n	800ab78 <__libc_init_array+0x24>
 800ab64:	4d0b      	ldr	r5, [pc, #44]	; (800ab94 <__libc_init_array+0x40>)
 800ab66:	4c0c      	ldr	r4, [pc, #48]	; (800ab98 <__libc_init_array+0x44>)
 800ab68:	f000 f82e 	bl	800abc8 <_init>
 800ab6c:	1b64      	subs	r4, r4, r5
 800ab6e:	10a4      	asrs	r4, r4, #2
 800ab70:	2600      	movs	r6, #0
 800ab72:	42a6      	cmp	r6, r4
 800ab74:	d105      	bne.n	800ab82 <__libc_init_array+0x2e>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7c:	4798      	blx	r3
 800ab7e:	3601      	adds	r6, #1
 800ab80:	e7ee      	b.n	800ab60 <__libc_init_array+0xc>
 800ab82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab86:	4798      	blx	r3
 800ab88:	3601      	adds	r6, #1
 800ab8a:	e7f2      	b.n	800ab72 <__libc_init_array+0x1e>
 800ab8c:	0804c948 	.word	0x0804c948
 800ab90:	0804c948 	.word	0x0804c948
 800ab94:	0804c948 	.word	0x0804c948
 800ab98:	0804c94c 	.word	0x0804c94c

0800ab9c <memcpy>:
 800ab9c:	440a      	add	r2, r1
 800ab9e:	4291      	cmp	r1, r2
 800aba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba4:	d100      	bne.n	800aba8 <memcpy+0xc>
 800aba6:	4770      	bx	lr
 800aba8:	b510      	push	{r4, lr}
 800abaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb2:	4291      	cmp	r1, r2
 800abb4:	d1f9      	bne.n	800abaa <memcpy+0xe>
 800abb6:	bd10      	pop	{r4, pc}

0800abb8 <memset>:
 800abb8:	4402      	add	r2, r0
 800abba:	4603      	mov	r3, r0
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d100      	bne.n	800abc2 <memset+0xa>
 800abc0:	4770      	bx	lr
 800abc2:	f803 1b01 	strb.w	r1, [r3], #1
 800abc6:	e7f9      	b.n	800abbc <memset+0x4>

0800abc8 <_init>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr

0800abd4 <_fini>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	bf00      	nop
 800abd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abda:	bc08      	pop	{r3}
 800abdc:	469e      	mov	lr, r3
 800abde:	4770      	bx	lr
