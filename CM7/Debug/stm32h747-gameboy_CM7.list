
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e24  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca8  0800aca8  000290d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800aca8  0800aca8  000290d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aca8  0800aca8  000290d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000090d0  24000000  0800acb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010394  240090d0  08013d80  000290d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24019464  08013d80  00029464  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044178  00000000  00000000  000290fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064a5  00000000  00000000  0006d276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001518d  00000000  00000000  0007371b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  000888a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003578  00000000  00000000  0008abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044f67  00000000  00000000  0008e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027879  00000000  00000000  000d30bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b86ba  00000000  00000000  000fa938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b2ff2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068d4  00000000  00000000  002b3048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240090d0 	.word	0x240090d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e6c 	.word	0x08008e6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240090d4 	.word	0x240090d4
 80002dc:	08008e6c 	.word	0x08008e6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000380:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000382:	492e      	ldr	r1, [pc, #184]	; (800043c <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000388:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800038c:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800038e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000392:	691a      	ldr	r2, [r3, #16]
 8000394:	f042 0210 	orr.w	r2, r2, #16
 8000398:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800039a:	680b      	ldr	r3, [r1, #0]
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	2b06      	cmp	r3, #6
 80003a2:	d805      	bhi.n	80003b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003a4:	680b      	ldr	r3, [r1, #0]
 80003a6:	f023 030f 	bic.w	r3, r3, #15
 80003aa:	f043 0307 	orr.w	r3, r3, #7
 80003ae:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003b2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003b4:	4a23      	ldr	r2, [pc, #140]	; (8000444 <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 80003b6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b8:	4820      	ldr	r0, [pc, #128]	; (800043c <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 80003ba:	f041 0101 	orr.w	r1, r1, #1
 80003be:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80003c0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c8:	6803      	ldr	r3, [r0, #0]
 80003ca:	071b      	lsls	r3, r3, #28
 80003cc:	d505      	bpl.n	80003da <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ce:	6803      	ldr	r3, [r0, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	f043 0307 	orr.w	r3, r3, #7
 80003d8:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <SystemInit+0xc0>)
 80003dc:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80003de:	491a      	ldr	r1, [pc, #104]	; (8000448 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 80003e0:	4c1a      	ldr	r4, [pc, #104]	; (800044c <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 80003e2:	481b      	ldr	r0, [pc, #108]	; (8000450 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 80003e4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80003e6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80003e8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80003ea:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80003ec:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80003ee:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80003f2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80003f4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80003f6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003fa:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003fc:	4c15      	ldr	r4, [pc, #84]	; (8000454 <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 80003fe:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000402:	4d15      	ldr	r5, [pc, #84]	; (8000458 <SystemInit+0xd8>)
 8000404:	4915      	ldr	r1, [pc, #84]	; (800045c <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 8000406:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000408:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800040a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800040c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000410:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000412:	682b      	ldr	r3, [r5, #0]
 8000414:	4019      	ands	r1, r3
 8000416:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800041a:	d202      	bcs.n	8000422 <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <SystemInit+0xe0>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000422:	4910      	ldr	r1, [pc, #64]	; (8000464 <SystemInit+0xe4>)
 8000424:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <SystemInit+0xb8>)
 800042a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800042e:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000430:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000432:	bc30      	pop	{r4, r5}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00
 800043c:	52002000 	.word	0x52002000
 8000440:	58024400 	.word	0x58024400
 8000444:	eaf6ed7f 	.word	0xeaf6ed7f
 8000448:	01010280 	.word	0x01010280
 800044c:	02020200 	.word	0x02020200
 8000450:	01ff0000 	.word	0x01ff0000
 8000454:	580000c0 	.word	0x580000c0
 8000458:	5c001000 	.word	0x5c001000
 800045c:	ffff0000 	.word	0xffff0000
 8000460:	51008108 	.word	0x51008108
 8000464:	52004000 	.word	0x52004000

08000468 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 800046c:	4a02      	ldr	r2, [pc, #8]	; (8000478 <vINCs_BC+0xc>)
 800046e:	8853      	ldrh	r3, [r2, #2]
 8000470:	3301      	adds	r3, #1
 8000472:	8053      	strh	r3, [r2, #2]
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	240092b0 	.word	0x240092b0

0800047c <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 800047c:	4a02      	ldr	r2, [pc, #8]	; (8000488 <vDECs_BC+0xc>)
 800047e:	8853      	ldrh	r3, [r2, #2]
 8000480:	3b01      	subs	r3, #1
 8000482:	8053      	strh	r3, [r2, #2]
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	240092b0 	.word	0x240092b0

0800048c <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vSTOP+0x8>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	4770      	bx	lr
 8000494:	240090f5 	.word	0x240090f5

08000498 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 8000498:	4a02      	ldr	r2, [pc, #8]	; (80004a4 <vINCs_DE+0xc>)
 800049a:	8893      	ldrh	r3, [r2, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	8093      	strh	r3, [r2, #4]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	240092b0 	.word	0x240092b0

080004a8 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 80004a8:	4a02      	ldr	r2, [pc, #8]	; (80004b4 <vDECs_DE+0xc>)
 80004aa:	8893      	ldrh	r3, [r2, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	8093      	strh	r3, [r2, #4]
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	240092b0 	.word	0x240092b0

080004b8 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 80004b8:	4a02      	ldr	r2, [pc, #8]	; (80004c4 <vINCs_HL+0xc>)
 80004ba:	88d3      	ldrh	r3, [r2, #6]
 80004bc:	3301      	adds	r3, #1
 80004be:	80d3      	strh	r3, [r2, #6]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	240092b0 	.word	0x240092b0

080004c8 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 80004c8:	4a02      	ldr	r2, [pc, #8]	; (80004d4 <vDECs_HL+0xc>)
 80004ca:	88d3      	ldrh	r3, [r2, #6]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	80d3      	strh	r3, [r2, #6]
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	240092b0 	.word	0x240092b0

080004d8 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004d8:	4a02      	ldr	r2, [pc, #8]	; (80004e4 <vINCs_SP+0xc>)
 80004da:	8913      	ldrh	r3, [r2, #8]
 80004dc:	3301      	adds	r3, #1
 80004de:	8113      	strh	r3, [r2, #8]
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	240092b0 	.word	0x240092b0

080004e8 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004e8:	4a02      	ldr	r2, [pc, #8]	; (80004f4 <vDECs_SP+0xc>)
 80004ea:	8913      	ldrh	r3, [r2, #8]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	8113      	strh	r3, [r2, #8]
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	240092b0 	.word	0x240092b0

080004f8 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_B_C+0x8>)
 80004fa:	789a      	ldrb	r2, [r3, #2]
 80004fc:	70da      	strb	r2, [r3, #3]
 80004fe:	4770      	bx	lr
 8000500:	240092b0 	.word	0x240092b0

08000504 <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_B_D+0x8>)
 8000506:	795a      	ldrb	r2, [r3, #5]
 8000508:	70da      	strb	r2, [r3, #3]
 800050a:	4770      	bx	lr
 800050c:	240092b0 	.word	0x240092b0

08000510 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_B_E+0x8>)
 8000512:	791a      	ldrb	r2, [r3, #4]
 8000514:	70da      	strb	r2, [r3, #3]
 8000516:	4770      	bx	lr
 8000518:	240092b0 	.word	0x240092b0

0800051c <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_B_H+0x8>)
 800051e:	79da      	ldrb	r2, [r3, #7]
 8000520:	70da      	strb	r2, [r3, #3]
 8000522:	4770      	bx	lr
 8000524:	240092b0 	.word	0x240092b0

08000528 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_B_L+0x8>)
 800052a:	799a      	ldrb	r2, [r3, #6]
 800052c:	70da      	strb	r2, [r3, #3]
 800052e:	4770      	bx	lr
 8000530:	240092b0 	.word	0x240092b0

08000534 <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_B_A+0x8>)
 8000536:	785a      	ldrb	r2, [r3, #1]
 8000538:	70da      	strb	r2, [r3, #3]
 800053a:	4770      	bx	lr
 800053c:	240092b0 	.word	0x240092b0

08000540 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_C_B+0x8>)
 8000542:	78da      	ldrb	r2, [r3, #3]
 8000544:	709a      	strb	r2, [r3, #2]
 8000546:	4770      	bx	lr
 8000548:	240092b0 	.word	0x240092b0

0800054c <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_C_D+0x8>)
 800054e:	795a      	ldrb	r2, [r3, #5]
 8000550:	709a      	strb	r2, [r3, #2]
 8000552:	4770      	bx	lr
 8000554:	240092b0 	.word	0x240092b0

08000558 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_C_E+0x8>)
 800055a:	791a      	ldrb	r2, [r3, #4]
 800055c:	709a      	strb	r2, [r3, #2]
 800055e:	4770      	bx	lr
 8000560:	240092b0 	.word	0x240092b0

08000564 <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_C_H+0x8>)
 8000566:	79da      	ldrb	r2, [r3, #7]
 8000568:	709a      	strb	r2, [r3, #2]
 800056a:	4770      	bx	lr
 800056c:	240092b0 	.word	0x240092b0

08000570 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_C_L+0x8>)
 8000572:	799a      	ldrb	r2, [r3, #6]
 8000574:	709a      	strb	r2, [r3, #2]
 8000576:	4770      	bx	lr
 8000578:	240092b0 	.word	0x240092b0

0800057c <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_C_A+0x8>)
 800057e:	785a      	ldrb	r2, [r3, #1]
 8000580:	709a      	strb	r2, [r3, #2]
 8000582:	4770      	bx	lr
 8000584:	240092b0 	.word	0x240092b0

08000588 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_D_B+0x8>)
 800058a:	78da      	ldrb	r2, [r3, #3]
 800058c:	715a      	strb	r2, [r3, #5]
 800058e:	4770      	bx	lr
 8000590:	240092b0 	.word	0x240092b0

08000594 <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_D_C+0x8>)
 8000596:	789a      	ldrb	r2, [r3, #2]
 8000598:	715a      	strb	r2, [r3, #5]
 800059a:	4770      	bx	lr
 800059c:	240092b0 	.word	0x240092b0

080005a0 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_D_E+0x8>)
 80005a2:	791a      	ldrb	r2, [r3, #4]
 80005a4:	715a      	strb	r2, [r3, #5]
 80005a6:	4770      	bx	lr
 80005a8:	240092b0 	.word	0x240092b0

080005ac <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_D_H+0x8>)
 80005ae:	79da      	ldrb	r2, [r3, #7]
 80005b0:	715a      	strb	r2, [r3, #5]
 80005b2:	4770      	bx	lr
 80005b4:	240092b0 	.word	0x240092b0

080005b8 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_D_L+0x8>)
 80005ba:	799a      	ldrb	r2, [r3, #6]
 80005bc:	715a      	strb	r2, [r3, #5]
 80005be:	4770      	bx	lr
 80005c0:	240092b0 	.word	0x240092b0

080005c4 <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_D_A+0x8>)
 80005c6:	785a      	ldrb	r2, [r3, #1]
 80005c8:	715a      	strb	r2, [r3, #5]
 80005ca:	4770      	bx	lr
 80005cc:	240092b0 	.word	0x240092b0

080005d0 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_E_B+0x8>)
 80005d2:	78da      	ldrb	r2, [r3, #3]
 80005d4:	711a      	strb	r2, [r3, #4]
 80005d6:	4770      	bx	lr
 80005d8:	240092b0 	.word	0x240092b0

080005dc <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_E_C+0x8>)
 80005de:	789a      	ldrb	r2, [r3, #2]
 80005e0:	711a      	strb	r2, [r3, #4]
 80005e2:	4770      	bx	lr
 80005e4:	240092b0 	.word	0x240092b0

080005e8 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_E_D+0x8>)
 80005ea:	795a      	ldrb	r2, [r3, #5]
 80005ec:	711a      	strb	r2, [r3, #4]
 80005ee:	4770      	bx	lr
 80005f0:	240092b0 	.word	0x240092b0

080005f4 <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_E_H+0x8>)
 80005f6:	79da      	ldrb	r2, [r3, #7]
 80005f8:	711a      	strb	r2, [r3, #4]
 80005fa:	4770      	bx	lr
 80005fc:	240092b0 	.word	0x240092b0

08000600 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vLD_E_L+0x8>)
 8000602:	799a      	ldrb	r2, [r3, #6]
 8000604:	711a      	strb	r2, [r3, #4]
 8000606:	4770      	bx	lr
 8000608:	240092b0 	.word	0x240092b0

0800060c <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_E_A+0x8>)
 800060e:	785a      	ldrb	r2, [r3, #1]
 8000610:	711a      	strb	r2, [r3, #4]
 8000612:	4770      	bx	lr
 8000614:	240092b0 	.word	0x240092b0

08000618 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_H_B+0x8>)
 800061a:	78da      	ldrb	r2, [r3, #3]
 800061c:	71da      	strb	r2, [r3, #7]
 800061e:	4770      	bx	lr
 8000620:	240092b0 	.word	0x240092b0

08000624 <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_H_C+0x8>)
 8000626:	789a      	ldrb	r2, [r3, #2]
 8000628:	71da      	strb	r2, [r3, #7]
 800062a:	4770      	bx	lr
 800062c:	240092b0 	.word	0x240092b0

08000630 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_H_D+0x8>)
 8000632:	795a      	ldrb	r2, [r3, #5]
 8000634:	71da      	strb	r2, [r3, #7]
 8000636:	4770      	bx	lr
 8000638:	240092b0 	.word	0x240092b0

0800063c <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_H_E+0x8>)
 800063e:	791a      	ldrb	r2, [r3, #4]
 8000640:	71da      	strb	r2, [r3, #7]
 8000642:	4770      	bx	lr
 8000644:	240092b0 	.word	0x240092b0

08000648 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_H_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	71da      	strb	r2, [r3, #7]
 800064e:	4770      	bx	lr
 8000650:	240092b0 	.word	0x240092b0

08000654 <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <vLD_H_A+0x8>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	71da      	strb	r2, [r3, #7]
 800065a:	4770      	bx	lr
 800065c:	240092b0 	.word	0x240092b0

08000660 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <vLD_L_B+0x8>)
 8000662:	78da      	ldrb	r2, [r3, #3]
 8000664:	719a      	strb	r2, [r3, #6]
 8000666:	4770      	bx	lr
 8000668:	240092b0 	.word	0x240092b0

0800066c <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <vLD_L_C+0x8>)
 800066e:	789a      	ldrb	r2, [r3, #2]
 8000670:	719a      	strb	r2, [r3, #6]
 8000672:	4770      	bx	lr
 8000674:	240092b0 	.word	0x240092b0

08000678 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <vLD_L_D+0x8>)
 800067a:	795a      	ldrb	r2, [r3, #5]
 800067c:	719a      	strb	r2, [r3, #6]
 800067e:	4770      	bx	lr
 8000680:	240092b0 	.word	0x240092b0

08000684 <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <vLD_L_E+0x8>)
 8000686:	791a      	ldrb	r2, [r3, #4]
 8000688:	719a      	strb	r2, [r3, #6]
 800068a:	4770      	bx	lr
 800068c:	240092b0 	.word	0x240092b0

08000690 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 8000690:	4b01      	ldr	r3, [pc, #4]	; (8000698 <vLD_L_H+0x8>)
 8000692:	79da      	ldrb	r2, [r3, #7]
 8000694:	719a      	strb	r2, [r3, #6]
 8000696:	4770      	bx	lr
 8000698:	240092b0 	.word	0x240092b0

0800069c <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <vLD_L_A+0x8>)
 800069e:	785a      	ldrb	r2, [r3, #1]
 80006a0:	719a      	strb	r2, [r3, #6]
 80006a2:	4770      	bx	lr
 80006a4:	240092b0 	.word	0x240092b0

080006a8 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <vHALT+0x8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	4770      	bx	lr
 80006b0:	240090f4 	.word	0x240090f4

080006b4 <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <vLD_A_B+0x8>)
 80006b6:	78da      	ldrb	r2, [r3, #3]
 80006b8:	705a      	strb	r2, [r3, #1]
 80006ba:	4770      	bx	lr
 80006bc:	240092b0 	.word	0x240092b0

080006c0 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <vLD_A_C+0x8>)
 80006c2:	789a      	ldrb	r2, [r3, #2]
 80006c4:	705a      	strb	r2, [r3, #1]
 80006c6:	4770      	bx	lr
 80006c8:	240092b0 	.word	0x240092b0

080006cc <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <vLD_A_D+0x8>)
 80006ce:	795a      	ldrb	r2, [r3, #5]
 80006d0:	705a      	strb	r2, [r3, #1]
 80006d2:	4770      	bx	lr
 80006d4:	240092b0 	.word	0x240092b0

080006d8 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 80006d8:	4b01      	ldr	r3, [pc, #4]	; (80006e0 <vLD_A_E+0x8>)
 80006da:	791a      	ldrb	r2, [r3, #4]
 80006dc:	705a      	strb	r2, [r3, #1]
 80006de:	4770      	bx	lr
 80006e0:	240092b0 	.word	0x240092b0

080006e4 <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <vLD_A_H+0x8>)
 80006e6:	79da      	ldrb	r2, [r3, #7]
 80006e8:	705a      	strb	r2, [r3, #1]
 80006ea:	4770      	bx	lr
 80006ec:	240092b0 	.word	0x240092b0

080006f0 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <vLD_A_L+0x8>)
 80006f2:	799a      	ldrb	r2, [r3, #6]
 80006f4:	705a      	strb	r2, [r3, #1]
 80006f6:	4770      	bx	lr
 80006f8:	240092b0 	.word	0x240092b0

080006fc <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <vAND_B+0x18>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	78d9      	ldrb	r1, [r3, #3]
 8000702:	400a      	ands	r2, r1
 8000704:	2a00      	cmp	r2, #0
 8000706:	705a      	strb	r2, [r3, #1]
 8000708:	bf0c      	ite	eq
 800070a:	22a0      	moveq	r2, #160	; 0xa0
 800070c:	2220      	movne	r2, #32
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	240092b0 	.word	0x240092b0

08000718 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <vAND_C+0x18>)
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	7899      	ldrb	r1, [r3, #2]
 800071e:	400a      	ands	r2, r1
 8000720:	2a00      	cmp	r2, #0
 8000722:	705a      	strb	r2, [r3, #1]
 8000724:	bf0c      	ite	eq
 8000726:	22a0      	moveq	r2, #160	; 0xa0
 8000728:	2220      	movne	r2, #32
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	240092b0 	.word	0x240092b0

08000734 <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <vAND_D+0x18>)
 8000736:	785a      	ldrb	r2, [r3, #1]
 8000738:	7959      	ldrb	r1, [r3, #5]
 800073a:	400a      	ands	r2, r1
 800073c:	2a00      	cmp	r2, #0
 800073e:	705a      	strb	r2, [r3, #1]
 8000740:	bf0c      	ite	eq
 8000742:	22a0      	moveq	r2, #160	; 0xa0
 8000744:	2220      	movne	r2, #32
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	240092b0 	.word	0x240092b0

08000750 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <vAND_E+0x18>)
 8000752:	785a      	ldrb	r2, [r3, #1]
 8000754:	7919      	ldrb	r1, [r3, #4]
 8000756:	400a      	ands	r2, r1
 8000758:	2a00      	cmp	r2, #0
 800075a:	705a      	strb	r2, [r3, #1]
 800075c:	bf0c      	ite	eq
 800075e:	22a0      	moveq	r2, #160	; 0xa0
 8000760:	2220      	movne	r2, #32
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	240092b0 	.word	0x240092b0

0800076c <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <vAND_H+0x18>)
 800076e:	785a      	ldrb	r2, [r3, #1]
 8000770:	79d9      	ldrb	r1, [r3, #7]
 8000772:	400a      	ands	r2, r1
 8000774:	2a00      	cmp	r2, #0
 8000776:	705a      	strb	r2, [r3, #1]
 8000778:	bf0c      	ite	eq
 800077a:	22a0      	moveq	r2, #160	; 0xa0
 800077c:	2220      	movne	r2, #32
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	240092b0 	.word	0x240092b0

08000788 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <vAND_L+0x18>)
 800078a:	785a      	ldrb	r2, [r3, #1]
 800078c:	7999      	ldrb	r1, [r3, #6]
 800078e:	400a      	ands	r2, r1
 8000790:	2a00      	cmp	r2, #0
 8000792:	705a      	strb	r2, [r3, #1]
 8000794:	bf0c      	ite	eq
 8000796:	22a0      	moveq	r2, #160	; 0xa0
 8000798:	2220      	movne	r2, #32
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	240092b0 	.word	0x240092b0

080007a4 <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <vAND_A+0x10>)
 80007a6:	785a      	ldrb	r2, [r3, #1]
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	bf0c      	ite	eq
 80007ac:	22a0      	moveq	r2, #160	; 0xa0
 80007ae:	2220      	movne	r2, #32
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	240092b0 	.word	0x240092b0

080007b8 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <vXOR_B+0x18>)
 80007ba:	785a      	ldrb	r2, [r3, #1]
 80007bc:	78d9      	ldrb	r1, [r3, #3]
 80007be:	ea82 0001 	eor.w	r0, r2, r1
 80007c2:	428a      	cmp	r2, r1
 80007c4:	bf0c      	ite	eq
 80007c6:	2280      	moveq	r2, #128	; 0x80
 80007c8:	2200      	movne	r2, #0
 80007ca:	7058      	strb	r0, [r3, #1]
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	4770      	bx	lr
 80007d0:	240092b0 	.word	0x240092b0

080007d4 <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <vXOR_C+0x18>)
 80007d6:	785a      	ldrb	r2, [r3, #1]
 80007d8:	7899      	ldrb	r1, [r3, #2]
 80007da:	ea82 0001 	eor.w	r0, r2, r1
 80007de:	428a      	cmp	r2, r1
 80007e0:	bf0c      	ite	eq
 80007e2:	2280      	moveq	r2, #128	; 0x80
 80007e4:	2200      	movne	r2, #0
 80007e6:	7058      	strb	r0, [r3, #1]
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	4770      	bx	lr
 80007ec:	240092b0 	.word	0x240092b0

080007f0 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <vXOR_D+0x18>)
 80007f2:	785a      	ldrb	r2, [r3, #1]
 80007f4:	7959      	ldrb	r1, [r3, #5]
 80007f6:	ea82 0001 	eor.w	r0, r2, r1
 80007fa:	428a      	cmp	r2, r1
 80007fc:	bf0c      	ite	eq
 80007fe:	2280      	moveq	r2, #128	; 0x80
 8000800:	2200      	movne	r2, #0
 8000802:	7058      	strb	r0, [r3, #1]
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	4770      	bx	lr
 8000808:	240092b0 	.word	0x240092b0

0800080c <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <vXOR_E+0x18>)
 800080e:	785a      	ldrb	r2, [r3, #1]
 8000810:	7919      	ldrb	r1, [r3, #4]
 8000812:	ea82 0001 	eor.w	r0, r2, r1
 8000816:	428a      	cmp	r2, r1
 8000818:	bf0c      	ite	eq
 800081a:	2280      	moveq	r2, #128	; 0x80
 800081c:	2200      	movne	r2, #0
 800081e:	7058      	strb	r0, [r3, #1]
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	4770      	bx	lr
 8000824:	240092b0 	.word	0x240092b0

08000828 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <vXOR_H+0x18>)
 800082a:	785a      	ldrb	r2, [r3, #1]
 800082c:	79d9      	ldrb	r1, [r3, #7]
 800082e:	ea82 0001 	eor.w	r0, r2, r1
 8000832:	428a      	cmp	r2, r1
 8000834:	bf0c      	ite	eq
 8000836:	2280      	moveq	r2, #128	; 0x80
 8000838:	2200      	movne	r2, #0
 800083a:	7058      	strb	r0, [r3, #1]
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	4770      	bx	lr
 8000840:	240092b0 	.word	0x240092b0

08000844 <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <vXOR_L+0x18>)
 8000846:	785a      	ldrb	r2, [r3, #1]
 8000848:	7999      	ldrb	r1, [r3, #6]
 800084a:	ea82 0001 	eor.w	r0, r2, r1
 800084e:	428a      	cmp	r2, r1
 8000850:	bf0c      	ite	eq
 8000852:	2280      	moveq	r2, #128	; 0x80
 8000854:	2200      	movne	r2, #0
 8000856:	7058      	strb	r0, [r3, #1]
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	4770      	bx	lr
 800085c:	240092b0 	.word	0x240092b0

08000860 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <vXOR_A+0x8>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	4770      	bx	lr
 8000868:	240092b0 	.word	0x240092b0

0800086c <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <vOR_B+0x18>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	78d9      	ldrb	r1, [r3, #3]
 8000872:	430a      	orrs	r2, r1
 8000874:	2a00      	cmp	r2, #0
 8000876:	705a      	strb	r2, [r3, #1]
 8000878:	bf0c      	ite	eq
 800087a:	2280      	moveq	r2, #128	; 0x80
 800087c:	2200      	movne	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	240092b0 	.word	0x240092b0

08000888 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <vOR_C+0x18>)
 800088a:	785a      	ldrb	r2, [r3, #1]
 800088c:	7899      	ldrb	r1, [r3, #2]
 800088e:	430a      	orrs	r2, r1
 8000890:	2a00      	cmp	r2, #0
 8000892:	705a      	strb	r2, [r3, #1]
 8000894:	bf0c      	ite	eq
 8000896:	2280      	moveq	r2, #128	; 0x80
 8000898:	2200      	movne	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	240092b0 	.word	0x240092b0

080008a4 <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <vOR_D+0x18>)
 80008a6:	785a      	ldrb	r2, [r3, #1]
 80008a8:	7959      	ldrb	r1, [r3, #5]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	705a      	strb	r2, [r3, #1]
 80008b0:	bf0c      	ite	eq
 80008b2:	2280      	moveq	r2, #128	; 0x80
 80008b4:	2200      	movne	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	240092b0 	.word	0x240092b0

080008c0 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <vOR_E+0x18>)
 80008c2:	785a      	ldrb	r2, [r3, #1]
 80008c4:	7919      	ldrb	r1, [r3, #4]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	705a      	strb	r2, [r3, #1]
 80008cc:	bf0c      	ite	eq
 80008ce:	2280      	moveq	r2, #128	; 0x80
 80008d0:	2200      	movne	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	240092b0 	.word	0x240092b0

080008dc <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <vOR_H+0x18>)
 80008de:	785a      	ldrb	r2, [r3, #1]
 80008e0:	79d9      	ldrb	r1, [r3, #7]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	705a      	strb	r2, [r3, #1]
 80008e8:	bf0c      	ite	eq
 80008ea:	2280      	moveq	r2, #128	; 0x80
 80008ec:	2200      	movne	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	240092b0 	.word	0x240092b0

080008f8 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <vOR_L+0x18>)
 80008fa:	785a      	ldrb	r2, [r3, #1]
 80008fc:	7999      	ldrb	r1, [r3, #6]
 80008fe:	430a      	orrs	r2, r1
 8000900:	2a00      	cmp	r2, #0
 8000902:	705a      	strb	r2, [r3, #1]
 8000904:	bf0c      	ite	eq
 8000906:	2280      	moveq	r2, #128	; 0x80
 8000908:	2200      	movne	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	240092b0 	.word	0x240092b0

08000914 <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <vOR_A+0x10>)
 8000916:	785a      	ldrb	r2, [r3, #1]
 8000918:	2a00      	cmp	r2, #0
 800091a:	bf0c      	ite	eq
 800091c:	2280      	moveq	r2, #128	; 0x80
 800091e:	2200      	movne	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	4770      	bx	lr
 8000924:	240092b0 	.word	0x240092b0

08000928 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <vJP_HL+0x8>)
 800092a:	88da      	ldrh	r2, [r3, #6]
 800092c:	815a      	strh	r2, [r3, #10]
 800092e:	4770      	bx	lr
 8000930:	240092b0 	.word	0x240092b0

08000934 <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           InterruptDisabled = 1;}
 8000934:	4b01      	ldr	r3, [pc, #4]	; (800093c <vDI+0x8>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	4770      	bx	lr
 800093c:	240090ec 	.word	0x240090ec

08000940 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000940:	4b01      	ldr	r3, [pc, #4]	; (8000948 <vLDs_SP_HL+0x8>)
 8000942:	88da      	ldrh	r2, [r3, #6]
 8000944:	811a      	strh	r2, [r3, #8]
 8000946:	4770      	bx	lr
 8000948:	240092b0 	.word	0x240092b0

0800094c <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           InterruptDisabled = 0;}
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <vEI+0x8>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	4770      	bx	lr
 8000954:	240090ec 	.word	0x240090ec

08000958 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 8000958:	b510      	push	{r4, lr}
 800095a:	4c04      	ldr	r4, [pc, #16]	; (800096c <vLD_B_d8+0x14>)
 800095c:	8960      	ldrh	r0, [r4, #10]
 800095e:	3801      	subs	r0, #1
 8000960:	b280      	uxth	r0, r0
 8000962:	f002 fcf5 	bl	8003350 <ucGBMemoryRead>
 8000966:	70e0      	strb	r0, [r4, #3]
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	240092b0 	.word	0x240092b0

08000970 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000970:	b510      	push	{r4, lr}
 8000972:	4c03      	ldr	r4, [pc, #12]	; (8000980 <vLD_A_BC+0x10>)
 8000974:	8860      	ldrh	r0, [r4, #2]
 8000976:	f002 fceb 	bl	8003350 <ucGBMemoryRead>
 800097a:	7060      	strb	r0, [r4, #1]
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	240092b0 	.word	0x240092b0

08000984 <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_C_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fcdf 	bl	8003350 <ucGBMemoryRead>
 8000992:	70a0      	strb	r0, [r4, #2]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	240092b0 	.word	0x240092b0

0800099c <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_D_d8+0x14>)
 80009a0:	8960      	ldrh	r0, [r4, #10]
 80009a2:	3801      	subs	r0, #1
 80009a4:	b280      	uxth	r0, r0
 80009a6:	f002 fcd3 	bl	8003350 <ucGBMemoryRead>
 80009aa:	7160      	strb	r0, [r4, #5]
 80009ac:	bd10      	pop	{r4, pc}
 80009ae:	bf00      	nop
 80009b0:	240092b0 	.word	0x240092b0

080009b4 <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c05      	ldr	r4, [pc, #20]	; (80009cc <vJR_r8+0x18>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fcc7 	bl	8003350 <ucGBMemoryRead>
 80009c2:	8963      	ldrh	r3, [r4, #10]
 80009c4:	fa43 f080 	sxtab	r0, r3, r0
 80009c8:	8160      	strh	r0, [r4, #10]
 80009ca:	bd10      	pop	{r4, pc}
 80009cc:	240092b0 	.word	0x240092b0

080009d0 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 80009d0:	b510      	push	{r4, lr}
 80009d2:	4c03      	ldr	r4, [pc, #12]	; (80009e0 <vLD_A_DE+0x10>)
 80009d4:	88a0      	ldrh	r0, [r4, #4]
 80009d6:	f002 fcbb 	bl	8003350 <ucGBMemoryRead>
 80009da:	7060      	strb	r0, [r4, #1]
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	bf00      	nop
 80009e0:	240092b0 	.word	0x240092b0

080009e4 <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 80009e4:	b510      	push	{r4, lr}
 80009e6:	4c04      	ldr	r4, [pc, #16]	; (80009f8 <vLD_E_d8+0x14>)
 80009e8:	8960      	ldrh	r0, [r4, #10]
 80009ea:	3801      	subs	r0, #1
 80009ec:	b280      	uxth	r0, r0
 80009ee:	f002 fcaf 	bl	8003350 <ucGBMemoryRead>
 80009f2:	7120      	strb	r0, [r4, #4]
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	240092b0 	.word	0x240092b0

080009fc <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4c04      	ldr	r4, [pc, #16]	; (8000a10 <vLD_H_d8+0x14>)
 8000a00:	8960      	ldrh	r0, [r4, #10]
 8000a02:	3801      	subs	r0, #1
 8000a04:	b280      	uxth	r0, r0
 8000a06:	f002 fca3 	bl	8003350 <ucGBMemoryRead>
 8000a0a:	71e0      	strb	r0, [r4, #7]
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	bf00      	nop
 8000a10:	240092b0 	.word	0x240092b0

08000a14 <vLD_L_d8>:
 8000a14:	f7ff bff2 	b.w	80009fc <vLD_H_d8>

08000a18 <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <vLD_A_HLI+0x14>)
 8000a1c:	88e0      	ldrh	r0, [r4, #6]
 8000a1e:	f002 fc97 	bl	8003350 <ucGBMemoryRead>
 8000a22:	88e3      	ldrh	r3, [r4, #6]
 8000a24:	7060      	strb	r0, [r4, #1]
 8000a26:	3301      	adds	r3, #1
 8000a28:	80e3      	strh	r3, [r4, #6]
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	240092b0 	.word	0x240092b0

08000a30 <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c04      	ldr	r4, [pc, #16]	; (8000a44 <vLD_A_HLD+0x14>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fc8b 	bl	8003350 <ucGBMemoryRead>
 8000a3a:	88e3      	ldrh	r3, [r4, #6]
 8000a3c:	7060      	strb	r0, [r4, #1]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	80e3      	strh	r3, [r4, #6]
 8000a42:	bd10      	pop	{r4, pc}
 8000a44:	240092b0 	.word	0x240092b0

08000a48 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 8000a48:	b510      	push	{r4, lr}
 8000a4a:	4c04      	ldr	r4, [pc, #16]	; (8000a5c <vLD_A_d8+0x14>)
 8000a4c:	8960      	ldrh	r0, [r4, #10]
 8000a4e:	3801      	subs	r0, #1
 8000a50:	b280      	uxth	r0, r0
 8000a52:	f002 fc7d 	bl	8003350 <ucGBMemoryRead>
 8000a56:	7060      	strb	r0, [r4, #1]
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	bf00      	nop
 8000a5c:	240092b0 	.word	0x240092b0

08000a60 <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c03      	ldr	r4, [pc, #12]	; (8000a70 <vLD_B_HL+0x10>)
 8000a64:	88e0      	ldrh	r0, [r4, #6]
 8000a66:	f002 fc73 	bl	8003350 <ucGBMemoryRead>
 8000a6a:	70e0      	strb	r0, [r4, #3]
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	240092b0 	.word	0x240092b0

08000a74 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 8000a74:	b510      	push	{r4, lr}
 8000a76:	4c03      	ldr	r4, [pc, #12]	; (8000a84 <vLD_C_HL+0x10>)
 8000a78:	88e0      	ldrh	r0, [r4, #6]
 8000a7a:	f002 fc69 	bl	8003350 <ucGBMemoryRead>
 8000a7e:	70a0      	strb	r0, [r4, #2]
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	240092b0 	.word	0x240092b0

08000a88 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	4c03      	ldr	r4, [pc, #12]	; (8000a98 <vLD_D_HL+0x10>)
 8000a8c:	88e0      	ldrh	r0, [r4, #6]
 8000a8e:	f002 fc5f 	bl	8003350 <ucGBMemoryRead>
 8000a92:	7160      	strb	r0, [r4, #5]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	240092b0 	.word	0x240092b0

08000a9c <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c03      	ldr	r4, [pc, #12]	; (8000aac <vLD_E_HL+0x10>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fc55 	bl	8003350 <ucGBMemoryRead>
 8000aa6:	7120      	strb	r0, [r4, #4]
 8000aa8:	bd10      	pop	{r4, pc}
 8000aaa:	bf00      	nop
 8000aac:	240092b0 	.word	0x240092b0

08000ab0 <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	4c03      	ldr	r4, [pc, #12]	; (8000ac0 <vLD_H_HL+0x10>)
 8000ab4:	88e0      	ldrh	r0, [r4, #6]
 8000ab6:	f002 fc4b 	bl	8003350 <ucGBMemoryRead>
 8000aba:	71e0      	strb	r0, [r4, #7]
 8000abc:	bd10      	pop	{r4, pc}
 8000abe:	bf00      	nop
 8000ac0:	240092b0 	.word	0x240092b0

08000ac4 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000ac4:	b510      	push	{r4, lr}
 8000ac6:	4c03      	ldr	r4, [pc, #12]	; (8000ad4 <vLD_L_HL+0x10>)
 8000ac8:	88e0      	ldrh	r0, [r4, #6]
 8000aca:	f002 fc41 	bl	8003350 <ucGBMemoryRead>
 8000ace:	71a0      	strb	r0, [r4, #6]
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	240092b0 	.word	0x240092b0

08000ad8 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	4c03      	ldr	r4, [pc, #12]	; (8000ae8 <vLD_A_HL+0x10>)
 8000adc:	88e0      	ldrh	r0, [r4, #6]
 8000ade:	f002 fc37 	bl	8003350 <ucGBMemoryRead>
 8000ae2:	7060      	strb	r0, [r4, #1]
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	bf00      	nop
 8000ae8:	240092b0 	.word	0x240092b0

08000aec <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4c06      	ldr	r4, [pc, #24]	; (8000b08 <vAND_HL+0x1c>)
 8000af0:	88e0      	ldrh	r0, [r4, #6]
 8000af2:	f002 fc2d 	bl	8003350 <ucGBMemoryRead>
 8000af6:	7863      	ldrb	r3, [r4, #1]
 8000af8:	4018      	ands	r0, r3
 8000afa:	2800      	cmp	r0, #0
 8000afc:	7060      	strb	r0, [r4, #1]
 8000afe:	bf0c      	ite	eq
 8000b00:	23a0      	moveq	r3, #160	; 0xa0
 8000b02:	2320      	movne	r3, #32
 8000b04:	7023      	strb	r3, [r4, #0]
 8000b06:	bd10      	pop	{r4, pc}
 8000b08:	240092b0 	.word	0x240092b0

08000b0c <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b0c:	b510      	push	{r4, lr}
 8000b0e:	4c07      	ldr	r4, [pc, #28]	; (8000b2c <vXOR_HL+0x20>)
 8000b10:	88e0      	ldrh	r0, [r4, #6]
 8000b12:	f002 fc1d 	bl	8003350 <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	240092b0 	.word	0x240092b0

08000b30 <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c07      	ldr	r4, [pc, #28]	; (8000b50 <vOR_HL+0x20>)
 8000b34:	88e0      	ldrh	r0, [r4, #6]
 8000b36:	f002 fc0b 	bl	8003350 <ucGBMemoryRead>
 8000b3a:	7863      	ldrb	r3, [r4, #1]
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	b2c0      	uxtb	r0, r0
 8000b40:	2800      	cmp	r0, #0
 8000b42:	7060      	strb	r0, [r4, #1]
 8000b44:	bf0c      	ite	eq
 8000b46:	2380      	moveq	r3, #128	; 0x80
 8000b48:	2300      	movne	r3, #0
 8000b4a:	7023      	strb	r3, [r4, #0]
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	bf00      	nop
 8000b50:	240092b0 	.word	0x240092b0

08000b54 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <vPREFIX+0x1c>)
 8000b56:	8958      	ldrh	r0, [r3, #10]
 8000b58:	3801      	subs	r0, #1
 8000b5a:	b510      	push	{r4, lr}
 8000b5c:	b280      	uxth	r0, r0
 8000b5e:	f002 fbf7 	bl	8003350 <ucGBMemoryRead>
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <vPREFIX+0x20>)
 8000b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b68:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b6c:	4718      	bx	r3
 8000b6e:	bf00      	nop
 8000b70:	240092b0 	.word	0x240092b0
 8000b74:	24000808 	.word	0x24000808

08000b78 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4c07      	ldr	r4, [pc, #28]	; (8000b98 <vAND_d8+0x20>)
 8000b7c:	8960      	ldrh	r0, [r4, #10]
 8000b7e:	3801      	subs	r0, #1
 8000b80:	b280      	uxth	r0, r0
 8000b82:	f002 fbe5 	bl	8003350 <ucGBMemoryRead>
 8000b86:	7863      	ldrb	r3, [r4, #1]
 8000b88:	4018      	ands	r0, r3
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	7060      	strb	r0, [r4, #1]
 8000b8e:	bf0c      	ite	eq
 8000b90:	23a0      	moveq	r3, #160	; 0xa0
 8000b92:	2320      	movne	r3, #32
 8000b94:	7023      	strb	r3, [r4, #0]
 8000b96:	bd10      	pop	{r4, pc}
 8000b98:	240092b0 	.word	0x240092b0

08000b9c <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4c08      	ldr	r4, [pc, #32]	; (8000bc0 <vXOR_d8+0x24>)
 8000ba0:	8960      	ldrh	r0, [r4, #10]
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fbd3 	bl	8003350 <ucGBMemoryRead>
 8000baa:	7863      	ldrb	r3, [r4, #1]
 8000bac:	ea83 0200 	eor.w	r2, r3, r0
 8000bb0:	4283      	cmp	r3, r0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2080      	moveq	r0, #128	; 0x80
 8000bb6:	2000      	movne	r0, #0
 8000bb8:	7062      	strb	r2, [r4, #1]
 8000bba:	7020      	strb	r0, [r4, #0]
 8000bbc:	bd10      	pop	{r4, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240092b0 	.word	0x240092b0

08000bc4 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4c06      	ldr	r4, [pc, #24]	; (8000be0 <vLDH_A_a8+0x1c>)
 8000bc8:	8960      	ldrh	r0, [r4, #10]
 8000bca:	3801      	subs	r0, #1
 8000bcc:	b280      	uxth	r0, r0
 8000bce:	f002 fbbf 	bl	8003350 <ucGBMemoryRead>
 8000bd2:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bd6:	b280      	uxth	r0, r0
 8000bd8:	f002 fbba 	bl	8003350 <ucGBMemoryRead>
 8000bdc:	7060      	strb	r0, [r4, #1]
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	240092b0 	.word	0x240092b0

08000be4 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000be4:	b510      	push	{r4, lr}
 8000be6:	4c04      	ldr	r4, [pc, #16]	; (8000bf8 <vLD_A_fC+0x14>)
 8000be8:	78a0      	ldrb	r0, [r4, #2]
 8000bea:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bee:	b280      	uxth	r0, r0
 8000bf0:	f002 fbae 	bl	8003350 <ucGBMemoryRead>
 8000bf4:	7060      	strb	r0, [r4, #1]
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	240092b0 	.word	0x240092b0

08000bfc <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4c08      	ldr	r4, [pc, #32]	; (8000c20 <vOR_d8+0x24>)
 8000c00:	8960      	ldrh	r0, [r4, #10]
 8000c02:	3801      	subs	r0, #1
 8000c04:	b280      	uxth	r0, r0
 8000c06:	f002 fba3 	bl	8003350 <ucGBMemoryRead>
 8000c0a:	7863      	ldrb	r3, [r4, #1]
 8000c0c:	4318      	orrs	r0, r3
 8000c0e:	b2c0      	uxtb	r0, r0
 8000c10:	2800      	cmp	r0, #0
 8000c12:	7060      	strb	r0, [r4, #1]
 8000c14:	bf0c      	ite	eq
 8000c16:	2380      	moveq	r3, #128	; 0x80
 8000c18:	2300      	movne	r3, #0
 8000c1a:	7023      	strb	r3, [r4, #0]
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	bf00      	nop
 8000c20:	240092b0 	.word	0x240092b0

08000c24 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c24:	b538      	push	{r3, r4, r5, lr}
 8000c26:	4c09      	ldr	r4, [pc, #36]	; (8000c4c <vLDs_BC_d16+0x28>)
 8000c28:	8960      	ldrh	r0, [r4, #10]
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	f002 fb8f 	bl	8003350 <ucGBMemoryRead>
 8000c32:	8963      	ldrh	r3, [r4, #10]
 8000c34:	4605      	mov	r5, r0
 8000c36:	1e58      	subs	r0, r3, #1
 8000c38:	b280      	uxth	r0, r0
 8000c3a:	f002 fb89 	bl	8003350 <ucGBMemoryRead>
 8000c3e:	4601      	mov	r1, r0
 8000c40:	4628      	mov	r0, r5
 8000c42:	f001 ff19 	bl	8002a78 <concat_16bit_bigEndian>
 8000c46:	8060      	strh	r0, [r4, #2]
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop
 8000c4c:	240092b0 	.word	0x240092b0

08000c50 <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	4c09      	ldr	r4, [pc, #36]	; (8000c78 <vLDs_DE_d16+0x28>)
 8000c54:	8960      	ldrh	r0, [r4, #10]
 8000c56:	3802      	subs	r0, #2
 8000c58:	b280      	uxth	r0, r0
 8000c5a:	f002 fb79 	bl	8003350 <ucGBMemoryRead>
 8000c5e:	8963      	ldrh	r3, [r4, #10]
 8000c60:	4605      	mov	r5, r0
 8000c62:	1e58      	subs	r0, r3, #1
 8000c64:	b280      	uxth	r0, r0
 8000c66:	f002 fb73 	bl	8003350 <ucGBMemoryRead>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f001 ff03 	bl	8002a78 <concat_16bit_bigEndian>
 8000c72:	80a0      	strh	r0, [r4, #4]
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop
 8000c78:	240092b0 	.word	0x240092b0

08000c7c <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4c09      	ldr	r4, [pc, #36]	; (8000ca4 <vLDs_HL_d16+0x28>)
 8000c80:	8960      	ldrh	r0, [r4, #10]
 8000c82:	3802      	subs	r0, #2
 8000c84:	b280      	uxth	r0, r0
 8000c86:	f002 fb63 	bl	8003350 <ucGBMemoryRead>
 8000c8a:	8963      	ldrh	r3, [r4, #10]
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	1e58      	subs	r0, r3, #1
 8000c90:	b280      	uxth	r0, r0
 8000c92:	f002 fb5d 	bl	8003350 <ucGBMemoryRead>
 8000c96:	4601      	mov	r1, r0
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f001 feed 	bl	8002a78 <concat_16bit_bigEndian>
 8000c9e:	80e0      	strh	r0, [r4, #6]
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240092b0 	.word	0x240092b0

08000ca8 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	4c09      	ldr	r4, [pc, #36]	; (8000cd0 <vLDs_SP_d16+0x28>)
 8000cac:	8960      	ldrh	r0, [r4, #10]
 8000cae:	3802      	subs	r0, #2
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	f002 fb4d 	bl	8003350 <ucGBMemoryRead>
 8000cb6:	8963      	ldrh	r3, [r4, #10]
 8000cb8:	4605      	mov	r5, r0
 8000cba:	1e58      	subs	r0, r3, #1
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	f002 fb47 	bl	8003350 <ucGBMemoryRead>
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f001 fed7 	bl	8002a78 <concat_16bit_bigEndian>
 8000cca:	8120      	strh	r0, [r4, #8]
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
 8000cce:	bf00      	nop
 8000cd0:	240092b0 	.word	0x240092b0

08000cd4 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4c09      	ldr	r4, [pc, #36]	; (8000cfc <vJP_a16+0x28>)
 8000cd8:	8960      	ldrh	r0, [r4, #10]
 8000cda:	3802      	subs	r0, #2
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	f002 fb37 	bl	8003350 <ucGBMemoryRead>
 8000ce2:	8963      	ldrh	r3, [r4, #10]
 8000ce4:	4605      	mov	r5, r0
 8000ce6:	1e58      	subs	r0, r3, #1
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	f002 fb31 	bl	8003350 <ucGBMemoryRead>
 8000cee:	4601      	mov	r1, r0
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f001 fec1 	bl	8002a78 <concat_16bit_bigEndian>
 8000cf6:	8160      	strh	r0, [r4, #10]
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop
 8000cfc:	240092b0 	.word	0x240092b0

08000d00 <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <vLD_A_a16+0x2c>)
 8000d04:	8960      	ldrh	r0, [r4, #10]
 8000d06:	3802      	subs	r0, #2
 8000d08:	b280      	uxth	r0, r0
 8000d0a:	f002 fb21 	bl	8003350 <ucGBMemoryRead>
 8000d0e:	8963      	ldrh	r3, [r4, #10]
 8000d10:	4605      	mov	r5, r0
 8000d12:	1e58      	subs	r0, r3, #1
 8000d14:	b280      	uxth	r0, r0
 8000d16:	f002 fb1b 	bl	8003350 <ucGBMemoryRead>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f001 feab 	bl	8002a78 <concat_16bit_bigEndian>
 8000d22:	f002 fb15 	bl	8003350 <ucGBMemoryRead>
 8000d26:	7060      	strb	r0, [r4, #1]
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
 8000d2a:	bf00      	nop
 8000d2c:	240092b0 	.word	0x240092b0

08000d30 <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <vLD_BC_A+0xc>)
 8000d32:	7859      	ldrb	r1, [r3, #1]
 8000d34:	8858      	ldrh	r0, [r3, #2]
 8000d36:	f002 baef 	b.w	8003318 <vGBMemoryWrite>
 8000d3a:	bf00      	nop
 8000d3c:	240092b0 	.word	0x240092b0

08000d40 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <vLDs_a16_SP+0x2c>)
 8000d44:	8960      	ldrh	r0, [r4, #10]
 8000d46:	3802      	subs	r0, #2
 8000d48:	b280      	uxth	r0, r0
 8000d4a:	f002 fb01 	bl	8003350 <ucGBMemoryRead>
 8000d4e:	8963      	ldrh	r3, [r4, #10]
 8000d50:	4605      	mov	r5, r0
 8000d52:	1e58      	subs	r0, r3, #1
 8000d54:	b280      	uxth	r0, r0
 8000d56:	f002 fafb 	bl	8003350 <ucGBMemoryRead>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f001 fe8b 	bl	8002a78 <concat_16bit_bigEndian>
 8000d62:	7a21      	ldrb	r1, [r4, #8]
 8000d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d68:	f002 bad6 	b.w	8003318 <vGBMemoryWrite>
 8000d6c:	240092b0 	.word	0x240092b0

08000d70 <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <vLD_DE_A+0xc>)
 8000d72:	7859      	ldrb	r1, [r3, #1]
 8000d74:	8898      	ldrh	r0, [r3, #4]
 8000d76:	f002 bacf 	b.w	8003318 <vGBMemoryWrite>
 8000d7a:	bf00      	nop
 8000d7c:	240092b0 	.word	0x240092b0

08000d80 <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4c04      	ldr	r4, [pc, #16]	; (8000d94 <vLD_HLI_A+0x14>)
 8000d84:	7861      	ldrb	r1, [r4, #1]
 8000d86:	88e0      	ldrh	r0, [r4, #6]
 8000d88:	f002 fac6 	bl	8003318 <vGBMemoryWrite>
 8000d8c:	88e3      	ldrh	r3, [r4, #6]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	80e3      	strh	r3, [r4, #6]
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	240092b0 	.word	0x240092b0

08000d98 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	4c04      	ldr	r4, [pc, #16]	; (8000dac <vLD_HLD_A+0x14>)
 8000d9c:	7861      	ldrb	r1, [r4, #1]
 8000d9e:	88e0      	ldrh	r0, [r4, #6]
 8000da0:	f002 faba 	bl	8003318 <vGBMemoryWrite>
 8000da4:	88e3      	ldrh	r3, [r4, #6]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	80e3      	strh	r3, [r4, #6]
 8000daa:	bd10      	pop	{r4, pc}
 8000dac:	240092b0 	.word	0x240092b0

08000db0 <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <vLD_HL_d8+0x1c>)
 8000db2:	8958      	ldrh	r0, [r3, #10]
 8000db4:	3801      	subs	r0, #1
 8000db6:	b510      	push	{r4, lr}
 8000db8:	88dc      	ldrh	r4, [r3, #6]
 8000dba:	b280      	uxth	r0, r0
 8000dbc:	f002 fac8 	bl	8003350 <ucGBMemoryRead>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc8:	f002 baa6 	b.w	8003318 <vGBMemoryWrite>
 8000dcc:	240092b0 	.word	0x240092b0

08000dd0 <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <vLD_HL_B+0xc>)
 8000dd2:	78d9      	ldrb	r1, [r3, #3]
 8000dd4:	88d8      	ldrh	r0, [r3, #6]
 8000dd6:	f002 ba9f 	b.w	8003318 <vGBMemoryWrite>
 8000dda:	bf00      	nop
 8000ddc:	240092b0 	.word	0x240092b0

08000de0 <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <vLD_HL_C+0xc>)
 8000de2:	7899      	ldrb	r1, [r3, #2]
 8000de4:	88d8      	ldrh	r0, [r3, #6]
 8000de6:	f002 ba97 	b.w	8003318 <vGBMemoryWrite>
 8000dea:	bf00      	nop
 8000dec:	240092b0 	.word	0x240092b0

08000df0 <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <vLD_HL_D+0xc>)
 8000df2:	7959      	ldrb	r1, [r3, #5]
 8000df4:	88d8      	ldrh	r0, [r3, #6]
 8000df6:	f002 ba8f 	b.w	8003318 <vGBMemoryWrite>
 8000dfa:	bf00      	nop
 8000dfc:	240092b0 	.word	0x240092b0

08000e00 <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <vLD_HL_E+0xc>)
 8000e02:	7919      	ldrb	r1, [r3, #4]
 8000e04:	88d8      	ldrh	r0, [r3, #6]
 8000e06:	f002 ba87 	b.w	8003318 <vGBMemoryWrite>
 8000e0a:	bf00      	nop
 8000e0c:	240092b0 	.word	0x240092b0

08000e10 <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <vLD_HL_H+0xc>)
 8000e12:	79d9      	ldrb	r1, [r3, #7]
 8000e14:	88d8      	ldrh	r0, [r3, #6]
 8000e16:	f002 ba7f 	b.w	8003318 <vGBMemoryWrite>
 8000e1a:	bf00      	nop
 8000e1c:	240092b0 	.word	0x240092b0

08000e20 <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <vLD_HL_L+0xc>)
 8000e22:	7999      	ldrb	r1, [r3, #6]
 8000e24:	88d8      	ldrh	r0, [r3, #6]
 8000e26:	f002 ba77 	b.w	8003318 <vGBMemoryWrite>
 8000e2a:	bf00      	nop
 8000e2c:	240092b0 	.word	0x240092b0

08000e30 <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <vLD_HL_A+0xc>)
 8000e32:	7859      	ldrb	r1, [r3, #1]
 8000e34:	88d8      	ldrh	r0, [r3, #6]
 8000e36:	f002 ba6f 	b.w	8003318 <vGBMemoryWrite>
 8000e3a:	bf00      	nop
 8000e3c:	240092b0 	.word	0x240092b0

08000e40 <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000e40:	b510      	push	{r4, lr}
 8000e42:	4c07      	ldr	r4, [pc, #28]	; (8000e60 <vLDH_a8_A+0x20>)
 8000e44:	8960      	ldrh	r0, [r4, #10]
 8000e46:	3801      	subs	r0, #1
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	f002 fa81 	bl	8003350 <ucGBMemoryRead>
 8000e4e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e52:	7861      	ldrb	r1, [r4, #1]
 8000e54:	b280      	uxth	r0, r0
 8000e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e5a:	f002 ba5d 	b.w	8003318 <vGBMemoryWrite>
 8000e5e:	bf00      	nop
 8000e60:	240092b0 	.word	0x240092b0

08000e64 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <vLD_fC_A+0x10>)
 8000e66:	7898      	ldrb	r0, [r3, #2]
 8000e68:	7859      	ldrb	r1, [r3, #1]
 8000e6a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	f002 ba52 	b.w	8003318 <vGBMemoryWrite>
 8000e74:	240092b0 	.word	0x240092b0

08000e78 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <vLD_a16_A+0x2c>)
 8000e7c:	8960      	ldrh	r0, [r4, #10]
 8000e7e:	3802      	subs	r0, #2
 8000e80:	b280      	uxth	r0, r0
 8000e82:	f002 fa65 	bl	8003350 <ucGBMemoryRead>
 8000e86:	8963      	ldrh	r3, [r4, #10]
 8000e88:	4605      	mov	r5, r0
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	b280      	uxth	r0, r0
 8000e8e:	f002 fa5f 	bl	8003350 <ucGBMemoryRead>
 8000e92:	4601      	mov	r1, r0
 8000e94:	4628      	mov	r0, r5
 8000e96:	f001 fdef 	bl	8002a78 <concat_16bit_bigEndian>
 8000e9a:	7861      	ldrb	r1, [r4, #1]
 8000e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea0:	f002 ba3a 	b.w	8003318 <vGBMemoryWrite>
 8000ea4:	240092b0 	.word	0x240092b0

08000ea8 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000ea8:	4901      	ldr	r1, [pc, #4]	; (8000eb0 <vINC_B+0x8>)
 8000eaa:	1cc8      	adds	r0, r1, #3
 8000eac:	f001 bdfc 	b.w	8002aa8 <v8bitRegisterINC>
 8000eb0:	240092b0 	.word	0x240092b0

08000eb4 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000eb4:	4901      	ldr	r1, [pc, #4]	; (8000ebc <vINC_C+0x8>)
 8000eb6:	1c88      	adds	r0, r1, #2
 8000eb8:	f001 bdf6 	b.w	8002aa8 <v8bitRegisterINC>
 8000ebc:	240092b0 	.word	0x240092b0

08000ec0 <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000ec0:	4901      	ldr	r1, [pc, #4]	; (8000ec8 <vINC_D+0x8>)
 8000ec2:	1d48      	adds	r0, r1, #5
 8000ec4:	f001 bdf0 	b.w	8002aa8 <v8bitRegisterINC>
 8000ec8:	240092b0 	.word	0x240092b0

08000ecc <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000ecc:	4901      	ldr	r1, [pc, #4]	; (8000ed4 <vINC_E+0x8>)
 8000ece:	1d08      	adds	r0, r1, #4
 8000ed0:	f001 bdea 	b.w	8002aa8 <v8bitRegisterINC>
 8000ed4:	240092b0 	.word	0x240092b0

08000ed8 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000ed8:	4901      	ldr	r1, [pc, #4]	; (8000ee0 <vINC_H+0x8>)
 8000eda:	1dc8      	adds	r0, r1, #7
 8000edc:	f001 bde4 	b.w	8002aa8 <v8bitRegisterINC>
 8000ee0:	240092b0 	.word	0x240092b0

08000ee4 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000ee4:	4901      	ldr	r1, [pc, #4]	; (8000eec <vINC_L+0x8>)
 8000ee6:	1d88      	adds	r0, r1, #6
 8000ee8:	f001 bdde 	b.w	8002aa8 <v8bitRegisterINC>
 8000eec:	240092b0 	.word	0x240092b0

08000ef0 <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000ef0:	4901      	ldr	r1, [pc, #4]	; (8000ef8 <vINC_A+0x8>)
 8000ef2:	1c48      	adds	r0, r1, #1
 8000ef4:	f001 bdd8 	b.w	8002aa8 <v8bitRegisterINC>
 8000ef8:	240092b0 	.word	0x240092b0

08000efc <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000efc:	4901      	ldr	r1, [pc, #4]	; (8000f04 <vDEC_B+0x8>)
 8000efe:	1cc8      	adds	r0, r1, #3
 8000f00:	f001 bdf0 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f04:	240092b0 	.word	0x240092b0

08000f08 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vDEC_C+0x8>)
 8000f0a:	1c88      	adds	r0, r1, #2
 8000f0c:	f001 bdea 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f10:	240092b0 	.word	0x240092b0

08000f14 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vDEC_D+0x8>)
 8000f16:	1d48      	adds	r0, r1, #5
 8000f18:	f001 bde4 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f1c:	240092b0 	.word	0x240092b0

08000f20 <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vDEC_E+0x8>)
 8000f22:	1d08      	adds	r0, r1, #4
 8000f24:	f001 bdde 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f28:	240092b0 	.word	0x240092b0

08000f2c <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000f2c:	4901      	ldr	r1, [pc, #4]	; (8000f34 <vDEC_H+0x8>)
 8000f2e:	1dc8      	adds	r0, r1, #7
 8000f30:	f001 bdd8 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f34:	240092b0 	.word	0x240092b0

08000f38 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000f38:	4901      	ldr	r1, [pc, #4]	; (8000f40 <vDEC_L+0x8>)
 8000f3a:	1d88      	adds	r0, r1, #6
 8000f3c:	f001 bdd2 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f40:	240092b0 	.word	0x240092b0

08000f44 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000f44:	4901      	ldr	r1, [pc, #4]	; (8000f4c <vDEC_A+0x8>)
 8000f46:	1c48      	adds	r0, r1, #1
 8000f48:	f001 bdcc 	b.w	8002ae4 <v8bitRegisterDEC>
 8000f4c:	240092b0 	.word	0x240092b0

08000f50 <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000f50:	4901      	ldr	r1, [pc, #4]	; (8000f58 <vRLCA+0x8>)
 8000f52:	1c48      	adds	r0, r1, #1
 8000f54:	f001 bde6 	b.w	8002b24 <vGBFunctionRLCA>
 8000f58:	240092b0 	.word	0x240092b0

08000f5c <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000f5c:	4a02      	ldr	r2, [pc, #8]	; (8000f68 <vADDs_HL_BC+0xc>)
 8000f5e:	8851      	ldrh	r1, [r2, #2]
 8000f60:	1d90      	adds	r0, r2, #6
 8000f62:	f001 bdfd 	b.w	8002b60 <vGBFunction16bitADD>
 8000f66:	bf00      	nop
 8000f68:	240092b0 	.word	0x240092b0

08000f6c <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000f6c:	4a02      	ldr	r2, [pc, #8]	; (8000f78 <vADDs_HL_DE+0xc>)
 8000f6e:	8891      	ldrh	r1, [r2, #4]
 8000f70:	1d90      	adds	r0, r2, #6
 8000f72:	f001 bdf5 	b.w	8002b60 <vGBFunction16bitADD>
 8000f76:	bf00      	nop
 8000f78:	240092b0 	.word	0x240092b0

08000f7c <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <vADDs_HL_HL+0xc>)
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000f84:	f001 bdec 	b.w	8002b60 <vGBFunction16bitADD>
 8000f88:	240092b0 	.word	0x240092b0

08000f8c <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <vADDs_HL_SP+0xc>)
 8000f8e:	8911      	ldrh	r1, [r2, #8]
 8000f90:	1d90      	adds	r0, r2, #6
 8000f92:	f001 bde5 	b.w	8002b60 <vGBFunction16bitADD>
 8000f96:	bf00      	nop
 8000f98:	240092b0 	.word	0x240092b0

08000f9c <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f9c:	4901      	ldr	r1, [pc, #4]	; (8000fa4 <vRRCA+0x8>)
 8000f9e:	1c48      	adds	r0, r1, #1
 8000fa0:	f001 bdcc 	b.w	8002b3c <vGBFunctionRRCA>
 8000fa4:	240092b0 	.word	0x240092b0

08000fa8 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000fa8:	4901      	ldr	r1, [pc, #4]	; (8000fb0 <vRLA+0x8>)
 8000faa:	1c48      	adds	r0, r1, #1
 8000fac:	f001 be00 	b.w	8002bb0 <vGBFunctionRLA>
 8000fb0:	240092b0 	.word	0x240092b0

08000fb4 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000fb4:	4901      	ldr	r1, [pc, #4]	; (8000fbc <vRRA+0x8>)
 8000fb6:	1c48      	adds	r0, r1, #1
 8000fb8:	f001 be08 	b.w	8002bcc <vGBFunctionRRA>
 8000fbc:	240092b0 	.word	0x240092b0

08000fc0 <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d08      	ldr	r5, [pc, #32]	; (8000fe4 <vJR_NZ_r8+0x24>)
 8000fc4:	462c      	mov	r4, r5
 8000fc6:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fca:	3801      	subs	r0, #1
 8000fcc:	b280      	uxth	r0, r0
 8000fce:	f002 f9bf 	bl	8003350 <ucGBMemoryRead>
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f001 fe06 	bl	8002be8 <vGBFunctionJR_NZ>
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <vJR_NZ_r8+0x28>)
 8000fde:	7018      	strb	r0, [r3, #0]
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	240092b0 	.word	0x240092b0
 8000fe8:	240090ed 	.word	0x240090ed

08000fec <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000fec:	4901      	ldr	r1, [pc, #4]	; (8000ff4 <vDAA+0x8>)
 8000fee:	1c48      	adds	r0, r1, #1
 8000ff0:	f001 be06 	b.w	8002c00 <vGBFunctionDAA>
 8000ff4:	240092b0 	.word	0x240092b0

08000ff8 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4d08      	ldr	r5, [pc, #32]	; (800101c <vJR_Z_r8+0x24>)
 8000ffc:	462c      	mov	r4, r5
 8000ffe:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001002:	3801      	subs	r0, #1
 8001004:	b280      	uxth	r0, r0
 8001006:	f002 f9a3 	bl	8003350 <ucGBMemoryRead>
 800100a:	4629      	mov	r1, r5
 800100c:	4602      	mov	r2, r0
 800100e:	4620      	mov	r0, r4
 8001010:	f001 fe2a 	bl	8002c68 <vGBFunctionJR_Z>
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <vJR_Z_r8+0x28>)
 8001016:	7018      	strb	r0, [r3, #0]
 8001018:	bd38      	pop	{r3, r4, r5, pc}
 800101a:	bf00      	nop
 800101c:	240092b0 	.word	0x240092b0
 8001020:	240090ed 	.word	0x240090ed

08001024 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8001024:	b510      	push	{r4, lr}
 8001026:	4c07      	ldr	r4, [pc, #28]	; (8001044 <vCPL+0x20>)
 8001028:	2106      	movs	r1, #6
 800102a:	7863      	ldrb	r3, [r4, #1]
 800102c:	4620      	mov	r0, r4
 800102e:	43db      	mvns	r3, r3
 8001030:	7063      	strb	r3, [r4, #1]
 8001032:	f001 fd25 	bl	8002a80 <setbit>
 8001036:	4620      	mov	r0, r4
 8001038:	2105      	movs	r1, #5
 800103a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800103e:	f001 bd1f 	b.w	8002a80 <setbit>
 8001042:	bf00      	nop
 8001044:	240092b0 	.word	0x240092b0

08001048 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8001048:	2100      	movs	r1, #0
 800104a:	4801      	ldr	r0, [pc, #4]	; (8001050 <vSET_0_B+0x8>)
 800104c:	f001 bd18 	b.w	8002a80 <setbit>
 8001050:	240092b3 	.word	0x240092b3

08001054 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8001054:	2100      	movs	r1, #0
 8001056:	4801      	ldr	r0, [pc, #4]	; (800105c <vSET_0_C+0x8>)
 8001058:	f001 bd12 	b.w	8002a80 <setbit>
 800105c:	240092b2 	.word	0x240092b2

08001060 <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8001060:	2100      	movs	r1, #0
 8001062:	4801      	ldr	r0, [pc, #4]	; (8001068 <vSET_0_D+0x8>)
 8001064:	f001 bd0c 	b.w	8002a80 <setbit>
 8001068:	240092b5 	.word	0x240092b5

0800106c <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 800106c:	2100      	movs	r1, #0
 800106e:	4801      	ldr	r0, [pc, #4]	; (8001074 <vSET_0_E+0x8>)
 8001070:	f001 bd06 	b.w	8002a80 <setbit>
 8001074:	240092b4 	.word	0x240092b4

08001078 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8001078:	2100      	movs	r1, #0
 800107a:	4801      	ldr	r0, [pc, #4]	; (8001080 <vSET_0_H+0x8>)
 800107c:	f001 bd00 	b.w	8002a80 <setbit>
 8001080:	240092b7 	.word	0x240092b7

08001084 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8001084:	2100      	movs	r1, #0
 8001086:	4801      	ldr	r0, [pc, #4]	; (800108c <vSET_0_L+0x8>)
 8001088:	f001 bcfa 	b.w	8002a80 <setbit>
 800108c:	240092b6 	.word	0x240092b6

08001090 <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8001090:	2100      	movs	r1, #0
 8001092:	4801      	ldr	r0, [pc, #4]	; (8001098 <vSET_0_A+0x8>)
 8001094:	f001 bcf4 	b.w	8002a80 <setbit>
 8001098:	240092b1 	.word	0x240092b1

0800109c <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 800109c:	2101      	movs	r1, #1
 800109e:	4801      	ldr	r0, [pc, #4]	; (80010a4 <vSET_1_B+0x8>)
 80010a0:	f001 bcee 	b.w	8002a80 <setbit>
 80010a4:	240092b3 	.word	0x240092b3

080010a8 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 80010a8:	2101      	movs	r1, #1
 80010aa:	4801      	ldr	r0, [pc, #4]	; (80010b0 <vSET_1_C+0x8>)
 80010ac:	f001 bce8 	b.w	8002a80 <setbit>
 80010b0:	240092b2 	.word	0x240092b2

080010b4 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 80010b4:	2101      	movs	r1, #1
 80010b6:	4801      	ldr	r0, [pc, #4]	; (80010bc <vSET_1_D+0x8>)
 80010b8:	f001 bce2 	b.w	8002a80 <setbit>
 80010bc:	240092b5 	.word	0x240092b5

080010c0 <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 80010c0:	2101      	movs	r1, #1
 80010c2:	4801      	ldr	r0, [pc, #4]	; (80010c8 <vSET_1_E+0x8>)
 80010c4:	f001 bcdc 	b.w	8002a80 <setbit>
 80010c8:	240092b4 	.word	0x240092b4

080010cc <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 80010cc:	2101      	movs	r1, #1
 80010ce:	4801      	ldr	r0, [pc, #4]	; (80010d4 <vSET_1_H+0x8>)
 80010d0:	f001 bcd6 	b.w	8002a80 <setbit>
 80010d4:	240092b7 	.word	0x240092b7

080010d8 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 80010d8:	2101      	movs	r1, #1
 80010da:	4801      	ldr	r0, [pc, #4]	; (80010e0 <vSET_1_L+0x8>)
 80010dc:	f001 bcd0 	b.w	8002a80 <setbit>
 80010e0:	240092b6 	.word	0x240092b6

080010e4 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 80010e4:	2101      	movs	r1, #1
 80010e6:	4801      	ldr	r0, [pc, #4]	; (80010ec <vSET_1_A+0x8>)
 80010e8:	f001 bcca 	b.w	8002a80 <setbit>
 80010ec:	240092b1 	.word	0x240092b1

080010f0 <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 80010f0:	2102      	movs	r1, #2
 80010f2:	4801      	ldr	r0, [pc, #4]	; (80010f8 <vSET_2_B+0x8>)
 80010f4:	f001 bcc4 	b.w	8002a80 <setbit>
 80010f8:	240092b3 	.word	0x240092b3

080010fc <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 80010fc:	2102      	movs	r1, #2
 80010fe:	4801      	ldr	r0, [pc, #4]	; (8001104 <vSET_2_C+0x8>)
 8001100:	f001 bcbe 	b.w	8002a80 <setbit>
 8001104:	240092b2 	.word	0x240092b2

08001108 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001108:	2102      	movs	r1, #2
 800110a:	4801      	ldr	r0, [pc, #4]	; (8001110 <vSET_2_D+0x8>)
 800110c:	f001 bcb8 	b.w	8002a80 <setbit>
 8001110:	240092b5 	.word	0x240092b5

08001114 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001114:	2102      	movs	r1, #2
 8001116:	4801      	ldr	r0, [pc, #4]	; (800111c <vSET_2_E+0x8>)
 8001118:	f001 bcb2 	b.w	8002a80 <setbit>
 800111c:	240092b4 	.word	0x240092b4

08001120 <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 8001120:	2102      	movs	r1, #2
 8001122:	4801      	ldr	r0, [pc, #4]	; (8001128 <vSET_2_H+0x8>)
 8001124:	f001 bcac 	b.w	8002a80 <setbit>
 8001128:	240092b7 	.word	0x240092b7

0800112c <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 800112c:	2102      	movs	r1, #2
 800112e:	4801      	ldr	r0, [pc, #4]	; (8001134 <vSET_2_L+0x8>)
 8001130:	f001 bca6 	b.w	8002a80 <setbit>
 8001134:	240092b6 	.word	0x240092b6

08001138 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 8001138:	2102      	movs	r1, #2
 800113a:	4801      	ldr	r0, [pc, #4]	; (8001140 <vSET_2_A+0x8>)
 800113c:	f001 bca0 	b.w	8002a80 <setbit>
 8001140:	240092b1 	.word	0x240092b1

08001144 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 8001144:	2103      	movs	r1, #3
 8001146:	4801      	ldr	r0, [pc, #4]	; (800114c <vSET_3_B+0x8>)
 8001148:	f001 bc9a 	b.w	8002a80 <setbit>
 800114c:	240092b3 	.word	0x240092b3

08001150 <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 8001150:	2103      	movs	r1, #3
 8001152:	4801      	ldr	r0, [pc, #4]	; (8001158 <vSET_3_C+0x8>)
 8001154:	f001 bc94 	b.w	8002a80 <setbit>
 8001158:	240092b2 	.word	0x240092b2

0800115c <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 800115c:	2103      	movs	r1, #3
 800115e:	4801      	ldr	r0, [pc, #4]	; (8001164 <vSET_3_D+0x8>)
 8001160:	f001 bc8e 	b.w	8002a80 <setbit>
 8001164:	240092b5 	.word	0x240092b5

08001168 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 8001168:	2103      	movs	r1, #3
 800116a:	4801      	ldr	r0, [pc, #4]	; (8001170 <vSET_3_E+0x8>)
 800116c:	f001 bc88 	b.w	8002a80 <setbit>
 8001170:	240092b4 	.word	0x240092b4

08001174 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 8001174:	2103      	movs	r1, #3
 8001176:	4801      	ldr	r0, [pc, #4]	; (800117c <vSET_3_H+0x8>)
 8001178:	f001 bc82 	b.w	8002a80 <setbit>
 800117c:	240092b7 	.word	0x240092b7

08001180 <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 8001180:	2103      	movs	r1, #3
 8001182:	4801      	ldr	r0, [pc, #4]	; (8001188 <vSET_3_L+0x8>)
 8001184:	f001 bc7c 	b.w	8002a80 <setbit>
 8001188:	240092b6 	.word	0x240092b6

0800118c <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 800118c:	2103      	movs	r1, #3
 800118e:	4801      	ldr	r0, [pc, #4]	; (8001194 <vSET_3_A+0x8>)
 8001190:	f001 bc76 	b.w	8002a80 <setbit>
 8001194:	240092b1 	.word	0x240092b1

08001198 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001198:	2104      	movs	r1, #4
 800119a:	4801      	ldr	r0, [pc, #4]	; (80011a0 <vSET_4_B+0x8>)
 800119c:	f001 bc70 	b.w	8002a80 <setbit>
 80011a0:	240092b3 	.word	0x240092b3

080011a4 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 80011a4:	2104      	movs	r1, #4
 80011a6:	4801      	ldr	r0, [pc, #4]	; (80011ac <vSET_4_C+0x8>)
 80011a8:	f001 bc6a 	b.w	8002a80 <setbit>
 80011ac:	240092b2 	.word	0x240092b2

080011b0 <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 80011b0:	2104      	movs	r1, #4
 80011b2:	4801      	ldr	r0, [pc, #4]	; (80011b8 <vSET_4_D+0x8>)
 80011b4:	f001 bc64 	b.w	8002a80 <setbit>
 80011b8:	240092b5 	.word	0x240092b5

080011bc <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 80011bc:	2104      	movs	r1, #4
 80011be:	4801      	ldr	r0, [pc, #4]	; (80011c4 <vSET_4_E+0x8>)
 80011c0:	f001 bc5e 	b.w	8002a80 <setbit>
 80011c4:	240092b4 	.word	0x240092b4

080011c8 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 80011c8:	2104      	movs	r1, #4
 80011ca:	4801      	ldr	r0, [pc, #4]	; (80011d0 <vSET_4_H+0x8>)
 80011cc:	f001 bc58 	b.w	8002a80 <setbit>
 80011d0:	240092b7 	.word	0x240092b7

080011d4 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 80011d4:	2104      	movs	r1, #4
 80011d6:	4801      	ldr	r0, [pc, #4]	; (80011dc <vSET_4_L+0x8>)
 80011d8:	f001 bc52 	b.w	8002a80 <setbit>
 80011dc:	240092b6 	.word	0x240092b6

080011e0 <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 80011e0:	2104      	movs	r1, #4
 80011e2:	4801      	ldr	r0, [pc, #4]	; (80011e8 <vSET_4_A+0x8>)
 80011e4:	f001 bc4c 	b.w	8002a80 <setbit>
 80011e8:	240092b1 	.word	0x240092b1

080011ec <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 80011ec:	2105      	movs	r1, #5
 80011ee:	4801      	ldr	r0, [pc, #4]	; (80011f4 <vSET_5_B+0x8>)
 80011f0:	f001 bc46 	b.w	8002a80 <setbit>
 80011f4:	240092b3 	.word	0x240092b3

080011f8 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 80011f8:	2105      	movs	r1, #5
 80011fa:	4801      	ldr	r0, [pc, #4]	; (8001200 <vSET_5_C+0x8>)
 80011fc:	f001 bc40 	b.w	8002a80 <setbit>
 8001200:	240092b2 	.word	0x240092b2

08001204 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001204:	2105      	movs	r1, #5
 8001206:	4801      	ldr	r0, [pc, #4]	; (800120c <vSET_5_D+0x8>)
 8001208:	f001 bc3a 	b.w	8002a80 <setbit>
 800120c:	240092b5 	.word	0x240092b5

08001210 <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 8001210:	2105      	movs	r1, #5
 8001212:	4801      	ldr	r0, [pc, #4]	; (8001218 <vSET_5_E+0x8>)
 8001214:	f001 bc34 	b.w	8002a80 <setbit>
 8001218:	240092b4 	.word	0x240092b4

0800121c <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 800121c:	2105      	movs	r1, #5
 800121e:	4801      	ldr	r0, [pc, #4]	; (8001224 <vSET_5_H+0x8>)
 8001220:	f001 bc2e 	b.w	8002a80 <setbit>
 8001224:	240092b7 	.word	0x240092b7

08001228 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001228:	2105      	movs	r1, #5
 800122a:	4801      	ldr	r0, [pc, #4]	; (8001230 <vSET_5_L+0x8>)
 800122c:	f001 bc28 	b.w	8002a80 <setbit>
 8001230:	240092b6 	.word	0x240092b6

08001234 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 8001234:	2105      	movs	r1, #5
 8001236:	4801      	ldr	r0, [pc, #4]	; (800123c <vSET_5_A+0x8>)
 8001238:	f001 bc22 	b.w	8002a80 <setbit>
 800123c:	240092b1 	.word	0x240092b1

08001240 <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 8001240:	2106      	movs	r1, #6
 8001242:	4801      	ldr	r0, [pc, #4]	; (8001248 <vSET_6_B+0x8>)
 8001244:	f001 bc1c 	b.w	8002a80 <setbit>
 8001248:	240092b3 	.word	0x240092b3

0800124c <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 800124c:	2106      	movs	r1, #6
 800124e:	4801      	ldr	r0, [pc, #4]	; (8001254 <vSET_6_C+0x8>)
 8001250:	f001 bc16 	b.w	8002a80 <setbit>
 8001254:	240092b2 	.word	0x240092b2

08001258 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 8001258:	2106      	movs	r1, #6
 800125a:	4801      	ldr	r0, [pc, #4]	; (8001260 <vSET_6_D+0x8>)
 800125c:	f001 bc10 	b.w	8002a80 <setbit>
 8001260:	240092b5 	.word	0x240092b5

08001264 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 8001264:	2106      	movs	r1, #6
 8001266:	4801      	ldr	r0, [pc, #4]	; (800126c <vSET_6_E+0x8>)
 8001268:	f001 bc0a 	b.w	8002a80 <setbit>
 800126c:	240092b4 	.word	0x240092b4

08001270 <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 8001270:	2106      	movs	r1, #6
 8001272:	4801      	ldr	r0, [pc, #4]	; (8001278 <vSET_6_H+0x8>)
 8001274:	f001 bc04 	b.w	8002a80 <setbit>
 8001278:	240092b7 	.word	0x240092b7

0800127c <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 800127c:	2106      	movs	r1, #6
 800127e:	4801      	ldr	r0, [pc, #4]	; (8001284 <vSET_6_L+0x8>)
 8001280:	f001 bbfe 	b.w	8002a80 <setbit>
 8001284:	240092b6 	.word	0x240092b6

08001288 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 8001288:	2106      	movs	r1, #6
 800128a:	4801      	ldr	r0, [pc, #4]	; (8001290 <vSET_6_A+0x8>)
 800128c:	f001 bbf8 	b.w	8002a80 <setbit>
 8001290:	240092b1 	.word	0x240092b1

08001294 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001294:	2107      	movs	r1, #7
 8001296:	4801      	ldr	r0, [pc, #4]	; (800129c <vSET_7_B+0x8>)
 8001298:	f001 bbf2 	b.w	8002a80 <setbit>
 800129c:	240092b3 	.word	0x240092b3

080012a0 <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 80012a0:	2107      	movs	r1, #7
 80012a2:	4801      	ldr	r0, [pc, #4]	; (80012a8 <vSET_7_C+0x8>)
 80012a4:	f001 bbec 	b.w	8002a80 <setbit>
 80012a8:	240092b2 	.word	0x240092b2

080012ac <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 80012ac:	2107      	movs	r1, #7
 80012ae:	4801      	ldr	r0, [pc, #4]	; (80012b4 <vSET_7_D+0x8>)
 80012b0:	f001 bbe6 	b.w	8002a80 <setbit>
 80012b4:	240092b5 	.word	0x240092b5

080012b8 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 80012b8:	2107      	movs	r1, #7
 80012ba:	4801      	ldr	r0, [pc, #4]	; (80012c0 <vSET_7_E+0x8>)
 80012bc:	f001 bbe0 	b.w	8002a80 <setbit>
 80012c0:	240092b4 	.word	0x240092b4

080012c4 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 80012c4:	2107      	movs	r1, #7
 80012c6:	4801      	ldr	r0, [pc, #4]	; (80012cc <vSET_7_H+0x8>)
 80012c8:	f001 bbda 	b.w	8002a80 <setbit>
 80012cc:	240092b7 	.word	0x240092b7

080012d0 <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 80012d0:	2107      	movs	r1, #7
 80012d2:	4801      	ldr	r0, [pc, #4]	; (80012d8 <vSET_7_L+0x8>)
 80012d4:	f001 bbd4 	b.w	8002a80 <setbit>
 80012d8:	240092b6 	.word	0x240092b6

080012dc <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 80012dc:	2107      	movs	r1, #7
 80012de:	4801      	ldr	r0, [pc, #4]	; (80012e4 <vSET_7_A+0x8>)
 80012e0:	f001 bbce 	b.w	8002a80 <setbit>
 80012e4:	240092b1 	.word	0x240092b1

080012e8 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d08      	ldr	r5, [pc, #32]	; (800130c <vJR_NC_r8+0x24>)
 80012ec:	462c      	mov	r4, r5
 80012ee:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 80012f2:	3801      	subs	r0, #1
 80012f4:	b280      	uxth	r0, r0
 80012f6:	f002 f82b 	bl	8003350 <ucGBMemoryRead>
 80012fa:	4629      	mov	r1, r5
 80012fc:	4602      	mov	r2, r0
 80012fe:	4620      	mov	r0, r4
 8001300:	f001 fcbe 	bl	8002c80 <vGBFunctionJR_NC>
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <vJR_NC_r8+0x28>)
 8001306:	7018      	strb	r0, [r3, #0]
 8001308:	bd38      	pop	{r3, r4, r5, pc}
 800130a:	bf00      	nop
 800130c:	240092b0 	.word	0x240092b0
 8001310:	240090ed 	.word	0x240090ed

08001314 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001314:	4901      	ldr	r1, [pc, #4]	; (800131c <vINC_HL+0x8>)
 8001316:	88c8      	ldrh	r0, [r1, #6]
 8001318:	f001 bcbe 	b.w	8002c98 <vMemoryLocationINC>
 800131c:	240092b0 	.word	0x240092b0

08001320 <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 8001320:	4901      	ldr	r1, [pc, #4]	; (8001328 <vDEC_HL+0x8>)
 8001322:	88c8      	ldrh	r0, [r1, #6]
 8001324:	f001 bce2 	b.w	8002cec <vMemoryLocationDEC>
 8001328:	240092b0 	.word	0x240092b0

0800132c <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 800132c:	b508      	push	{r3, lr}
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <vSCF+0x20>)
 8001330:	2106      	movs	r1, #6
 8001332:	f001 fbad 	bl	8002a90 <resetbit>
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <vSCF+0x20>)
 8001338:	2105      	movs	r1, #5
 800133a:	f001 fba9 	bl	8002a90 <resetbit>
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <vSCF+0x20>)
 8001340:	2104      	movs	r1, #4
 8001342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001346:	f001 bb9b 	b.w	8002a80 <setbit>
 800134a:	bf00      	nop
 800134c:	240092b0 	.word	0x240092b0

08001350 <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 8001350:	2100      	movs	r1, #0
 8001352:	4801      	ldr	r0, [pc, #4]	; (8001358 <vRES_0_B+0x8>)
 8001354:	f001 bb9c 	b.w	8002a90 <resetbit>
 8001358:	240092b3 	.word	0x240092b3

0800135c <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 800135c:	2100      	movs	r1, #0
 800135e:	4801      	ldr	r0, [pc, #4]	; (8001364 <vRES_0_C+0x8>)
 8001360:	f001 bb96 	b.w	8002a90 <resetbit>
 8001364:	240092b2 	.word	0x240092b2

08001368 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 8001368:	2100      	movs	r1, #0
 800136a:	4801      	ldr	r0, [pc, #4]	; (8001370 <vRES_0_D+0x8>)
 800136c:	f001 bb90 	b.w	8002a90 <resetbit>
 8001370:	240092b5 	.word	0x240092b5

08001374 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 8001374:	2100      	movs	r1, #0
 8001376:	4801      	ldr	r0, [pc, #4]	; (800137c <vRES_0_E+0x8>)
 8001378:	f001 bb8a 	b.w	8002a90 <resetbit>
 800137c:	240092b4 	.word	0x240092b4

08001380 <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 8001380:	2100      	movs	r1, #0
 8001382:	4801      	ldr	r0, [pc, #4]	; (8001388 <vRES_0_H+0x8>)
 8001384:	f001 bb84 	b.w	8002a90 <resetbit>
 8001388:	240092b7 	.word	0x240092b7

0800138c <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 800138c:	2100      	movs	r1, #0
 800138e:	4801      	ldr	r0, [pc, #4]	; (8001394 <vRES_0_L+0x8>)
 8001390:	f001 bb7e 	b.w	8002a90 <resetbit>
 8001394:	240092b6 	.word	0x240092b6

08001398 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001398:	2100      	movs	r1, #0
 800139a:	4801      	ldr	r0, [pc, #4]	; (80013a0 <vRES_0_A+0x8>)
 800139c:	f001 bb78 	b.w	8002a90 <resetbit>
 80013a0:	240092b1 	.word	0x240092b1

080013a4 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 80013a4:	2101      	movs	r1, #1
 80013a6:	4801      	ldr	r0, [pc, #4]	; (80013ac <vRES_1_B+0x8>)
 80013a8:	f001 bb72 	b.w	8002a90 <resetbit>
 80013ac:	240092b3 	.word	0x240092b3

080013b0 <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 80013b0:	2101      	movs	r1, #1
 80013b2:	4801      	ldr	r0, [pc, #4]	; (80013b8 <vRES_1_C+0x8>)
 80013b4:	f001 bb6c 	b.w	8002a90 <resetbit>
 80013b8:	240092b2 	.word	0x240092b2

080013bc <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 80013bc:	2101      	movs	r1, #1
 80013be:	4801      	ldr	r0, [pc, #4]	; (80013c4 <vRES_1_D+0x8>)
 80013c0:	f001 bb66 	b.w	8002a90 <resetbit>
 80013c4:	240092b5 	.word	0x240092b5

080013c8 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 80013c8:	2101      	movs	r1, #1
 80013ca:	4801      	ldr	r0, [pc, #4]	; (80013d0 <vRES_1_E+0x8>)
 80013cc:	f001 bb60 	b.w	8002a90 <resetbit>
 80013d0:	240092b4 	.word	0x240092b4

080013d4 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 80013d4:	2101      	movs	r1, #1
 80013d6:	4801      	ldr	r0, [pc, #4]	; (80013dc <vRES_1_H+0x8>)
 80013d8:	f001 bb5a 	b.w	8002a90 <resetbit>
 80013dc:	240092b7 	.word	0x240092b7

080013e0 <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 80013e0:	2101      	movs	r1, #1
 80013e2:	4801      	ldr	r0, [pc, #4]	; (80013e8 <vRES_1_L+0x8>)
 80013e4:	f001 bb54 	b.w	8002a90 <resetbit>
 80013e8:	240092b6 	.word	0x240092b6

080013ec <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 80013ec:	2101      	movs	r1, #1
 80013ee:	4801      	ldr	r0, [pc, #4]	; (80013f4 <vRES_1_A+0x8>)
 80013f0:	f001 bb4e 	b.w	8002a90 <resetbit>
 80013f4:	240092b1 	.word	0x240092b1

080013f8 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 80013f8:	2102      	movs	r1, #2
 80013fa:	4801      	ldr	r0, [pc, #4]	; (8001400 <vRES_2_B+0x8>)
 80013fc:	f001 bb48 	b.w	8002a90 <resetbit>
 8001400:	240092b3 	.word	0x240092b3

08001404 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001404:	2102      	movs	r1, #2
 8001406:	4801      	ldr	r0, [pc, #4]	; (800140c <vRES_2_C+0x8>)
 8001408:	f001 bb42 	b.w	8002a90 <resetbit>
 800140c:	240092b2 	.word	0x240092b2

08001410 <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 8001410:	2102      	movs	r1, #2
 8001412:	4801      	ldr	r0, [pc, #4]	; (8001418 <vRES_2_D+0x8>)
 8001414:	f001 bb3c 	b.w	8002a90 <resetbit>
 8001418:	240092b5 	.word	0x240092b5

0800141c <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 800141c:	2102      	movs	r1, #2
 800141e:	4801      	ldr	r0, [pc, #4]	; (8001424 <vRES_2_E+0x8>)
 8001420:	f001 bb36 	b.w	8002a90 <resetbit>
 8001424:	240092b4 	.word	0x240092b4

08001428 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001428:	2102      	movs	r1, #2
 800142a:	4801      	ldr	r0, [pc, #4]	; (8001430 <vRES_2_H+0x8>)
 800142c:	f001 bb30 	b.w	8002a90 <resetbit>
 8001430:	240092b7 	.word	0x240092b7

08001434 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 8001434:	2102      	movs	r1, #2
 8001436:	4801      	ldr	r0, [pc, #4]	; (800143c <vRES_2_L+0x8>)
 8001438:	f001 bb2a 	b.w	8002a90 <resetbit>
 800143c:	240092b6 	.word	0x240092b6

08001440 <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 8001440:	2102      	movs	r1, #2
 8001442:	4801      	ldr	r0, [pc, #4]	; (8001448 <vRES_2_A+0x8>)
 8001444:	f001 bb24 	b.w	8002a90 <resetbit>
 8001448:	240092b1 	.word	0x240092b1

0800144c <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 800144c:	2103      	movs	r1, #3
 800144e:	4801      	ldr	r0, [pc, #4]	; (8001454 <vRES_3_B+0x8>)
 8001450:	f001 bb1e 	b.w	8002a90 <resetbit>
 8001454:	240092b3 	.word	0x240092b3

08001458 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 8001458:	2103      	movs	r1, #3
 800145a:	4801      	ldr	r0, [pc, #4]	; (8001460 <vRES_3_C+0x8>)
 800145c:	f001 bb18 	b.w	8002a90 <resetbit>
 8001460:	240092b2 	.word	0x240092b2

08001464 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 8001464:	2103      	movs	r1, #3
 8001466:	4801      	ldr	r0, [pc, #4]	; (800146c <vRES_3_D+0x8>)
 8001468:	f001 bb12 	b.w	8002a90 <resetbit>
 800146c:	240092b5 	.word	0x240092b5

08001470 <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 8001470:	2103      	movs	r1, #3
 8001472:	4801      	ldr	r0, [pc, #4]	; (8001478 <vRES_3_E+0x8>)
 8001474:	f001 bb0c 	b.w	8002a90 <resetbit>
 8001478:	240092b4 	.word	0x240092b4

0800147c <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 800147c:	2103      	movs	r1, #3
 800147e:	4801      	ldr	r0, [pc, #4]	; (8001484 <vRES_3_H+0x8>)
 8001480:	f001 bb06 	b.w	8002a90 <resetbit>
 8001484:	240092b7 	.word	0x240092b7

08001488 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 8001488:	2103      	movs	r1, #3
 800148a:	4801      	ldr	r0, [pc, #4]	; (8001490 <vRES_3_L+0x8>)
 800148c:	f001 bb00 	b.w	8002a90 <resetbit>
 8001490:	240092b6 	.word	0x240092b6

08001494 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001494:	2103      	movs	r1, #3
 8001496:	4801      	ldr	r0, [pc, #4]	; (800149c <vRES_3_A+0x8>)
 8001498:	f001 bafa 	b.w	8002a90 <resetbit>
 800149c:	240092b1 	.word	0x240092b1

080014a0 <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 80014a0:	2104      	movs	r1, #4
 80014a2:	4801      	ldr	r0, [pc, #4]	; (80014a8 <vRES_4_B+0x8>)
 80014a4:	f001 baf4 	b.w	8002a90 <resetbit>
 80014a8:	240092b3 	.word	0x240092b3

080014ac <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 80014ac:	2104      	movs	r1, #4
 80014ae:	4801      	ldr	r0, [pc, #4]	; (80014b4 <vRES_4_C+0x8>)
 80014b0:	f001 baee 	b.w	8002a90 <resetbit>
 80014b4:	240092b2 	.word	0x240092b2

080014b8 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 80014b8:	2104      	movs	r1, #4
 80014ba:	4801      	ldr	r0, [pc, #4]	; (80014c0 <vRES_4_D+0x8>)
 80014bc:	f001 bae8 	b.w	8002a90 <resetbit>
 80014c0:	240092b5 	.word	0x240092b5

080014c4 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 80014c4:	2104      	movs	r1, #4
 80014c6:	4801      	ldr	r0, [pc, #4]	; (80014cc <vRES_4_E+0x8>)
 80014c8:	f001 bae2 	b.w	8002a90 <resetbit>
 80014cc:	240092b4 	.word	0x240092b4

080014d0 <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 80014d0:	2104      	movs	r1, #4
 80014d2:	4801      	ldr	r0, [pc, #4]	; (80014d8 <vRES_4_H+0x8>)
 80014d4:	f001 badc 	b.w	8002a90 <resetbit>
 80014d8:	240092b7 	.word	0x240092b7

080014dc <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 80014dc:	2104      	movs	r1, #4
 80014de:	4801      	ldr	r0, [pc, #4]	; (80014e4 <vRES_4_L+0x8>)
 80014e0:	f001 bad6 	b.w	8002a90 <resetbit>
 80014e4:	240092b6 	.word	0x240092b6

080014e8 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 80014e8:	2104      	movs	r1, #4
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <vRES_4_A+0x8>)
 80014ec:	f001 bad0 	b.w	8002a90 <resetbit>
 80014f0:	240092b1 	.word	0x240092b1

080014f4 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 80014f4:	2105      	movs	r1, #5
 80014f6:	4801      	ldr	r0, [pc, #4]	; (80014fc <vRES_5_B+0x8>)
 80014f8:	f001 baca 	b.w	8002a90 <resetbit>
 80014fc:	240092b3 	.word	0x240092b3

08001500 <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 8001500:	2105      	movs	r1, #5
 8001502:	4801      	ldr	r0, [pc, #4]	; (8001508 <vRES_5_C+0x8>)
 8001504:	f001 bac4 	b.w	8002a90 <resetbit>
 8001508:	240092b2 	.word	0x240092b2

0800150c <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 800150c:	2105      	movs	r1, #5
 800150e:	4801      	ldr	r0, [pc, #4]	; (8001514 <vRES_5_D+0x8>)
 8001510:	f001 babe 	b.w	8002a90 <resetbit>
 8001514:	240092b5 	.word	0x240092b5

08001518 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001518:	2105      	movs	r1, #5
 800151a:	4801      	ldr	r0, [pc, #4]	; (8001520 <vRES_5_E+0x8>)
 800151c:	f001 bab8 	b.w	8002a90 <resetbit>
 8001520:	240092b4 	.word	0x240092b4

08001524 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001524:	2105      	movs	r1, #5
 8001526:	4801      	ldr	r0, [pc, #4]	; (800152c <vRES_5_H+0x8>)
 8001528:	f001 bab2 	b.w	8002a90 <resetbit>
 800152c:	240092b7 	.word	0x240092b7

08001530 <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 8001530:	2105      	movs	r1, #5
 8001532:	4801      	ldr	r0, [pc, #4]	; (8001538 <vRES_5_L+0x8>)
 8001534:	f001 baac 	b.w	8002a90 <resetbit>
 8001538:	240092b6 	.word	0x240092b6

0800153c <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 800153c:	2105      	movs	r1, #5
 800153e:	4801      	ldr	r0, [pc, #4]	; (8001544 <vRES_5_A+0x8>)
 8001540:	f001 baa6 	b.w	8002a90 <resetbit>
 8001544:	240092b1 	.word	0x240092b1

08001548 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 8001548:	2106      	movs	r1, #6
 800154a:	4801      	ldr	r0, [pc, #4]	; (8001550 <vRES_6_B+0x8>)
 800154c:	f001 baa0 	b.w	8002a90 <resetbit>
 8001550:	240092b3 	.word	0x240092b3

08001554 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 8001554:	2106      	movs	r1, #6
 8001556:	4801      	ldr	r0, [pc, #4]	; (800155c <vRES_6_C+0x8>)
 8001558:	f001 ba9a 	b.w	8002a90 <resetbit>
 800155c:	240092b2 	.word	0x240092b2

08001560 <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 8001560:	2106      	movs	r1, #6
 8001562:	4801      	ldr	r0, [pc, #4]	; (8001568 <vRES_6_D+0x8>)
 8001564:	f001 ba94 	b.w	8002a90 <resetbit>
 8001568:	240092b5 	.word	0x240092b5

0800156c <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 800156c:	2106      	movs	r1, #6
 800156e:	4801      	ldr	r0, [pc, #4]	; (8001574 <vRES_6_E+0x8>)
 8001570:	f001 ba8e 	b.w	8002a90 <resetbit>
 8001574:	240092b4 	.word	0x240092b4

08001578 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 8001578:	2106      	movs	r1, #6
 800157a:	4801      	ldr	r0, [pc, #4]	; (8001580 <vRES_6_H+0x8>)
 800157c:	f001 ba88 	b.w	8002a90 <resetbit>
 8001580:	240092b7 	.word	0x240092b7

08001584 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 8001584:	2106      	movs	r1, #6
 8001586:	4801      	ldr	r0, [pc, #4]	; (800158c <vRES_6_L+0x8>)
 8001588:	f001 ba82 	b.w	8002a90 <resetbit>
 800158c:	240092b6 	.word	0x240092b6

08001590 <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 8001590:	2106      	movs	r1, #6
 8001592:	4801      	ldr	r0, [pc, #4]	; (8001598 <vRES_6_A+0x8>)
 8001594:	f001 ba7c 	b.w	8002a90 <resetbit>
 8001598:	240092b1 	.word	0x240092b1

0800159c <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 800159c:	2107      	movs	r1, #7
 800159e:	4801      	ldr	r0, [pc, #4]	; (80015a4 <vRES_7_B+0x8>)
 80015a0:	f001 ba76 	b.w	8002a90 <resetbit>
 80015a4:	240092b3 	.word	0x240092b3

080015a8 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 80015a8:	2107      	movs	r1, #7
 80015aa:	4801      	ldr	r0, [pc, #4]	; (80015b0 <vRES_7_C+0x8>)
 80015ac:	f001 ba70 	b.w	8002a90 <resetbit>
 80015b0:	240092b2 	.word	0x240092b2

080015b4 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 80015b4:	2107      	movs	r1, #7
 80015b6:	4801      	ldr	r0, [pc, #4]	; (80015bc <vRES_7_D+0x8>)
 80015b8:	f001 ba6a 	b.w	8002a90 <resetbit>
 80015bc:	240092b5 	.word	0x240092b5

080015c0 <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 80015c0:	2107      	movs	r1, #7
 80015c2:	4801      	ldr	r0, [pc, #4]	; (80015c8 <vRES_7_E+0x8>)
 80015c4:	f001 ba64 	b.w	8002a90 <resetbit>
 80015c8:	240092b4 	.word	0x240092b4

080015cc <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 80015cc:	2107      	movs	r1, #7
 80015ce:	4801      	ldr	r0, [pc, #4]	; (80015d4 <vRES_7_H+0x8>)
 80015d0:	f001 ba5e 	b.w	8002a90 <resetbit>
 80015d4:	240092b7 	.word	0x240092b7

080015d8 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 80015d8:	2107      	movs	r1, #7
 80015da:	4801      	ldr	r0, [pc, #4]	; (80015e0 <vRES_7_L+0x8>)
 80015dc:	f001 ba58 	b.w	8002a90 <resetbit>
 80015e0:	240092b6 	.word	0x240092b6

080015e4 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 80015e4:	2107      	movs	r1, #7
 80015e6:	4801      	ldr	r0, [pc, #4]	; (80015ec <vRES_7_A+0x8>)
 80015e8:	f001 ba52 	b.w	8002a90 <resetbit>
 80015ec:	240092b1 	.word	0x240092b1

080015f0 <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	4d08      	ldr	r5, [pc, #32]	; (8001614 <vJR_C_r8+0x24>)
 80015f4:	462c      	mov	r4, r5
 80015f6:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 80015fa:	3801      	subs	r0, #1
 80015fc:	b280      	uxth	r0, r0
 80015fe:	f001 fea7 	bl	8003350 <ucGBMemoryRead>
 8001602:	4629      	mov	r1, r5
 8001604:	4602      	mov	r2, r0
 8001606:	4620      	mov	r0, r4
 8001608:	f001 fb98 	bl	8002d3c <vGBFunctionJR_C>
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <vJR_C_r8+0x28>)
 800160e:	7018      	strb	r0, [r3, #0]
 8001610:	bd38      	pop	{r3, r4, r5, pc}
 8001612:	bf00      	nop
 8001614:	240092b0 	.word	0x240092b0
 8001618:	240090ed 	.word	0x240090ed

0800161c <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 800161c:	4902      	ldr	r1, [pc, #8]	; (8001628 <vADD_A_B+0xc>)
 800161e:	78ca      	ldrb	r2, [r1, #3]
 8001620:	1c48      	adds	r0, r1, #1
 8001622:	f001 bb97 	b.w	8002d54 <vGBFunctionADD>
 8001626:	bf00      	nop
 8001628:	240092b0 	.word	0x240092b0

0800162c <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 800162c:	4902      	ldr	r1, [pc, #8]	; (8001638 <vADD_A_C+0xc>)
 800162e:	788a      	ldrb	r2, [r1, #2]
 8001630:	1c48      	adds	r0, r1, #1
 8001632:	f001 bb8f 	b.w	8002d54 <vGBFunctionADD>
 8001636:	bf00      	nop
 8001638:	240092b0 	.word	0x240092b0

0800163c <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 800163c:	4902      	ldr	r1, [pc, #8]	; (8001648 <vADD_A_D+0xc>)
 800163e:	794a      	ldrb	r2, [r1, #5]
 8001640:	1c48      	adds	r0, r1, #1
 8001642:	f001 bb87 	b.w	8002d54 <vGBFunctionADD>
 8001646:	bf00      	nop
 8001648:	240092b0 	.word	0x240092b0

0800164c <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 800164c:	4902      	ldr	r1, [pc, #8]	; (8001658 <vADD_A_E+0xc>)
 800164e:	790a      	ldrb	r2, [r1, #4]
 8001650:	1c48      	adds	r0, r1, #1
 8001652:	f001 bb7f 	b.w	8002d54 <vGBFunctionADD>
 8001656:	bf00      	nop
 8001658:	240092b0 	.word	0x240092b0

0800165c <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 800165c:	4902      	ldr	r1, [pc, #8]	; (8001668 <vADD_A_H+0xc>)
 800165e:	79ca      	ldrb	r2, [r1, #7]
 8001660:	1c48      	adds	r0, r1, #1
 8001662:	f001 bb77 	b.w	8002d54 <vGBFunctionADD>
 8001666:	bf00      	nop
 8001668:	240092b0 	.word	0x240092b0

0800166c <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 800166c:	4902      	ldr	r1, [pc, #8]	; (8001678 <vADD_A_L+0xc>)
 800166e:	798a      	ldrb	r2, [r1, #6]
 8001670:	1c48      	adds	r0, r1, #1
 8001672:	f001 bb6f 	b.w	8002d54 <vGBFunctionADD>
 8001676:	bf00      	nop
 8001678:	240092b0 	.word	0x240092b0

0800167c <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800167c:	b510      	push	{r4, lr}
 800167e:	4c05      	ldr	r4, [pc, #20]	; (8001694 <vADD_A_HL+0x18>)
 8001680:	88e0      	ldrh	r0, [r4, #6]
 8001682:	f001 fe65 	bl	8003350 <ucGBMemoryRead>
 8001686:	4621      	mov	r1, r4
 8001688:	4602      	mov	r2, r0
 800168a:	1c60      	adds	r0, r4, #1
 800168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001690:	f001 bb60 	b.w	8002d54 <vGBFunctionADD>
 8001694:	240092b0 	.word	0x240092b0

08001698 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <vADD_A_A+0xc>)
 800169a:	4601      	mov	r1, r0
 800169c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016a0:	f001 bb58 	b.w	8002d54 <vGBFunctionADD>
 80016a4:	240092b0 	.word	0x240092b0

080016a8 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016a8:	b510      	push	{r4, lr}
 80016aa:	4c06      	ldr	r4, [pc, #24]	; (80016c4 <vADD_A_d8+0x1c>)
 80016ac:	8960      	ldrh	r0, [r4, #10]
 80016ae:	3801      	subs	r0, #1
 80016b0:	b280      	uxth	r0, r0
 80016b2:	f001 fe4d 	bl	8003350 <ucGBMemoryRead>
 80016b6:	4621      	mov	r1, r4
 80016b8:	4602      	mov	r2, r0
 80016ba:	1c60      	adds	r0, r4, #1
 80016bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c0:	f001 bb48 	b.w	8002d54 <vGBFunctionADD>
 80016c4:	240092b0 	.word	0x240092b0

080016c8 <vADC_A_d8>:
 80016c8:	f7ff bfee 	b.w	80016a8 <vADD_A_d8>

080016cc <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 80016cc:	4902      	ldr	r1, [pc, #8]	; (80016d8 <vADC_A_B+0xc>)
 80016ce:	78ca      	ldrb	r2, [r1, #3]
 80016d0:	1c48      	adds	r0, r1, #1
 80016d2:	f001 bb63 	b.w	8002d9c <vGBFunctionADC>
 80016d6:	bf00      	nop
 80016d8:	240092b0 	.word	0x240092b0

080016dc <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 80016dc:	4902      	ldr	r1, [pc, #8]	; (80016e8 <vADC_A_C+0xc>)
 80016de:	788a      	ldrb	r2, [r1, #2]
 80016e0:	1c48      	adds	r0, r1, #1
 80016e2:	f001 bb5b 	b.w	8002d9c <vGBFunctionADC>
 80016e6:	bf00      	nop
 80016e8:	240092b0 	.word	0x240092b0

080016ec <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 80016ec:	4902      	ldr	r1, [pc, #8]	; (80016f8 <vADC_A_D+0xc>)
 80016ee:	794a      	ldrb	r2, [r1, #5]
 80016f0:	1c48      	adds	r0, r1, #1
 80016f2:	f001 bb53 	b.w	8002d9c <vGBFunctionADC>
 80016f6:	bf00      	nop
 80016f8:	240092b0 	.word	0x240092b0

080016fc <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 80016fc:	4902      	ldr	r1, [pc, #8]	; (8001708 <vADC_A_E+0xc>)
 80016fe:	790a      	ldrb	r2, [r1, #4]
 8001700:	1c48      	adds	r0, r1, #1
 8001702:	f001 bb4b 	b.w	8002d9c <vGBFunctionADC>
 8001706:	bf00      	nop
 8001708:	240092b0 	.word	0x240092b0

0800170c <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 800170c:	4902      	ldr	r1, [pc, #8]	; (8001718 <vADC_A_H+0xc>)
 800170e:	79ca      	ldrb	r2, [r1, #7]
 8001710:	1c48      	adds	r0, r1, #1
 8001712:	f001 bb43 	b.w	8002d9c <vGBFunctionADC>
 8001716:	bf00      	nop
 8001718:	240092b0 	.word	0x240092b0

0800171c <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 800171c:	4902      	ldr	r1, [pc, #8]	; (8001728 <vADC_A_L+0xc>)
 800171e:	798a      	ldrb	r2, [r1, #6]
 8001720:	1c48      	adds	r0, r1, #1
 8001722:	f001 bb3b 	b.w	8002d9c <vGBFunctionADC>
 8001726:	bf00      	nop
 8001728:	240092b0 	.word	0x240092b0

0800172c <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800172c:	b510      	push	{r4, lr}
 800172e:	4c05      	ldr	r4, [pc, #20]	; (8001744 <vADC_A_HL+0x18>)
 8001730:	88e0      	ldrh	r0, [r4, #6]
 8001732:	f001 fe0d 	bl	8003350 <ucGBMemoryRead>
 8001736:	4621      	mov	r1, r4
 8001738:	4602      	mov	r2, r0
 800173a:	1c60      	adds	r0, r4, #1
 800173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001740:	f001 bb2c 	b.w	8002d9c <vGBFunctionADC>
 8001744:	240092b0 	.word	0x240092b0

08001748 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <vADC_A_A+0xc>)
 800174a:	4601      	mov	r1, r0
 800174c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001750:	f001 bb24 	b.w	8002d9c <vGBFunctionADC>
 8001754:	240092b0 	.word	0x240092b0

08001758 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 8001758:	4902      	ldr	r1, [pc, #8]	; (8001764 <vSUB_B+0xc>)
 800175a:	78ca      	ldrb	r2, [r1, #3]
 800175c:	1c48      	adds	r0, r1, #1
 800175e:	f001 bb43 	b.w	8002de8 <vGBFunctionSUB>
 8001762:	bf00      	nop
 8001764:	240092b0 	.word	0x240092b0

08001768 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 8001768:	4902      	ldr	r1, [pc, #8]	; (8001774 <vSUB_C+0xc>)
 800176a:	788a      	ldrb	r2, [r1, #2]
 800176c:	1c48      	adds	r0, r1, #1
 800176e:	f001 bb3b 	b.w	8002de8 <vGBFunctionSUB>
 8001772:	bf00      	nop
 8001774:	240092b0 	.word	0x240092b0

08001778 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 8001778:	4902      	ldr	r1, [pc, #8]	; (8001784 <vSUB_D+0xc>)
 800177a:	794a      	ldrb	r2, [r1, #5]
 800177c:	1c48      	adds	r0, r1, #1
 800177e:	f001 bb33 	b.w	8002de8 <vGBFunctionSUB>
 8001782:	bf00      	nop
 8001784:	240092b0 	.word	0x240092b0

08001788 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 8001788:	4902      	ldr	r1, [pc, #8]	; (8001794 <vSUB_E+0xc>)
 800178a:	790a      	ldrb	r2, [r1, #4]
 800178c:	1c48      	adds	r0, r1, #1
 800178e:	f001 bb2b 	b.w	8002de8 <vGBFunctionSUB>
 8001792:	bf00      	nop
 8001794:	240092b0 	.word	0x240092b0

08001798 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001798:	4902      	ldr	r1, [pc, #8]	; (80017a4 <vSUB_H+0xc>)
 800179a:	79ca      	ldrb	r2, [r1, #7]
 800179c:	1c48      	adds	r0, r1, #1
 800179e:	f001 bb23 	b.w	8002de8 <vGBFunctionSUB>
 80017a2:	bf00      	nop
 80017a4:	240092b0 	.word	0x240092b0

080017a8 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 80017a8:	4902      	ldr	r1, [pc, #8]	; (80017b4 <vSUB_L+0xc>)
 80017aa:	798a      	ldrb	r2, [r1, #6]
 80017ac:	1c48      	adds	r0, r1, #1
 80017ae:	f001 bb1b 	b.w	8002de8 <vGBFunctionSUB>
 80017b2:	bf00      	nop
 80017b4:	240092b0 	.word	0x240092b0

080017b8 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017b8:	b510      	push	{r4, lr}
 80017ba:	4c05      	ldr	r4, [pc, #20]	; (80017d0 <vSUB_HL+0x18>)
 80017bc:	88e0      	ldrh	r0, [r4, #6]
 80017be:	f001 fdc7 	bl	8003350 <ucGBMemoryRead>
 80017c2:	4621      	mov	r1, r4
 80017c4:	4602      	mov	r2, r0
 80017c6:	1c60      	adds	r0, r4, #1
 80017c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017cc:	f001 bb0c 	b.w	8002de8 <vGBFunctionSUB>
 80017d0:	240092b0 	.word	0x240092b0

080017d4 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <vSUB_A+0xc>)
 80017d6:	4601      	mov	r1, r0
 80017d8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80017dc:	f001 bb04 	b.w	8002de8 <vGBFunctionSUB>
 80017e0:	240092b0 	.word	0x240092b0

080017e4 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80017e4:	b510      	push	{r4, lr}
 80017e6:	4c06      	ldr	r4, [pc, #24]	; (8001800 <vSUB_d8+0x1c>)
 80017e8:	8960      	ldrh	r0, [r4, #10]
 80017ea:	3801      	subs	r0, #1
 80017ec:	b280      	uxth	r0, r0
 80017ee:	f001 fdaf 	bl	8003350 <ucGBMemoryRead>
 80017f2:	4621      	mov	r1, r4
 80017f4:	4602      	mov	r2, r0
 80017f6:	1c60      	adds	r0, r4, #1
 80017f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017fc:	f001 baf4 	b.w	8002de8 <vGBFunctionSUB>
 8001800:	240092b0 	.word	0x240092b0

08001804 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001804:	4902      	ldr	r1, [pc, #8]	; (8001810 <vSBC_A_B+0xc>)
 8001806:	78ca      	ldrb	r2, [r1, #3]
 8001808:	1c48      	adds	r0, r1, #1
 800180a:	f001 bb23 	b.w	8002e54 <vGBFunctionSBC>
 800180e:	bf00      	nop
 8001810:	240092b0 	.word	0x240092b0

08001814 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001814:	4902      	ldr	r1, [pc, #8]	; (8001820 <vSBC_A_C+0xc>)
 8001816:	788a      	ldrb	r2, [r1, #2]
 8001818:	1c48      	adds	r0, r1, #1
 800181a:	f001 bb1b 	b.w	8002e54 <vGBFunctionSBC>
 800181e:	bf00      	nop
 8001820:	240092b0 	.word	0x240092b0

08001824 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001824:	4902      	ldr	r1, [pc, #8]	; (8001830 <vSBC_A_D+0xc>)
 8001826:	794a      	ldrb	r2, [r1, #5]
 8001828:	1c48      	adds	r0, r1, #1
 800182a:	f001 bb13 	b.w	8002e54 <vGBFunctionSBC>
 800182e:	bf00      	nop
 8001830:	240092b0 	.word	0x240092b0

08001834 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 8001834:	4902      	ldr	r1, [pc, #8]	; (8001840 <vSBC_A_E+0xc>)
 8001836:	790a      	ldrb	r2, [r1, #4]
 8001838:	1c48      	adds	r0, r1, #1
 800183a:	f001 bb0b 	b.w	8002e54 <vGBFunctionSBC>
 800183e:	bf00      	nop
 8001840:	240092b0 	.word	0x240092b0

08001844 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 8001844:	4902      	ldr	r1, [pc, #8]	; (8001850 <vSBC_A_H+0xc>)
 8001846:	79ca      	ldrb	r2, [r1, #7]
 8001848:	1c48      	adds	r0, r1, #1
 800184a:	f001 bb03 	b.w	8002e54 <vGBFunctionSBC>
 800184e:	bf00      	nop
 8001850:	240092b0 	.word	0x240092b0

08001854 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 8001854:	4902      	ldr	r1, [pc, #8]	; (8001860 <vSBC_A_L+0xc>)
 8001856:	798a      	ldrb	r2, [r1, #6]
 8001858:	1c48      	adds	r0, r1, #1
 800185a:	f001 bafb 	b.w	8002e54 <vGBFunctionSBC>
 800185e:	bf00      	nop
 8001860:	240092b0 	.word	0x240092b0

08001864 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001864:	b510      	push	{r4, lr}
 8001866:	4c05      	ldr	r4, [pc, #20]	; (800187c <vSBC_A_HL+0x18>)
 8001868:	88e0      	ldrh	r0, [r4, #6]
 800186a:	f001 fd71 	bl	8003350 <ucGBMemoryRead>
 800186e:	4621      	mov	r1, r4
 8001870:	4602      	mov	r2, r0
 8001872:	1c60      	adds	r0, r4, #1
 8001874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001878:	f001 baec 	b.w	8002e54 <vGBFunctionSBC>
 800187c:	240092b0 	.word	0x240092b0

08001880 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <vSBC_A_A+0xc>)
 8001882:	4601      	mov	r1, r0
 8001884:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001888:	f001 bae4 	b.w	8002e54 <vGBFunctionSBC>
 800188c:	240092b0 	.word	0x240092b0

08001890 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001890:	b510      	push	{r4, lr}
 8001892:	4c06      	ldr	r4, [pc, #24]	; (80018ac <vSBC_A_d8+0x1c>)
 8001894:	8960      	ldrh	r0, [r4, #10]
 8001896:	3801      	subs	r0, #1
 8001898:	b280      	uxth	r0, r0
 800189a:	f001 fd59 	bl	8003350 <ucGBMemoryRead>
 800189e:	4621      	mov	r1, r4
 80018a0:	4602      	mov	r2, r0
 80018a2:	1c60      	adds	r0, r4, #1
 80018a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018a8:	f001 bad4 	b.w	8002e54 <vGBFunctionSBC>
 80018ac:	240092b0 	.word	0x240092b0

080018b0 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 80018b0:	4902      	ldr	r1, [pc, #8]	; (80018bc <vCP_B+0xc>)
 80018b2:	78ca      	ldrb	r2, [r1, #3]
 80018b4:	7848      	ldrb	r0, [r1, #1]
 80018b6:	f001 bb01 	b.w	8002ebc <vGBFunctionCP>
 80018ba:	bf00      	nop
 80018bc:	240092b0 	.word	0x240092b0

080018c0 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 80018c0:	4902      	ldr	r1, [pc, #8]	; (80018cc <vCP_C+0xc>)
 80018c2:	788a      	ldrb	r2, [r1, #2]
 80018c4:	7848      	ldrb	r0, [r1, #1]
 80018c6:	f001 baf9 	b.w	8002ebc <vGBFunctionCP>
 80018ca:	bf00      	nop
 80018cc:	240092b0 	.word	0x240092b0

080018d0 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 80018d0:	4902      	ldr	r1, [pc, #8]	; (80018dc <vCP_D+0xc>)
 80018d2:	794a      	ldrb	r2, [r1, #5]
 80018d4:	7848      	ldrb	r0, [r1, #1]
 80018d6:	f001 baf1 	b.w	8002ebc <vGBFunctionCP>
 80018da:	bf00      	nop
 80018dc:	240092b0 	.word	0x240092b0

080018e0 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 80018e0:	4902      	ldr	r1, [pc, #8]	; (80018ec <vCP_E+0xc>)
 80018e2:	790a      	ldrb	r2, [r1, #4]
 80018e4:	7848      	ldrb	r0, [r1, #1]
 80018e6:	f001 bae9 	b.w	8002ebc <vGBFunctionCP>
 80018ea:	bf00      	nop
 80018ec:	240092b0 	.word	0x240092b0

080018f0 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 80018f0:	4902      	ldr	r1, [pc, #8]	; (80018fc <vCP_H+0xc>)
 80018f2:	79ca      	ldrb	r2, [r1, #7]
 80018f4:	7848      	ldrb	r0, [r1, #1]
 80018f6:	f001 bae1 	b.w	8002ebc <vGBFunctionCP>
 80018fa:	bf00      	nop
 80018fc:	240092b0 	.word	0x240092b0

08001900 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001900:	4902      	ldr	r1, [pc, #8]	; (800190c <vCP_L+0xc>)
 8001902:	798a      	ldrb	r2, [r1, #6]
 8001904:	7848      	ldrb	r0, [r1, #1]
 8001906:	f001 bad9 	b.w	8002ebc <vGBFunctionCP>
 800190a:	bf00      	nop
 800190c:	240092b0 	.word	0x240092b0

08001910 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4c06      	ldr	r4, [pc, #24]	; (800192c <vCP_HL+0x1c>)
 8001914:	7865      	ldrb	r5, [r4, #1]
 8001916:	88e0      	ldrh	r0, [r4, #6]
 8001918:	f001 fd1a 	bl	8003350 <ucGBMemoryRead>
 800191c:	4621      	mov	r1, r4
 800191e:	4602      	mov	r2, r0
 8001920:	4628      	mov	r0, r5
 8001922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001926:	f001 bac9 	b.w	8002ebc <vGBFunctionCP>
 800192a:	bf00      	nop
 800192c:	240092b0 	.word	0x240092b0

08001930 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 8001930:	4902      	ldr	r1, [pc, #8]	; (800193c <vCP_A+0xc>)
 8001932:	784a      	ldrb	r2, [r1, #1]
 8001934:	4610      	mov	r0, r2
 8001936:	f001 bac1 	b.w	8002ebc <vGBFunctionCP>
 800193a:	bf00      	nop
 800193c:	240092b0 	.word	0x240092b0

08001940 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	4c07      	ldr	r4, [pc, #28]	; (8001960 <vCP_d8+0x20>)
 8001944:	8960      	ldrh	r0, [r4, #10]
 8001946:	7865      	ldrb	r5, [r4, #1]
 8001948:	3801      	subs	r0, #1
 800194a:	b280      	uxth	r0, r0
 800194c:	f001 fd00 	bl	8003350 <ucGBMemoryRead>
 8001950:	4621      	mov	r1, r4
 8001952:	4602      	mov	r2, r0
 8001954:	4628      	mov	r0, r5
 8001956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195a:	f001 baaf 	b.w	8002ebc <vGBFunctionCP>
 800195e:	bf00      	nop
 8001960:	240092b0 	.word	0x240092b0

08001964 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 8001964:	4901      	ldr	r1, [pc, #4]	; (800196c <vRET+0x8>)
 8001966:	1e88      	subs	r0, r1, #2
 8001968:	f001 bac6 	b.w	8002ef8 <vGBFunctionRET>
 800196c:	240092ba 	.word	0x240092ba

08001970 <vRETI>:
void vRETI(){         vGBFunctionRET(&reg.SP, &reg.PC); InterruptDisabled = 0;}
 8001970:	4904      	ldr	r1, [pc, #16]	; (8001984 <vRETI+0x14>)
 8001972:	b508      	push	{r3, lr}
 8001974:	1e88      	subs	r0, r1, #2
 8001976:	f001 fabf 	bl	8002ef8 <vGBFunctionRET>
 800197a:	4b03      	ldr	r3, [pc, #12]	; (8001988 <vRETI+0x18>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	bd08      	pop	{r3, pc}
 8001982:	bf00      	nop
 8001984:	240092ba 	.word	0x240092ba
 8001988:	240090ec 	.word	0x240090ec

0800198c <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 800198c:	4901      	ldr	r1, [pc, #4]	; (8001994 <vPOP_BC+0x8>)
 800198e:	1d88      	adds	r0, r1, #6
 8001990:	f001 bac6 	b.w	8002f20 <vGBFunctionPOP>
 8001994:	240092b2 	.word	0x240092b2

08001998 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 8001998:	4901      	ldr	r1, [pc, #4]	; (80019a0 <vPOP_DE+0x8>)
 800199a:	1d08      	adds	r0, r1, #4
 800199c:	f001 bac0 	b.w	8002f20 <vGBFunctionPOP>
 80019a0:	240092b4 	.word	0x240092b4

080019a4 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 80019a4:	4901      	ldr	r1, [pc, #4]	; (80019ac <vPOP_HL+0x8>)
 80019a6:	1c88      	adds	r0, r1, #2
 80019a8:	f001 baba 	b.w	8002f20 <vGBFunctionPOP>
 80019ac:	240092b6 	.word	0x240092b6

080019b0 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 80019b0:	b510      	push	{r4, lr}
 80019b2:	4c05      	ldr	r4, [pc, #20]	; (80019c8 <vPOP_AF+0x18>)
 80019b4:	4621      	mov	r1, r4
 80019b6:	f104 0008 	add.w	r0, r4, #8
 80019ba:	f001 fab1 	bl	8002f20 <vGBFunctionPOP>
 80019be:	8823      	ldrh	r3, [r4, #0]
 80019c0:	f023 030f 	bic.w	r3, r3, #15
 80019c4:	8023      	strh	r3, [r4, #0]
 80019c6:	bd10      	pop	{r4, pc}
 80019c8:	240092b0 	.word	0x240092b0

080019cc <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	4d0d      	ldr	r5, [pc, #52]	; (8001a04 <vJP_NZ_a16+0x38>)
 80019d0:	8968      	ldrh	r0, [r5, #10]
 80019d2:	462c      	mov	r4, r5
 80019d4:	3802      	subs	r0, #2
 80019d6:	b280      	uxth	r0, r0
 80019d8:	f001 fcba 	bl	8003350 <ucGBMemoryRead>
 80019dc:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 80019e0:	4606      	mov	r6, r0
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	b280      	uxth	r0, r0
 80019e6:	f001 fcb3 	bl	8003350 <ucGBMemoryRead>
 80019ea:	4601      	mov	r1, r0
 80019ec:	4630      	mov	r0, r6
 80019ee:	f001 f843 	bl	8002a78 <concat_16bit_bigEndian>
 80019f2:	4629      	mov	r1, r5
 80019f4:	4602      	mov	r2, r0
 80019f6:	4620      	mov	r0, r4
 80019f8:	f001 fa94 	bl	8002f24 <vGBFunctionJP_NZ_a16>
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <vJP_NZ_a16+0x3c>)
 80019fe:	7018      	strb	r0, [r3, #0]
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	240092b0 	.word	0x240092b0
 8001a08:	240090ed 	.word	0x240090ed

08001a0c <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <vCALL_NZ_a16+0x14>)
 8001a0e:	b508      	push	{r3, lr}
 8001a10:	f1a2 0108 	sub.w	r1, r2, #8
 8001a14:	1c90      	adds	r0, r2, #2
 8001a16:	f001 faa1 	bl	8002f5c <vGBFunctionCALL_NZ_a16>
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <vCALL_NZ_a16+0x18>)
 8001a1c:	7018      	strb	r0, [r3, #0]
 8001a1e:	bd08      	pop	{r3, pc}
 8001a20:	240092b8 	.word	0x240092b8
 8001a24:	240090ed 	.word	0x240090ed

08001a28 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001a28:	4901      	ldr	r1, [pc, #4]	; (8001a30 <vPUSH_BC+0x8>)
 8001a2a:	1d88      	adds	r0, r1, #6
 8001a2c:	f001 ba82 	b.w	8002f34 <vGBFunctionPUSH>
 8001a30:	240092b2 	.word	0x240092b2

08001a34 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4c04      	ldr	r4, [pc, #16]	; (8001a48 <vRST_00H+0x14>)
 8001a38:	4621      	mov	r1, r4
 8001a3a:	1ea0      	subs	r0, r4, #2
 8001a3c:	f001 fa7a 	bl	8002f34 <vGBFunctionPUSH>
 8001a40:	3c0a      	subs	r4, #10
 8001a42:	2300      	movs	r3, #0
 8001a44:	8163      	strh	r3, [r4, #10]
 8001a46:	bd10      	pop	{r4, pc}
 8001a48:	240092ba 	.word	0x240092ba

08001a4c <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8001a4c:	490b      	ldr	r1, [pc, #44]	; (8001a7c <vCALL_a16+0x30>)
 8001a4e:	b538      	push	{r3, r4, r5, lr}
 8001a50:	460c      	mov	r4, r1
 8001a52:	1e88      	subs	r0, r1, #2
 8001a54:	f001 fa6e 	bl	8002f34 <vGBFunctionPUSH>
 8001a58:	f834 090a 	ldrh.w	r0, [r4], #-10
 8001a5c:	3802      	subs	r0, #2
 8001a5e:	b280      	uxth	r0, r0
 8001a60:	f001 fc76 	bl	8003350 <ucGBMemoryRead>
 8001a64:	8963      	ldrh	r3, [r4, #10]
 8001a66:	4605      	mov	r5, r0
 8001a68:	1e58      	subs	r0, r3, #1
 8001a6a:	b280      	uxth	r0, r0
 8001a6c:	f001 fc70 	bl	8003350 <ucGBMemoryRead>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4628      	mov	r0, r5
 8001a74:	f001 f800 	bl	8002a78 <concat_16bit_bigEndian>
 8001a78:	8160      	strh	r0, [r4, #10]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	240092ba 	.word	0x240092ba

08001a80 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001a80:	b510      	push	{r4, lr}
 8001a82:	4c04      	ldr	r4, [pc, #16]	; (8001a94 <vRST_08H+0x14>)
 8001a84:	4621      	mov	r1, r4
 8001a86:	1ea0      	subs	r0, r4, #2
 8001a88:	f001 fa54 	bl	8002f34 <vGBFunctionPUSH>
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	8023      	strh	r3, [r4, #0]
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	240092ba 	.word	0x240092ba

08001a98 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a98:	4901      	ldr	r1, [pc, #4]	; (8001aa0 <vPUSH_DE+0x8>)
 8001a9a:	1d08      	adds	r0, r1, #4
 8001a9c:	f001 ba4a 	b.w	8002f34 <vGBFunctionPUSH>
 8001aa0:	240092b4 	.word	0x240092b4

08001aa4 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4c04      	ldr	r4, [pc, #16]	; (8001ab8 <vRST_10H+0x14>)
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1ea0      	subs	r0, r4, #2
 8001aac:	f001 fa42 	bl	8002f34 <vGBFunctionPUSH>
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	240092ba 	.word	0x240092ba

08001abc <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4c04      	ldr	r4, [pc, #16]	; (8001ad0 <vRST_18H+0x14>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1ea0      	subs	r0, r4, #2
 8001ac4:	f001 fa36 	bl	8002f34 <vGBFunctionPUSH>
 8001ac8:	2318      	movs	r3, #24
 8001aca:	8023      	strh	r3, [r4, #0]
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	240092ba 	.word	0x240092ba

08001ad4 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001ad4:	4901      	ldr	r1, [pc, #4]	; (8001adc <vPUSH_HL+0x8>)
 8001ad6:	1c88      	adds	r0, r1, #2
 8001ad8:	f001 ba2c 	b.w	8002f34 <vGBFunctionPUSH>
 8001adc:	240092b6 	.word	0x240092b6

08001ae0 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	4c04      	ldr	r4, [pc, #16]	; (8001af4 <vRST20H+0x14>)
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	1ea0      	subs	r0, r4, #2
 8001ae8:	f001 fa24 	bl	8002f34 <vGBFunctionPUSH>
 8001aec:	2320      	movs	r3, #32
 8001aee:	8023      	strh	r3, [r4, #0]
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	bf00      	nop
 8001af4:	240092ba 	.word	0x240092ba

08001af8 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001af8:	b510      	push	{r4, lr}
 8001afa:	4c04      	ldr	r4, [pc, #16]	; (8001b0c <vRST_28H+0x14>)
 8001afc:	4621      	mov	r1, r4
 8001afe:	1ea0      	subs	r0, r4, #2
 8001b00:	f001 fa18 	bl	8002f34 <vGBFunctionPUSH>
 8001b04:	2328      	movs	r3, #40	; 0x28
 8001b06:	8023      	strh	r3, [r4, #0]
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	240092ba 	.word	0x240092ba

08001b10 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001b10:	4902      	ldr	r1, [pc, #8]	; (8001b1c <vPUSH_AF+0xc>)
 8001b12:	f101 0008 	add.w	r0, r1, #8
 8001b16:	f001 ba0d 	b.w	8002f34 <vGBFunctionPUSH>
 8001b1a:	bf00      	nop
 8001b1c:	240092b0 	.word	0x240092b0

08001b20 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4c04      	ldr	r4, [pc, #16]	; (8001b34 <vRST_30H+0x14>)
 8001b24:	4621      	mov	r1, r4
 8001b26:	1ea0      	subs	r0, r4, #2
 8001b28:	f001 fa04 	bl	8002f34 <vGBFunctionPUSH>
 8001b2c:	2330      	movs	r3, #48	; 0x30
 8001b2e:	8023      	strh	r3, [r4, #0]
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	bf00      	nop
 8001b34:	240092ba 	.word	0x240092ba

08001b38 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4c04      	ldr	r4, [pc, #16]	; (8001b4c <vRST_38H+0x14>)
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	1ea0      	subs	r0, r4, #2
 8001b40:	f001 f9f8 	bl	8002f34 <vGBFunctionPUSH>
 8001b44:	2338      	movs	r3, #56	; 0x38
 8001b46:	8023      	strh	r3, [r4, #0]
 8001b48:	bd10      	pop	{r4, pc}
 8001b4a:	bf00      	nop
 8001b4c:	240092ba 	.word	0x240092ba

08001b50 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	4d0d      	ldr	r5, [pc, #52]	; (8001b88 <vJP_Z_a16+0x38>)
 8001b54:	8968      	ldrh	r0, [r5, #10]
 8001b56:	462c      	mov	r4, r5
 8001b58:	3802      	subs	r0, #2
 8001b5a:	b280      	uxth	r0, r0
 8001b5c:	f001 fbf8 	bl	8003350 <ucGBMemoryRead>
 8001b60:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b64:	4606      	mov	r6, r0
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	b280      	uxth	r0, r0
 8001b6a:	f001 fbf1 	bl	8003350 <ucGBMemoryRead>
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4630      	mov	r0, r6
 8001b72:	f000 ff81 	bl	8002a78 <concat_16bit_bigEndian>
 8001b76:	4629      	mov	r1, r5
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f001 fa0a 	bl	8002f94 <vGBFunctionJP_Z_a16>
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <vJP_Z_a16+0x3c>)
 8001b82:	7018      	strb	r0, [r3, #0]
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	bf00      	nop
 8001b88:	240092b0 	.word	0x240092b0
 8001b8c:	240090ed 	.word	0x240090ed

08001b90 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <vCALL_Z_a16+0x14>)
 8001b92:	b508      	push	{r3, lr}
 8001b94:	f1a2 0108 	sub.w	r1, r2, #8
 8001b98:	1c90      	adds	r0, r2, #2
 8001b9a:	f001 fa03 	bl	8002fa4 <vGBFunctionCALL_Z_a16>
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <vCALL_Z_a16+0x18>)
 8001ba0:	7018      	strb	r0, [r3, #0]
 8001ba2:	bd08      	pop	{r3, pc}
 8001ba4:	240092b8 	.word	0x240092b8
 8001ba8:	240090ed 	.word	0x240090ed

08001bac <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4d0d      	ldr	r5, [pc, #52]	; (8001be4 <vJP_NC_a16+0x38>)
 8001bb0:	8968      	ldrh	r0, [r5, #10]
 8001bb2:	462c      	mov	r4, r5
 8001bb4:	3802      	subs	r0, #2
 8001bb6:	b280      	uxth	r0, r0
 8001bb8:	f001 fbca 	bl	8003350 <ucGBMemoryRead>
 8001bbc:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001bc0:	4606      	mov	r6, r0
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	b280      	uxth	r0, r0
 8001bc6:	f001 fbc3 	bl	8003350 <ucGBMemoryRead>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f000 ff53 	bl	8002a78 <concat_16bit_bigEndian>
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f001 fa00 	bl	8002fdc <vGBFunctionJP_NC_a16>
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <vJP_NC_a16+0x3c>)
 8001bde:	7018      	strb	r0, [r3, #0]
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
 8001be2:	bf00      	nop
 8001be4:	240092b0 	.word	0x240092b0
 8001be8:	240090ed 	.word	0x240090ed

08001bec <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <vCALL_NC_a16+0x14>)
 8001bee:	b508      	push	{r3, lr}
 8001bf0:	f1a2 0108 	sub.w	r1, r2, #8
 8001bf4:	1c90      	adds	r0, r2, #2
 8001bf6:	f001 f9f9 	bl	8002fec <vGBFunctionCALL_NC_a16>
 8001bfa:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <vCALL_NC_a16+0x18>)
 8001bfc:	7018      	strb	r0, [r3, #0]
 8001bfe:	bd08      	pop	{r3, pc}
 8001c00:	240092b8 	.word	0x240092b8
 8001c04:	240090ed 	.word	0x240090ed

08001c08 <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4d0d      	ldr	r5, [pc, #52]	; (8001c40 <vJP_C_a16+0x38>)
 8001c0c:	8968      	ldrh	r0, [r5, #10]
 8001c0e:	462c      	mov	r4, r5
 8001c10:	3802      	subs	r0, #2
 8001c12:	b280      	uxth	r0, r0
 8001c14:	f001 fb9c 	bl	8003350 <ucGBMemoryRead>
 8001c18:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001c1c:	4606      	mov	r6, r0
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	b280      	uxth	r0, r0
 8001c22:	f001 fb95 	bl	8003350 <ucGBMemoryRead>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f000 ff25 	bl	8002a78 <concat_16bit_bigEndian>
 8001c2e:	4629      	mov	r1, r5
 8001c30:	4602      	mov	r2, r0
 8001c32:	4620      	mov	r0, r4
 8001c34:	f001 f9f6 	bl	8003024 <vGBFunctionJP_C_a16>
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <vJP_C_a16+0x3c>)
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	240092b0 	.word	0x240092b0
 8001c44:	240090ed 	.word	0x240090ed

08001c48 <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <vCALL_C_a16+0x14>)
 8001c4a:	b508      	push	{r3, lr}
 8001c4c:	f1a2 0108 	sub.w	r1, r2, #8
 8001c50:	1c90      	adds	r0, r2, #2
 8001c52:	f001 f9ef 	bl	8003034 <vGBFunctionCALL_C_a16>
 8001c56:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <vCALL_C_a16+0x18>)
 8001c58:	7018      	strb	r0, [r3, #0]
 8001c5a:	bd08      	pop	{r3, pc}
 8001c5c:	240092b8 	.word	0x240092b8
 8001c60:	240090ed 	.word	0x240090ed

08001c64 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4c07      	ldr	r4, [pc, #28]	; (8001c84 <vADDs_SP_r8+0x20>)
 8001c68:	8960      	ldrh	r0, [r4, #10]
 8001c6a:	3801      	subs	r0, #1
 8001c6c:	b280      	uxth	r0, r0
 8001c6e:	f001 fb6f 	bl	8003350 <ucGBMemoryRead>
 8001c72:	4621      	mov	r1, r4
 8001c74:	4602      	mov	r2, r0
 8001c76:	f104 0008 	add.w	r0, r4, #8
 8001c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c7e:	f001 b9f5 	b.w	800306c <vGBFunctionADD_SP_r8>
 8001c82:	bf00      	nop
 8001c84:	240092b0 	.word	0x240092b0

08001c88 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4c07      	ldr	r4, [pc, #28]	; (8001ca8 <vLDs_HL_SP_r8+0x20>)
 8001c8c:	8960      	ldrh	r0, [r4, #10]
 8001c8e:	3801      	subs	r0, #1
 8001c90:	b280      	uxth	r0, r0
 8001c92:	f001 fb5d 	bl	8003350 <ucGBMemoryRead>
 8001c96:	4622      	mov	r2, r4
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f104 0108 	add.w	r1, r4, #8
 8001c9e:	1da0      	adds	r0, r4, #6
 8001ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ca4:	f001 ba0a 	b.w	80030bc <vGBFunctionLD_HL_SP_r8>
 8001ca8:	240092b0 	.word	0x240092b0

08001cac <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4c03      	ldr	r4, [pc, #12]	; (8001cbc <vRLC_B+0x10>)
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	78e0      	ldrb	r0, [r4, #3]
 8001cb4:	f001 fa2a 	bl	800310c <ucGBFunctionRLC>
 8001cb8:	70e0      	strb	r0, [r4, #3]
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	240092b0 	.word	0x240092b0

08001cc0 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4c03      	ldr	r4, [pc, #12]	; (8001cd0 <vRLC_C+0x10>)
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	78a0      	ldrb	r0, [r4, #2]
 8001cc8:	f001 fa20 	bl	800310c <ucGBFunctionRLC>
 8001ccc:	70a0      	strb	r0, [r4, #2]
 8001cce:	bd10      	pop	{r4, pc}
 8001cd0:	240092b0 	.word	0x240092b0

08001cd4 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	4c03      	ldr	r4, [pc, #12]	; (8001ce4 <vRLC_D+0x10>)
 8001cd8:	4621      	mov	r1, r4
 8001cda:	7960      	ldrb	r0, [r4, #5]
 8001cdc:	f001 fa16 	bl	800310c <ucGBFunctionRLC>
 8001ce0:	7160      	strb	r0, [r4, #5]
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	240092b0 	.word	0x240092b0

08001ce8 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	4c03      	ldr	r4, [pc, #12]	; (8001cf8 <vRLC_E+0x10>)
 8001cec:	4621      	mov	r1, r4
 8001cee:	7920      	ldrb	r0, [r4, #4]
 8001cf0:	f001 fa0c 	bl	800310c <ucGBFunctionRLC>
 8001cf4:	7120      	strb	r0, [r4, #4]
 8001cf6:	bd10      	pop	{r4, pc}
 8001cf8:	240092b0 	.word	0x240092b0

08001cfc <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4c03      	ldr	r4, [pc, #12]	; (8001d0c <vRLC_H+0x10>)
 8001d00:	4621      	mov	r1, r4
 8001d02:	79e0      	ldrb	r0, [r4, #7]
 8001d04:	f001 fa02 	bl	800310c <ucGBFunctionRLC>
 8001d08:	71e0      	strb	r0, [r4, #7]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	240092b0 	.word	0x240092b0

08001d10 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001d10:	b510      	push	{r4, lr}
 8001d12:	4c03      	ldr	r4, [pc, #12]	; (8001d20 <vRLC_L+0x10>)
 8001d14:	4621      	mov	r1, r4
 8001d16:	79a0      	ldrb	r0, [r4, #6]
 8001d18:	f001 f9f8 	bl	800310c <ucGBFunctionRLC>
 8001d1c:	71a0      	strb	r0, [r4, #6]
 8001d1e:	bd10      	pop	{r4, pc}
 8001d20:	240092b0 	.word	0x240092b0

08001d24 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	4d07      	ldr	r5, [pc, #28]	; (8001d44 <vRLC_HL+0x20>)
 8001d28:	88ec      	ldrh	r4, [r5, #6]
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f001 fb10 	bl	8003350 <ucGBMemoryRead>
 8001d30:	4629      	mov	r1, r5
 8001d32:	f001 f9eb 	bl	800310c <ucGBFunctionRLC>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4620      	mov	r0, r4
 8001d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3e:	f001 baeb 	b.w	8003318 <vGBMemoryWrite>
 8001d42:	bf00      	nop
 8001d44:	240092b0 	.word	0x240092b0

08001d48 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4c03      	ldr	r4, [pc, #12]	; (8001d58 <vRLC_A+0x10>)
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	7860      	ldrb	r0, [r4, #1]
 8001d50:	f001 f9dc 	bl	800310c <ucGBFunctionRLC>
 8001d54:	7060      	strb	r0, [r4, #1]
 8001d56:	bd10      	pop	{r4, pc}
 8001d58:	240092b0 	.word	0x240092b0

08001d5c <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4c03      	ldr	r4, [pc, #12]	; (8001d6c <vRRC_B+0x10>)
 8001d60:	4621      	mov	r1, r4
 8001d62:	78e0      	ldrb	r0, [r4, #3]
 8001d64:	f001 f9ee 	bl	8003144 <ucGBFunctionRRC>
 8001d68:	70e0      	strb	r0, [r4, #3]
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	240092b0 	.word	0x240092b0

08001d70 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4c03      	ldr	r4, [pc, #12]	; (8001d80 <vRRC_C+0x10>)
 8001d74:	4621      	mov	r1, r4
 8001d76:	78a0      	ldrb	r0, [r4, #2]
 8001d78:	f001 f9e4 	bl	8003144 <ucGBFunctionRRC>
 8001d7c:	70a0      	strb	r0, [r4, #2]
 8001d7e:	bd10      	pop	{r4, pc}
 8001d80:	240092b0 	.word	0x240092b0

08001d84 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4c03      	ldr	r4, [pc, #12]	; (8001d94 <vRRC_D+0x10>)
 8001d88:	4621      	mov	r1, r4
 8001d8a:	7960      	ldrb	r0, [r4, #5]
 8001d8c:	f001 f9da 	bl	8003144 <ucGBFunctionRRC>
 8001d90:	7160      	strb	r0, [r4, #5]
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	240092b0 	.word	0x240092b0

08001d98 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4c03      	ldr	r4, [pc, #12]	; (8001da8 <vRRC_E+0x10>)
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	7920      	ldrb	r0, [r4, #4]
 8001da0:	f001 f9d0 	bl	8003144 <ucGBFunctionRRC>
 8001da4:	7120      	strb	r0, [r4, #4]
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	240092b0 	.word	0x240092b0

08001dac <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4c03      	ldr	r4, [pc, #12]	; (8001dbc <vRRC_H+0x10>)
 8001db0:	4621      	mov	r1, r4
 8001db2:	79e0      	ldrb	r0, [r4, #7]
 8001db4:	f001 f9c6 	bl	8003144 <ucGBFunctionRRC>
 8001db8:	71e0      	strb	r0, [r4, #7]
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	240092b0 	.word	0x240092b0

08001dc0 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	4c03      	ldr	r4, [pc, #12]	; (8001dd0 <vRRC_L+0x10>)
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	79a0      	ldrb	r0, [r4, #6]
 8001dc8:	f001 f9bc 	bl	8003144 <ucGBFunctionRRC>
 8001dcc:	71a0      	strb	r0, [r4, #6]
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	240092b0 	.word	0x240092b0

08001dd4 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4d07      	ldr	r5, [pc, #28]	; (8001df4 <vRRC_HL+0x20>)
 8001dd8:	88ec      	ldrh	r4, [r5, #6]
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f001 fab8 	bl	8003350 <ucGBMemoryRead>
 8001de0:	4629      	mov	r1, r5
 8001de2:	f001 f9af 	bl	8003144 <ucGBFunctionRRC>
 8001de6:	4601      	mov	r1, r0
 8001de8:	4620      	mov	r0, r4
 8001dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dee:	f001 ba93 	b.w	8003318 <vGBMemoryWrite>
 8001df2:	bf00      	nop
 8001df4:	240092b0 	.word	0x240092b0

08001df8 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4c03      	ldr	r4, [pc, #12]	; (8001e08 <vRRC_A+0x10>)
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	7860      	ldrb	r0, [r4, #1]
 8001e00:	f001 f9a0 	bl	8003144 <ucGBFunctionRRC>
 8001e04:	7060      	strb	r0, [r4, #1]
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	240092b0 	.word	0x240092b0

08001e0c <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	4c03      	ldr	r4, [pc, #12]	; (8001e1c <vRL_B+0x10>)
 8001e10:	4621      	mov	r1, r4
 8001e12:	78e0      	ldrb	r0, [r4, #3]
 8001e14:	f001 f9b2 	bl	800317c <ucGBFunctionRL>
 8001e18:	70e0      	strb	r0, [r4, #3]
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	240092b0 	.word	0x240092b0

08001e20 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4c03      	ldr	r4, [pc, #12]	; (8001e30 <vRL_C+0x10>)
 8001e24:	4621      	mov	r1, r4
 8001e26:	78a0      	ldrb	r0, [r4, #2]
 8001e28:	f001 f9a8 	bl	800317c <ucGBFunctionRL>
 8001e2c:	70a0      	strb	r0, [r4, #2]
 8001e2e:	bd10      	pop	{r4, pc}
 8001e30:	240092b0 	.word	0x240092b0

08001e34 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001e34:	b510      	push	{r4, lr}
 8001e36:	4c03      	ldr	r4, [pc, #12]	; (8001e44 <vRL_D+0x10>)
 8001e38:	4621      	mov	r1, r4
 8001e3a:	7960      	ldrb	r0, [r4, #5]
 8001e3c:	f001 f99e 	bl	800317c <ucGBFunctionRL>
 8001e40:	7160      	strb	r0, [r4, #5]
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	240092b0 	.word	0x240092b0

08001e48 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	4c03      	ldr	r4, [pc, #12]	; (8001e58 <vRL_E+0x10>)
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	7920      	ldrb	r0, [r4, #4]
 8001e50:	f001 f994 	bl	800317c <ucGBFunctionRL>
 8001e54:	7120      	strb	r0, [r4, #4]
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	240092b0 	.word	0x240092b0

08001e5c <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	4c03      	ldr	r4, [pc, #12]	; (8001e6c <vRL_H+0x10>)
 8001e60:	4621      	mov	r1, r4
 8001e62:	79e0      	ldrb	r0, [r4, #7]
 8001e64:	f001 f98a 	bl	800317c <ucGBFunctionRL>
 8001e68:	71e0      	strb	r0, [r4, #7]
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	240092b0 	.word	0x240092b0

08001e70 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4c03      	ldr	r4, [pc, #12]	; (8001e80 <vRL_L+0x10>)
 8001e74:	4621      	mov	r1, r4
 8001e76:	79a0      	ldrb	r0, [r4, #6]
 8001e78:	f001 f980 	bl	800317c <ucGBFunctionRL>
 8001e7c:	71a0      	strb	r0, [r4, #6]
 8001e7e:	bd10      	pop	{r4, pc}
 8001e80:	240092b0 	.word	0x240092b0

08001e84 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4d07      	ldr	r5, [pc, #28]	; (8001ea4 <vRL_HL+0x20>)
 8001e88:	88ec      	ldrh	r4, [r5, #6]
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f001 fa60 	bl	8003350 <ucGBMemoryRead>
 8001e90:	4629      	mov	r1, r5
 8001e92:	f001 f973 	bl	800317c <ucGBFunctionRL>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4620      	mov	r0, r4
 8001e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e9e:	f001 ba3b 	b.w	8003318 <vGBMemoryWrite>
 8001ea2:	bf00      	nop
 8001ea4:	240092b0 	.word	0x240092b0

08001ea8 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4c03      	ldr	r4, [pc, #12]	; (8001eb8 <vRL_A+0x10>)
 8001eac:	4621      	mov	r1, r4
 8001eae:	7860      	ldrb	r0, [r4, #1]
 8001eb0:	f001 f964 	bl	800317c <ucGBFunctionRL>
 8001eb4:	7060      	strb	r0, [r4, #1]
 8001eb6:	bd10      	pop	{r4, pc}
 8001eb8:	240092b0 	.word	0x240092b0

08001ebc <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	4c03      	ldr	r4, [pc, #12]	; (8001ecc <vRR_B+0x10>)
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	78e0      	ldrb	r0, [r4, #3]
 8001ec4:	f001 f974 	bl	80031b0 <ucGBFunctionRR>
 8001ec8:	70e0      	strb	r0, [r4, #3]
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	240092b0 	.word	0x240092b0

08001ed0 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4c03      	ldr	r4, [pc, #12]	; (8001ee0 <vRR_C+0x10>)
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	78a0      	ldrb	r0, [r4, #2]
 8001ed8:	f001 f96a 	bl	80031b0 <ucGBFunctionRR>
 8001edc:	70a0      	strb	r0, [r4, #2]
 8001ede:	bd10      	pop	{r4, pc}
 8001ee0:	240092b0 	.word	0x240092b0

08001ee4 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4c03      	ldr	r4, [pc, #12]	; (8001ef4 <vRR_D+0x10>)
 8001ee8:	4621      	mov	r1, r4
 8001eea:	7960      	ldrb	r0, [r4, #5]
 8001eec:	f001 f960 	bl	80031b0 <ucGBFunctionRR>
 8001ef0:	7160      	strb	r0, [r4, #5]
 8001ef2:	bd10      	pop	{r4, pc}
 8001ef4:	240092b0 	.word	0x240092b0

08001ef8 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	4c03      	ldr	r4, [pc, #12]	; (8001f08 <vRR_E+0x10>)
 8001efc:	4621      	mov	r1, r4
 8001efe:	7920      	ldrb	r0, [r4, #4]
 8001f00:	f001 f956 	bl	80031b0 <ucGBFunctionRR>
 8001f04:	7120      	strb	r0, [r4, #4]
 8001f06:	bd10      	pop	{r4, pc}
 8001f08:	240092b0 	.word	0x240092b0

08001f0c <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4c03      	ldr	r4, [pc, #12]	; (8001f1c <vRR_H+0x10>)
 8001f10:	4621      	mov	r1, r4
 8001f12:	79e0      	ldrb	r0, [r4, #7]
 8001f14:	f001 f94c 	bl	80031b0 <ucGBFunctionRR>
 8001f18:	71e0      	strb	r0, [r4, #7]
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	240092b0 	.word	0x240092b0

08001f20 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4c03      	ldr	r4, [pc, #12]	; (8001f30 <vRR_L+0x10>)
 8001f24:	4621      	mov	r1, r4
 8001f26:	79a0      	ldrb	r0, [r4, #6]
 8001f28:	f001 f942 	bl	80031b0 <ucGBFunctionRR>
 8001f2c:	71a0      	strb	r0, [r4, #6]
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	240092b0 	.word	0x240092b0

08001f34 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4d07      	ldr	r5, [pc, #28]	; (8001f54 <vRR_HL+0x20>)
 8001f38:	88ec      	ldrh	r4, [r5, #6]
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f001 fa08 	bl	8003350 <ucGBMemoryRead>
 8001f40:	4629      	mov	r1, r5
 8001f42:	f001 f935 	bl	80031b0 <ucGBFunctionRR>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4620      	mov	r0, r4
 8001f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4e:	f001 b9e3 	b.w	8003318 <vGBMemoryWrite>
 8001f52:	bf00      	nop
 8001f54:	240092b0 	.word	0x240092b0

08001f58 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4c03      	ldr	r4, [pc, #12]	; (8001f68 <vRR_A+0x10>)
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	7860      	ldrb	r0, [r4, #1]
 8001f60:	f001 f926 	bl	80031b0 <ucGBFunctionRR>
 8001f64:	7060      	strb	r0, [r4, #1]
 8001f66:	bd10      	pop	{r4, pc}
 8001f68:	240092b0 	.word	0x240092b0

08001f6c <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4c03      	ldr	r4, [pc, #12]	; (8001f7c <vSLA_B+0x10>)
 8001f70:	4621      	mov	r1, r4
 8001f72:	78e0      	ldrb	r0, [r4, #3]
 8001f74:	f001 f938 	bl	80031e8 <ucGBFunctionSLA>
 8001f78:	70e0      	strb	r0, [r4, #3]
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	240092b0 	.word	0x240092b0

08001f80 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4c03      	ldr	r4, [pc, #12]	; (8001f90 <vSLA_C+0x10>)
 8001f84:	4621      	mov	r1, r4
 8001f86:	78a0      	ldrb	r0, [r4, #2]
 8001f88:	f001 f92e 	bl	80031e8 <ucGBFunctionSLA>
 8001f8c:	70a0      	strb	r0, [r4, #2]
 8001f8e:	bd10      	pop	{r4, pc}
 8001f90:	240092b0 	.word	0x240092b0

08001f94 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001f94:	b510      	push	{r4, lr}
 8001f96:	4c03      	ldr	r4, [pc, #12]	; (8001fa4 <vSLA_D+0x10>)
 8001f98:	4621      	mov	r1, r4
 8001f9a:	7960      	ldrb	r0, [r4, #5]
 8001f9c:	f001 f924 	bl	80031e8 <ucGBFunctionSLA>
 8001fa0:	7160      	strb	r0, [r4, #5]
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	240092b0 	.word	0x240092b0

08001fa8 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	4c03      	ldr	r4, [pc, #12]	; (8001fb8 <vSLA_E+0x10>)
 8001fac:	4621      	mov	r1, r4
 8001fae:	7920      	ldrb	r0, [r4, #4]
 8001fb0:	f001 f91a 	bl	80031e8 <ucGBFunctionSLA>
 8001fb4:	7120      	strb	r0, [r4, #4]
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	240092b0 	.word	0x240092b0

08001fbc <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	4c03      	ldr	r4, [pc, #12]	; (8001fcc <vSLA_H+0x10>)
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	79e0      	ldrb	r0, [r4, #7]
 8001fc4:	f001 f910 	bl	80031e8 <ucGBFunctionSLA>
 8001fc8:	71e0      	strb	r0, [r4, #7]
 8001fca:	bd10      	pop	{r4, pc}
 8001fcc:	240092b0 	.word	0x240092b0

08001fd0 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4c03      	ldr	r4, [pc, #12]	; (8001fe0 <vSLA_L+0x10>)
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	79a0      	ldrb	r0, [r4, #6]
 8001fd8:	f001 f906 	bl	80031e8 <ucGBFunctionSLA>
 8001fdc:	71a0      	strb	r0, [r4, #6]
 8001fde:	bd10      	pop	{r4, pc}
 8001fe0:	240092b0 	.word	0x240092b0

08001fe4 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d07      	ldr	r5, [pc, #28]	; (8002004 <vSLA_HL+0x20>)
 8001fe8:	88ec      	ldrh	r4, [r5, #6]
 8001fea:	4620      	mov	r0, r4
 8001fec:	f001 f9b0 	bl	8003350 <ucGBMemoryRead>
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f001 f8f9 	bl	80031e8 <ucGBFunctionSLA>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ffe:	f001 b98b 	b.w	8003318 <vGBMemoryWrite>
 8002002:	bf00      	nop
 8002004:	240092b0 	.word	0x240092b0

08002008 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8002008:	b510      	push	{r4, lr}
 800200a:	4c03      	ldr	r4, [pc, #12]	; (8002018 <vSLA_A+0x10>)
 800200c:	4621      	mov	r1, r4
 800200e:	7860      	ldrb	r0, [r4, #1]
 8002010:	f001 f8ea 	bl	80031e8 <ucGBFunctionSLA>
 8002014:	7060      	strb	r0, [r4, #1]
 8002016:	bd10      	pop	{r4, pc}
 8002018:	240092b0 	.word	0x240092b0

0800201c <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 800201c:	b510      	push	{r4, lr}
 800201e:	4c03      	ldr	r4, [pc, #12]	; (800202c <vSRA_B+0x10>)
 8002020:	4621      	mov	r1, r4
 8002022:	78e0      	ldrb	r0, [r4, #3]
 8002024:	f001 f8f8 	bl	8003218 <ucGBFunctionSRA>
 8002028:	70e0      	strb	r0, [r4, #3]
 800202a:	bd10      	pop	{r4, pc}
 800202c:	240092b0 	.word	0x240092b0

08002030 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8002030:	b510      	push	{r4, lr}
 8002032:	4c03      	ldr	r4, [pc, #12]	; (8002040 <vSRA_C+0x10>)
 8002034:	4621      	mov	r1, r4
 8002036:	78a0      	ldrb	r0, [r4, #2]
 8002038:	f001 f8ee 	bl	8003218 <ucGBFunctionSRA>
 800203c:	70a0      	strb	r0, [r4, #2]
 800203e:	bd10      	pop	{r4, pc}
 8002040:	240092b0 	.word	0x240092b0

08002044 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8002044:	b510      	push	{r4, lr}
 8002046:	4c03      	ldr	r4, [pc, #12]	; (8002054 <vSRA_D+0x10>)
 8002048:	4621      	mov	r1, r4
 800204a:	7960      	ldrb	r0, [r4, #5]
 800204c:	f001 f8e4 	bl	8003218 <ucGBFunctionSRA>
 8002050:	7160      	strb	r0, [r4, #5]
 8002052:	bd10      	pop	{r4, pc}
 8002054:	240092b0 	.word	0x240092b0

08002058 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8002058:	b510      	push	{r4, lr}
 800205a:	4c03      	ldr	r4, [pc, #12]	; (8002068 <vSRA_E+0x10>)
 800205c:	4621      	mov	r1, r4
 800205e:	7920      	ldrb	r0, [r4, #4]
 8002060:	f001 f8da 	bl	8003218 <ucGBFunctionSRA>
 8002064:	7120      	strb	r0, [r4, #4]
 8002066:	bd10      	pop	{r4, pc}
 8002068:	240092b0 	.word	0x240092b0

0800206c <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 800206c:	b510      	push	{r4, lr}
 800206e:	4c03      	ldr	r4, [pc, #12]	; (800207c <vSRA_H+0x10>)
 8002070:	4621      	mov	r1, r4
 8002072:	79e0      	ldrb	r0, [r4, #7]
 8002074:	f001 f8d0 	bl	8003218 <ucGBFunctionSRA>
 8002078:	71e0      	strb	r0, [r4, #7]
 800207a:	bd10      	pop	{r4, pc}
 800207c:	240092b0 	.word	0x240092b0

08002080 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8002080:	b510      	push	{r4, lr}
 8002082:	4c03      	ldr	r4, [pc, #12]	; (8002090 <vSRA_L+0x10>)
 8002084:	4621      	mov	r1, r4
 8002086:	79a0      	ldrb	r0, [r4, #6]
 8002088:	f001 f8c6 	bl	8003218 <ucGBFunctionSRA>
 800208c:	71a0      	strb	r0, [r4, #6]
 800208e:	bd10      	pop	{r4, pc}
 8002090:	240092b0 	.word	0x240092b0

08002094 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4d07      	ldr	r5, [pc, #28]	; (80020b4 <vSRA_HL+0x20>)
 8002098:	88ec      	ldrh	r4, [r5, #6]
 800209a:	4620      	mov	r0, r4
 800209c:	f001 f958 	bl	8003350 <ucGBMemoryRead>
 80020a0:	4629      	mov	r1, r5
 80020a2:	f001 f8b9 	bl	8003218 <ucGBFunctionSRA>
 80020a6:	4601      	mov	r1, r0
 80020a8:	4620      	mov	r0, r4
 80020aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ae:	f001 b933 	b.w	8003318 <vGBMemoryWrite>
 80020b2:	bf00      	nop
 80020b4:	240092b0 	.word	0x240092b0

080020b8 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4c03      	ldr	r4, [pc, #12]	; (80020c8 <vSRA_A+0x10>)
 80020bc:	4621      	mov	r1, r4
 80020be:	7860      	ldrb	r0, [r4, #1]
 80020c0:	f001 f8aa 	bl	8003218 <ucGBFunctionSRA>
 80020c4:	7060      	strb	r0, [r4, #1]
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	240092b0 	.word	0x240092b0

080020cc <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 80020cc:	b510      	push	{r4, lr}
 80020ce:	4c03      	ldr	r4, [pc, #12]	; (80020dc <vSWAP_B+0x10>)
 80020d0:	4621      	mov	r1, r4
 80020d2:	78e0      	ldrb	r0, [r4, #3]
 80020d4:	f001 f8ba 	bl	800324c <ucGBFunctionSWAP>
 80020d8:	70e0      	strb	r0, [r4, #3]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	240092b0 	.word	0x240092b0

080020e0 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4c03      	ldr	r4, [pc, #12]	; (80020f0 <vSWAP_C+0x10>)
 80020e4:	4621      	mov	r1, r4
 80020e6:	78a0      	ldrb	r0, [r4, #2]
 80020e8:	f001 f8b0 	bl	800324c <ucGBFunctionSWAP>
 80020ec:	70a0      	strb	r0, [r4, #2]
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	240092b0 	.word	0x240092b0

080020f4 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4c03      	ldr	r4, [pc, #12]	; (8002104 <vSWAP_D+0x10>)
 80020f8:	4621      	mov	r1, r4
 80020fa:	7960      	ldrb	r0, [r4, #5]
 80020fc:	f001 f8a6 	bl	800324c <ucGBFunctionSWAP>
 8002100:	7160      	strb	r0, [r4, #5]
 8002102:	bd10      	pop	{r4, pc}
 8002104:	240092b0 	.word	0x240092b0

08002108 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002108:	b510      	push	{r4, lr}
 800210a:	4c03      	ldr	r4, [pc, #12]	; (8002118 <vSWAP_E+0x10>)
 800210c:	4621      	mov	r1, r4
 800210e:	7920      	ldrb	r0, [r4, #4]
 8002110:	f001 f89c 	bl	800324c <ucGBFunctionSWAP>
 8002114:	7120      	strb	r0, [r4, #4]
 8002116:	bd10      	pop	{r4, pc}
 8002118:	240092b0 	.word	0x240092b0

0800211c <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 800211c:	b510      	push	{r4, lr}
 800211e:	4c03      	ldr	r4, [pc, #12]	; (800212c <vSWAP_H+0x10>)
 8002120:	4621      	mov	r1, r4
 8002122:	79e0      	ldrb	r0, [r4, #7]
 8002124:	f001 f892 	bl	800324c <ucGBFunctionSWAP>
 8002128:	71e0      	strb	r0, [r4, #7]
 800212a:	bd10      	pop	{r4, pc}
 800212c:	240092b0 	.word	0x240092b0

08002130 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002130:	b510      	push	{r4, lr}
 8002132:	4c03      	ldr	r4, [pc, #12]	; (8002140 <vSWAP_L+0x10>)
 8002134:	4621      	mov	r1, r4
 8002136:	79a0      	ldrb	r0, [r4, #6]
 8002138:	f001 f888 	bl	800324c <ucGBFunctionSWAP>
 800213c:	71a0      	strb	r0, [r4, #6]
 800213e:	bd10      	pop	{r4, pc}
 8002140:	240092b0 	.word	0x240092b0

08002144 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4d07      	ldr	r5, [pc, #28]	; (8002164 <vSWAP_HL+0x20>)
 8002148:	88ec      	ldrh	r4, [r5, #6]
 800214a:	4620      	mov	r0, r4
 800214c:	f001 f900 	bl	8003350 <ucGBMemoryRead>
 8002150:	4629      	mov	r1, r5
 8002152:	f001 f87b 	bl	800324c <ucGBFunctionSWAP>
 8002156:	4601      	mov	r1, r0
 8002158:	4620      	mov	r0, r4
 800215a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800215e:	f001 b8db 	b.w	8003318 <vGBMemoryWrite>
 8002162:	bf00      	nop
 8002164:	240092b0 	.word	0x240092b0

08002168 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 8002168:	b510      	push	{r4, lr}
 800216a:	4c03      	ldr	r4, [pc, #12]	; (8002178 <vSWAP_A+0x10>)
 800216c:	4621      	mov	r1, r4
 800216e:	7860      	ldrb	r0, [r4, #1]
 8002170:	f001 f86c 	bl	800324c <ucGBFunctionSWAP>
 8002174:	7060      	strb	r0, [r4, #1]
 8002176:	bd10      	pop	{r4, pc}
 8002178:	240092b0 	.word	0x240092b0

0800217c <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 800217c:	b510      	push	{r4, lr}
 800217e:	4c03      	ldr	r4, [pc, #12]	; (800218c <vSRL_B+0x10>)
 8002180:	4621      	mov	r1, r4
 8002182:	78e0      	ldrb	r0, [r4, #3]
 8002184:	f001 f878 	bl	8003278 <ucGBFunctionSRL>
 8002188:	70e0      	strb	r0, [r4, #3]
 800218a:	bd10      	pop	{r4, pc}
 800218c:	240092b0 	.word	0x240092b0

08002190 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 8002190:	b510      	push	{r4, lr}
 8002192:	4c03      	ldr	r4, [pc, #12]	; (80021a0 <vSRL_C+0x10>)
 8002194:	4621      	mov	r1, r4
 8002196:	78a0      	ldrb	r0, [r4, #2]
 8002198:	f001 f86e 	bl	8003278 <ucGBFunctionSRL>
 800219c:	70a0      	strb	r0, [r4, #2]
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	240092b0 	.word	0x240092b0

080021a4 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 80021a4:	b510      	push	{r4, lr}
 80021a6:	4c03      	ldr	r4, [pc, #12]	; (80021b4 <vSRL_D+0x10>)
 80021a8:	4621      	mov	r1, r4
 80021aa:	7960      	ldrb	r0, [r4, #5]
 80021ac:	f001 f864 	bl	8003278 <ucGBFunctionSRL>
 80021b0:	7160      	strb	r0, [r4, #5]
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	240092b0 	.word	0x240092b0

080021b8 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4c03      	ldr	r4, [pc, #12]	; (80021c8 <vSRL_E+0x10>)
 80021bc:	4621      	mov	r1, r4
 80021be:	7920      	ldrb	r0, [r4, #4]
 80021c0:	f001 f85a 	bl	8003278 <ucGBFunctionSRL>
 80021c4:	7120      	strb	r0, [r4, #4]
 80021c6:	bd10      	pop	{r4, pc}
 80021c8:	240092b0 	.word	0x240092b0

080021cc <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 80021cc:	b510      	push	{r4, lr}
 80021ce:	4c03      	ldr	r4, [pc, #12]	; (80021dc <vSRL_H+0x10>)
 80021d0:	4621      	mov	r1, r4
 80021d2:	79e0      	ldrb	r0, [r4, #7]
 80021d4:	f001 f850 	bl	8003278 <ucGBFunctionSRL>
 80021d8:	71e0      	strb	r0, [r4, #7]
 80021da:	bd10      	pop	{r4, pc}
 80021dc:	240092b0 	.word	0x240092b0

080021e0 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 80021e0:	b510      	push	{r4, lr}
 80021e2:	4c03      	ldr	r4, [pc, #12]	; (80021f0 <vSRL_L+0x10>)
 80021e4:	4621      	mov	r1, r4
 80021e6:	79a0      	ldrb	r0, [r4, #6]
 80021e8:	f001 f846 	bl	8003278 <ucGBFunctionSRL>
 80021ec:	71a0      	strb	r0, [r4, #6]
 80021ee:	bd10      	pop	{r4, pc}
 80021f0:	240092b0 	.word	0x240092b0

080021f4 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d07      	ldr	r5, [pc, #28]	; (8002214 <vSRL_HL+0x20>)
 80021f8:	88ec      	ldrh	r4, [r5, #6]
 80021fa:	4620      	mov	r0, r4
 80021fc:	f001 f8a8 	bl	8003350 <ucGBMemoryRead>
 8002200:	4629      	mov	r1, r5
 8002202:	f001 f839 	bl	8003278 <ucGBFunctionSRL>
 8002206:	4601      	mov	r1, r0
 8002208:	4620      	mov	r0, r4
 800220a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220e:	f001 b883 	b.w	8003318 <vGBMemoryWrite>
 8002212:	bf00      	nop
 8002214:	240092b0 	.word	0x240092b0

08002218 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002218:	b510      	push	{r4, lr}
 800221a:	4c03      	ldr	r4, [pc, #12]	; (8002228 <vSRL_A+0x10>)
 800221c:	4621      	mov	r1, r4
 800221e:	7860      	ldrb	r0, [r4, #1]
 8002220:	f001 f82a 	bl	8003278 <ucGBFunctionSRL>
 8002224:	7060      	strb	r0, [r4, #1]
 8002226:	bd10      	pop	{r4, pc}
 8002228:	240092b0 	.word	0x240092b0

0800222c <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <vBIT_0_B+0xc>)
 800222e:	2100      	movs	r1, #0
 8002230:	78d0      	ldrb	r0, [r2, #3]
 8002232:	f001 b835 	b.w	80032a0 <vGBFunctionBIT>
 8002236:	bf00      	nop
 8002238:	240092b0 	.word	0x240092b0

0800223c <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <vBIT_0_C+0xc>)
 800223e:	2100      	movs	r1, #0
 8002240:	7890      	ldrb	r0, [r2, #2]
 8002242:	f001 b82d 	b.w	80032a0 <vGBFunctionBIT>
 8002246:	bf00      	nop
 8002248:	240092b0 	.word	0x240092b0

0800224c <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <vBIT_0_D+0xc>)
 800224e:	2100      	movs	r1, #0
 8002250:	7950      	ldrb	r0, [r2, #5]
 8002252:	f001 b825 	b.w	80032a0 <vGBFunctionBIT>
 8002256:	bf00      	nop
 8002258:	240092b0 	.word	0x240092b0

0800225c <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_0_E+0xc>)
 800225e:	2100      	movs	r1, #0
 8002260:	7910      	ldrb	r0, [r2, #4]
 8002262:	f001 b81d 	b.w	80032a0 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	240092b0 	.word	0x240092b0

0800226c <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_0_H+0xc>)
 800226e:	2100      	movs	r1, #0
 8002270:	79d0      	ldrb	r0, [r2, #7]
 8002272:	f001 b815 	b.w	80032a0 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	240092b0 	.word	0x240092b0

0800227c <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_0_L+0xc>)
 800227e:	2100      	movs	r1, #0
 8002280:	7990      	ldrb	r0, [r2, #6]
 8002282:	f001 b80d 	b.w	80032a0 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	240092b0 	.word	0x240092b0

0800228c <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 800228c:	b510      	push	{r4, lr}
 800228e:	4c05      	ldr	r4, [pc, #20]	; (80022a4 <vBIT_0_HL+0x18>)
 8002290:	88e0      	ldrh	r0, [r4, #6]
 8002292:	f001 f85d 	bl	8003350 <ucGBMemoryRead>
 8002296:	4622      	mov	r2, r4
 8002298:	2100      	movs	r1, #0
 800229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800229e:	f000 bfff 	b.w	80032a0 <vGBFunctionBIT>
 80022a2:	bf00      	nop
 80022a4:	240092b0 	.word	0x240092b0

080022a8 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 80022a8:	4a02      	ldr	r2, [pc, #8]	; (80022b4 <vBIT_0_A+0xc>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	7850      	ldrb	r0, [r2, #1]
 80022ae:	f000 bff7 	b.w	80032a0 <vGBFunctionBIT>
 80022b2:	bf00      	nop
 80022b4:	240092b0 	.word	0x240092b0

080022b8 <vBIT_1_A>:
 80022b8:	f7ff bff6 	b.w	80022a8 <vBIT_0_A>

080022bc <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 80022bc:	4a02      	ldr	r2, [pc, #8]	; (80022c8 <vBIT_1_B+0xc>)
 80022be:	2101      	movs	r1, #1
 80022c0:	78d0      	ldrb	r0, [r2, #3]
 80022c2:	f000 bfed 	b.w	80032a0 <vGBFunctionBIT>
 80022c6:	bf00      	nop
 80022c8:	240092b0 	.word	0x240092b0

080022cc <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 80022cc:	4a02      	ldr	r2, [pc, #8]	; (80022d8 <vBIT_1_C+0xc>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	7890      	ldrb	r0, [r2, #2]
 80022d2:	f000 bfe5 	b.w	80032a0 <vGBFunctionBIT>
 80022d6:	bf00      	nop
 80022d8:	240092b0 	.word	0x240092b0

080022dc <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 80022dc:	4a02      	ldr	r2, [pc, #8]	; (80022e8 <vBIT_1_D+0xc>)
 80022de:	2101      	movs	r1, #1
 80022e0:	7950      	ldrb	r0, [r2, #5]
 80022e2:	f000 bfdd 	b.w	80032a0 <vGBFunctionBIT>
 80022e6:	bf00      	nop
 80022e8:	240092b0 	.word	0x240092b0

080022ec <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 80022ec:	4a02      	ldr	r2, [pc, #8]	; (80022f8 <vBIT_1_E+0xc>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	7910      	ldrb	r0, [r2, #4]
 80022f2:	f000 bfd5 	b.w	80032a0 <vGBFunctionBIT>
 80022f6:	bf00      	nop
 80022f8:	240092b0 	.word	0x240092b0

080022fc <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <vBIT_1_H+0xc>)
 80022fe:	2101      	movs	r1, #1
 8002300:	79d0      	ldrb	r0, [r2, #7]
 8002302:	f000 bfcd 	b.w	80032a0 <vGBFunctionBIT>
 8002306:	bf00      	nop
 8002308:	240092b0 	.word	0x240092b0

0800230c <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <vBIT_1_L+0xc>)
 800230e:	2101      	movs	r1, #1
 8002310:	7990      	ldrb	r0, [r2, #6]
 8002312:	f000 bfc5 	b.w	80032a0 <vGBFunctionBIT>
 8002316:	bf00      	nop
 8002318:	240092b0 	.word	0x240092b0

0800231c <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 800231c:	b510      	push	{r4, lr}
 800231e:	4c05      	ldr	r4, [pc, #20]	; (8002334 <vBIT_1_HL+0x18>)
 8002320:	88e0      	ldrh	r0, [r4, #6]
 8002322:	f001 f815 	bl	8003350 <ucGBMemoryRead>
 8002326:	4622      	mov	r2, r4
 8002328:	2101      	movs	r1, #1
 800232a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232e:	f000 bfb7 	b.w	80032a0 <vGBFunctionBIT>
 8002332:	bf00      	nop
 8002334:	240092b0 	.word	0x240092b0

08002338 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 8002338:	4a02      	ldr	r2, [pc, #8]	; (8002344 <vBIT_2_B+0xc>)
 800233a:	2102      	movs	r1, #2
 800233c:	78d0      	ldrb	r0, [r2, #3]
 800233e:	f000 bfaf 	b.w	80032a0 <vGBFunctionBIT>
 8002342:	bf00      	nop
 8002344:	240092b0 	.word	0x240092b0

08002348 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 8002348:	4a02      	ldr	r2, [pc, #8]	; (8002354 <vBIT_2_C+0xc>)
 800234a:	2102      	movs	r1, #2
 800234c:	7890      	ldrb	r0, [r2, #2]
 800234e:	f000 bfa7 	b.w	80032a0 <vGBFunctionBIT>
 8002352:	bf00      	nop
 8002354:	240092b0 	.word	0x240092b0

08002358 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 8002358:	4a02      	ldr	r2, [pc, #8]	; (8002364 <vBIT_2_D+0xc>)
 800235a:	2102      	movs	r1, #2
 800235c:	7950      	ldrb	r0, [r2, #5]
 800235e:	f000 bf9f 	b.w	80032a0 <vGBFunctionBIT>
 8002362:	bf00      	nop
 8002364:	240092b0 	.word	0x240092b0

08002368 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 8002368:	4a02      	ldr	r2, [pc, #8]	; (8002374 <vBIT_2_E+0xc>)
 800236a:	2102      	movs	r1, #2
 800236c:	7910      	ldrb	r0, [r2, #4]
 800236e:	f000 bf97 	b.w	80032a0 <vGBFunctionBIT>
 8002372:	bf00      	nop
 8002374:	240092b0 	.word	0x240092b0

08002378 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 8002378:	4a02      	ldr	r2, [pc, #8]	; (8002384 <vBIT_2_H+0xc>)
 800237a:	2102      	movs	r1, #2
 800237c:	79d0      	ldrb	r0, [r2, #7]
 800237e:	f000 bf8f 	b.w	80032a0 <vGBFunctionBIT>
 8002382:	bf00      	nop
 8002384:	240092b0 	.word	0x240092b0

08002388 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 8002388:	4a02      	ldr	r2, [pc, #8]	; (8002394 <vBIT_2_L+0xc>)
 800238a:	2102      	movs	r1, #2
 800238c:	7990      	ldrb	r0, [r2, #6]
 800238e:	f000 bf87 	b.w	80032a0 <vGBFunctionBIT>
 8002392:	bf00      	nop
 8002394:	240092b0 	.word	0x240092b0

08002398 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002398:	b510      	push	{r4, lr}
 800239a:	4c05      	ldr	r4, [pc, #20]	; (80023b0 <vBIT_2_HL+0x18>)
 800239c:	88e0      	ldrh	r0, [r4, #6]
 800239e:	f000 ffd7 	bl	8003350 <ucGBMemoryRead>
 80023a2:	4622      	mov	r2, r4
 80023a4:	2102      	movs	r1, #2
 80023a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023aa:	f000 bf79 	b.w	80032a0 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	240092b0 	.word	0x240092b0

080023b4 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <vBIT_2_A+0xc>)
 80023b6:	2102      	movs	r1, #2
 80023b8:	7850      	ldrb	r0, [r2, #1]
 80023ba:	f000 bf71 	b.w	80032a0 <vGBFunctionBIT>
 80023be:	bf00      	nop
 80023c0:	240092b0 	.word	0x240092b0

080023c4 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 80023c4:	4a02      	ldr	r2, [pc, #8]	; (80023d0 <vBIT_3_B+0xc>)
 80023c6:	2103      	movs	r1, #3
 80023c8:	78d0      	ldrb	r0, [r2, #3]
 80023ca:	f000 bf69 	b.w	80032a0 <vGBFunctionBIT>
 80023ce:	bf00      	nop
 80023d0:	240092b0 	.word	0x240092b0

080023d4 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 80023d4:	4a02      	ldr	r2, [pc, #8]	; (80023e0 <vBIT_3_C+0xc>)
 80023d6:	2103      	movs	r1, #3
 80023d8:	7890      	ldrb	r0, [r2, #2]
 80023da:	f000 bf61 	b.w	80032a0 <vGBFunctionBIT>
 80023de:	bf00      	nop
 80023e0:	240092b0 	.word	0x240092b0

080023e4 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 80023e4:	4a02      	ldr	r2, [pc, #8]	; (80023f0 <vBIT_3_D+0xc>)
 80023e6:	2103      	movs	r1, #3
 80023e8:	7950      	ldrb	r0, [r2, #5]
 80023ea:	f000 bf59 	b.w	80032a0 <vGBFunctionBIT>
 80023ee:	bf00      	nop
 80023f0:	240092b0 	.word	0x240092b0

080023f4 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 80023f4:	4a02      	ldr	r2, [pc, #8]	; (8002400 <vBIT_3_E+0xc>)
 80023f6:	2103      	movs	r1, #3
 80023f8:	7910      	ldrb	r0, [r2, #4]
 80023fa:	f000 bf51 	b.w	80032a0 <vGBFunctionBIT>
 80023fe:	bf00      	nop
 8002400:	240092b0 	.word	0x240092b0

08002404 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002404:	4a02      	ldr	r2, [pc, #8]	; (8002410 <vBIT_3_H+0xc>)
 8002406:	2103      	movs	r1, #3
 8002408:	79d0      	ldrb	r0, [r2, #7]
 800240a:	f000 bf49 	b.w	80032a0 <vGBFunctionBIT>
 800240e:	bf00      	nop
 8002410:	240092b0 	.word	0x240092b0

08002414 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <vBIT_3_L+0xc>)
 8002416:	2103      	movs	r1, #3
 8002418:	7990      	ldrb	r0, [r2, #6]
 800241a:	f000 bf41 	b.w	80032a0 <vGBFunctionBIT>
 800241e:	bf00      	nop
 8002420:	240092b0 	.word	0x240092b0

08002424 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 8002424:	b510      	push	{r4, lr}
 8002426:	4c05      	ldr	r4, [pc, #20]	; (800243c <vBIT_3_HL+0x18>)
 8002428:	88e0      	ldrh	r0, [r4, #6]
 800242a:	f000 ff91 	bl	8003350 <ucGBMemoryRead>
 800242e:	4622      	mov	r2, r4
 8002430:	2103      	movs	r1, #3
 8002432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002436:	f000 bf33 	b.w	80032a0 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	240092b0 	.word	0x240092b0

08002440 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 8002440:	4a02      	ldr	r2, [pc, #8]	; (800244c <vBIT_3_A+0xc>)
 8002442:	2103      	movs	r1, #3
 8002444:	7850      	ldrb	r0, [r2, #1]
 8002446:	f000 bf2b 	b.w	80032a0 <vGBFunctionBIT>
 800244a:	bf00      	nop
 800244c:	240092b0 	.word	0x240092b0

08002450 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <vBIT_4_B+0xc>)
 8002452:	2104      	movs	r1, #4
 8002454:	78d0      	ldrb	r0, [r2, #3]
 8002456:	f000 bf23 	b.w	80032a0 <vGBFunctionBIT>
 800245a:	bf00      	nop
 800245c:	240092b0 	.word	0x240092b0

08002460 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 8002460:	4a02      	ldr	r2, [pc, #8]	; (800246c <vBIT_4_C+0xc>)
 8002462:	2104      	movs	r1, #4
 8002464:	7890      	ldrb	r0, [r2, #2]
 8002466:	f000 bf1b 	b.w	80032a0 <vGBFunctionBIT>
 800246a:	bf00      	nop
 800246c:	240092b0 	.word	0x240092b0

08002470 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 8002470:	4a02      	ldr	r2, [pc, #8]	; (800247c <vBIT_4_D+0xc>)
 8002472:	2104      	movs	r1, #4
 8002474:	7950      	ldrb	r0, [r2, #5]
 8002476:	f000 bf13 	b.w	80032a0 <vGBFunctionBIT>
 800247a:	bf00      	nop
 800247c:	240092b0 	.word	0x240092b0

08002480 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 8002480:	4a02      	ldr	r2, [pc, #8]	; (800248c <vBIT_4_E+0xc>)
 8002482:	2104      	movs	r1, #4
 8002484:	7910      	ldrb	r0, [r2, #4]
 8002486:	f000 bf0b 	b.w	80032a0 <vGBFunctionBIT>
 800248a:	bf00      	nop
 800248c:	240092b0 	.word	0x240092b0

08002490 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 8002490:	4a02      	ldr	r2, [pc, #8]	; (800249c <vBIT_4_H+0xc>)
 8002492:	2104      	movs	r1, #4
 8002494:	79d0      	ldrb	r0, [r2, #7]
 8002496:	f000 bf03 	b.w	80032a0 <vGBFunctionBIT>
 800249a:	bf00      	nop
 800249c:	240092b0 	.word	0x240092b0

080024a0 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 80024a0:	4a02      	ldr	r2, [pc, #8]	; (80024ac <vBIT_4_L+0xc>)
 80024a2:	2104      	movs	r1, #4
 80024a4:	7990      	ldrb	r0, [r2, #6]
 80024a6:	f000 befb 	b.w	80032a0 <vGBFunctionBIT>
 80024aa:	bf00      	nop
 80024ac:	240092b0 	.word	0x240092b0

080024b0 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 80024b0:	b510      	push	{r4, lr}
 80024b2:	4c05      	ldr	r4, [pc, #20]	; (80024c8 <vBIT_4_HL+0x18>)
 80024b4:	88e0      	ldrh	r0, [r4, #6]
 80024b6:	f000 ff4b 	bl	8003350 <ucGBMemoryRead>
 80024ba:	4622      	mov	r2, r4
 80024bc:	2104      	movs	r1, #4
 80024be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c2:	f000 beed 	b.w	80032a0 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	240092b0 	.word	0x240092b0

080024cc <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <vBIT_4_A+0xc>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	7850      	ldrb	r0, [r2, #1]
 80024d2:	f000 bee5 	b.w	80032a0 <vGBFunctionBIT>
 80024d6:	bf00      	nop
 80024d8:	240092b0 	.word	0x240092b0

080024dc <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 80024dc:	4a02      	ldr	r2, [pc, #8]	; (80024e8 <vBIT_5_B+0xc>)
 80024de:	2105      	movs	r1, #5
 80024e0:	78d0      	ldrb	r0, [r2, #3]
 80024e2:	f000 bedd 	b.w	80032a0 <vGBFunctionBIT>
 80024e6:	bf00      	nop
 80024e8:	240092b0 	.word	0x240092b0

080024ec <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 80024ec:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <vBIT_5_C+0xc>)
 80024ee:	2105      	movs	r1, #5
 80024f0:	7890      	ldrb	r0, [r2, #2]
 80024f2:	f000 bed5 	b.w	80032a0 <vGBFunctionBIT>
 80024f6:	bf00      	nop
 80024f8:	240092b0 	.word	0x240092b0

080024fc <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 80024fc:	4a02      	ldr	r2, [pc, #8]	; (8002508 <vBIT_5_D+0xc>)
 80024fe:	2105      	movs	r1, #5
 8002500:	7950      	ldrb	r0, [r2, #5]
 8002502:	f000 becd 	b.w	80032a0 <vGBFunctionBIT>
 8002506:	bf00      	nop
 8002508:	240092b0 	.word	0x240092b0

0800250c <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <vBIT_5_E+0xc>)
 800250e:	2105      	movs	r1, #5
 8002510:	7910      	ldrb	r0, [r2, #4]
 8002512:	f000 bec5 	b.w	80032a0 <vGBFunctionBIT>
 8002516:	bf00      	nop
 8002518:	240092b0 	.word	0x240092b0

0800251c <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 800251c:	4a02      	ldr	r2, [pc, #8]	; (8002528 <vBIT_5_H+0xc>)
 800251e:	2105      	movs	r1, #5
 8002520:	79d0      	ldrb	r0, [r2, #7]
 8002522:	f000 bebd 	b.w	80032a0 <vGBFunctionBIT>
 8002526:	bf00      	nop
 8002528:	240092b0 	.word	0x240092b0

0800252c <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <vBIT_5_L+0xc>)
 800252e:	2105      	movs	r1, #5
 8002530:	7990      	ldrb	r0, [r2, #6]
 8002532:	f000 beb5 	b.w	80032a0 <vGBFunctionBIT>
 8002536:	bf00      	nop
 8002538:	240092b0 	.word	0x240092b0

0800253c <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 800253c:	b510      	push	{r4, lr}
 800253e:	4c05      	ldr	r4, [pc, #20]	; (8002554 <vBIT_5_HL+0x18>)
 8002540:	88e0      	ldrh	r0, [r4, #6]
 8002542:	f000 ff05 	bl	8003350 <ucGBMemoryRead>
 8002546:	4622      	mov	r2, r4
 8002548:	2105      	movs	r1, #5
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800254e:	f000 bea7 	b.w	80032a0 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	240092b0 	.word	0x240092b0

08002558 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <vBIT_5_A+0xc>)
 800255a:	2105      	movs	r1, #5
 800255c:	7850      	ldrb	r0, [r2, #1]
 800255e:	f000 be9f 	b.w	80032a0 <vGBFunctionBIT>
 8002562:	bf00      	nop
 8002564:	240092b0 	.word	0x240092b0

08002568 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <vBIT_6_B+0xc>)
 800256a:	2106      	movs	r1, #6
 800256c:	78d0      	ldrb	r0, [r2, #3]
 800256e:	f000 be97 	b.w	80032a0 <vGBFunctionBIT>
 8002572:	bf00      	nop
 8002574:	240092b0 	.word	0x240092b0

08002578 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 8002578:	4a02      	ldr	r2, [pc, #8]	; (8002584 <vBIT_6_C+0xc>)
 800257a:	2106      	movs	r1, #6
 800257c:	7890      	ldrb	r0, [r2, #2]
 800257e:	f000 be8f 	b.w	80032a0 <vGBFunctionBIT>
 8002582:	bf00      	nop
 8002584:	240092b0 	.word	0x240092b0

08002588 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 8002588:	4a02      	ldr	r2, [pc, #8]	; (8002594 <vBIT_6_D+0xc>)
 800258a:	2106      	movs	r1, #6
 800258c:	7950      	ldrb	r0, [r2, #5]
 800258e:	f000 be87 	b.w	80032a0 <vGBFunctionBIT>
 8002592:	bf00      	nop
 8002594:	240092b0 	.word	0x240092b0

08002598 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002598:	4a02      	ldr	r2, [pc, #8]	; (80025a4 <vBIT_6_E+0xc>)
 800259a:	2106      	movs	r1, #6
 800259c:	7910      	ldrb	r0, [r2, #4]
 800259e:	f000 be7f 	b.w	80032a0 <vGBFunctionBIT>
 80025a2:	bf00      	nop
 80025a4:	240092b0 	.word	0x240092b0

080025a8 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 80025a8:	4a02      	ldr	r2, [pc, #8]	; (80025b4 <vBIT_6_H+0xc>)
 80025aa:	2106      	movs	r1, #6
 80025ac:	79d0      	ldrb	r0, [r2, #7]
 80025ae:	f000 be77 	b.w	80032a0 <vGBFunctionBIT>
 80025b2:	bf00      	nop
 80025b4:	240092b0 	.word	0x240092b0

080025b8 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 80025b8:	4a02      	ldr	r2, [pc, #8]	; (80025c4 <vBIT_6_L+0xc>)
 80025ba:	2106      	movs	r1, #6
 80025bc:	7990      	ldrb	r0, [r2, #6]
 80025be:	f000 be6f 	b.w	80032a0 <vGBFunctionBIT>
 80025c2:	bf00      	nop
 80025c4:	240092b0 	.word	0x240092b0

080025c8 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 80025c8:	b510      	push	{r4, lr}
 80025ca:	4c05      	ldr	r4, [pc, #20]	; (80025e0 <vBIT_6_HL+0x18>)
 80025cc:	88e0      	ldrh	r0, [r4, #6]
 80025ce:	f000 febf 	bl	8003350 <ucGBMemoryRead>
 80025d2:	4622      	mov	r2, r4
 80025d4:	2106      	movs	r1, #6
 80025d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025da:	f000 be61 	b.w	80032a0 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	240092b0 	.word	0x240092b0

080025e4 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 80025e4:	4a02      	ldr	r2, [pc, #8]	; (80025f0 <vBIT_6_A+0xc>)
 80025e6:	2106      	movs	r1, #6
 80025e8:	7850      	ldrb	r0, [r2, #1]
 80025ea:	f000 be59 	b.w	80032a0 <vGBFunctionBIT>
 80025ee:	bf00      	nop
 80025f0:	240092b0 	.word	0x240092b0

080025f4 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 80025f4:	4a02      	ldr	r2, [pc, #8]	; (8002600 <vBIT_7_B+0xc>)
 80025f6:	2107      	movs	r1, #7
 80025f8:	78d0      	ldrb	r0, [r2, #3]
 80025fa:	f000 be51 	b.w	80032a0 <vGBFunctionBIT>
 80025fe:	bf00      	nop
 8002600:	240092b0 	.word	0x240092b0

08002604 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002604:	4a02      	ldr	r2, [pc, #8]	; (8002610 <vBIT_7_C+0xc>)
 8002606:	2107      	movs	r1, #7
 8002608:	7890      	ldrb	r0, [r2, #2]
 800260a:	f000 be49 	b.w	80032a0 <vGBFunctionBIT>
 800260e:	bf00      	nop
 8002610:	240092b0 	.word	0x240092b0

08002614 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 8002614:	4a02      	ldr	r2, [pc, #8]	; (8002620 <vBIT_7_D+0xc>)
 8002616:	2107      	movs	r1, #7
 8002618:	7950      	ldrb	r0, [r2, #5]
 800261a:	f000 be41 	b.w	80032a0 <vGBFunctionBIT>
 800261e:	bf00      	nop
 8002620:	240092b0 	.word	0x240092b0

08002624 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 8002624:	4a02      	ldr	r2, [pc, #8]	; (8002630 <vBIT_7_E+0xc>)
 8002626:	2107      	movs	r1, #7
 8002628:	7910      	ldrb	r0, [r2, #4]
 800262a:	f000 be39 	b.w	80032a0 <vGBFunctionBIT>
 800262e:	bf00      	nop
 8002630:	240092b0 	.word	0x240092b0

08002634 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 8002634:	4a02      	ldr	r2, [pc, #8]	; (8002640 <vBIT_7_H+0xc>)
 8002636:	2107      	movs	r1, #7
 8002638:	79d0      	ldrb	r0, [r2, #7]
 800263a:	f000 be31 	b.w	80032a0 <vGBFunctionBIT>
 800263e:	bf00      	nop
 8002640:	240092b0 	.word	0x240092b0

08002644 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 8002644:	4a02      	ldr	r2, [pc, #8]	; (8002650 <vBIT_7_L+0xc>)
 8002646:	2107      	movs	r1, #7
 8002648:	7990      	ldrb	r0, [r2, #6]
 800264a:	f000 be29 	b.w	80032a0 <vGBFunctionBIT>
 800264e:	bf00      	nop
 8002650:	240092b0 	.word	0x240092b0

08002654 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 8002654:	b510      	push	{r4, lr}
 8002656:	4c05      	ldr	r4, [pc, #20]	; (800266c <vBIT_7_HL+0x18>)
 8002658:	88e0      	ldrh	r0, [r4, #6]
 800265a:	f000 fe79 	bl	8003350 <ucGBMemoryRead>
 800265e:	4622      	mov	r2, r4
 8002660:	2107      	movs	r1, #7
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002666:	f000 be1b 	b.w	80032a0 <vGBFunctionBIT>
 800266a:	bf00      	nop
 800266c:	240092b0 	.word	0x240092b0

08002670 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <vBIT_7_A+0xc>)
 8002672:	2107      	movs	r1, #7
 8002674:	7850      	ldrb	r0, [r2, #1]
 8002676:	f000 be13 	b.w	80032a0 <vGBFunctionBIT>
 800267a:	bf00      	nop
 800267c:	240092b0 	.word	0x240092b0

08002680 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <vRES_0_HL+0x1c>)
 8002682:	2100      	movs	r1, #0
 8002684:	b510      	push	{r4, lr}
 8002686:	88dc      	ldrh	r4, [r3, #6]
 8002688:	4620      	mov	r0, r4
 800268a:	f000 fe21 	bl	80032d0 <ucGBFunctionRESHL>
 800268e:	4601      	mov	r1, r0
 8002690:	4620      	mov	r0, r4
 8002692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002696:	f000 be3f 	b.w	8003318 <vGBMemoryWrite>
 800269a:	bf00      	nop
 800269c:	240092b0 	.word	0x240092b0

080026a0 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <vRES_1_HL+0x1c>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	b510      	push	{r4, lr}
 80026a6:	88dc      	ldrh	r4, [r3, #6]
 80026a8:	4620      	mov	r0, r4
 80026aa:	f000 fe11 	bl	80032d0 <ucGBFunctionRESHL>
 80026ae:	4601      	mov	r1, r0
 80026b0:	4620      	mov	r0, r4
 80026b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026b6:	f000 be2f 	b.w	8003318 <vGBMemoryWrite>
 80026ba:	bf00      	nop
 80026bc:	240092b0 	.word	0x240092b0

080026c0 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vRES_2_HL+0x1c>)
 80026c2:	2102      	movs	r1, #2
 80026c4:	b510      	push	{r4, lr}
 80026c6:	88dc      	ldrh	r4, [r3, #6]
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 fe01 	bl	80032d0 <ucGBFunctionRESHL>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4620      	mov	r0, r4
 80026d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d6:	f000 be1f 	b.w	8003318 <vGBMemoryWrite>
 80026da:	bf00      	nop
 80026dc:	240092b0 	.word	0x240092b0

080026e0 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <vRES_3_HL+0x1c>)
 80026e2:	2103      	movs	r1, #3
 80026e4:	b510      	push	{r4, lr}
 80026e6:	88dc      	ldrh	r4, [r3, #6]
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 fdf1 	bl	80032d0 <ucGBFunctionRESHL>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4620      	mov	r0, r4
 80026f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f6:	f000 be0f 	b.w	8003318 <vGBMemoryWrite>
 80026fa:	bf00      	nop
 80026fc:	240092b0 	.word	0x240092b0

08002700 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <vRES_4_HL+0x1c>)
 8002702:	2104      	movs	r1, #4
 8002704:	b510      	push	{r4, lr}
 8002706:	88dc      	ldrh	r4, [r3, #6]
 8002708:	4620      	mov	r0, r4
 800270a:	f000 fde1 	bl	80032d0 <ucGBFunctionRESHL>
 800270e:	4601      	mov	r1, r0
 8002710:	4620      	mov	r0, r4
 8002712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002716:	f000 bdff 	b.w	8003318 <vGBMemoryWrite>
 800271a:	bf00      	nop
 800271c:	240092b0 	.word	0x240092b0

08002720 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <vRES_5_HL+0x1c>)
 8002722:	2105      	movs	r1, #5
 8002724:	b510      	push	{r4, lr}
 8002726:	88dc      	ldrh	r4, [r3, #6]
 8002728:	4620      	mov	r0, r4
 800272a:	f000 fdd1 	bl	80032d0 <ucGBFunctionRESHL>
 800272e:	4601      	mov	r1, r0
 8002730:	4620      	mov	r0, r4
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002736:	f000 bdef 	b.w	8003318 <vGBMemoryWrite>
 800273a:	bf00      	nop
 800273c:	240092b0 	.word	0x240092b0

08002740 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <vRES_6_HL+0x1c>)
 8002742:	2106      	movs	r1, #6
 8002744:	b510      	push	{r4, lr}
 8002746:	88dc      	ldrh	r4, [r3, #6]
 8002748:	4620      	mov	r0, r4
 800274a:	f000 fdc1 	bl	80032d0 <ucGBFunctionRESHL>
 800274e:	4601      	mov	r1, r0
 8002750:	4620      	mov	r0, r4
 8002752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002756:	f000 bddf 	b.w	8003318 <vGBMemoryWrite>
 800275a:	bf00      	nop
 800275c:	240092b0 	.word	0x240092b0

08002760 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <vRES_7_HL+0x1c>)
 8002762:	2107      	movs	r1, #7
 8002764:	b510      	push	{r4, lr}
 8002766:	88dc      	ldrh	r4, [r3, #6]
 8002768:	4620      	mov	r0, r4
 800276a:	f000 fdb1 	bl	80032d0 <ucGBFunctionRESHL>
 800276e:	4601      	mov	r1, r0
 8002770:	4620      	mov	r0, r4
 8002772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002776:	f000 bdcf 	b.w	8003318 <vGBMemoryWrite>
 800277a:	bf00      	nop
 800277c:	240092b0 	.word	0x240092b0

08002780 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <vSET_0_HL+0x1c>)
 8002782:	2100      	movs	r1, #0
 8002784:	b510      	push	{r4, lr}
 8002786:	88dc      	ldrh	r4, [r3, #6]
 8002788:	4620      	mov	r0, r4
 800278a:	f000 fdad 	bl	80032e8 <ucGBFunctionSETHL>
 800278e:	4601      	mov	r1, r0
 8002790:	4620      	mov	r0, r4
 8002792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002796:	f000 bdbf 	b.w	8003318 <vGBMemoryWrite>
 800279a:	bf00      	nop
 800279c:	240092b0 	.word	0x240092b0

080027a0 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <vSET_1_HL+0x1c>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	b510      	push	{r4, lr}
 80027a6:	88dc      	ldrh	r4, [r3, #6]
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 fd9d 	bl	80032e8 <ucGBFunctionSETHL>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4620      	mov	r0, r4
 80027b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b6:	f000 bdaf 	b.w	8003318 <vGBMemoryWrite>
 80027ba:	bf00      	nop
 80027bc:	240092b0 	.word	0x240092b0

080027c0 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <vSET_2_HL+0x1c>)
 80027c2:	2102      	movs	r1, #2
 80027c4:	b510      	push	{r4, lr}
 80027c6:	88dc      	ldrh	r4, [r3, #6]
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 fd8d 	bl	80032e8 <ucGBFunctionSETHL>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4620      	mov	r0, r4
 80027d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d6:	f000 bd9f 	b.w	8003318 <vGBMemoryWrite>
 80027da:	bf00      	nop
 80027dc:	240092b0 	.word	0x240092b0

080027e0 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <vSET_3_HL+0x1c>)
 80027e2:	2103      	movs	r1, #3
 80027e4:	b510      	push	{r4, lr}
 80027e6:	88dc      	ldrh	r4, [r3, #6]
 80027e8:	4620      	mov	r0, r4
 80027ea:	f000 fd7d 	bl	80032e8 <ucGBFunctionSETHL>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4620      	mov	r0, r4
 80027f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f6:	f000 bd8f 	b.w	8003318 <vGBMemoryWrite>
 80027fa:	bf00      	nop
 80027fc:	240092b0 	.word	0x240092b0

08002800 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <vSET_4_HL+0x1c>)
 8002802:	2104      	movs	r1, #4
 8002804:	b510      	push	{r4, lr}
 8002806:	88dc      	ldrh	r4, [r3, #6]
 8002808:	4620      	mov	r0, r4
 800280a:	f000 fd6d 	bl	80032e8 <ucGBFunctionSETHL>
 800280e:	4601      	mov	r1, r0
 8002810:	4620      	mov	r0, r4
 8002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002816:	f000 bd7f 	b.w	8003318 <vGBMemoryWrite>
 800281a:	bf00      	nop
 800281c:	240092b0 	.word	0x240092b0

08002820 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <vSET_5_HL+0x1c>)
 8002822:	2105      	movs	r1, #5
 8002824:	b510      	push	{r4, lr}
 8002826:	88dc      	ldrh	r4, [r3, #6]
 8002828:	4620      	mov	r0, r4
 800282a:	f000 fd5d 	bl	80032e8 <ucGBFunctionSETHL>
 800282e:	4601      	mov	r1, r0
 8002830:	4620      	mov	r0, r4
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002836:	f000 bd6f 	b.w	8003318 <vGBMemoryWrite>
 800283a:	bf00      	nop
 800283c:	240092b0 	.word	0x240092b0

08002840 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <vSET_6_HL+0x1c>)
 8002842:	2106      	movs	r1, #6
 8002844:	b510      	push	{r4, lr}
 8002846:	88dc      	ldrh	r4, [r3, #6]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 fd4d 	bl	80032e8 <ucGBFunctionSETHL>
 800284e:	4601      	mov	r1, r0
 8002850:	4620      	mov	r0, r4
 8002852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002856:	f000 bd5f 	b.w	8003318 <vGBMemoryWrite>
 800285a:	bf00      	nop
 800285c:	240092b0 	.word	0x240092b0

08002860 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <vSET_7_HL+0x1c>)
 8002862:	2107      	movs	r1, #7
 8002864:	b510      	push	{r4, lr}
 8002866:	88dc      	ldrh	r4, [r3, #6]
 8002868:	4620      	mov	r0, r4
 800286a:	f000 fd3d 	bl	80032e8 <ucGBFunctionSETHL>
 800286e:	4601      	mov	r1, r0
 8002870:	4620      	mov	r0, r4
 8002872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002876:	f000 bd4f 	b.w	8003318 <vGBMemoryWrite>
 800287a:	bf00      	nop
 800287c:	240092b0 	.word	0x240092b0

08002880 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 8002880:	b510      	push	{r4, lr}
 8002882:	4c0d      	ldr	r4, [pc, #52]	; (80028b8 <vCCF+0x38>)
 8002884:	2106      	movs	r1, #6
 8002886:	4620      	mov	r0, r4
 8002888:	f000 f902 	bl	8002a90 <resetbit>
 800288c:	4620      	mov	r0, r4
 800288e:	2105      	movs	r1, #5
 8002890:	f000 f8fe 	bl	8002a90 <resetbit>
 8002894:	7820      	ldrb	r0, [r4, #0]
 8002896:	2104      	movs	r1, #4
 8002898:	f000 f902 	bl	8002aa0 <checkbit>
 800289c:	b128      	cbz	r0, 80028aa <vCCF+0x2a>
 800289e:	4620      	mov	r0, r4
 80028a0:	2104      	movs	r1, #4
 80028a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028a6:	f000 b8f3 	b.w	8002a90 <resetbit>
 80028aa:	4620      	mov	r0, r4
 80028ac:	2104      	movs	r1, #4
 80028ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b2:	f000 b8e5 	b.w	8002a80 <setbit>
 80028b6:	bf00      	nop
 80028b8:	240092b0 	.word	0x240092b0

080028bc <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028bc:	4901      	ldr	r1, [pc, #4]	; (80028c4 <vRET_C.part.0+0x8>)
 80028be:	1e88      	subs	r0, r1, #2
 80028c0:	f000 bb1a 	b.w	8002ef8 <vGBFunctionRET>
 80028c4:	240092ba 	.word	0x240092ba

080028c8 <vRET_NZ>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <vRET_NZ+0x30>)
 80028cc:	2107      	movs	r1, #7
 80028ce:	7820      	ldrb	r0, [r4, #0]
 80028d0:	f000 f8e6 	bl	8002aa0 <checkbit>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vRET_NZ+0x34>)
 80028d8:	f04f 0107 	mov.w	r1, #7
 80028dc:	bf14      	ite	ne
 80028de:	2208      	movne	r2, #8
 80028e0:	2214      	moveq	r2, #20
 80028e2:	7820      	ldrb	r0, [r4, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	f000 f8db 	bl	8002aa0 <checkbit>
 80028ea:	b100      	cbz	r0, 80028ee <vRET_NZ+0x26>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	f7ff bfe3 	b.w	80028bc <vRET_C.part.0>
 80028f6:	bf00      	nop
 80028f8:	240092b0 	.word	0x240092b0
 80028fc:	240090ed 	.word	0x240090ed

08002900 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002900:	b510      	push	{r4, lr}
 8002902:	4c0b      	ldr	r4, [pc, #44]	; (8002930 <vRET_Z+0x30>)
 8002904:	2107      	movs	r1, #7
 8002906:	7820      	ldrb	r0, [r4, #0]
 8002908:	f000 f8ca 	bl	8002aa0 <checkbit>
 800290c:	2800      	cmp	r0, #0
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <vRET_Z+0x34>)
 8002910:	f04f 0107 	mov.w	r1, #7
 8002914:	bf14      	ite	ne
 8002916:	2214      	movne	r2, #20
 8002918:	2208      	moveq	r2, #8
 800291a:	7820      	ldrb	r0, [r4, #0]
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f000 f8bf 	bl	8002aa0 <checkbit>
 8002922:	b900      	cbnz	r0, 8002926 <vRET_Z+0x26>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292a:	f7ff bfc7 	b.w	80028bc <vRET_C.part.0>
 800292e:	bf00      	nop
 8002930:	240092b0 	.word	0x240092b0
 8002934:	240090ed 	.word	0x240090ed

08002938 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002938:	b510      	push	{r4, lr}
 800293a:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <vRET_NC+0x30>)
 800293c:	2104      	movs	r1, #4
 800293e:	7820      	ldrb	r0, [r4, #0]
 8002940:	f000 f8ae 	bl	8002aa0 <checkbit>
 8002944:	2800      	cmp	r0, #0
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <vRET_NC+0x34>)
 8002948:	f04f 0104 	mov.w	r1, #4
 800294c:	bf14      	ite	ne
 800294e:	2208      	movne	r2, #8
 8002950:	2214      	moveq	r2, #20
 8002952:	7820      	ldrb	r0, [r4, #0]
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	f000 f8a3 	bl	8002aa0 <checkbit>
 800295a:	b100      	cbz	r0, 800295e <vRET_NC+0x26>
 800295c:	bd10      	pop	{r4, pc}
 800295e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002962:	f7ff bfab 	b.w	80028bc <vRET_C.part.0>
 8002966:	bf00      	nop
 8002968:	240092b0 	.word	0x240092b0
 800296c:	240090ed 	.word	0x240090ed

08002970 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002970:	b510      	push	{r4, lr}
 8002972:	4c0b      	ldr	r4, [pc, #44]	; (80029a0 <vRET_C+0x30>)
 8002974:	2104      	movs	r1, #4
 8002976:	7820      	ldrb	r0, [r4, #0]
 8002978:	f000 f892 	bl	8002aa0 <checkbit>
 800297c:	2800      	cmp	r0, #0
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <vRET_C+0x34>)
 8002980:	f04f 0104 	mov.w	r1, #4
 8002984:	bf14      	ite	ne
 8002986:	2214      	movne	r2, #20
 8002988:	2208      	moveq	r2, #8
 800298a:	7820      	ldrb	r0, [r4, #0]
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	f000 f887 	bl	8002aa0 <checkbit>
 8002992:	b900      	cbnz	r0, 8002996 <vRET_C+0x26>
 8002994:	bd10      	pop	{r4, pc}
 8002996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299a:	f7ff bf8f 	b.w	80028bc <vRET_C.part.0>
 800299e:	bf00      	nop
 80029a0:	240092b0 	.word	0x240092b0
 80029a4:	240090ed 	.word	0x240090ed

080029a8 <vLD_A_A>:
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop

080029ac <vLD_B_B>:
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <vLD_C_C>:
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <vLD_D_D>:
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <vLD_E_E>:
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <vLD_H_H>:
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <vLD_L_L>:
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <vGBCPUinstr>:
	}else{
		vGBMemoryPrint();
	}
}

void vGBCPUinstr(uint8_t opcode){
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4604      	mov	r4, r0
	vGBMemorySetOP(opcode);
 80029c8:	f000 fc98 	bl	80032fc <vGBMemorySetOP>

	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 80029cc:	2ccb      	cmp	r4, #203	; 0xcb
 80029ce:	d019      	beq.n	8002a04 <vGBCPUinstr+0x40>
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <vGBCPUinstr+0x7c>)
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <vGBCPUinstr+0x80>)
 80029d4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 80029d8:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 80029dc:	8950      	ldrh	r0, [r2, #10]
 80029de:	792b      	ldrb	r3, [r5, #4]
 80029e0:	4403      	add	r3, r0
 80029e2:	8153      	strh	r3, [r2, #10]
	((void (*)(void))instructions[opcode].instr)();
 80029e4:	4788      	blx	r1

	if (opcode == 0xCB){
		tStates += prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
	}else if(instructions[opcode].Tstate == 255){
 80029e6:	796b      	ldrb	r3, [r5, #5]
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d004      	beq.n	80029f6 <vGBCPUinstr+0x32>
		tStates += customDuration;
	}else{
		tStates += instructions[opcode].Tstate;
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <vGBCPUinstr+0x84>)
 80029ee:	680a      	ldr	r2, [r1, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
	}
}
 80029f4:	bd38      	pop	{r3, r4, r5, pc}
		tStates += customDuration;
 80029f6:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <vGBCPUinstr+0x84>)
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <vGBCPUinstr+0x88>)
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	440b      	add	r3, r1
 8002a00:	6013      	str	r3, [r2, #0]
}
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a04:	4d0f      	ldr	r5, [pc, #60]	; (8002a44 <vGBCPUinstr+0x80>)
 8002a06:	4c12      	ldr	r4, [pc, #72]	; (8002a50 <vGBCPUinstr+0x8c>)
 8002a08:	8968      	ldrh	r0, [r5, #10]
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	b280      	uxth	r0, r0
 8002a0e:	f000 fc9f 	bl	8003350 <ucGBMemoryRead>
 8002a12:	8969      	ldrh	r1, [r5, #10]
 8002a14:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002a18:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <vGBCPUinstr+0x7c>)
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a1a:	7903      	ldrb	r3, [r0, #4]
	((void (*)(void))instructions[opcode].instr)();
 8002a1c:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a20:	440b      	add	r3, r1
 8002a22:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002a24:	4790      	blx	r2
		tStates += prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002a26:	8968      	ldrh	r0, [r5, #10]
 8002a28:	3801      	subs	r0, #1
 8002a2a:	b280      	uxth	r0, r0
 8002a2c:	f000 fc90 	bl	8003350 <ucGBMemoryRead>
 8002a30:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <vGBCPUinstr+0x84>)
 8002a32:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	7943      	ldrb	r3, [r0, #5]
 8002a3a:	440b      	add	r3, r1
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	24000008 	.word	0x24000008
 8002a44:	240092b0 	.word	0x240092b0
 8002a48:	240090f0 	.word	0x240090f0
 8002a4c:	240090ed 	.word	0x240090ed
 8002a50:	24000808 	.word	0x24000808

08002a54 <vGBCPUboot>:
void vGBCPUboot(){
 8002a54:	b508      	push	{r3, lr}
	if(reg.PC <= 0xFF){
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <vGBCPUboot+0x20>)
 8002a58:	8958      	ldrh	r0, [r3, #10]
 8002a5a:	28ff      	cmp	r0, #255	; 0xff
 8002a5c:	d805      	bhi.n	8002a6a <vGBCPUboot+0x16>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002a5e:	f000 fc77 	bl	8003350 <ucGBMemoryRead>
}
 8002a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002a66:	f7ff bfad 	b.w	80029c4 <vGBCPUinstr>
}
 8002a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		vGBMemoryPrint();
 8002a6e:	f000 bc7b 	b.w	8003368 <vGBMemoryPrint>
 8002a72:	bf00      	nop
 8002a74:	240092b0 	.word	0x240092b0

08002a78 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002a78:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002a7c:	b280      	uxth	r0, r0
 8002a7e:	4770      	bx	lr

08002a80 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002a80:	2301      	movs	r3, #1
 8002a82:	fa03 f101 	lsl.w	r1, r3, r1
 8002a86:	7803      	ldrb	r3, [r0, #0]
 8002a88:	4319      	orrs	r1, r3
 8002a8a:	7001      	strb	r1, [r0, #0]
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002a90:	2301      	movs	r3, #1
 8002a92:	fa03 f101 	lsl.w	r1, r3, r1
 8002a96:	7803      	ldrb	r3, [r0, #0]
 8002a98:	ea23 0101 	bic.w	r1, r3, r1
 8002a9c:	7001      	strb	r1, [r0, #0]
}
 8002a9e:	4770      	bx	lr

08002aa0 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002aa0:	4108      	asrs	r0, r1
}
 8002aa2:	f000 0001 	and.w	r0, r0, #1
 8002aa6:	4770      	bx	lr

08002aa8 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002aa8:	7803      	ldrb	r3, [r0, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002ab0:	780b      	ldrb	r3, [r1, #0]
 8002ab2:	bf0c      	ite	eq
 8002ab4:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ab8:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002abc:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002abe:	7803      	ldrb	r3, [r0, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ac4:	f991 2000 	ldrsb.w	r2, [r1]
 8002ac8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002acc:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ace:	7800      	ldrb	r0, [r0, #0]
 8002ad0:	b118      	cbz	r0, 8002ada <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002ad2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002ad6:	700b      	strb	r3, [r1, #0]
}
 8002ad8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	700b      	strb	r3, [r1, #0]
}
 8002ae2:	4770      	bx	lr

08002ae4 <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002ae4:	7803      	ldrb	r3, [r0, #0]
 8002ae6:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002aea:	780b      	ldrb	r3, [r1, #0]
 8002aec:	bf14      	ite	ne
 8002aee:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002af2:	f043 0320 	orreq.w	r3, r3, #32
 8002af6:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002af8:	7803      	ldrb	r3, [r0, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002afe:	f991 3000 	ldrsb.w	r3, [r1]
 8002b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b06:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002b08:	7802      	ldrb	r2, [r0, #0]
 8002b0a:	b12a      	cbz	r2, 8002b18 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	700b      	strb	r3, [r1, #0]
}
 8002b16:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002b18:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	700b      	strb	r3, [r1, #0]
}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002b24:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002b26:	09d3      	lsrs	r3, r2, #7
 8002b28:	bf0c      	ite	eq
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	2310      	movne	r3, #16
 8002b2e:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002b30:	7803      	ldrb	r3, [r0, #0]
 8002b32:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002b34:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002b38:	7003      	strb	r3, [r0, #0]
}
 8002b3a:	4770      	bx	lr

08002b3c <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002b3c:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002b3e:	f013 0301 	ands.w	r3, r3, #1
 8002b42:	d007      	beq.n	8002b54 <vGBFunctionRRCA+0x18>
 8002b44:	2310      	movs	r3, #16
 8002b46:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002b48:	7803      	ldrb	r3, [r0, #0]
 8002b4a:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b50:	7003      	strb	r3, [r0, #0]
}
 8002b52:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002b54:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002b56:	7803      	ldrb	r3, [r0, #0]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002b60:	8803      	ldrh	r3, [r0, #0]
 8002b62:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002b64:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002b66:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002b68:	d517      	bpl.n	8002b9a <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002b6a:	f992 3000 	ldrsb.w	r3, [r2]
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	b2dc      	uxtb	r4, r3
 8002b74:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x0FFF) < (*regHL & 0x0FFF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002b76:	f3c1 050b 	ubfx	r5, r1, #0, #12
 8002b7a:	8804      	ldrh	r4, [r0, #0]
 8002b7c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8002b80:	42a5      	cmp	r5, r4
 8002b82:	d211      	bcs.n	8002ba8 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002b84:	f043 0320 	orr.w	r3, r3, #32
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002b8c:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002b8e:	7813      	ldrb	r3, [r2, #0]
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002b94:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002b96:	7013      	strb	r3, [r2, #0]
}
 8002b98:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002b9a:	f992 4000 	ldrsb.w	r4, [r2]
 8002b9e:	f024 0310 	bic.w	r3, r4, #16
 8002ba2:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002ba6:	e7e5      	b.n	8002b74 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002ba8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002bac:	e7ed      	b.n	8002b8a <vGBFunction16bitADD+0x2a>
 8002bae:	bf00      	nop

08002bb0 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002bb0:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002bb4:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002bb6:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002bb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002bbc:	f002 0210 	and.w	r2, r2, #16
 8002bc0:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002bc2:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002bc4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002bc8:	7003      	strb	r3, [r0, #0]
}
 8002bca:	4770      	bx	lr

08002bcc <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002bcc:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002bce:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002bd0:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002bd2:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002bd4:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002bd8:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002bda:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002bdc:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002bde:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002be2:	7003      	strb	r3, [r0, #0]
}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop

08002be8 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002be8:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002bea:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002bec:	09c9      	lsrs	r1, r1, #7
 8002bee:	d105      	bne.n	8002bfc <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002bf0:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002bf2:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002bf4:	fa41 f282 	sxtab	r2, r1, r2
 8002bf8:	801a      	strh	r2, [r3, #0]
		return 12;
 8002bfa:	4770      	bx	lr
		return 8;
 8002bfc:	2008      	movs	r0, #8
	}
}
 8002bfe:	4770      	bx	lr

08002c00 <vGBFunctionDAA>:
	return ((n >> bit) & 0x1);
 8002c00:	780a      	ldrb	r2, [r1, #0]

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002c02:	b410      	push	{r4}
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002c04:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002c08:	7804      	ldrb	r4, [r0, #0]
 8002c0a:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002c0c:	d019      	beq.n	8002c42 <vGBFunctionDAA+0x42>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort = ( tempShort - 0x06) & 0xFF;
 8002c0e:	0694      	lsls	r4, r2, #26
 8002c10:	d501      	bpl.n	8002c16 <vGBFunctionDAA+0x16>
 8002c12:	3b06      	subs	r3, #6
 8002c14:	b2db      	uxtb	r3, r3
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort -= -0x60;
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002c16:	06d2      	lsls	r2, r2, #27
 8002c18:	d501      	bpl.n	8002c1e <vGBFunctionDAA+0x1e>
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	b29b      	uxth	r3, r3
	}
	*regA = tempShort;
 8002c1e:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c20:	f991 4000 	ldrsb.w	r4, [r1]
 8002c24:	f024 0220 	bic.w	r2, r4, #32
 8002c28:	700a      	strb	r2, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002c2a:	7800      	ldrb	r0, [r0, #0]
 8002c2c:	b198      	cbz	r0, 8002c56 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002c2e:	f004 025f 	and.w	r2, r4, #95	; 0x5f
	if(tempShort >= 0x100) setbit(flagReg, C_FLAG);
 8002c32:	2bff      	cmp	r3, #255	; 0xff
}
 8002c34:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002c38:	bf88      	it	hi
 8002c3a:	f042 0210 	orrhi.w	r2, r2, #16
 8002c3e:	700a      	strb	r2, [r1, #0]
}
 8002c40:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002c42:	f012 0f20 	tst.w	r2, #32
 8002c46:	d00a      	beq.n	8002c5e <vGBFunctionDAA+0x5e>
 8002c48:	3306      	adds	r3, #6
 8002c4a:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002c4c:	2b9f      	cmp	r3, #159	; 0x9f
 8002c4e:	d8e4      	bhi.n	8002c1a <vGBFunctionDAA+0x1a>
 8002c50:	06d2      	lsls	r2, r2, #27
 8002c52:	d5e4      	bpl.n	8002c1e <vGBFunctionDAA+0x1e>
 8002c54:	e7e1      	b.n	8002c1a <vGBFunctionDAA+0x1a>
	(*n) |= (0x1 << bit);
 8002c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c5a:	b2d2      	uxtb	r2, r2
}
 8002c5c:	e7e9      	b.n	8002c32 <vGBFunctionDAA+0x32>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002c5e:	f004 040f 	and.w	r4, r4, #15
 8002c62:	2c09      	cmp	r4, #9
 8002c64:	d9f2      	bls.n	8002c4c <vGBFunctionDAA+0x4c>
 8002c66:	e7ef      	b.n	8002c48 <vGBFunctionDAA+0x48>

08002c68 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002c68:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002c6a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002c6c:	09c9      	lsrs	r1, r1, #7
 8002c6e:	d005      	beq.n	8002c7c <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002c70:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002c72:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002c74:	fa41 f282 	sxtab	r2, r1, r2
 8002c78:	801a      	strh	r2, [r3, #0]
		return 12;
 8002c7a:	4770      	bx	lr
	}else{
		return 8;
 8002c7c:	2008      	movs	r0, #8
	}
}
 8002c7e:	4770      	bx	lr

08002c80 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002c80:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002c82:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002c84:	06c9      	lsls	r1, r1, #27
 8002c86:	d405      	bmi.n	8002c94 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002c88:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002c8a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002c8c:	fa41 f282 	sxtab	r2, r1, r2
 8002c90:	801a      	strh	r2, [r3, #0]
		return 12;
 8002c92:	4770      	bx	lr
		return 8;
 8002c94:	2008      	movs	r0, #8
	}
}
 8002c96:	4770      	bx	lr

08002c98 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c9e:	f000 fb57 	bl	8003350 <ucGBMemoryRead>
 8002ca2:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002ca6:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ca8:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002caa:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002cac:	bf0c      	ite	eq
 8002cae:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002cb2:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002cb6:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002cb8:	f000 fb4a 	bl	8003350 <ucGBMemoryRead>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	3101      	adds	r1, #1
 8002cc2:	b2c9      	uxtb	r1, r1
 8002cc4:	f000 fb28 	bl	8003318 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002cc8:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002cca:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd0:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002cd2:	f000 fb3d 	bl	8003350 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002cd6:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002cd8:	b118      	cbz	r0, 8002ce2 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cde:	7023      	strb	r3, [r4, #0]
}
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	7023      	strb	r3, [r4, #0]
}
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}
 8002cea:	bf00      	nop

08002cec <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	460c      	mov	r4, r1
 8002cf0:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002cf2:	f000 fb2d 	bl	8003350 <ucGBMemoryRead>
 8002cf6:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002cf8:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002cfa:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002cfc:	bf14      	ite	ne
 8002cfe:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002d02:	f043 0320 	orreq.w	r3, r3, #32
 8002d06:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002d08:	f000 fb22 	bl	8003350 <ucGBMemoryRead>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4628      	mov	r0, r5
 8002d10:	3901      	subs	r1, #1
 8002d12:	b2c9      	uxtb	r1, r1
 8002d14:	f000 fb00 	bl	8003318 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002d18:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d1a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d20:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d22:	f000 fb15 	bl	8003350 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002d26:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d28:	b118      	cbz	r0, 8002d32 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2e:	7023      	strb	r3, [r4, #0]
}
 8002d30:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d36:	7023      	strb	r3, [r4, #0]
}
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
 8002d3a:	bf00      	nop

08002d3c <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002d3c:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d3e:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002d40:	06c9      	lsls	r1, r1, #27
 8002d42:	d505      	bpl.n	8002d50 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002d44:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d46:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d48:	fa41 f282 	sxtab	r2, r1, r2
 8002d4c:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d4e:	4770      	bx	lr
	}else{
		return 8;
 8002d50:	2008      	movs	r0, #8
	}
}
 8002d52:	4770      	bx	lr

08002d54 <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002d54:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002d56:	b430      	push	{r4, r5}
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002d58:	f002 050f 	and.w	r5, r2, #15
 8002d5c:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002d60:	441a      	add	r2, r3
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002d62:	1963      	adds	r3, r4, r5
 8002d64:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002d66:	f991 3000 	ldrsb.w	r3, [r1]
 8002d6a:	bfc8      	it	gt
 8002d6c:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002d70:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002d72:	b2d2      	uxtb	r2, r2
	(*n) &= ~(0x1 << bit);
 8002d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002d78:	bfc8      	it	gt
 8002d7a:	f043 0310 	orrgt.w	r3, r3, #16
 8002d7e:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002d80:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d82:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d84:	b122      	cbz	r2, 8002d90 <vGBFunctionADD+0x3c>
	(*n) &= ~(0x1 << bit);
 8002d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002d8a:	bc30      	pop	{r4, r5}
 8002d8c:	700b      	strb	r3, [r1, #0]
 8002d8e:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002d94:	bc30      	pop	{r4, r5}
 8002d96:	700b      	strb	r3, [r1, #0]
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002d9c:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002d9e:	7804      	ldrb	r4, [r0, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002da0:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002da4:	780b      	ldrb	r3, [r1, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002da6:	f004 050f 	and.w	r5, r4, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002daa:	4422      	add	r2, r4
 8002dac:	f3c3 1400 	ubfx	r4, r3, #4, #1
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002db0:	4435      	add	r5, r6
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002db2:	4422      	add	r2, r4
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002db4:	2d0f      	cmp	r5, #15
	(*n) |= (0x1 << bit);
 8002db6:	bfc8      	it	gt
 8002db8:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002dbc:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002dbe:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002dc0:	b25b      	sxtb	r3, r3
	(*n) &= ~(0x1 << bit);
 8002dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002dc6:	bfc8      	it	gt
 8002dc8:	f043 0310 	orrgt.w	r3, r3, #16
 8002dcc:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002dce:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002dd0:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dd2:	b122      	cbz	r2, 8002dde <vGBFunctionADC+0x42>
	(*n) &= ~(0x1 << bit);
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002dd8:	bc70      	pop	{r4, r5, r6}
 8002dda:	700b      	strb	r3, [r1, #0]
 8002ddc:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002de2:	bc70      	pop	{r4, r5, r6}
 8002de4:	700b      	strb	r3, [r1, #0]
 8002de6:	4770      	bx	lr

08002de8 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002de8:	7803      	ldrb	r3, [r0, #0]
 8002dea:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002dec:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002dee:	d21d      	bcs.n	8002e2c <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002df0:	f991 3000 	ldrsb.w	r3, [r1]
 8002df4:	f043 0310 	orr.w	r3, r3, #16
 8002df8:	b2dc      	uxtb	r4, r3
 8002dfa:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002dfc:	f002 050f 	and.w	r5, r2, #15
 8002e00:	7804      	ldrb	r4, [r0, #0]
 8002e02:	f004 040f 	and.w	r4, r4, #15
 8002e06:	42a5      	cmp	r5, r4
 8002e08:	d920      	bls.n	8002e4c <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002e12:	7803      	ldrb	r3, [r0, #0]
 8002e14:	1a9a      	subs	r2, r3, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e1a:	b172      	cbz	r2, 8002e3a <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002e1c:	780b      	ldrb	r3, [r1, #0]
 8002e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002e26:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002e28:	700b      	strb	r3, [r1, #0]
}
 8002e2a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002e2c:	f991 4000 	ldrsb.w	r4, [r1]
 8002e30:	f024 0310 	bic.w	r3, r4, #16
 8002e34:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002e38:	e7df      	b.n	8002dfa <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002e3a:	f991 3000 	ldrsb.w	r3, [r1]
 8002e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002e46:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002e48:	700b      	strb	r3, [r1, #0]
}
 8002e4a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002e4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002e50:	e7de      	b.n	8002e10 <vGBFunctionSUB+0x28>
 8002e52:	bf00      	nop

08002e54 <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002e54:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e56:	b430      	push	{r4, r5}
	return ((n >> bit) & 0x1);
 8002e58:	f3c3 1500 	ubfx	r5, r3, #4, #1
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002e5c:	7804      	ldrb	r4, [r0, #0]
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002e5e:	442a      	add	r2, r5
 8002e60:	b2d2      	uxtb	r2, r2
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002e62:	4294      	cmp	r4, r2
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002e64:	f002 050f 	and.w	r5, r2, #15
	(*n) |= (0x1 << bit);
 8002e68:	bf34      	ite	cc
 8002e6a:	f043 0310 	orrcc.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002e6e:	f023 0310 	biccs.w	r3, r3, #16
 8002e72:	b25c      	sxtb	r4, r3
 8002e74:	700b      	strb	r3, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002e76:	7803      	ldrb	r3, [r0, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	429d      	cmp	r5, r3
 8002e7e:	d910      	bls.n	8002ea2 <vGBFunctionSBC+0x4e>
	(*n) |= (0x1 << bit);
 8002e80:	f044 0320 	orr.w	r3, r4, #32
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002e88:	7803      	ldrb	r3, [r0, #0]
 8002e8a:	1a9a      	subs	r2, r3, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e90:	b152      	cbz	r2, 8002ea8 <vGBFunctionSBC+0x54>
	(*n) &= ~(0x1 << bit);
 8002e92:	780b      	ldrb	r3, [r1, #0]
 8002e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002e9c:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002e9e:	700b      	strb	r3, [r1, #0]
}
 8002ea0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002ea2:	f004 03df 	and.w	r3, r4, #223	; 0xdf
}
 8002ea6:	e7ee      	b.n	8002e86 <vGBFunctionSBC+0x32>
	(*n) |= (0x1 << bit);
 8002ea8:	f991 3000 	ldrsb.w	r3, [r1]
 8002eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002eb4:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002eb6:	700b      	strb	r3, [r1, #0]
}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8002ebc:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ec0:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8002ec2:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ec4:	f002 040f 	and.w	r4, r2, #15
 8002ec8:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8002ecc:	bf8c      	ite	hi
 8002ece:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002ed2:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ed6:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8002ed8:	bf8c      	ite	hi
 8002eda:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ede:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8002ee2:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8002ee4:	bf0c      	ite	eq
 8002ee6:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8002eea:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002ef2:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002ef4:	700b      	strb	r3, [r1, #0]
}
 8002ef6:	4770      	bx	lr

08002ef8 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002efc:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002efe:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002f00:	f000 fa26 	bl	8003350 <ucGBMemoryRead>
 8002f04:	8823      	ldrh	r3, [r4, #0]
 8002f06:	4605      	mov	r5, r0
 8002f08:	1c58      	adds	r0, r3, #1
 8002f0a:	b280      	uxth	r0, r0
 8002f0c:	f000 fa20 	bl	8003350 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8002f10:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002f14:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8002f16:	8823      	ldrh	r3, [r4, #0]
 8002f18:	3302      	adds	r3, #2
 8002f1a:	8023      	strh	r3, [r4, #0]
}
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	bf00      	nop

08002f20 <vGBFunctionPOP>:
 8002f20:	f7ff bfea 	b.w	8002ef8 <vGBFunctionRET>

08002f24 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8002f24:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002f26:	09db      	lsrs	r3, r3, #7
 8002f28:	d102      	bne.n	8002f30 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8002f2a:	8002      	strh	r2, [r0, #0]
		return 16;
 8002f2c:	2010      	movs	r0, #16
 8002f2e:	4770      	bx	lr
		return 12;
 8002f30:	200c      	movs	r0, #12
	}
}
 8002f32:	4770      	bx	lr

08002f34 <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8002f38:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8002f3a:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8002f3c:	8809      	ldrh	r1, [r1, #0]
 8002f3e:	3801      	subs	r0, #1
 8002f40:	0a09      	lsrs	r1, r1, #8
 8002f42:	b280      	uxth	r0, r0
 8002f44:	f000 f9e8 	bl	8003318 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8002f48:	8820      	ldrh	r0, [r4, #0]
 8002f4a:	7829      	ldrb	r1, [r5, #0]
 8002f4c:	3802      	subs	r0, #2
 8002f4e:	b280      	uxth	r0, r0
 8002f50:	f000 f9e2 	bl	8003318 <vGBMemoryWrite>
	*regSP -= 2;
 8002f54:	8823      	ldrh	r3, [r4, #0]
 8002f56:	3b02      	subs	r3, #2
 8002f58:	8023      	strh	r3, [r4, #0]
}
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}

08002f5c <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8002f5c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8002f5e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002f60:	09db      	lsrs	r3, r3, #7
 8002f62:	d001      	beq.n	8002f68 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 8002f64:	200c      	movs	r0, #12
}
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	f7ff ffe1 	bl	8002f34 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8002f72:	8820      	ldrh	r0, [r4, #0]
 8002f74:	3802      	subs	r0, #2
 8002f76:	b280      	uxth	r0, r0
 8002f78:	f000 f9ea 	bl	8003350 <ucGBMemoryRead>
 8002f7c:	8823      	ldrh	r3, [r4, #0]
 8002f7e:	4605      	mov	r5, r0
 8002f80:	1e58      	subs	r0, r3, #1
 8002f82:	b280      	uxth	r0, r0
 8002f84:	f000 f9e4 	bl	8003350 <ucGBMemoryRead>
 8002f88:	4603      	mov	r3, r0
		return 24;
 8002f8a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8002f8c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8002f90:	8025      	strh	r5, [r4, #0]
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}

08002f94 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 8002f94:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002f96:	09db      	lsrs	r3, r3, #7
 8002f98:	d002      	beq.n	8002fa0 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 8002f9a:	8002      	strh	r2, [r0, #0]
		return 16;
 8002f9c:	2010      	movs	r0, #16
 8002f9e:	4770      	bx	lr
	}else{
		return 12;
 8002fa0:	200c      	movs	r0, #12
	}
}
 8002fa2:	4770      	bx	lr

08002fa4 <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8002fa4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8002fa6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002fa8:	09db      	lsrs	r3, r3, #7
 8002faa:	d101      	bne.n	8002fb0 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8002fac:	200c      	movs	r0, #12
	}
}
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7ff ffbd 	bl	8002f34 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8002fba:	8820      	ldrh	r0, [r4, #0]
 8002fbc:	3802      	subs	r0, #2
 8002fbe:	b280      	uxth	r0, r0
 8002fc0:	f000 f9c6 	bl	8003350 <ucGBMemoryRead>
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	1e58      	subs	r0, r3, #1
 8002fca:	b280      	uxth	r0, r0
 8002fcc:	f000 f9c0 	bl	8003350 <ucGBMemoryRead>
 8002fd0:	4603      	mov	r3, r0
		return 24;
 8002fd2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8002fd4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8002fd8:	8025      	strh	r5, [r4, #0]
}
 8002fda:	bd38      	pop	{r3, r4, r5, pc}

08002fdc <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8002fdc:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002fde:	06db      	lsls	r3, r3, #27
 8002fe0:	d402      	bmi.n	8002fe8 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8002fe2:	8002      	strh	r2, [r0, #0]
		return 16;
 8002fe4:	2010      	movs	r0, #16
 8002fe6:	4770      	bx	lr
		return 12;
 8002fe8:	200c      	movs	r0, #12
	}
}
 8002fea:	4770      	bx	lr

08002fec <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8002fec:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8002fee:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002ff0:	06db      	lsls	r3, r3, #27
 8002ff2:	d501      	bpl.n	8002ff8 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 8002ff4:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	f7ff ff99 	bl	8002f34 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003002:	8820      	ldrh	r0, [r4, #0]
 8003004:	3802      	subs	r0, #2
 8003006:	b280      	uxth	r0, r0
 8003008:	f000 f9a2 	bl	8003350 <ucGBMemoryRead>
 800300c:	8823      	ldrh	r3, [r4, #0]
 800300e:	4605      	mov	r5, r0
 8003010:	1e58      	subs	r0, r3, #1
 8003012:	b280      	uxth	r0, r0
 8003014:	f000 f99c 	bl	8003350 <ucGBMemoryRead>
 8003018:	4603      	mov	r3, r0
		return 24;
 800301a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800301c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003020:	8025      	strh	r5, [r4, #0]
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}

08003024 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 8003024:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003026:	06db      	lsls	r3, r3, #27
 8003028:	d502      	bpl.n	8003030 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 800302a:	8002      	strh	r2, [r0, #0]
		return 16;
 800302c:	2010      	movs	r0, #16
 800302e:	4770      	bx	lr
	}else{
		return 12;
 8003030:	200c      	movs	r0, #12
	}
}
 8003032:	4770      	bx	lr

08003034 <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003034:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003036:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003038:	06db      	lsls	r3, r3, #27
 800303a:	d401      	bmi.n	8003040 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 800303c:	200c      	movs	r0, #12
	}
}
 800303e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003040:	4604      	mov	r4, r0
 8003042:	4610      	mov	r0, r2
 8003044:	4621      	mov	r1, r4
 8003046:	f7ff ff75 	bl	8002f34 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800304a:	8820      	ldrh	r0, [r4, #0]
 800304c:	3802      	subs	r0, #2
 800304e:	b280      	uxth	r0, r0
 8003050:	f000 f97e 	bl	8003350 <ucGBMemoryRead>
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	4605      	mov	r5, r0
 8003058:	1e58      	subs	r0, r3, #1
 800305a:	b280      	uxth	r0, r0
 800305c:	f000 f978 	bl	8003350 <ucGBMemoryRead>
 8003060:	4603      	mov	r3, r0
		return 24;
 8003062:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003064:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003068:	8025      	strh	r5, [r4, #0]
}
 800306a:	bd38      	pop	{r3, r4, r5, pc}

0800306c <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 800306c:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800306e:	8805      	ldrh	r5, [r0, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <vGBFunctionADD_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003072:	fa45 f582 	sxtab	r5, r5, r2
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003076:	402b      	ands	r3, r5
 8003078:	b1bb      	cbz	r3, 80030aa <vGBFunctionADD_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 800307a:	f991 3000 	ldrsb.w	r3, [r1]
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	b2dc      	uxtb	r4, r3
 8003084:	700c      	strb	r4, [r1, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8003086:	f002 020f 	and.w	r2, r2, #15
 800308a:	8804      	ldrh	r4, [r0, #0]
 800308c:	f004 040f 	and.w	r4, r4, #15
 8003090:	4422      	add	r2, r4
 8003092:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8003094:	bfcc      	ite	gt
 8003096:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800309a:	f023 0320 	bicle.w	r3, r3, #32
 800309e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a2:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP = tempRes & 0xFFFF;
 80030a4:	8005      	strh	r5, [r0, #0]
}
 80030a6:	bc30      	pop	{r4, r5}
 80030a8:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80030aa:	f991 4000 	ldrsb.w	r4, [r1]
 80030ae:	f024 0310 	bic.w	r3, r4, #16
 80030b2:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 80030b6:	e7e5      	b.n	8003084 <vGBFunctionADD_SP_r8+0x18>
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80030bc:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 80030be:	880d      	ldrh	r5, [r1, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80030c0:	4c11      	ldr	r4, [pc, #68]	; (8003108 <vGBFunctionLD_HL_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 80030c2:	fa45 f583 	sxtab	r5, r5, r3
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80030c6:	402c      	ands	r4, r5
 80030c8:	b1bc      	cbz	r4, 80030fa <vGBFunctionLD_HL_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 80030ca:	f992 4000 	ldrsb.w	r4, [r2]
 80030ce:	f044 0410 	orr.w	r4, r4, #16
 80030d2:	b2e6      	uxtb	r6, r4
 80030d4:	7016      	strb	r6, [r2, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	8809      	ldrh	r1, [r1, #0]
 80030dc:	f001 010f 	and.w	r1, r1, #15
 80030e0:	440b      	add	r3, r1
 80030e2:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 80030e4:	bfcc      	ite	gt
 80030e6:	f044 0420 	orrgt.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 80030ea:	f024 0420 	bicle.w	r4, r4, #32
 80030ee:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80030f2:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regHL = tempRes & 0xFFFF;
 80030f4:	8005      	strh	r5, [r0, #0]
}
 80030f6:	bc70      	pop	{r4, r5, r6}
 80030f8:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80030fa:	f992 6000 	ldrsb.w	r6, [r2]
 80030fe:	f026 0410 	bic.w	r4, r6, #16
 8003102:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 8003106:	e7e5      	b.n	80030d4 <vGBFunctionLD_HL_SP_r8+0x18>
 8003108:	ffff0000 	.word	0xffff0000

0800310c <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 800310c:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 800310e:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003110:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003114:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003118:	d10a      	bne.n	8003130 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 800311a:	f991 3000 	ldrsb.w	r3, [r1]
 800311e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003122:	b152      	cbz	r2, 800313a <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 8003124:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800312e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003130:	780b      	ldrb	r3, [r1, #0]
 8003132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003136:	2a00      	cmp	r2, #0
 8003138:	d1f4      	bne.n	8003124 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 800313a:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 800313e:	700b      	strb	r3, [r1, #0]
}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop

08003144 <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 8003144:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 8003146:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 800314a:	d509      	bpl.n	8003160 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 800314c:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 800314e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 8003152:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 8003156:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	700b      	strb	r3, [r1, #0]
}
 800315e:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003160:	b942      	cbnz	r2, 8003174 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 8003162:	f991 3000 	ldrsb.w	r3, [r1]
 8003166:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800316a:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 800316e:	4610      	mov	r0, r2
 8003170:	700b      	strb	r3, [r1, #0]
 8003172:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003174:	780b      	ldrb	r3, [r1, #0]
 8003176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800317a:	e7f6      	b.n	800316a <ucGBFunctionRRC+0x26>

0800317c <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 800317c:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800317e:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 8003182:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 8003186:	bf14      	ite	ne
 8003188:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800318c:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 8003190:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 8003194:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003196:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800319a:	d105      	bne.n	80031a8 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 800319c:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80031a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80031a6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	700b      	strb	r3, [r1, #0]
}
 80031ae:	4770      	bx	lr

080031b0 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 80031b0:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031b2:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 80031b6:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 80031ba:	bf14      	ite	ne
 80031bc:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80031c0:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 80031c4:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 80031c6:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 80031c8:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80031cc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80031d0:	d105      	bne.n	80031de <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 80031d2:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80031dc:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	700b      	strb	r3, [r1, #0]
}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop

080031e8 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031e8:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 80031ea:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 80031ee:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 80031f2:	bf4c      	ite	mi
 80031f4:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80031f8:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80031fc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003200:	d105      	bne.n	800320e <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 8003202:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320a:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800320c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	700b      	strb	r3, [r1, #0]
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 8003218:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800321c:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003220:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 8003224:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003228:	bf14      	ite	ne
 800322a:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 800322e:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003232:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003236:	d105      	bne.n	8003244 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003238:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003242:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003244:	f002 031f 	and.w	r3, r2, #31
 8003248:	700b      	strb	r3, [r1, #0]
}
 800324a:	4770      	bx	lr

0800324c <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 800324c:	0903      	lsrs	r3, r0, #4
 800324e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003252:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003256:	d107      	bne.n	8003268 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003258:	f991 3000 	ldrsb.w	r3, [r1]
 800325c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 8003266:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003268:	780b      	ldrb	r3, [r1, #0]
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	700b      	strb	r3, [r1, #0]
}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop

08003278 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003278:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 800327a:	f991 3000 	ldrsb.w	r3, [r1]
 800327e:	bf4c      	ite	mi
 8003280:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003284:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003288:	0840      	lsrs	r0, r0, #1
 800328a:	d105      	bne.n	8003298 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 800328c:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003294:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003296:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	700b      	strb	r3, [r1, #0]
}
 800329e:	4770      	bx	lr

080032a0 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80032a0:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 80032a4:	07cb      	lsls	r3, r1, #31
 80032a6:	d508      	bpl.n	80032ba <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80032a8:	7813      	ldrb	r3, [r2, #0]
 80032aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80032b2:	f043 0320 	orr.w	r3, r3, #32
 80032b6:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 80032b8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80032ba:	f992 3000 	ldrsb.w	r3, [r2]
 80032be:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80032c6:	f043 0320 	orr.w	r3, r3, #32
 80032ca:	7013      	strb	r3, [r2, #0]
}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 80032d0:	b510      	push	{r4, lr}
 80032d2:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80032d4:	f000 f83c 	bl	8003350 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 80032d8:	2301      	movs	r3, #1
 80032da:	fa03 f104 	lsl.w	r1, r3, r4
 80032de:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 80032e2:	b2c0      	uxtb	r0, r0
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop

080032e8 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 80032e8:	b510      	push	{r4, lr}
 80032ea:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80032ec:	f000 f830 	bl	8003350 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 80032f0:	2301      	movs	r3, #1
 80032f2:	fa03 f104 	lsl.w	r1, r3, r4
 80032f6:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 80032f8:	b2c0      	uxtb	r0, r0
 80032fa:	bd10      	pop	{r4, pc}

080032fc <vGBMemorySetOP>:
registers reg;
memory mem;
uint8_t current_op;

void vGBMemorySetOP(uint8_t op){
	current_op = op;
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <vGBMemorySetOP+0x8>)
 80032fe:	7018      	strb	r0, [r3, #0]
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	240092ac 	.word	0x240092ac

08003308 <vGBMemoryLoad>:

// loads data into memory map
void vGBMemoryLoad(const void* data, uint32_t size){
 8003308:	4603      	mov	r3, r0
 800330a:	460a      	mov	r2, r1
	memcpy(mem.ram , data, size);
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <vGBMemoryLoad+0xc>)
 800330e:	4619      	mov	r1, r3
 8003310:	f005 b976 	b.w	8008600 <memcpy>
 8003314:	240092bc 	.word	0x240092bc

08003318 <vGBMemoryWrite>:
}

void vGBMemoryWrite(uint16_t address, uint8_t data){
	mem.ram[address] = data;
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <vGBMemoryWrite+0x8>)
 800331a:	5419      	strb	r1, [r3, r0]
}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	240092bc 	.word	0x240092bc

08003324 <vGBMemorySetBit>:

void vGBMemorySetBit(uint16_t address, uint8_t bit){
	mem.ram[address] |= (0x1 << bit);
 8003324:	2301      	movs	r3, #1
 8003326:	4a03      	ldr	r2, [pc, #12]	; (8003334 <vGBMemorySetBit+0x10>)
 8003328:	fa03 f101 	lsl.w	r1, r3, r1
 800332c:	5c13      	ldrb	r3, [r2, r0]
 800332e:	4319      	orrs	r1, r3
 8003330:	5411      	strb	r1, [r2, r0]
}
 8003332:	4770      	bx	lr
 8003334:	240092bc 	.word	0x240092bc

08003338 <vGBMemoryResetBit>:

void vGBMemoryResetBit(uint16_t address, uint8_t bit){
	mem.ram[address] &= ~(0x1 << bit);
 8003338:	2301      	movs	r3, #1
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <vGBMemoryResetBit+0x14>)
 800333c:	fa03 f101 	lsl.w	r1, r3, r1
 8003340:	5c13      	ldrb	r3, [r2, r0]
 8003342:	ea23 0101 	bic.w	r1, r3, r1
 8003346:	5411      	strb	r1, [r2, r0]
}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	240092bc 	.word	0x240092bc

08003350 <ucGBMemoryRead>:

// reads a location from memory map
uint8_t ucGBMemoryRead(uint16_t address){
	return mem.ram[address];
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <ucGBMemoryRead+0x8>)
}
 8003352:	5c18      	ldrb	r0, [r3, r0]
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	240092bc 	.word	0x240092bc

0800335c <usGBMemoryReadShort>:

uint16_t usGBMemoryReadShort(uint16_t address){
	return *((uint16_t*) &mem.ram[address]);
 800335c:	4b01      	ldr	r3, [pc, #4]	; (8003364 <usGBMemoryReadShort+0x8>)
}
 800335e:	5a18      	ldrh	r0, [r3, r0]
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	240092bc 	.word	0x240092bc

08003368 <vGBMemoryPrint>:

void vGBMemoryPrint(){
 8003368:	b530      	push	{r4, r5, lr}
	char temp[15];
	sprintf(temp,"Opcode: 0x%.2x", current_op);
 800336a:	4b64      	ldr	r3, [pc, #400]	; (80034fc <vGBMemoryPrint+0x194>)
void vGBMemoryPrint(){
 800336c:	b085      	sub	sp, #20
	sprintf(temp,"Opcode: 0x%.2x", current_op);
 800336e:	4964      	ldr	r1, [pc, #400]	; (8003500 <vGBMemoryPrint+0x198>)
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	4668      	mov	r0, sp
 8003374:	f005 f95a 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(2), (uint8_t *) temp, LEFT_MODE);
	sprintf(temp,"AF: 0x%.4x",reg.AF);
 8003378:	4c62      	ldr	r4, [pc, #392]	; (8003504 <vGBMemoryPrint+0x19c>)
	UTIL_LCD_DisplayStringAt(500, LINE(2), (uint8_t *) temp, LEFT_MODE);
 800337a:	f004 ffd5 	bl	8008328 <UTIL_LCD_GetFont>
 800337e:	88c1      	ldrh	r1, [r0, #6]
 8003380:	2303      	movs	r3, #3
 8003382:	466a      	mov	r2, sp
 8003384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003388:	0049      	lsls	r1, r1, #1
 800338a:	f005 f883 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"AF: 0x%.4x",reg.AF);
 800338e:	8822      	ldrh	r2, [r4, #0]
 8003390:	495d      	ldr	r1, [pc, #372]	; (8003508 <vGBMemoryPrint+0x1a0>)
 8003392:	4668      	mov	r0, sp
 8003394:	f005 f94a 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(3), (uint8_t *) temp, LEFT_MODE);
 8003398:	f004 ffc6 	bl	8008328 <UTIL_LCD_GetFont>
 800339c:	88c1      	ldrh	r1, [r0, #6]
 800339e:	2303      	movs	r3, #3
 80033a0:	466a      	mov	r2, sp
 80033a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80033aa:	f005 f873 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"BC: 0x%.4x",reg.BC);
 80033ae:	8862      	ldrh	r2, [r4, #2]
 80033b0:	4956      	ldr	r1, [pc, #344]	; (800350c <vGBMemoryPrint+0x1a4>)
 80033b2:	4668      	mov	r0, sp
 80033b4:	f005 f93a 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(4), (uint8_t *) temp, LEFT_MODE);
 80033b8:	f004 ffb6 	bl	8008328 <UTIL_LCD_GetFont>
 80033bc:	88c1      	ldrh	r1, [r0, #6]
 80033be:	2303      	movs	r3, #3
 80033c0:	466a      	mov	r2, sp
 80033c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033c6:	0089      	lsls	r1, r1, #2
 80033c8:	f005 f864 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"DE: 0x%.4x",reg.DE);
 80033cc:	88a2      	ldrh	r2, [r4, #4]
 80033ce:	4950      	ldr	r1, [pc, #320]	; (8003510 <vGBMemoryPrint+0x1a8>)
 80033d0:	4668      	mov	r0, sp
 80033d2:	f005 f92b 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(5), (uint8_t *) temp, LEFT_MODE);
 80033d6:	f004 ffa7 	bl	8008328 <UTIL_LCD_GetFont>
 80033da:	88c1      	ldrh	r1, [r0, #6]
 80033dc:	2303      	movs	r3, #3
 80033de:	466a      	mov	r2, sp
 80033e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80033e8:	f005 f854 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"HL: 0x%.4x",reg.HL);
 80033ec:	88e2      	ldrh	r2, [r4, #6]
 80033ee:	4949      	ldr	r1, [pc, #292]	; (8003514 <vGBMemoryPrint+0x1ac>)
 80033f0:	4668      	mov	r0, sp
 80033f2:	f005 f91b 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(6), (uint8_t *) temp, LEFT_MODE);
 80033f6:	f004 ff97 	bl	8008328 <UTIL_LCD_GetFont>
 80033fa:	88c1      	ldrh	r1, [r0, #6]
 80033fc:	2303      	movs	r3, #3
 80033fe:	466a      	mov	r2, sp
 8003400:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003408:	0049      	lsls	r1, r1, #1
 800340a:	f005 f843 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"SP: 0x%.4x",reg.SP);
 800340e:	8922      	ldrh	r2, [r4, #8]
 8003410:	4941      	ldr	r1, [pc, #260]	; (8003518 <vGBMemoryPrint+0x1b0>)
 8003412:	4668      	mov	r0, sp
 8003414:	f005 f90a 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(7), (uint8_t *) temp, LEFT_MODE);
 8003418:	f004 ff86 	bl	8008328 <UTIL_LCD_GetFont>
 800341c:	88c1      	ldrh	r1, [r0, #6]
 800341e:	2303      	movs	r3, #3
 8003420:	466a      	mov	r2, sp
 8003422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003426:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800342a:	f005 f833 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"PC: 0x%.4x",reg.PC);
 800342e:	8962      	ldrh	r2, [r4, #10]
 8003430:	493a      	ldr	r1, [pc, #232]	; (800351c <vGBMemoryPrint+0x1b4>)
 8003432:	4668      	mov	r0, sp
 8003434:	f005 f8fa 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(8), (uint8_t *) temp, LEFT_MODE);
 8003438:	f004 ff76 	bl	8008328 <UTIL_LCD_GetFont>
 800343c:	2303      	movs	r3, #3
 800343e:	88c1      	ldrh	r1, [r0, #6]
 8003440:	466a      	mov	r2, sp
 8003442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003446:	4099      	lsls	r1, r3
 8003448:	f005 f824 	bl	8008494 <UTIL_LCD_DisplayStringAt>

	sprintf(temp," Z: 0x%.1x",checkbit(reg.F, 7));
 800344c:	7820      	ldrb	r0, [r4, #0]
 800344e:	2107      	movs	r1, #7
 8003450:	f7ff fb26 	bl	8002aa0 <checkbit>
 8003454:	4932      	ldr	r1, [pc, #200]	; (8003520 <vGBMemoryPrint+0x1b8>)
 8003456:	4602      	mov	r2, r0
 8003458:	4668      	mov	r0, sp
 800345a:	f005 f8e7 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(10), (uint8_t *) temp, LEFT_MODE);
 800345e:	f004 ff63 	bl	8008328 <UTIL_LCD_GetFont>
 8003462:	88c1      	ldrh	r1, [r0, #6]
 8003464:	2303      	movs	r3, #3
 8003466:	466a      	mov	r2, sp
 8003468:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800346c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003470:	0049      	lsls	r1, r1, #1
 8003472:	f005 f80f 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp," N: 0x%.1x",checkbit(reg.F, 6));
 8003476:	7820      	ldrb	r0, [r4, #0]
 8003478:	2106      	movs	r1, #6
 800347a:	f7ff fb11 	bl	8002aa0 <checkbit>
 800347e:	4929      	ldr	r1, [pc, #164]	; (8003524 <vGBMemoryPrint+0x1bc>)
 8003480:	4602      	mov	r2, r0
 8003482:	4668      	mov	r0, sp
 8003484:	f005 f8d2 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(11), (uint8_t *) temp, LEFT_MODE);
 8003488:	f004 ff4e 	bl	8008328 <UTIL_LCD_GetFont>
 800348c:	88c1      	ldrh	r1, [r0, #6]
 800348e:	2303      	movs	r3, #3
 8003490:	466a      	mov	r2, sp
 8003492:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800349a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800349e:	f004 fff9 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp," H: 0x%.1x",checkbit(reg.F, 5));
 80034a2:	7820      	ldrb	r0, [r4, #0]
 80034a4:	2105      	movs	r1, #5
 80034a6:	f7ff fafb 	bl	8002aa0 <checkbit>
 80034aa:	491f      	ldr	r1, [pc, #124]	; (8003528 <vGBMemoryPrint+0x1c0>)
 80034ac:	4602      	mov	r2, r0
 80034ae:	4668      	mov	r0, sp
 80034b0:	f005 f8bc 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(12), (uint8_t *) temp, LEFT_MODE);
 80034b4:	f004 ff38 	bl	8008328 <UTIL_LCD_GetFont>
 80034b8:	88c1      	ldrh	r1, [r0, #6]
 80034ba:	2303      	movs	r3, #3
 80034bc:	466a      	mov	r2, sp
 80034be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80034c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034c6:	0089      	lsls	r1, r1, #2
 80034c8:	f004 ffe4 	bl	8008494 <UTIL_LCD_DisplayStringAt>
	sprintf(temp," C: 0x%.1x",checkbit(reg.F, 4));
 80034cc:	7820      	ldrb	r0, [r4, #0]
 80034ce:	2104      	movs	r1, #4
 80034d0:	f7ff fae6 	bl	8002aa0 <checkbit>
 80034d4:	4915      	ldr	r1, [pc, #84]	; (800352c <vGBMemoryPrint+0x1c4>)
 80034d6:	4602      	mov	r2, r0
 80034d8:	4668      	mov	r0, sp
 80034da:	f005 f8a7 	bl	800862c <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(13), (uint8_t *) temp, LEFT_MODE);
 80034de:	f004 ff23 	bl	8008328 <UTIL_LCD_GetFont>
 80034e2:	88c1      	ldrh	r1, [r0, #6]
 80034e4:	466a      	mov	r2, sp
 80034e6:	2303      	movs	r3, #3
 80034e8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80034ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80034f4:	f004 ffce 	bl	8008494 <UTIL_LCD_DisplayStringAt>
}
 80034f8:	b005      	add	sp, #20
 80034fa:	bd30      	pop	{r4, r5, pc}
 80034fc:	240092ac 	.word	0x240092ac
 8003500:	08008e94 	.word	0x08008e94
 8003504:	240092b0 	.word	0x240092b0
 8003508:	08008ea4 	.word	0x08008ea4
 800350c:	08008eb0 	.word	0x08008eb0
 8003510:	08008ebc 	.word	0x08008ebc
 8003514:	08008ec8 	.word	0x08008ec8
 8003518:	08008ed4 	.word	0x08008ed4
 800351c:	08008ee0 	.word	0x08008ee0
 8003520:	08008eec 	.word	0x08008eec
 8003524:	08008ef8 	.word	0x08008ef8
 8003528:	08008f04 	.word	0x08008f04
 800352c:	08008f10 	.word	0x08008f10

08003530 <setMode.part.0>:
}

void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003530:	2101      	movs	r1, #1
 8003532:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 8003536:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003538:	f7ff fefe 	bl	8003338 <vGBMemoryResetBit>
 800353c:	2100      	movs	r1, #0
 800353e:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 8003542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003546:	f7ff bef7 	b.w	8003338 <vGBMemoryResetBit>
 800354a:	bf00      	nop

0800354c <vCheckBGP>:
void vCheckBGP(){
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 800354e:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 8003552:	4f0e      	ldr	r7, [pc, #56]	; (800358c <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003554:	f7ff fefc 	bl	8003350 <ucGBMemoryRead>
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003558:	4e0d      	ldr	r6, [pc, #52]	; (8003590 <vCheckBGP+0x44>)
 800355a:	490e      	ldr	r1, [pc, #56]	; (8003594 <vCheckBGP+0x48>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 800355c:	2200      	movs	r2, #0
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 800355e:	4d0e      	ldr	r5, [pc, #56]	; (8003598 <vCheckBGP+0x4c>)
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003560:	4c0e      	ldr	r4, [pc, #56]	; (800359c <vCheckBGP+0x50>)
		switch ((BGP >> (i*2)) & 0x03) {
 8003562:	fa40 f302 	asr.w	r3, r0, r2
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d00c      	beq.n	8003588 <vCheckBGP+0x3c>
 800356e:	2b03      	cmp	r3, #3
 8003570:	d008      	beq.n	8003584 <vCheckBGP+0x38>
 8003572:	2b01      	cmp	r3, #1
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003574:	bf14      	ite	ne
 8003576:	600c      	strne	r4, [r1, #0]
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 8003578:	600d      	streq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 800357a:	3202      	adds	r2, #2
 800357c:	3104      	adds	r1, #4
 800357e:	2a08      	cmp	r2, #8
 8003580:	d1ef      	bne.n	8003562 <vCheckBGP+0x16>
}
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003584:	600e      	str	r6, [r1, #0]
 8003586:	e7f8      	b.n	800357a <vCheckBGP+0x2e>
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 8003588:	600f      	str	r7, [r1, #0]
 800358a:	e7f6      	b.n	800357a <vCheckBGP+0x2e>
 800358c:	ff306230 	.word	0xff306230
 8003590:	ff0f380f 	.word	0xff0f380f
 8003594:	240192c0 	.word	0x240192c0
 8003598:	ff8bac0f 	.word	0xff8bac0f
 800359c:	ff9bbc0f 	.word	0xff9bbc0f

080035a0 <getTileLineData>:
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035a0:	b538      	push	{r3, r4, r5, lr}
	if (BackWinTileDataAddr == 0x8000){
 80035a2:	4d10      	ldr	r5, [pc, #64]	; (80035e4 <getTileLineData+0x44>)
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035a4:	460c      	mov	r4, r1
	if (BackWinTileDataAddr == 0x8000){
 80035a6:	882b      	ldrh	r3, [r5, #0]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return usGBMemoryReadShort(BackWinTileDataAddr + ucGBMemoryRead(BackTileDisplayAddr + tile_offset) + line_offset);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <getTileLineData+0x48>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	4418      	add	r0, r3
 80035b2:	b280      	uxth	r0, r0
	if (BackWinTileDataAddr == 0x8000){
 80035b4:	d00b      	beq.n	80035ce <getTileLineData+0x2e>
		int8_t temp  = ucGBMemoryRead(BackTileDisplayAddr + tile_offset);
 80035b6:	f7ff fecb 	bl	8003350 <ucGBMemoryRead>
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035ba:	8829      	ldrh	r1, [r5, #0]
		uint8_t temp2 = temp + 128;
 80035bc:	3880      	subs	r0, #128	; 0x80
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035be:	440c      	add	r4, r1
 80035c0:	fa54 f080 	uxtab	r0, r4, r0
}
 80035c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035c8:	b280      	uxth	r0, r0
 80035ca:	f7ff bec7 	b.w	800335c <usGBMemoryReadShort>
		return usGBMemoryReadShort(BackWinTileDataAddr + ucGBMemoryRead(BackTileDisplayAddr + tile_offset) + line_offset);
 80035ce:	f7ff febf 	bl	8003350 <ucGBMemoryRead>
 80035d2:	8829      	ldrh	r1, [r5, #0]
 80035d4:	440c      	add	r4, r1
 80035d6:	4420      	add	r0, r4
}
 80035d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + ucGBMemoryRead(BackTileDisplayAddr + tile_offset) + line_offset);
 80035dc:	b280      	uxth	r0, r0
 80035de:	f7ff bebd 	b.w	800335c <usGBMemoryReadShort>
 80035e2:	bf00      	nop
 80035e4:	240192be 	.word	0x240192be
 80035e8:	240192d0 	.word	0x240192d0

080035ec <LYC_check>:
void LYC_check(uint8_t ly){
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 80035f0:	f64f 7045 	movw	r0, #65349	; 0xff45
 80035f4:	f7ff feac 	bl	8003350 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 80035f8:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 80035fa:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 80035fc:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003600:	d003      	beq.n	800360a <LYC_check+0x1e>
}
 8003602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 8003606:	f7ff be97 	b.w	8003338 <vGBMemoryResetBit>
}
 800360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemorySetBit(STAT_ADDR, 2);
 800360e:	f7ff be89 	b.w	8003324 <vGBMemorySetBit>
 8003612:	bf00      	nop

08003614 <setMode>:
void setMode(uint8_t mode){
 8003614:	b508      	push	{r3, lr}
	Mode = mode;
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <setMode+0x64>)
 8003618:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 800361a:	2803      	cmp	r0, #3
 800361c:	d82b      	bhi.n	8003676 <setMode+0x62>
 800361e:	e8df f000 	tbb	[pc, r0]
 8003622:	1202      	.short	0x1202
 8003624:	061e      	.short	0x061e
}
 8003626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800362a:	f7ff bf81 	b.w	8003530 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 800362e:	2101      	movs	r1, #1
 8003630:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003634:	f7ff fe76 	bl	8003324 <vGBMemorySetBit>
 8003638:	2100      	movs	r1, #0
 800363a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800363e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003642:	f7ff be6f 	b.w	8003324 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003646:	2101      	movs	r1, #1
 8003648:	f64f 7041 	movw	r0, #65345	; 0xff41
 800364c:	f7ff fe74 	bl	8003338 <vGBMemoryResetBit>
 8003650:	2100      	movs	r1, #0
 8003652:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 800365a:	f7ff be63 	b.w	8003324 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800365e:	2101      	movs	r1, #1
 8003660:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003664:	f7ff fe5e 	bl	8003324 <vGBMemorySetBit>
 8003668:	2100      	movs	r1, #0
 800366a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800366e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003672:	f7ff be61 	b.w	8003338 <vGBMemoryResetBit>
}
 8003676:	bd08      	pop	{r3, pc}
 8003678:	240192bc 	.word	0x240192bc

0800367c <draw_line>:

void draw_line(uint8_t ly, uint8_t SCX, uint8_t SCY){


	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 800367c:	4402      	add	r2, r0
void draw_line(uint8_t ly, uint8_t SCX, uint8_t SCY){
 800367e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003682:	4605      	mov	r5, r0
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 8003684:	10d3      	asrs	r3, r2, #3
 8003686:	08cf      	lsrs	r7, r1, #3
	//uint8_t line_offset = (SCY % 8) * 2;									                   // gives the line offset in the tile
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;
 8003688:	f002 0207 	and.w	r2, r2, #7
 800368c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003690:	f001 0407 	and.w	r4, r1, #7
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 8003694:	eb07 1743 	add.w	r7, r7, r3, lsl #5

	uint16_t tile_data = getTileLineData(tile_offset, line_offset);           // tile data holds tile line information

		for(int j = 0; j < 160; j++){
			switch ((tile_data << pixl_offset) & 0x8080){
 8003698:	f248 0680 	movw	r6, #32896	; 0x8080
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;
 800369c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
				case 0x0000: gb_frame[j + (ly * 160)] = color_to_pallette[0]; break;
				case 0x0080: gb_frame[j + (ly * 160)] = color_to_pallette[2]; break;
				case 0x8000: gb_frame[j + (ly * 160)] = color_to_pallette[1]; break;
 80036a0:	f8df b088 	ldr.w	fp, [pc, #136]	; 800372c <draw_line+0xb0>
 80036a4:	01ed      	lsls	r5, r5, #7
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);           // tile data holds tile line information
 80036a6:	4638      	mov	r0, r7
 80036a8:	4651      	mov	r1, sl
				case 0x8000: gb_frame[j + (ly * 160)] = color_to_pallette[1]; break;
 80036aa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003730 <draw_line+0xb4>
 80036ae:	f505 7820 	add.w	r8, r5, #640	; 0x280
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);           // tile data holds tile line information
 80036b2:	f7ff ff75 	bl	80035a0 <getTileLineData>
		for(int j = 0; j < 160; j++){
 80036b6:	e00d      	b.n	80036d4 <draw_line+0x58>
			switch ((tile_data << pixl_offset) & 0x8080){
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d104      	bne.n	80036c6 <draw_line+0x4a>
				case 0x0080: gb_frame[j + (ly * 160)] = color_to_pallette[2]; break;
 80036bc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80036c0:	f8d9 3000 	ldr.w	r3, [r9]
 80036c4:	515a      	str	r2, [r3, r5]
				case 0x8080: gb_frame[j + (ly * 160)] = color_to_pallette[3]; break;
				default: break;
			}

			pixl_offset++;
 80036c6:	3401      	adds	r4, #1
 80036c8:	b2e4      	uxtb	r4, r4

			if(pixl_offset == 8){
 80036ca:	2c08      	cmp	r4, #8
 80036cc:	d014      	beq.n	80036f8 <draw_line+0x7c>
		for(int j = 0; j < 160; j++){
 80036ce:	3504      	adds	r5, #4
 80036d0:	45a8      	cmp	r8, r5
 80036d2:	d01b      	beq.n	800370c <draw_line+0x90>
			switch ((tile_data << pixl_offset) & 0x8080){
 80036d4:	fa00 f304 	lsl.w	r3, r0, r4
 80036d8:	4033      	ands	r3, r6
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d01f      	beq.n	8003720 <draw_line+0xa4>
 80036e0:	dc16      	bgt.n	8003710 <draw_line+0x94>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e8      	bne.n	80036b8 <draw_line+0x3c>
			pixl_offset++;
 80036e6:	3401      	adds	r4, #1
				case 0x0000: gb_frame[j + (ly * 160)] = color_to_pallette[0]; break;
 80036e8:	f8db 2000 	ldr.w	r2, [fp]
 80036ec:	f8d9 3000 	ldr.w	r3, [r9]
			pixl_offset++;
 80036f0:	b2e4      	uxtb	r4, r4
				case 0x0000: gb_frame[j + (ly * 160)] = color_to_pallette[0]; break;
 80036f2:	515a      	str	r2, [r3, r5]
			if(pixl_offset == 8){
 80036f4:	2c08      	cmp	r4, #8
 80036f6:	d1ea      	bne.n	80036ce <draw_line+0x52>
				tile_offset++;
 80036f8:	3701      	adds	r7, #1
 80036fa:	3504      	adds	r5, #4
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset);
 80036fc:	4651      	mov	r1, sl
				pixl_offset = 0;
 80036fe:	2400      	movs	r4, #0
				tile_offset++;
 8003700:	b2bf      	uxth	r7, r7
				tile_data = getTileLineData(tile_offset, line_offset);
 8003702:	4638      	mov	r0, r7
 8003704:	f7ff ff4c 	bl	80035a0 <getTileLineData>
		for(int j = 0; j < 160; j++){
 8003708:	45a8      	cmp	r8, r5
 800370a:	d1e3      	bne.n	80036d4 <draw_line+0x58>

			}
		}

}
 800370c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch ((tile_data << pixl_offset) & 0x8080){
 8003710:	42b3      	cmp	r3, r6
 8003712:	d1d8      	bne.n	80036c6 <draw_line+0x4a>
				case 0x8080: gb_frame[j + (ly * 160)] = color_to_pallette[3]; break;
 8003714:	f8db 200c 	ldr.w	r2, [fp, #12]
 8003718:	f8d9 3000 	ldr.w	r3, [r9]
 800371c:	515a      	str	r2, [r3, r5]
 800371e:	e7d2      	b.n	80036c6 <draw_line+0x4a>
				case 0x8000: gb_frame[j + (ly * 160)] = color_to_pallette[1]; break;
 8003720:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003724:	f8d9 3000 	ldr.w	r3, [r9]
 8003728:	515a      	str	r2, [r3, r5]
 800372a:	e7cc      	b.n	80036c6 <draw_line+0x4a>
 800372c:	240192c0 	.word	0x240192c0
 8003730:	24001008 	.word	0x24001008

08003734 <gbPPUStep>:
void gbPPUStep(){
 8003734:	b538      	push	{r3, r4, r5, lr}
	if (n == 0){
 8003736:	4c4b      	ldr	r4, [pc, #300]	; (8003864 <gbPPUStep+0x130>)
 8003738:	7821      	ldrb	r1, [r4, #0]
 800373a:	2900      	cmp	r1, #0
 800373c:	d060      	beq.n	8003800 <gbPPUStep+0xcc>
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 800373e:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003742:	f7ff fe05 	bl	8003350 <ucGBMemoryRead>
 8003746:	0603      	lsls	r3, r0, #24
 8003748:	d400      	bmi.n	800374c <gbPPUStep+0x18>
}
 800374a:	bd38      	pop	{r3, r4, r5, pc}
		if (tStates > 456){												// end of hblank or vblank
 800374c:	4d46      	ldr	r5, [pc, #280]	; (8003868 <gbPPUStep+0x134>)
			ly++;
 800374e:	4c47      	ldr	r4, [pc, #284]	; (800386c <gbPPUStep+0x138>)
		if (tStates > 456){												// end of hblank or vblank
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 8003756:	d90d      	bls.n	8003774 <gbPPUStep+0x40>
			ly++;
 8003758:	7821      	ldrb	r1, [r4, #0]
 800375a:	3101      	adds	r1, #1
 800375c:	b2c9      	uxtb	r1, r1
			if(ly > 153){												// end of vblank
 800375e:	2999      	cmp	r1, #153	; 0x99
			ly++;
 8003760:	7021      	strb	r1, [r4, #0]
			if(ly > 153){												// end of vblank
 8003762:	d85f      	bhi.n	8003824 <gbPPUStep+0xf0>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 8003764:	f64f 7044 	movw	r0, #65348	; 0xff44
 8003768:	f7ff fdd6 	bl	8003318 <vGBMemoryWrite>
			tStates -= 456;
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003772:	602b      	str	r3, [r5, #0]
		LYC_check(ly);
 8003774:	7820      	ldrb	r0, [r4, #0]
 8003776:	f7ff ff39 	bl	80035ec <LYC_check>
		if (ly > 143){													// vblank
 800377a:	7823      	ldrb	r3, [r4, #0]
 800377c:	2b8f      	cmp	r3, #143	; 0x8f
 800377e:	d85c      	bhi.n	800383a <gbPPUStep+0x106>
			if (tStates <= 80 && Mode != MODE_2)											// oam
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	2b50      	cmp	r3, #80	; 0x50
 8003784:	d945      	bls.n	8003812 <gbPPUStep+0xde>
			else if(tStates > 80 && tStates <= 252 && Mode != MODE_3){										// vram
 8003786:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 800378a:	2aab      	cmp	r2, #171	; 0xab
 800378c:	d85a      	bhi.n	8003844 <gbPPUStep+0x110>
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <gbPPUStep+0x13c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d0d9      	beq.n	800374a <gbPPUStep+0x16>
				vCheckBGP();
 8003796:	f7ff fed9 	bl	800354c <vCheckBGP>
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 800379a:	f64f 7040 	movw	r0, #65344	; 0xff40
 800379e:	f7ff fdd7 	bl	8003350 <ucGBMemoryRead>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b33      	ldr	r3, [pc, #204]	; (8003874 <gbPPUStep+0x140>)
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037a6:	f64f 7040 	movw	r0, #65344	; 0xff40
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80037aa:	f012 0f10 	tst.w	r2, #16
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037ae:	4d32      	ldr	r5, [pc, #200]	; (8003878 <gbPPUStep+0x144>)
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80037b0:	bf14      	ite	ne
 80037b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80037b6:	f44f 4208 	moveq.w	r2, #34816	; 0x8800
 80037ba:	801a      	strh	r2, [r3, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037bc:	f7ff fdc8 	bl	8003350 <ucGBMemoryRead>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <gbPPUStep+0x148>)
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037c4:	f64f 7042 	movw	r0, #65346	; 0xff42
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037c8:	f012 0f08 	tst.w	r2, #8
 80037cc:	bf14      	ite	ne
 80037ce:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 80037d2:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
 80037d6:	801a      	strh	r2, [r3, #0]
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037d8:	f7ff fdba 	bl	8003350 <ucGBMemoryRead>
 80037dc:	4603      	mov	r3, r0
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037de:	f64f 7043 	movw	r0, #65347	; 0xff43
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037e2:	702b      	strb	r3, [r5, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037e4:	f7ff fdb4 	bl	8003350 <ucGBMemoryRead>
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <gbPPUStep+0x14c>)
 80037ea:	4601      	mov	r1, r0
				draw_line(ly, ucSCX, ucSCY);
 80037ec:	782a      	ldrb	r2, [r5, #0]
 80037ee:	7820      	ldrb	r0, [r4, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037f0:	7019      	strb	r1, [r3, #0]
				draw_line(ly, ucSCX, ucSCY);
 80037f2:	f7ff ff43 	bl	800367c <draw_line>
				setMode(MODE_3);
 80037f6:	2003      	movs	r0, #3
}
 80037f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_3);
 80037fc:	f7ff bf0a 	b.w	8003614 <setMode>
		memset(gb_frame, 0, 160*144*4);
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <gbPPUStep+0x150>)
 8003802:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f004 ff08 	bl	800861c <memset>
		n = 1;
 800380c:	2301      	movs	r3, #1
 800380e:	7023      	strb	r3, [r4, #0]
 8003810:	e795      	b.n	800373e <gbPPUStep+0xa>
			if (tStates <= 80 && Mode != MODE_2)											// oam
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <gbPPUStep+0x13c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d097      	beq.n	800374a <gbPPUStep+0x16>
				setMode(MODE_2);
 800381a:	2002      	movs	r0, #2
}
 800381c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_2);
 8003820:	f7ff bef8 	b.w	8003614 <setMode>
				dummy2_code(gb_frame);
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <gbPPUStep+0x150>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	f000 f9f4 	bl	8003c14 <dummy2_code>
				setMode(MODE_2);
 800382c:	2002      	movs	r0, #2
 800382e:	f7ff fef1 	bl	8003614 <setMode>
				ly = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	4619      	mov	r1, r3
 8003836:	7023      	strb	r3, [r4, #0]
 8003838:	e794      	b.n	8003764 <gbPPUStep+0x30>
			setMode(MODE_1);
 800383a:	2001      	movs	r0, #1
}
 800383c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			setMode(MODE_1);
 8003840:	f7ff bee8 	b.w	8003614 <setMode>
			}else if(tStates > 252 && tStates <= 456 && Mode != MODE_0)										// hblank
 8003844:	3bfd      	subs	r3, #253	; 0xfd
 8003846:	2bcb      	cmp	r3, #203	; 0xcb
 8003848:	f63f af7f 	bhi.w	800374a <gbPPUStep+0x16>
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <gbPPUStep+0x13c>)
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	2a00      	cmp	r2, #0
 8003852:	f43f af7a 	beq.w	800374a <gbPPUStep+0x16>
	Mode = mode;
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
}
 800385a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800385e:	f7ff be67 	b.w	8003530 <setMode.part.0>
 8003862:	bf00      	nop
 8003864:	240090f7 	.word	0x240090f7
 8003868:	240090f0 	.word	0x240090f0
 800386c:	240090f6 	.word	0x240090f6
 8003870:	240192bc 	.word	0x240192bc
 8003874:	240192be 	.word	0x240192be
 8003878:	240192d2 	.word	0x240192d2
 800387c:	240192d0 	.word	0x240192d0
 8003880:	240192bd 	.word	0x240192bd
 8003884:	24001008 	.word	0x24001008

08003888 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800388a:	2004      	movs	r0, #4
{
 800388c:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800388e:	f003 f835 	bl	80068fc <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003892:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <SystemClock_Config+0xc8>)
 8003894:	2300      	movs	r3, #0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <SystemClock_Config+0xcc>)
 800389c:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80038a0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038a6:	f002 0201 	and.w	r2, r2, #1
 80038aa:	9201      	str	r2, [sp, #4]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80038b2:	619a      	str	r2, [r3, #24]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80038be:	6983      	ldr	r3, [r0, #24]
 80038c0:	049b      	lsls	r3, r3, #18
 80038c2:	d5fc      	bpl.n	80038be <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038c4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80038ca:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038cc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 80038ce:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 80038d0:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038d2:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038d4:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038d6:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038d8:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80038da:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80038dc:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80038de:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80038e0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038e2:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038e4:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038e6:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80038e8:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038ec:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80038f0:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80038f4:	f003 f83e 	bl	8006974 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80038f8:	b108      	cbz	r0, 80038fe <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038fa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038fc:	e7fe      	b.n	80038fc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80038fe:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003900:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003902:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003904:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003908:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800390a:	4629      	mov	r1, r5
 800390c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800390e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003910:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003914:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003918:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800391c:	f003 fbc0 	bl	80070a0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8003920:	b108      	cbz	r0, 8003926 <SystemClock_Config+0x9e>
 8003922:	b672      	cpsid	i
  while (1)
 8003924:	e7fe      	b.n	8003924 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <SystemClock_Config+0xd0>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800392e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8003930:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003934:	f042 0202 	orr.w	r2, r2, #2
 8003938:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800393c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8003948:	f001 fe56 	bl	80055f8 <HAL_EnableCompensationCell>
}
 800394c:	b01f      	add	sp, #124	; 0x7c
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003950:	58000400 	.word	0x58000400
 8003954:	58024800 	.word	0x58024800
 8003958:	58024400 	.word	0x58024400

0800395c <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800395c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003960:	496d      	ldr	r1, [pc, #436]	; (8003b18 <main+0x1bc>)
 8003962:	e002      	b.n	800396a <main+0xe>
 8003964:	3b01      	subs	r3, #1
 8003966:	f000 80d3 	beq.w	8003b10 <main+0x1b4>
 800396a:	680a      	ldr	r2, [r1, #0]
 800396c:	0410      	lsls	r0, r2, #16
 800396e:	d4f9      	bmi.n	8003964 <main+0x8>
{
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8003974:	f001 fde6 	bl	8005544 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003978:	4a68      	ldr	r2, [pc, #416]	; (8003b1c <main+0x1c0>)
 800397a:	6953      	ldr	r3, [r2, #20]
 800397c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003980:	d111      	bne.n	80039a6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003986:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800398a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800398e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003992:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003996:	6953      	ldr	r3, [r2, #20]
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800399e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039a2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80039a6:	4a5d      	ldr	r2, [pc, #372]	; (8003b1c <main+0x1c0>)
 80039a8:	6953      	ldr	r3, [r2, #20]
 80039aa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80039ae:	d124      	bne.n	80039fa <main+0x9e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039b4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80039b8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039bc:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039c0:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039c4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80039c8:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039ca:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039ce:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039d0:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80039d4:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039d6:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	d1f8      	bne.n	80039d0 <main+0x74>
    } while(sets-- != 0U);
 80039de:	3820      	subs	r0, #32
 80039e0:	f110 0f20 	cmn.w	r0, #32
 80039e4:	d1f1      	bne.n	80039ca <main+0x6e>
 80039e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80039ea:	6953      	ldr	r3, [r2, #20]
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6153      	str	r3, [r2, #20]
 80039f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039f6:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 80039fa:	4c47      	ldr	r4, [pc, #284]	; (8003b18 <main+0x1bc>)
  SystemClock_Config();
 80039fc:	f7ff ff44 	bl	8003888 <SystemClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8003a00:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8003a02:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a0e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8003a1a:	f002 fcf9 	bl	8006410 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4608      	mov	r0, r1
 8003a22:	f002 fd03 	bl	800642c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003a26:	4623      	mov	r3, r4
 8003a28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a2c:	e001      	b.n	8003a32 <main+0xd6>
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	d070      	beq.n	8003b14 <main+0x1b8>
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	0409      	lsls	r1, r1, #16
 8003a36:	d5fa      	bpl.n	8003a2e <main+0xd2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3c:	2501      	movs	r5, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3e:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003a40:	f44f 4070 	mov.w	r0, #61440	; 0xf000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a44:	f042 0204 	orr.w	r2, r2, #4
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a48:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a52:	f002 0204 	and.w	r2, r2, #4
 8003a56:	9202      	str	r2, [sp, #8]
 8003a58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a5e:	432a      	orrs	r2, r5
 8003a60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a68:	402a      	ands	r2, r5
 8003a6a:	9203      	str	r2, [sp, #12]
 8003a6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7e:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a80:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a84:	9204      	str	r2, [sp, #16]
 8003a86:	9a04      	ldr	r2, [sp, #16]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003a98:	9005      	str	r0, [sp, #20]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a9e:	4820      	ldr	r0, [pc, #128]	; (8003b20 <main+0x1c4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	9407      	str	r4, [sp, #28]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa8:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003aaa:	f002 fb85 	bl	80061b8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab2:	a905      	add	r1, sp, #20
 8003ab4:	481b      	ldr	r0, [pc, #108]	; (8003b24 <main+0x1c8>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ab6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	e9cd 4406 	strd	r4, r4, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abe:	f002 fb7b 	bl	80061b8 <HAL_GPIO_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f001 fbd9 	bl	800527c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8003aca:	4817      	ldr	r0, [pc, #92]	; (8003b28 <main+0x1cc>)
 8003acc:	f004 fbd2 	bl	8008274 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f004 fc01 	bl	80082d8 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ada:	f004 fd57 	bl	800858c <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	f004 fc11 	bl	8008308 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8003ae6:	4811      	ldr	r0, [pc, #68]	; (8003b2c <main+0x1d0>)
 8003ae8:	f004 fc06 	bl	80082f8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8003aec:	4810      	ldr	r0, [pc, #64]	; (8003b30 <main+0x1d4>)
 8003aee:	f004 fc13 	bl	8008318 <UTIL_LCD_SetFont>
  vGBMemoryLoad(Tetris_gb, 32768);
 8003af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003af6:	480f      	ldr	r0, [pc, #60]	; (8003b34 <main+0x1d8>)
 8003af8:	f7ff fc06 	bl	8003308 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into approiate place in memory map
 8003afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <main+0x1dc>)
 8003b02:	f7ff fc01 	bl	8003308 <vGBMemoryLoad>
		  vGBCPUboot();
 8003b06:	f7fe ffa5 	bl	8002a54 <vGBCPUboot>
		  gbPPUStep();
 8003b0a:	f7ff fe13 	bl	8003734 <gbPPUStep>
  while (1)
 8003b0e:	e7fa      	b.n	8003b06 <main+0x1aa>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b10:	b672      	cpsid	i
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <main+0x1b6>
 8003b14:	b672      	cpsid	i
 8003b16:	e7fe      	b.n	8003b16 <main+0x1ba>
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	e000ed00 	.word	0xe000ed00
 8003b20:	58022000 	.word	0x58022000
 8003b24:	58020800 	.word	0x58020800
 8003b28:	08009190 	.word	0x08009190
 8003b2c:	ff0000ff 	.word	0xff0000ff
 8003b30:	24009064 	.word	0x24009064
 8003b34:	2400100c 	.word	0x2400100c
 8003b38:	08008f1c 	.word	0x08008f1c

08003b3c <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_LTDC_LineEventCallback+0x3c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	db15      	blt.n	8003b70 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b44:	490d      	ldr	r1, [pc, #52]	; (8003b7c <HAL_LTDC_LineEventCallback+0x40>)
 8003b46:	6802      	ldr	r2, [r0, #0]
{
 8003b48:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b4a:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8003b4c:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b50:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8003b54:	4d0a      	ldr	r5, [pc, #40]	; (8003b80 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b56:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003b5a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003b5c:	f041 0101 	orr.w	r1, r1, #1
 8003b60:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003b62:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8003b68:	601c      	str	r4, [r3, #0]
}
 8003b6a:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003b6c:	f002 be0a 	b.w	8006784 <HAL_LTDC_ProgramLineEvent>
 8003b70:	2100      	movs	r1, #0
 8003b72:	f002 be07 	b.w	8006784 <HAL_LTDC_ProgramLineEvent>
 8003b76:	bf00      	nop
 8003b78:	2400900c 	.word	0x2400900c
 8003b7c:	0800901c 	.word	0x0800901c
 8003b80:	240090f8 	.word	0x240090f8

08003b84 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003b8a:	4c20      	ldr	r4, [pc, #128]	; (8003c0c <CopyBuffer+0x88>)
 8003b8c:	2500      	movs	r5, #0
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003b8e:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8003b92:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8003b96:	4681      	mov	r9, r0
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8003b98:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003c10 <CopyBuffer+0x8c>

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003b9c:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003b9e:	f5ca 7b48 	rsb	fp, sl, #800	; 0x320
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003ba2:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8003ba4:	6225      	str	r5, [r4, #32]
{
 8003ba6:	460f      	mov	r7, r1
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003ba8:	6465      	str	r5, [r4, #68]	; 0x44
{
 8003baa:	4690      	mov	r8, r2
 8003bac:	461e      	mov	r6, r3
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003bae:	f8c4 b00c 	str.w	fp, [r4, #12]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003bb2:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003bb6:	e9c4 c500 	strd	ip, r5, [r4]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8003bba:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003bbe:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8003bc2:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8003bc6:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003bca:	f001 fddf 	bl	800578c <HAL_DMA2D_Init>
 8003bce:	b110      	cbz	r0, 8003bd6 <CopyBuffer+0x52>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
      }
    }
  }
}
 8003bd0:	b003      	add	sp, #12
 8003bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f001 febb 	bl	8005954 <HAL_DMA2D_ConfigLayer>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d1f6      	bne.n	8003bd0 <CopyBuffer+0x4c>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003be2:	f44f 7248 	mov.w	r2, #800	; 0x320
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003be6:	4653      	mov	r3, sl
 8003be8:	4649      	mov	r1, r9
 8003bea:	4620      	mov	r0, r4
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003bec:	fb02 8206 	mla	r2, r2, r6, r8
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003bf0:	9500      	str	r5, [sp, #0]
 8003bf2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003bf6:	f001 fe0b 	bl	8005810 <HAL_DMA2D_Start>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d1e8      	bne.n	8003bd0 <CopyBuffer+0x4c>
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	2164      	movs	r1, #100	; 0x64
}
 8003c02:	b003      	add	sp, #12
 8003c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003c08:	f001 be1e 	b.w	8005848 <HAL_DMA2D_PollForTransfer>
 8003c0c:	240090fc 	.word	0x240090fc
 8003c10:	52001000 	.word	0x52001000

08003c14 <dummy2_code>:

void dummy2_code(uint32_t* gb_frame){
 8003c14:	b510      	push	{r4, lr}
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], (LCD_X_Size - 320)/2, 160, 160, 144);
 8003c16:	23a0      	movs	r3, #160	; 0xa0
void dummy2_code(uint32_t* gb_frame){
 8003c18:	b082      	sub	sp, #8
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], (LCD_X_Size - 320)/2, 160, 160, 144);
 8003c1a:	2490      	movs	r4, #144	; 0x90
 8003c1c:	22f0      	movs	r2, #240	; 0xf0
 8003c1e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003c22:	e9cd 3400 	strd	r3, r4, [sp]
 8003c26:	f7ff ffad 	bl	8003b84 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <dummy2_code+0x28>)
 8003c2c:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 8003c36:	b002      	add	sp, #8
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	240192d4 	.word	0x240192d4

08003c40 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop

08003c44 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003c44:	4c05      	ldr	r4, [pc, #20]	; (8003c5c <HardFault_Handler+0x18>)
{
 8003c46:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c4e:	f002 fbd5 	bl	80063fc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c56:	f001 fcb7 	bl	80055c8 <HAL_Delay>
  while (1)
 8003c5a:	e7f5      	b.n	8003c48 <HardFault_Handler+0x4>
 8003c5c:	58022000 	.word	0x58022000

08003c60 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <MemManage_Handler>
 8003c62:	bf00      	nop

08003c64 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003c64:	e7fe      	b.n	8003c64 <BusFault_Handler>
 8003c66:	bf00      	nop

08003c68 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <UsageFault_Handler>
 8003c6a:	bf00      	nop

08003c6c <SVC_Handler>:
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <DebugMon_Handler>:
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop

08003c74 <PendSV_Handler>:
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8003c78:	f001 bc94 	b.w	80055a4 <HAL_IncTick>

08003c7c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <LTDC_IRQHandler+0x8>)
 8003c7e:	f002 bcef 	b.w	8006660 <HAL_LTDC_IRQHandler>
 8003c82:	bf00      	nop
 8003c84:	240192d4 	.word	0x240192d4

08003c88 <LTDC_ER_IRQHandler>:
 8003c88:	f7ff bff8 	b.w	8003c7c <LTDC_IRQHandler>

08003c8c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8003c8c:	4801      	ldr	r0, [pc, #4]	; (8003c94 <DSI_IRQHandler+0x8>)
 8003c8e:	f001 bfb5 	b.w	8005bfc <HAL_DSI_IRQHandler>
 8003c92:	bf00      	nop
 8003c94:	24019398 	.word	0x24019398

08003c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c98:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c9a:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <_sbrk+0x38>)
{
 8003c9c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c9e:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <_sbrk+0x3c>)
 8003ca0:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8003ca2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca4:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 8003ca6:	b12a      	cbz	r2, 8003cb4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ca8:	4413      	add	r3, r2
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d808      	bhi.n	8003cc0 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003cae:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8003cb0:	6023      	str	r3, [r4, #0]
}
 8003cb2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003cb4:	4809      	ldr	r0, [pc, #36]	; (8003cdc <_sbrk+0x44>)
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003cba:	4413      	add	r3, r2
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d9f6      	bls.n	8003cae <_sbrk+0x16>
    errno = ENOMEM;
 8003cc0:	f004 fc74 	bl	80085ac <__errno>
 8003cc4:	230c      	movs	r3, #12
    return (void *)-1;
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003cca:	6003      	str	r3, [r0, #0]
}
 8003ccc:	4610      	mov	r0, r2
 8003cce:	bd10      	pop	{r4, pc}
 8003cd0:	24009164 	.word	0x24009164
 8003cd4:	24040000 	.word	0x24040000
 8003cd8:	00000400 	.word	0x00000400
 8003cdc:	24019468 	.word	0x24019468

08003ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ce4:	f7fc fb4c 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cea:	490d      	ldr	r1, [pc, #52]	; (8003d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf0:	e002      	b.n	8003cf8 <LoopCopyDataInit>

08003cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf6:	3304      	adds	r3, #4

08003cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cfc:	d3f9      	bcc.n	8003cf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d00:	4c0a      	ldr	r4, [pc, #40]	; (8003d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d04:	e001      	b.n	8003d0a <LoopFillZerobss>

08003d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d08:	3204      	adds	r2, #4

08003d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d0c:	d3fb      	bcc.n	8003d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d0e:	f004 fc53 	bl	80085b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d12:	f7ff fe23 	bl	800395c <main>
  bx  lr
 8003d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d18:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8003d1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d20:	240090d0 	.word	0x240090d0
  ldr r2, =_sidata
 8003d24:	0800acb0 	.word	0x0800acb0
  ldr r2, =_sbss
 8003d28:	240090d0 	.word	0x240090d0
  ldr r4, =_ebss
 8003d2c:	24019464 	.word	0x24019464

08003d30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d30:	e7fe      	b.n	8003d30 <ADC3_IRQHandler>
	...

08003d34 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8003d36:	4c0e      	ldr	r4, [pc, #56]	; (8003d70 <IS42S32800J_ModeRegConfig+0x3c>)
 8003d38:	2304      	movs	r3, #4
{
 8003d3a:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8003d3c:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8003d3e:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003d40:	69d7      	ldr	r7, [r2, #28]
 8003d42:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d46:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003d48:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8003d4a:	6955      	ldr	r5, [r2, #20]
 8003d4c:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8003d4e:	6995      	ldr	r5, [r2, #24]
 8003d50:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 8003d52:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8003d58:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003d5a:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8003d5c:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d5e:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d60:	f004 f9a4 	bl	80080ac <HAL_SDRAM_SendCommand>
 8003d64:	3800      	subs	r0, #0
 8003d66:	bf18      	it	ne
 8003d68:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8003d6a:	4240      	negs	r0, r0
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	24009168 	.word	0x24009168

08003d74 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8003d74:	680a      	ldr	r2, [r1, #0]
{
 8003d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8003d78:	4c22      	ldr	r4, [pc, #136]	; (8003e04 <IS42S32800J_Init+0x90>)
 8003d7a:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8003d7c:	2700      	movs	r7, #0
{
 8003d7e:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8003d80:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d82:	4621      	mov	r1, r4
 8003d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8003d88:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8003d8a:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8003d8c:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8003d8e:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d90:	f004 f98c 	bl	80080ac <HAL_SDRAM_SendCommand>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d132      	bne.n	8003dfe <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003d98:	f001 fc10 	bl	80055bc <HAL_GetTick>
 8003d9c:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003d9e:	f001 fc0d 	bl	80055bc <HAL_GetTick>
 8003da2:	4287      	cmp	r7, r0
 8003da4:	d0fb      	beq.n	8003d9e <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8003da6:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8003da8:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8003daa:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8003dac:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8003dae:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8003db4:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003db6:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8003db8:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003dba:	4912      	ldr	r1, [pc, #72]	; (8003e04 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8003dbc:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003dbe:	f004 f975 	bl	80080ac <HAL_SDRAM_SendCommand>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b9d8      	cbnz	r0, 8003dfe <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8003dc6:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8003dc8:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8003dca:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8003dd0:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003dd2:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8003dd4:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003dd6:	490b      	ldr	r1, [pc, #44]	; (8003e04 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8003dd8:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8003dda:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003ddc:	f004 f966 	bl	80080ac <HAL_SDRAM_SendCommand>
 8003de0:	b968      	cbnz	r0, 8003dfe <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8003de2:	4629      	mov	r1, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7ff ffa5 	bl	8003d34 <IS42S32800J_ModeRegConfig>
 8003dea:	b940      	cbnz	r0, 8003dfe <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8003dec:	68a9      	ldr	r1, [r5, #8]
 8003dee:	4630      	mov	r0, r6
 8003df0:	f004 f97c 	bl	80080ec <HAL_SDRAM_ProgramRefreshRate>
 8003df4:	3800      	subs	r0, #0
 8003df6:	bf18      	it	ne
 8003df8:	2001      	movne	r0, #1
 8003dfa:	4240      	negs	r0, r0
}
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8003dfe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e04:	24009168 	.word	0x24009168

08003e08 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8003e12:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	600b      	str	r3, [r1, #0]
}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	24009178 	.word	0x24009178

08003e20 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8003e22:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	600b      	str	r3, [r1, #0]
}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	24009178 	.word	0x24009178

08003e30 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <OTM8009A_GetXSize+0x1c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	b123      	cbz	r3, 8003e40 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003e36:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8003e3a:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8003e3c:	600b      	str	r3, [r1, #0]
}
 8003e3e:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8003e40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8003e44:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8003e46:	600b      	str	r3, [r1, #0]
}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	24009178 	.word	0x24009178

08003e50 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <OTM8009A_GetYSize+0x1c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	b123      	cbz	r3, 8003e60 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003e56:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8003e5a:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003e5c:	600b      	str	r3, [r1, #0]
}
 8003e5e:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003e60:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8003e64:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003e66:	600b      	str	r3, [r1, #0]
}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	24009178 	.word	0x24009178

08003e70 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003ea0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ea2:	6884      	ldr	r4, [r0, #8]
 8003ea4:	8800      	ldrh	r0, [r0, #0]
 8003ea6:	46a4      	mov	ip, r4
}
 8003ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003eac:	4760      	bx	ip
 8003eae:	bf00      	nop

08003eb0 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003eb0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003eb2:	6844      	ldr	r4, [r0, #4]
 8003eb4:	8800      	ldrh	r0, [r0, #0]
 8003eb6:	46a4      	mov	ip, r4
}
 8003eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003ebc:	4760      	bx	ip
 8003ebe:	bf00      	nop

08003ec0 <OTM8009A_Init>:
{
 8003ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f100 0710 	add.w	r7, r0, #16
{
 8003eca:	b082      	sub	sp, #8
 8003ecc:	4680      	mov	r8, r0
 8003ece:	4689      	mov	r9, r1
 8003ed0:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4ae0      	ldr	r2, [pc, #896]	; (8004258 <OTM8009A_Init+0x398>)
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f000 fcd6 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003edc:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003ede:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003ee0:	4ade      	ldr	r2, [pc, #888]	; (800425c <OTM8009A_Init+0x39c>)
 8003ee2:	21ff      	movs	r1, #255	; 0xff
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f000 fccf 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003eea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003eec:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003eee:	4adc      	ldr	r2, [pc, #880]	; (8004260 <OTM8009A_Init+0x3a0>)
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f000 fcc8 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003ef8:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003efa:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003efc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003efe:	4ad9      	ldr	r2, [pc, #868]	; (8004264 <OTM8009A_Init+0x3a4>)
 8003f00:	21ff      	movs	r1, #255	; 0xff
 8003f02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003f04:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003f06:	f000 fcbf 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003f0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003f0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003f0e:	4ad4      	ldr	r2, [pc, #848]	; (8004260 <OTM8009A_Init+0x3a0>)
 8003f10:	4619      	mov	r1, r3
 8003f12:	4638      	mov	r0, r7
 8003f14:	f000 fcb8 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003f18:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003f1a:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4ad2      	ldr	r2, [pc, #840]	; (8004268 <OTM8009A_Init+0x3a8>)
 8003f20:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003f22:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003f24:	4638      	mov	r0, r7
 8003f26:	f000 fcaf 	bl	8004888 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003f2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003f2e:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8003f30:	4798      	blx	r3
 8003f32:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003f34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003f38:	4798      	blx	r3
 8003f3a:	1b00      	subs	r0, r0, r4
 8003f3c:	2809      	cmp	r0, #9
 8003f3e:	d9f9      	bls.n	8003f34 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003f40:	2300      	movs	r3, #0
 8003f42:	4aca      	ldr	r2, [pc, #808]	; (800426c <OTM8009A_Init+0x3ac>)
 8003f44:	4638      	mov	r0, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	f000 fc9e 	bl	8004888 <otm8009a_write_reg>
 8003f4c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4ac7      	ldr	r2, [pc, #796]	; (8004270 <OTM8009A_Init+0x3b0>)
 8003f52:	21c4      	movs	r1, #196	; 0xc4
 8003f54:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003f56:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003f58:	f000 fc96 	bl	8004888 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8003f5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003f60:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8003f62:	4798      	blx	r3
 8003f64:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003f66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003f6a:	4798      	blx	r3
 8003f6c:	1b40      	subs	r0, r0, r5
 8003f6e:	2809      	cmp	r0, #9
 8003f70:	d9f9      	bls.n	8003f66 <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f72:	2300      	movs	r3, #0
 8003f74:	4abf      	ldr	r2, [pc, #764]	; (8004274 <OTM8009A_Init+0x3b4>)
 8003f76:	4638      	mov	r0, r7
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f000 fc85 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f80:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f82:	4abd      	ldr	r2, [pc, #756]	; (8004278 <OTM8009A_Init+0x3b8>)
 8003f84:	21c5      	movs	r1, #197	; 0xc5
 8003f86:	4638      	mov	r0, r7
 8003f88:	f000 fc7e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f8e:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f90:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f92:	4619      	mov	r1, r3
 8003f94:	4ab9      	ldr	r2, [pc, #740]	; (800427c <OTM8009A_Init+0x3bc>)
 8003f96:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f98:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f9a:	f000 fc75 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003f9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003fa0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003fa2:	4ab7      	ldr	r2, [pc, #732]	; (8004280 <OTM8009A_Init+0x3c0>)
 8003fa4:	21c5      	movs	r1, #197	; 0xc5
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	f000 fc6e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003fac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003fae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003fb0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4ab3      	ldr	r2, [pc, #716]	; (8004284 <OTM8009A_Init+0x3c4>)
 8003fb6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003fb8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003fba:	f000 fc65 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003fbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003fc0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003fc2:	4ab1      	ldr	r2, [pc, #708]	; (8004288 <OTM8009A_Init+0x3c8>)
 8003fc4:	21c0      	movs	r1, #192	; 0xc0
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f000 fc5e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003fcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003fce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003fd0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4aa0      	ldr	r2, [pc, #640]	; (8004258 <OTM8009A_Init+0x398>)
 8003fd6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003fd8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003fda:	f000 fc55 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003fde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003fe0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003fe2:	4aaa      	ldr	r2, [pc, #680]	; (800428c <OTM8009A_Init+0x3cc>)
 8003fe4:	21d9      	movs	r1, #217	; 0xd9
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f000 fc4e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003fec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003fee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003ff0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4aa6      	ldr	r2, [pc, #664]	; (8004290 <OTM8009A_Init+0x3d0>)
 8003ff6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003ff8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003ffa:	f000 fc45 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003ffe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004000:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004002:	4aa4      	ldr	r2, [pc, #656]	; (8004294 <OTM8009A_Init+0x3d4>)
 8004004:	21c1      	movs	r1, #193	; 0xc1
 8004006:	4638      	mov	r0, r7
 8004008:	f000 fc3e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800400c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800400e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004010:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004012:	4619      	mov	r1, r3
 8004014:	4aa0      	ldr	r2, [pc, #640]	; (8004298 <OTM8009A_Init+0x3d8>)
 8004016:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004018:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800401a:	f000 fc35 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800401e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004020:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004022:	4a9e      	ldr	r2, [pc, #632]	; (800429c <OTM8009A_Init+0x3dc>)
 8004024:	21c1      	movs	r1, #193	; 0xc1
 8004026:	4638      	mov	r0, r7
 8004028:	f000 fc2e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800402c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800402e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004030:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004032:	4619      	mov	r1, r3
 8004034:	4a9a      	ldr	r2, [pc, #616]	; (80042a0 <OTM8009A_Init+0x3e0>)
 8004036:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004038:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800403a:	f000 fc25 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800403e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004040:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004042:	4a98      	ldr	r2, [pc, #608]	; (80042a4 <OTM8009A_Init+0x3e4>)
 8004044:	21c5      	movs	r1, #197	; 0xc5
 8004046:	4638      	mov	r0, r7
 8004048:	f000 fc1e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800404c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800404e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004050:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004052:	4619      	mov	r1, r3
 8004054:	4a94      	ldr	r2, [pc, #592]	; (80042a8 <OTM8009A_Init+0x3e8>)
 8004056:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004058:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800405a:	f000 fc15 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800405e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004060:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004062:	4a87      	ldr	r2, [pc, #540]	; (8004280 <OTM8009A_Init+0x3c0>)
 8004064:	21c5      	movs	r1, #197	; 0xc5
 8004066:	4638      	mov	r0, r7
 8004068:	f000 fc0e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800406c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800406e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004070:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004072:	4619      	mov	r1, r3
 8004074:	4a78      	ldr	r2, [pc, #480]	; (8004258 <OTM8009A_Init+0x398>)
 8004076:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004078:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800407a:	f000 fc05 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800407e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004080:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004082:	4a8a      	ldr	r2, [pc, #552]	; (80042ac <OTM8009A_Init+0x3ec>)
 8004084:	21d8      	movs	r1, #216	; 0xd8
 8004086:	4638      	mov	r0, r7
 8004088:	f000 fbfe 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800408c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800408e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004090:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004092:	4619      	mov	r1, r3
 8004094:	4a86      	ldr	r2, [pc, #536]	; (80042b0 <OTM8009A_Init+0x3f0>)
 8004096:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004098:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800409a:	f000 fbf5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800409e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80040a0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80040a2:	4a84      	ldr	r2, [pc, #528]	; (80042b4 <OTM8009A_Init+0x3f4>)
 80040a4:	21c5      	movs	r1, #197	; 0xc5
 80040a6:	4638      	mov	r0, r7
 80040a8:	f000 fbee 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80040ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80040ae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80040b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80040b2:	4619      	mov	r1, r3
 80040b4:	4a80      	ldr	r2, [pc, #512]	; (80042b8 <OTM8009A_Init+0x3f8>)
 80040b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80040b8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80040ba:	f000 fbe5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80040be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80040c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80040c2:	4a7e      	ldr	r2, [pc, #504]	; (80042bc <OTM8009A_Init+0x3fc>)
 80040c4:	21c0      	movs	r1, #192	; 0xc0
 80040c6:	4638      	mov	r0, r7
 80040c8:	f000 fbde 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80040cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80040ce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80040d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80040d2:	4619      	mov	r1, r3
 80040d4:	4a7a      	ldr	r2, [pc, #488]	; (80042c0 <OTM8009A_Init+0x400>)
 80040d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80040d8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80040da:	f000 fbd5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80040de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80040e0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80040e2:	4a78      	ldr	r2, [pc, #480]	; (80042c4 <OTM8009A_Init+0x404>)
 80040e4:	21c5      	movs	r1, #197	; 0xc5
 80040e6:	4638      	mov	r0, r7
 80040e8:	f000 fbce 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80040ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80040ee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80040f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80040f2:	4619      	mov	r1, r3
 80040f4:	4a66      	ldr	r2, [pc, #408]	; (8004290 <OTM8009A_Init+0x3d0>)
 80040f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80040f8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80040fa:	f000 fbc5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80040fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004100:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004102:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <OTM8009A_Init+0x408>)
 8004104:	21c4      	movs	r1, #196	; 0xc4
 8004106:	4638      	mov	r0, r7
 8004108:	f000 fbbe 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800410c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800410e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004110:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004112:	4619      	mov	r1, r3
 8004114:	4a60      	ldr	r2, [pc, #384]	; (8004298 <OTM8009A_Init+0x3d8>)
 8004116:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004118:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800411a:	f000 fbb5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800411e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004120:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004122:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <OTM8009A_Init+0x40c>)
 8004124:	21c1      	movs	r1, #193	; 0xc1
 8004126:	4638      	mov	r0, r7
 8004128:	f000 fbae 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800412c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800412e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004130:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004132:	4619      	mov	r1, r3
 8004134:	4a66      	ldr	r2, [pc, #408]	; (80042d0 <OTM8009A_Init+0x410>)
 8004136:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004138:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800413a:	f000 fba5 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800413e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004140:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <OTM8009A_Init+0x414>)
 8004144:	21b3      	movs	r1, #179	; 0xb3
 8004146:	4638      	mov	r0, r7
 8004148:	f000 fb9e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800414c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800414e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004150:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004152:	4619      	mov	r1, r3
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <OTM8009A_Init+0x3a0>)
 8004156:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004158:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800415a:	f000 fb95 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800415e:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004160:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004162:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <OTM8009A_Init+0x418>)
 8004164:	21ce      	movs	r1, #206	; 0xce
 8004166:	4638      	mov	r0, r7
 8004168:	f000 fb8e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800416c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800416e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004170:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004172:	4619      	mov	r1, r3
 8004174:	4a59      	ldr	r2, [pc, #356]	; (80042dc <OTM8009A_Init+0x41c>)
 8004176:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004178:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800417a:	f000 fb85 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800417e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004180:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004182:	4a57      	ldr	r2, [pc, #348]	; (80042e0 <OTM8009A_Init+0x420>)
 8004184:	21ce      	movs	r1, #206	; 0xce
 8004186:	4638      	mov	r0, r7
 8004188:	f000 fb7e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800418c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800418e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004190:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004192:	4619      	mov	r1, r3
 8004194:	4a53      	ldr	r2, [pc, #332]	; (80042e4 <OTM8009A_Init+0x424>)
 8004196:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004198:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800419a:	f000 fb75 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800419e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80041a0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80041a2:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <OTM8009A_Init+0x428>)
 80041a4:	21ce      	movs	r1, #206	; 0xce
 80041a6:	4638      	mov	r0, r7
 80041a8:	f000 fb6e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80041ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80041ae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80041b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80041b2:	4619      	mov	r1, r3
 80041b4:	4a4d      	ldr	r2, [pc, #308]	; (80042ec <OTM8009A_Init+0x42c>)
 80041b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80041b8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80041ba:	f000 fb65 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80041be:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80041c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80041c2:	4a4b      	ldr	r2, [pc, #300]	; (80042f0 <OTM8009A_Init+0x430>)
 80041c4:	21cf      	movs	r1, #207	; 0xcf
 80041c6:	4638      	mov	r0, r7
 80041c8:	f000 fb5e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80041cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80041ce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80041d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80041d2:	4619      	mov	r1, r3
 80041d4:	4a47      	ldr	r2, [pc, #284]	; (80042f4 <OTM8009A_Init+0x434>)
 80041d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80041d8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80041da:	f000 fb55 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80041de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80041e0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80041e2:	4a45      	ldr	r2, [pc, #276]	; (80042f8 <OTM8009A_Init+0x438>)
 80041e4:	21cf      	movs	r1, #207	; 0xcf
 80041e6:	4638      	mov	r0, r7
 80041e8:	f000 fb4e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80041ee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80041f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041f2:	4619      	mov	r1, r3
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <OTM8009A_Init+0x3a0>)
 80041f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80041f8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041fa:	f000 fb45 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80041fe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004200:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004202:	4a3e      	ldr	r2, [pc, #248]	; (80042fc <OTM8009A_Init+0x43c>)
 8004204:	21cb      	movs	r1, #203	; 0xcb
 8004206:	4638      	mov	r0, r7
 8004208:	f000 fb3e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800420c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800420e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004210:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004212:	4619      	mov	r1, r3
 8004214:	4a3a      	ldr	r2, [pc, #232]	; (8004300 <OTM8009A_Init+0x440>)
 8004216:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004218:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800421a:	f000 fb35 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800421e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004220:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004222:	4a38      	ldr	r2, [pc, #224]	; (8004304 <OTM8009A_Init+0x444>)
 8004224:	21cb      	movs	r1, #203	; 0xcb
 8004226:	4638      	mov	r0, r7
 8004228:	f000 fb2e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800422c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800422e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004230:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004232:	4619      	mov	r1, r3
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <OTM8009A_Init+0x41c>)
 8004236:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004238:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800423a:	f000 fb25 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800423e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004240:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004242:	4a31      	ldr	r2, [pc, #196]	; (8004308 <OTM8009A_Init+0x448>)
 8004244:	21cb      	movs	r1, #203	; 0xcb
 8004246:	4638      	mov	r0, r7
 8004248:	f000 fb1e 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800424c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800424e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004250:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004252:	4619      	mov	r1, r3
 8004254:	e05a      	b.n	800430c <OTM8009A_Init+0x44c>
 8004256:	bf00      	nop
 8004258:	0800915d 	.word	0x0800915d
 800425c:	0800902c 	.word	0x0800902c
 8004260:	0800915e 	.word	0x0800915e
 8004264:	080090b8 	.word	0x080090b8
 8004268:	0800915f 	.word	0x0800915f
 800426c:	08009160 	.word	0x08009160
 8004270:	08009161 	.word	0x08009161
 8004274:	08009162 	.word	0x08009162
 8004278:	08009163 	.word	0x08009163
 800427c:	08009164 	.word	0x08009164
 8004280:	08009165 	.word	0x08009165
 8004284:	08009166 	.word	0x08009166
 8004288:	08009167 	.word	0x08009167
 800428c:	08009168 	.word	0x08009168
 8004290:	08009169 	.word	0x08009169
 8004294:	0800916a 	.word	0x0800916a
 8004298:	0800916b 	.word	0x0800916b
 800429c:	0800916c 	.word	0x0800916c
 80042a0:	0800916d 	.word	0x0800916d
 80042a4:	0800916e 	.word	0x0800916e
 80042a8:	0800916f 	.word	0x0800916f
 80042ac:	0800912c 	.word	0x0800912c
 80042b0:	08009170 	.word	0x08009170
 80042b4:	08009171 	.word	0x08009171
 80042b8:	08009172 	.word	0x08009172
 80042bc:	08009173 	.word	0x08009173
 80042c0:	08009174 	.word	0x08009174
 80042c4:	08009175 	.word	0x08009175
 80042c8:	08009176 	.word	0x08009176
 80042cc:	08009177 	.word	0x08009177
 80042d0:	08009178 	.word	0x08009178
 80042d4:	08009130 	.word	0x08009130
 80042d8:	08009134 	.word	0x08009134
 80042dc:	08009179 	.word	0x08009179
 80042e0:	0800913c 	.word	0x0800913c
 80042e4:	0800917a 	.word	0x0800917a
 80042e8:	0800914c 	.word	0x0800914c
 80042ec:	0800917b 	.word	0x0800917b
 80042f0:	08009030 	.word	0x08009030
 80042f4:	0800917c 	.word	0x0800917c
 80042f8:	08009189 	.word	0x08009189
 80042fc:	0800903c 	.word	0x0800903c
 8004300:	0800917d 	.word	0x0800917d
 8004304:	08009048 	.word	0x08009048
 8004308:	08009058 	.word	0x08009058
 800430c:	4ad1      	ldr	r2, [pc, #836]	; (8004654 <OTM8009A_Init+0x794>)
 800430e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004310:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004312:	f000 fab9 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004316:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004318:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800431a:	4acf      	ldr	r2, [pc, #828]	; (8004658 <OTM8009A_Init+0x798>)
 800431c:	21cb      	movs	r1, #203	; 0xcb
 800431e:	4638      	mov	r0, r7
 8004320:	f000 fab2 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004324:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004326:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004328:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800432a:	4619      	mov	r1, r3
 800432c:	4acb      	ldr	r2, [pc, #812]	; (800465c <OTM8009A_Init+0x79c>)
 800432e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004330:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004332:	f000 faa9 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004336:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004338:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800433a:	4ac9      	ldr	r2, [pc, #804]	; (8004660 <OTM8009A_Init+0x7a0>)
 800433c:	21cb      	movs	r1, #203	; 0xcb
 800433e:	4638      	mov	r0, r7
 8004340:	f000 faa2 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004344:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004346:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004348:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800434a:	4619      	mov	r1, r3
 800434c:	4ac5      	ldr	r2, [pc, #788]	; (8004664 <OTM8009A_Init+0x7a4>)
 800434e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004350:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004352:	f000 fa99 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004356:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004358:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800435a:	4ac3      	ldr	r2, [pc, #780]	; (8004668 <OTM8009A_Init+0x7a8>)
 800435c:	21cb      	movs	r1, #203	; 0xcb
 800435e:	4638      	mov	r0, r7
 8004360:	f000 fa92 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004364:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004366:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004368:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800436a:	4619      	mov	r1, r3
 800436c:	4abf      	ldr	r2, [pc, #764]	; (800466c <OTM8009A_Init+0x7ac>)
 800436e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004370:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004372:	f000 fa89 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004376:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004378:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800437a:	4abd      	ldr	r2, [pc, #756]	; (8004670 <OTM8009A_Init+0x7b0>)
 800437c:	21cb      	movs	r1, #203	; 0xcb
 800437e:	4638      	mov	r0, r7
 8004380:	f000 fa82 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004384:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004386:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004388:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800438a:	4619      	mov	r1, r3
 800438c:	4ab9      	ldr	r2, [pc, #740]	; (8004674 <OTM8009A_Init+0x7b4>)
 800438e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004390:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004392:	f000 fa79 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004396:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004398:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800439a:	4ab7      	ldr	r2, [pc, #732]	; (8004678 <OTM8009A_Init+0x7b8>)
 800439c:	21cb      	movs	r1, #203	; 0xcb
 800439e:	4638      	mov	r0, r7
 80043a0:	f000 fa72 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80043a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80043a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80043a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80043aa:	4619      	mov	r1, r3
 80043ac:	4ab3      	ldr	r2, [pc, #716]	; (800467c <OTM8009A_Init+0x7bc>)
 80043ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80043b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80043b2:	f000 fa69 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80043b6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80043b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80043ba:	4ab1      	ldr	r2, [pc, #708]	; (8004680 <OTM8009A_Init+0x7c0>)
 80043bc:	21cc      	movs	r1, #204	; 0xcc
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 fa62 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80043c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80043c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80043c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80043ca:	4619      	mov	r1, r3
 80043cc:	4aad      	ldr	r2, [pc, #692]	; (8004684 <OTM8009A_Init+0x7c4>)
 80043ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80043d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80043d2:	f000 fa59 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80043d6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80043d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80043da:	4aab      	ldr	r2, [pc, #684]	; (8004688 <OTM8009A_Init+0x7c8>)
 80043dc:	21cc      	movs	r1, #204	; 0xcc
 80043de:	4638      	mov	r0, r7
 80043e0:	f000 fa52 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80043e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80043e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80043e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80043ea:	4619      	mov	r1, r3
 80043ec:	4aa7      	ldr	r2, [pc, #668]	; (800468c <OTM8009A_Init+0x7cc>)
 80043ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80043f0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80043f2:	f000 fa49 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80043f6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80043f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80043fa:	4aa5      	ldr	r2, [pc, #660]	; (8004690 <OTM8009A_Init+0x7d0>)
 80043fc:	21cc      	movs	r1, #204	; 0xcc
 80043fe:	4638      	mov	r0, r7
 8004400:	f000 fa42 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004404:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004406:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004408:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800440a:	4619      	mov	r1, r3
 800440c:	4a91      	ldr	r2, [pc, #580]	; (8004654 <OTM8009A_Init+0x794>)
 800440e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004410:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004412:	f000 fa39 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004416:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004418:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800441a:	4a9e      	ldr	r2, [pc, #632]	; (8004694 <OTM8009A_Init+0x7d4>)
 800441c:	21cc      	movs	r1, #204	; 0xcc
 800441e:	4638      	mov	r0, r7
 8004420:	f000 fa32 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004424:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004426:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004428:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800442a:	4619      	mov	r1, r3
 800442c:	4a8b      	ldr	r2, [pc, #556]	; (800465c <OTM8009A_Init+0x79c>)
 800442e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004430:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004432:	f000 fa29 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004436:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004438:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800443a:	4a97      	ldr	r2, [pc, #604]	; (8004698 <OTM8009A_Init+0x7d8>)
 800443c:	21cc      	movs	r1, #204	; 0xcc
 800443e:	4638      	mov	r0, r7
 8004440:	f000 fa22 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004444:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004446:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004448:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800444a:	4619      	mov	r1, r3
 800444c:	4a85      	ldr	r2, [pc, #532]	; (8004664 <OTM8009A_Init+0x7a4>)
 800444e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004450:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004452:	f000 fa19 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004456:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004458:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800445a:	4a90      	ldr	r2, [pc, #576]	; (800469c <OTM8009A_Init+0x7dc>)
 800445c:	21cc      	movs	r1, #204	; 0xcc
 800445e:	4638      	mov	r0, r7
 8004460:	f000 fa12 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004464:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004466:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004468:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800446a:	4619      	mov	r1, r3
 800446c:	4a8c      	ldr	r2, [pc, #560]	; (80046a0 <OTM8009A_Init+0x7e0>)
 800446e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004470:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004472:	f000 fa09 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004476:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004478:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800447a:	4a8a      	ldr	r2, [pc, #552]	; (80046a4 <OTM8009A_Init+0x7e4>)
 800447c:	21c5      	movs	r1, #197	; 0xc5
 800447e:	4638      	mov	r0, r7
 8004480:	f000 fa02 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004484:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004486:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004488:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800448a:	4619      	mov	r1, r3
 800448c:	4a86      	ldr	r2, [pc, #536]	; (80046a8 <OTM8009A_Init+0x7e8>)
 800448e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004490:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004492:	f000 f9f9 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004496:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004498:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800449a:	4a84      	ldr	r2, [pc, #528]	; (80046ac <OTM8009A_Init+0x7ec>)
 800449c:	21f5      	movs	r1, #245	; 0xf5
 800449e:	4638      	mov	r0, r7
 80044a0:	f000 f9f2 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80044a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80044a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80044a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80044aa:	4619      	mov	r1, r3
 80044ac:	4a80      	ldr	r2, [pc, #512]	; (80046b0 <OTM8009A_Init+0x7f0>)
 80044ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80044b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80044b2:	f000 f9e9 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80044b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80044b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <OTM8009A_Init+0x7f4>)
 80044bc:	21c6      	movs	r1, #198	; 0xc6
 80044be:	4638      	mov	r0, r7
 80044c0:	f000 f9e2 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80044c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80044c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044ca:	4619      	mov	r1, r3
 80044cc:	4a7a      	ldr	r2, [pc, #488]	; (80046b8 <OTM8009A_Init+0x7f8>)
 80044ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80044d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044d2:	f000 f9d9 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80044d6:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80044da:	4a78      	ldr	r2, [pc, #480]	; (80046bc <OTM8009A_Init+0x7fc>)
 80044dc:	21ff      	movs	r1, #255	; 0xff
 80044de:	4638      	mov	r0, r7
 80044e0:	f000 f9d2 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044e8:	4a73      	ldr	r2, [pc, #460]	; (80046b8 <OTM8009A_Init+0x7f8>)
 80044ea:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80044ec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044ee:	4638      	mov	r0, r7
 80044f0:	f000 f9ca 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80044f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044fa:	4619      	mov	r1, r3
 80044fc:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <OTM8009A_Init+0x7f8>)
 80044fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004500:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004502:	f000 f9c1 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004506:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004508:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800450a:	4a6d      	ldr	r2, [pc, #436]	; (80046c0 <OTM8009A_Init+0x800>)
 800450c:	21e1      	movs	r1, #225	; 0xe1
 800450e:	4638      	mov	r0, r7
 8004510:	f000 f9ba 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004516:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004518:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800451a:	4619      	mov	r1, r3
 800451c:	4a66      	ldr	r2, [pc, #408]	; (80046b8 <OTM8009A_Init+0x7f8>)
 800451e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004520:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004522:	f000 f9b1 	bl	8004888 <otm8009a_write_reg>
 8004526:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004528:	2310      	movs	r3, #16
 800452a:	4a66      	ldr	r2, [pc, #408]	; (80046c4 <OTM8009A_Init+0x804>)
 800452c:	21e2      	movs	r1, #226	; 0xe2
 800452e:	4638      	mov	r0, r7
 8004530:	f000 f9aa 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004534:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004536:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004538:	2300      	movs	r3, #0
 800453a:	4a63      	ldr	r2, [pc, #396]	; (80046c8 <OTM8009A_Init+0x808>)
 800453c:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800453e:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004540:	4638      	mov	r0, r7
 8004542:	f000 f9a1 	bl	8004888 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004546:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800454a:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800454c:	4798      	blx	r3
 800454e:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004554:	4798      	blx	r3
 8004556:	1b40      	subs	r0, r0, r5
 8004558:	2877      	cmp	r0, #119	; 0x77
 800455a:	d9f9      	bls.n	8004550 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 800455c:	f1b9 0f00 	cmp.w	r9, #0
 8004560:	d074      	beq.n	800464c <OTM8009A_Init+0x78c>
 8004562:	f1b9 0f02 	cmp.w	r9, #2
 8004566:	d14f      	bne.n	8004608 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004568:	2300      	movs	r3, #0
 800456a:	4a58      	ldr	r2, [pc, #352]	; (80046cc <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800456c:	213a      	movs	r1, #58	; 0x3a
 800456e:	4638      	mov	r0, r7
 8004570:	f000 f98a 	bl	8004888 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004574:	4d56      	ldr	r5, [pc, #344]	; (80046d0 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004576:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800457a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800457c:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004580:	d046      	beq.n	8004610 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004582:	2300      	movs	r3, #0
 8004584:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004586:	2300      	movs	r3, #0
 8004588:	4a52      	ldr	r2, [pc, #328]	; (80046d4 <OTM8009A_Init+0x814>)
 800458a:	2151      	movs	r1, #81	; 0x51
 800458c:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800458e:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004590:	f000 f97a 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004594:	4a50      	ldr	r2, [pc, #320]	; (80046d8 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004596:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800459a:	4653      	mov	r3, sl
 800459c:	2153      	movs	r1, #83	; 0x53
 800459e:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80045a0:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80045a4:	f000 f970 	bl	8004888 <otm8009a_write_reg>
 80045a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80045aa:	4653      	mov	r3, sl
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <OTM8009A_Init+0x81c>)
 80045ae:	2155      	movs	r1, #85	; 0x55
 80045b0:	4638      	mov	r0, r7
 80045b2:	f000 f969 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80045b6:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80045b8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80045ba:	4653      	mov	r3, sl
 80045bc:	4a48      	ldr	r2, [pc, #288]	; (80046e0 <OTM8009A_Init+0x820>)
 80045be:	215e      	movs	r1, #94	; 0x5e
 80045c0:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80045c2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80045c4:	f000 f960 	bl	8004888 <otm8009a_write_reg>
 80045c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80045ca:	4653      	mov	r3, sl
 80045cc:	4a45      	ldr	r2, [pc, #276]	; (80046e4 <OTM8009A_Init+0x824>)
 80045ce:	2129      	movs	r1, #41	; 0x29
 80045d0:	4638      	mov	r0, r7
 80045d2:	f000 f959 	bl	8004888 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80045d6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80045d8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80045da:	4653      	mov	r3, sl
 80045dc:	4651      	mov	r1, sl
 80045de:	4a36      	ldr	r2, [pc, #216]	; (80046b8 <OTM8009A_Init+0x7f8>)
 80045e0:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80045e2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80045e4:	f000 f950 	bl	8004888 <otm8009a_write_reg>
 80045e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80045ea:	4653      	mov	r3, sl
 80045ec:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80045ee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80045f0:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <OTM8009A_Init+0x828>)
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	f000 f948 	bl	8004888 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80045f8:	42c4      	cmn	r4, r0
}
 80045fa:	bf14      	ite	ne
 80045fc:	f04f 30ff 	movne.w	r0, #4294967295
 8004600:	4650      	moveq	r0, sl
 8004602:	b002      	add	sp, #8
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004608:	f1ba 0f01 	cmp.w	sl, #1
 800460c:	4d30      	ldr	r5, [pc, #192]	; (80046d0 <OTM8009A_Init+0x810>)
 800460e:	d1b8      	bne.n	8004582 <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004610:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004612:	2300      	movs	r3, #0
 8004614:	f10d 0207 	add.w	r2, sp, #7
 8004618:	2136      	movs	r1, #54	; 0x36
 800461a:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800461c:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004620:	f000 f932 	bl	8004888 <otm8009a_write_reg>
 8004624:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004626:	2304      	movs	r3, #4
 8004628:	4a30      	ldr	r2, [pc, #192]	; (80046ec <OTM8009A_Init+0x82c>)
 800462a:	212a      	movs	r1, #42	; 0x2a
 800462c:	4638      	mov	r0, r7
 800462e:	f000 f92b 	bl	8004888 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004632:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004634:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004636:	2304      	movs	r3, #4
 8004638:	4a2d      	ldr	r2, [pc, #180]	; (80046f0 <OTM8009A_Init+0x830>)
 800463a:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800463c:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f922 	bl	8004888 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004644:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004648:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800464a:	e79c      	b.n	8004586 <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800464c:	464b      	mov	r3, r9
 800464e:	4a29      	ldr	r2, [pc, #164]	; (80046f4 <OTM8009A_Init+0x834>)
 8004650:	e78c      	b.n	800456c <OTM8009A_Init+0x6ac>
 8004652:	bf00      	nop
 8004654:	0800917a 	.word	0x0800917a
 8004658:	08009068 	.word	0x08009068
 800465c:	0800917b 	.word	0x0800917b
 8004660:	08009074 	.word	0x08009074
 8004664:	0800917c 	.word	0x0800917c
 8004668:	08009084 	.word	0x08009084
 800466c:	0800917e 	.word	0x0800917e
 8004670:	08009094 	.word	0x08009094
 8004674:	0800917f 	.word	0x0800917f
 8004678:	080090a0 	.word	0x080090a0
 800467c:	0800915e 	.word	0x0800915e
 8004680:	080090ac 	.word	0x080090ac
 8004684:	0800917d 	.word	0x0800917d
 8004688:	080090bc 	.word	0x080090bc
 800468c:	08009179 	.word	0x08009179
 8004690:	080090cc 	.word	0x080090cc
 8004694:	080090dc 	.word	0x080090dc
 8004698:	080090e8 	.word	0x080090e8
 800469c:	080090f8 	.word	0x080090f8
 80046a0:	08009169 	.word	0x08009169
 80046a4:	0800918a 	.word	0x0800918a
 80046a8:	0800918b 	.word	0x0800918b
 80046ac:	0800918c 	.word	0x0800918c
 80046b0:	0800918d 	.word	0x0800918d
 80046b4:	0800918e 	.word	0x0800918e
 80046b8:	0800915d 	.word	0x0800915d
 80046bc:	08009108 	.word	0x08009108
 80046c0:	0800910c 	.word	0x0800910c
 80046c4:	0800911c 	.word	0x0800911c
 80046c8:	08009180 	.word	0x08009180
 80046cc:	08009181 	.word	0x08009181
 80046d0:	24009178 	.word	0x24009178
 80046d4:	08009183 	.word	0x08009183
 80046d8:	08009184 	.word	0x08009184
 80046dc:	08009185 	.word	0x08009185
 80046e0:	08009186 	.word	0x08009186
 80046e4:	08009187 	.word	0x08009187
 80046e8:	08009188 	.word	0x08009188
 80046ec:	08009024 	.word	0x08009024
 80046f0:	08009028 	.word	0x08009028
 80046f4:	08009182 	.word	0x08009182

080046f8 <OTM8009A_SetBrightness>:
{
 80046f8:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80046fa:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80046fe:	4e0b      	ldr	r6, [pc, #44]	; (800472c <OTM8009A_SetBrightness+0x34>)
{
 8004700:	b082      	sub	sp, #8
 8004702:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004704:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004708:	2300      	movs	r3, #0
 800470a:	f10d 0207 	add.w	r2, sp, #7
 800470e:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004710:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004712:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004714:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004718:	f000 f8b6 	bl	8004888 <otm8009a_write_reg>
 800471c:	b918      	cbnz	r0, 8004726 <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <OTM8009A_SetBrightness+0x38>)
 8004720:	609d      	str	r5, [r3, #8]
}
 8004722:	b002      	add	sp, #8
 8004724:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8004726:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800472a:	e7fa      	b.n	8004722 <OTM8009A_SetBrightness+0x2a>
 800472c:	51eb851f 	.word	0x51eb851f
 8004730:	24009178 	.word	0x24009178

08004734 <OTM8009A_DisplayOn>:
{
 8004734:	b500      	push	{lr}
 8004736:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004738:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800473a:	2129      	movs	r1, #41	; 0x29
 800473c:	3010      	adds	r0, #16
 800473e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004742:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004746:	f000 f89f 	bl	8004888 <otm8009a_write_reg>
 800474a:	3800      	subs	r0, #0
 800474c:	bf18      	it	ne
 800474e:	2001      	movne	r0, #1
}
 8004750:	4240      	negs	r0, r0
 8004752:	b003      	add	sp, #12
 8004754:	f85d fb04 	ldr.w	pc, [sp], #4

08004758 <OTM8009A_DisplayOff>:
{
 8004758:	b500      	push	{lr}
 800475a:	b083      	sub	sp, #12
  uint8_t display = 0;
 800475c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800475e:	2128      	movs	r1, #40	; 0x28
 8004760:	3010      	adds	r0, #16
 8004762:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004766:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800476a:	f000 f88d 	bl	8004888 <otm8009a_write_reg>
 800476e:	3800      	subs	r0, #0
 8004770:	bf18      	it	ne
 8004772:	2001      	movne	r0, #1
}
 8004774:	4240      	negs	r0, r0
 8004776:	b003      	add	sp, #12
 8004778:	f85d fb04 	ldr.w	pc, [sp], #4

0800477c <OTM8009A_SetOrientation>:
{
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800477e:	2360      	movs	r3, #96	; 0x60
{
 8004780:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004782:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004784:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004786:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800478a:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800478e:	d83e      	bhi.n	800480e <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004790:	d020      	beq.n	80047d4 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004792:	f100 0510 	add.w	r5, r0, #16
 8004796:	4633      	mov	r3, r6
 8004798:	f10d 0207 	add.w	r2, sp, #7
 800479c:	2136      	movs	r1, #54	; 0x36
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 f872 	bl	8004888 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80047a4:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80047a6:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <OTM8009A_SetOrientation+0x98>)
 80047aa:	212a      	movs	r1, #42	; 0x2a
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f86b 	bl	8004888 <otm8009a_write_reg>
 80047b2:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80047b4:	2304      	movs	r3, #4
 80047b6:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80047b8:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80047ba:	4a17      	ldr	r2, [pc, #92]	; (8004818 <OTM8009A_SetOrientation+0x9c>)
 80047bc:	212b      	movs	r1, #43	; 0x2b
 80047be:	f000 f863 	bl	8004888 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80047c2:	4b16      	ldr	r3, [pc, #88]	; (800481c <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80047c4:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80047c6:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 80047c8:	3800      	subs	r0, #0
 80047ca:	bf18      	it	ne
 80047cc:	2001      	movne	r0, #1
 80047ce:	4240      	negs	r0, r0
}
 80047d0:	b003      	add	sp, #12
 80047d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80047d4:	f100 0510 	add.w	r5, r0, #16
 80047d8:	4633      	mov	r3, r6
 80047da:	460f      	mov	r7, r1
 80047dc:	f10d 0206 	add.w	r2, sp, #6
 80047e0:	2136      	movs	r1, #54	; 0x36
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f850 	bl	8004888 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80047e8:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80047ea:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <OTM8009A_SetOrientation+0x98>)
 80047ee:	212a      	movs	r1, #42	; 0x2a
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 f849 	bl	8004888 <otm8009a_write_reg>
 80047f6:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80047f8:	2304      	movs	r3, #4
 80047fa:	4628      	mov	r0, r5
 80047fc:	4a06      	ldr	r2, [pc, #24]	; (8004818 <OTM8009A_SetOrientation+0x9c>)
 80047fe:	212b      	movs	r1, #43	; 0x2b
 8004800:	f000 f842 	bl	8004888 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004804:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004808:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800480a:	601f      	str	r7, [r3, #0]
 800480c:	e7dc      	b.n	80047c8 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004812:	e7dd      	b.n	80047d0 <OTM8009A_SetOrientation+0x54>
 8004814:	08009024 	.word	0x08009024
 8004818:	08009028 	.word	0x08009028
 800481c:	24009178 	.word	0x24009178

08004820 <OTM8009A_ReadID>:
{ 
 8004820:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004822:	3010      	adds	r0, #16
 8004824:	21da      	movs	r1, #218	; 0xda
{ 
 8004826:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004828:	2300      	movs	r3, #0
 800482a:	f000 f825 	bl	8004878 <otm8009a_read_reg>
 800482e:	3800      	subs	r0, #0
 8004830:	bf18      	it	ne
 8004832:	2001      	movne	r0, #1
}  
 8004834:	4240      	negs	r0, r0
 8004836:	bd08      	pop	{r3, pc}

08004838 <OTM8009A_DrawVLine>:
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop

08004840 <OTM8009A_GetPixel>:
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004848:	b178      	cbz	r0, 800486a <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800484a:	684a      	ldr	r2, [r1, #4]
 800484c:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 800484e:	2000      	movs	r0, #0
{
 8004850:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8004852:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004856:	4906      	ldr	r1, [pc, #24]	; (8004870 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004858:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800485a:	4a06      	ldr	r2, [pc, #24]	; (8004874 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 800485c:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004860:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8004864:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004866:	611a      	str	r2, [r3, #16]
}
 8004868:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800486e:	4770      	bx	lr
 8004870:	08003ea1 	.word	0x08003ea1
 8004874:	08003eb1 	.word	0x08003eb1

08004878 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004878:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800487a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800487e:	46a4      	mov	ip, r4
}
 8004880:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004884:	4760      	bx	ip
 8004886:	bf00      	nop

08004888 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004888:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800488a:	6804      	ldr	r4, [r0, #0]
 800488c:	6880      	ldr	r0, [r0, #8]
 800488e:	46a4      	mov	ip, r4
}
 8004890:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004894:	4760      	bx	ip
 8004896:	bf00      	nop

08004898 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8004898:	f000 be90 	b.w	80055bc <HAL_GetTick>

0800489c <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800489c:	b910      	cbnz	r0, 80048a4 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800489e:	4b03      	ldr	r3, [pc, #12]	; (80048ac <BSP_LCD_SetActiveLayer+0x10>)
 80048a0:	6099      	str	r1, [r3, #8]
 80048a2:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80048a4:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	2401937c 	.word	0x2401937c

080048b0 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80048b0:	b918      	cbnz	r0, 80048ba <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <BSP_LCD_GetPixelFormat+0x10>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80048ba:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80048be:	4770      	bx	lr
 80048c0:	2401937c 	.word	0x2401937c

080048c4 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80048c4:	b948      	cbnz	r0, 80048da <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <BSP_LCD_GetXSize+0x1c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	b11b      	cbz	r3, 80048d6 <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <BSP_LCD_GetXSize+0x20>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	600b      	str	r3, [r1, #0]
 80048d4:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80048d6:	4618      	mov	r0, r3
  }

  return ret;
}
 80048d8:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80048da:	f06f 0001 	mvn.w	r0, #1
 80048de:	4770      	bx	lr
 80048e0:	24009188 	.word	0x24009188
 80048e4:	2401937c 	.word	0x2401937c

080048e8 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80048e8:	b948      	cbnz	r0, 80048fe <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <BSP_LCD_GetYSize+0x1c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	b11b      	cbz	r3, 80048fa <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <BSP_LCD_GetYSize+0x20>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80048fa:	4618      	mov	r0, r3
  }

  return ret;
}
 80048fc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80048fe:	f06f 0001 	mvn.w	r0, #1
 8004902:	4770      	bx	lr
 8004904:	24009188 	.word	0x24009188
 8004908:	2401937c 	.word	0x2401937c

0800490c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8004914:	b39c      	cbz	r4, 800497e <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004916:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800491a:	4d1a      	ldr	r5, [pc, #104]	; (8004984 <BSP_LCD_FillRGBRect+0x78>)
 800491c:	eb04 0802 	add.w	r8, r4, r2
 8004920:	eb0b 0e01 	add.w	lr, fp, r1
 8004924:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004928:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004988 <BSP_LCD_FillRGBRect+0x7c>
 800492c:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 800492e:	f1bb 0f00 	cmp.w	fp, #0
 8004932:	d021      	beq.n	8004978 <BSP_LCD_FillRGBRect+0x6c>
 8004934:	460c      	mov	r4, r1
 8004936:	e00a      	b.n	800494e <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004938:	682e      	ldr	r6, [r5, #0]
 800493a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800493c:	fb06 4602 	mla	r6, r6, r2, r4
 8004940:	3401      	adds	r4, #1
 8004942:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 8004946:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004948:	6928      	ldr	r0, [r5, #16]
 800494a:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800494c:	d014      	beq.n	8004978 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800494e:	68a8      	ldr	r0, [r5, #8]
 8004950:	f8d3 9000 	ldr.w	r9, [r3]
 8004954:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004958:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800495c:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800495e:	2e00      	cmp	r6, #0
 8004960:	d0ea      	beq.n	8004938 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004962:	682e      	ldr	r6, [r5, #0]
 8004964:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004966:	fb06 4602 	mla	r6, r6, r2, r4
 800496a:	3401      	adds	r4, #1
 800496c:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8004970:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004972:	6928      	ldr	r0, [r5, #16]
 8004974:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004976:	d1ea      	bne.n	800494e <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8004978:	3201      	adds	r2, #1
 800497a:	4542      	cmp	r2, r8
 800497c:	d1d7      	bne.n	800492e <BSP_LCD_FillRGBRect+0x22>
}
 800497e:	2000      	movs	r0, #0
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	2401937c 	.word	0x2401937c
 8004988:	240192d4 	.word	0x240192d4

0800498c <BSP_LCD_ReadPixel>:
{
 800498c:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800498e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004992:	4e10      	ldr	r6, [pc, #64]	; (80049d4 <BSP_LCD_ReadPixel+0x48>)
 8004994:	4f10      	ldr	r7, [pc, #64]	; (80049d8 <BSP_LCD_ReadPixel+0x4c>)
 8004996:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800499a:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800499e:	0080      	lsls	r0, r0, #2
 80049a0:	68ac      	ldr	r4, [r5, #8]
 80049a2:	fb0c 7404 	mla	r4, ip, r4, r7
 80049a6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80049a8:	b94d      	cbnz	r5, 80049be <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80049aa:	5830      	ldr	r0, [r6, r0]
 80049ac:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80049ae:	fb00 1202 	mla	r2, r0, r2, r1
}
 80049b2:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80049b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 80049b8:	bcf0      	pop	{r4, r5, r6, r7}
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80049be:	5835      	ldr	r5, [r6, r0]
 80049c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80049c2:	fb05 1202 	mla	r2, r5, r2, r1
 80049c6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 80049ca:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80049cc:	b292      	uxth	r2, r2
}
 80049ce:	bcf0      	pop	{r4, r5, r6, r7}
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4770      	bx	lr
 80049d4:	2401937c 	.word	0x2401937c
 80049d8:	240192d4 	.word	0x240192d4

080049dc <BSP_LCD_WritePixel>:
{
 80049dc:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80049e2:	4e0f      	ldr	r6, [pc, #60]	; (8004a20 <BSP_LCD_WritePixel+0x44>)
 80049e4:	4f0f      	ldr	r7, [pc, #60]	; (8004a24 <BSP_LCD_WritePixel+0x48>)
 80049e6:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80049ea:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80049ee:	0080      	lsls	r0, r0, #2
 80049f0:	68ac      	ldr	r4, [r5, #8]
 80049f2:	fb0c 7404 	mla	r4, ip, r4, r7
 80049f6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80049f8:	b945      	cbnz	r5, 8004a0c <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80049fa:	5830      	ldr	r0, [r6, r0]
 80049fc:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80049fe:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 8004a02:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004a04:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8004a08:	bcf0      	pop	{r4, r5, r6, r7}
 8004a0a:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004a0c:	5835      	ldr	r5, [r6, r0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004a12:	fb05 1202 	mla	r2, r5, r2, r1
}
 8004a16:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004a18:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	4770      	bx	lr
 8004a20:	2401937c 	.word	0x2401937c
 8004a24:	240192d4 	.word	0x240192d4

08004a28 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8004a28:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004a2a:	2406      	movs	r4, #6
{
 8004a2c:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004a2e:	9101      	str	r1, [sp, #4]
 8004a30:	4601      	mov	r1, r0
 8004a32:	9202      	str	r2, [sp, #8]
 8004a34:	9400      	str	r4, [sp, #0]
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <DSI_IO_Read+0x24>)
 8004a38:	f001 fb36 	bl	80060a8 <HAL_DSI_Read>
 8004a3c:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8004a3e:	bf14      	ite	ne
 8004a40:	f06f 0007 	mvnne.w	r0, #7
 8004a44:	2000      	moveq	r0, #0
 8004a46:	b004      	add	sp, #16
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	bf00      	nop
 8004a4c:	24019398 	.word	0x24019398

08004a50 <BSP_LCD_DrawBitmap>:
{
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a54:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004a58:	4e4f      	ldr	r6, [pc, #316]	; (8004b98 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a5a:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a5c:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004a60:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8004a64:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8004a68:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004ba4 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a6c:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a6e:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a72:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a76:	68b9      	ldr	r1, [r7, #8]
{
 8004a78:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a7a:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a7c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a80:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a84:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004a88:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a8c:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a8e:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004a92:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a96:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a9a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a9c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004aa0:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004aa4:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004aa8:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004aaa:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004aae:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004ab2:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ab6:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ab8:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8004abc:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004abe:	4465      	add	r5, ip
 8004ac0:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ac2:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ac4:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004ac6:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004aca:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ace:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ad0:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004ad4:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ad6:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ada:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8004ae0:	d957      	bls.n	8004b92 <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8004ae2:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8004ae6:	2c08      	cmp	r4, #8
 8004ae8:	bf34      	ite	cc
 8004aea:	f04f 0b02 	movcc.w	fp, #2
 8004aee:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004af2:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8004af6:	9c03      	ldr	r4, [sp, #12]
 8004af8:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004afc:	fb04 f909 	mul.w	r9, r4, r9
 8004b00:	fb09 1505 	mla	r5, r9, r5, r1
 8004b04:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8004b06:	f1ba 0f00 	cmp.w	sl, #0
 8004b0a:	d03e      	beq.n	8004b8a <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b0c:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8004b0e:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8004b12:	2700      	movs	r7, #0
 8004b14:	4c21      	ldr	r4, [pc, #132]	; (8004b9c <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b16:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004b1a:	e006      	b.n	8004b2a <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004b1c:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8004b1e:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004b20:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8004b22:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004b24:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8004b28:	d02f      	beq.n	8004b8a <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b2a:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004b2c:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004b2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004b32:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004b36:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8004b38:	4919      	ldr	r1, [pc, #100]	; (8004ba0 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004b3a:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8004b3e:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004b42:	bf18      	it	ne
 8004b44:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004b46:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004b48:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004b4a:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004b4e:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004b52:	4812      	ldr	r0, [pc, #72]	; (8004b9c <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8004b54:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004b58:	f000 fe18 	bl	800578c <HAL_DMA2D_Init>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d1dd      	bne.n	8004b1c <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004b60:	2101      	movs	r1, #1
 8004b62:	480e      	ldr	r0, [pc, #56]	; (8004b9c <BSP_LCD_DrawBitmap+0x14c>)
 8004b64:	f000 fef6 	bl	8005954 <HAL_DMA2D_ConfigLayer>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1d7      	bne.n	8004b1c <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	4642      	mov	r2, r8
 8004b72:	4629      	mov	r1, r5
 8004b74:	9000      	str	r0, [sp, #0]
 8004b76:	4809      	ldr	r0, [pc, #36]	; (8004b9c <BSP_LCD_DrawBitmap+0x14c>)
 8004b78:	f000 fe4a 	bl	8005810 <HAL_DMA2D_Start>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d1cd      	bne.n	8004b1c <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8004b80:	2132      	movs	r1, #50	; 0x32
 8004b82:	4806      	ldr	r0, [pc, #24]	; (8004b9c <BSP_LCD_DrawBitmap+0x14c>)
 8004b84:	f000 fe60 	bl	8005848 <HAL_DMA2D_PollForTransfer>
 8004b88:	e7c8      	b.n	8004b1c <BSP_LCD_DrawBitmap+0xcc>
}
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	b005      	add	sp, #20
 8004b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	e7ac      	b.n	8004af2 <BSP_LCD_DrawBitmap+0xa2>
 8004b98:	2401937c 	.word	0x2401937c
 8004b9c:	240193b4 	.word	0x240193b4
 8004ba0:	52001000 	.word	0x52001000
 8004ba4:	240192d4 	.word	0x240192d4

08004ba8 <LL_FillBuffer>:
{
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004bac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004bb0:	4c28      	ldr	r4, [pc, #160]	; (8004c54 <LL_FillBuffer+0xac>)
{
 8004bb2:	4617      	mov	r7, r2
 8004bb4:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004bb6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8004bba:	4698      	mov	r8, r3
 8004bbc:	460e      	mov	r6, r1
 8004bbe:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004bc0:	68c2      	ldr	r2, [r0, #12]
{
 8004bc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004bc4:	2a02      	cmp	r2, #2
 8004bc6:	d00f      	beq.n	8004be8 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004bc8:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8004bca:	4c23      	ldr	r4, [pc, #140]	; (8004c58 <LL_FillBuffer+0xb0>)
 8004bcc:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8004bd0:	4922      	ldr	r1, [pc, #136]	; (8004c5c <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004bd2:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004bd4:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8004bd6:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8004bd8:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004bdc:	f000 fdd6 	bl	800578c <HAL_DMA2D_Init>
 8004be0:	b308      	cbz	r0, 8004c26 <LL_FillBuffer+0x7e>
}
 8004be2:	b002      	add	sp, #8
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004be8:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8004bec:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8004bf0:	f005 041f 	and.w	r4, r5, #31
 8004bf4:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8004bf8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8004bfc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004c00:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8004c04:	3521      	adds	r5, #33	; 0x21
 8004c06:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8004c0a:	3117      	adds	r1, #23
 8004c0c:	09ad      	lsrs	r5, r5, #6
 8004c0e:	0989      	lsrs	r1, r1, #6
 8004c10:	022d      	lsls	r5, r5, #8
 8004c12:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8004c16:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8004c1a:	3017      	adds	r0, #23
 8004c1c:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8004c20:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8004c24:	e7d1      	b.n	8004bca <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004c26:	2101      	movs	r1, #1
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 fe93 	bl	8005954 <HAL_DMA2D_ConfigLayer>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1d7      	bne.n	8004be2 <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004c32:	463b      	mov	r3, r7
 8004c34:	4632      	mov	r2, r6
 8004c36:	4629      	mov	r1, r5
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f8cd 8000 	str.w	r8, [sp]
 8004c3e:	f000 fde7 	bl	8005810 <HAL_DMA2D_Start>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d1cd      	bne.n	8004be2 <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004c46:	4620      	mov	r0, r4
 8004c48:	2119      	movs	r1, #25
}
 8004c4a:	b002      	add	sp, #8
 8004c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004c50:	f000 bdfa 	b.w	8005848 <HAL_DMA2D_PollForTransfer>
 8004c54:	2401937c 	.word	0x2401937c
 8004c58:	240193b4 	.word	0x240193b4
 8004c5c:	52001000 	.word	0x52001000

08004c60 <BSP_LCD_DrawHLine>:
{
 8004c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c64:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004c68:	4f12      	ldr	r7, [pc, #72]	; (8004cb4 <BSP_LCD_DrawHLine+0x54>)
{
 8004c6a:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c6c:	f8df e048 	ldr.w	lr, [pc, #72]	; 8004cb8 <BSP_LCD_DrawHLine+0x58>
 8004c70:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 8004c74:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004c78:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004c7c:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c80:	688d      	ldr	r5, [r1, #8]
{
 8004c82:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c84:	690e      	ldr	r6, [r1, #16]
 8004c86:	fb02 4207 	mla	r2, r2, r7, r4
 8004c8a:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004c8e:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c90:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8004c92:	bf38      	it	cc
 8004c94:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004c96:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c98:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004c9c:	9a08      	ldr	r2, [sp, #32]
 8004c9e:	9400      	str	r4, [sp, #0]
 8004ca0:	9201      	str	r2, [sp, #4]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f7ff ff7f 	bl	8004ba8 <LL_FillBuffer>
}
 8004caa:	4620      	mov	r0, r4
 8004cac:	b002      	add	sp, #8
 8004cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2401937c 	.word	0x2401937c
 8004cb8:	240192d4 	.word	0x240192d4

08004cbc <BSP_LCD_DrawVLine>:
{
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cc0:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004cc4:	4c11      	ldr	r4, [pc, #68]	; (8004d0c <BSP_LCD_DrawVLine+0x50>)
 8004cc6:	4d12      	ldr	r5, [pc, #72]	; (8004d10 <BSP_LCD_DrawVLine+0x54>)
 8004cc8:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004ccc:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8004cd0:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004cd4:	eb02 0c03 	add.w	ip, r2, r3
{
 8004cd8:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cda:	68be      	ldr	r6, [r7, #8]
 8004cdc:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004ce0:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004ce2:	fb08 5606 	mla	r6, r8, r6, r5
 8004ce6:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004ce8:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cea:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004cec:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cee:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8004cf2:	bf88      	it	hi
 8004cf4:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004cf6:	9a08      	ldr	r2, [sp, #32]
 8004cf8:	e9cd 4200 	strd	r4, r2, [sp]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f7ff ff53 	bl	8004ba8 <LL_FillBuffer>
}
 8004d02:	2000      	movs	r0, #0
 8004d04:	b002      	add	sp, #8
 8004d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2401937c 	.word	0x2401937c
 8004d10:	240192d4 	.word	0x240192d4

08004d14 <BSP_LCD_FillRect>:
{
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004d16:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8004d1a:	4f0e      	ldr	r7, [pc, #56]	; (8004d54 <BSP_LCD_FillRect+0x40>)
 8004d1c:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8004d20:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <BSP_LCD_FillRect+0x44>)
 8004d22:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 8004d26:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8004d2a:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004d2c:	68b7      	ldr	r7, [r6, #8]
 8004d2e:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8004d32:	1ae4      	subs	r4, r4, r3
 8004d34:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004d36:	fb0e 5507 	mla	r5, lr, r7, r5
 8004d3a:	6937      	ldr	r7, [r6, #16]
{
 8004d3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004d3e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8004d40:	9400      	str	r4, [sp, #0]
 8004d42:	fb07 3101 	mla	r1, r7, r1, r3
 8004d46:	9b08      	ldr	r3, [sp, #32]
 8004d48:	9601      	str	r6, [sp, #4]
 8004d4a:	f7ff ff2d 	bl	8004ba8 <LL_FillBuffer>
}
 8004d4e:	2000      	movs	r0, #0
 8004d50:	b003      	add	sp, #12
 8004d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d54:	2401937c 	.word	0x2401937c
 8004d58:	240192d4 	.word	0x240192d4

08004d5c <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8004d5e:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004d60:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004d64:	f042 0208 	orr.w	r2, r2, #8
 8004d68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004d6c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004d70:	f002 0208 	and.w	r2, r2, #8
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8004d78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d7c:	f042 0208 	orr.w	r2, r2, #8
 8004d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8004d84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d88:	f022 0208 	bic.w	r2, r2, #8
 8004d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004d90:	b002      	add	sp, #8
 8004d92:	4770      	bx	lr
 8004d94:	58024400 	.word	0x58024400

08004d98 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8004d9a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004da0:	f042 0210 	orr.w	r2, r2, #16
 8004da4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004da8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004dac:	f002 0210 	and.w	r2, r2, #16
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004db4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004db6:	f042 0210 	orr.w	r2, r2, #16
 8004dba:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8004dbc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004dbe:	f022 0210 	bic.w	r2, r2, #16
 8004dc2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004dc4:	b002      	add	sp, #8
 8004dc6:	4770      	bx	lr
 8004dc8:	58024400 	.word	0x58024400

08004dcc <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8004dce:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8004dd0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004dd4:	f042 0210 	orr.w	r2, r2, #16
 8004dd8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004ddc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004de0:	f002 0210 	and.w	r2, r2, #16
 8004de4:	9201      	str	r2, [sp, #4]
 8004de6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8004de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004dec:	f042 0210 	orr.w	r2, r2, #16
 8004df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8004df4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004df8:	f022 0210 	bic.w	r2, r2, #16
 8004dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004e00:	b002      	add	sp, #8
 8004e02:	4770      	bx	lr
 8004e04:	58024400 	.word	0x58024400

08004e08 <DSI_IO_Write>:
  if(Size <= 1U)
 8004e08:	2b01      	cmp	r3, #1
{
 8004e0a:	b530      	push	{r4, r5, lr}
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	b083      	sub	sp, #12
 8004e10:	4601      	mov	r1, r0
  if(Size <= 1U)
 8004e12:	d909      	bls.n	8004e28 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8004e14:	480a      	ldr	r0, [pc, #40]	; (8004e40 <DSI_IO_Write+0x38>)
 8004e16:	e9cd 5200 	strd	r5, r2, [sp]
 8004e1a:	2239      	movs	r2, #57	; 0x39
 8004e1c:	f001 f8d8 	bl	8005fd0 <HAL_DSI_LongWrite>
 8004e20:	b958      	cbnz	r0, 8004e3a <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8004e22:	2000      	movs	r0, #0
}
 8004e24:	b003      	add	sp, #12
 8004e26:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8004e28:	5cd0      	ldrb	r0, [r2, r3]
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	2215      	movs	r2, #21
 8004e2e:	9000      	str	r0, [sp, #0]
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <DSI_IO_Write+0x38>)
 8004e32:	f001 f8b9 	bl	8005fa8 <HAL_DSI_ShortWrite>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0f3      	beq.n	8004e22 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8004e3a:	f06f 0007 	mvn.w	r0, #7
 8004e3e:	e7f1      	b.n	8004e24 <DSI_IO_Write+0x1c>
 8004e40:	24019398 	.word	0x24019398

08004e44 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <BSP_LCD_Reset+0x5c>)
 8004e46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8004e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8004e54:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8004e5a:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004e5c:	4c11      	ldr	r4, [pc, #68]	; (8004ea4 <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004e5e:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e64:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004e66:	4620      	mov	r0, r4
 8004e68:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8004e6e:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e70:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8004e72:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004e76:	f001 f99f 	bl	80061b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f001 fab8 	bl	80063f4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8004e84:	2014      	movs	r0, #20
 8004e86:	f000 fb9f 	bl	80055c8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f001 fab0 	bl	80063f4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8004e94:	200a      	movs	r0, #10
 8004e96:	f000 fb97 	bl	80055c8 <HAL_Delay>
}
 8004e9a:	b007      	add	sp, #28
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	58021800 	.word	0x58021800

08004ea8 <MX_DSIHOST_DSI_Init>:
{
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8004eac:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8004eb0:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8004eb2:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8004eb4:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004eb8:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8004eba:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004ebe:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8004ec2:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004ec4:	60c6      	str	r6, [r0, #12]
{
 8004ec6:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8004ec8:	4669      	mov	r1, sp
{
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4690      	mov	r8, r2
 8004ece:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8004ed0:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8004ed2:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004ed6:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8004eda:	f000 fdcd 	bl	8005a78 <HAL_DSI_Init>
 8004ede:	b118      	cbz	r0, 8004ee8 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8004ee0:	4630      	mov	r0, r6
}
 8004ee2:	b01e      	add	sp, #120	; 0x78
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004ee8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <MX_DSIHOST_DSI_Init+0xd0>)
 8004eee:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004ef0:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004ef2:	fb03 2207 	mla	r2, r3, r7, r2
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8004ef8:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8004efa:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004efc:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8004f00:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8004f04:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8004f08:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004f0c:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8004f0e:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8004f10:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8004f12:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8004f14:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8004f16:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8004f1a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8004f1e:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8004f22:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004f24:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8004f26:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8004f2a:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8004f2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8004f30:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8004f36:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8004f3a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8004f3e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8004f42:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8004f44:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8004f48:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004f4a:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8004f4e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8004f52:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004f56:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8004f58:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8004f5c:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8004f60:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8004f64:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004f68:	f000 febe 	bl	8005ce8 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8004f6c:	3800      	subs	r0, #0
 8004f6e:	bf18      	it	ne
 8004f70:	2001      	movne	r0, #1
}
 8004f72:	b01e      	add	sp, #120	; 0x78
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	0042c1d8 	.word	0x0042c1d8
 8004f7c:	4c751ce3 	.word	0x4c751ce3

08004f80 <MX_LTDC_Init>:
{
 8004f80:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8004f82:	4d0e      	ldr	r5, [pc, #56]	; (8004fbc <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8004f84:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8004f88:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8004f8a:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8004f8c:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8004f8e:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8004f90:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8004f92:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8004f94:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8004f96:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004f98:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8004f9a:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8004f9c:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8004f9e:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8004fa0:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8004fa2:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8004fa4:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8004fa6:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8004faa:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8004fac:	6181      	str	r1, [r0, #24]
}
 8004fae:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004fb0:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004fb4:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8004fb8:	f001 bada 	b.w	8006570 <HAL_LTDC_Init>
 8004fbc:	50001000 	.word	0x50001000

08004fc0 <MX_LTDC_ConfigLayer>:
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8004fc6:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8004fc8:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8004fca:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8004fcc:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8004fce:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004fd0:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8004fd4:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8004fd6:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8004fd8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8004fdc:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8004fe0:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8004fe4:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8004fe6:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8004fe8:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004fea:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8004fec:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8004fee:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8004ff0:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8004ff2:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8004ff4:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8004ff6:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004ffa:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8004ffe:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005000:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005002:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005004:	f001 fb8e 	bl	8006724 <HAL_LTDC_ConfigLayer>
}
 8005008:	b00f      	add	sp, #60	; 0x3c
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800500c <MX_LTDC_ClockConfig>:
{
 800500c:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800500e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005012:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005014:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005016:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005018:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800501c:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800501e:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005020:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005022:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005024:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005026:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005028:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800502a:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800502e:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005032:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005036:	f002 fa55 	bl	80074e4 <HAL_RCCEx_PeriphCLKConfig>
}
 800503a:	b031      	add	sp, #196	; 0xc4
 800503c:	bd30      	pop	{r4, r5, pc}
 800503e:	bf00      	nop

08005040 <BSP_LCD_InitEx>:
{
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005044:	2901      	cmp	r1, #1
{
 8005046:	b093      	sub	sp, #76	; 0x4c
 8005048:	461d      	mov	r5, r3
 800504a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800504e:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005050:	f200 80f2 	bhi.w	8005238 <BSP_LCD_InitEx+0x1f8>
 8005054:	1e03      	subs	r3, r0, #0
 8005056:	bf18      	it	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 80ec 	bne.w	8005238 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005060:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005062:	2901      	cmp	r1, #1
 8005064:	f200 80e8 	bhi.w	8005238 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005068:	2a02      	cmp	r2, #2
 800506a:	f000 80ab 	beq.w	80051c4 <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800506e:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005070:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005072:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005074:	4c72      	ldr	r4, [pc, #456]	; (8005240 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005076:	2000      	movs	r0, #0
 8005078:	4f72      	ldr	r7, [pc, #456]	; (8005244 <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800507a:	2600      	movs	r6, #0
 800507c:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800507e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005082:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005084:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005088:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800508a:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 800508e:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005090:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005094:	f7ff fed6 	bl	8004e44 <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005098:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800509c:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800509e:	a90c      	add	r1, sp, #48	; 0x30
 80050a0:	4869      	ldr	r0, [pc, #420]	; (8005248 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80050a2:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 80050a6:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80050aa:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80050ae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80050b2:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80050b6:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80050b8:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80050ba:	f8cd c014 	str.w	ip, [sp, #20]
 80050be:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80050c2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80050c6:	f001 f877 	bl	80061b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80050ca:	2201      	movs	r2, #1
 80050cc:	4649      	mov	r1, r9
 80050ce:	485e      	ldr	r0, [pc, #376]	; (8005248 <BSP_LCD_InitEx+0x208>)
 80050d0:	f001 f990 	bl	80063f4 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 80050d4:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80050d8:	a90c      	add	r1, sp, #48	; 0x30
 80050da:	485b      	ldr	r0, [pc, #364]	; (8005248 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 80050dc:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 80050e0:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005278 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 80050e4:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80050e8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80050ec:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 80050ee:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80050f2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80050f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 80050fa:	9406      	str	r4, [sp, #24]
 80050fc:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80050fe:	f001 f85b 	bl	80061b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005102:	2201      	movs	r2, #1
 8005104:	4651      	mov	r1, sl
 8005106:	4850      	ldr	r0, [pc, #320]	; (8005248 <BSP_LCD_InitEx+0x208>)
 8005108:	f001 f974 	bl	80063f4 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800510c:	4632      	mov	r2, r6
 800510e:	210f      	movs	r1, #15
 8005110:	2058      	movs	r0, #88	; 0x58
 8005112:	f000 fa8d 	bl	8005630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005116:	2058      	movs	r0, #88	; 0x58
 8005118:	f000 fac4 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800511c:	4632      	mov	r2, r6
 800511e:	210f      	movs	r1, #15
 8005120:	205a      	movs	r0, #90	; 0x5a
 8005122:	f000 fa85 	bl	8005630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005126:	205a      	movs	r0, #90	; 0x5a
 8005128:	f000 fabc 	bl	80056a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800512c:	4632      	mov	r2, r6
 800512e:	210f      	movs	r1, #15
 8005130:	207b      	movs	r0, #123	; 0x7b
 8005132:	f000 fa7d 	bl	8005630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005136:	207b      	movs	r0, #123	; 0x7b
 8005138:	f000 fab4 	bl	80056a4 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 800513c:	4c43      	ldr	r4, [pc, #268]	; (800524c <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 800513e:	4844      	ldr	r0, [pc, #272]	; (8005250 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005140:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005144:	4943      	ldr	r1, [pc, #268]	; (8005254 <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005146:	4e44      	ldr	r6, [pc, #272]	; (8005258 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005148:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 800514a:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 800514c:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005150:	f7ff fe04 	bl	8004d5c <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005154:	f8d9 2000 	ldr.w	r2, [r9]
 8005158:	9b02      	ldr	r3, [sp, #8]
 800515a:	4282      	cmp	r2, r0
 800515c:	d03a      	beq.n	80051d4 <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 800515e:	680a      	ldr	r2, [r1, #0]
 8005160:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005164:	d031      	beq.n	80051ca <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005166:	4642      	mov	r2, r8
 8005168:	4629      	mov	r1, r5
 800516a:	483a      	ldr	r0, [pc, #232]	; (8005254 <BSP_LCD_InitEx+0x214>)
 800516c:	f7ff fe9c 	bl	8004ea8 <MX_DSIHOST_DSI_Init>
 8005170:	2800      	cmp	r0, #0
 8005172:	d15c      	bne.n	800522e <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005174:	4835      	ldr	r0, [pc, #212]	; (800524c <BSP_LCD_InitEx+0x20c>)
 8005176:	f7ff ff49 	bl	800500c <MX_LTDC_ClockConfig>
 800517a:	2800      	cmp	r0, #0
 800517c:	d157      	bne.n	800522e <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800517e:	4642      	mov	r2, r8
 8005180:	4629      	mov	r1, r5
 8005182:	4832      	ldr	r0, [pc, #200]	; (800524c <BSP_LCD_InitEx+0x20c>)
 8005184:	f7ff fefc 	bl	8004f80 <MX_LTDC_Init>
 8005188:	2800      	cmp	r0, #0
 800518a:	d150      	bne.n	800522e <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800518c:	f000 f8b2 	bl	80052f4 <BSP_SDRAM_Init>
 8005190:	2800      	cmp	r0, #0
 8005192:	d14c      	bne.n	800522e <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005194:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005196:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800519a:	4601      	mov	r1, r0
      config.X0          = 0;
 800519c:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800519e:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 80051a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 80051a4:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80051a8:	4828      	ldr	r0, [pc, #160]	; (800524c <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 80051aa:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80051ae:	f7ff ff07 	bl	8004fc0 <MX_LTDC_ConfigLayer>
 80051b2:	4604      	mov	r4, r0
 80051b4:	b190      	cbz	r0, 80051dc <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80051b6:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
}
 80051be:	b013      	add	sp, #76	; 0x4c
 80051c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 80051c4:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	e754      	b.n	8005074 <BSP_LCD_InitEx+0x34>
 80051ca:	9302      	str	r3, [sp, #8]
 80051cc:	f7ff fdfe 	bl	8004dcc <DSI_MspInit.part.0>
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	e7c8      	b.n	8005166 <BSP_LCD_InitEx+0x126>
 80051d4:	f7ff fde0 	bl	8004d98 <DMA2D_MspInit.part.0>
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	e7c0      	b.n	800515e <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 80051dc:	481d      	ldr	r0, [pc, #116]	; (8005254 <BSP_LCD_InitEx+0x214>)
 80051de:	f000 febb 	bl	8005f58 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 80051e2:	2104      	movs	r1, #4
 80051e4:	481b      	ldr	r0, [pc, #108]	; (8005254 <BSP_LCD_InitEx+0x214>)
 80051e6:	f000 fea3 	bl	8005f30 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80051ec:	4d1c      	ldr	r5, [pc, #112]	; (8005260 <BSP_LCD_InitEx+0x220>)
 80051ee:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 80051f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80051f4:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 80051f8:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 80051fc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005200:	f7ff fb22 	bl	8004848 <OTM8009A_RegisterBusIO>
 8005204:	b980      	cbnz	r0, 8005228 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005206:	4c19      	ldr	r4, [pc, #100]	; (800526c <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005208:	4628      	mov	r0, r5
 800520a:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 800520c:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800520e:	f7ff fb07 	bl	8004820 <OTM8009A_ReadID>
 8005212:	b948      	cbnz	r0, 8005228 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <BSP_LCD_InitEx+0x230>)
 8005216:	4d17      	ldr	r5, [pc, #92]	; (8005274 <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	9a03      	ldr	r2, [sp, #12]
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005220:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005222:	47a0      	blx	r4
 8005224:	2800      	cmp	r0, #0
 8005226:	d0c8      	beq.n	80051ba <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005228:	f06f 0006 	mvn.w	r0, #6
 800522c:	e7c5      	b.n	80051ba <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800522e:	f06f 0003 	mvn.w	r0, #3
}
 8005232:	b013      	add	sp, #76	; 0x4c
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005238:	f06f 0001 	mvn.w	r0, #1
 800523c:	e7bf      	b.n	80051be <BSP_LCD_InitEx+0x17e>
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	2401937c 	.word	0x2401937c
 8005248:	58022400 	.word	0x58022400
 800524c:	240192d4 	.word	0x240192d4
 8005250:	52001000 	.word	0x52001000
 8005254:	24019398 	.word	0x24019398
 8005258:	50001000 	.word	0x50001000
 800525c:	08004899 	.word	0x08004899
 8005260:	2400918c 	.word	0x2400918c
 8005264:	08004e09 	.word	0x08004e09
 8005268:	08004a29 	.word	0x08004a29
 800526c:	24009184 	.word	0x24009184
 8005270:	24009010 	.word	0x24009010
 8005274:	24009188 	.word	0x24009188
 8005278:	240193b4 	.word	0x240193b4

0800527c <BSP_LCD_Init>:
{
 800527c:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800527e:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005282:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005284:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005288:	2201      	movs	r2, #1
 800528a:	9400      	str	r4, [sp, #0]
 800528c:	f7ff fed8 	bl	8005040 <BSP_LCD_InitEx>
}
 8005290:	b002      	add	sp, #8
 8005292:	bd10      	pop	{r4, pc}

08005294 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005296:	4915      	ldr	r1, [pc, #84]	; (80052ec <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005298:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800529a:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800529c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80052a0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 80052a4:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80052a8:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80052ac:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80052ae:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80052b0:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80052b2:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80052b4:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80052b6:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80052b8:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80052ba:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80052bc:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80052be:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80052c0:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80052c2:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80052c4:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 80052c6:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 80052c8:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80052ca:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80052cc:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 80052ce:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80052d0:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80052d4:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80052d8:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 80052da:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80052de:	f002 febb 	bl	8008058 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 80052e2:	1b40      	subs	r0, r0, r5
 80052e4:	bf18      	it	ne
 80052e6:	2001      	movne	r0, #1
 80052e8:	b009      	add	sp, #36	; 0x24
 80052ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ec:	52004140 	.word	0x52004140
 80052f0:	2401941c 	.word	0x2401941c

080052f4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f040 80e1 	bne.w	80054bc <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80052fc:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 80052fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005306:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005308:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 800530c:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 800530e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005312:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005314:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005316:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005318:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800531c:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800531e:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005322:	9201      	str	r2, [sp, #4]
 8005324:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005326:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800532a:	430a      	orrs	r2, r1
 800532c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005330:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005334:	400a      	ands	r2, r1
 8005336:	9202      	str	r2, [sp, #8]
 8005338:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800533a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800533e:	f042 0208 	orr.w	r2, r2, #8
 8005342:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005346:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800534a:	f002 0208 	and.w	r2, r2, #8
 800534e:	9203      	str	r2, [sp, #12]
 8005350:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005352:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005356:	f042 0210 	orr.w	r2, r2, #16
 800535a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800535e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005362:	f002 0210 	and.w	r2, r2, #16
 8005366:	9204      	str	r2, [sp, #16]
 8005368:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800536a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800536e:	f042 0220 	orr.w	r2, r2, #32
 8005372:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005376:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800537a:	f002 0220 	and.w	r2, r2, #32
 800537e:	9205      	str	r2, [sp, #20]
 8005380:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005382:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800538e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005392:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005396:	9206      	str	r2, [sp, #24]
 8005398:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800539a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800539e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053ae:	9207      	str	r2, [sp, #28]
 80053b0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80053be:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80053c6:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80053cc:	483f      	ldr	r0, [pc, #252]	; (80054cc <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80053ce:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80053d0:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053d2:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80053d4:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053d6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80053d8:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80053da:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80053dc:	f000 feec 	bl	80061b8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80053e0:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80053e4:	a909      	add	r1, sp, #36	; 0x24
 80053e6:	483a      	ldr	r0, [pc, #232]	; (80054d0 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80053ea:	f000 fee5 	bl	80061b8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80053ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80053f2:	a909      	add	r1, sp, #36	; 0x24
 80053f4:	4837      	ldr	r0, [pc, #220]	; (80054d4 <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80053f6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80053f8:	f000 fede 	bl	80061b8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80053fc:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005400:	a909      	add	r1, sp, #36	; 0x24
 8005402:	4835      	ldr	r0, [pc, #212]	; (80054d8 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005406:	f000 fed7 	bl	80061b8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800540a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800540e:	a909      	add	r1, sp, #36	; 0x24
 8005410:	4832      	ldr	r0, [pc, #200]	; (80054dc <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005412:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005414:	f000 fed0 	bl	80061b8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005418:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800541c:	a909      	add	r1, sp, #36	; 0x24
 800541e:	4830      	ldr	r0, [pc, #192]	; (80054e0 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005420:	4c30      	ldr	r4, [pc, #192]	; (80054e4 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005422:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005424:	f000 fec8 	bl	80061b8 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800542c:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005430:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005434:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005436:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800543c:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800543e:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005440:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005442:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005444:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005446:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005448:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800544a:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800544c:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800544e:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005450:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005454:	4e25      	ldr	r6, [pc, #148]	; (80054ec <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005456:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005458:	6334      	str	r4, [r6, #48]	; 0x30
 800545a:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800545c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005464:	f001 fa28 	bl	80068b8 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005468:	4620      	mov	r0, r4
 800546a:	f001 f9ab 	bl	80067c4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800546e:	462a      	mov	r2, r5
 8005470:	210f      	movs	r1, #15
 8005472:	207a      	movs	r0, #122	; 0x7a
 8005474:	f000 f8dc 	bl	8005630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005478:	207a      	movs	r0, #122	; 0x7a
 800547a:	f000 f913 	bl	80056a4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff ff08 	bl	8005294 <MX_SDRAM_Init>
 8005484:	4603      	mov	r3, r0
 8005486:	b9e0      	cbnz	r0, 80054c2 <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005488:	4919      	ldr	r1, [pc, #100]	; (80054f0 <BSP_SDRAM_Init+0x1fc>)
 800548a:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005492:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005496:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005498:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800549a:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800549c:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800549e:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80054a0:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80054a2:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80054a6:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80054a8:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80054aa:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80054ac:	f7fe fc62 	bl	8003d74 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80054b0:	2800      	cmp	r0, #0
 80054b2:	bf18      	it	ne
 80054b4:	f06f 0004 	mvnne.w	r0, #4
}
 80054b8:	b00f      	add	sp, #60	; 0x3c
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80054bc:	f06f 0001 	mvn.w	r0, #1
}
 80054c0:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	e7f7      	b.n	80054b8 <BSP_SDRAM_Init+0x1c4>
 80054c8:	58024400 	.word	0x58024400
 80054cc:	58020c00 	.word	0x58020c00
 80054d0:	58021000 	.word	0x58021000
 80054d4:	58021400 	.word	0x58021400
 80054d8:	58021800 	.word	0x58021800
 80054dc:	58021c00 	.word	0x58021c00
 80054e0:	58022000 	.word	0x58022000
 80054e4:	240091ac 	.word	0x240091ac
 80054e8:	52000040 	.word	0x52000040
 80054ec:	2401941c 	.word	0x2401941c
 80054f0:	24009218 	.word	0x24009218

080054f4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop

080054f8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_InitTick+0x40>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b90b      	cbnz	r3, 8005502 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005500:	4770      	bx	lr
{
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <HAL_InitTick+0x44>)
 800550c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005510:	6810      	ldr	r0, [r2, #0]
 8005512:	fbb0 f0f3 	udiv	r0, r0, r3
 8005516:	f000 f8d3 	bl	80056c0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800551a:	2c0f      	cmp	r4, #15
 800551c:	d800      	bhi.n	8005520 <HAL_InitTick+0x28>
 800551e:	b108      	cbz	r0, 8005524 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005520:	2001      	movs	r0, #1
}
 8005522:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005524:	2200      	movs	r2, #0
 8005526:	4621      	mov	r1, r4
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	f000 f880 	bl	8005630 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_InitTick+0x48>)
 8005532:	2000      	movs	r0, #0
 8005534:	601c      	str	r4, [r3, #0]
}
 8005536:	bd10      	pop	{r4, pc}
 8005538:	2400905c 	.word	0x2400905c
 800553c:	24000000 	.word	0x24000000
 8005540:	24009060 	.word	0x24009060

08005544 <HAL_Init>:
{
 8005544:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005546:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005548:	4c12      	ldr	r4, [pc, #72]	; (8005594 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800554a:	f000 f85d 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800554e:	4d12      	ldr	r5, [pc, #72]	; (8005598 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005550:	f001 fd06 	bl	8006f60 <HAL_RCC_GetSysClockFreq>
 8005554:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_Init+0x58>)
 8005556:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005558:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800555a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800555c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800555e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005562:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005564:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005566:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005568:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800556c:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800556e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005572:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8005578:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800557a:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800557c:	f7ff ffbc 	bl	80054f8 <HAL_InitTick>
 8005580:	b110      	cbz	r0, 8005588 <HAL_Init+0x44>
    return HAL_ERROR;
 8005582:	2401      	movs	r4, #1
}
 8005584:	4620      	mov	r0, r4
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	4604      	mov	r4, r0
  HAL_MspInit();
 800558a:	f7ff ffb3 	bl	80054f4 <HAL_MspInit>
}
 800558e:	4620      	mov	r0, r4
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	bf00      	nop
 8005594:	08008e84 	.word	0x08008e84
 8005598:	24000004 	.word	0x24000004
 800559c:	58024400 	.word	0x58024400
 80055a0:	24000000 	.word	0x24000000

080055a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80055a4:	4a03      	ldr	r2, [pc, #12]	; (80055b4 <HAL_IncTick+0x10>)
 80055a6:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <HAL_IncTick+0x14>)
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	440b      	add	r3, r1
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	24019450 	.word	0x24019450
 80055b8:	2400905c 	.word	0x2400905c

080055bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80055bc:	4b01      	ldr	r3, [pc, #4]	; (80055c4 <HAL_GetTick+0x8>)
 80055be:	6818      	ldr	r0, [r3, #0]
}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	24019450 	.word	0x24019450

080055c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7ff fff6 	bl	80055bc <HAL_GetTick>
 80055d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d2:	1c63      	adds	r3, r4, #1
 80055d4:	d002      	beq.n	80055dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <HAL_Delay+0x20>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055dc:	f7ff ffee 	bl	80055bc <HAL_GetTick>
 80055e0:	1b43      	subs	r3, r0, r5
 80055e2:	42a3      	cmp	r3, r4
 80055e4:	d3fa      	bcc.n	80055dc <HAL_Delay+0x14>
  {
  }
}
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	2400905c 	.word	0x2400905c

080055ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80055ec:	4b01      	ldr	r3, [pc, #4]	; (80055f4 <HAL_GetREVID+0x8>)
 80055ee:	6818      	ldr	r0, [r3, #0]
}
 80055f0:	0c00      	lsrs	r0, r0, #16
 80055f2:	4770      	bx	lr
 80055f4:	5c001000 	.word	0x5c001000

080055f8 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80055f8:	4a02      	ldr	r2, [pc, #8]	; (8005604 <HAL_EnableCompensationCell+0xc>)
 80055fa:	6a13      	ldr	r3, [r2, #32]
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6213      	str	r3, [r2, #32]
}
 8005602:	4770      	bx	lr
 8005604:	58000400 	.word	0x58000400

08005608 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005608:	4907      	ldr	r1, [pc, #28]	; (8005628 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800560a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800560e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005610:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005614:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005616:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800561a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800561c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005620:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8005622:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005624:	60cb      	str	r3, [r1, #12]
 8005626:	4770      	bx	lr
 8005628:	e000ed00 	.word	0xe000ed00
 800562c:	05fa0000 	.word	0x05fa0000

08005630 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_NVIC_SetPriority+0x68>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005638:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800563a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005640:	2d04      	cmp	r5, #4
 8005642:	bf28      	it	cs
 8005644:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005646:	2c06      	cmp	r4, #6
 8005648:	d919      	bls.n	800567e <HAL_NVIC_SetPriority+0x4e>
 800564a:	3b03      	subs	r3, #3
 800564c:	f04f 34ff 	mov.w	r4, #4294967295
 8005650:	409c      	lsls	r4, r3
 8005652:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005656:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800565a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800565c:	fa04 f405 	lsl.w	r4, r4, r5
 8005660:	ea21 0104 	bic.w	r1, r1, r4
 8005664:	fa01 f103 	lsl.w	r1, r1, r3
 8005668:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800566c:	db0a      	blt.n	8005684 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566e:	0109      	lsls	r1, r1, #4
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_NVIC_SetPriority+0x6c>)
 8005672:	b2c9      	uxtb	r1, r1
 8005674:	4403      	add	r3, r0
 8005676:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800567a:	bc30      	pop	{r4, r5}
 800567c:	4770      	bx	lr
 800567e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005680:	4613      	mov	r3, r2
 8005682:	e7e8      	b.n	8005656 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005684:	f000 000f 	and.w	r0, r0, #15
 8005688:	0109      	lsls	r1, r1, #4
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_NVIC_SetPriority+0x70>)
 800568c:	b2c9      	uxtb	r1, r1
 800568e:	4403      	add	r3, r0
 8005690:	7619      	strb	r1, [r3, #24]
 8005692:	bc30      	pop	{r4, r5}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	e000ed00 	.word	0xe000ed00
 800569c:	e000e100 	.word	0xe000e100
 80056a0:	e000ecfc 	.word	0xe000ecfc

080056a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056a4:	2800      	cmp	r0, #0
 80056a6:	db07      	blt.n	80056b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a8:	2301      	movs	r3, #1
 80056aa:	f000 011f 	and.w	r1, r0, #31
 80056ae:	4a03      	ldr	r2, [pc, #12]	; (80056bc <HAL_NVIC_EnableIRQ+0x18>)
 80056b0:	0940      	lsrs	r0, r0, #5
 80056b2:	408b      	lsls	r3, r1
 80056b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e100 	.word	0xe000e100

080056c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056c0:	3801      	subs	r0, #1
 80056c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80056c6:	d20d      	bcs.n	80056e4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056cc:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ce:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d0:	25f0      	movs	r5, #240	; 0xf0
 80056d2:	4c06      	ldr	r4, [pc, #24]	; (80056ec <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056d4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056de:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80056e0:	bc30      	pop	{r4, r5}
 80056e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80056e4:	2001      	movs	r0, #1
 80056e6:	4770      	bx	lr
 80056e8:	e000e010 	.word	0xe000e010
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80056f0:	b470      	push	{r4, r5, r6}
 80056f2:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056f4:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80056f8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80056fc:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056fe:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005702:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8005706:	ea43 0304 	orr.w	r3, r3, r4
 800570a:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800570c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800570e:	d008      	beq.n	8005722 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005710:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8005714:	d002      	beq.n	800571c <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005716:	60e9      	str	r1, [r5, #12]
  }
}
 8005718:	bc70      	pop	{r4, r5, r6}
 800571a:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800571c:	6169      	str	r1, [r5, #20]
}
 800571e:	bc70      	pop	{r4, r5, r6}
 8005720:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005722:	6883      	ldr	r3, [r0, #8]
 8005724:	b1b3      	cbz	r3, 8005754 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005726:	2b01      	cmp	r3, #1
 8005728:	d017      	beq.n	800575a <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800572a:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800572c:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005730:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005734:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005736:	d01e      	beq.n	8005776 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005738:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800573a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800573e:	d00f      	beq.n	8005760 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8005740:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8005742:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005744:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8005746:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005748:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800574c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005750:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005754:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8005756:	bc70      	pop	{r4, r5, r6}
 8005758:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 800575a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800575e:	e7f9      	b.n	8005754 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8005760:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8005762:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005764:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8005766:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005768:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800576c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8005770:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8005774:	e7ee      	b.n	8005754 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8005776:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8005778:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800577a:	02c9      	lsls	r1, r1, #11
 800577c:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8005780:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8005784:	e7e6      	b.n	8005754 <DMA2D_SetConfig+0x64>
 8005786:	bf00      	nop

08005788 <HAL_DMA2D_MspInit>:
}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop

0800578c <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800578c:	2800      	cmp	r0, #0
 800578e:	d036      	beq.n	80057fe <HAL_DMA2D_Init+0x72>
{
 8005790:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005792:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8005796:	4604      	mov	r4, r0
 8005798:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800579c:	b353      	cbz	r3, 80057f4 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800579e:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057a0:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057a2:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80057a4:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057a6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057aa:	4916      	ldr	r1, [pc, #88]	; (8005804 <HAL_DMA2D_Init+0x78>)
 80057ac:	681e      	ldr	r6, [r3, #0]
 80057ae:	6862      	ldr	r2, [r4, #4]
 80057b0:	4031      	ands	r1, r6
 80057b2:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057b4:	4814      	ldr	r0, [pc, #80]	; (8005808 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057b6:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057b8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057ba:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057bc:	69a1      	ldr	r1, [r4, #24]
 80057be:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80057c0:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057c2:	4912      	ldr	r1, [pc, #72]	; (800580c <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057c4:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80057c6:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057c8:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057ca:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057d2:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057d4:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057d6:	0552      	lsls	r2, r2, #21
 80057d8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057da:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057de:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 80057e2:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057e4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80057e8:	430a      	orrs	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80057ec:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80057ee:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80057f4:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80057f8:	f7ff ffc6 	bl	8005788 <HAL_DMA2D_MspInit>
 80057fc:	e7cf      	b.n	800579e <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 80057fe:	2001      	movs	r0, #1
}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	fff8ffbf 	.word	0xfff8ffbf
 8005808:	fffffef8 	.word	0xfffffef8
 800580c:	ffff0000 	.word	0xffff0000

08005810 <HAL_DMA2D_Start>:
{
 8005810:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8005812:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8005816:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8005818:	2d01      	cmp	r5, #1
 800581a:	d011      	beq.n	8005840 <HAL_DMA2D_Start+0x30>
 800581c:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800581e:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005820:	2502      	movs	r5, #2
 8005822:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005824:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8005826:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800582a:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800582e:	f7ff ff5f 	bl	80056f0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8005832:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8005834:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	4333      	orrs	r3, r6
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	b003      	add	sp, #12
 800583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8005840:	2002      	movs	r0, #2
}
 8005842:	b003      	add	sp, #12
 8005844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005846:	bf00      	nop

08005848 <HAL_DMA2D_PollForTransfer>:
{
 8005848:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800584a:	2300      	movs	r3, #0
{
 800584c:	b082      	sub	sp, #8
 800584e:	4605      	mov	r5, r0
 8005850:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8005852:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005854:	6803      	ldr	r3, [r0, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	07d2      	lsls	r2, r2, #31
 800585a:	d40f      	bmi.n	800587c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800585c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800585e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005860:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8005862:	0692      	lsls	r2, r2, #26
 8005864:	d433      	bmi.n	80058ce <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8005866:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005868:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800586a:	2101      	movs	r1, #1
  return HAL_OK;
 800586c:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800586e:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8005870:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005874:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8005878:	b002      	add	sp, #8
 800587a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800587c:	f7ff fe9e 	bl	80055bc <HAL_GetTick>
 8005880:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	e001      	b.n	800588a <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8005886:	1c60      	adds	r0, r4, #1
 8005888:	d148      	bne.n	800591c <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	0791      	lsls	r1, r2, #30
 800588e:	d4e5      	bmi.n	800585c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005894:	9a01      	ldr	r2, [sp, #4]
 8005896:	f012 0f21 	tst.w	r2, #33	; 0x21
 800589a:	d0f4      	beq.n	8005886 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800589c:	9a01      	ldr	r2, [sp, #4]
 800589e:	0696      	lsls	r6, r2, #26
 80058a0:	d503      	bpl.n	80058aa <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058a2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80058a4:	f042 0202 	orr.w	r2, r2, #2
 80058a8:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058aa:	9a01      	ldr	r2, [sp, #4]
 80058ac:	07d4      	lsls	r4, r2, #31
 80058ae:	d503      	bpl.n	80058b8 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058b0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058b8:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058ba:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80058bc:	2200      	movs	r2, #0
        return HAL_ERROR;
 80058be:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058c0:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058c2:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 80058c6:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 80058ca:	b002      	add	sp, #8
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80058ce:	f7ff fe75 	bl	80055bc <HAL_GetTick>
 80058d2:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	e001      	b.n	80058dc <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 80058d8:	1c61      	adds	r1, r4, #1
 80058da:	d132      	bne.n	8005942 <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	06d2      	lsls	r2, r2, #27
 80058e0:	d4c1      	bmi.n	8005866 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80058e6:	9a01      	ldr	r2, [sp, #4]
 80058e8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80058ec:	d0f4      	beq.n	80058d8 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80058ee:	9a01      	ldr	r2, [sp, #4]
 80058f0:	0716      	lsls	r6, r2, #28
 80058f2:	d503      	bpl.n	80058fc <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058f4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80058f6:	f042 0204 	orr.w	r2, r2, #4
 80058fa:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058fc:	9a01      	ldr	r2, [sp, #4]
 80058fe:	0694      	lsls	r4, r2, #26
 8005900:	d503      	bpl.n	800590a <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005902:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8005904:	f042 0202 	orr.w	r2, r2, #2
 8005908:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800590a:	9a01      	ldr	r2, [sp, #4]
 800590c:	07d0      	lsls	r0, r2, #31
 800590e:	d503      	bpl.n	8005918 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005910:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005918:	2429      	movs	r4, #41	; 0x29
 800591a:	e7ce      	b.n	80058ba <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7ff fe4e 	bl	80055bc <HAL_GetTick>
 8005920:	1b80      	subs	r0, r0, r6
 8005922:	42a0      	cmp	r0, r4
 8005924:	d801      	bhi.n	800592a <HAL_DMA2D_PollForTransfer+0xe2>
 8005926:	2c00      	cmp	r4, #0
 8005928:	d1ab      	bne.n	8005882 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800592a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800592c:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800592e:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005930:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8005934:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8005936:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800593a:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800593c:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8005940:	e79a      	b.n	8005878 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7ff fe3b 	bl	80055bc <HAL_GetTick>
 8005946:	1b80      	subs	r0, r0, r6
 8005948:	42a0      	cmp	r0, r4
 800594a:	d8ee      	bhi.n	800592a <HAL_DMA2D_PollForTransfer+0xe2>
 800594c:	2c00      	cmp	r4, #0
 800594e:	d1c1      	bne.n	80058d4 <HAL_DMA2D_PollForTransfer+0x8c>
 8005950:	e7eb      	b.n	800592a <HAL_DMA2D_PollForTransfer+0xe2>
 8005952:	bf00      	nop

08005954 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8005954:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8005958:	2a01      	cmp	r2, #1
 800595a:	d063      	beq.n	8005a24 <HAL_DMA2D_ConfigLayer+0xd0>
 800595c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800595e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005962:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005964:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8005968:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800596a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800596c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8005970:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005974:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005976:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005978:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800597a:	0512      	lsls	r2, r2, #20
 800597c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800597e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005982:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005986:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005988:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800598a:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800598e:	d922      	bls.n	80059d6 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005990:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005992:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005996:	b981      	cbnz	r1, 80059ba <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	4923      	ldr	r1, [pc, #140]	; (8005a28 <HAL_DMA2D_ConfigLayer+0xd4>)
 800599c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800599e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059a0:	4029      	ands	r1, r5
 80059a2:	430a      	orrs	r2, r1
 80059a4:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059a6:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 80059a8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059aa:	2101      	movs	r1, #1
  return HAL_OK;
 80059ac:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059ae:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 80059b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80059b6:	bc70      	pop	{r4, r5, r6}
 80059b8:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80059ba:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059bc:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80059be:	d129      	bne.n	8005a14 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059c0:	69e6      	ldr	r6, [r4, #28]
 80059c2:	491a      	ldr	r1, [pc, #104]	; (8005a2c <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80059c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059c6:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059ca:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 80059ce:	430a      	orrs	r2, r1
 80059d0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059d2:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059d4:	e7e8      	b.n	80059a8 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80059d8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80059dc:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059de:	b161      	cbz	r1, 80059fa <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	4c11      	ldr	r4, [pc, #68]	; (8005a28 <HAL_DMA2D_ConfigLayer+0xd4>)
 80059e4:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059e6:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059e8:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059ea:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059ec:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059f0:	4322      	orrs	r2, r4
 80059f2:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059f4:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059f6:	620d      	str	r5, [r1, #32]
 80059f8:	e7d6      	b.n	80059a8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059fa:	6819      	ldr	r1, [r3, #0]
 80059fc:	4c0a      	ldr	r4, [pc, #40]	; (8005a28 <HAL_DMA2D_ConfigLayer+0xd4>)
 80059fe:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005a00:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a02:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a04:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005a06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a0a:	4322      	orrs	r2, r4
 8005a0c:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a0e:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005a10:	6288      	str	r0, [r1, #40]	; 0x28
 8005a12:	e7c9      	b.n	80059a8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a14:	69e5      	ldr	r5, [r4, #28]
 8005a16:	4904      	ldr	r1, [pc, #16]	; (8005a28 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a18:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a1a:	4029      	ands	r1, r5
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a20:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a22:	e7c1      	b.n	80059a8 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8005a24:	2002      	movs	r0, #2
}
 8005a26:	4770      	bx	lr
 8005a28:	00ccfff0 	.word	0x00ccfff0
 8005a2c:	00c0fff0 	.word	0x00c0fff0

08005a30 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a34:	4605      	mov	r5, r0
 8005a36:	4688      	mov	r8, r1
 8005a38:	4617      	mov	r7, r2
 8005a3a:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a3c:	f7ff fdbe 	bl	80055bc <HAL_GetTick>
 8005a40:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005a42:	e005      	b.n	8005a50 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8005a44:	f7ff fdba 	bl	80055bc <HAL_GetTick>
 8005a48:	1b84      	subs	r4, r0, r6
 8005a4a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8005a4e:	d80e      	bhi.n	8005a6e <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005a50:	682c      	ldr	r4, [r5, #0]
 8005a52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a54:	07db      	lsls	r3, r3, #31
 8005a56:	d5f5      	bpl.n	8005a44 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005a58:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8005a5c:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8005a5e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005a60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005a64:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8005a68:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005a6e:	2003      	movs	r0, #3
}
 8005a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a74 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f000 80b3 	beq.w	8005be4 <HAL_DSI_Init+0x16c>
{
 8005a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005a80:	7c43      	ldrb	r3, [r0, #17]
{
 8005a82:	b083      	sub	sp, #12
 8005a84:	460d      	mov	r5, r1
 8005a86:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80a8 	beq.w	8005bde <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a8e:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005a90:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a92:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005a94:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a96:	9200      	str	r2, [sp, #0]
 8005a98:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005a9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005aa0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005aa4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8005ab0:	f7ff fd84 	bl	80055bc <HAL_GetTick>
 8005ab4:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005ab6:	e006      	b.n	8005ac6 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005ab8:	f7ff fd80 	bl	80055bc <HAL_GetTick>
 8005abc:	1b83      	subs	r3, r0, r6
 8005abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac2:	f200 8089 	bhi.w	8005bd8 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005acc:	04d1      	lsls	r1, r2, #19
 8005ace:	d5f3      	bpl.n	8005ab8 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005ad0:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005ad2:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005ad4:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005ad8:	682e      	ldr	r6, [r5, #0]
 8005ada:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005adc:	4942      	ldr	r1, [pc, #264]	; (8005be8 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005ade:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8005ae2:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005ae4:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005ae6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005aea:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005aee:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005af2:	430a      	orrs	r2, r1
 8005af4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005af8:	9001      	str	r0, [sp, #4]
 8005afa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005b06:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8005b12:	f7ff fd53 	bl	80055bc <HAL_GetTick>
 8005b16:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005b18:	e005      	b.n	8005b26 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005b1a:	f7ff fd4f 	bl	80055bc <HAL_GetTick>
 8005b1e:	1b80      	subs	r0, r0, r6
 8005b20:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005b24:	d858      	bhi.n	8005bd8 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005b2c:	05d2      	lsls	r2, r2, #23
 8005b2e:	d5f4      	bpl.n	8005b1a <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005b30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b34:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b38:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8005b3a:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005b3c:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b40:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005b42:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005b46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005b4a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005b4e:	f022 0203 	bic.w	r2, r2, #3
 8005b52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b56:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b5a:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b5c:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b5e:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b60:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b64:	bf38      	it	cc
 8005b66:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b68:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005b6c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b70:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005b72:	f020 0003 	bic.w	r0, r0, #3
 8005b76:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b7a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b7e:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b80:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b82:	682d      	ldr	r5, [r5, #0]
 8005b84:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b8c:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b8e:	fb0c f505 	mul.w	r5, ip, r5
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b94:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b98:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b9c:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005b9e:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005ba0:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005ba2:	ea46 060e 	orr.w	r6, r6, lr
 8005ba6:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8005ba8:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005baa:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005bae:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005bb2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8005bb6:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8005bba:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005bbc:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8005bc0:	432a      	orrs	r2, r5
 8005bc2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8005bc6:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005bca:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005bce:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8005bd0:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8005bd2:	7466      	strb	r6, [r4, #17]
}
 8005bd4:	b003      	add	sp, #12
 8005bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8005bd8:	2003      	movs	r0, #3
}
 8005bda:	b003      	add	sp, #12
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8005bde:	f7ff ff49 	bl	8005a74 <HAL_DSI_MspInit>
 8005be2:	e754      	b.n	8005a8e <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8005be4:	2001      	movs	r0, #1
}
 8005be6:	4770      	bx	lr
 8005be8:	fffc8603 	.word	0xfffc8603
 8005bec:	003d0900 	.word	0x003d0900

08005bf0 <HAL_DSI_TearingEffectCallback>:
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop

08005bf4 <HAL_DSI_EndOfRefreshCallback>:
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop

08005bf8 <HAL_DSI_ErrorCallback>:
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop

08005bfc <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005bfc:	6803      	ldr	r3, [r0, #0]
 8005bfe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005c02:	07d1      	lsls	r1, r2, #31
{
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005c08:	d503      	bpl.n	8005c12 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005c0a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005c0e:	07d2      	lsls	r2, r2, #31
 8005c10:	d462      	bmi.n	8005cd8 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005c12:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005c16:	0791      	lsls	r1, r2, #30
 8005c18:	d503      	bpl.n	8005c22 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005c1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005c1e:	0792      	lsls	r2, r2, #30
 8005c20:	d44f      	bmi.n	8005cc2 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005c22:	69a3      	ldr	r3, [r4, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d04b      	beq.n	8005cc0 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005c28:	6821      	ldr	r1, [r4, #0]
 8005c2a:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005c2e:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005c32:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005c36:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005c38:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005c3c:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005c3e:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005c40:	b119      	cbz	r1, 8005c4a <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8005c42:	6961      	ldr	r1, [r4, #20]
 8005c44:	f041 0101 	orr.w	r1, r1, #1
 8005c48:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8005c4a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8005c4e:	d003      	beq.n	8005c58 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8005c50:	6962      	ldr	r2, [r4, #20]
 8005c52:	f042 0202 	orr.w	r2, r2, #2
 8005c56:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8005c58:	07d8      	lsls	r0, r3, #31
 8005c5a:	d503      	bpl.n	8005c64 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8005c5c:	6962      	ldr	r2, [r4, #20]
 8005c5e:	f042 0204 	orr.w	r2, r2, #4
 8005c62:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8005c64:	0799      	lsls	r1, r3, #30
 8005c66:	d503      	bpl.n	8005c70 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8005c68:	6962      	ldr	r2, [r4, #20]
 8005c6a:	f042 0208 	orr.w	r2, r2, #8
 8005c6e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005c70:	f013 0f0c 	tst.w	r3, #12
 8005c74:	d003      	beq.n	8005c7e <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8005c76:	6962      	ldr	r2, [r4, #20]
 8005c78:	f042 0210 	orr.w	r2, r2, #16
 8005c7c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8005c7e:	06da      	lsls	r2, r3, #27
 8005c80:	d503      	bpl.n	8005c8a <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005c82:	6962      	ldr	r2, [r4, #20]
 8005c84:	f042 0220 	orr.w	r2, r2, #32
 8005c88:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005c8a:	0698      	lsls	r0, r3, #26
 8005c8c:	d503      	bpl.n	8005c96 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005c8e:	6962      	ldr	r2, [r4, #20]
 8005c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c94:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005c96:	0659      	lsls	r1, r3, #25
 8005c98:	d503      	bpl.n	8005ca2 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005c9a:	6962      	ldr	r2, [r4, #20]
 8005c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ca0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005ca2:	061a      	lsls	r2, r3, #24
 8005ca4:	d503      	bpl.n	8005cae <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005ca6:	6962      	ldr	r2, [r4, #20]
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cac:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005cae:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8005cb2:	d003      	beq.n	8005cbc <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005cb4:	6963      	ldr	r3, [r4, #20]
 8005cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cba:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005cbc:	6963      	ldr	r3, [r4, #20]
 8005cbe:	b93b      	cbnz	r3, 8005cd0 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005cc0:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005cc2:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005cc4:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005cc6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005cca:	f7ff ff93 	bl	8005bf4 <HAL_DSI_EndOfRefreshCallback>
 8005cce:	e7a8      	b.n	8005c22 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff ff91 	bl	8005bf8 <HAL_DSI_ErrorCallback>
}
 8005cd6:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8005cde:	f7ff ff87 	bl	8005bf0 <HAL_DSI_TearingEffectCallback>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	e795      	b.n	8005c12 <HAL_DSI_IRQHandler+0x16>
 8005ce6:	bf00      	nop

08005ce8 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ce8:	7c03      	ldrb	r3, [r0, #16]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f000 8113 	beq.w	8005f16 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005cf0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8005cf2:	2201      	movs	r2, #1
{
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8005cf8:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005cfa:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005cfe:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005d00:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005d04:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005d08:	4e84      	ldr	r6, [pc, #528]	; (8005f1c <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005d0a:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005d0c:	4d84      	ldr	r5, [pc, #528]	; (8005f20 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005d0e:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005d12:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005d14:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	f022 0203 	bic.w	r2, r2, #3
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005d28:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005d2a:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005d2e:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005d32:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d36:	ea06 0602 	and.w	r6, r6, r2
 8005d3a:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005d42:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4a:	ea02 0205 	and.w	r2, r2, r5
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005d50:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8005d52:	ea47 0708 	orr.w	r7, r7, r8
 8005d56:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8005d58:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8005d5a:	ea06 0605 	and.w	r6, r6, r5
 8005d5e:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005d60:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8005d62:	ea45 050e 	orr.w	r5, r5, lr
 8005d66:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005d68:	68dd      	ldr	r5, [r3, #12]
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	ea42 020c 	orr.w	r2, r2, ip
 8005d76:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d78:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d7a:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d7c:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d80:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d84:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d86:	ea42 0206 	orr.w	r2, r2, r6
 8005d8a:	695d      	ldr	r5, [r3, #20]
 8005d8c:	ea42 0207 	orr.w	r2, r2, r7
 8005d90:	ea42 0205 	orr.w	r2, r2, r5
 8005d94:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	f022 020f 	bic.w	r2, r2, #15
 8005d9c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	ea42 0200 	orr.w	r2, r2, r0
 8005da4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005da6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005daa:	f022 020e 	bic.w	r2, r2, #14
 8005dae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005db2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005db6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8005dba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005dbe:	d107      	bne.n	8005dd0 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005dc0:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005dc2:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005dc4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005dc8:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	432a      	orrs	r2, r5
 8005dce:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005dd0:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005dd2:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005dd4:	4a53      	ldr	r2, [pc, #332]	; (8005f24 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005dd6:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005dd8:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005dda:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005dde:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005de2:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005de4:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005de6:	4f50      	ldr	r7, [pc, #320]	; (8005f28 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005de8:	4305      	orrs	r5, r0
 8005dea:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005dec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005dee:	4010      	ands	r0, r2
 8005df0:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005df4:	484d      	ldr	r0, [pc, #308]	; (8005f2c <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005df6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005dfa:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e02:	4017      	ands	r7, r2
 8005e04:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005e06:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8005e08:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005e0c:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005e10:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005e12:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005e14:	4005      	ands	r5, r0
 8005e16:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e1a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005e1e:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005e24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e26:	4002      	ands	r2, r0
 8005e28:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005e2a:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005e2c:	4a3b      	ldr	r2, [pc, #236]	; (8005f1c <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005e2e:	ea47 070e 	orr.w	r7, r7, lr
 8005e32:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005e34:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8005e36:	4007      	ands	r7, r0

  return HAL_OK;
 8005e38:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005e3a:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005e3c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8005e3e:	ea45 050c 	orr.w	r5, r5, ip
 8005e42:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005e44:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8005e46:	402a      	ands	r2, r5
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005e4a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8005e4c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005e4e:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005e52:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005e54:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005e58:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005e5a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005e5c:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8005e60:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e64:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e68:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005e6e:	699f      	ldr	r7, [r3, #24]
 8005e70:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8005e74:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005e76:	699d      	ldr	r5, [r3, #24]
 8005e78:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005e7c:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005e80:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005e82:	699d      	ldr	r5, [r3, #24]
 8005e84:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005e88:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005e90:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e94:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005e9e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005ea0:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005ea4:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005ea8:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005eaa:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005eac:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8005eb0:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005eb2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005eb4:	ea45 050e 	orr.w	r5, r5, lr
 8005eb8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005eba:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005ebc:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8005ec0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec4:	ea42 020c 	orr.w	r2, r2, ip
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005eca:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005ecc:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005ece:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005ed2:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005ed6:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005edc:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005eea:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005eec:	ea45 050e 	orr.w	r5, r5, lr
 8005ef0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005ef2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005ef4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005ef8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005efa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005efc:	ea41 010c 	orr.w	r1, r1, ip
 8005f00:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005f02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005f04:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005f08:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0c:	433a      	orrs	r2, r7
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8005f10:	7426      	strb	r6, [r4, #16]
}
 8005f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8005f16:	2002      	movs	r0, #2
}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	ffffc000 	.word	0xffffc000
 8005f20:	ffffe000 	.word	0xffffe000
 8005f24:	fffff000 	.word	0xfffff000
 8005f28:	ffff8000 	.word	0xffff8000
 8005f2c:	fffffc00 	.word	0xfffffc00

08005f30 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f30:	7c02      	ldrb	r2, [r0, #16]
 8005f32:	2a01      	cmp	r2, #1
 8005f34:	d00e      	beq.n	8005f54 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005f36:	6802      	ldr	r2, [r0, #0]
 8005f38:	4603      	mov	r3, r0
{
 8005f3a:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005f3c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005f3e:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005f40:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8005f44:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005f46:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005f48:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005f4a:	4321      	orrs	r1, r4
 8005f4c:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8005f4e:	741d      	strb	r5, [r3, #16]
}
 8005f50:	bc30      	pop	{r4, r5}
 8005f52:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005f54:	2002      	movs	r0, #2
}
 8005f56:	4770      	bx	lr

08005f58 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f58:	7c03      	ldrb	r3, [r0, #16]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d021      	beq.n	8005fa2 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	2100      	movs	r1, #0
 8005f62:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8005f64:	4608      	mov	r0, r1
{
 8005f66:	b410      	push	{r4}
 8005f68:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8005f6a:	9100      	str	r1, [sp, #0]
 8005f6c:	685c      	ldr	r4, [r3, #4]
 8005f6e:	f044 0401 	orr.w	r4, r4, #1
 8005f72:	605c      	str	r4, [r3, #4]
 8005f74:	685c      	ldr	r4, [r3, #4]
 8005f76:	f004 0401 	and.w	r4, r4, #1
 8005f7a:	9400      	str	r4, [sp, #0]
 8005f7c:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005f7e:	9101      	str	r1, [sp, #4]
 8005f80:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8005f84:	f044 0408 	orr.w	r4, r4, #8
 8005f88:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8005f8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8005f90:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	9b01      	ldr	r3, [sp, #4]
}
 8005f9a:	b003      	add	sp, #12
 8005f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005fa2:	2002      	movs	r0, #2
}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop

08005fa8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005fa8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005faa:	7c05      	ldrb	r5, [r0, #16]
{
 8005fac:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8005fae:	2d01      	cmp	r5, #1
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005fb2:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8005fb4:	2501      	movs	r5, #1
 8005fb6:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005fb8:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8005fba:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005fbc:	f7ff fd38 	bl	8005a30 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	7423      	strb	r3, [r4, #16]

  return status;
}
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8005fc8:	2002      	movs	r0, #2
}
 8005fca:	b002      	add	sp, #8
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	bf00      	nop

08005fd0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005fd6:	7c03      	ldrb	r3, [r0, #16]
{
 8005fd8:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d05e      	beq.n	800609c <HAL_DSI_LongWrite+0xcc>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	4692      	mov	sl, r2
 8005fe6:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fe8:	f7ff fae8 	bl	80055bc <HAL_GetTick>
 8005fec:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005fee:	e005      	b.n	8005ffc <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005ff0:	f7ff fae4 	bl	80055bc <HAL_GetTick>
 8005ff4:	1b40      	subs	r0, r0, r5
 8005ff6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ffa:	d84b      	bhi.n	8006094 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8006000:	f014 0401 	ands.w	r4, r4, #1
 8006004:	d0f4      	beq.n	8005ff0 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006006:	4640      	mov	r0, r8
 8006008:	2803      	cmp	r0, #3
 800600a:	bf28      	it	cs
 800600c:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d046      	beq.n	80060a2 <HAL_DSI_LongWrite+0xd2>
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	1e5c      	subs	r4, r3, #1
 8006018:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800601a:	3301      	adds	r3, #1
 800601c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8006020:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8006022:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006024:	fa02 f205 	lsl.w	r2, r2, r5
 8006028:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 800602c:	d3f5      	bcc.n	800601a <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8006030:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8006032:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006034:	ebb8 0000 	subs.w	r0, r8, r0
 8006038:	d017      	beq.n	800606a <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800603a:	2804      	cmp	r0, #4
 800603c:	4684      	mov	ip, r0
 800603e:	f04f 0500 	mov.w	r5, #0
 8006042:	bf28      	it	cs
 8006044:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8006048:	462b      	mov	r3, r5
 800604a:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800604e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006052:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8006054:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006056:	f105 0508 	add.w	r5, r5, #8
 800605a:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 800605e:	d1f6      	bne.n	800604e <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8006060:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8006064:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8006066:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006068:	d1e7      	bne.n	800603a <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800606a:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800606e:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006072:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006074:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8006078:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800607a:	46c8      	mov	r8, r9
 800607c:	fa1f f989 	uxth.w	r9, r9
 8006080:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8006084:	ea43 0309 	orr.w	r3, r3, r9
 8006088:	ea43 0308 	orr.w	r3, r3, r8
 800608c:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800608e:	743a      	strb	r2, [r7, #16]
}
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8006094:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006096:	743c      	strb	r4, [r7, #16]
}
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 800609c:	2002      	movs	r0, #2
}
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 80060a2:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80060a4:	e7e1      	b.n	800606a <HAL_DSI_LongWrite+0x9a>
 80060a6:	bf00      	nop

080060a8 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80060a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80060ae:	7c02      	ldrb	r2, [r0, #16]
{
 80060b0:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80060b2:	2a01      	cmp	r2, #1
{
 80060b4:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 80060b6:	d070      	beq.n	800619a <HAL_DSI_Read+0xf2>
 80060b8:	461e      	mov	r6, r3
 80060ba:	2301      	movs	r3, #1
 80060bc:	4607      	mov	r7, r0
 80060be:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80060c0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80060c2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80060c4:	d80d      	bhi.n	80060e2 <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80060c6:	2c06      	cmp	r4, #6
 80060c8:	d017      	beq.n	80060fa <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80060ca:	2c04      	cmp	r4, #4
 80060cc:	d04f      	beq.n	800616e <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80060ce:	2c14      	cmp	r4, #20
 80060d0:	d067      	beq.n	80061a2 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80060d2:	2c24      	cmp	r4, #36	; 0x24
 80060d4:	d052      	beq.n	800617c <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 80060d6:	2300      	movs	r3, #0
      return HAL_ERROR;
 80060d8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80060da:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80060dc:	b002      	add	sp, #8
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80060e2:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80060e6:	b2f3      	uxtb	r3, r6
 80060e8:	2237      	movs	r2, #55	; 0x37
 80060ea:	f8cd c000 	str.w	ip, [sp]
 80060ee:	f7ff fc9f 	bl	8005a30 <DSI_ShortWrite>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d1ef      	bne.n	80060d6 <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80060f6:	2c06      	cmp	r4, #6
 80060f8:	d1e7      	bne.n	80060ca <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80060fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80060fc:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80060fe:	021a      	lsls	r2, r3, #8
 8006100:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8006104:	f043 0306 	orr.w	r3, r3, #6
 8006108:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800610a:	f7ff fa57 	bl	80055bc <HAL_GetTick>
 800610e:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8006110:	e006      	b.n	8006120 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006112:	f7ff fa53 	bl	80055bc <HAL_GetTick>
 8006116:	eba0 0008 	sub.w	r0, r0, r8
 800611a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800611e:	d81b      	bhi.n	8006158 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8006120:	2e00      	cmp	r6, #0
 8006122:	dd1f      	ble.n	8006164 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8006128:	f011 0110 	ands.w	r1, r1, #16
 800612c:	d1f1      	bne.n	8006112 <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800612e:	2e04      	cmp	r6, #4
 8006130:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8006132:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006134:	bf28      	it	cs
 8006136:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8006138:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800613a:	fa22 f401 	lsr.w	r4, r2, r1
 800613e:	3108      	adds	r1, #8
 8006140:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8006144:	429d      	cmp	r5, r3
 8006146:	d1f8      	bne.n	800613a <HAL_DSI_Read+0x92>
 8006148:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800614a:	f7ff fa37 	bl	80055bc <HAL_GetTick>
 800614e:	eba0 0008 	sub.w	r0, r0, r8
 8006152:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006156:	d9e3      	bls.n	8006120 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8006158:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800615a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800615c:	743b      	strb	r3, [r7, #16]
}
 800615e:	b002      	add	sp, #8
 8006160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8006164:	2000      	movs	r0, #0
 8006166:	7438      	strb	r0, [r7, #16]
}
 8006168:	b002      	add	sp, #8
 800616a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800616e:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006172:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006174:	f043 0304 	orr.w	r3, r3, #4
 8006178:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800617a:	e7c6      	b.n	800610a <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800617e:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006182:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006184:	7852      	ldrb	r2, [r2, #1]
 8006186:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800618c:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800618e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006192:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006196:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006198:	e7b7      	b.n	800610a <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 800619a:	2002      	movs	r0, #2
}
 800619c:	b002      	add	sp, #8
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80061a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80061a4:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80061a8:	7811      	ldrb	r1, [r2, #0]
 80061aa:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80061ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80061b0:	f043 0314 	orr.w	r3, r3, #20
 80061b4:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80061b6:	e7a8      	b.n	800610a <HAL_DSI_Read+0x62>

080061b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061bc:	680e      	ldr	r6, [r1, #0]
{
 80061be:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	f000 80d3 	beq.w	800636c <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80061c6:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c8:	f8df a220 	ldr.w	sl, [pc, #544]	; 80063ec <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061cc:	f8df b220 	ldr.w	fp, [pc, #544]	; 80063f0 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061d0:	46b1      	mov	r9, r6
 80061d2:	e020      	b.n	8006216 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80061d4:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061d6:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061da:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061de:	f04f 0e0f 	mov.w	lr, #15
 80061e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061e6:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ec:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 80061f0:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061f2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061f6:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061fa:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061fe:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006202:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8006204:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006206:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006208:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800620a:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800620c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800620e:	fa39 f203 	lsrs.w	r2, r9, r3
 8006212:	f000 80ab 	beq.w	800636c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800621a:	ea12 0809 	ands.w	r8, r2, r9
 800621e:	d0f5      	beq.n	800620c <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006220:	684c      	ldr	r4, [r1, #4]
 8006222:	005f      	lsls	r7, r3, #1
 8006224:	f024 0c10 	bic.w	ip, r4, #16
 8006228:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800622c:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800622e:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006232:	f200 809e 	bhi.w	8006372 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006236:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800623a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800623e:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006240:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006242:	ea2e 0e05 	bic.w	lr, lr, r5
 8006246:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006248:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800624a:	68ce      	ldr	r6, [r1, #12]
 800624c:	40be      	lsls	r6, r7
 800624e:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006252:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8006254:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8006258:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800625c:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006260:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8006262:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8006264:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006266:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800626a:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800626c:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006270:	fa02 f207 	lsl.w	r2, r2, r7
 8006274:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8006278:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800627a:	d0ab      	beq.n	80061d4 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800627c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627e:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006282:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006284:	fa02 f707 	lsl.w	r7, r2, r7
 8006288:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800628a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800628c:	00e6      	lsls	r6, r4, #3
 800628e:	d5bd      	bpl.n	800620c <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006290:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8006294:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006298:	f003 0203 	and.w	r2, r3, #3
 800629c:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629e:	f046 0602 	orr.w	r6, r6, #2
 80062a2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062a6:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a8:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80062ac:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80062b0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062b4:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b8:	f006 0602 	and.w	r6, r6, #2
 80062bc:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062be:	4e42      	ldr	r6, [pc, #264]	; (80063c8 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062c0:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062c2:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80062c4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062c6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ca:	d020      	beq.n	800630e <HAL_GPIO_Init+0x156>
 80062cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062d0:	42b0      	cmp	r0, r6
 80062d2:	d056      	beq.n	8006382 <HAL_GPIO_Init+0x1ca>
 80062d4:	4e3d      	ldr	r6, [pc, #244]	; (80063cc <HAL_GPIO_Init+0x214>)
 80062d6:	42b0      	cmp	r0, r6
 80062d8:	d058      	beq.n	800638c <HAL_GPIO_Init+0x1d4>
 80062da:	4e3d      	ldr	r6, [pc, #244]	; (80063d0 <HAL_GPIO_Init+0x218>)
 80062dc:	42b0      	cmp	r0, r6
 80062de:	d04b      	beq.n	8006378 <HAL_GPIO_Init+0x1c0>
 80062e0:	4e3c      	ldr	r6, [pc, #240]	; (80063d4 <HAL_GPIO_Init+0x21c>)
 80062e2:	42b0      	cmp	r0, r6
 80062e4:	d05c      	beq.n	80063a0 <HAL_GPIO_Init+0x1e8>
 80062e6:	4e3c      	ldr	r6, [pc, #240]	; (80063d8 <HAL_GPIO_Init+0x220>)
 80062e8:	42b0      	cmp	r0, r6
 80062ea:	d05e      	beq.n	80063aa <HAL_GPIO_Init+0x1f2>
 80062ec:	4e3b      	ldr	r6, [pc, #236]	; (80063dc <HAL_GPIO_Init+0x224>)
 80062ee:	42b0      	cmp	r0, r6
 80062f0:	d051      	beq.n	8006396 <HAL_GPIO_Init+0x1de>
 80062f2:	4e3b      	ldr	r6, [pc, #236]	; (80063e0 <HAL_GPIO_Init+0x228>)
 80062f4:	42b0      	cmp	r0, r6
 80062f6:	d05d      	beq.n	80063b4 <HAL_GPIO_Init+0x1fc>
 80062f8:	4e3a      	ldr	r6, [pc, #232]	; (80063e4 <HAL_GPIO_Init+0x22c>)
 80062fa:	42b0      	cmp	r0, r6
 80062fc:	d05f      	beq.n	80063be <HAL_GPIO_Init+0x206>
 80062fe:	4e3a      	ldr	r6, [pc, #232]	; (80063e8 <HAL_GPIO_Init+0x230>)
 8006300:	42b0      	cmp	r0, r6
 8006302:	bf0c      	ite	eq
 8006304:	2609      	moveq	r6, #9
 8006306:	260a      	movne	r6, #10
 8006308:	fa06 f202 	lsl.w	r2, r6, r2
 800630c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800630e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006310:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8006314:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006318:	03e5      	lsls	r5, r4, #15
    position++;
 800631a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800631e:	bf54      	ite	pl
 8006320:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8006322:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006326:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800632a:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800632c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8006334:	bf54      	ite	pl
 8006336:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006338:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800633c:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800633e:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006342:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8006344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8006348:	bf54      	ite	pl
 800634a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800634c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006350:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8006352:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8006356:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8006358:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800635a:	bf54      	ite	pl
 800635c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800635e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8006362:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006364:	fa39 f203 	lsrs.w	r2, r9, r3
 8006368:	f47f af55 	bne.w	8006216 <HAL_GPIO_Init+0x5e>
  }
}
 800636c:	b005      	add	sp, #20
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	40bd      	lsls	r5, r7
 8006374:	43ed      	mvns	r5, r5
 8006376:	e775      	b.n	8006264 <HAL_GPIO_Init+0xac>
 8006378:	2603      	movs	r6, #3
 800637a:	fa06 f202 	lsl.w	r2, r6, r2
 800637e:	4315      	orrs	r5, r2
 8006380:	e7c5      	b.n	800630e <HAL_GPIO_Init+0x156>
 8006382:	2601      	movs	r6, #1
 8006384:	fa06 f202 	lsl.w	r2, r6, r2
 8006388:	4315      	orrs	r5, r2
 800638a:	e7c0      	b.n	800630e <HAL_GPIO_Init+0x156>
 800638c:	2602      	movs	r6, #2
 800638e:	fa06 f202 	lsl.w	r2, r6, r2
 8006392:	4315      	orrs	r5, r2
 8006394:	e7bb      	b.n	800630e <HAL_GPIO_Init+0x156>
 8006396:	2606      	movs	r6, #6
 8006398:	fa06 f202 	lsl.w	r2, r6, r2
 800639c:	4315      	orrs	r5, r2
 800639e:	e7b6      	b.n	800630e <HAL_GPIO_Init+0x156>
 80063a0:	2604      	movs	r6, #4
 80063a2:	fa06 f202 	lsl.w	r2, r6, r2
 80063a6:	4315      	orrs	r5, r2
 80063a8:	e7b1      	b.n	800630e <HAL_GPIO_Init+0x156>
 80063aa:	2605      	movs	r6, #5
 80063ac:	fa06 f202 	lsl.w	r2, r6, r2
 80063b0:	4315      	orrs	r5, r2
 80063b2:	e7ac      	b.n	800630e <HAL_GPIO_Init+0x156>
 80063b4:	2607      	movs	r6, #7
 80063b6:	fa06 f202 	lsl.w	r2, r6, r2
 80063ba:	4315      	orrs	r5, r2
 80063bc:	e7a7      	b.n	800630e <HAL_GPIO_Init+0x156>
 80063be:	2608      	movs	r6, #8
 80063c0:	fa06 f202 	lsl.w	r2, r6, r2
 80063c4:	4315      	orrs	r5, r2
 80063c6:	e7a2      	b.n	800630e <HAL_GPIO_Init+0x156>
 80063c8:	58020000 	.word	0x58020000
 80063cc:	58020800 	.word	0x58020800
 80063d0:	58020c00 	.word	0x58020c00
 80063d4:	58021000 	.word	0x58021000
 80063d8:	58021400 	.word	0x58021400
 80063dc:	58021800 	.word	0x58021800
 80063e0:	58021c00 	.word	0x58021c00
 80063e4:	58022000 	.word	0x58022000
 80063e8:	58022400 	.word	0x58022400
 80063ec:	58024400 	.word	0x58024400
 80063f0:	58000080 	.word	0x58000080

080063f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063f4:	b902      	cbnz	r2, 80063f8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063f6:	0409      	lsls	r1, r1, #16
 80063f8:	6181      	str	r1, [r0, #24]
  }
}
 80063fa:	4770      	bx	lr

080063fc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063fc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063fe:	ea01 0203 	and.w	r2, r1, r3
 8006402:	ea21 0103 	bic.w	r1, r1, r3
 8006406:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800640a:	6181      	str	r1, [r0, #24]
}
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop

08006410 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006410:	4a04      	ldr	r2, [pc, #16]	; (8006424 <HAL_HSEM_FastTake+0x14>)
 8006412:	3020      	adds	r0, #32
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <HAL_HSEM_FastTake+0x18>)
 8006416:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800641a:	1ac0      	subs	r0, r0, r3
 800641c:	bf18      	it	ne
 800641e:	2001      	movne	r0, #1
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	58026400 	.word	0x58026400
 8006428:	80000300 	.word	0x80000300

0800642c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800642c:	4b02      	ldr	r3, [pc, #8]	; (8006438 <HAL_HSEM_Release+0xc>)
 800642e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8006432:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8006436:	4770      	bx	lr
 8006438:	58026400 	.word	0x58026400

0800643c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800643c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800643e:	f04f 0c00 	mov.w	ip, #0
{
 8006442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006446:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006448:	6804      	ldr	r4, [r0, #0]
 800644a:	6848      	ldr	r0, [r1, #4]
{
 800644c:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800644e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006450:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006452:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006456:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800645a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800645e:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006460:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006464:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006468:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800646a:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800646e:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006470:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006472:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006474:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006478:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800647c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006480:	4f38      	ldr	r7, [pc, #224]	; (8006564 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006482:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006484:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006488:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800648c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800648e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006492:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006494:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006498:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800649c:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800649e:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064a2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80064a4:	68e5      	ldr	r5, [r4, #12]
 80064a6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80064aa:	444d      	add	r5, r9
 80064ac:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80064b0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064b2:	691d      	ldr	r5, [r3, #16]
 80064b4:	f025 0507 	bic.w	r5, r5, #7
 80064b8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80064ba:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80064be:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80064c0:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80064c4:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80064c8:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80064cc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80064d0:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80064d4:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 80064d8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80064dc:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064de:	695d      	ldr	r5, [r3, #20]
 80064e0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80064e4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064e6:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064ea:	69dd      	ldr	r5, [r3, #28]
 80064ec:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064ee:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064f0:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064f2:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 80064f6:	4305      	orrs	r5, r0
 80064f8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064fa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80064fc:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006500:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006502:	f1be 0f00 	cmp.w	lr, #0
 8006506:	d00b      	beq.n	8006520 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006508:	f1be 0f01 	cmp.w	lr, #1
 800650c:	d026      	beq.n	800655c <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800650e:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006512:	2d02      	cmp	r5, #2
 8006514:	d902      	bls.n	800651c <LTDC_SetConfig+0xe0>
 8006516:	f1be 0f07 	cmp.w	lr, #7
 800651a:	d121      	bne.n	8006560 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800651c:	2702      	movs	r7, #2
 800651e:	e000      	b.n	8006522 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8006520:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006522:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006524:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006526:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006528:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800652c:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006530:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006534:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006536:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006538:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800653c:	490a      	ldr	r1, [pc, #40]	; (8006568 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800653e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006542:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006546:	4001      	ands	r1, r0
 8006548:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800654a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800654e:	58a3      	ldr	r3, [r4, r2]
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	50a3      	str	r3, [r4, r2]
}
 8006556:	b003      	add	sp, #12
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 800655c:	2703      	movs	r7, #3
 800655e:	e7e0      	b.n	8006522 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8006560:	2701      	movs	r7, #1
 8006562:	e7de      	b.n	8006522 <LTDC_SetConfig+0xe6>
 8006564:	fffff8f8 	.word	0xfffff8f8
 8006568:	fffff800 	.word	0xfffff800

0800656c <HAL_LTDC_MspInit>:
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8006570:	2800      	cmp	r0, #0
 8006572:	d06d      	beq.n	8006650 <HAL_LTDC_Init+0xe0>
{
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006576:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800657a:	4604      	mov	r4, r0
 800657c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006580:	2b00      	cmp	r3, #0
 8006582:	d060      	beq.n	8006646 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006584:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006586:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006588:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800658a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800658c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006590:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006592:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006594:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006598:	e9d4 3200 	ldrd	r3, r2, [r4]
 800659c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800659e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065a0:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80065a2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80065a6:	4e2b      	ldr	r6, [pc, #172]	; (8006654 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80065a8:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065aa:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065ac:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80065ae:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065b0:	4302      	orrs	r2, r0
 80065b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4032      	ands	r2, r6
 80065b8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065ba:	6898      	ldr	r0, [r3, #8]
 80065bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065c0:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065c2:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065c6:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065ca:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065cc:	68d8      	ldr	r0, [r3, #12]
 80065ce:	4030      	ands	r0, r6
 80065d0:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065da:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065de:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065e2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	4032      	ands	r2, r6
 80065e8:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065ea:	6918      	ldr	r0, [r3, #16]
 80065ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 80065f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065f2:	ea40 000c 	orr.w	r0, r0, ip
 80065f6:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80065f8:	6958      	ldr	r0, [r3, #20]
 80065fa:	4006      	ands	r6, r0
 80065fc:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006602:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006606:	4302      	orrs	r2, r0
 8006608:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800660a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800660c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006610:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006614:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006618:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800661a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800661c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006620:	4302      	orrs	r2, r0
  return HAL_OK;
 8006622:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006624:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8006628:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800662e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006630:	f042 0206 	orr.w	r2, r2, #6
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006636:	699a      	ldr	r2, [r3, #24]
 8006638:	432a      	orrs	r2, r5
 800663a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800663c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006640:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8006644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8006646:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800664a:	f7ff ff8f 	bl	800656c <HAL_LTDC_MspInit>
 800664e:	e799      	b.n	8006584 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8006650:	2001      	movs	r0, #1
}
 8006652:	4770      	bx	lr
 8006654:	f000f800 	.word	0xf000f800

08006658 <HAL_LTDC_ErrorCallback>:
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop

0800665c <HAL_LTDC_ReloadEventCallback>:
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop

08006660 <HAL_LTDC_IRQHandler>:
{
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006662:	6803      	ldr	r3, [r0, #0]
{
 8006664:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006666:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006668:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800666a:	0769      	lsls	r1, r5, #29
 800666c:	d501      	bpl.n	8006672 <HAL_LTDC_IRQHandler+0x12>
 800666e:	0772      	lsls	r2, r6, #29
 8006670:	d41d      	bmi.n	80066ae <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006672:	07ab      	lsls	r3, r5, #30
 8006674:	d501      	bpl.n	800667a <HAL_LTDC_IRQHandler+0x1a>
 8006676:	07b7      	lsls	r7, r6, #30
 8006678:	d42d      	bmi.n	80066d6 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800667a:	07e8      	lsls	r0, r5, #31
 800667c:	d501      	bpl.n	8006682 <HAL_LTDC_IRQHandler+0x22>
 800667e:	07f1      	lsls	r1, r6, #31
 8006680:	d440      	bmi.n	8006704 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006682:	072a      	lsls	r2, r5, #28
 8006684:	d501      	bpl.n	800668a <HAL_LTDC_IRQHandler+0x2a>
 8006686:	0733      	lsls	r3, r6, #28
 8006688:	d400      	bmi.n	800668c <HAL_LTDC_IRQHandler+0x2c>
}
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800668c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800668e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8006690:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8006692:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006696:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006698:	f022 0208 	bic.w	r2, r2, #8
 800669c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800669e:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80066a0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80066a4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80066a8:	f7ff ffd8 	bl	800665c <HAL_LTDC_ReloadEventCallback>
}
 80066ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80066ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80066b0:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 80066b2:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80066b4:	f022 0204 	bic.w	r2, r2, #4
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80066ba:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80066bc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80066c0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80066cc:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80066d0:	f7ff ffc2 	bl	8006658 <HAL_LTDC_ErrorCallback>
 80066d4:	e7cd      	b.n	8006672 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80066d6:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80066d8:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80066da:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80066dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066de:	f022 0202 	bic.w	r2, r2, #2
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 80066e4:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80066e6:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 80066e8:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80066ea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80066ee:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80066fa:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80066fe:	f7ff ffab 	bl	8006658 <HAL_LTDC_ErrorCallback>
 8006702:	e7ba      	b.n	800667a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006704:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006706:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8006708:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800670a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800670c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006714:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006716:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800671a:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800671e:	f7fd fa0d 	bl	8003b3c <HAL_LTDC_LineEventCallback>
 8006722:	e7ae      	b.n	8006682 <HAL_LTDC_IRQHandler+0x22>

08006724 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8006724:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d028      	beq.n	800677e <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800672c:	2302      	movs	r3, #2
 800672e:	4694      	mov	ip, r2
{
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006734:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8006736:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800673a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800673c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006740:	fb04 0402 	mla	r4, r4, r2, r0
 8006744:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8006746:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800674a:	460f      	mov	r7, r1
 800674c:	3438      	adds	r4, #56	; 0x38
 800674e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800675c:	4662      	mov	r2, ip
 800675e:	4630      	mov	r0, r6
 8006760:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006762:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006764:	f7ff fe6a 	bl	800643c <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8006768:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800676a:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 800676c:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800676e:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006772:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006776:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 800677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800677e:	2002      	movs	r0, #2
}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8006784:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8006788:	2a01      	cmp	r2, #1
 800678a:	d017      	beq.n	80067bc <HAL_LTDC_ProgramLineEvent+0x38>
 800678c:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800678e:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006790:	681a      	ldr	r2, [r3, #0]
{
 8006792:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006794:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8006798:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800679a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 800679c:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 800679e:	4e08      	ldr	r6, [pc, #32]	; (80067c0 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80067a0:	f020 0001 	bic.w	r0, r0, #1
 80067a4:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 80067a6:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 80067a8:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80067aa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80067ac:	4329      	orrs	r1, r5
 80067ae:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80067b0:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80067b4:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 80067b8:	bc70      	pop	{r4, r5, r6}
 80067ba:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80067bc:	2002      	movs	r0, #2
}
 80067be:	4770      	bx	lr
 80067c0:	50001000 	.word	0x50001000

080067c4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80067c8:	f7fe fef8 	bl	80055bc <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80067cc:	2c00      	cmp	r4, #0
 80067ce:	d05a      	beq.n	8006886 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80067d0:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80067d2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80067d4:	2100      	movs	r1, #0
 80067d6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80067d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80067dc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80067e8:	e005      	b.n	80067f6 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80067ea:	f7fe fee7 	bl	80055bc <HAL_GetTick>
 80067ee:	1b43      	subs	r3, r0, r5
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	d841      	bhi.n	8006878 <HAL_MDMA_Init+0xb4>
 80067f4:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	07d2      	lsls	r2, r2, #31
 80067fa:	d4f6      	bmi.n	80067ea <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80067fc:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8006800:	69e1      	ldr	r1, [r4, #28]
 8006802:	4302      	orrs	r2, r0
 8006804:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8006808:	430a      	orrs	r2, r1
 800680a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800680c:	432a      	orrs	r2, r5
 800680e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006810:	4302      	orrs	r2, r0
 8006812:	68a0      	ldr	r0, [r4, #8]
 8006814:	430a      	orrs	r2, r1
 8006816:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006818:	432a      	orrs	r2, r5
 800681a:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800681c:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800681e:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006820:	6920      	ldr	r0, [r4, #16]
 8006822:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006824:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006826:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800682a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800682e:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006830:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006832:	d103      	bne.n	800683c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800683a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800683c:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800683e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006840:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8006842:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006844:	db30      	blt.n	80068a8 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006846:	b292      	uxth	r2, r2
 8006848:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800684a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800684c:	2a00      	cmp	r2, #0
 800684e:	db1c      	blt.n	800688a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006850:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006852:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006856:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800685a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800685c:	d021      	beq.n	80068a2 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800685e:	b2c9      	uxtb	r1, r1
 8006860:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006862:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8006864:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8006866:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8006868:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800686a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800686c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800686e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8006872:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8006876:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006878:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800687a:	2303      	movs	r3, #3
      return HAL_ERROR;
 800687c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800687e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006884:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006886:	2001      	movs	r0, #1
}
 8006888:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800688a:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800688c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800688e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006892:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8006896:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006898:	6a18      	ldr	r0, [r3, #32]
 800689a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800689e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80068a0:	d1dd      	bne.n	800685e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 80068a2:	2200      	movs	r2, #0
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
 80068a6:	e7dc      	b.n	8006862 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80068a8:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80068aa:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80068ac:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80068b0:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80068b2:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80068b4:	621a      	str	r2, [r3, #32]
 80068b6:	e7c8      	b.n	800684a <HAL_MDMA_Init+0x86>

080068b8 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80068b8:	b1f0      	cbz	r0, 80068f8 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 80068ba:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	4601      	mov	r1, r0
  return HAL_OK;
 80068c0:	4618      	mov	r0, r3
{
 80068c2:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 80068c4:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80068c6:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 80068c8:	f024 0401 	bic.w	r4, r4, #1
 80068cc:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80068ce:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80068d0:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80068d2:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80068d4:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80068d6:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80068d8:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80068da:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80068dc:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80068de:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80068e0:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80068e2:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80068e4:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 80068e6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80068ea:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 80068ee:	664b      	str	r3, [r1, #100]	; 0x64
}
 80068f0:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 80068f2:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 80068f6:	4770      	bx	lr
    return HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
}
 80068fa:	4770      	bx	lr

080068fc <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <HAL_PWREx_ConfigSupply+0x74>)
 80068fe:	68d3      	ldr	r3, [r2, #12]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006906:	68d3      	ldr	r3, [r2, #12]
{
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800690c:	d005      	beq.n	800691a <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800690e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006912:	1a18      	subs	r0, r3, r0
 8006914:	bf18      	it	ne
 8006916:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006918:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800691a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800691e:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006920:	4303      	orrs	r3, r0
 8006922:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8006924:	f7fe fe4a 	bl	80055bc <HAL_GetTick>
 8006928:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800692a:	e005      	b.n	8006938 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800692c:	f7fe fe46 	bl	80055bc <HAL_GetTick>
 8006930:	1b43      	subs	r3, r0, r5
 8006932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006936:	d819      	bhi.n	800696c <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006938:	6873      	ldr	r3, [r6, #4]
 800693a:	049a      	lsls	r2, r3, #18
 800693c:	d5f6      	bpl.n	800692c <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800693e:	f1a4 031d 	sub.w	r3, r4, #29
 8006942:	2b01      	cmp	r3, #1
 8006944:	d905      	bls.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8006946:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800694a:	2801      	cmp	r0, #1
 800694c:	d901      	bls.n	8006952 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800694e:	2000      	movs	r0, #0
}
 8006950:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8006952:	f7fe fe33 	bl	80055bc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8006958:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800695a:	68eb      	ldr	r3, [r5, #12]
 800695c:	03db      	lsls	r3, r3, #15
 800695e:	d4f6      	bmi.n	800694e <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006960:	f7fe fe2c 	bl	80055bc <HAL_GetTick>
 8006964:	1b00      	subs	r0, r0, r4
 8006966:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800696a:	d9f6      	bls.n	800695a <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800696c:	2001      	movs	r0, #1
}
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	58024800 	.word	0x58024800

08006974 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006974:	2800      	cmp	r0, #0
 8006976:	f000 81f7 	beq.w	8006d68 <HAL_RCC_OscConfig+0x3f4>
{
 800697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800697c:	6803      	ldr	r3, [r0, #0]
 800697e:	4604      	mov	r4, r0
 8006980:	07d9      	lsls	r1, r3, #31
 8006982:	d52e      	bpl.n	80069e2 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006984:	49b4      	ldr	r1, [pc, #720]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006986:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006988:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800698a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800698e:	2a10      	cmp	r2, #16
 8006990:	f000 812c 	beq.w	8006bec <HAL_RCC_OscConfig+0x278>
 8006994:	2a18      	cmp	r2, #24
 8006996:	f000 8124 	beq.w	8006be2 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	f000 8167 	beq.w	8006c72 <HAL_RCC_OscConfig+0x2fe>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 817f 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x334>
 80069aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ae:	4baa      	ldr	r3, [pc, #680]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	f000 8278 	beq.w	8006ea6 <HAL_RCC_OscConfig+0x532>
 80069b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fe fdfa 	bl	80055bc <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069c8:	4ea3      	ldr	r6, [pc, #652]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80069ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069cc:	e005      	b.n	80069da <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069ce:	f7fe fdf5 	bl	80055bc <HAL_GetTick>
 80069d2:	1b40      	subs	r0, r0, r5
 80069d4:	2864      	cmp	r0, #100	; 0x64
 80069d6:	f200 8165 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	039f      	lsls	r7, r3, #14
 80069de:	d5f6      	bpl.n	80069ce <HAL_RCC_OscConfig+0x5a>
 80069e0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e2:	0799      	lsls	r1, r3, #30
 80069e4:	d521      	bpl.n	8006a2a <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e6:	4a9c      	ldr	r2, [pc, #624]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 80069e8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069ec:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80069f0:	f040 80a8 	bne.w	8006b44 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f4:	4b98      	ldr	r3, [pc, #608]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	075b      	lsls	r3, r3, #29
 80069fa:	d503      	bpl.n	8006a04 <HAL_RCC_OscConfig+0x90>
 80069fc:	68e3      	ldr	r3, [r4, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80ed 	beq.w	8006bde <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	f7fe fdf2 	bl	80055ec <HAL_GetREVID>
 8006a08:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	f200 8189 	bhi.w	8006d24 <HAL_RCC_OscConfig+0x3b0>
 8006a12:	6922      	ldr	r2, [r4, #16]
 8006a14:	2a40      	cmp	r2, #64	; 0x40
 8006a16:	f000 824e 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x542>
 8006a1a:	498f      	ldr	r1, [pc, #572]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006a1c:	684b      	ldr	r3, [r1, #4]
 8006a1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006a26:	604b      	str	r3, [r1, #4]
 8006a28:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a2a:	06d9      	lsls	r1, r3, #27
 8006a2c:	d456      	bmi.n	8006adc <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a2e:	071d      	lsls	r5, r3, #28
 8006a30:	d517      	bpl.n	8006a62 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a32:	6963      	ldr	r3, [r4, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80b4 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a3a:	4b87      	ldr	r3, [pc, #540]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006a3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a3e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8006a40:	f042 0201 	orr.w	r2, r2, #1
 8006a44:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006a46:	f7fe fdb9 	bl	80055bc <HAL_GetTick>
 8006a4a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a4c:	e005      	b.n	8006a5a <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4e:	f7fe fdb5 	bl	80055bc <HAL_GetTick>
 8006a52:	1b40      	subs	r0, r0, r5
 8006a54:	2802      	cmp	r0, #2
 8006a56:	f200 8125 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a5a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006a5c:	0798      	lsls	r0, r3, #30
 8006a5e:	d5f6      	bpl.n	8006a4e <HAL_RCC_OscConfig+0xda>
 8006a60:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a62:	069a      	lsls	r2, r3, #26
 8006a64:	d517      	bpl.n	8006a96 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a66:	69a3      	ldr	r3, [r4, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8134 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a6e:	4b7a      	ldr	r3, [pc, #488]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006a70:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a72:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8006a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006a7a:	f7fe fd9f 	bl	80055bc <HAL_GetTick>
 8006a7e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a80:	e005      	b.n	8006a8e <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a82:	f7fe fd9b 	bl	80055bc <HAL_GetTick>
 8006a86:	1b40      	subs	r0, r0, r5
 8006a88:	2802      	cmp	r0, #2
 8006a8a:	f200 810b 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a8e:	6833      	ldr	r3, [r6, #0]
 8006a90:	049f      	lsls	r7, r3, #18
 8006a92:	d5f6      	bpl.n	8006a82 <HAL_RCC_OscConfig+0x10e>
 8006a94:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a96:	0759      	lsls	r1, r3, #29
 8006a98:	f100 80b2 	bmi.w	8006c00 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a9e:	b1d8      	cbz	r0, 8006ad8 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006aa0:	4b6d      	ldr	r3, [pc, #436]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006aa8:	2a18      	cmp	r2, #24
 8006aaa:	f000 81ce 	beq.w	8006e4a <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aae:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab0:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ab2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8006ab4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006ab8:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aba:	f000 8161 	beq.w	8006d80 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fe fd7d 	bl	80055bc <HAL_GetTick>
 8006ac2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ac4:	e005      	b.n	8006ad2 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac6:	f7fe fd79 	bl	80055bc <HAL_GetTick>
 8006aca:	1b00      	subs	r0, r0, r4
 8006acc:	2802      	cmp	r0, #2
 8006ace:	f200 80e9 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	d4f6      	bmi.n	8006ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006ad8:	2000      	movs	r0, #0
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006adc:	4a5e      	ldr	r2, [pc, #376]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006ade:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ae0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d072      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x25c>
 8006aea:	2b18      	cmp	r3, #24
 8006aec:	d06c      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006aee:	69e3      	ldr	r3, [r4, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8103 	beq.w	8006cfc <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8006af6:	4b58      	ldr	r3, [pc, #352]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006af8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006afa:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8006afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b02:	f7fe fd5b 	bl	80055bc <HAL_GetTick>
 8006b06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b08:	e005      	b.n	8006b16 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b0a:	f7fe fd57 	bl	80055bc <HAL_GetTick>
 8006b0e:	1b40      	subs	r0, r0, r5
 8006b10:	2802      	cmp	r0, #2
 8006b12:	f200 80c7 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b16:	6833      	ldr	r3, [r6, #0]
 8006b18:	05db      	lsls	r3, r3, #23
 8006b1a:	d5f6      	bpl.n	8006b0a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b1c:	f7fe fd66 	bl	80055ec <HAL_GetREVID>
 8006b20:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b24:	4298      	cmp	r0, r3
 8006b26:	f200 81e9 	bhi.w	8006efc <HAL_RCC_OscConfig+0x588>
 8006b2a:	6a22      	ldr	r2, [r4, #32]
 8006b2c:	6873      	ldr	r3, [r6, #4]
 8006b2e:	2a20      	cmp	r2, #32
 8006b30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b34:	bf0c      	ite	eq
 8006b36:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006b3a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006b3e:	6073      	str	r3, [r6, #4]
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	e774      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b44:	2b18      	cmp	r3, #24
 8006b46:	f000 810b 	beq.w	8006d60 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b4a:	68e2      	ldr	r2, [r4, #12]
 8006b4c:	2a00      	cmp	r2, #0
 8006b4e:	f000 80f3 	beq.w	8006d38 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b52:	4941      	ldr	r1, [pc, #260]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006b54:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b56:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b58:	f023 0319 	bic.w	r3, r3, #25
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8006b60:	f7fe fd2c 	bl	80055bc <HAL_GetTick>
 8006b64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b66:	e005      	b.n	8006b74 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b68:	f7fe fd28 	bl	80055bc <HAL_GetTick>
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	2802      	cmp	r0, #2
 8006b70:	f200 8098 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b74:	6833      	ldr	r3, [r6, #0]
 8006b76:	075f      	lsls	r7, r3, #29
 8006b78:	d5f6      	bpl.n	8006b68 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	f7fe fd37 	bl	80055ec <HAL_GetREVID>
 8006b7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b82:	4298      	cmp	r0, r3
 8006b84:	f200 81c3 	bhi.w	8006f0e <HAL_RCC_OscConfig+0x59a>
 8006b88:	6922      	ldr	r2, [r4, #16]
 8006b8a:	6873      	ldr	r3, [r6, #4]
 8006b8c:	2a40      	cmp	r2, #64	; 0x40
 8006b8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b92:	bf0c      	ite	eq
 8006b94:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006b98:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006b9c:	6073      	str	r3, [r6, #4]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	e743      	b.n	8006a2a <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006ba4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ba6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006bae:	f7fe fd05 	bl	80055bc <HAL_GetTick>
 8006bb2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb6:	f7fe fd01 	bl	80055bc <HAL_GetTick>
 8006bba:	1b40      	subs	r0, r0, r5
 8006bbc:	2802      	cmp	r0, #2
 8006bbe:	d871      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bc0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006bc2:	0799      	lsls	r1, r3, #30
 8006bc4:	d4f7      	bmi.n	8006bb6 <HAL_RCC_OscConfig+0x242>
 8006bc6:	e74b      	b.n	8006a60 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bc8:	f002 0203 	and.w	r2, r2, #3
 8006bcc:	2a01      	cmp	r2, #1
 8006bce:	d18e      	bne.n	8006aee <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	05da      	lsls	r2, r3, #23
 8006bd6:	d552      	bpl.n	8006c7e <HAL_RCC_OscConfig+0x30a>
 8006bd8:	69e3      	ldr	r3, [r4, #28]
 8006bda:	2b80      	cmp	r3, #128	; 0x80
 8006bdc:	d04f      	beq.n	8006c7e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8006bde:	2001      	movs	r0, #1
}
 8006be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006be2:	f001 0103 	and.w	r1, r1, #3
 8006be6:	2902      	cmp	r1, #2
 8006be8:	f47f aed7 	bne.w	800699a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	4a1a      	ldr	r2, [pc, #104]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	0392      	lsls	r2, r2, #14
 8006bf2:	f57f aef6 	bpl.w	80069e2 <HAL_RCC_OscConfig+0x6e>
 8006bf6:	6862      	ldr	r2, [r4, #4]
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	f47f aef2 	bne.w	80069e2 <HAL_RCC_OscConfig+0x6e>
 8006bfe:	e7ee      	b.n	8006bde <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8006c00:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_RCC_OscConfig+0x2e8>)
 8006c02:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c04:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8006c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006c0c:	f7fe fcd6 	bl	80055bc <HAL_GetTick>
 8006c10:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c12:	e004      	b.n	8006c1e <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c14:	f7fe fcd2 	bl	80055bc <HAL_GetTick>
 8006c18:	1b40      	subs	r0, r0, r5
 8006c1a:	2864      	cmp	r0, #100	; 0x64
 8006c1c:	d842      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	05da      	lsls	r2, r3, #23
 8006c22:	d5f7      	bpl.n	8006c14 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	f000 817a 	beq.w	8006f20 <HAL_RCC_OscConfig+0x5ac>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 814b 	beq.w	8006ec8 <HAL_RCC_OscConfig+0x554>
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
 8006c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c38:	f000 8187 	beq.w	8006f4a <HAL_RCC_OscConfig+0x5d6>
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	671a      	str	r2, [r3, #112]	; 0x70
 8006c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c44:	f022 0204 	bic.w	r2, r2, #4
 8006c48:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006c4a:	f7fe fcb7 	bl	80055bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c4e:	4e02      	ldr	r6, [pc, #8]	; (8006c58 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c50:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006c54:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x2f6>
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fe fcac 	bl	80055bc <HAL_GetTick>
 8006c64:	1b40      	subs	r0, r0, r5
 8006c66:	42b8      	cmp	r0, r7
 8006c68:	d81c      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c6a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006c6c:	079b      	lsls	r3, r3, #30
 8006c6e:	d5f7      	bpl.n	8006c60 <HAL_RCC_OscConfig+0x2ec>
 8006c70:	e714      	b.n	8006a9c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c72:	4aae      	ldr	r2, [pc, #696]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006c74:	6813      	ldr	r3, [r2, #0]
 8006c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c7c:	e6a2      	b.n	80069c4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c7e:	f7fe fcb5 	bl	80055ec <HAL_GetREVID>
 8006c82:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c86:	4298      	cmp	r0, r3
 8006c88:	d870      	bhi.n	8006d6c <HAL_RCC_OscConfig+0x3f8>
 8006c8a:	6a22      	ldr	r2, [r4, #32]
 8006c8c:	2a20      	cmp	r2, #32
 8006c8e:	f000 8153 	beq.w	8006f38 <HAL_RCC_OscConfig+0x5c4>
 8006c92:	49a6      	ldr	r1, [pc, #664]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006c94:	684b      	ldr	r3, [r1, #4]
 8006c96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c9a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006c9e:	604b      	str	r3, [r1, #4]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	e6c4      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8006ca4:	2003      	movs	r0, #3
}
 8006ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca8:	4ba0      	ldr	r3, [pc, #640]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006caa:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cac:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006cbc:	f7fe fc7e 	bl	80055bc <HAL_GetTick>
 8006cc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cc2:	e004      	b.n	8006cce <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cc4:	f7fe fc7a 	bl	80055bc <HAL_GetTick>
 8006cc8:	1b40      	subs	r0, r0, r5
 8006cca:	2864      	cmp	r0, #100	; 0x64
 8006ccc:	d8ea      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cce:	6833      	ldr	r3, [r6, #0]
 8006cd0:	0398      	lsls	r0, r3, #14
 8006cd2:	d4f7      	bmi.n	8006cc4 <HAL_RCC_OscConfig+0x350>
 8006cd4:	e684      	b.n	80069e0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8006cd6:	4b95      	ldr	r3, [pc, #596]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cda:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8006cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ce0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006ce2:	f7fe fc6b 	bl	80055bc <HAL_GetTick>
 8006ce6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ce8:	e004      	b.n	8006cf4 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006cea:	f7fe fc67 	bl	80055bc <HAL_GetTick>
 8006cee:	1b40      	subs	r0, r0, r5
 8006cf0:	2802      	cmp	r0, #2
 8006cf2:	d8d7      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cf4:	6833      	ldr	r3, [r6, #0]
 8006cf6:	0498      	lsls	r0, r3, #18
 8006cf8:	d4f7      	bmi.n	8006cea <HAL_RCC_OscConfig+0x376>
 8006cfa:	e6cb      	b.n	8006a94 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8006cfc:	4b8b      	ldr	r3, [pc, #556]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d00:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8006d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d08:	f7fe fc58 	bl	80055bc <HAL_GetTick>
 8006d0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d0e:	e004      	b.n	8006d1a <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d10:	f7fe fc54 	bl	80055bc <HAL_GetTick>
 8006d14:	1b40      	subs	r0, r0, r5
 8006d16:	2802      	cmp	r0, #2
 8006d18:	d8c4      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d1a:	6833      	ldr	r3, [r6, #0]
 8006d1c:	05df      	lsls	r7, r3, #23
 8006d1e:	d4f7      	bmi.n	8006d10 <HAL_RCC_OscConfig+0x39c>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	e684      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d24:	4a81      	ldr	r2, [pc, #516]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006d26:	6921      	ldr	r1, [r4, #16]
 8006d28:	6853      	ldr	r3, [r2, #4]
 8006d2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d32:	6053      	str	r3, [r2, #4]
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	e678      	b.n	8006a2a <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8006d38:	4b7c      	ldr	r3, [pc, #496]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d3c:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d44:	f7fe fc3a 	bl	80055bc <HAL_GetTick>
 8006d48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d4a:	e004      	b.n	8006d56 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4c:	f7fe fc36 	bl	80055bc <HAL_GetTick>
 8006d50:	1b40      	subs	r0, r0, r5
 8006d52:	2802      	cmp	r0, #2
 8006d54:	d8a6      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d56:	6833      	ldr	r3, [r6, #0]
 8006d58:	0758      	lsls	r0, r3, #29
 8006d5a:	d4f7      	bmi.n	8006d4c <HAL_RCC_OscConfig+0x3d8>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	e664      	b.n	8006a2a <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d60:	0792      	lsls	r2, r2, #30
 8006d62:	f47f aef2 	bne.w	8006b4a <HAL_RCC_OscConfig+0x1d6>
 8006d66:	e645      	b.n	80069f4 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8006d68:	2001      	movs	r0, #1
}
 8006d6a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d6c:	4a6f      	ldr	r2, [pc, #444]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006d6e:	6a21      	ldr	r1, [r4, #32]
 8006d70:	68d3      	ldr	r3, [r2, #12]
 8006d72:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d7a:	60d3      	str	r3, [r2, #12]
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	e656      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8006d80:	f7fe fc1c 	bl	80055bc <HAL_GetTick>
 8006d84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d86:	e004      	b.n	8006d92 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d88:	f7fe fc18 	bl	80055bc <HAL_GetTick>
 8006d8c:	1b80      	subs	r0, r0, r6
 8006d8e:	2802      	cmp	r0, #2
 8006d90:	d888      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	0199      	lsls	r1, r3, #6
 8006d96:	d4f7      	bmi.n	8006d88 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006d9a:	4b65      	ldr	r3, [pc, #404]	; (8006f30 <HAL_RCC_OscConfig+0x5bc>)
 8006d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006d9e:	4013      	ands	r3, r2
 8006da0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006da2:	4964      	ldr	r1, [pc, #400]	; (8006f34 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da4:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006da6:	4e61      	ldr	r6, [pc, #388]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006dac:	62ab      	str	r3, [r5, #40]	; 0x28
 8006dae:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006db0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006db4:	3f01      	subs	r7, #1
 8006db6:	1e50      	subs	r0, r2, #1
 8006db8:	3b01      	subs	r3, #1
 8006dba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006dbc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006dc0:	025b      	lsls	r3, r3, #9
 8006dc2:	0400      	lsls	r0, r0, #16
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006dcc:	0612      	lsls	r2, r2, #24
 8006dce:	4303      	orrs	r3, r0
 8006dd0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006dd4:	433b      	orrs	r3, r7
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006dda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006de2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006de4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006de6:	4011      	ands	r1, r2
 8006de8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006dec:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006dee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006df0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006df2:	f023 030c 	bic.w	r3, r3, #12
 8006df6:	4313      	orrs	r3, r2
 8006df8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006dfc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006dfe:	f023 0302 	bic.w	r3, r3, #2
 8006e02:	4313      	orrs	r3, r2
 8006e04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e0c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e14:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e1c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e2e:	f7fe fbc5 	bl	80055bc <HAL_GetTick>
 8006e32:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e34:	e005      	b.n	8006e42 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e36:	f7fe fbc1 	bl	80055bc <HAL_GetTick>
 8006e3a:	1b00      	subs	r0, r0, r4
 8006e3c:	2802      	cmp	r0, #2
 8006e3e:	f63f af31 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e42:	6833      	ldr	r3, [r6, #0]
 8006e44:	019a      	lsls	r2, r3, #6
 8006e46:	d5f6      	bpl.n	8006e36 <HAL_RCC_OscConfig+0x4c2>
 8006e48:	e646      	b.n	8006ad8 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e4a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e4e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e50:	f43f ae43 	beq.w	8006ada <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e54:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006e5a:	428b      	cmp	r3, r1
 8006e5c:	f47f aebf 	bne.w	8006bde <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e60:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e66:	429a      	cmp	r2, r3
 8006e68:	f47f aeb9 	bne.w	8006bde <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e6e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8006e72:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	f47f aeb2 	bne.w	8006bde <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e7c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8006e80:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e82:	429a      	cmp	r2, r3
 8006e84:	f47f aeab 	bne.w	8006bde <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e8a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8006e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f47f aea4 	bne.w	8006bde <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006e98:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006e9c:	3801      	subs	r0, #1
  return HAL_OK;
 8006e9e:	1a28      	subs	r0, r5, r0
 8006ea0:	bf18      	it	ne
 8006ea2:	2001      	movne	r0, #1
}
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ea6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e586      	b.n	80069c4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb6:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006eb8:	6853      	ldr	r3, [r2, #4]
 8006eba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	6053      	str	r3, [r2, #4]
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	e5b0      	b.n	8006a2a <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec8:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ed0:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eda:	f022 0204 	bic.w	r2, r2, #4
 8006ede:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006ee0:	f7fe fb6c 	bl	80055bc <HAL_GetTick>
 8006ee4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ee6:	e005      	b.n	8006ef4 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee8:	f7fe fb68 	bl	80055bc <HAL_GetTick>
 8006eec:	1b40      	subs	r0, r0, r5
 8006eee:	42b8      	cmp	r0, r7
 8006ef0:	f63f aed8 	bhi.w	8006ca4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ef4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006ef6:	0798      	lsls	r0, r3, #30
 8006ef8:	d4f6      	bmi.n	8006ee8 <HAL_RCC_OscConfig+0x574>
 8006efa:	e5cf      	b.n	8006a9c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006efc:	68f3      	ldr	r3, [r6, #12]
 8006efe:	6a22      	ldr	r2, [r4, #32]
 8006f00:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006f04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f08:	60f3      	str	r3, [r6, #12]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	e58f      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0e:	6873      	ldr	r3, [r6, #4]
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f1a:	6073      	str	r3, [r6, #4]
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	e584      	b.n	8006a2a <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f20:	4a02      	ldr	r2, [pc, #8]	; (8006f2c <HAL_RCC_OscConfig+0x5b8>)
 8006f22:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f2a:	e68e      	b.n	8006c4a <HAL_RCC_OscConfig+0x2d6>
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	fffffc0c 	.word	0xfffffc0c
 8006f34:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <HAL_RCC_OscConfig+0x5e8>)
 8006f3a:	6853      	ldr	r3, [r2, #4]
 8006f3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f44:	6053      	str	r3, [r2, #4]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	e571      	b.n	8006a2e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f4a:	f042 0204 	orr.w	r2, r2, #4
 8006f4e:	671a      	str	r2, [r3, #112]	; 0x70
 8006f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	671a      	str	r2, [r3, #112]	; 0x70
 8006f58:	e677      	b.n	8006c4a <HAL_RCC_OscConfig+0x2d6>
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400

08006f60 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f60:	4a47      	ldr	r2, [pc, #284]	; (8007080 <HAL_RCC_GetSysClockFreq+0x120>)
 8006f62:	6913      	ldr	r3, [r2, #16]
 8006f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0x16>
 8006f6c:	2b18      	cmp	r3, #24
 8006f6e:	d00d      	beq.n	8006f8c <HAL_RCC_GetSysClockFreq+0x2c>
 8006f70:	b11b      	cbz	r3, 8006f7a <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f72:	4844      	ldr	r0, [pc, #272]	; (8007084 <HAL_RCC_GetSysClockFreq+0x124>)
 8006f74:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f76:	4844      	ldr	r0, [pc, #272]	; (8007088 <HAL_RCC_GetSysClockFreq+0x128>)
 8006f78:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	d54a      	bpl.n	8007016 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	4842      	ldr	r0, [pc, #264]	; (800708c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006f84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f88:	40d8      	lsrs	r0, r3
 8006f8a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8006f8e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f90:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8006f94:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f98:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f9c:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006f9e:	d038      	beq.n	8007012 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006fa0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fa4:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fa8:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006fac:	fb01 f105 	mul.w	r1, r1, r5
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	ee07 1a90 	vmov	s15, r1
 8006fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8006fba:	d002      	beq.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x62>
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d02c      	beq.n	800701a <HAL_RCC_GetSysClockFreq+0xba>
 8006fc0:	b393      	cbz	r3, 8007028 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fc2:	ee07 0a90 	vmov	s15, r0
 8006fc6:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007090 <HAL_RCC_GetSysClockFreq+0x130>
 8006fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006fd0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006fd4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8007094 <HAL_RCC_GetSysClockFreq+0x134>
 8006fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fdc:	ee07 3a90 	vmov	s15, r3
 8006fe0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fe8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006fec:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ff4:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_RCC_GetSysClockFreq+0x120>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006ffc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800700e:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007012:	bc30      	pop	{r4, r5}
 8007014:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007016:	481d      	ldr	r0, [pc, #116]	; (800708c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8007018:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800701a:	ee07 0a90 	vmov	s15, r0
 800701e:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8007098 <HAL_RCC_GetSysClockFreq+0x138>
 8007022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007026:	e7d2      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007028:	6813      	ldr	r3, [r2, #0]
 800702a:	069b      	lsls	r3, r3, #26
 800702c:	d520      	bpl.n	8007070 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800702e:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007030:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007034:	4915      	ldr	r1, [pc, #84]	; (800708c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007036:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800703a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800703e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007042:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007044:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007046:	eddf 4a13 	vldr	s9, [pc, #76]	; 8007094 <HAL_RCC_GetSysClockFreq+0x134>
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee06 1a10 	vmov	s12, r1
 8007052:	ee06 3a90 	vmov	s13, r3
 8007056:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800705a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800705e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8007062:	eee7 6a24 	vfma.f32	s13, s14, s9
 8007066:	ee76 6a85 	vadd.f32	s13, s13, s10
 800706a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800706e:	e7c1      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007070:	ee07 0a90 	vmov	s15, r0
 8007074:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800709c <HAL_RCC_GetSysClockFreq+0x13c>
 8007078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800707c:	e7a7      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x6e>
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
 8007084:	003d0900 	.word	0x003d0900
 8007088:	017d7840 	.word	0x017d7840
 800708c:	03d09000 	.word	0x03d09000
 8007090:	4a742400 	.word	0x4a742400
 8007094:	39000000 	.word	0x39000000
 8007098:	4bbebc20 	.word	0x4bbebc20
 800709c:	4c742400 	.word	0x4c742400

080070a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f000 810e 	beq.w	80072c2 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070a6:	4a8d      	ldr	r2, [pc, #564]	; (80072dc <HAL_RCC_ClockConfig+0x23c>)
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	428b      	cmp	r3, r1
{
 80070b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070b8:	d20c      	bcs.n	80070d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	f023 030f 	bic.w	r3, r3, #15
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	428b      	cmp	r3, r1
 80070cc:	d002      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80070ce:	2001      	movs	r0, #1
}
 80070d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	075f      	lsls	r7, r3, #29
 80070d8:	d50b      	bpl.n	80070f2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070da:	4981      	ldr	r1, [pc, #516]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070dc:	6920      	ldr	r0, [r4, #16]
 80070de:	698a      	ldr	r2, [r1, #24]
 80070e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80070e4:	4290      	cmp	r0, r2
 80070e6:	d904      	bls.n	80070f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070e8:	698a      	ldr	r2, [r1, #24]
 80070ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070ee:	4302      	orrs	r2, r0
 80070f0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f2:	071e      	lsls	r6, r3, #28
 80070f4:	d50b      	bpl.n	800710e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070f6:	497a      	ldr	r1, [pc, #488]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070f8:	6960      	ldr	r0, [r4, #20]
 80070fa:	69ca      	ldr	r2, [r1, #28]
 80070fc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007100:	4290      	cmp	r0, r2
 8007102:	d904      	bls.n	800710e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007104:	69ca      	ldr	r2, [r1, #28]
 8007106:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800710a:	4302      	orrs	r2, r0
 800710c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800710e:	06d8      	lsls	r0, r3, #27
 8007110:	d50b      	bpl.n	800712a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007112:	4973      	ldr	r1, [pc, #460]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007114:	69a0      	ldr	r0, [r4, #24]
 8007116:	69ca      	ldr	r2, [r1, #28]
 8007118:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800711c:	4290      	cmp	r0, r2
 800711e:	d904      	bls.n	800712a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007120:	69ca      	ldr	r2, [r1, #28]
 8007122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007126:	4302      	orrs	r2, r0
 8007128:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800712a:	0699      	lsls	r1, r3, #26
 800712c:	d50b      	bpl.n	8007146 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800712e:	496c      	ldr	r1, [pc, #432]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007130:	69e0      	ldr	r0, [r4, #28]
 8007132:	6a0a      	ldr	r2, [r1, #32]
 8007134:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007138:	4290      	cmp	r0, r2
 800713a:	d904      	bls.n	8007146 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800713c:	6a0a      	ldr	r2, [r1, #32]
 800713e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007142:	4302      	orrs	r2, r0
 8007144:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007146:	079a      	lsls	r2, r3, #30
 8007148:	f140 80ad 	bpl.w	80072a6 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800714c:	4864      	ldr	r0, [pc, #400]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 800714e:	68e1      	ldr	r1, [r4, #12]
 8007150:	6982      	ldr	r2, [r0, #24]
 8007152:	f002 020f 	and.w	r2, r2, #15
 8007156:	4291      	cmp	r1, r2
 8007158:	d904      	bls.n	8007164 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800715a:	6982      	ldr	r2, [r0, #24]
 800715c:	f022 020f 	bic.w	r2, r2, #15
 8007160:	430a      	orrs	r2, r1
 8007162:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007164:	07d8      	lsls	r0, r3, #31
 8007166:	d531      	bpl.n	80071cc <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007168:	4a5d      	ldr	r2, [pc, #372]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 800716a:	68a1      	ldr	r1, [r4, #8]
 800716c:	6993      	ldr	r3, [r2, #24]
 800716e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007172:	430b      	orrs	r3, r1
 8007174:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007176:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007178:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800717a:	2902      	cmp	r1, #2
 800717c:	f000 80a3 	beq.w	80072c6 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007180:	2903      	cmp	r1, #3
 8007182:	f000 809a 	beq.w	80072ba <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007186:	2901      	cmp	r1, #1
 8007188:	f000 80a3 	beq.w	80072d2 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718c:	0758      	lsls	r0, r3, #29
 800718e:	d59e      	bpl.n	80070ce <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007190:	4a53      	ldr	r2, [pc, #332]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007192:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007196:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007198:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	430b      	orrs	r3, r1
 80071a0:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 80071a2:	f7fe fa0b 	bl	80055bc <HAL_GetTick>
 80071a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a8:	e005      	b.n	80071b6 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071aa:	f7fe fa07 	bl	80055bc <HAL_GetTick>
 80071ae:	1b80      	subs	r0, r0, r6
 80071b0:	4540      	cmp	r0, r8
 80071b2:	f200 808c 	bhi.w	80072ce <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071be:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80071c2:	d1f2      	bne.n	80071aa <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	0799      	lsls	r1, r3, #30
 80071c8:	d506      	bpl.n	80071d8 <HAL_RCC_ClockConfig+0x138>
 80071ca:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071cc:	4844      	ldr	r0, [pc, #272]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80071ce:	6982      	ldr	r2, [r0, #24]
 80071d0:	f002 020f 	and.w	r2, r2, #15
 80071d4:	428a      	cmp	r2, r1
 80071d6:	d86a      	bhi.n	80072ae <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071d8:	4940      	ldr	r1, [pc, #256]	; (80072dc <HAL_RCC_ClockConfig+0x23c>)
 80071da:	680a      	ldr	r2, [r1, #0]
 80071dc:	f002 020f 	and.w	r2, r2, #15
 80071e0:	42aa      	cmp	r2, r5
 80071e2:	d90a      	bls.n	80071fa <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e4:	680a      	ldr	r2, [r1, #0]
 80071e6:	f022 020f 	bic.w	r2, r2, #15
 80071ea:	432a      	orrs	r2, r5
 80071ec:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	680a      	ldr	r2, [r1, #0]
 80071f0:	f002 020f 	and.w	r2, r2, #15
 80071f4:	42aa      	cmp	r2, r5
 80071f6:	f47f af6a 	bne.w	80070ce <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071fa:	075a      	lsls	r2, r3, #29
 80071fc:	d50b      	bpl.n	8007216 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071fe:	4938      	ldr	r1, [pc, #224]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007200:	6920      	ldr	r0, [r4, #16]
 8007202:	698a      	ldr	r2, [r1, #24]
 8007204:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007208:	4290      	cmp	r0, r2
 800720a:	d204      	bcs.n	8007216 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800720c:	698a      	ldr	r2, [r1, #24]
 800720e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007212:	4302      	orrs	r2, r0
 8007214:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007216:	071f      	lsls	r7, r3, #28
 8007218:	d50b      	bpl.n	8007232 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800721a:	4931      	ldr	r1, [pc, #196]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 800721c:	6960      	ldr	r0, [r4, #20]
 800721e:	69ca      	ldr	r2, [r1, #28]
 8007220:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007224:	4290      	cmp	r0, r2
 8007226:	d204      	bcs.n	8007232 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007228:	69ca      	ldr	r2, [r1, #28]
 800722a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800722e:	4302      	orrs	r2, r0
 8007230:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007232:	06de      	lsls	r6, r3, #27
 8007234:	d50b      	bpl.n	800724e <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007236:	492a      	ldr	r1, [pc, #168]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007238:	69a0      	ldr	r0, [r4, #24]
 800723a:	69ca      	ldr	r2, [r1, #28]
 800723c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007240:	4290      	cmp	r0, r2
 8007242:	d204      	bcs.n	800724e <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007244:	69ca      	ldr	r2, [r1, #28]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	4302      	orrs	r2, r0
 800724c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800724e:	069d      	lsls	r5, r3, #26
 8007250:	d50b      	bpl.n	800726a <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007254:	69e1      	ldr	r1, [r4, #28]
 8007256:	6a13      	ldr	r3, [r2, #32]
 8007258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800725c:	4299      	cmp	r1, r3
 800725e:	d204      	bcs.n	800726a <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007260:	6a13      	ldr	r3, [r2, #32]
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	430b      	orrs	r3, r1
 8007268:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800726a:	f7ff fe79 	bl	8006f60 <HAL_RCC_GetSysClockFreq>
 800726e:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 8007270:	4602      	mov	r2, r0
 8007272:	481c      	ldr	r0, [pc, #112]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007274:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007276:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007278:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800727c:	4d1a      	ldr	r5, [pc, #104]	; (80072e8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	4c1a      	ldr	r4, [pc, #104]	; (80072ec <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007284:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007286:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007288:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800728c:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800728e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8007292:	4d17      	ldr	r5, [pc, #92]	; (80072f0 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007294:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007296:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800729a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800729c:	6023      	str	r3, [r4, #0]
}
 800729e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80072a2:	f7fe b929 	b.w	80054f8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a6:	07da      	lsls	r2, r3, #31
 80072a8:	f53f af5e 	bmi.w	8007168 <HAL_RCC_ClockConfig+0xc8>
 80072ac:	e794      	b.n	80071d8 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ae:	6982      	ldr	r2, [r0, #24]
 80072b0:	f022 020f 	bic.w	r2, r2, #15
 80072b4:	4311      	orrs	r1, r2
 80072b6:	6181      	str	r1, [r0, #24]
 80072b8:	e78e      	b.n	80071d8 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072ba:	019f      	lsls	r7, r3, #6
 80072bc:	f53f af68 	bmi.w	8007190 <HAL_RCC_ClockConfig+0xf0>
 80072c0:	e705      	b.n	80070ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80072c2:	2001      	movs	r0, #1
}
 80072c4:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072c6:	039b      	lsls	r3, r3, #14
 80072c8:	f53f af62 	bmi.w	8007190 <HAL_RCC_ClockConfig+0xf0>
 80072cc:	e6ff      	b.n	80070ce <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80072ce:	2003      	movs	r0, #3
 80072d0:	e6fe      	b.n	80070d0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072d2:	05de      	lsls	r6, r3, #23
 80072d4:	f53f af5c 	bmi.w	8007190 <HAL_RCC_ClockConfig+0xf0>
 80072d8:	e6f9      	b.n	80070ce <HAL_RCC_ClockConfig+0x2e>
 80072da:	bf00      	nop
 80072dc:	52002000 	.word	0x52002000
 80072e0:	58024400 	.word	0x58024400
 80072e4:	08008e84 	.word	0x08008e84
 80072e8:	24009060 	.word	0x24009060
 80072ec:	24000004 	.word	0x24000004
 80072f0:	24000000 	.word	0x24000000

080072f4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072f4:	4a3b      	ldr	r2, [pc, #236]	; (80073e4 <RCCEx_PLL2_Config+0xf0>)
{
 80072f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d069      	beq.n	80073d6 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	4606      	mov	r6, r0
 8007306:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007308:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800730a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800730e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007310:	f7fe f954 	bl	80055bc <HAL_GetTick>
 8007314:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007316:	e004      	b.n	8007322 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007318:	f7fe f950 	bl	80055bc <HAL_GetTick>
 800731c:	1b43      	subs	r3, r0, r5
 800731e:	2b02      	cmp	r3, #2
 8007320:	d857      	bhi.n	80073d2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	011a      	lsls	r2, r3, #4
 8007326:	d4f7      	bmi.n	8007318 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800732a:	6832      	ldr	r2, [r6, #0]
 800732c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007330:	492d      	ldr	r1, [pc, #180]	; (80073e8 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007332:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007336:	62a3      	str	r3, [r4, #40]	; 0x28
 8007338:	6875      	ldr	r5, [r6, #4]
 800733a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800733e:	3d01      	subs	r5, #1
 8007340:	1e50      	subs	r0, r2, #1
 8007342:	3b01      	subs	r3, #1
 8007344:	6932      	ldr	r2, [r6, #16]
 8007346:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800734a:	025b      	lsls	r3, r3, #9
 800734c:	0400      	lsls	r0, r0, #16
 800734e:	3a01      	subs	r2, #1
 8007350:	b29b      	uxth	r3, r3
 8007352:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007356:	0612      	lsls	r2, r2, #24
 8007358:	4303      	orrs	r3, r0
 800735a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800735e:	432b      	orrs	r3, r5
 8007360:	4313      	orrs	r3, r2
 8007362:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007366:	6972      	ldr	r2, [r6, #20]
 8007368:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800736c:	4313      	orrs	r3, r2
 800736e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007372:	69b2      	ldr	r2, [r6, #24]
 8007374:	f023 0320 	bic.w	r3, r3, #32
 8007378:	4313      	orrs	r3, r2
 800737a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800737c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800737e:	f023 0310 	bic.w	r3, r3, #16
 8007382:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007384:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007386:	69f3      	ldr	r3, [r6, #28]
 8007388:	4011      	ands	r1, r2
 800738a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800738e:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007392:	f043 0310 	orr.w	r3, r3, #16
 8007396:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800739a:	b1f7      	cbz	r7, 80073da <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800739c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800739e:	bf0c      	ite	eq
 80073a0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073a4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80073a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <RCCEx_PLL2_Config+0xf0>)
 80073ac:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073ae:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80073b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80073b4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80073b6:	f7fe f901 	bl	80055bc <HAL_GetTick>
 80073ba:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073bc:	e004      	b.n	80073c8 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073be:	f7fe f8fd 	bl	80055bc <HAL_GetTick>
 80073c2:	1b00      	subs	r0, r0, r4
 80073c4:	2802      	cmp	r0, #2
 80073c6:	d804      	bhi.n	80073d2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	d5f7      	bpl.n	80073be <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80073ce:	2000      	movs	r0, #0
}
 80073d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80073d2:	2003      	movs	r0, #3
}
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80073d6:	2001      	movs	r0, #1
}
 80073d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073e0:	e7e3      	b.n	80073aa <RCCEx_PLL2_Config+0xb6>
 80073e2:	bf00      	nop
 80073e4:	58024400 	.word	0x58024400
 80073e8:	ffff0007 	.word	0xffff0007

080073ec <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ec:	4a3b      	ldr	r2, [pc, #236]	; (80074dc <RCCEx_PLL3_Config+0xf0>)
{
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d069      	beq.n	80074ce <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007400:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8007402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007406:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007408:	f7fe f8d8 	bl	80055bc <HAL_GetTick>
 800740c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800740e:	e004      	b.n	800741a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007410:	f7fe f8d4 	bl	80055bc <HAL_GetTick>
 8007414:	1b43      	subs	r3, r0, r5
 8007416:	2b02      	cmp	r3, #2
 8007418:	d857      	bhi.n	80074ca <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	009a      	lsls	r2, r3, #2
 800741e:	d4f7      	bmi.n	8007410 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007422:	6832      	ldr	r2, [r6, #0]
 8007424:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007428:	492d      	ldr	r1, [pc, #180]	; (80074e0 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800742a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800742e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007430:	6875      	ldr	r5, [r6, #4]
 8007432:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007436:	3d01      	subs	r5, #1
 8007438:	1e50      	subs	r0, r2, #1
 800743a:	3b01      	subs	r3, #1
 800743c:	6932      	ldr	r2, [r6, #16]
 800743e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8007442:	025b      	lsls	r3, r3, #9
 8007444:	0400      	lsls	r0, r0, #16
 8007446:	3a01      	subs	r2, #1
 8007448:	b29b      	uxth	r3, r3
 800744a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800744e:	0612      	lsls	r2, r2, #24
 8007450:	4303      	orrs	r3, r0
 8007452:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007456:	432b      	orrs	r3, r5
 8007458:	4313      	orrs	r3, r2
 800745a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800745c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800745e:	6972      	ldr	r2, [r6, #20]
 8007460:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007464:	4313      	orrs	r3, r2
 8007466:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800746a:	69b2      	ldr	r2, [r6, #24]
 800746c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007470:	4313      	orrs	r3, r2
 8007472:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800747c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800747e:	69f3      	ldr	r3, [r6, #28]
 8007480:	4011      	ands	r1, r2
 8007482:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007486:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800748a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800748e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007492:	b1f7      	cbz	r7, 80074d2 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007494:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007496:	bf0c      	ite	eq
 8007498:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800749c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80074a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <RCCEx_PLL3_Config+0xf0>)
 80074a4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a6:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80074a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80074ac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80074ae:	f7fe f885 	bl	80055bc <HAL_GetTick>
 80074b2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b4:	e004      	b.n	80074c0 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074b6:	f7fe f881 	bl	80055bc <HAL_GetTick>
 80074ba:	1b00      	subs	r0, r0, r4
 80074bc:	2802      	cmp	r0, #2
 80074be:	d804      	bhi.n	80074ca <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	d5f7      	bpl.n	80074b6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80074c6:	2000      	movs	r0, #0
}
 80074c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80074ca:	2003      	movs	r0, #3
}
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80074ce:	2001      	movs	r0, #1
}
 80074d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074d8:	e7e3      	b.n	80074a2 <RCCEx_PLL3_Config+0xb6>
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	ffff0007 	.word	0xffff0007

080074e4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074e8:	6803      	ldr	r3, [r0, #0]
{
 80074ea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074ec:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80074f0:	d01c      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074f2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80074f4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80074f8:	f000 84c7 	beq.w	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80074fc:	d823      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	f000 842c 	beq.w	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8007504:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007508:	d120      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800750a:	2102      	movs	r1, #2
 800750c:	3004      	adds	r0, #4
 800750e:	f7ff fef1 	bl	80072f4 <RCCEx_PLL2_Config>
 8007512:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007514:	2e00      	cmp	r6, #0
 8007516:	f040 84c0 	bne.w	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 800751a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800751c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800751e:	48b0      	ldr	r0, [pc, #704]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007520:	2600      	movs	r6, #0
 8007522:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007524:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007528:	430a      	orrs	r2, r1
 800752a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800752c:	05da      	lsls	r2, r3, #23
 800752e:	d511      	bpl.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007530:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007532:	2a04      	cmp	r2, #4
 8007534:	f200 8580 	bhi.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8007538:	e8df f012 	tbh	[pc, r2, lsl #1]
 800753c:	04c104ba 	.word	0x04c104ba
 8007540:	033b04b2 	.word	0x033b04b2
 8007544:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007546:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800754a:	d0e8      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800754c:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800754e:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007552:	d4ed      	bmi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007554:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007556:	059f      	lsls	r7, r3, #22
 8007558:	d51b      	bpl.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800755a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800755c:	2a80      	cmp	r2, #128	; 0x80
 800755e:	f000 84b7 	beq.w	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8007562:	f200 8127 	bhi.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007566:	2a00      	cmp	r2, #0
 8007568:	f000 83e6 	beq.w	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800756c:	2a40      	cmp	r2, #64	; 0x40
 800756e:	f040 8128 	bne.w	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007572:	2100      	movs	r1, #0
 8007574:	1d20      	adds	r0, r4, #4
 8007576:	f7ff febd 	bl	80072f4 <RCCEx_PLL2_Config>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800757e:	2d00      	cmp	r5, #0
 8007580:	f040 83cc 	bne.w	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007584:	4996      	ldr	r1, [pc, #600]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007586:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007588:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800758a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800758e:	4302      	orrs	r2, r0
 8007590:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007592:	0558      	lsls	r0, r3, #21
 8007594:	d51f      	bpl.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007596:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800759a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800759e:	f000 8462 	beq.w	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80075a2:	f200 8111 	bhi.w	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	f000 83c0 	beq.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80075ac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80075b0:	f040 8112 	bne.w	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b4:	2100      	movs	r1, #0
 80075b6:	1d20      	adds	r0, r4, #4
 80075b8:	f7ff fe9c 	bl	80072f4 <RCCEx_PLL2_Config>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	f040 83b1 	bne.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075c6:	4986      	ldr	r1, [pc, #536]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075c8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80075cc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80075ce:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80075d2:	4302      	orrs	r2, r0
 80075d4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075d6:	0519      	lsls	r1, r3, #20
 80075d8:	d51f      	bpl.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 80075da:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80075de:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80075e2:	f000 8437 	beq.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80075e6:	f200 80fd 	bhi.w	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	f000 83aa 	beq.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80075f0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80075f4:	f040 80fe 	bne.w	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075f8:	2100      	movs	r1, #0
 80075fa:	1d20      	adds	r0, r4, #4
 80075fc:	f7ff fe7a 	bl	80072f4 <RCCEx_PLL2_Config>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007604:	2d00      	cmp	r5, #0
 8007606:	f040 8387 	bne.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800760a:	4975      	ldr	r1, [pc, #468]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800760c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007610:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007612:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007616:	4302      	orrs	r2, r0
 8007618:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800761a:	019a      	lsls	r2, r3, #6
 800761c:	d518      	bpl.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800761e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007620:	2a20      	cmp	r2, #32
 8007622:	f000 840d 	beq.w	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007626:	f200 80e8 	bhi.w	80077fa <HAL_RCCEx_PeriphCLKConfig+0x316>
 800762a:	b13a      	cbz	r2, 800763c <HAL_RCCEx_PeriphCLKConfig+0x158>
 800762c:	2a10      	cmp	r2, #16
 800762e:	f040 80e7 	bne.w	8007800 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007632:	496b      	ldr	r1, [pc, #428]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007634:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007636:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800763a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800763c:	2d00      	cmp	r5, #0
 800763e:	f040 83ba 	bne.w	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007642:	4967      	ldr	r1, [pc, #412]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007644:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007646:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007648:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800764c:	4302      	orrs	r2, r0
 800764e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007650:	04df      	lsls	r7, r3, #19
 8007652:	d51d      	bpl.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007654:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007656:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800765a:	f000 840d 	beq.w	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800765e:	f200 80d2 	bhi.w	8007806 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007662:	2a00      	cmp	r2, #0
 8007664:	f000 8374 	beq.w	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8007668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800766c:	f040 80d3 	bne.w	8007816 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007670:	2100      	movs	r1, #0
 8007672:	1d20      	adds	r0, r4, #4
 8007674:	f7ff fe3e 	bl	80072f4 <RCCEx_PLL2_Config>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800767c:	2d00      	cmp	r5, #0
 800767e:	f040 834f 	bne.w	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007682:	4957      	ldr	r1, [pc, #348]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007684:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007686:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007688:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800768c:	4302      	orrs	r2, r0
 800768e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007690:	0498      	lsls	r0, r3, #18
 8007692:	d51b      	bpl.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007694:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007696:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800769a:	f000 83bd 	beq.w	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800769e:	f200 80bd 	bhi.w	800781c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80076a2:	b14a      	cbz	r2, 80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80076a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80076a8:	f040 80c2 	bne.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076ac:	2101      	movs	r1, #1
 80076ae:	1d20      	adds	r0, r4, #4
 80076b0:	f7ff fe20 	bl	80072f4 <RCCEx_PLL2_Config>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	f040 837e 	bne.w	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076be:	4948      	ldr	r1, [pc, #288]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80076c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80076c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80076c4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80076c8:	4302      	orrs	r2, r0
 80076ca:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076cc:	0459      	lsls	r1, r3, #17
 80076ce:	d51d      	bpl.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 80076d0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80076d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80076d8:	f000 83a8 	beq.w	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x948>
 80076dc:	f200 80ab 	bhi.w	8007836 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80076e0:	b14a      	cbz	r2, 80076f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80076e2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80076e6:	f040 80b0 	bne.w	800784a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076ea:	2101      	movs	r1, #1
 80076ec:	1d20      	adds	r0, r4, #4
 80076ee:	f7ff fe01 	bl	80072f4 <RCCEx_PLL2_Config>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	f040 8363 	bne.w	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076fc:	4938      	ldr	r1, [pc, #224]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80076fe:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8007702:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007704:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007708:	4302      	orrs	r2, r0
 800770a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	d509      	bpl.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8007710:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 8264 	beq.w	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8007718:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800771c:	f000 825a 	beq.w	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8007720:	2601      	movs	r6, #1
 8007722:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007724:	041f      	lsls	r7, r3, #16
 8007726:	d50d      	bpl.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8007728:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800772a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800772e:	f000 8420 	beq.w	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8007732:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007736:	f000 82ce 	beq.w	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800773a:	2a00      	cmp	r2, #0
 800773c:	f000 82d1 	beq.w	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007740:	2601      	movs	r6, #1
 8007742:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007744:	01d8      	lsls	r0, r3, #7
 8007746:	f100 81cf 	bmi.w	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800774a:	0259      	lsls	r1, r3, #9
 800774c:	f100 81ef 	bmi.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007750:	07df      	lsls	r7, r3, #31
 8007752:	f140 8088 	bpl.w	8007866 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007756:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007758:	2a28      	cmp	r2, #40	; 0x28
 800775a:	f200 81cf 	bhi.w	8007afc <HAL_RCCEx_PeriphCLKConfig+0x618>
 800775e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007762:	007e      	.short	0x007e
 8007764:	01cd01cd 	.word	0x01cd01cd
 8007768:	01cd01cd 	.word	0x01cd01cd
 800776c:	01cd01cd 	.word	0x01cd01cd
 8007770:	03d401cd 	.word	0x03d401cd
 8007774:	01cd01cd 	.word	0x01cd01cd
 8007778:	01cd01cd 	.word	0x01cd01cd
 800777c:	01cd01cd 	.word	0x01cd01cd
 8007780:	007701cd 	.word	0x007701cd
 8007784:	01cd01cd 	.word	0x01cd01cd
 8007788:	01cd01cd 	.word	0x01cd01cd
 800778c:	01cd01cd 	.word	0x01cd01cd
 8007790:	007e01cd 	.word	0x007e01cd
 8007794:	01cd01cd 	.word	0x01cd01cd
 8007798:	01cd01cd 	.word	0x01cd01cd
 800779c:	01cd01cd 	.word	0x01cd01cd
 80077a0:	007e01cd 	.word	0x007e01cd
 80077a4:	01cd01cd 	.word	0x01cd01cd
 80077a8:	01cd01cd 	.word	0x01cd01cd
 80077ac:	01cd01cd 	.word	0x01cd01cd
 80077b0:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 80077b4:	2ac0      	cmp	r2, #192	; 0xc0
 80077b6:	f43f aee2 	beq.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80077ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80077be:	f43f aede 	beq.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80077c2:	2601      	movs	r6, #1
 80077c4:	4635      	mov	r5, r6
 80077c6:	e6e4      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80077c8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80077cc:	f43f aef8 	beq.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80077d0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80077d4:	f43f aef4 	beq.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80077d8:	2601      	movs	r6, #1
 80077da:	4635      	mov	r5, r6
 80077dc:	e6fb      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 80077e4:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80077e8:	f43f af0c 	beq.w	8007604 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80077ec:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80077f0:	f43f af08 	beq.w	8007604 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80077f4:	2601      	movs	r6, #1
 80077f6:	4635      	mov	r5, r6
 80077f8:	e70f      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80077fa:	2a30      	cmp	r2, #48	; 0x30
 80077fc:	f43f af1e 	beq.w	800763c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8007800:	2601      	movs	r6, #1
 8007802:	4635      	mov	r5, r6
 8007804:	e724      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007806:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800780a:	f43f af37 	beq.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x198>
 800780e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007812:	f43f af33 	beq.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007816:	2601      	movs	r6, #1
 8007818:	4635      	mov	r5, r6
 800781a:	e739      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 800781c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007820:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8007824:	f43f af48 	beq.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007828:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800782c:	f43f af44 	beq.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007830:	2601      	movs	r6, #1
 8007832:	4635      	mov	r5, r6
 8007834:	e74a      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007836:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800783a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800783e:	f43f af5a 	beq.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007842:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007846:	f43f af56 	beq.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800784a:	2601      	movs	r6, #1
 800784c:	4635      	mov	r5, r6
 800784e:	e75d      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007850:	2101      	movs	r1, #1
 8007852:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007856:	f7ff fdc9 	bl	80073ec <RCCEx_PLL3_Config>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800785e:	2d00      	cmp	r5, #0
 8007860:	f000 82c0 	beq.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8007864:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007866:	0798      	lsls	r0, r3, #30
 8007868:	d516      	bpl.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800786a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800786c:	2a05      	cmp	r2, #5
 800786e:	f200 83e6 	bhi.w	800803e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8007872:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007876:	000d      	.short	0x000d
 8007878:	00060336 	.word	0x00060336
 800787c:	000d000d 	.word	0x000d000d
 8007880:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007882:	2101      	movs	r1, #1
 8007884:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007888:	f7ff fdb0 	bl	80073ec <RCCEx_PLL3_Config>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007890:	2d00      	cmp	r5, #0
 8007892:	f000 8279 	beq.w	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8007896:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007898:	0759      	lsls	r1, r3, #29
 800789a:	d517      	bpl.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800789c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80078a0:	2a05      	cmp	r2, #5
 80078a2:	f200 83c6 	bhi.w	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 80078a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80078aa:	000d      	.short	0x000d
 80078ac:	00060326 	.word	0x00060326
 80078b0:	000d000d 	.word	0x000d000d
 80078b4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078b6:	2101      	movs	r1, #1
 80078b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078bc:	f7ff fd96 	bl	80073ec <RCCEx_PLL3_Config>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	f000 826a 	beq.w	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80078ca:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078cc:	069a      	lsls	r2, r3, #26
 80078ce:	d51d      	bpl.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80078d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80078d8:	f000 8340 	beq.w	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80078dc:	f200 81af 	bhi.w	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80078e0:	b14a      	cbz	r2, 80078f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 80078e2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80078e6:	f040 81b4 	bne.w	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ea:	2100      	movs	r1, #0
 80078ec:	1d20      	adds	r0, r4, #4
 80078ee:	f7ff fd01 	bl	80072f4 <RCCEx_PLL2_Config>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f040 823c 	bne.w	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fc:	49b3      	ldr	r1, [pc, #716]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80078fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007902:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007904:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007908:	4302      	orrs	r2, r0
 800790a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800790c:	065f      	lsls	r7, r3, #25
 800790e:	d51d      	bpl.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007910:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007914:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007918:	f000 8334 	beq.w	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800791c:	f200 817f 	bhi.w	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007920:	b14a      	cbz	r2, 8007936 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007922:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007926:	f040 8184 	bne.w	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800792a:	2100      	movs	r1, #0
 800792c:	1d20      	adds	r0, r4, #4
 800792e:	f7ff fce1 	bl	80072f4 <RCCEx_PLL2_Config>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007936:	2d00      	cmp	r5, #0
 8007938:	f040 8221 	bne.w	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800793c:	49a3      	ldr	r1, [pc, #652]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800793e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8007942:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007944:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007948:	4302      	orrs	r2, r0
 800794a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800794c:	0618      	lsls	r0, r3, #24
 800794e:	d51d      	bpl.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007950:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8007954:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007958:	f000 831f 	beq.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800795c:	f200 814f 	bhi.w	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8007960:	b14a      	cbz	r2, 8007976 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007962:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007966:	f040 8154 	bne.w	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800796a:	2100      	movs	r1, #0
 800796c:	1d20      	adds	r0, r4, #4
 800796e:	f7ff fcc1 	bl	80072f4 <RCCEx_PLL2_Config>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007976:	2d00      	cmp	r5, #0
 8007978:	f040 81f7 	bne.w	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800797c:	4993      	ldr	r1, [pc, #588]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800797e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007982:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007984:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007988:	4302      	orrs	r2, r0
 800798a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800798c:	0719      	lsls	r1, r3, #28
 800798e:	d50b      	bpl.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007990:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007994:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007998:	f000 831e 	beq.w	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800799c:	488b      	ldr	r0, [pc, #556]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800799e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80079a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80079a4:	430a      	orrs	r2, r1
 80079a6:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079a8:	06da      	lsls	r2, r3, #27
 80079aa:	d50b      	bpl.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80079ac:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80079b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80079b4:	f000 8305 	beq.w	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079b8:	4884      	ldr	r0, [pc, #528]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80079ba:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80079bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80079c0:	430a      	orrs	r2, r1
 80079c2:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079c4:	031f      	lsls	r7, r3, #12
 80079c6:	d50e      	bpl.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80079c8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80079cc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80079d0:	f000 816b 	beq.w	8007caa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80079d4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80079d8:	f000 816e 	beq.w	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80079dc:	2900      	cmp	r1, #0
 80079de:	f000 82e7 	beq.w	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80079e2:	2601      	movs	r6, #1
 80079e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079e6:	0358      	lsls	r0, r3, #13
 80079e8:	d50f      	bpl.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 80079ea:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80079ee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80079f2:	f000 8144 	beq.w	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80079f6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80079fa:	f000 8147 	beq.w	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80079fe:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007a02:	f000 82a2 	beq.w	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007a06:	2601      	movs	r6, #1
 8007a08:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a0a:	03d9      	lsls	r1, r3, #15
 8007a0c:	d517      	bpl.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007a0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	f000 8288 	beq.w	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8007a16:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007a1a:	f040 817a 	bne.w	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a1e:	2102      	movs	r1, #2
 8007a20:	1d20      	adds	r0, r4, #4
 8007a22:	f7ff fc67 	bl	80072f4 <RCCEx_PLL2_Config>
 8007a26:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	f040 81e5 	bne.w	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a30:	4966      	ldr	r1, [pc, #408]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a32:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007a34:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a3a:	4302      	orrs	r2, r0
 8007a3c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a3e:	009a      	lsls	r2, r3, #2
 8007a40:	f100 815c 	bmi.w	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a44:	039f      	lsls	r7, r3, #14
 8007a46:	d43f      	bmi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8007a48:	1e30      	subs	r0, r6, #0
 8007a4a:	bf18      	it	ne
 8007a4c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a4e:	02de      	lsls	r6, r3, #11
 8007a50:	d506      	bpl.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a52:	495e      	ldr	r1, [pc, #376]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a54:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8007a56:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007a58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007a5c:	432a      	orrs	r2, r5
 8007a5e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a60:	00dd      	lsls	r5, r3, #3
 8007a62:	d507      	bpl.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a64:	4959      	ldr	r1, [pc, #356]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a66:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8007a6a:	690a      	ldr	r2, [r1, #16]
 8007a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a70:	432a      	orrs	r2, r5
 8007a72:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a74:	0299      	lsls	r1, r3, #10
 8007a76:	d506      	bpl.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a78:	4954      	ldr	r1, [pc, #336]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a7a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8007a7c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007a7e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a82:	432a      	orrs	r2, r5
 8007a84:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a86:	005a      	lsls	r2, r3, #1
 8007a88:	d509      	bpl.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a8a:	4a50      	ldr	r2, [pc, #320]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a8c:	6911      	ldr	r1, [r2, #16]
 8007a8e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007a92:	6111      	str	r1, [r2, #16]
 8007a94:	6911      	ldr	r1, [r2, #16]
 8007a96:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8007a9a:	4329      	orrs	r1, r5
 8007a9c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da06      	bge.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007aa2:	494a      	ldr	r1, [pc, #296]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007aa4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007aa6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007aac:	432a      	orrs	r2, r5
 8007aae:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	d507      	bpl.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ab4:	4a45      	ldr	r2, [pc, #276]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007ab6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007aba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007abc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007ac8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007acc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007ad0:	f000 8232 	beq.w	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007ad4:	f240 80c3 	bls.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8007ad8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8007adc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007ae0:	f000 80c0 	beq.w	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e7b2      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8007ae8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007aea:	2a03      	cmp	r2, #3
 8007aec:	f200 82aa 	bhi.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8007af0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007af4:	018a0010 	.word	0x018a0010
 8007af8:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8007afc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007afe:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b00:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b02:	f57f aec9 	bpl.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8007b06:	e6b0      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b08:	2102      	movs	r1, #2
 8007b0a:	1d20      	adds	r0, r4, #4
 8007b0c:	f7ff fbf2 	bl	80072f4 <RCCEx_PLL2_Config>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b14:	2d00      	cmp	r5, #0
 8007b16:	f040 8152 	bne.w	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b1a:	492c      	ldr	r1, [pc, #176]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b1c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007b1e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007b20:	f022 0203 	bic.w	r2, r2, #3
 8007b24:	4302      	orrs	r2, r0
 8007b26:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b28:	0259      	lsls	r1, r3, #9
 8007b2a:	f57f ae11 	bpl.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b2e:	4b28      	ldr	r3, [pc, #160]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007b30:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b32:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b38:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007b3a:	f7fd fd3f 	bl	80055bc <HAL_GetTick>
 8007b3e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b42:	f7fd fd3b 	bl	80055bc <HAL_GetTick>
 8007b46:	1bc0      	subs	r0, r0, r7
 8007b48:	2864      	cmp	r0, #100	; 0x64
 8007b4a:	f200 81e8 	bhi.w	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b52:	05da      	lsls	r2, r3, #23
 8007b54:	d5f5      	bpl.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	f040 8267 	bne.w	800802a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b5c:	4a1b      	ldr	r2, [pc, #108]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b5e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007b62:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007b64:	4059      	eors	r1, r3
 8007b66:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007b6a:	d00b      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b6c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b6e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b70:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b74:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007b78:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8007b7c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007b80:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007b82:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b88:	f000 8231 	beq.w	8007fee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b8c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007b90:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007b94:	f000 823f 	beq.w	8008016 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8007b98:	490c      	ldr	r1, [pc, #48]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b9a:	690a      	ldr	r2, [r1, #16]
 8007b9c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007ba0:	610a      	str	r2, [r1, #16]
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007baa:	430b      	orrs	r3, r1
 8007bac:	6713      	str	r3, [r2, #112]	; 0x70
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	e5ce      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bb2:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	f040 80b5 	bne.w	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bba:	4904      	ldr	r1, [pc, #16]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bbe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007bc0:	f022 0207 	bic.w	r2, r2, #7
 8007bc4:	4302      	orrs	r2, r0
 8007bc6:	650a      	str	r2, [r1, #80]	; 0x50
 8007bc8:	e4c5      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007bca:	bf00      	nop
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	1d20      	adds	r0, r4, #4
 8007bd8:	f7ff fb8c 	bl	80072f4 <RCCEx_PLL2_Config>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	f040 810c 	bne.w	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007be6:	49b9      	ldr	r1, [pc, #740]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007be8:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007bea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007bec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bf2:	ea42 0200 	orr.w	r2, r2, r0
 8007bf6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bf8:	f57f ada4 	bpl.w	8007744 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007bfc:	e594      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007bfe:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007c02:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007c06:	f43f aeb6 	beq.w	8007976 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007c0a:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8007c0e:	f43f aeb2 	beq.w	8007976 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007c12:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c14:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c16:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c18:	f57f aec6 	bpl.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8007c1c:	e6b8      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c1e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8007c22:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007c26:	f43f ae86 	beq.w	8007936 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007c2a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007c2e:	f43f ae82 	beq.w	8007936 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007c32:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c34:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c36:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c38:	f57f aea8 	bpl.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007c3c:	e688      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c3e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8007c42:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007c46:	f43f ae56 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007c4a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007c4e:	f43f ae52 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007c52:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c54:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c56:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c58:	f57f ae78 	bpl.w	800794c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007c5c:	e658      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	f47f af40 	bne.w	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	f47f af3d 	bne.w	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c6a:	4d98      	ldr	r5, [pc, #608]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c6c:	1e30      	subs	r0, r6, #0
 8007c6e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007c70:	bf18      	it	ne
 8007c72:	2001      	movne	r0, #1
 8007c74:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	656a      	str	r2, [r5, #84]	; 0x54
 8007c7c:	e6e7      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c7e:	2101      	movs	r1, #1
 8007c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c84:	f7ff fbb2 	bl	80073ec <RCCEx_PLL3_Config>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	f040 80a4 	bne.w	8007dda <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c92:	498e      	ldr	r1, [pc, #568]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007c98:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007c9a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007c9e:	4302      	orrs	r2, r0
 8007ca0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ca2:	03d9      	lsls	r1, r3, #15
 8007ca4:	f57f aecb 	bpl.w	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007ca8:	e6b1      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007caa:	2102      	movs	r1, #2
 8007cac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007cb0:	f7ff fb9c 	bl	80073ec <RCCEx_PLL3_Config>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	f040 8089 	bne.w	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cbe:	4983      	ldr	r1, [pc, #524]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cc0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007cc4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007cc6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007cca:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ccc:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cce:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cd0:	f57f ae9b 	bpl.w	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007cd4:	e689      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	1d20      	adds	r0, r4, #4
 8007cda:	f7ff fb0b 	bl	80072f4 <RCCEx_PLL2_Config>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ce2:	2d00      	cmp	r5, #0
 8007ce4:	d16f      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ce6:	4979      	ldr	r1, [pc, #484]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007ce8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007cea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cf0:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cf2:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cf4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cf6:	f57f ad28 	bpl.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007cfa:	e6f5      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d02:	f7ff fb73 	bl	80073ec <RCCEx_PLL3_Config>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f43f ae9b 	beq.w	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8007d0e:	2601      	movs	r6, #1
 8007d10:	e698      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007d12:	2601      	movs	r6, #1
 8007d14:	4635      	mov	r5, r6
 8007d16:	e692      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007d18:	462e      	mov	r6, r5
 8007d1a:	e47e      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d1c:	462e      	mov	r6, r5
 8007d1e:	e438      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8007d20:	462e      	mov	r6, r5
 8007d22:	e4b5      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8007d24:	462e      	mov	r6, r5
 8007d26:	e416      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007d28:	462e      	mov	r6, r5
 8007d2a:	e454      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d2c:	4967      	ldr	r1, [pc, #412]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d34:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007d36:	e443      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d38:	4964      	ldr	r1, [pc, #400]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d40:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007d42:	e41c      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4961      	ldr	r1, [pc, #388]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d46:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d4c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007d4e:	e459      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d50:	495e      	ldr	r1, [pc, #376]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d58:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007d5a:	e48f      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5c:	485b      	ldr	r0, [pc, #364]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007d60:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007d64:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007d66:	f7ff bbda 	b.w	800751e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d6a:	0719      	lsls	r1, r3, #28
 8007d6c:	462e      	mov	r6, r5
 8007d6e:	f57f ae1b 	bpl.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8007d72:	e60d      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d74:	065f      	lsls	r7, r3, #25
 8007d76:	462e      	mov	r6, r5
 8007d78:	f57f ade8 	bpl.w	800794c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007d7c:	e5c8      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d7e:	0618      	lsls	r0, r3, #24
 8007d80:	462e      	mov	r6, r5
 8007d82:	f57f ae03 	bpl.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d86:	e5e3      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d88:	4950      	ldr	r1, [pc, #320]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d8a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007d8c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007d8e:	f022 0207 	bic.w	r2, r2, #7
 8007d92:	4302      	orrs	r2, r0
 8007d94:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d96:	0759      	lsls	r1, r3, #29
 8007d98:	f57f ad98 	bpl.w	80078cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007d9c:	e57e      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d9e:	494b      	ldr	r1, [pc, #300]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007da0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8007da4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007da6:	f022 0207 	bic.w	r2, r2, #7
 8007daa:	4302      	orrs	r2, r0
 8007dac:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dae:	069a      	lsls	r2, r3, #26
 8007db0:	f57f adac 	bpl.w	800790c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007db4:	e58c      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007db6:	462e      	mov	r6, r5
 8007db8:	e44a      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007dba:	462e      	mov	r6, r5
 8007dbc:	e486      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007dbe:	462e      	mov	r6, r5
 8007dc0:	e4c3      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007dc2:	462e      	mov	r6, r5
 8007dc4:	e4a2      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007dc6:	01d8      	lsls	r0, r3, #7
 8007dc8:	462e      	mov	r6, r5
 8007dca:	f57f acbe 	bpl.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007dce:	e68b      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dd0:	0358      	lsls	r0, r3, #13
 8007dd2:	462e      	mov	r6, r5
 8007dd4:	f57f ae19 	bpl.w	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007dd8:	e607      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dda:	03d9      	lsls	r1, r3, #15
 8007ddc:	462e      	mov	r6, r5
 8007dde:	f57f ae2e 	bpl.w	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007de2:	e614      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007de4:	4939      	ldr	r1, [pc, #228]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007de6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007de8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007dea:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007dee:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007df0:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007df2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007df4:	f57f ad50 	bpl.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8007df8:	e537      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007dfa:	462e      	mov	r6, r5
 8007dfc:	e61f      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dfe:	041f      	lsls	r7, r3, #16
 8007e00:	462e      	mov	r6, r5
 8007e02:	f57f ac9f 	bpl.w	8007744 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007e06:	e48f      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e08:	4930      	ldr	r1, [pc, #192]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007e0a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007e0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e10:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	d1d3      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007e16:	e680      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e1e:	f7ff fae5 	bl	80073ec <RCCEx_PLL3_Config>
 8007e22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	d1c7      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8007e2a:	e448      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e32:	f7ff fadb 	bl	80073ec <RCCEx_PLL3_Config>
 8007e36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	d1c1      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007e3e:	e45d      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e40:	2102      	movs	r1, #2
 8007e42:	1d20      	adds	r0, r4, #4
 8007e44:	f7ff fa56 	bl	80072f4 <RCCEx_PLL2_Config>
 8007e48:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	d1b2      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8007e50:	f7ff bbf7 	b.w	8007642 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e54:	2100      	movs	r1, #0
 8007e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e5a:	f7ff fac7 	bl	80073ec <RCCEx_PLL3_Config>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	4605      	mov	r5, r0
      break;
 8007e62:	f7ff bbcf 	b.w	8007604 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e66:	2100      	movs	r1, #0
 8007e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e6c:	f7ff fabe 	bl	80073ec <RCCEx_PLL3_Config>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	4605      	mov	r5, r0
      break;
 8007e74:	f7ff bba4 	b.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e7e:	f7ff fab5 	bl	80073ec <RCCEx_PLL3_Config>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	4605      	mov	r5, r0
      break;
 8007e86:	f7ff bbf9 	b.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	3024      	adds	r0, #36	; 0x24
 8007e8e:	f7ff faad 	bl	80073ec <RCCEx_PLL3_Config>
 8007e92:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	f43f ab40 	beq.w	800751a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	f7ff bb46 	b.w	800752c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ea6:	f7ff faa1 	bl	80073ec <RCCEx_PLL3_Config>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	4605      	mov	r5, r0
      break;
 8007eae:	e681      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb0:	4906      	ldr	r1, [pc, #24]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8007eb2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007eb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007eba:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007ebc:	e67a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	1d20      	adds	r0, r4, #4
 8007ec2:	f7ff fa17 	bl	80072f4 <RCCEx_PLL2_Config>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	4605      	mov	r5, r0
      break;
 8007eca:	e673      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007ecc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ed6:	f7ff fa89 	bl	80073ec <RCCEx_PLL3_Config>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	4605      	mov	r5, r0
      break;
 8007ede:	f7ff bb4e 	b.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	1d20      	adds	r0, r4, #4
 8007ee6:	f7ff fa05 	bl	80072f4 <RCCEx_PLL2_Config>
 8007eea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	f47f acd1 	bne.w	8007896 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8007ef4:	e748      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	1d20      	adds	r0, r4, #4
 8007efa:	f7ff f9fb 	bl	80072f4 <RCCEx_PLL2_Config>
 8007efe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	f47f ace1 	bne.w	80078ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007f08:	e749      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	1d20      	adds	r0, r4, #4
 8007f0e:	f7ff f9f1 	bl	80072f4 <RCCEx_PLL2_Config>
 8007f12:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	2d00      	cmp	r5, #0
 8007f18:	f47f aca4 	bne.w	8007864 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8007f1c:	e762      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8007f1e:	2603      	movs	r6, #3
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	4635      	mov	r5, r6
 8007f24:	e414      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f26:	4949      	ldr	r1, [pc, #292]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007f28:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f2e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	f47f af62 	bne.w	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007f36:	e57b      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f38:	4844      	ldr	r0, [pc, #272]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007f3a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007f3c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007f40:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	f47f adce 	bne.w	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8007f48:	e68f      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4a:	4940      	ldr	r1, [pc, #256]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007f4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f52:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	f47f af40 	bne.w	8007dda <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007f5a:	e69a      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f62:	f7ff fa43 	bl	80073ec <RCCEx_PLL3_Config>
 8007f66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f47f af02 	bne.w	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8007f70:	e4c4      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f72:	4936      	ldr	r1, [pc, #216]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007f74:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f7a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	f47f af22 	bne.w	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f82:	e6b0      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f84:	2102      	movs	r1, #2
 8007f86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f8a:	f7ff fa2f 	bl	80073ec <RCCEx_PLL3_Config>
 8007f8e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	f47f aef3 	bne.w	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007f98:	e4d0      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fa0:	f7ff fa24 	bl	80073ec <RCCEx_PLL3_Config>
 8007fa4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	f47f aede 	bne.w	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8007fae:	e4e5      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb0:	1d20      	adds	r0, r4, #4
 8007fb2:	f7ff f99f 	bl	80072f4 <RCCEx_PLL2_Config>
 8007fb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	f47f af08 	bne.w	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007fc0:	e67d      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fc8:	f7ff fa10 	bl	80073ec <RCCEx_PLL3_Config>
 8007fcc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007fd0:	b100      	cbz	r0, 8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8007fd2:	2601      	movs	r6, #1
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	e4ef      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fd8:	2102      	movs	r1, #2
 8007fda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fde:	f7ff fa05 	bl	80073ec <RCCEx_PLL3_Config>
 8007fe2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007fe6:	b100      	cbz	r0, 8007fea <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8007fe8:	2601      	movs	r6, #1
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	e4d6      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8007fee:	f7fd fae5 	bl	80055bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007ffa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ffc:	e004      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffe:	f7fd fadd 	bl	80055bc <HAL_GetTick>
 8008002:	1bc0      	subs	r0, r0, r7
 8008004:	4548      	cmp	r0, r9
 8008006:	d88a      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008008:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800800c:	079b      	lsls	r3, r3, #30
 800800e:	d5f6      	bpl.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008010:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008014:	e5ba      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008016:	480d      	ldr	r0, [pc, #52]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008018:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800801a:	6901      	ldr	r1, [r0, #16]
 800801c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008020:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008024:	430a      	orrs	r2, r1
 8008026:	6102      	str	r2, [r0, #16]
 8008028:	e5bb      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800802a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800802c:	462e      	mov	r6, r5
 800802e:	f7ff bb8f 	b.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008032:	2601      	movs	r6, #1
 8008034:	4635      	mov	r5, r6
 8008036:	e449      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008038:	2601      	movs	r6, #1
 800803a:	f7ff ba8b 	b.w	8007554 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800803e:	2601      	movs	r6, #1
 8008040:	4635      	mov	r5, r6
 8008042:	e429      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8008044:	2601      	movs	r6, #1
 8008046:	4635      	mov	r5, r6
 8008048:	f7ff bb7f 	b.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800804c:	58024400 	.word	0x58024400
 8008050:	00ffffcf 	.word	0x00ffffcf

08008054 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop

08008058 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8008058:	b318      	cbz	r0, 80080a2 <HAL_SDRAM_Init+0x4a>
{
 800805a:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800805c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008060:	460d      	mov	r5, r1
 8008062:	4604      	mov	r4, r0
 8008064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008068:	b1b3      	cbz	r3, 8008098 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800806a:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800806c:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800806e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008072:	f851 0b04 	ldr.w	r0, [r1], #4
 8008076:	f000 f851 	bl	800811c <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800807a:	4629      	mov	r1, r5
 800807c:	e9d4 0200 	ldrd	r0, r2, [r4]
 8008080:	f000 f888 	bl	8008194 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8008084:	4a08      	ldr	r2, [pc, #32]	; (80080a8 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008086:	2101      	movs	r1, #1
  return HAL_OK;
 8008088:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800808a:	6813      	ldr	r3, [r2, #0]
 800808c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008090:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008092:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8008096:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008098:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800809c:	f7ff ffda 	bl	8008054 <HAL_SDRAM_MspInit>
 80080a0:	e7e3      	b.n	800806a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80080a2:	2001      	movs	r0, #1
}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	52004000 	.word	0x52004000

080080ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80080ac:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80080ae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80080b2:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80080b4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80080b6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80080b8:	d004      	beq.n	80080c4 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80080ba:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80080be:	2c01      	cmp	r4, #1
 80080c0:	d001      	beq.n	80080c6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80080c2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080c6:	2302      	movs	r3, #2
 80080c8:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80080ca:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080cc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80080d0:	f000 f8ac 	bl	800822c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d003      	beq.n	80080e2 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 80080da:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 80080dc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80080e2:	2305      	movs	r3, #5
  return HAL_OK;
 80080e4:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80080e6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80080f2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	b2d8      	uxtb	r0, r3
 80080f8:	d005      	beq.n	8008106 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80080fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	b2dd      	uxtb	r5, r3
 8008102:	d001      	beq.n	8008108 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8008104:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8008106:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008108:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800810a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800810c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008110:	f000 f8a2 	bl	8008258 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8008114:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008116:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800811a:	bd38      	pop	{r3, r4, r5, pc}

0800811c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800811c:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800811e:	6802      	ldr	r2, [r0, #0]
{
 8008120:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008122:	b9c3      	cbnz	r3, 8008156 <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008124:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008128:	684c      	ldr	r4, [r1, #4]
 800812a:	698e      	ldr	r6, [r1, #24]
 800812c:	4013      	ands	r3, r2
 800812e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008132:	4323      	orrs	r3, r4
 8008134:	690c      	ldr	r4, [r1, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	694a      	ldr	r2, [r1, #20]
 800813a:	432b      	orrs	r3, r5
 800813c:	69cd      	ldr	r5, [r1, #28]
 800813e:	4323      	orrs	r3, r4
 8008140:	4313      	orrs	r3, r2
 8008142:	4333      	orrs	r3, r6
 8008144:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8008148:	432b      	orrs	r3, r5
 800814a:	4323      	orrs	r3, r4
 800814c:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800814e:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008150:	6003      	str	r3, [r0, #0]
}
 8008152:	2000      	movs	r0, #0
 8008154:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008156:	69cb      	ldr	r3, [r1, #28]
 8008158:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800815c:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800815e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008162:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 8008166:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008168:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800816a:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800816c:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800816e:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008170:	6842      	ldr	r2, [r0, #4]
 8008172:	4013      	ands	r3, r2
 8008174:	432b      	orrs	r3, r5
 8008176:	690d      	ldr	r5, [r1, #16]
 8008178:	4323      	orrs	r3, r4
 800817a:	4333      	orrs	r3, r6
 800817c:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8008180:	432b      	orrs	r3, r5
 8008182:	4323      	orrs	r3, r4
 8008184:	4313      	orrs	r3, r2
}
 8008186:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008188:	6043      	str	r3, [r0, #4]
}
 800818a:	2000      	movs	r0, #0
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	ffff8000 	.word	0xffff8000

08008194 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008194:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008196:	bb0a      	cbnz	r2, 80081dc <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008198:	684c      	ldr	r4, [r1, #4]
 800819a:	6882      	ldr	r2, [r0, #8]
 800819c:	680d      	ldr	r5, [r1, #0]
 800819e:	1e63      	subs	r3, r4, #1
 80081a0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80081a4:	688c      	ldr	r4, [r1, #8]
 80081a6:	1e6e      	subs	r6, r5, #1
 80081a8:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80081ac:	1e65      	subs	r5, r4, #1
 80081ae:	68cc      	ldr	r4, [r1, #12]
 80081b0:	4333      	orrs	r3, r6
 80081b2:	690a      	ldr	r2, [r1, #16]
 80081b4:	1e66      	subs	r6, r4, #1
 80081b6:	694c      	ldr	r4, [r1, #20]
 80081b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80081bc:	1e55      	subs	r5, r2, #1
 80081be:	698a      	ldr	r2, [r1, #24]
 80081c0:	1e61      	subs	r1, r4, #1
 80081c2:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80081c6:	3a01      	subs	r2, #1
 80081c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80081cc:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80081d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80081d4:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081d6:	6083      	str	r3, [r0, #8]
}
 80081d8:	2000      	movs	r0, #0
 80081da:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081dc:	6882      	ldr	r2, [r0, #8]
 80081de:	68cb      	ldr	r3, [r1, #12]
 80081e0:	4c11      	ldr	r4, [pc, #68]	; (8008228 <FMC_SDRAM_Timing_Init+0x94>)
 80081e2:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081e4:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081e6:	4014      	ands	r4, r2
 80081e8:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081ea:	1e5e      	subs	r6, r3, #1
 80081ec:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081ee:	3a01      	subs	r2, #1
 80081f0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081f4:	688d      	ldr	r5, [r1, #8]
 80081f6:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081f8:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081fc:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081fe:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008200:	68c2      	ldr	r2, [r0, #12]
 8008202:	690c      	ldr	r4, [r1, #16]
 8008204:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008208:	6989      	ldr	r1, [r1, #24]
 800820a:	3c01      	subs	r4, #1
 800820c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8008210:	3901      	subs	r1, #1
 8008212:	4313      	orrs	r3, r2
 8008214:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8008218:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800821c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8008220:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008222:	60c3      	str	r3, [r0, #12]
}
 8008224:	2000      	movs	r0, #0
 8008226:	4770      	bx	lr
 8008228:	ff0f0fff 	.word	0xff0f0fff

0800822c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800822c:	b470      	push	{r4, r5, r6}
 800822e:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8008230:	68ce      	ldr	r6, [r1, #12]
 8008232:	4c08      	ldr	r4, [pc, #32]	; (8008254 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8008234:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8008236:	e9d1 3500 	ldrd	r3, r5, [r1]
 800823a:	6889      	ldr	r1, [r1, #8]
 800823c:	432b      	orrs	r3, r5
 800823e:	6915      	ldr	r5, [r2, #16]
 8008240:	3901      	subs	r1, #1
 8008242:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8008246:	402c      	ands	r4, r5
 8008248:	4323      	orrs	r3, r4
 800824a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800824e:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8008250:	6113      	str	r3, [r2, #16]
}
 8008252:	4770      	bx	lr
 8008254:	ffc00000 	.word	0xffc00000

08008258 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008258:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800825c:	2000      	movs	r0, #0
{
 800825e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008260:	6954      	ldr	r4, [r2, #20]
 8008262:	4023      	ands	r3, r4
}
 8008264:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008268:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800826c:	6151      	str	r1, [r2, #20]
}
 800826e:	4770      	bx	lr
 8008270:	ffffc001 	.word	0xffffc001

08008274 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8008274:	4603      	mov	r3, r0
 8008276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800827a:	4c15      	ldr	r4, [pc, #84]	; (80082d0 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800827c:	2500      	movs	r5, #0
 800827e:	4e15      	ldr	r6, [pc, #84]	; (80082d4 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8008280:	4628      	mov	r0, r5
 8008282:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8008286:	e9d3 7200 	ldrd	r7, r2, [r3]
 800828a:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800828e:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 8008292:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8008294:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8008298:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800829a:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800829c:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800829e:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 80082a2:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80082a6:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 80082aa:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80082ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80082b0:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80082b2:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80082b4:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80082b6:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80082b8:	6a23      	ldr	r3, [r4, #32]
 80082ba:	f106 0118 	add.w	r1, r6, #24
 80082be:	4628      	mov	r0, r5
 80082c0:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80082c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082c4:	f106 011c 	add.w	r1, r6, #28
 80082c8:	4628      	mov	r0, r5
}
 80082ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80082ce:	4718      	bx	r3
 80082d0:	24009278 	.word	0x24009278
 80082d4:	24009238 	.word	0x24009238

080082d8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 80082d8:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <UTIL_LCD_SetLayer+0x18>)
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	b133      	cbz	r3, 80082ee <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 80082e0:	4d04      	ldr	r5, [pc, #16]	; (80082f4 <UTIL_LCD_SetLayer+0x1c>)
 80082e2:	4604      	mov	r4, r0
 80082e4:	4601      	mov	r1, r0
 80082e6:	6928      	ldr	r0, [r5, #16]
 80082e8:	4798      	blx	r3
 80082ea:	b900      	cbnz	r0, 80082ee <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 80082ec:	60ec      	str	r4, [r5, #12]
    }
  }
}
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	24009278 	.word	0x24009278
 80082f4:	24009238 	.word	0x24009238

080082f8 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80082f8:	4a02      	ldr	r2, [pc, #8]	; (8008304 <UTIL_LCD_SetTextColor+0xc>)
 80082fa:	68d3      	ldr	r3, [r2, #12]
 80082fc:	015b      	lsls	r3, r3, #5
 80082fe:	50d0      	str	r0, [r2, r3]
}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	24009238 	.word	0x24009238

08008308 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <UTIL_LCD_SetBackColor+0xc>)
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008310:	6058      	str	r0, [r3, #4]
}
 8008312:	4770      	bx	lr
 8008314:	24009238 	.word	0x24009238

08008318 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <UTIL_LCD_SetFont+0xc>)
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008320:	6098      	str	r0, [r3, #8]
}
 8008322:	4770      	bx	lr
 8008324:	24009238 	.word	0x24009238

08008328 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <UTIL_LCD_GetFont+0xc>)
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 8008330:	6898      	ldr	r0, [r3, #8]
 8008332:	4770      	bx	lr
 8008334:	24009238 	.word	0x24009238

08008338 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800833c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800848c <UTIL_LCD_DisplayChar+0x154>
{
 8008340:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8008342:	3a20      	subs	r2, #32
{
 8008344:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8008346:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800834a:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 800834e:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8008352:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8008354:	8886      	ldrh	r6, [r0, #4]
 8008356:	88c5      	ldrh	r5, [r0, #6]
 8008358:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800835a:	6804      	ldr	r4, [r0, #0]
 800835c:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8008360:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8008362:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8008366:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 800836a:	9303      	str	r3, [sp, #12]

  for(i = 0; i < height; i++)
 800836c:	2d00      	cmp	r5, #0
 800836e:	f000 8085 	beq.w	800847c <UTIL_LCD_DisplayChar+0x144>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8008372:	08fb      	lsrs	r3, r7, #3
 8008374:	4414      	add	r4, r2
 8008376:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008490 <UTIL_LCD_DisplayChar+0x158>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 800837a:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	194b      	adds	r3, r1, r5
 8008382:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 8008384:	9904      	ldr	r1, [sp, #16]
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	ab14      	add	r3, sp, #80	; 0x50
 800838a:	2901      	cmp	r1, #1
 800838c:	f105 32ff 	add.w	r2, r5, #4294967295
 8008390:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008394:	9305      	str	r3, [sp, #20]
 8008396:	ab08      	add	r3, sp, #32
 8008398:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800839c:	9306      	str	r3, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 800839e:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 80083a0:	d038      	beq.n	8008414 <UTIL_LCD_DisplayChar+0xdc>
 80083a2:	2902      	cmp	r1, #2
 80083a4:	d06d      	beq.n	8008482 <UTIL_LCD_DisplayChar+0x14a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80083a6:	7861      	ldrb	r1, [r4, #1]
 80083a8:	7827      	ldrb	r7, [r4, #0]
 80083aa:	0209      	lsls	r1, r1, #8
 80083ac:	78a0      	ldrb	r0, [r4, #2]
 80083ae:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80083b2:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80083b4:	4443      	add	r3, r8
 80083b6:	69d8      	ldr	r0, [r3, #28]
 80083b8:	2802      	cmp	r0, #2
 80083ba:	d030      	beq.n	800841e <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 80083bc:	b196      	cbz	r6, 80083e4 <UTIL_LCD_DisplayChar+0xac>
 80083be:	9803      	ldr	r0, [sp, #12]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80083c0:	f8d3 e000 	ldr.w	lr, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80083c4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80083c8:	3801      	subs	r0, #1
 80083ca:	ab14      	add	r3, sp, #80	; 0x50
        if(line & (1 << (width- j + offset- 1)))
 80083cc:	fa09 f700 	lsl.w	r7, r9, r0
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80083d0:	3801      	subs	r0, #1
 80083d2:	420f      	tst	r7, r1
 80083d4:	bf14      	ite	ne
 80083d6:	4677      	movne	r7, lr
 80083d8:	4667      	moveq	r7, ip
 80083da:	f843 7b04 	str.w	r7, [r3], #4
      for (j = 0; j < width; j++)
 80083de:	9f05      	ldr	r7, [sp, #20]
 80083e0:	429f      	cmp	r7, r3
 80083e2:	d1f3      	bne.n	80083cc <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80083e4:	ab14      	add	r3, sp, #80	; 0x50
 80083e6:	f8da 7004 	ldr.w	r7, [sl, #4]
 80083ea:	4659      	mov	r1, fp
 80083ec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80083f0:	e9cd 6900 	strd	r6, r9, [sp]
 80083f4:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	441c      	add	r4, r3
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	429d      	cmp	r5, r3
 80083fe:	d03d      	beq.n	800847c <UTIL_LCD_DisplayChar+0x144>
    switch(((width + 7)/8))
 8008400:	9904      	ldr	r1, [sp, #16]
 8008402:	3501      	adds	r5, #1
 8008404:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008408:	2901      	cmp	r1, #1
 800840a:	f105 32ff 	add.w	r2, r5, #4294967295
 800840e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008412:	d1c6      	bne.n	80083a2 <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8008414:	4443      	add	r3, r8
      line =  pchar[0];
 8008416:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8008418:	69d8      	ldr	r0, [r3, #28]
 800841a:	2802      	cmp	r0, #2
 800841c:	d1ce      	bne.n	80083bc <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 800841e:	b1fe      	cbz	r6, 8008460 <UTIL_LCD_DisplayChar+0x128>
 8008420:	9803      	ldr	r0, [sp, #12]
 8008422:	f10d 0c20 	add.w	ip, sp, #32
 8008426:	ee07 2a90 	vmov	s15, r2
 800842a:	f100 3eff 	add.w	lr, r0, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 800842e:	fa09 f00e 	lsl.w	r0, r9, lr
 8008432:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008436:	4208      	tst	r0, r1
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8008438:	bf14      	ite	ne
 800843a:	681f      	ldrne	r7, [r3, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800843c:	685f      	ldreq	r7, [r3, #4]
 800843e:	0cfa      	lsrs	r2, r7, #19
 8008440:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8008444:	097f      	lsrs	r7, r7, #5
 8008446:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
      for (j = 0; j < width; j++)
 800844a:	9a06      	ldr	r2, [sp, #24]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800844c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8008450:	4338      	orrs	r0, r7
 8008452:	b280      	uxth	r0, r0
 8008454:	f82c 0b02 	strh.w	r0, [ip], #2
      for (j = 0; j < width; j++)
 8008458:	4594      	cmp	ip, r2
 800845a:	d1e8      	bne.n	800842e <UTIL_LCD_DisplayChar+0xf6>
 800845c:	ee17 2a90 	vmov	r2, s15
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8008460:	ab08      	add	r3, sp, #32
 8008462:	f8da 7004 	ldr.w	r7, [sl, #4]
 8008466:	4659      	mov	r1, fp
 8008468:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800846c:	e9cd 6900 	strd	r6, r9, [sp]
 8008470:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	441c      	add	r4, r3
 8008476:	9b07      	ldr	r3, [sp, #28]
 8008478:	429d      	cmp	r5, r3
 800847a:	d1c1      	bne.n	8008400 <UTIL_LCD_DisplayChar+0xc8>
}
 800847c:	b02d      	add	sp, #180	; 0xb4
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 8008482:	8821      	ldrh	r1, [r4, #0]
 8008484:	ba49      	rev16	r1, r1
 8008486:	b289      	uxth	r1, r1
      break;
 8008488:	e794      	b.n	80083b4 <UTIL_LCD_DisplayChar+0x7c>
 800848a:	bf00      	nop
 800848c:	24009238 	.word	0x24009238
 8008490:	24009278 	.word	0x24009278

08008494 <UTIL_LCD_DisplayStringAt>:
{
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 800849a:	4611      	mov	r1, r2
{
 800849c:	4616      	mov	r6, r2
 800849e:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 80084a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	d041      	beq.n	800852c <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 80084a8:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	3001      	adds	r0, #1
 80084b0:	2c00      	cmp	r4, #0
 80084b2:	d1fa      	bne.n	80084aa <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80084b4:	4f1e      	ldr	r7, [pc, #120]	; (8008530 <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 80084b6:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80084b8:	68fc      	ldr	r4, [r7, #12]
 80084ba:	6979      	ldr	r1, [r7, #20]
 80084bc:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 80084c0:	68a4      	ldr	r4, [r4, #8]
 80084c2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80084c6:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 80084ca:	d029      	beq.n	8008520 <UTIL_LCD_DisplayStringAt+0x8c>
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d103      	bne.n	80084d8 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80084d0:	1a20      	subs	r0, r4, r0
 80084d2:	fb0c f000 	mul.w	r0, ip, r0
 80084d6:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80084d8:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80084da:	1e68      	subs	r0, r5, #1
 80084dc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 80084e0:	4298      	cmp	r0, r3
 80084e2:	bf88      	it	hi
 80084e4:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80084e6:	458c      	cmp	ip, r1
 80084e8:	d818      	bhi.n	800851c <UTIL_LCD_DisplayStringAt+0x88>
 80084ea:	b1ba      	cbz	r2, 800851c <UTIL_LCD_DisplayStringAt+0x88>
 80084ec:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80084f0:	4628      	mov	r0, r5
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7ff ff20 	bl	8008338 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80084fe:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8008500:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8008504:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8008508:	6880      	ldr	r0, [r0, #8]
 800850a:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800850c:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8008510:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8008512:	b29b      	uxth	r3, r3
 8008514:	429c      	cmp	r4, r3
 8008516:	d801      	bhi.n	800851c <UTIL_LCD_DisplayStringAt+0x88>
 8008518:	2a00      	cmp	r2, #0
 800851a:	d1e9      	bne.n	80084f0 <UTIL_LCD_DisplayStringAt+0x5c>
}
 800851c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8008520:	1a20      	subs	r0, r4, r0
 8008522:	fb0c f000 	mul.w	r0, ip, r0
 8008526:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 800852a:	e7d5      	b.n	80084d8 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 800852c:	4610      	mov	r0, r2
 800852e:	e7c1      	b.n	80084b4 <UTIL_LCD_DisplayStringAt+0x20>
 8008530:	24009238 	.word	0x24009238

08008534 <UTIL_LCD_FillRect>:
{
 8008534:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8008536:	4e13      	ldr	r6, [pc, #76]	; (8008584 <UTIL_LCD_FillRect+0x50>)
{
 8008538:	4615      	mov	r5, r2
 800853a:	b083      	sub	sp, #12
 800853c:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800853e:	69f7      	ldr	r7, [r6, #28]
{
 8008540:	462b      	mov	r3, r5
 8008542:	460a      	mov	r2, r1
 8008544:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8008546:	2f02      	cmp	r7, #2
 8008548:	d008      	beq.n	800855c <UTIL_LCD_FillRect+0x28>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800854a:	4f0f      	ldr	r7, [pc, #60]	; (8008588 <UTIL_LCD_FillRect+0x54>)
 800854c:	4601      	mov	r1, r0
 800854e:	e9cd 4500 	strd	r4, r5, [sp]
 8008552:	693c      	ldr	r4, [r7, #16]
 8008554:	6930      	ldr	r0, [r6, #16]
 8008556:	47a0      	blx	r4
}
 8008558:	b003      	add	sp, #12
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800855c:	096f      	lsrs	r7, r5, #5
 800855e:	9400      	str	r4, [sp, #0]
 8008560:	0a29      	lsrs	r1, r5, #8
 8008562:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8008566:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800856a:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800856e:	4601      	mov	r1, r0
 8008570:	6930      	ldr	r0, [r6, #16]
 8008572:	433c      	orrs	r4, r7
 8008574:	4e04      	ldr	r6, [pc, #16]	; (8008588 <UTIL_LCD_FillRect+0x54>)
 8008576:	4325      	orrs	r5, r4
 8008578:	6934      	ldr	r4, [r6, #16]
 800857a:	9501      	str	r5, [sp, #4]
 800857c:	47a0      	blx	r4
}
 800857e:	b003      	add	sp, #12
 8008580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008582:	bf00      	nop
 8008584:	24009238 	.word	0x24009238
 8008588:	24009278 	.word	0x24009278

0800858c <UTIL_LCD_Clear>:
{
 800858c:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800858e:	2100      	movs	r1, #0
{
 8008590:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8008592:	4a05      	ldr	r2, [pc, #20]	; (80085a8 <UTIL_LCD_Clear+0x1c>)
 8008594:	9000      	str	r0, [sp, #0]
 8008596:	4608      	mov	r0, r1
 8008598:	6993      	ldr	r3, [r2, #24]
 800859a:	6952      	ldr	r2, [r2, #20]
 800859c:	f7ff ffca 	bl	8008534 <UTIL_LCD_FillRect>
}
 80085a0:	b003      	add	sp, #12
 80085a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80085a6:	bf00      	nop
 80085a8:	24009238 	.word	0x24009238

080085ac <__errno>:
 80085ac:	4b01      	ldr	r3, [pc, #4]	; (80085b4 <__errno+0x8>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	2400906c 	.word	0x2400906c

080085b8 <__libc_init_array>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	4d0d      	ldr	r5, [pc, #52]	; (80085f0 <__libc_init_array+0x38>)
 80085bc:	4c0d      	ldr	r4, [pc, #52]	; (80085f4 <__libc_init_array+0x3c>)
 80085be:	1b64      	subs	r4, r4, r5
 80085c0:	10a4      	asrs	r4, r4, #2
 80085c2:	2600      	movs	r6, #0
 80085c4:	42a6      	cmp	r6, r4
 80085c6:	d109      	bne.n	80085dc <__libc_init_array+0x24>
 80085c8:	4d0b      	ldr	r5, [pc, #44]	; (80085f8 <__libc_init_array+0x40>)
 80085ca:	4c0c      	ldr	r4, [pc, #48]	; (80085fc <__libc_init_array+0x44>)
 80085cc:	f000 fc4e 	bl	8008e6c <_init>
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	2600      	movs	r6, #0
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d105      	bne.n	80085e6 <__libc_init_array+0x2e>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e0:	4798      	blx	r3
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7ee      	b.n	80085c4 <__libc_init_array+0xc>
 80085e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ea:	4798      	blx	r3
 80085ec:	3601      	adds	r6, #1
 80085ee:	e7f2      	b.n	80085d6 <__libc_init_array+0x1e>
 80085f0:	0800aca8 	.word	0x0800aca8
 80085f4:	0800aca8 	.word	0x0800aca8
 80085f8:	0800aca8 	.word	0x0800aca8
 80085fc:	0800acac 	.word	0x0800acac

08008600 <memcpy>:
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	f100 33ff 	add.w	r3, r0, #4294967295
 8008608:	d100      	bne.n	800860c <memcpy+0xc>
 800860a:	4770      	bx	lr
 800860c:	b510      	push	{r4, lr}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008616:	4291      	cmp	r1, r2
 8008618:	d1f9      	bne.n	800860e <memcpy+0xe>
 800861a:	bd10      	pop	{r4, pc}

0800861c <memset>:
 800861c:	4402      	add	r2, r0
 800861e:	4603      	mov	r3, r0
 8008620:	4293      	cmp	r3, r2
 8008622:	d100      	bne.n	8008626 <memset+0xa>
 8008624:	4770      	bx	lr
 8008626:	f803 1b01 	strb.w	r1, [r3], #1
 800862a:	e7f9      	b.n	8008620 <memset+0x4>

0800862c <siprintf>:
 800862c:	b40e      	push	{r1, r2, r3}
 800862e:	b500      	push	{lr}
 8008630:	b09c      	sub	sp, #112	; 0x70
 8008632:	ab1d      	add	r3, sp, #116	; 0x74
 8008634:	9002      	str	r0, [sp, #8]
 8008636:	9006      	str	r0, [sp, #24]
 8008638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800863c:	4809      	ldr	r0, [pc, #36]	; (8008664 <siprintf+0x38>)
 800863e:	9107      	str	r1, [sp, #28]
 8008640:	9104      	str	r1, [sp, #16]
 8008642:	4909      	ldr	r1, [pc, #36]	; (8008668 <siprintf+0x3c>)
 8008644:	f853 2b04 	ldr.w	r2, [r3], #4
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	a902      	add	r1, sp, #8
 8008650:	f000 f868 	bl	8008724 <_svfiprintf_r>
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	b01c      	add	sp, #112	; 0x70
 800865c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008660:	b003      	add	sp, #12
 8008662:	4770      	bx	lr
 8008664:	2400906c 	.word	0x2400906c
 8008668:	ffff0208 	.word	0xffff0208

0800866c <__ssputs_r>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	688e      	ldr	r6, [r1, #8]
 8008672:	429e      	cmp	r6, r3
 8008674:	4682      	mov	sl, r0
 8008676:	460c      	mov	r4, r1
 8008678:	4690      	mov	r8, r2
 800867a:	461f      	mov	r7, r3
 800867c:	d838      	bhi.n	80086f0 <__ssputs_r+0x84>
 800867e:	898a      	ldrh	r2, [r1, #12]
 8008680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008684:	d032      	beq.n	80086ec <__ssputs_r+0x80>
 8008686:	6825      	ldr	r5, [r4, #0]
 8008688:	6909      	ldr	r1, [r1, #16]
 800868a:	eba5 0901 	sub.w	r9, r5, r1
 800868e:	6965      	ldr	r5, [r4, #20]
 8008690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008698:	3301      	adds	r3, #1
 800869a:	444b      	add	r3, r9
 800869c:	106d      	asrs	r5, r5, #1
 800869e:	429d      	cmp	r5, r3
 80086a0:	bf38      	it	cc
 80086a2:	461d      	movcc	r5, r3
 80086a4:	0553      	lsls	r3, r2, #21
 80086a6:	d531      	bpl.n	800870c <__ssputs_r+0xa0>
 80086a8:	4629      	mov	r1, r5
 80086aa:	f000 fb39 	bl	8008d20 <_malloc_r>
 80086ae:	4606      	mov	r6, r0
 80086b0:	b950      	cbnz	r0, 80086c8 <__ssputs_r+0x5c>
 80086b2:	230c      	movs	r3, #12
 80086b4:	f8ca 3000 	str.w	r3, [sl]
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	6921      	ldr	r1, [r4, #16]
 80086ca:	464a      	mov	r2, r9
 80086cc:	f7ff ff98 	bl	8008600 <memcpy>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	6126      	str	r6, [r4, #16]
 80086de:	6165      	str	r5, [r4, #20]
 80086e0:	444e      	add	r6, r9
 80086e2:	eba5 0509 	sub.w	r5, r5, r9
 80086e6:	6026      	str	r6, [r4, #0]
 80086e8:	60a5      	str	r5, [r4, #8]
 80086ea:	463e      	mov	r6, r7
 80086ec:	42be      	cmp	r6, r7
 80086ee:	d900      	bls.n	80086f2 <__ssputs_r+0x86>
 80086f0:	463e      	mov	r6, r7
 80086f2:	4632      	mov	r2, r6
 80086f4:	6820      	ldr	r0, [r4, #0]
 80086f6:	4641      	mov	r1, r8
 80086f8:	f000 faa8 	bl	8008c4c <memmove>
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	1b9b      	subs	r3, r3, r6
 8008702:	4432      	add	r2, r6
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	6022      	str	r2, [r4, #0]
 8008708:	2000      	movs	r0, #0
 800870a:	e7db      	b.n	80086c4 <__ssputs_r+0x58>
 800870c:	462a      	mov	r2, r5
 800870e:	f000 fb61 	bl	8008dd4 <_realloc_r>
 8008712:	4606      	mov	r6, r0
 8008714:	2800      	cmp	r0, #0
 8008716:	d1e1      	bne.n	80086dc <__ssputs_r+0x70>
 8008718:	6921      	ldr	r1, [r4, #16]
 800871a:	4650      	mov	r0, sl
 800871c:	f000 fab0 	bl	8008c80 <_free_r>
 8008720:	e7c7      	b.n	80086b2 <__ssputs_r+0x46>
	...

08008724 <_svfiprintf_r>:
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	4698      	mov	r8, r3
 800872a:	898b      	ldrh	r3, [r1, #12]
 800872c:	061b      	lsls	r3, r3, #24
 800872e:	b09d      	sub	sp, #116	; 0x74
 8008730:	4607      	mov	r7, r0
 8008732:	460d      	mov	r5, r1
 8008734:	4614      	mov	r4, r2
 8008736:	d50e      	bpl.n	8008756 <_svfiprintf_r+0x32>
 8008738:	690b      	ldr	r3, [r1, #16]
 800873a:	b963      	cbnz	r3, 8008756 <_svfiprintf_r+0x32>
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	f000 faef 	bl	8008d20 <_malloc_r>
 8008742:	6028      	str	r0, [r5, #0]
 8008744:	6128      	str	r0, [r5, #16]
 8008746:	b920      	cbnz	r0, 8008752 <_svfiprintf_r+0x2e>
 8008748:	230c      	movs	r3, #12
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e0d1      	b.n	80088f6 <_svfiprintf_r+0x1d2>
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	616b      	str	r3, [r5, #20]
 8008756:	2300      	movs	r3, #0
 8008758:	9309      	str	r3, [sp, #36]	; 0x24
 800875a:	2320      	movs	r3, #32
 800875c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008760:	f8cd 800c 	str.w	r8, [sp, #12]
 8008764:	2330      	movs	r3, #48	; 0x30
 8008766:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008910 <_svfiprintf_r+0x1ec>
 800876a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800876e:	f04f 0901 	mov.w	r9, #1
 8008772:	4623      	mov	r3, r4
 8008774:	469a      	mov	sl, r3
 8008776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877a:	b10a      	cbz	r2, 8008780 <_svfiprintf_r+0x5c>
 800877c:	2a25      	cmp	r2, #37	; 0x25
 800877e:	d1f9      	bne.n	8008774 <_svfiprintf_r+0x50>
 8008780:	ebba 0b04 	subs.w	fp, sl, r4
 8008784:	d00b      	beq.n	800879e <_svfiprintf_r+0x7a>
 8008786:	465b      	mov	r3, fp
 8008788:	4622      	mov	r2, r4
 800878a:	4629      	mov	r1, r5
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff ff6d 	bl	800866c <__ssputs_r>
 8008792:	3001      	adds	r0, #1
 8008794:	f000 80aa 	beq.w	80088ec <_svfiprintf_r+0x1c8>
 8008798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879a:	445a      	add	r2, fp
 800879c:	9209      	str	r2, [sp, #36]	; 0x24
 800879e:	f89a 3000 	ldrb.w	r3, [sl]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80a2 	beq.w	80088ec <_svfiprintf_r+0x1c8>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295
 80087ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b2:	f10a 0a01 	add.w	sl, sl, #1
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	9307      	str	r3, [sp, #28]
 80087ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087be:	931a      	str	r3, [sp, #104]	; 0x68
 80087c0:	4654      	mov	r4, sl
 80087c2:	2205      	movs	r2, #5
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	4851      	ldr	r0, [pc, #324]	; (8008910 <_svfiprintf_r+0x1ec>)
 80087ca:	f7f7 fd89 	bl	80002e0 <memchr>
 80087ce:	9a04      	ldr	r2, [sp, #16]
 80087d0:	b9d8      	cbnz	r0, 800880a <_svfiprintf_r+0xe6>
 80087d2:	06d0      	lsls	r0, r2, #27
 80087d4:	bf44      	itt	mi
 80087d6:	2320      	movmi	r3, #32
 80087d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087dc:	0711      	lsls	r1, r2, #28
 80087de:	bf44      	itt	mi
 80087e0:	232b      	movmi	r3, #43	; 0x2b
 80087e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ea:	2b2a      	cmp	r3, #42	; 0x2a
 80087ec:	d015      	beq.n	800881a <_svfiprintf_r+0xf6>
 80087ee:	9a07      	ldr	r2, [sp, #28]
 80087f0:	4654      	mov	r4, sl
 80087f2:	2000      	movs	r0, #0
 80087f4:	f04f 0c0a 	mov.w	ip, #10
 80087f8:	4621      	mov	r1, r4
 80087fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fe:	3b30      	subs	r3, #48	; 0x30
 8008800:	2b09      	cmp	r3, #9
 8008802:	d94e      	bls.n	80088a2 <_svfiprintf_r+0x17e>
 8008804:	b1b0      	cbz	r0, 8008834 <_svfiprintf_r+0x110>
 8008806:	9207      	str	r2, [sp, #28]
 8008808:	e014      	b.n	8008834 <_svfiprintf_r+0x110>
 800880a:	eba0 0308 	sub.w	r3, r0, r8
 800880e:	fa09 f303 	lsl.w	r3, r9, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	46a2      	mov	sl, r4
 8008818:	e7d2      	b.n	80087c0 <_svfiprintf_r+0x9c>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfbb      	ittet	lt
 8008826:	425b      	neglt	r3, r3
 8008828:	f042 0202 	orrlt.w	r2, r2, #2
 800882c:	9307      	strge	r3, [sp, #28]
 800882e:	9307      	strlt	r3, [sp, #28]
 8008830:	bfb8      	it	lt
 8008832:	9204      	strlt	r2, [sp, #16]
 8008834:	7823      	ldrb	r3, [r4, #0]
 8008836:	2b2e      	cmp	r3, #46	; 0x2e
 8008838:	d10c      	bne.n	8008854 <_svfiprintf_r+0x130>
 800883a:	7863      	ldrb	r3, [r4, #1]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d135      	bne.n	80088ac <_svfiprintf_r+0x188>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9203      	str	r2, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfb8      	it	lt
 800884c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008850:	3402      	adds	r4, #2
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008920 <_svfiprintf_r+0x1fc>
 8008858:	7821      	ldrb	r1, [r4, #0]
 800885a:	2203      	movs	r2, #3
 800885c:	4650      	mov	r0, sl
 800885e:	f7f7 fd3f 	bl	80002e0 <memchr>
 8008862:	b140      	cbz	r0, 8008876 <_svfiprintf_r+0x152>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	eba0 000a 	sub.w	r0, r0, sl
 800886a:	fa03 f000 	lsl.w	r0, r3, r0
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	4303      	orrs	r3, r0
 8008872:	3401      	adds	r4, #1
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887a:	4826      	ldr	r0, [pc, #152]	; (8008914 <_svfiprintf_r+0x1f0>)
 800887c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008880:	2206      	movs	r2, #6
 8008882:	f7f7 fd2d 	bl	80002e0 <memchr>
 8008886:	2800      	cmp	r0, #0
 8008888:	d038      	beq.n	80088fc <_svfiprintf_r+0x1d8>
 800888a:	4b23      	ldr	r3, [pc, #140]	; (8008918 <_svfiprintf_r+0x1f4>)
 800888c:	bb1b      	cbnz	r3, 80088d6 <_svfiprintf_r+0x1b2>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	3307      	adds	r3, #7
 8008892:	f023 0307 	bic.w	r3, r3, #7
 8008896:	3308      	adds	r3, #8
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889c:	4433      	add	r3, r6
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	e767      	b.n	8008772 <_svfiprintf_r+0x4e>
 80088a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a6:	460c      	mov	r4, r1
 80088a8:	2001      	movs	r0, #1
 80088aa:	e7a5      	b.n	80087f8 <_svfiprintf_r+0xd4>
 80088ac:	2300      	movs	r3, #0
 80088ae:	3401      	adds	r4, #1
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	4619      	mov	r1, r3
 80088b4:	f04f 0c0a 	mov.w	ip, #10
 80088b8:	4620      	mov	r0, r4
 80088ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088be:	3a30      	subs	r2, #48	; 0x30
 80088c0:	2a09      	cmp	r2, #9
 80088c2:	d903      	bls.n	80088cc <_svfiprintf_r+0x1a8>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0c5      	beq.n	8008854 <_svfiprintf_r+0x130>
 80088c8:	9105      	str	r1, [sp, #20]
 80088ca:	e7c3      	b.n	8008854 <_svfiprintf_r+0x130>
 80088cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d0:	4604      	mov	r4, r0
 80088d2:	2301      	movs	r3, #1
 80088d4:	e7f0      	b.n	80088b8 <_svfiprintf_r+0x194>
 80088d6:	ab03      	add	r3, sp, #12
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	462a      	mov	r2, r5
 80088dc:	4b0f      	ldr	r3, [pc, #60]	; (800891c <_svfiprintf_r+0x1f8>)
 80088de:	a904      	add	r1, sp, #16
 80088e0:	4638      	mov	r0, r7
 80088e2:	f3af 8000 	nop.w
 80088e6:	1c42      	adds	r2, r0, #1
 80088e8:	4606      	mov	r6, r0
 80088ea:	d1d6      	bne.n	800889a <_svfiprintf_r+0x176>
 80088ec:	89ab      	ldrh	r3, [r5, #12]
 80088ee:	065b      	lsls	r3, r3, #25
 80088f0:	f53f af2c 	bmi.w	800874c <_svfiprintf_r+0x28>
 80088f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f6:	b01d      	add	sp, #116	; 0x74
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <_svfiprintf_r+0x1f8>)
 8008904:	a904      	add	r1, sp, #16
 8008906:	4638      	mov	r0, r7
 8008908:	f000 f87a 	bl	8008a00 <_printf_i>
 800890c:	e7eb      	b.n	80088e6 <_svfiprintf_r+0x1c2>
 800890e:	bf00      	nop
 8008910:	0800ac74 	.word	0x0800ac74
 8008914:	0800ac7e 	.word	0x0800ac7e
 8008918:	00000000 	.word	0x00000000
 800891c:	0800866d 	.word	0x0800866d
 8008920:	0800ac7a 	.word	0x0800ac7a

08008924 <_printf_common>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	4616      	mov	r6, r2
 800892a:	4699      	mov	r9, r3
 800892c:	688a      	ldr	r2, [r1, #8]
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008934:	4293      	cmp	r3, r2
 8008936:	bfb8      	it	lt
 8008938:	4613      	movlt	r3, r2
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008940:	4607      	mov	r7, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b10a      	cbz	r2, 800894a <_printf_common+0x26>
 8008946:	3301      	adds	r3, #1
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	0699      	lsls	r1, r3, #26
 800894e:	bf42      	ittt	mi
 8008950:	6833      	ldrmi	r3, [r6, #0]
 8008952:	3302      	addmi	r3, #2
 8008954:	6033      	strmi	r3, [r6, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	f015 0506 	ands.w	r5, r5, #6
 800895c:	d106      	bne.n	800896c <_printf_common+0x48>
 800895e:	f104 0a19 	add.w	sl, r4, #25
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	6832      	ldr	r2, [r6, #0]
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc26      	bgt.n	80089ba <_printf_common+0x96>
 800896c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008970:	1e13      	subs	r3, r2, #0
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	bf18      	it	ne
 8008976:	2301      	movne	r3, #1
 8008978:	0692      	lsls	r2, r2, #26
 800897a:	d42b      	bmi.n	80089d4 <_printf_common+0xb0>
 800897c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008980:	4649      	mov	r1, r9
 8008982:	4638      	mov	r0, r7
 8008984:	47c0      	blx	r8
 8008986:	3001      	adds	r0, #1
 8008988:	d01e      	beq.n	80089c8 <_printf_common+0xa4>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	68e5      	ldr	r5, [r4, #12]
 800898e:	6832      	ldr	r2, [r6, #0]
 8008990:	f003 0306 	and.w	r3, r3, #6
 8008994:	2b04      	cmp	r3, #4
 8008996:	bf08      	it	eq
 8008998:	1aad      	subeq	r5, r5, r2
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	bf0c      	ite	eq
 80089a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a4:	2500      	movne	r5, #0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bfc4      	itt	gt
 80089aa:	1a9b      	subgt	r3, r3, r2
 80089ac:	18ed      	addgt	r5, r5, r3
 80089ae:	2600      	movs	r6, #0
 80089b0:	341a      	adds	r4, #26
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	d11a      	bne.n	80089ec <_printf_common+0xc8>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e008      	b.n	80089cc <_printf_common+0xa8>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4652      	mov	r2, sl
 80089be:	4649      	mov	r1, r9
 80089c0:	4638      	mov	r0, r7
 80089c2:	47c0      	blx	r8
 80089c4:	3001      	adds	r0, #1
 80089c6:	d103      	bne.n	80089d0 <_printf_common+0xac>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	3501      	adds	r5, #1
 80089d2:	e7c6      	b.n	8008962 <_printf_common+0x3e>
 80089d4:	18e1      	adds	r1, r4, r3
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	2030      	movs	r0, #48	; 0x30
 80089da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089de:	4422      	add	r2, r4
 80089e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089e8:	3302      	adds	r3, #2
 80089ea:	e7c7      	b.n	800897c <_printf_common+0x58>
 80089ec:	2301      	movs	r3, #1
 80089ee:	4622      	mov	r2, r4
 80089f0:	4649      	mov	r1, r9
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c0      	blx	r8
 80089f6:	3001      	adds	r0, #1
 80089f8:	d0e6      	beq.n	80089c8 <_printf_common+0xa4>
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7d9      	b.n	80089b2 <_printf_common+0x8e>
	...

08008a00 <_printf_i>:
 8008a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	4691      	mov	r9, r2
 8008a08:	7e27      	ldrb	r7, [r4, #24]
 8008a0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a0c:	2f78      	cmp	r7, #120	; 0x78
 8008a0e:	4680      	mov	r8, r0
 8008a10:	469a      	mov	sl, r3
 8008a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a16:	d807      	bhi.n	8008a28 <_printf_i+0x28>
 8008a18:	2f62      	cmp	r7, #98	; 0x62
 8008a1a:	d80a      	bhi.n	8008a32 <_printf_i+0x32>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	f000 80d8 	beq.w	8008bd2 <_printf_i+0x1d2>
 8008a22:	2f58      	cmp	r7, #88	; 0x58
 8008a24:	f000 80a3 	beq.w	8008b6e <_printf_i+0x16e>
 8008a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a30:	e03a      	b.n	8008aa8 <_printf_i+0xa8>
 8008a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a36:	2b15      	cmp	r3, #21
 8008a38:	d8f6      	bhi.n	8008a28 <_printf_i+0x28>
 8008a3a:	a001      	add	r0, pc, #4	; (adr r0, 8008a40 <_printf_i+0x40>)
 8008a3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008a29 	.word	0x08008a29
 8008a4c:	08008a29 	.word	0x08008a29
 8008a50:	08008a29 	.word	0x08008a29
 8008a54:	08008a29 	.word	0x08008a29
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008a29 	.word	0x08008a29
 8008a60:	08008a29 	.word	0x08008a29
 8008a64:	08008a29 	.word	0x08008a29
 8008a68:	08008a29 	.word	0x08008a29
 8008a6c:	08008bb9 	.word	0x08008bb9
 8008a70:	08008add 	.word	0x08008add
 8008a74:	08008b9b 	.word	0x08008b9b
 8008a78:	08008a29 	.word	0x08008a29
 8008a7c:	08008a29 	.word	0x08008a29
 8008a80:	08008bdb 	.word	0x08008bdb
 8008a84:	08008a29 	.word	0x08008a29
 8008a88:	08008add 	.word	0x08008add
 8008a8c:	08008a29 	.word	0x08008a29
 8008a90:	08008a29 	.word	0x08008a29
 8008a94:	08008ba3 	.word	0x08008ba3
 8008a98:	680b      	ldr	r3, [r1, #0]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	600a      	str	r2, [r1, #0]
 8008aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0a3      	b.n	8008bf4 <_printf_i+0x1f4>
 8008aac:	6825      	ldr	r5, [r4, #0]
 8008aae:	6808      	ldr	r0, [r1, #0]
 8008ab0:	062e      	lsls	r6, r5, #24
 8008ab2:	f100 0304 	add.w	r3, r0, #4
 8008ab6:	d50a      	bpl.n	8008ace <_printf_i+0xce>
 8008ab8:	6805      	ldr	r5, [r0, #0]
 8008aba:	600b      	str	r3, [r1, #0]
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	da03      	bge.n	8008ac8 <_printf_i+0xc8>
 8008ac0:	232d      	movs	r3, #45	; 0x2d
 8008ac2:	426d      	negs	r5, r5
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac8:	485e      	ldr	r0, [pc, #376]	; (8008c44 <_printf_i+0x244>)
 8008aca:	230a      	movs	r3, #10
 8008acc:	e019      	b.n	8008b02 <_printf_i+0x102>
 8008ace:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ad2:	6805      	ldr	r5, [r0, #0]
 8008ad4:	600b      	str	r3, [r1, #0]
 8008ad6:	bf18      	it	ne
 8008ad8:	b22d      	sxthne	r5, r5
 8008ada:	e7ef      	b.n	8008abc <_printf_i+0xbc>
 8008adc:	680b      	ldr	r3, [r1, #0]
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	1d18      	adds	r0, r3, #4
 8008ae2:	6008      	str	r0, [r1, #0]
 8008ae4:	0628      	lsls	r0, r5, #24
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0xec>
 8008ae8:	681d      	ldr	r5, [r3, #0]
 8008aea:	e002      	b.n	8008af2 <_printf_i+0xf2>
 8008aec:	0669      	lsls	r1, r5, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0xe8>
 8008af0:	881d      	ldrh	r5, [r3, #0]
 8008af2:	4854      	ldr	r0, [pc, #336]	; (8008c44 <_printf_i+0x244>)
 8008af4:	2f6f      	cmp	r7, #111	; 0x6f
 8008af6:	bf0c      	ite	eq
 8008af8:	2308      	moveq	r3, #8
 8008afa:	230a      	movne	r3, #10
 8008afc:	2100      	movs	r1, #0
 8008afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b02:	6866      	ldr	r6, [r4, #4]
 8008b04:	60a6      	str	r6, [r4, #8]
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	bfa2      	ittt	ge
 8008b0a:	6821      	ldrge	r1, [r4, #0]
 8008b0c:	f021 0104 	bicge.w	r1, r1, #4
 8008b10:	6021      	strge	r1, [r4, #0]
 8008b12:	b90d      	cbnz	r5, 8008b18 <_printf_i+0x118>
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	d04d      	beq.n	8008bb4 <_printf_i+0x1b4>
 8008b18:	4616      	mov	r6, r2
 8008b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b22:	5dc7      	ldrb	r7, [r0, r7]
 8008b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b28:	462f      	mov	r7, r5
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	460d      	mov	r5, r1
 8008b2e:	d9f4      	bls.n	8008b1a <_printf_i+0x11a>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d10b      	bne.n	8008b4c <_printf_i+0x14c>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	07df      	lsls	r7, r3, #31
 8008b38:	d508      	bpl.n	8008b4c <_printf_i+0x14c>
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	bfde      	ittt	le
 8008b42:	2330      	movle	r3, #48	; 0x30
 8008b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b4c:	1b92      	subs	r2, r2, r6
 8008b4e:	6122      	str	r2, [r4, #16]
 8008b50:	f8cd a000 	str.w	sl, [sp]
 8008b54:	464b      	mov	r3, r9
 8008b56:	aa03      	add	r2, sp, #12
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fee2 	bl	8008924 <_printf_common>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d14c      	bne.n	8008bfe <_printf_i+0x1fe>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	b004      	add	sp, #16
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	4835      	ldr	r0, [pc, #212]	; (8008c44 <_printf_i+0x244>)
 8008b70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	680e      	ldr	r6, [r1, #0]
 8008b78:	061f      	lsls	r7, r3, #24
 8008b7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b7e:	600e      	str	r6, [r1, #0]
 8008b80:	d514      	bpl.n	8008bac <_printf_i+0x1ac>
 8008b82:	07d9      	lsls	r1, r3, #31
 8008b84:	bf44      	itt	mi
 8008b86:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8a:	6023      	strmi	r3, [r4, #0]
 8008b8c:	b91d      	cbnz	r5, 8008b96 <_printf_i+0x196>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f023 0320 	bic.w	r3, r3, #32
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	2310      	movs	r3, #16
 8008b98:	e7b0      	b.n	8008afc <_printf_i+0xfc>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	f043 0320 	orr.w	r3, r3, #32
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	2378      	movs	r3, #120	; 0x78
 8008ba4:	4828      	ldr	r0, [pc, #160]	; (8008c48 <_printf_i+0x248>)
 8008ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008baa:	e7e3      	b.n	8008b74 <_printf_i+0x174>
 8008bac:	065e      	lsls	r6, r3, #25
 8008bae:	bf48      	it	mi
 8008bb0:	b2ad      	uxthmi	r5, r5
 8008bb2:	e7e6      	b.n	8008b82 <_printf_i+0x182>
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	e7bb      	b.n	8008b30 <_printf_i+0x130>
 8008bb8:	680b      	ldr	r3, [r1, #0]
 8008bba:	6826      	ldr	r6, [r4, #0]
 8008bbc:	6960      	ldr	r0, [r4, #20]
 8008bbe:	1d1d      	adds	r5, r3, #4
 8008bc0:	600d      	str	r5, [r1, #0]
 8008bc2:	0635      	lsls	r5, r6, #24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	d501      	bpl.n	8008bcc <_printf_i+0x1cc>
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <_printf_i+0x1d2>
 8008bcc:	0671      	lsls	r1, r6, #25
 8008bce:	d5fb      	bpl.n	8008bc8 <_printf_i+0x1c8>
 8008bd0:	8018      	strh	r0, [r3, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	e7ba      	b.n	8008b50 <_printf_i+0x150>
 8008bda:	680b      	ldr	r3, [r1, #0]
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	600a      	str	r2, [r1, #0]
 8008be0:	681e      	ldr	r6, [r3, #0]
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	2100      	movs	r1, #0
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7f7 fb7a 	bl	80002e0 <memchr>
 8008bec:	b108      	cbz	r0, 8008bf2 <_printf_i+0x1f2>
 8008bee:	1b80      	subs	r0, r0, r6
 8008bf0:	6060      	str	r0, [r4, #4]
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bfc:	e7a8      	b.n	8008b50 <_printf_i+0x150>
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	4632      	mov	r2, r6
 8008c02:	4649      	mov	r1, r9
 8008c04:	4640      	mov	r0, r8
 8008c06:	47d0      	blx	sl
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d0ab      	beq.n	8008b64 <_printf_i+0x164>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	079b      	lsls	r3, r3, #30
 8008c10:	d413      	bmi.n	8008c3a <_printf_i+0x23a>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	4298      	cmp	r0, r3
 8008c18:	bfb8      	it	lt
 8008c1a:	4618      	movlt	r0, r3
 8008c1c:	e7a4      	b.n	8008b68 <_printf_i+0x168>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4632      	mov	r2, r6
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	47d0      	blx	sl
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d09b      	beq.n	8008b64 <_printf_i+0x164>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	68e3      	ldr	r3, [r4, #12]
 8008c30:	9903      	ldr	r1, [sp, #12]
 8008c32:	1a5b      	subs	r3, r3, r1
 8008c34:	42ab      	cmp	r3, r5
 8008c36:	dcf2      	bgt.n	8008c1e <_printf_i+0x21e>
 8008c38:	e7eb      	b.n	8008c12 <_printf_i+0x212>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	f104 0619 	add.w	r6, r4, #25
 8008c40:	e7f5      	b.n	8008c2e <_printf_i+0x22e>
 8008c42:	bf00      	nop
 8008c44:	0800ac85 	.word	0x0800ac85
 8008c48:	0800ac96 	.word	0x0800ac96

08008c4c <memmove>:
 8008c4c:	4288      	cmp	r0, r1
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	eb01 0402 	add.w	r4, r1, r2
 8008c54:	d902      	bls.n	8008c5c <memmove+0x10>
 8008c56:	4284      	cmp	r4, r0
 8008c58:	4623      	mov	r3, r4
 8008c5a:	d807      	bhi.n	8008c6c <memmove+0x20>
 8008c5c:	1e43      	subs	r3, r0, #1
 8008c5e:	42a1      	cmp	r1, r4
 8008c60:	d008      	beq.n	8008c74 <memmove+0x28>
 8008c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c6a:	e7f8      	b.n	8008c5e <memmove+0x12>
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4601      	mov	r1, r0
 8008c70:	428a      	cmp	r2, r1
 8008c72:	d100      	bne.n	8008c76 <memmove+0x2a>
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c7e:	e7f7      	b.n	8008c70 <memmove+0x24>

08008c80 <_free_r>:
 8008c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d048      	beq.n	8008d18 <_free_r+0x98>
 8008c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8a:	9001      	str	r0, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c92:	bfb8      	it	lt
 8008c94:	18e4      	addlt	r4, r4, r3
 8008c96:	f000 f8d3 	bl	8008e40 <__malloc_lock>
 8008c9a:	4a20      	ldr	r2, [pc, #128]	; (8008d1c <_free_r+0x9c>)
 8008c9c:	9801      	ldr	r0, [sp, #4]
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	b933      	cbnz	r3, 8008cb2 <_free_r+0x32>
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	6014      	str	r4, [r2, #0]
 8008ca8:	b003      	add	sp, #12
 8008caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cae:	f000 b8cd 	b.w	8008e4c <__malloc_unlock>
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	d90b      	bls.n	8008cce <_free_r+0x4e>
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	1862      	adds	r2, r4, r1
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	bf04      	itt	eq
 8008cbe:	681a      	ldreq	r2, [r3, #0]
 8008cc0:	685b      	ldreq	r3, [r3, #4]
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	bf04      	itt	eq
 8008cc6:	1852      	addeq	r2, r2, r1
 8008cc8:	6022      	streq	r2, [r4, #0]
 8008cca:	602c      	str	r4, [r5, #0]
 8008ccc:	e7ec      	b.n	8008ca8 <_free_r+0x28>
 8008cce:	461a      	mov	r2, r3
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b10b      	cbz	r3, 8008cd8 <_free_r+0x58>
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d9fa      	bls.n	8008cce <_free_r+0x4e>
 8008cd8:	6811      	ldr	r1, [r2, #0]
 8008cda:	1855      	adds	r5, r2, r1
 8008cdc:	42a5      	cmp	r5, r4
 8008cde:	d10b      	bne.n	8008cf8 <_free_r+0x78>
 8008ce0:	6824      	ldr	r4, [r4, #0]
 8008ce2:	4421      	add	r1, r4
 8008ce4:	1854      	adds	r4, r2, r1
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	d1dd      	bne.n	8008ca8 <_free_r+0x28>
 8008cec:	681c      	ldr	r4, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	6053      	str	r3, [r2, #4]
 8008cf2:	4421      	add	r1, r4
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	e7d7      	b.n	8008ca8 <_free_r+0x28>
 8008cf8:	d902      	bls.n	8008d00 <_free_r+0x80>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	e7d3      	b.n	8008ca8 <_free_r+0x28>
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf04      	itt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	6063      	str	r3, [r4, #4]
 8008d0e:	bf04      	itt	eq
 8008d10:	1949      	addeq	r1, r1, r5
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	6054      	str	r4, [r2, #4]
 8008d16:	e7c7      	b.n	8008ca8 <_free_r+0x28>
 8008d18:	b003      	add	sp, #12
 8008d1a:	bd30      	pop	{r4, r5, pc}
 8008d1c:	240092a4 	.word	0x240092a4

08008d20 <_malloc_r>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	1ccd      	adds	r5, r1, #3
 8008d24:	f025 0503 	bic.w	r5, r5, #3
 8008d28:	3508      	adds	r5, #8
 8008d2a:	2d0c      	cmp	r5, #12
 8008d2c:	bf38      	it	cc
 8008d2e:	250c      	movcc	r5, #12
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	4606      	mov	r6, r0
 8008d34:	db01      	blt.n	8008d3a <_malloc_r+0x1a>
 8008d36:	42a9      	cmp	r1, r5
 8008d38:	d903      	bls.n	8008d42 <_malloc_r+0x22>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	2000      	movs	r0, #0
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d42:	f000 f87d 	bl	8008e40 <__malloc_lock>
 8008d46:	4921      	ldr	r1, [pc, #132]	; (8008dcc <_malloc_r+0xac>)
 8008d48:	680a      	ldr	r2, [r1, #0]
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	b99c      	cbnz	r4, 8008d76 <_malloc_r+0x56>
 8008d4e:	4f20      	ldr	r7, [pc, #128]	; (8008dd0 <_malloc_r+0xb0>)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	b923      	cbnz	r3, 8008d5e <_malloc_r+0x3e>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 f862 	bl	8008e20 <_sbrk_r>
 8008d5c:	6038      	str	r0, [r7, #0]
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f85d 	bl	8008e20 <_sbrk_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d123      	bne.n	8008db2 <_malloc_r+0x92>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f86c 	bl	8008e4c <__malloc_unlock>
 8008d74:	e7e3      	b.n	8008d3e <_malloc_r+0x1e>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	1b5b      	subs	r3, r3, r5
 8008d7a:	d417      	bmi.n	8008dac <_malloc_r+0x8c>
 8008d7c:	2b0b      	cmp	r3, #11
 8008d7e:	d903      	bls.n	8008d88 <_malloc_r+0x68>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	441c      	add	r4, r3
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	e004      	b.n	8008d92 <_malloc_r+0x72>
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	42a2      	cmp	r2, r4
 8008d8c:	bf0c      	ite	eq
 8008d8e:	600b      	streq	r3, [r1, #0]
 8008d90:	6053      	strne	r3, [r2, #4]
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 f85a 	bl	8008e4c <__malloc_unlock>
 8008d98:	f104 000b 	add.w	r0, r4, #11
 8008d9c:	1d23      	adds	r3, r4, #4
 8008d9e:	f020 0007 	bic.w	r0, r0, #7
 8008da2:	1ac2      	subs	r2, r0, r3
 8008da4:	d0cc      	beq.n	8008d40 <_malloc_r+0x20>
 8008da6:	1a1b      	subs	r3, r3, r0
 8008da8:	50a3      	str	r3, [r4, r2]
 8008daa:	e7c9      	b.n	8008d40 <_malloc_r+0x20>
 8008dac:	4622      	mov	r2, r4
 8008dae:	6864      	ldr	r4, [r4, #4]
 8008db0:	e7cc      	b.n	8008d4c <_malloc_r+0x2c>
 8008db2:	1cc4      	adds	r4, r0, #3
 8008db4:	f024 0403 	bic.w	r4, r4, #3
 8008db8:	42a0      	cmp	r0, r4
 8008dba:	d0e3      	beq.n	8008d84 <_malloc_r+0x64>
 8008dbc:	1a21      	subs	r1, r4, r0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f82e 	bl	8008e20 <_sbrk_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d1dd      	bne.n	8008d84 <_malloc_r+0x64>
 8008dc8:	e7cf      	b.n	8008d6a <_malloc_r+0x4a>
 8008dca:	bf00      	nop
 8008dcc:	240092a4 	.word	0x240092a4
 8008dd0:	240092a8 	.word	0x240092a8

08008dd4 <_realloc_r>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	4614      	mov	r4, r2
 8008dda:	460e      	mov	r6, r1
 8008ddc:	b921      	cbnz	r1, 8008de8 <_realloc_r+0x14>
 8008dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008de2:	4611      	mov	r1, r2
 8008de4:	f7ff bf9c 	b.w	8008d20 <_malloc_r>
 8008de8:	b922      	cbnz	r2, 8008df4 <_realloc_r+0x20>
 8008dea:	f7ff ff49 	bl	8008c80 <_free_r>
 8008dee:	4625      	mov	r5, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	f000 f830 	bl	8008e58 <_malloc_usable_size_r>
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d20f      	bcs.n	8008e1c <_realloc_r+0x48>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7ff ff8e 	bl	8008d20 <_malloc_r>
 8008e04:	4605      	mov	r5, r0
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d0f2      	beq.n	8008df0 <_realloc_r+0x1c>
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	f7ff fbf7 	bl	8008600 <memcpy>
 8008e12:	4631      	mov	r1, r6
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ff33 	bl	8008c80 <_free_r>
 8008e1a:	e7e9      	b.n	8008df0 <_realloc_r+0x1c>
 8008e1c:	4635      	mov	r5, r6
 8008e1e:	e7e7      	b.n	8008df0 <_realloc_r+0x1c>

08008e20 <_sbrk_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d06      	ldr	r5, [pc, #24]	; (8008e3c <_sbrk_r+0x1c>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	f7fa ff34 	bl	8003c98 <_sbrk>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_sbrk_r+0x1a>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_sbrk_r+0x1a>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	24019454 	.word	0x24019454

08008e40 <__malloc_lock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_lock+0x8>)
 8008e42:	f000 b811 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 8008e46:	bf00      	nop
 8008e48:	2401945c 	.word	0x2401945c

08008e4c <__malloc_unlock>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__malloc_unlock+0x8>)
 8008e4e:	f000 b80c 	b.w	8008e6a <__retarget_lock_release_recursive>
 8008e52:	bf00      	nop
 8008e54:	2401945c 	.word	0x2401945c

08008e58 <_malloc_usable_size_r>:
 8008e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5c:	1f18      	subs	r0, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfbc      	itt	lt
 8008e62:	580b      	ldrlt	r3, [r1, r0]
 8008e64:	18c0      	addlt	r0, r0, r3
 8008e66:	4770      	bx	lr

08008e68 <__retarget_lock_acquire_recursive>:
 8008e68:	4770      	bx	lr

08008e6a <__retarget_lock_release_recursive>:
 8008e6a:	4770      	bx	lr

08008e6c <_init>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr

08008e78 <_fini>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	bf00      	nop
 8008e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7e:	bc08      	pop	{r3}
 8008e80:	469e      	mov	lr, r3
 8008e82:	4770      	bx	lr
