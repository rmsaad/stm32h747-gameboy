
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00059d90  0800b0e8  0800b0e8  0001b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08064e78  08064e78  0008107c  2**0
                  CONTENTS
  4 .ARM          00000000  08064e78  08064e78  0008107c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08064e78  08064e78  0008107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08064e78  08064e78  00074e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08064e7c  08064e7c  00074e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000107c  24000000  08064e80  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b40  2400107c  08065efc  0008107c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24011bbc  08065efc  00081bbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0008107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007a871  00000000  00000000  000810aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d34  00000000  00000000  000fb91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e705  00000000  00000000  0010364f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002870  00000000  00000000  00121d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004e58  00000000  00000000  001245c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000491b0  00000000  00000000  00129420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000373ab  00000000  00000000  001725d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c9de8  00000000  00000000  001a997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00373763  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007984  00000000  00000000  003737b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400107c 	.word	0x2400107c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b0d0 	.word	0x0800b0d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24001080 	.word	0x24001080
 80002d4:	0800b0d0 	.word	0x0800b0d0

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vGBMBCsetControllerType>:
 * @brief sets the cartridge type for use in this file corresponding to data stored at the memory location 0x147
 * @param code data stored at memory location 0x147
 * @returns Nothing
 */
void vGBMBCsetControllerType(uint8_t code){
	ucgbMBCcontrollerCode = code;
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <vGBMBCsetControllerType+0x8>)
 80003c2:	7018      	strb	r0, [r3, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	24001099 	.word	0x24001099

080003cc <ucGBMBCreadBankX>:
 * @brief This function will return data from a ROM location in the memory map depending on the MBC type
 * @param address memory map address
 * @returns data stored at specified ROM address
 */
uint8_t ucGBMBCreadBankX(uint16_t address){
	if(address < CARTROM_BANKX){
 80003cc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80003d0:	d302      	bcc.n	80003d8 <ucGBMBCreadBankX+0xc>
		return (uint8_t) rom[address];
	}else if(ucgbMBCcontrollerCode == 0){
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <ucGBMBCreadBankX+0x2c>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b91b      	cbnz	r3, 80003e0 <ucGBMBCreadBankX+0x14>
		return (uint8_t) rom[address];
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <ucGBMBCreadBankX+0x30>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	5c18      	ldrb	r0, [r3, r0]
 80003de:	4770      	bx	lr
	}else{
		return (uint8_t) rom[((ucgbMBCoffsetHigh + ucgbMBCoffsetLow - 1) * 0x4000) + (address)];
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <ucGBMBCreadBankX+0x34>)
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <ucGBMBCreadBankX+0x38>)
 80003e4:	7811      	ldrb	r1, [r2, #0]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <ucGBMBCreadBankX+0x30>)
 80003ea:	440b      	add	r3, r1
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	eb02 3383 	add.w	r3, r2, r3, lsl #14
 80003f4:	5c18      	ldrb	r0, [r3, r0]
	}
}
 80003f6:	4770      	bx	lr
 80003f8:	24001099 	.word	0x24001099
 80003fc:	24001018 	.word	0x24001018
 8000400:	24000008 	.word	0x24000008
 8000404:	2400109a 	.word	0x2400109a

08000408 <vGBMBCwrite>:
 * @param address memory map address
 * @param data byte to be written to MBC register
 * @returns Nothing
 */
void vGBMBCwrite(uint16_t address, uint8_t data){
	if(ucgbMBCcontrollerCode > 0){
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <vGBMBCwrite+0x50>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b163      	cbz	r3, 8000428 <vGBMBCwrite+0x20>
		if(address < 0x2000){
 800040e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000412:	d20a      	bcs.n	800042a <vGBMBCwrite+0x22>
			if(data  == 0x0A){
 8000414:	290a      	cmp	r1, #10
				ucgbMBCramEN = 1;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <vGBMBCwrite+0x54>)
			if(data  == 0x0A){
 8000418:	d01b      	beq.n	8000452 <vGBMBCwrite+0x4a>
			}else{
				ucgbMBCramEN = 0;
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
 800041e:	4770      	bx	lr
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
			}else{

			}
		}else{
			ucgbMBCbankMode = (data & 0x01);
 8000420:	f001 0101 	and.w	r1, r1, #1
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <vGBMBCwrite+0x58>)
 8000426:	7019      	strb	r1, [r3, #0]
		}
	}
}
 8000428:	4770      	bx	lr
		}else if(address < 0x4000){
 800042a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800042e:	d30c      	bcc.n	800044a <vGBMBCwrite+0x42>
		}else if(address < 0x6000){
 8000430:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 8000434:	d2f4      	bcs.n	8000420 <vGBMBCwrite+0x18>
			if(ucgbMBCbankMode == 0){
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <vGBMBCwrite+0x58>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f4      	bne.n	8000428 <vGBMBCwrite+0x20>
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
 800043e:	0149      	lsls	r1, r1, #5
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <vGBMBCwrite+0x5c>)
 8000442:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8000446:	7019      	strb	r1, [r3, #0]
 8000448:	4770      	bx	lr
			if(ucgbMBCoffsetLow == 0){
 800044a:	f011 011f 	ands.w	r1, r1, #31
				ucgbMBCoffsetLow = 1;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <vGBMBCwrite+0x60>)
			if(ucgbMBCoffsetLow == 0){
 8000450:	d1e9      	bne.n	8000426 <vGBMBCwrite+0x1e>
				ucgbMBCoffsetLow = 1;
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	4770      	bx	lr
 8000458:	24001099 	.word	0x24001099
 800045c:	2400109b 	.word	0x2400109b
 8000460:	24001098 	.word	0x24001098
 8000464:	2400109a 	.word	0x2400109a
 8000468:	24000008 	.word	0x24000008

0800046c <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 8000470:	4a02      	ldr	r2, [pc, #8]	; (800047c <vINCs_BC+0xc>)
 8000472:	8853      	ldrh	r3, [r2, #2]
 8000474:	3301      	adds	r3, #1
 8000476:	8053      	strh	r3, [r2, #2]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24001650 	.word	0x24001650

08000480 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 8000480:	4a02      	ldr	r2, [pc, #8]	; (800048c <vDECs_BC+0xc>)
 8000482:	8853      	ldrh	r3, [r2, #2]
 8000484:	3b01      	subs	r3, #1
 8000486:	8053      	strh	r3, [r2, #2]
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	24001650 	.word	0x24001650

08000490 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <vSTOP+0x8>)
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	240010a1 	.word	0x240010a1

0800049c <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 800049c:	4a02      	ldr	r2, [pc, #8]	; (80004a8 <vINCs_DE+0xc>)
 800049e:	8893      	ldrh	r3, [r2, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	8093      	strh	r3, [r2, #4]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	24001650 	.word	0x24001650

080004ac <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 80004ac:	4a02      	ldr	r2, [pc, #8]	; (80004b8 <vDECs_DE+0xc>)
 80004ae:	8893      	ldrh	r3, [r2, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	8093      	strh	r3, [r2, #4]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24001650 	.word	0x24001650

080004bc <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 80004bc:	4a02      	ldr	r2, [pc, #8]	; (80004c8 <vINCs_HL+0xc>)
 80004be:	88d3      	ldrh	r3, [r2, #6]
 80004c0:	3301      	adds	r3, #1
 80004c2:	80d3      	strh	r3, [r2, #6]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	24001650 	.word	0x24001650

080004cc <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 80004cc:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <vDECs_HL+0xc>)
 80004ce:	88d3      	ldrh	r3, [r2, #6]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	80d3      	strh	r3, [r2, #6]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	24001650 	.word	0x24001650

080004dc <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <vINCs_SP+0xc>)
 80004de:	8913      	ldrh	r3, [r2, #8]
 80004e0:	3301      	adds	r3, #1
 80004e2:	8113      	strh	r3, [r2, #8]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	24001650 	.word	0x24001650

080004ec <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004ec:	4a02      	ldr	r2, [pc, #8]	; (80004f8 <vDECs_SP+0xc>)
 80004ee:	8913      	ldrh	r3, [r2, #8]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	8113      	strh	r3, [r2, #8]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	24001650 	.word	0x24001650

080004fc <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <vLD_B_C+0x8>)
 80004fe:	789a      	ldrb	r2, [r3, #2]
 8000500:	70da      	strb	r2, [r3, #3]
 8000502:	4770      	bx	lr
 8000504:	24001650 	.word	0x24001650

08000508 <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <vLD_B_D+0x8>)
 800050a:	795a      	ldrb	r2, [r3, #5]
 800050c:	70da      	strb	r2, [r3, #3]
 800050e:	4770      	bx	lr
 8000510:	24001650 	.word	0x24001650

08000514 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000514:	4b01      	ldr	r3, [pc, #4]	; (800051c <vLD_B_E+0x8>)
 8000516:	791a      	ldrb	r2, [r3, #4]
 8000518:	70da      	strb	r2, [r3, #3]
 800051a:	4770      	bx	lr
 800051c:	24001650 	.word	0x24001650

08000520 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <vLD_B_H+0x8>)
 8000522:	79da      	ldrb	r2, [r3, #7]
 8000524:	70da      	strb	r2, [r3, #3]
 8000526:	4770      	bx	lr
 8000528:	24001650 	.word	0x24001650

0800052c <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <vLD_B_L+0x8>)
 800052e:	799a      	ldrb	r2, [r3, #6]
 8000530:	70da      	strb	r2, [r3, #3]
 8000532:	4770      	bx	lr
 8000534:	24001650 	.word	0x24001650

08000538 <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <vLD_B_A+0x8>)
 800053a:	785a      	ldrb	r2, [r3, #1]
 800053c:	70da      	strb	r2, [r3, #3]
 800053e:	4770      	bx	lr
 8000540:	24001650 	.word	0x24001650

08000544 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <vLD_C_B+0x8>)
 8000546:	78da      	ldrb	r2, [r3, #3]
 8000548:	709a      	strb	r2, [r3, #2]
 800054a:	4770      	bx	lr
 800054c:	24001650 	.word	0x24001650

08000550 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <vLD_C_D+0x8>)
 8000552:	795a      	ldrb	r2, [r3, #5]
 8000554:	709a      	strb	r2, [r3, #2]
 8000556:	4770      	bx	lr
 8000558:	24001650 	.word	0x24001650

0800055c <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <vLD_C_E+0x8>)
 800055e:	791a      	ldrb	r2, [r3, #4]
 8000560:	709a      	strb	r2, [r3, #2]
 8000562:	4770      	bx	lr
 8000564:	24001650 	.word	0x24001650

08000568 <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <vLD_C_H+0x8>)
 800056a:	79da      	ldrb	r2, [r3, #7]
 800056c:	709a      	strb	r2, [r3, #2]
 800056e:	4770      	bx	lr
 8000570:	24001650 	.word	0x24001650

08000574 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <vLD_C_L+0x8>)
 8000576:	799a      	ldrb	r2, [r3, #6]
 8000578:	709a      	strb	r2, [r3, #2]
 800057a:	4770      	bx	lr
 800057c:	24001650 	.word	0x24001650

08000580 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <vLD_C_A+0x8>)
 8000582:	785a      	ldrb	r2, [r3, #1]
 8000584:	709a      	strb	r2, [r3, #2]
 8000586:	4770      	bx	lr
 8000588:	24001650 	.word	0x24001650

0800058c <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <vLD_D_B+0x8>)
 800058e:	78da      	ldrb	r2, [r3, #3]
 8000590:	715a      	strb	r2, [r3, #5]
 8000592:	4770      	bx	lr
 8000594:	24001650 	.word	0x24001650

08000598 <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <vLD_D_C+0x8>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	715a      	strb	r2, [r3, #5]
 800059e:	4770      	bx	lr
 80005a0:	24001650 	.word	0x24001650

080005a4 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80005a4:	4b01      	ldr	r3, [pc, #4]	; (80005ac <vLD_D_E+0x8>)
 80005a6:	791a      	ldrb	r2, [r3, #4]
 80005a8:	715a      	strb	r2, [r3, #5]
 80005aa:	4770      	bx	lr
 80005ac:	24001650 	.word	0x24001650

080005b0 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <vLD_D_H+0x8>)
 80005b2:	79da      	ldrb	r2, [r3, #7]
 80005b4:	715a      	strb	r2, [r3, #5]
 80005b6:	4770      	bx	lr
 80005b8:	24001650 	.word	0x24001650

080005bc <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <vLD_D_L+0x8>)
 80005be:	799a      	ldrb	r2, [r3, #6]
 80005c0:	715a      	strb	r2, [r3, #5]
 80005c2:	4770      	bx	lr
 80005c4:	24001650 	.word	0x24001650

080005c8 <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <vLD_D_A+0x8>)
 80005ca:	785a      	ldrb	r2, [r3, #1]
 80005cc:	715a      	strb	r2, [r3, #5]
 80005ce:	4770      	bx	lr
 80005d0:	24001650 	.word	0x24001650

080005d4 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <vLD_E_B+0x8>)
 80005d6:	78da      	ldrb	r2, [r3, #3]
 80005d8:	711a      	strb	r2, [r3, #4]
 80005da:	4770      	bx	lr
 80005dc:	24001650 	.word	0x24001650

080005e0 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <vLD_E_C+0x8>)
 80005e2:	789a      	ldrb	r2, [r3, #2]
 80005e4:	711a      	strb	r2, [r3, #4]
 80005e6:	4770      	bx	lr
 80005e8:	24001650 	.word	0x24001650

080005ec <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <vLD_E_D+0x8>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	711a      	strb	r2, [r3, #4]
 80005f2:	4770      	bx	lr
 80005f4:	24001650 	.word	0x24001650

080005f8 <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <vLD_E_H+0x8>)
 80005fa:	79da      	ldrb	r2, [r3, #7]
 80005fc:	711a      	strb	r2, [r3, #4]
 80005fe:	4770      	bx	lr
 8000600:	24001650 	.word	0x24001650

08000604 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <vLD_E_L+0x8>)
 8000606:	799a      	ldrb	r2, [r3, #6]
 8000608:	711a      	strb	r2, [r3, #4]
 800060a:	4770      	bx	lr
 800060c:	24001650 	.word	0x24001650

08000610 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <vLD_E_A+0x8>)
 8000612:	785a      	ldrb	r2, [r3, #1]
 8000614:	711a      	strb	r2, [r3, #4]
 8000616:	4770      	bx	lr
 8000618:	24001650 	.word	0x24001650

0800061c <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <vLD_H_B+0x8>)
 800061e:	78da      	ldrb	r2, [r3, #3]
 8000620:	71da      	strb	r2, [r3, #7]
 8000622:	4770      	bx	lr
 8000624:	24001650 	.word	0x24001650

08000628 <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <vLD_H_C+0x8>)
 800062a:	789a      	ldrb	r2, [r3, #2]
 800062c:	71da      	strb	r2, [r3, #7]
 800062e:	4770      	bx	lr
 8000630:	24001650 	.word	0x24001650

08000634 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <vLD_H_D+0x8>)
 8000636:	795a      	ldrb	r2, [r3, #5]
 8000638:	71da      	strb	r2, [r3, #7]
 800063a:	4770      	bx	lr
 800063c:	24001650 	.word	0x24001650

08000640 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <vLD_H_E+0x8>)
 8000642:	791a      	ldrb	r2, [r3, #4]
 8000644:	71da      	strb	r2, [r3, #7]
 8000646:	4770      	bx	lr
 8000648:	24001650 	.word	0x24001650

0800064c <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <vLD_H_L+0x8>)
 800064e:	799a      	ldrb	r2, [r3, #6]
 8000650:	71da      	strb	r2, [r3, #7]
 8000652:	4770      	bx	lr
 8000654:	24001650 	.word	0x24001650

08000658 <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <vLD_H_A+0x8>)
 800065a:	785a      	ldrb	r2, [r3, #1]
 800065c:	71da      	strb	r2, [r3, #7]
 800065e:	4770      	bx	lr
 8000660:	24001650 	.word	0x24001650

08000664 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <vLD_L_B+0x8>)
 8000666:	78da      	ldrb	r2, [r3, #3]
 8000668:	719a      	strb	r2, [r3, #6]
 800066a:	4770      	bx	lr
 800066c:	24001650 	.word	0x24001650

08000670 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <vLD_L_C+0x8>)
 8000672:	789a      	ldrb	r2, [r3, #2]
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	4770      	bx	lr
 8000678:	24001650 	.word	0x24001650

0800067c <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <vLD_L_D+0x8>)
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	719a      	strb	r2, [r3, #6]
 8000682:	4770      	bx	lr
 8000684:	24001650 	.word	0x24001650

08000688 <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <vLD_L_E+0x8>)
 800068a:	791a      	ldrb	r2, [r3, #4]
 800068c:	719a      	strb	r2, [r3, #6]
 800068e:	4770      	bx	lr
 8000690:	24001650 	.word	0x24001650

08000694 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <vLD_L_H+0x8>)
 8000696:	79da      	ldrb	r2, [r3, #7]
 8000698:	719a      	strb	r2, [r3, #6]
 800069a:	4770      	bx	lr
 800069c:	24001650 	.word	0x24001650

080006a0 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <vLD_L_A+0x8>)
 80006a2:	785a      	ldrb	r2, [r3, #1]
 80006a4:	719a      	strb	r2, [r3, #6]
 80006a6:	4770      	bx	lr
 80006a8:	24001650 	.word	0x24001650

080006ac <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <vHALT+0x8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	4770      	bx	lr
 80006b4:	2400109d 	.word	0x2400109d

080006b8 <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <vLD_A_B+0x8>)
 80006ba:	78da      	ldrb	r2, [r3, #3]
 80006bc:	705a      	strb	r2, [r3, #1]
 80006be:	4770      	bx	lr
 80006c0:	24001650 	.word	0x24001650

080006c4 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <vLD_A_C+0x8>)
 80006c6:	789a      	ldrb	r2, [r3, #2]
 80006c8:	705a      	strb	r2, [r3, #1]
 80006ca:	4770      	bx	lr
 80006cc:	24001650 	.word	0x24001650

080006d0 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <vLD_A_D+0x8>)
 80006d2:	795a      	ldrb	r2, [r3, #5]
 80006d4:	705a      	strb	r2, [r3, #1]
 80006d6:	4770      	bx	lr
 80006d8:	24001650 	.word	0x24001650

080006dc <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <vLD_A_E+0x8>)
 80006de:	791a      	ldrb	r2, [r3, #4]
 80006e0:	705a      	strb	r2, [r3, #1]
 80006e2:	4770      	bx	lr
 80006e4:	24001650 	.word	0x24001650

080006e8 <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <vLD_A_H+0x8>)
 80006ea:	79da      	ldrb	r2, [r3, #7]
 80006ec:	705a      	strb	r2, [r3, #1]
 80006ee:	4770      	bx	lr
 80006f0:	24001650 	.word	0x24001650

080006f4 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <vLD_A_L+0x8>)
 80006f6:	799a      	ldrb	r2, [r3, #6]
 80006f8:	705a      	strb	r2, [r3, #1]
 80006fa:	4770      	bx	lr
 80006fc:	24001650 	.word	0x24001650

08000700 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <vAND_B+0x18>)
 8000702:	785a      	ldrb	r2, [r3, #1]
 8000704:	78d9      	ldrb	r1, [r3, #3]
 8000706:	400a      	ands	r2, r1
 8000708:	2a00      	cmp	r2, #0
 800070a:	705a      	strb	r2, [r3, #1]
 800070c:	bf0c      	ite	eq
 800070e:	22a0      	moveq	r2, #160	; 0xa0
 8000710:	2220      	movne	r2, #32
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	24001650 	.word	0x24001650

0800071c <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <vAND_C+0x18>)
 800071e:	785a      	ldrb	r2, [r3, #1]
 8000720:	7899      	ldrb	r1, [r3, #2]
 8000722:	400a      	ands	r2, r1
 8000724:	2a00      	cmp	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
 8000728:	bf0c      	ite	eq
 800072a:	22a0      	moveq	r2, #160	; 0xa0
 800072c:	2220      	movne	r2, #32
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	24001650 	.word	0x24001650

08000738 <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <vAND_D+0x18>)
 800073a:	785a      	ldrb	r2, [r3, #1]
 800073c:	7959      	ldrb	r1, [r3, #5]
 800073e:	400a      	ands	r2, r1
 8000740:	2a00      	cmp	r2, #0
 8000742:	705a      	strb	r2, [r3, #1]
 8000744:	bf0c      	ite	eq
 8000746:	22a0      	moveq	r2, #160	; 0xa0
 8000748:	2220      	movne	r2, #32
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	24001650 	.word	0x24001650

08000754 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <vAND_E+0x18>)
 8000756:	785a      	ldrb	r2, [r3, #1]
 8000758:	7919      	ldrb	r1, [r3, #4]
 800075a:	400a      	ands	r2, r1
 800075c:	2a00      	cmp	r2, #0
 800075e:	705a      	strb	r2, [r3, #1]
 8000760:	bf0c      	ite	eq
 8000762:	22a0      	moveq	r2, #160	; 0xa0
 8000764:	2220      	movne	r2, #32
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	24001650 	.word	0x24001650

08000770 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <vAND_H+0x18>)
 8000772:	785a      	ldrb	r2, [r3, #1]
 8000774:	79d9      	ldrb	r1, [r3, #7]
 8000776:	400a      	ands	r2, r1
 8000778:	2a00      	cmp	r2, #0
 800077a:	705a      	strb	r2, [r3, #1]
 800077c:	bf0c      	ite	eq
 800077e:	22a0      	moveq	r2, #160	; 0xa0
 8000780:	2220      	movne	r2, #32
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	24001650 	.word	0x24001650

0800078c <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <vAND_L+0x18>)
 800078e:	785a      	ldrb	r2, [r3, #1]
 8000790:	7999      	ldrb	r1, [r3, #6]
 8000792:	400a      	ands	r2, r1
 8000794:	2a00      	cmp	r2, #0
 8000796:	705a      	strb	r2, [r3, #1]
 8000798:	bf0c      	ite	eq
 800079a:	22a0      	moveq	r2, #160	; 0xa0
 800079c:	2220      	movne	r2, #32
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	24001650 	.word	0x24001650

080007a8 <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <vAND_A+0x10>)
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	22a0      	moveq	r2, #160	; 0xa0
 80007b2:	2220      	movne	r2, #32
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	4770      	bx	lr
 80007b8:	24001650 	.word	0x24001650

080007bc <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <vXOR_B+0x18>)
 80007be:	785a      	ldrb	r2, [r3, #1]
 80007c0:	78d9      	ldrb	r1, [r3, #3]
 80007c2:	ea82 0001 	eor.w	r0, r2, r1
 80007c6:	428a      	cmp	r2, r1
 80007c8:	bf0c      	ite	eq
 80007ca:	2280      	moveq	r2, #128	; 0x80
 80007cc:	2200      	movne	r2, #0
 80007ce:	7058      	strb	r0, [r3, #1]
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	4770      	bx	lr
 80007d4:	24001650 	.word	0x24001650

080007d8 <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <vXOR_C+0x18>)
 80007da:	785a      	ldrb	r2, [r3, #1]
 80007dc:	7899      	ldrb	r1, [r3, #2]
 80007de:	ea82 0001 	eor.w	r0, r2, r1
 80007e2:	428a      	cmp	r2, r1
 80007e4:	bf0c      	ite	eq
 80007e6:	2280      	moveq	r2, #128	; 0x80
 80007e8:	2200      	movne	r2, #0
 80007ea:	7058      	strb	r0, [r3, #1]
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	4770      	bx	lr
 80007f0:	24001650 	.word	0x24001650

080007f4 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <vXOR_D+0x18>)
 80007f6:	785a      	ldrb	r2, [r3, #1]
 80007f8:	7959      	ldrb	r1, [r3, #5]
 80007fa:	ea82 0001 	eor.w	r0, r2, r1
 80007fe:	428a      	cmp	r2, r1
 8000800:	bf0c      	ite	eq
 8000802:	2280      	moveq	r2, #128	; 0x80
 8000804:	2200      	movne	r2, #0
 8000806:	7058      	strb	r0, [r3, #1]
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	4770      	bx	lr
 800080c:	24001650 	.word	0x24001650

08000810 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <vXOR_E+0x18>)
 8000812:	785a      	ldrb	r2, [r3, #1]
 8000814:	7919      	ldrb	r1, [r3, #4]
 8000816:	ea82 0001 	eor.w	r0, r2, r1
 800081a:	428a      	cmp	r2, r1
 800081c:	bf0c      	ite	eq
 800081e:	2280      	moveq	r2, #128	; 0x80
 8000820:	2200      	movne	r2, #0
 8000822:	7058      	strb	r0, [r3, #1]
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	4770      	bx	lr
 8000828:	24001650 	.word	0x24001650

0800082c <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <vXOR_H+0x18>)
 800082e:	785a      	ldrb	r2, [r3, #1]
 8000830:	79d9      	ldrb	r1, [r3, #7]
 8000832:	ea82 0001 	eor.w	r0, r2, r1
 8000836:	428a      	cmp	r2, r1
 8000838:	bf0c      	ite	eq
 800083a:	2280      	moveq	r2, #128	; 0x80
 800083c:	2200      	movne	r2, #0
 800083e:	7058      	strb	r0, [r3, #1]
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	4770      	bx	lr
 8000844:	24001650 	.word	0x24001650

08000848 <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <vXOR_L+0x18>)
 800084a:	785a      	ldrb	r2, [r3, #1]
 800084c:	7999      	ldrb	r1, [r3, #6]
 800084e:	ea82 0001 	eor.w	r0, r2, r1
 8000852:	428a      	cmp	r2, r1
 8000854:	bf0c      	ite	eq
 8000856:	2280      	moveq	r2, #128	; 0x80
 8000858:	2200      	movne	r2, #0
 800085a:	7058      	strb	r0, [r3, #1]
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	4770      	bx	lr
 8000860:	24001650 	.word	0x24001650

08000864 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <vXOR_A+0x8>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	4770      	bx	lr
 800086c:	24001650 	.word	0x24001650

08000870 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <vOR_B+0x18>)
 8000872:	785a      	ldrb	r2, [r3, #1]
 8000874:	78d9      	ldrb	r1, [r3, #3]
 8000876:	430a      	orrs	r2, r1
 8000878:	2a00      	cmp	r2, #0
 800087a:	705a      	strb	r2, [r3, #1]
 800087c:	bf0c      	ite	eq
 800087e:	2280      	moveq	r2, #128	; 0x80
 8000880:	2200      	movne	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	24001650 	.word	0x24001650

0800088c <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <vOR_C+0x18>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	7899      	ldrb	r1, [r3, #2]
 8000892:	430a      	orrs	r2, r1
 8000894:	2a00      	cmp	r2, #0
 8000896:	705a      	strb	r2, [r3, #1]
 8000898:	bf0c      	ite	eq
 800089a:	2280      	moveq	r2, #128	; 0x80
 800089c:	2200      	movne	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	24001650 	.word	0x24001650

080008a8 <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <vOR_D+0x18>)
 80008aa:	785a      	ldrb	r2, [r3, #1]
 80008ac:	7959      	ldrb	r1, [r3, #5]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	705a      	strb	r2, [r3, #1]
 80008b4:	bf0c      	ite	eq
 80008b6:	2280      	moveq	r2, #128	; 0x80
 80008b8:	2200      	movne	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	24001650 	.word	0x24001650

080008c4 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <vOR_E+0x18>)
 80008c6:	785a      	ldrb	r2, [r3, #1]
 80008c8:	7919      	ldrb	r1, [r3, #4]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	705a      	strb	r2, [r3, #1]
 80008d0:	bf0c      	ite	eq
 80008d2:	2280      	moveq	r2, #128	; 0x80
 80008d4:	2200      	movne	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	24001650 	.word	0x24001650

080008e0 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <vOR_H+0x18>)
 80008e2:	785a      	ldrb	r2, [r3, #1]
 80008e4:	79d9      	ldrb	r1, [r3, #7]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	705a      	strb	r2, [r3, #1]
 80008ec:	bf0c      	ite	eq
 80008ee:	2280      	moveq	r2, #128	; 0x80
 80008f0:	2200      	movne	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	24001650 	.word	0x24001650

080008fc <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <vOR_L+0x18>)
 80008fe:	785a      	ldrb	r2, [r3, #1]
 8000900:	7999      	ldrb	r1, [r3, #6]
 8000902:	430a      	orrs	r2, r1
 8000904:	2a00      	cmp	r2, #0
 8000906:	705a      	strb	r2, [r3, #1]
 8000908:	bf0c      	ite	eq
 800090a:	2280      	moveq	r2, #128	; 0x80
 800090c:	2200      	movne	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	24001650 	.word	0x24001650

08000918 <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <vOR_A+0x10>)
 800091a:	785a      	ldrb	r2, [r3, #1]
 800091c:	2a00      	cmp	r2, #0
 800091e:	bf0c      	ite	eq
 8000920:	2280      	moveq	r2, #128	; 0x80
 8000922:	2200      	movne	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	4770      	bx	lr
 8000928:	24001650 	.word	0x24001650

0800092c <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <vJP_HL+0x8>)
 800092e:	88da      	ldrh	r2, [r3, #6]
 8000930:	815a      	strh	r2, [r3, #10]
 8000932:	4770      	bx	lr
 8000934:	24001650 	.word	0x24001650

08000938 <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 8000938:	4b01      	ldr	r3, [pc, #4]	; (8000940 <vDI+0x8>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	4770      	bx	lr
 8000940:	2400109e 	.word	0x2400109e

08000944 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <vLDs_SP_HL+0x8>)
 8000946:	88da      	ldrh	r2, [r3, #6]
 8000948:	811a      	strh	r2, [r3, #8]
 800094a:	4770      	bx	lr
 800094c:	24001650 	.word	0x24001650

08000950 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <vEI+0x8>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	4770      	bx	lr
 8000958:	2400109e 	.word	0x2400109e

0800095c <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 800095c:	b510      	push	{r4, lr}
 800095e:	4c04      	ldr	r4, [pc, #16]	; (8000970 <vLD_B_d8+0x14>)
 8000960:	8960      	ldrh	r0, [r4, #10]
 8000962:	3801      	subs	r0, #1
 8000964:	b280      	uxth	r0, r0
 8000966:	f002 fe93 	bl	8003690 <ucGBMemoryRead>
 800096a:	70e0      	strb	r0, [r4, #3]
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop
 8000970:	24001650 	.word	0x24001650

08000974 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000974:	b510      	push	{r4, lr}
 8000976:	4c03      	ldr	r4, [pc, #12]	; (8000984 <vLD_A_BC+0x10>)
 8000978:	8860      	ldrh	r0, [r4, #2]
 800097a:	f002 fe89 	bl	8003690 <ucGBMemoryRead>
 800097e:	7060      	strb	r0, [r4, #1]
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	24001650 	.word	0x24001650

08000988 <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 8000988:	b510      	push	{r4, lr}
 800098a:	4c04      	ldr	r4, [pc, #16]	; (800099c <vLD_C_d8+0x14>)
 800098c:	8960      	ldrh	r0, [r4, #10]
 800098e:	3801      	subs	r0, #1
 8000990:	b280      	uxth	r0, r0
 8000992:	f002 fe7d 	bl	8003690 <ucGBMemoryRead>
 8000996:	70a0      	strb	r0, [r4, #2]
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	24001650 	.word	0x24001650

080009a0 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80009a0:	b510      	push	{r4, lr}
 80009a2:	4c04      	ldr	r4, [pc, #16]	; (80009b4 <vLD_D_d8+0x14>)
 80009a4:	8960      	ldrh	r0, [r4, #10]
 80009a6:	3801      	subs	r0, #1
 80009a8:	b280      	uxth	r0, r0
 80009aa:	f002 fe71 	bl	8003690 <ucGBMemoryRead>
 80009ae:	7160      	strb	r0, [r4, #5]
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	24001650 	.word	0x24001650

080009b8 <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 80009b8:	b510      	push	{r4, lr}
 80009ba:	4c05      	ldr	r4, [pc, #20]	; (80009d0 <vJR_r8+0x18>)
 80009bc:	8960      	ldrh	r0, [r4, #10]
 80009be:	3801      	subs	r0, #1
 80009c0:	b280      	uxth	r0, r0
 80009c2:	f002 fe65 	bl	8003690 <ucGBMemoryRead>
 80009c6:	8963      	ldrh	r3, [r4, #10]
 80009c8:	fa43 f080 	sxtab	r0, r3, r0
 80009cc:	8160      	strh	r0, [r4, #10]
 80009ce:	bd10      	pop	{r4, pc}
 80009d0:	24001650 	.word	0x24001650

080009d4 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4c03      	ldr	r4, [pc, #12]	; (80009e4 <vLD_A_DE+0x10>)
 80009d8:	88a0      	ldrh	r0, [r4, #4]
 80009da:	f002 fe59 	bl	8003690 <ucGBMemoryRead>
 80009de:	7060      	strb	r0, [r4, #1]
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	bf00      	nop
 80009e4:	24001650 	.word	0x24001650

080009e8 <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 80009e8:	b510      	push	{r4, lr}
 80009ea:	4c04      	ldr	r4, [pc, #16]	; (80009fc <vLD_E_d8+0x14>)
 80009ec:	8960      	ldrh	r0, [r4, #10]
 80009ee:	3801      	subs	r0, #1
 80009f0:	b280      	uxth	r0, r0
 80009f2:	f002 fe4d 	bl	8003690 <ucGBMemoryRead>
 80009f6:	7120      	strb	r0, [r4, #4]
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	bf00      	nop
 80009fc:	24001650 	.word	0x24001650

08000a00 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4c04      	ldr	r4, [pc, #16]	; (8000a14 <vLD_H_d8+0x14>)
 8000a04:	8960      	ldrh	r0, [r4, #10]
 8000a06:	3801      	subs	r0, #1
 8000a08:	b280      	uxth	r0, r0
 8000a0a:	f002 fe41 	bl	8003690 <ucGBMemoryRead>
 8000a0e:	71e0      	strb	r0, [r4, #7]
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	24001650 	.word	0x24001650

08000a18 <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <vLD_A_HLI+0x14>)
 8000a1c:	88e0      	ldrh	r0, [r4, #6]
 8000a1e:	f002 fe37 	bl	8003690 <ucGBMemoryRead>
 8000a22:	88e3      	ldrh	r3, [r4, #6]
 8000a24:	7060      	strb	r0, [r4, #1]
 8000a26:	3301      	adds	r3, #1
 8000a28:	80e3      	strh	r3, [r4, #6]
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	24001650 	.word	0x24001650

08000a30 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c04      	ldr	r4, [pc, #16]	; (8000a44 <vLD_L_d8+0x14>)
 8000a34:	8960      	ldrh	r0, [r4, #10]
 8000a36:	3801      	subs	r0, #1
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	f002 fe29 	bl	8003690 <ucGBMemoryRead>
 8000a3e:	71a0      	strb	r0, [r4, #6]
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	24001650 	.word	0x24001650

08000a48 <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 8000a48:	b510      	push	{r4, lr}
 8000a4a:	4c04      	ldr	r4, [pc, #16]	; (8000a5c <vLD_A_HLD+0x14>)
 8000a4c:	88e0      	ldrh	r0, [r4, #6]
 8000a4e:	f002 fe1f 	bl	8003690 <ucGBMemoryRead>
 8000a52:	88e3      	ldrh	r3, [r4, #6]
 8000a54:	7060      	strb	r0, [r4, #1]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	80e3      	strh	r3, [r4, #6]
 8000a5a:	bd10      	pop	{r4, pc}
 8000a5c:	24001650 	.word	0x24001650

08000a60 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c04      	ldr	r4, [pc, #16]	; (8000a74 <vLD_A_d8+0x14>)
 8000a64:	8960      	ldrh	r0, [r4, #10]
 8000a66:	3801      	subs	r0, #1
 8000a68:	b280      	uxth	r0, r0
 8000a6a:	f002 fe11 	bl	8003690 <ucGBMemoryRead>
 8000a6e:	7060      	strb	r0, [r4, #1]
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	bf00      	nop
 8000a74:	24001650 	.word	0x24001650

08000a78 <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c03      	ldr	r4, [pc, #12]	; (8000a88 <vLD_B_HL+0x10>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fe07 	bl	8003690 <ucGBMemoryRead>
 8000a82:	70e0      	strb	r0, [r4, #3]
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	bf00      	nop
 8000a88:	24001650 	.word	0x24001650

08000a8c <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4c03      	ldr	r4, [pc, #12]	; (8000a9c <vLD_C_HL+0x10>)
 8000a90:	88e0      	ldrh	r0, [r4, #6]
 8000a92:	f002 fdfd 	bl	8003690 <ucGBMemoryRead>
 8000a96:	70a0      	strb	r0, [r4, #2]
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24001650 	.word	0x24001650

08000aa0 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	4c03      	ldr	r4, [pc, #12]	; (8000ab0 <vLD_D_HL+0x10>)
 8000aa4:	88e0      	ldrh	r0, [r4, #6]
 8000aa6:	f002 fdf3 	bl	8003690 <ucGBMemoryRead>
 8000aaa:	7160      	strb	r0, [r4, #5]
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	24001650 	.word	0x24001650

08000ab4 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000ab4:	b510      	push	{r4, lr}
 8000ab6:	4c03      	ldr	r4, [pc, #12]	; (8000ac4 <vLD_E_HL+0x10>)
 8000ab8:	88e0      	ldrh	r0, [r4, #6]
 8000aba:	f002 fde9 	bl	8003690 <ucGBMemoryRead>
 8000abe:	7120      	strb	r0, [r4, #4]
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	bf00      	nop
 8000ac4:	24001650 	.word	0x24001650

08000ac8 <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000ac8:	b510      	push	{r4, lr}
 8000aca:	4c03      	ldr	r4, [pc, #12]	; (8000ad8 <vLD_H_HL+0x10>)
 8000acc:	88e0      	ldrh	r0, [r4, #6]
 8000ace:	f002 fddf 	bl	8003690 <ucGBMemoryRead>
 8000ad2:	71e0      	strb	r0, [r4, #7]
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24001650 	.word	0x24001650

08000adc <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000adc:	b510      	push	{r4, lr}
 8000ade:	4c03      	ldr	r4, [pc, #12]	; (8000aec <vLD_L_HL+0x10>)
 8000ae0:	88e0      	ldrh	r0, [r4, #6]
 8000ae2:	f002 fdd5 	bl	8003690 <ucGBMemoryRead>
 8000ae6:	71a0      	strb	r0, [r4, #6]
 8000ae8:	bd10      	pop	{r4, pc}
 8000aea:	bf00      	nop
 8000aec:	24001650 	.word	0x24001650

08000af0 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4c03      	ldr	r4, [pc, #12]	; (8000b00 <vLD_A_HL+0x10>)
 8000af4:	88e0      	ldrh	r0, [r4, #6]
 8000af6:	f002 fdcb 	bl	8003690 <ucGBMemoryRead>
 8000afa:	7060      	strb	r0, [r4, #1]
 8000afc:	bd10      	pop	{r4, pc}
 8000afe:	bf00      	nop
 8000b00:	24001650 	.word	0x24001650

08000b04 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4c06      	ldr	r4, [pc, #24]	; (8000b20 <vAND_HL+0x1c>)
 8000b08:	88e0      	ldrh	r0, [r4, #6]
 8000b0a:	f002 fdc1 	bl	8003690 <ucGBMemoryRead>
 8000b0e:	7863      	ldrb	r3, [r4, #1]
 8000b10:	4018      	ands	r0, r3
 8000b12:	2800      	cmp	r0, #0
 8000b14:	7060      	strb	r0, [r4, #1]
 8000b16:	bf0c      	ite	eq
 8000b18:	23a0      	moveq	r3, #160	; 0xa0
 8000b1a:	2320      	movne	r3, #32
 8000b1c:	7023      	strb	r3, [r4, #0]
 8000b1e:	bd10      	pop	{r4, pc}
 8000b20:	24001650 	.word	0x24001650

08000b24 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4c07      	ldr	r4, [pc, #28]	; (8000b44 <vXOR_HL+0x20>)
 8000b28:	88e0      	ldrh	r0, [r4, #6]
 8000b2a:	f002 fdb1 	bl	8003690 <ucGBMemoryRead>
 8000b2e:	7863      	ldrb	r3, [r4, #1]
 8000b30:	ea83 0200 	eor.w	r2, r3, r0
 8000b34:	4283      	cmp	r3, r0
 8000b36:	bf0c      	ite	eq
 8000b38:	2080      	moveq	r0, #128	; 0x80
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	7062      	strb	r2, [r4, #1]
 8000b3e:	7020      	strb	r0, [r4, #0]
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	24001650 	.word	0x24001650

08000b48 <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4c07      	ldr	r4, [pc, #28]	; (8000b68 <vOR_HL+0x20>)
 8000b4c:	88e0      	ldrh	r0, [r4, #6]
 8000b4e:	f002 fd9f 	bl	8003690 <ucGBMemoryRead>
 8000b52:	7863      	ldrb	r3, [r4, #1]
 8000b54:	4318      	orrs	r0, r3
 8000b56:	b2c0      	uxtb	r0, r0
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	7060      	strb	r0, [r4, #1]
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2380      	moveq	r3, #128	; 0x80
 8000b60:	2300      	movne	r3, #0
 8000b62:	7023      	strb	r3, [r4, #0]
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	24001650 	.word	0x24001650

08000b6c <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <vPREFIX+0x1c>)
 8000b6e:	8958      	ldrh	r0, [r3, #10]
 8000b70:	3801      	subs	r0, #1
 8000b72:	b510      	push	{r4, lr}
 8000b74:	b280      	uxth	r0, r0
 8000b76:	f002 fd8b 	bl	8003690 <ucGBMemoryRead>
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <vPREFIX+0x20>)
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b80:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b84:	4718      	bx	r3
 8000b86:	bf00      	nop
 8000b88:	24001650 	.word	0x24001650
 8000b8c:	2400080c 	.word	0x2400080c

08000b90 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4c07      	ldr	r4, [pc, #28]	; (8000bb0 <vAND_d8+0x20>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3801      	subs	r0, #1
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fd79 	bl	8003690 <ucGBMemoryRead>
 8000b9e:	7863      	ldrb	r3, [r4, #1]
 8000ba0:	4018      	ands	r0, r3
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	7060      	strb	r0, [r4, #1]
 8000ba6:	bf0c      	ite	eq
 8000ba8:	23a0      	moveq	r3, #160	; 0xa0
 8000baa:	2320      	movne	r3, #32
 8000bac:	7023      	strb	r3, [r4, #0]
 8000bae:	bd10      	pop	{r4, pc}
 8000bb0:	24001650 	.word	0x24001650

08000bb4 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4c08      	ldr	r4, [pc, #32]	; (8000bd8 <vXOR_d8+0x24>)
 8000bb8:	8960      	ldrh	r0, [r4, #10]
 8000bba:	3801      	subs	r0, #1
 8000bbc:	b280      	uxth	r0, r0
 8000bbe:	f002 fd67 	bl	8003690 <ucGBMemoryRead>
 8000bc2:	7863      	ldrb	r3, [r4, #1]
 8000bc4:	ea83 0200 	eor.w	r2, r3, r0
 8000bc8:	4283      	cmp	r3, r0
 8000bca:	bf0c      	ite	eq
 8000bcc:	2080      	moveq	r0, #128	; 0x80
 8000bce:	2000      	movne	r0, #0
 8000bd0:	7062      	strb	r2, [r4, #1]
 8000bd2:	7020      	strb	r0, [r4, #0]
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24001650 	.word	0x24001650

08000bdc <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4c06      	ldr	r4, [pc, #24]	; (8000bf8 <vLDH_A_a8+0x1c>)
 8000be0:	8960      	ldrh	r0, [r4, #10]
 8000be2:	3801      	subs	r0, #1
 8000be4:	b280      	uxth	r0, r0
 8000be6:	f002 fd53 	bl	8003690 <ucGBMemoryRead>
 8000bea:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bee:	b280      	uxth	r0, r0
 8000bf0:	f002 fd4e 	bl	8003690 <ucGBMemoryRead>
 8000bf4:	7060      	strb	r0, [r4, #1]
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	24001650 	.word	0x24001650

08000bfc <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4c04      	ldr	r4, [pc, #16]	; (8000c10 <vLD_A_fC+0x14>)
 8000c00:	78a0      	ldrb	r0, [r4, #2]
 8000c02:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000c06:	b280      	uxth	r0, r0
 8000c08:	f002 fd42 	bl	8003690 <ucGBMemoryRead>
 8000c0c:	7060      	strb	r0, [r4, #1]
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	24001650 	.word	0x24001650

08000c14 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4c08      	ldr	r4, [pc, #32]	; (8000c38 <vOR_d8+0x24>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fd37 	bl	8003690 <ucGBMemoryRead>
 8000c22:	7863      	ldrb	r3, [r4, #1]
 8000c24:	4318      	orrs	r0, r3
 8000c26:	b2c0      	uxtb	r0, r0
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	7060      	strb	r0, [r4, #1]
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2380      	moveq	r3, #128	; 0x80
 8000c30:	2300      	movne	r3, #0
 8000c32:	7023      	strb	r3, [r4, #0]
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	24001650 	.word	0x24001650

08000c3c <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <vLDs_BC_d16+0x28>)
 8000c40:	8960      	ldrh	r0, [r4, #10]
 8000c42:	3802      	subs	r0, #2
 8000c44:	b280      	uxth	r0, r0
 8000c46:	f002 fd23 	bl	8003690 <ucGBMemoryRead>
 8000c4a:	8963      	ldrh	r3, [r4, #10]
 8000c4c:	4605      	mov	r5, r0
 8000c4e:	1e58      	subs	r0, r3, #1
 8000c50:	b280      	uxth	r0, r0
 8000c52:	f002 fd1d 	bl	8003690 <ucGBMemoryRead>
 8000c56:	4601      	mov	r1, r0
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f002 f809 	bl	8002c70 <usConcat16BitBigEndian>
 8000c5e:	8060      	strh	r0, [r4, #2]
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	24001650 	.word	0x24001650

08000c68 <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4c09      	ldr	r4, [pc, #36]	; (8000c90 <vLDs_DE_d16+0x28>)
 8000c6c:	8960      	ldrh	r0, [r4, #10]
 8000c6e:	3802      	subs	r0, #2
 8000c70:	b280      	uxth	r0, r0
 8000c72:	f002 fd0d 	bl	8003690 <ucGBMemoryRead>
 8000c76:	8963      	ldrh	r3, [r4, #10]
 8000c78:	4605      	mov	r5, r0
 8000c7a:	1e58      	subs	r0, r3, #1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	f002 fd07 	bl	8003690 <ucGBMemoryRead>
 8000c82:	4601      	mov	r1, r0
 8000c84:	4628      	mov	r0, r5
 8000c86:	f001 fff3 	bl	8002c70 <usConcat16BitBigEndian>
 8000c8a:	80a0      	strh	r0, [r4, #4]
 8000c8c:	bd38      	pop	{r3, r4, r5, pc}
 8000c8e:	bf00      	nop
 8000c90:	24001650 	.word	0x24001650

08000c94 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4c09      	ldr	r4, [pc, #36]	; (8000cbc <vLDs_HL_d16+0x28>)
 8000c98:	8960      	ldrh	r0, [r4, #10]
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	b280      	uxth	r0, r0
 8000c9e:	f002 fcf7 	bl	8003690 <ucGBMemoryRead>
 8000ca2:	8963      	ldrh	r3, [r4, #10]
 8000ca4:	4605      	mov	r5, r0
 8000ca6:	1e58      	subs	r0, r3, #1
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	f002 fcf1 	bl	8003690 <ucGBMemoryRead>
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f001 ffdd 	bl	8002c70 <usConcat16BitBigEndian>
 8000cb6:	80e0      	strh	r0, [r4, #6]
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop
 8000cbc:	24001650 	.word	0x24001650

08000cc0 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4c09      	ldr	r4, [pc, #36]	; (8000ce8 <vLDs_SP_d16+0x28>)
 8000cc4:	8960      	ldrh	r0, [r4, #10]
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	b280      	uxth	r0, r0
 8000cca:	f002 fce1 	bl	8003690 <ucGBMemoryRead>
 8000cce:	8963      	ldrh	r3, [r4, #10]
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	1e58      	subs	r0, r3, #1
 8000cd4:	b280      	uxth	r0, r0
 8000cd6:	f002 fcdb 	bl	8003690 <ucGBMemoryRead>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f001 ffc7 	bl	8002c70 <usConcat16BitBigEndian>
 8000ce2:	8120      	strh	r0, [r4, #8]
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24001650 	.word	0x24001650

08000cec <vJP_a16>:
void vJP_a16(){       reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4c09      	ldr	r4, [pc, #36]	; (8000d14 <vJP_a16+0x28>)
 8000cf0:	8960      	ldrh	r0, [r4, #10]
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	b280      	uxth	r0, r0
 8000cf6:	f002 fccb 	bl	8003690 <ucGBMemoryRead>
 8000cfa:	8963      	ldrh	r3, [r4, #10]
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	1e58      	subs	r0, r3, #1
 8000d00:	b280      	uxth	r0, r0
 8000d02:	f002 fcc5 	bl	8003690 <ucGBMemoryRead>
 8000d06:	4601      	mov	r1, r0
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f001 ffb1 	bl	8002c70 <usConcat16BitBigEndian>
 8000d0e:	8160      	strh	r0, [r4, #10]
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	bf00      	nop
 8000d14:	24001650 	.word	0x24001650

08000d18 <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <vLD_A_a16+0x2c>)
 8000d1c:	8960      	ldrh	r0, [r4, #10]
 8000d1e:	3802      	subs	r0, #2
 8000d20:	b280      	uxth	r0, r0
 8000d22:	f002 fcb5 	bl	8003690 <ucGBMemoryRead>
 8000d26:	8963      	ldrh	r3, [r4, #10]
 8000d28:	4605      	mov	r5, r0
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	f002 fcaf 	bl	8003690 <ucGBMemoryRead>
 8000d32:	4601      	mov	r1, r0
 8000d34:	4628      	mov	r0, r5
 8000d36:	f001 ff9b 	bl	8002c70 <usConcat16BitBigEndian>
 8000d3a:	f002 fca9 	bl	8003690 <ucGBMemoryRead>
 8000d3e:	7060      	strb	r0, [r4, #1]
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
 8000d42:	bf00      	nop
 8000d44:	24001650 	.word	0x24001650

08000d48 <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <vLD_BC_A+0xc>)
 8000d4a:	7859      	ldrb	r1, [r3, #1]
 8000d4c:	8858      	ldrh	r0, [r3, #2]
 8000d4e:	f002 bcc7 	b.w	80036e0 <vGBMemoryWrite>
 8000d52:	bf00      	nop
 8000d54:	24001650 	.word	0x24001650

08000d58 <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <vLD_DE_A+0xc>)
 8000d5a:	7859      	ldrb	r1, [r3, #1]
 8000d5c:	8898      	ldrh	r0, [r3, #4]
 8000d5e:	f002 bcbf 	b.w	80036e0 <vGBMemoryWrite>
 8000d62:	bf00      	nop
 8000d64:	24001650 	.word	0x24001650

08000d68 <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	4c04      	ldr	r4, [pc, #16]	; (8000d7c <vLD_HLI_A+0x14>)
 8000d6c:	7861      	ldrb	r1, [r4, #1]
 8000d6e:	88e0      	ldrh	r0, [r4, #6]
 8000d70:	f002 fcb6 	bl	80036e0 <vGBMemoryWrite>
 8000d74:	88e3      	ldrh	r3, [r4, #6]
 8000d76:	3301      	adds	r3, #1
 8000d78:	80e3      	strh	r3, [r4, #6]
 8000d7a:	bd10      	pop	{r4, pc}
 8000d7c:	24001650 	.word	0x24001650

08000d80 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4c04      	ldr	r4, [pc, #16]	; (8000d94 <vLD_HLD_A+0x14>)
 8000d84:	7861      	ldrb	r1, [r4, #1]
 8000d86:	88e0      	ldrh	r0, [r4, #6]
 8000d88:	f002 fcaa 	bl	80036e0 <vGBMemoryWrite>
 8000d8c:	88e3      	ldrh	r3, [r4, #6]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	80e3      	strh	r3, [r4, #6]
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	24001650 	.word	0x24001650

08000d98 <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <vLD_HL_d8+0x1c>)
 8000d9a:	8958      	ldrh	r0, [r3, #10]
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	b510      	push	{r4, lr}
 8000da0:	88dc      	ldrh	r4, [r3, #6]
 8000da2:	b280      	uxth	r0, r0
 8000da4:	f002 fc74 	bl	8003690 <ucGBMemoryRead>
 8000da8:	4601      	mov	r1, r0
 8000daa:	4620      	mov	r0, r4
 8000dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db0:	f002 bc96 	b.w	80036e0 <vGBMemoryWrite>
 8000db4:	24001650 	.word	0x24001650

08000db8 <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <vLD_HL_B+0xc>)
 8000dba:	78d9      	ldrb	r1, [r3, #3]
 8000dbc:	88d8      	ldrh	r0, [r3, #6]
 8000dbe:	f002 bc8f 	b.w	80036e0 <vGBMemoryWrite>
 8000dc2:	bf00      	nop
 8000dc4:	24001650 	.word	0x24001650

08000dc8 <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <vLD_HL_C+0xc>)
 8000dca:	7899      	ldrb	r1, [r3, #2]
 8000dcc:	88d8      	ldrh	r0, [r3, #6]
 8000dce:	f002 bc87 	b.w	80036e0 <vGBMemoryWrite>
 8000dd2:	bf00      	nop
 8000dd4:	24001650 	.word	0x24001650

08000dd8 <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <vLD_HL_D+0xc>)
 8000dda:	7959      	ldrb	r1, [r3, #5]
 8000ddc:	88d8      	ldrh	r0, [r3, #6]
 8000dde:	f002 bc7f 	b.w	80036e0 <vGBMemoryWrite>
 8000de2:	bf00      	nop
 8000de4:	24001650 	.word	0x24001650

08000de8 <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <vLD_HL_E+0xc>)
 8000dea:	7919      	ldrb	r1, [r3, #4]
 8000dec:	88d8      	ldrh	r0, [r3, #6]
 8000dee:	f002 bc77 	b.w	80036e0 <vGBMemoryWrite>
 8000df2:	bf00      	nop
 8000df4:	24001650 	.word	0x24001650

08000df8 <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <vLD_HL_H+0xc>)
 8000dfa:	79d9      	ldrb	r1, [r3, #7]
 8000dfc:	88d8      	ldrh	r0, [r3, #6]
 8000dfe:	f002 bc6f 	b.w	80036e0 <vGBMemoryWrite>
 8000e02:	bf00      	nop
 8000e04:	24001650 	.word	0x24001650

08000e08 <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <vLD_HL_L+0xc>)
 8000e0a:	7999      	ldrb	r1, [r3, #6]
 8000e0c:	88d8      	ldrh	r0, [r3, #6]
 8000e0e:	f002 bc67 	b.w	80036e0 <vGBMemoryWrite>
 8000e12:	bf00      	nop
 8000e14:	24001650 	.word	0x24001650

08000e18 <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <vLD_HL_A+0xc>)
 8000e1a:	7859      	ldrb	r1, [r3, #1]
 8000e1c:	88d8      	ldrh	r0, [r3, #6]
 8000e1e:	f002 bc5f 	b.w	80036e0 <vGBMemoryWrite>
 8000e22:	bf00      	nop
 8000e24:	24001650 	.word	0x24001650

08000e28 <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4c07      	ldr	r4, [pc, #28]	; (8000e48 <vLDH_a8_A+0x20>)
 8000e2c:	8960      	ldrh	r0, [r4, #10]
 8000e2e:	3801      	subs	r0, #1
 8000e30:	b280      	uxth	r0, r0
 8000e32:	f002 fc2d 	bl	8003690 <ucGBMemoryRead>
 8000e36:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e3a:	7861      	ldrb	r1, [r4, #1]
 8000e3c:	b280      	uxth	r0, r0
 8000e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e42:	f002 bc4d 	b.w	80036e0 <vGBMemoryWrite>
 8000e46:	bf00      	nop
 8000e48:	24001650 	.word	0x24001650

08000e4c <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <vLD_fC_A+0x10>)
 8000e4e:	7898      	ldrb	r0, [r3, #2]
 8000e50:	7859      	ldrb	r1, [r3, #1]
 8000e52:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e56:	b280      	uxth	r0, r0
 8000e58:	f002 bc42 	b.w	80036e0 <vGBMemoryWrite>
 8000e5c:	24001650 	.word	0x24001650

08000e60 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <vLD_a16_A+0x2c>)
 8000e64:	8960      	ldrh	r0, [r4, #10]
 8000e66:	3802      	subs	r0, #2
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	f002 fc11 	bl	8003690 <ucGBMemoryRead>
 8000e6e:	8963      	ldrh	r3, [r4, #10]
 8000e70:	4605      	mov	r5, r0
 8000e72:	1e58      	subs	r0, r3, #1
 8000e74:	b280      	uxth	r0, r0
 8000e76:	f002 fc0b 	bl	8003690 <ucGBMemoryRead>
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f001 fef7 	bl	8002c70 <usConcat16BitBigEndian>
 8000e82:	7861      	ldrb	r1, [r4, #1]
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f002 bc2a 	b.w	80036e0 <vGBMemoryWrite>
 8000e8c:	24001650 	.word	0x24001650

08000e90 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e90:	4901      	ldr	r1, [pc, #4]	; (8000e98 <vINC_B+0x8>)
 8000e92:	1cc8      	adds	r0, r1, #3
 8000e94:	f001 bf04 	b.w	8002ca0 <v8bitRegisterINC>
 8000e98:	24001650 	.word	0x24001650

08000e9c <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e9c:	4901      	ldr	r1, [pc, #4]	; (8000ea4 <vINC_C+0x8>)
 8000e9e:	1c88      	adds	r0, r1, #2
 8000ea0:	f001 befe 	b.w	8002ca0 <v8bitRegisterINC>
 8000ea4:	24001650 	.word	0x24001650

08000ea8 <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000ea8:	4901      	ldr	r1, [pc, #4]	; (8000eb0 <vINC_D+0x8>)
 8000eaa:	1d48      	adds	r0, r1, #5
 8000eac:	f001 bef8 	b.w	8002ca0 <v8bitRegisterINC>
 8000eb0:	24001650 	.word	0x24001650

08000eb4 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000eb4:	4901      	ldr	r1, [pc, #4]	; (8000ebc <vINC_E+0x8>)
 8000eb6:	1d08      	adds	r0, r1, #4
 8000eb8:	f001 bef2 	b.w	8002ca0 <v8bitRegisterINC>
 8000ebc:	24001650 	.word	0x24001650

08000ec0 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000ec0:	4901      	ldr	r1, [pc, #4]	; (8000ec8 <vINC_H+0x8>)
 8000ec2:	1dc8      	adds	r0, r1, #7
 8000ec4:	f001 beec 	b.w	8002ca0 <v8bitRegisterINC>
 8000ec8:	24001650 	.word	0x24001650

08000ecc <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000ecc:	4901      	ldr	r1, [pc, #4]	; (8000ed4 <vINC_L+0x8>)
 8000ece:	1d88      	adds	r0, r1, #6
 8000ed0:	f001 bee6 	b.w	8002ca0 <v8bitRegisterINC>
 8000ed4:	24001650 	.word	0x24001650

08000ed8 <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000ed8:	4901      	ldr	r1, [pc, #4]	; (8000ee0 <vINC_A+0x8>)
 8000eda:	1c48      	adds	r0, r1, #1
 8000edc:	f001 bee0 	b.w	8002ca0 <v8bitRegisterINC>
 8000ee0:	24001650 	.word	0x24001650

08000ee4 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000ee4:	4901      	ldr	r1, [pc, #4]	; (8000eec <vDEC_B+0x8>)
 8000ee6:	1cc8      	adds	r0, r1, #3
 8000ee8:	f001 bef8 	b.w	8002cdc <v8bitRegisterDEC>
 8000eec:	24001650 	.word	0x24001650

08000ef0 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000ef0:	4901      	ldr	r1, [pc, #4]	; (8000ef8 <vDEC_C+0x8>)
 8000ef2:	1c88      	adds	r0, r1, #2
 8000ef4:	f001 bef2 	b.w	8002cdc <v8bitRegisterDEC>
 8000ef8:	24001650 	.word	0x24001650

08000efc <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000efc:	4901      	ldr	r1, [pc, #4]	; (8000f04 <vDEC_D+0x8>)
 8000efe:	1d48      	adds	r0, r1, #5
 8000f00:	f001 beec 	b.w	8002cdc <v8bitRegisterDEC>
 8000f04:	24001650 	.word	0x24001650

08000f08 <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vDEC_E+0x8>)
 8000f0a:	1d08      	adds	r0, r1, #4
 8000f0c:	f001 bee6 	b.w	8002cdc <v8bitRegisterDEC>
 8000f10:	24001650 	.word	0x24001650

08000f14 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vDEC_H+0x8>)
 8000f16:	1dc8      	adds	r0, r1, #7
 8000f18:	f001 bee0 	b.w	8002cdc <v8bitRegisterDEC>
 8000f1c:	24001650 	.word	0x24001650

08000f20 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vDEC_L+0x8>)
 8000f22:	1d88      	adds	r0, r1, #6
 8000f24:	f001 beda 	b.w	8002cdc <v8bitRegisterDEC>
 8000f28:	24001650 	.word	0x24001650

08000f2c <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000f2c:	4901      	ldr	r1, [pc, #4]	; (8000f34 <vDEC_A+0x8>)
 8000f2e:	1c48      	adds	r0, r1, #1
 8000f30:	f001 bed4 	b.w	8002cdc <v8bitRegisterDEC>
 8000f34:	24001650 	.word	0x24001650

08000f38 <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000f38:	4901      	ldr	r1, [pc, #4]	; (8000f40 <vRLCA+0x8>)
 8000f3a:	1c48      	adds	r0, r1, #1
 8000f3c:	f001 beee 	b.w	8002d1c <vGBFunctionRLCA>
 8000f40:	24001650 	.word	0x24001650

08000f44 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <vLDs_a16_SP+0x2c>)
 8000f48:	8960      	ldrh	r0, [r4, #10]
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	b280      	uxth	r0, r0
 8000f4e:	f002 fb9f 	bl	8003690 <ucGBMemoryRead>
 8000f52:	8963      	ldrh	r3, [r4, #10]
 8000f54:	4605      	mov	r5, r0
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	b280      	uxth	r0, r0
 8000f5a:	f002 fb99 	bl	8003690 <ucGBMemoryRead>
 8000f5e:	4601      	mov	r1, r0
 8000f60:	4628      	mov	r0, r5
 8000f62:	f001 fe85 	bl	8002c70 <usConcat16BitBigEndian>
 8000f66:	8921      	ldrh	r1, [r4, #8]
 8000f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f6c:	f002 bc72 	b.w	8003854 <vGBMemoryWriteShort>
 8000f70:	24001650 	.word	0x24001650

08000f74 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000f74:	4a02      	ldr	r2, [pc, #8]	; (8000f80 <vADDs_HL_BC+0xc>)
 8000f76:	8851      	ldrh	r1, [r2, #2]
 8000f78:	1d90      	adds	r0, r2, #6
 8000f7a:	f001 beed 	b.w	8002d58 <vGBFunction16bitADD>
 8000f7e:	bf00      	nop
 8000f80:	24001650 	.word	0x24001650

08000f84 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000f84:	4a02      	ldr	r2, [pc, #8]	; (8000f90 <vADDs_HL_DE+0xc>)
 8000f86:	8891      	ldrh	r1, [r2, #4]
 8000f88:	1d90      	adds	r0, r2, #6
 8000f8a:	f001 bee5 	b.w	8002d58 <vGBFunction16bitADD>
 8000f8e:	bf00      	nop
 8000f90:	24001650 	.word	0x24001650

08000f94 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <vADDs_HL_HL+0xc>)
 8000f96:	4602      	mov	r2, r0
 8000f98:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000f9c:	f001 bedc 	b.w	8002d58 <vGBFunction16bitADD>
 8000fa0:	24001650 	.word	0x24001650

08000fa4 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000fa4:	4a02      	ldr	r2, [pc, #8]	; (8000fb0 <vADDs_HL_SP+0xc>)
 8000fa6:	8911      	ldrh	r1, [r2, #8]
 8000fa8:	1d90      	adds	r0, r2, #6
 8000faa:	f001 bed5 	b.w	8002d58 <vGBFunction16bitADD>
 8000fae:	bf00      	nop
 8000fb0:	24001650 	.word	0x24001650

08000fb4 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000fb4:	4901      	ldr	r1, [pc, #4]	; (8000fbc <vRRCA+0x8>)
 8000fb6:	1c48      	adds	r0, r1, #1
 8000fb8:	f001 bebc 	b.w	8002d34 <vGBFunctionRRCA>
 8000fbc:	24001650 	.word	0x24001650

08000fc0 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000fc0:	4901      	ldr	r1, [pc, #4]	; (8000fc8 <vRLA+0x8>)
 8000fc2:	1c48      	adds	r0, r1, #1
 8000fc4:	f001 bef0 	b.w	8002da8 <vGBFunctionRLA>
 8000fc8:	24001650 	.word	0x24001650

08000fcc <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000fcc:	4901      	ldr	r1, [pc, #4]	; (8000fd4 <vRRA+0x8>)
 8000fce:	1c48      	adds	r0, r1, #1
 8000fd0:	f001 bef8 	b.w	8002dc4 <vGBFunctionRRA>
 8000fd4:	24001650 	.word	0x24001650

08000fd8 <vJR_NZ_r8>:
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d08      	ldr	r5, [pc, #32]	; (8000ffc <vJR_NZ_r8+0x24>)
 8000fdc:	462c      	mov	r4, r5
 8000fde:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fe2:	3801      	subs	r0, #1
 8000fe4:	b280      	uxth	r0, r0
 8000fe6:	f002 fb53 	bl	8003690 <ucGBMemoryRead>
 8000fea:	4629      	mov	r1, r5
 8000fec:	4602      	mov	r2, r0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f001 fef6 	bl	8002de0 <vGBFunctionJR_NZ>
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <vJR_NZ_r8+0x28>)
 8000ff6:	7018      	strb	r0, [r3, #0]
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24001650 	.word	0x24001650
 8001000:	2400109c 	.word	0x2400109c

08001004 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8001004:	4901      	ldr	r1, [pc, #4]	; (800100c <vDAA+0x8>)
 8001006:	1c48      	adds	r0, r1, #1
 8001008:	f001 bef6 	b.w	8002df8 <vGBFunctionDAA>
 800100c:	24001650 	.word	0x24001650

08001010 <vJR_Z_r8>:
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d08      	ldr	r5, [pc, #32]	; (8001034 <vJR_Z_r8+0x24>)
 8001014:	462c      	mov	r4, r5
 8001016:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800101a:	3801      	subs	r0, #1
 800101c:	b280      	uxth	r0, r0
 800101e:	f002 fb37 	bl	8003690 <ucGBMemoryRead>
 8001022:	4629      	mov	r1, r5
 8001024:	4602      	mov	r2, r0
 8001026:	4620      	mov	r0, r4
 8001028:	f001 ff24 	bl	8002e74 <vGBFunctionJR_Z>
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <vJR_Z_r8+0x28>)
 800102e:	7018      	strb	r0, [r3, #0]
 8001030:	bd38      	pop	{r3, r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	24001650 	.word	0x24001650
 8001038:	2400109c 	.word	0x2400109c

0800103c <vCPL>:
void vCPL(){          reg.A = ~(reg.A); vSetBit(&reg.F, N_FLAG); vSetBit(&reg.F, H_FLAG);}
 800103c:	b510      	push	{r4, lr}
 800103e:	4c07      	ldr	r4, [pc, #28]	; (800105c <vCPL+0x20>)
 8001040:	2106      	movs	r1, #6
 8001042:	7863      	ldrb	r3, [r4, #1]
 8001044:	4620      	mov	r0, r4
 8001046:	43db      	mvns	r3, r3
 8001048:	7063      	strb	r3, [r4, #1]
 800104a:	f001 fe15 	bl	8002c78 <vSetBit>
 800104e:	4620      	mov	r0, r4
 8001050:	2105      	movs	r1, #5
 8001052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001056:	f001 be0f 	b.w	8002c78 <vSetBit>
 800105a:	bf00      	nop
 800105c:	24001650 	.word	0x24001650

08001060 <vSET_0_B>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      vResetBit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      vSetBit(&reg.B, 0);}
 8001060:	2100      	movs	r1, #0
 8001062:	4801      	ldr	r0, [pc, #4]	; (8001068 <vSET_0_B+0x8>)
 8001064:	f001 be08 	b.w	8002c78 <vSetBit>
 8001068:	24001653 	.word	0x24001653

0800106c <vSET_0_C>:
void vSET_0_C(){      vSetBit(&reg.C, 0);}
 800106c:	2100      	movs	r1, #0
 800106e:	4801      	ldr	r0, [pc, #4]	; (8001074 <vSET_0_C+0x8>)
 8001070:	f001 be02 	b.w	8002c78 <vSetBit>
 8001074:	24001652 	.word	0x24001652

08001078 <vSET_0_D>:
void vSET_0_D(){      vSetBit(&reg.D, 0);}
 8001078:	2100      	movs	r1, #0
 800107a:	4801      	ldr	r0, [pc, #4]	; (8001080 <vSET_0_D+0x8>)
 800107c:	f001 bdfc 	b.w	8002c78 <vSetBit>
 8001080:	24001655 	.word	0x24001655

08001084 <vSET_0_E>:
void vSET_0_E(){      vSetBit(&reg.E, 0);}
 8001084:	2100      	movs	r1, #0
 8001086:	4801      	ldr	r0, [pc, #4]	; (800108c <vSET_0_E+0x8>)
 8001088:	f001 bdf6 	b.w	8002c78 <vSetBit>
 800108c:	24001654 	.word	0x24001654

08001090 <vSET_0_H>:
void vSET_0_H(){      vSetBit(&reg.H, 0);}
 8001090:	2100      	movs	r1, #0
 8001092:	4801      	ldr	r0, [pc, #4]	; (8001098 <vSET_0_H+0x8>)
 8001094:	f001 bdf0 	b.w	8002c78 <vSetBit>
 8001098:	24001657 	.word	0x24001657

0800109c <vSET_0_L>:
void vSET_0_L(){      vSetBit(&reg.L, 0);}
 800109c:	2100      	movs	r1, #0
 800109e:	4801      	ldr	r0, [pc, #4]	; (80010a4 <vSET_0_L+0x8>)
 80010a0:	f001 bdea 	b.w	8002c78 <vSetBit>
 80010a4:	24001656 	.word	0x24001656

080010a8 <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      vSetBit(&reg.A, 0);}
 80010a8:	2100      	movs	r1, #0
 80010aa:	4801      	ldr	r0, [pc, #4]	; (80010b0 <vSET_0_A+0x8>)
 80010ac:	f001 bde4 	b.w	8002c78 <vSetBit>
 80010b0:	24001651 	.word	0x24001651

080010b4 <vSET_1_B>:
void vSET_1_B(){      vSetBit(&reg.B, 1);}
 80010b4:	2101      	movs	r1, #1
 80010b6:	4801      	ldr	r0, [pc, #4]	; (80010bc <vSET_1_B+0x8>)
 80010b8:	f001 bdde 	b.w	8002c78 <vSetBit>
 80010bc:	24001653 	.word	0x24001653

080010c0 <vSET_1_C>:
void vSET_1_C(){      vSetBit(&reg.C, 1);}
 80010c0:	2101      	movs	r1, #1
 80010c2:	4801      	ldr	r0, [pc, #4]	; (80010c8 <vSET_1_C+0x8>)
 80010c4:	f001 bdd8 	b.w	8002c78 <vSetBit>
 80010c8:	24001652 	.word	0x24001652

080010cc <vSET_1_D>:
void vSET_1_D(){      vSetBit(&reg.D, 1);}
 80010cc:	2101      	movs	r1, #1
 80010ce:	4801      	ldr	r0, [pc, #4]	; (80010d4 <vSET_1_D+0x8>)
 80010d0:	f001 bdd2 	b.w	8002c78 <vSetBit>
 80010d4:	24001655 	.word	0x24001655

080010d8 <vSET_1_E>:
void vSET_1_E(){      vSetBit(&reg.E, 1);}
 80010d8:	2101      	movs	r1, #1
 80010da:	4801      	ldr	r0, [pc, #4]	; (80010e0 <vSET_1_E+0x8>)
 80010dc:	f001 bdcc 	b.w	8002c78 <vSetBit>
 80010e0:	24001654 	.word	0x24001654

080010e4 <vSET_1_H>:
void vSET_1_H(){      vSetBit(&reg.H, 1);}
 80010e4:	2101      	movs	r1, #1
 80010e6:	4801      	ldr	r0, [pc, #4]	; (80010ec <vSET_1_H+0x8>)
 80010e8:	f001 bdc6 	b.w	8002c78 <vSetBit>
 80010ec:	24001657 	.word	0x24001657

080010f0 <vSET_1_L>:
void vSET_1_L(){      vSetBit(&reg.L, 1);}
 80010f0:	2101      	movs	r1, #1
 80010f2:	4801      	ldr	r0, [pc, #4]	; (80010f8 <vSET_1_L+0x8>)
 80010f4:	f001 bdc0 	b.w	8002c78 <vSetBit>
 80010f8:	24001656 	.word	0x24001656

080010fc <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      vSetBit(&reg.A, 1);}
 80010fc:	2101      	movs	r1, #1
 80010fe:	4801      	ldr	r0, [pc, #4]	; (8001104 <vSET_1_A+0x8>)
 8001100:	f001 bdba 	b.w	8002c78 <vSetBit>
 8001104:	24001651 	.word	0x24001651

08001108 <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      vSetBit(&reg.B, 2);}
 8001108:	2102      	movs	r1, #2
 800110a:	4801      	ldr	r0, [pc, #4]	; (8001110 <vSET_2_B+0x8>)
 800110c:	f001 bdb4 	b.w	8002c78 <vSetBit>
 8001110:	24001653 	.word	0x24001653

08001114 <vSET_2_C>:
void vSET_2_C(){      vSetBit(&reg.C, 2);}
 8001114:	2102      	movs	r1, #2
 8001116:	4801      	ldr	r0, [pc, #4]	; (800111c <vSET_2_C+0x8>)
 8001118:	f001 bdae 	b.w	8002c78 <vSetBit>
 800111c:	24001652 	.word	0x24001652

08001120 <vSET_2_D>:
void vSET_2_D(){      vSetBit(&reg.D, 2);}
 8001120:	2102      	movs	r1, #2
 8001122:	4801      	ldr	r0, [pc, #4]	; (8001128 <vSET_2_D+0x8>)
 8001124:	f001 bda8 	b.w	8002c78 <vSetBit>
 8001128:	24001655 	.word	0x24001655

0800112c <vSET_2_E>:
void vSET_2_E(){      vSetBit(&reg.E, 2);}
 800112c:	2102      	movs	r1, #2
 800112e:	4801      	ldr	r0, [pc, #4]	; (8001134 <vSET_2_E+0x8>)
 8001130:	f001 bda2 	b.w	8002c78 <vSetBit>
 8001134:	24001654 	.word	0x24001654

08001138 <vSET_2_H>:
void vSET_2_H(){      vSetBit(&reg.H, 2);}
 8001138:	2102      	movs	r1, #2
 800113a:	4801      	ldr	r0, [pc, #4]	; (8001140 <vSET_2_H+0x8>)
 800113c:	f001 bd9c 	b.w	8002c78 <vSetBit>
 8001140:	24001657 	.word	0x24001657

08001144 <vSET_2_L>:
void vSET_2_L(){      vSetBit(&reg.L, 2);}
 8001144:	2102      	movs	r1, #2
 8001146:	4801      	ldr	r0, [pc, #4]	; (800114c <vSET_2_L+0x8>)
 8001148:	f001 bd96 	b.w	8002c78 <vSetBit>
 800114c:	24001656 	.word	0x24001656

08001150 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      vSetBit(&reg.A, 2);}
 8001150:	2102      	movs	r1, #2
 8001152:	4801      	ldr	r0, [pc, #4]	; (8001158 <vSET_2_A+0x8>)
 8001154:	f001 bd90 	b.w	8002c78 <vSetBit>
 8001158:	24001651 	.word	0x24001651

0800115c <vSET_3_B>:
void vSET_3_B(){      vSetBit(&reg.B, 3);}
 800115c:	2103      	movs	r1, #3
 800115e:	4801      	ldr	r0, [pc, #4]	; (8001164 <vSET_3_B+0x8>)
 8001160:	f001 bd8a 	b.w	8002c78 <vSetBit>
 8001164:	24001653 	.word	0x24001653

08001168 <vSET_3_C>:
void vSET_3_C(){      vSetBit(&reg.C, 3);}
 8001168:	2103      	movs	r1, #3
 800116a:	4801      	ldr	r0, [pc, #4]	; (8001170 <vSET_3_C+0x8>)
 800116c:	f001 bd84 	b.w	8002c78 <vSetBit>
 8001170:	24001652 	.word	0x24001652

08001174 <vSET_3_D>:
void vSET_3_D(){      vSetBit(&reg.D, 3);}
 8001174:	2103      	movs	r1, #3
 8001176:	4801      	ldr	r0, [pc, #4]	; (800117c <vSET_3_D+0x8>)
 8001178:	f001 bd7e 	b.w	8002c78 <vSetBit>
 800117c:	24001655 	.word	0x24001655

08001180 <vSET_3_E>:
void vSET_3_E(){      vSetBit(&reg.E, 3);}
 8001180:	2103      	movs	r1, #3
 8001182:	4801      	ldr	r0, [pc, #4]	; (8001188 <vSET_3_E+0x8>)
 8001184:	f001 bd78 	b.w	8002c78 <vSetBit>
 8001188:	24001654 	.word	0x24001654

0800118c <vSET_3_H>:
void vSET_3_H(){      vSetBit(&reg.H, 3);}
 800118c:	2103      	movs	r1, #3
 800118e:	4801      	ldr	r0, [pc, #4]	; (8001194 <vSET_3_H+0x8>)
 8001190:	f001 bd72 	b.w	8002c78 <vSetBit>
 8001194:	24001657 	.word	0x24001657

08001198 <vSET_3_L>:
void vSET_3_L(){      vSetBit(&reg.L, 3);}
 8001198:	2103      	movs	r1, #3
 800119a:	4801      	ldr	r0, [pc, #4]	; (80011a0 <vSET_3_L+0x8>)
 800119c:	f001 bd6c 	b.w	8002c78 <vSetBit>
 80011a0:	24001656 	.word	0x24001656

080011a4 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      vSetBit(&reg.A, 3);}
 80011a4:	2103      	movs	r1, #3
 80011a6:	4801      	ldr	r0, [pc, #4]	; (80011ac <vSET_3_A+0x8>)
 80011a8:	f001 bd66 	b.w	8002c78 <vSetBit>
 80011ac:	24001651 	.word	0x24001651

080011b0 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      vSetBit(&reg.B, 4);}
 80011b0:	2104      	movs	r1, #4
 80011b2:	4801      	ldr	r0, [pc, #4]	; (80011b8 <vSET_4_B+0x8>)
 80011b4:	f001 bd60 	b.w	8002c78 <vSetBit>
 80011b8:	24001653 	.word	0x24001653

080011bc <vSET_4_C>:
void vSET_4_C(){      vSetBit(&reg.C, 4);}
 80011bc:	2104      	movs	r1, #4
 80011be:	4801      	ldr	r0, [pc, #4]	; (80011c4 <vSET_4_C+0x8>)
 80011c0:	f001 bd5a 	b.w	8002c78 <vSetBit>
 80011c4:	24001652 	.word	0x24001652

080011c8 <vSET_4_D>:
void vSET_4_D(){      vSetBit(&reg.D, 4);}
 80011c8:	2104      	movs	r1, #4
 80011ca:	4801      	ldr	r0, [pc, #4]	; (80011d0 <vSET_4_D+0x8>)
 80011cc:	f001 bd54 	b.w	8002c78 <vSetBit>
 80011d0:	24001655 	.word	0x24001655

080011d4 <vSET_4_E>:
void vSET_4_E(){      vSetBit(&reg.E, 4);}
 80011d4:	2104      	movs	r1, #4
 80011d6:	4801      	ldr	r0, [pc, #4]	; (80011dc <vSET_4_E+0x8>)
 80011d8:	f001 bd4e 	b.w	8002c78 <vSetBit>
 80011dc:	24001654 	.word	0x24001654

080011e0 <vSET_4_H>:
void vSET_4_H(){      vSetBit(&reg.H, 4);}
 80011e0:	2104      	movs	r1, #4
 80011e2:	4801      	ldr	r0, [pc, #4]	; (80011e8 <vSET_4_H+0x8>)
 80011e4:	f001 bd48 	b.w	8002c78 <vSetBit>
 80011e8:	24001657 	.word	0x24001657

080011ec <vSET_4_L>:
void vSET_4_L(){      vSetBit(&reg.L, 4);}
 80011ec:	2104      	movs	r1, #4
 80011ee:	4801      	ldr	r0, [pc, #4]	; (80011f4 <vSET_4_L+0x8>)
 80011f0:	f001 bd42 	b.w	8002c78 <vSetBit>
 80011f4:	24001656 	.word	0x24001656

080011f8 <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      vSetBit(&reg.A, 4);}
 80011f8:	2104      	movs	r1, #4
 80011fa:	4801      	ldr	r0, [pc, #4]	; (8001200 <vSET_4_A+0x8>)
 80011fc:	f001 bd3c 	b.w	8002c78 <vSetBit>
 8001200:	24001651 	.word	0x24001651

08001204 <vSET_5_B>:
void vSET_5_B(){      vSetBit(&reg.B, 5);}
 8001204:	2105      	movs	r1, #5
 8001206:	4801      	ldr	r0, [pc, #4]	; (800120c <vSET_5_B+0x8>)
 8001208:	f001 bd36 	b.w	8002c78 <vSetBit>
 800120c:	24001653 	.word	0x24001653

08001210 <vSET_5_C>:
void vSET_5_C(){      vSetBit(&reg.C, 5);}
 8001210:	2105      	movs	r1, #5
 8001212:	4801      	ldr	r0, [pc, #4]	; (8001218 <vSET_5_C+0x8>)
 8001214:	f001 bd30 	b.w	8002c78 <vSetBit>
 8001218:	24001652 	.word	0x24001652

0800121c <vSET_5_D>:
void vSET_5_D(){      vSetBit(&reg.D, 5);}
 800121c:	2105      	movs	r1, #5
 800121e:	4801      	ldr	r0, [pc, #4]	; (8001224 <vSET_5_D+0x8>)
 8001220:	f001 bd2a 	b.w	8002c78 <vSetBit>
 8001224:	24001655 	.word	0x24001655

08001228 <vSET_5_E>:
void vSET_5_E(){      vSetBit(&reg.E, 5);}
 8001228:	2105      	movs	r1, #5
 800122a:	4801      	ldr	r0, [pc, #4]	; (8001230 <vSET_5_E+0x8>)
 800122c:	f001 bd24 	b.w	8002c78 <vSetBit>
 8001230:	24001654 	.word	0x24001654

08001234 <vSET_5_H>:
void vSET_5_H(){      vSetBit(&reg.H, 5);}
 8001234:	2105      	movs	r1, #5
 8001236:	4801      	ldr	r0, [pc, #4]	; (800123c <vSET_5_H+0x8>)
 8001238:	f001 bd1e 	b.w	8002c78 <vSetBit>
 800123c:	24001657 	.word	0x24001657

08001240 <vSET_5_L>:
void vSET_5_L(){      vSetBit(&reg.L, 5);}
 8001240:	2105      	movs	r1, #5
 8001242:	4801      	ldr	r0, [pc, #4]	; (8001248 <vSET_5_L+0x8>)
 8001244:	f001 bd18 	b.w	8002c78 <vSetBit>
 8001248:	24001656 	.word	0x24001656

0800124c <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      vSetBit(&reg.A, 5);}
 800124c:	2105      	movs	r1, #5
 800124e:	4801      	ldr	r0, [pc, #4]	; (8001254 <vSET_5_A+0x8>)
 8001250:	f001 bd12 	b.w	8002c78 <vSetBit>
 8001254:	24001651 	.word	0x24001651

08001258 <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      vSetBit(&reg.B, 6);}
 8001258:	2106      	movs	r1, #6
 800125a:	4801      	ldr	r0, [pc, #4]	; (8001260 <vSET_6_B+0x8>)
 800125c:	f001 bd0c 	b.w	8002c78 <vSetBit>
 8001260:	24001653 	.word	0x24001653

08001264 <vSET_6_C>:
void vSET_6_C(){      vSetBit(&reg.C, 6);}
 8001264:	2106      	movs	r1, #6
 8001266:	4801      	ldr	r0, [pc, #4]	; (800126c <vSET_6_C+0x8>)
 8001268:	f001 bd06 	b.w	8002c78 <vSetBit>
 800126c:	24001652 	.word	0x24001652

08001270 <vSET_6_D>:
void vSET_6_D(){      vSetBit(&reg.D, 6);}
 8001270:	2106      	movs	r1, #6
 8001272:	4801      	ldr	r0, [pc, #4]	; (8001278 <vSET_6_D+0x8>)
 8001274:	f001 bd00 	b.w	8002c78 <vSetBit>
 8001278:	24001655 	.word	0x24001655

0800127c <vSET_6_E>:
void vSET_6_E(){      vSetBit(&reg.E, 6);}
 800127c:	2106      	movs	r1, #6
 800127e:	4801      	ldr	r0, [pc, #4]	; (8001284 <vSET_6_E+0x8>)
 8001280:	f001 bcfa 	b.w	8002c78 <vSetBit>
 8001284:	24001654 	.word	0x24001654

08001288 <vSET_6_H>:
void vSET_6_H(){      vSetBit(&reg.H, 6);}
 8001288:	2106      	movs	r1, #6
 800128a:	4801      	ldr	r0, [pc, #4]	; (8001290 <vSET_6_H+0x8>)
 800128c:	f001 bcf4 	b.w	8002c78 <vSetBit>
 8001290:	24001657 	.word	0x24001657

08001294 <vSET_6_L>:
void vSET_6_L(){      vSetBit(&reg.L, 6);}
 8001294:	2106      	movs	r1, #6
 8001296:	4801      	ldr	r0, [pc, #4]	; (800129c <vSET_6_L+0x8>)
 8001298:	f001 bcee 	b.w	8002c78 <vSetBit>
 800129c:	24001656 	.word	0x24001656

080012a0 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      vSetBit(&reg.A, 6);}
 80012a0:	2106      	movs	r1, #6
 80012a2:	4801      	ldr	r0, [pc, #4]	; (80012a8 <vSET_6_A+0x8>)
 80012a4:	f001 bce8 	b.w	8002c78 <vSetBit>
 80012a8:	24001651 	.word	0x24001651

080012ac <vSET_7_B>:
void vSET_7_B(){      vSetBit(&reg.B, 7);}
 80012ac:	2107      	movs	r1, #7
 80012ae:	4801      	ldr	r0, [pc, #4]	; (80012b4 <vSET_7_B+0x8>)
 80012b0:	f001 bce2 	b.w	8002c78 <vSetBit>
 80012b4:	24001653 	.word	0x24001653

080012b8 <vSET_7_C>:
void vSET_7_C(){      vSetBit(&reg.C, 7);}
 80012b8:	2107      	movs	r1, #7
 80012ba:	4801      	ldr	r0, [pc, #4]	; (80012c0 <vSET_7_C+0x8>)
 80012bc:	f001 bcdc 	b.w	8002c78 <vSetBit>
 80012c0:	24001652 	.word	0x24001652

080012c4 <vSET_7_D>:
void vSET_7_D(){      vSetBit(&reg.D, 7);}
 80012c4:	2107      	movs	r1, #7
 80012c6:	4801      	ldr	r0, [pc, #4]	; (80012cc <vSET_7_D+0x8>)
 80012c8:	f001 bcd6 	b.w	8002c78 <vSetBit>
 80012cc:	24001655 	.word	0x24001655

080012d0 <vSET_7_E>:
void vSET_7_E(){      vSetBit(&reg.E, 7);}
 80012d0:	2107      	movs	r1, #7
 80012d2:	4801      	ldr	r0, [pc, #4]	; (80012d8 <vSET_7_E+0x8>)
 80012d4:	f001 bcd0 	b.w	8002c78 <vSetBit>
 80012d8:	24001654 	.word	0x24001654

080012dc <vSET_7_H>:
void vSET_7_H(){      vSetBit(&reg.H, 7);}
 80012dc:	2107      	movs	r1, #7
 80012de:	4801      	ldr	r0, [pc, #4]	; (80012e4 <vSET_7_H+0x8>)
 80012e0:	f001 bcca 	b.w	8002c78 <vSetBit>
 80012e4:	24001657 	.word	0x24001657

080012e8 <vSET_7_L>:
void vSET_7_L(){      vSetBit(&reg.L, 7);}
 80012e8:	2107      	movs	r1, #7
 80012ea:	4801      	ldr	r0, [pc, #4]	; (80012f0 <vSET_7_L+0x8>)
 80012ec:	f001 bcc4 	b.w	8002c78 <vSetBit>
 80012f0:	24001656 	.word	0x24001656

080012f4 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      vSetBit(&reg.A, 7);}
 80012f4:	2107      	movs	r1, #7
 80012f6:	4801      	ldr	r0, [pc, #4]	; (80012fc <vSET_7_A+0x8>)
 80012f8:	f001 bcbe 	b.w	8002c78 <vSetBit>
 80012fc:	24001651 	.word	0x24001651

08001300 <vJR_NC_r8>:
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d08      	ldr	r5, [pc, #32]	; (8001324 <vJR_NC_r8+0x24>)
 8001304:	462c      	mov	r4, r5
 8001306:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800130a:	3801      	subs	r0, #1
 800130c:	b280      	uxth	r0, r0
 800130e:	f002 f9bf 	bl	8003690 <ucGBMemoryRead>
 8001312:	4629      	mov	r1, r5
 8001314:	4602      	mov	r2, r0
 8001316:	4620      	mov	r0, r4
 8001318:	f001 fdb8 	bl	8002e8c <vGBFunctionJR_NC>
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <vJR_NC_r8+0x28>)
 800131e:	7018      	strb	r0, [r3, #0]
 8001320:	bd38      	pop	{r3, r4, r5, pc}
 8001322:	bf00      	nop
 8001324:	24001650 	.word	0x24001650
 8001328:	2400109c 	.word	0x2400109c

0800132c <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 800132c:	4901      	ldr	r1, [pc, #4]	; (8001334 <vINC_HL+0x8>)
 800132e:	88c8      	ldrh	r0, [r1, #6]
 8001330:	f001 bdb8 	b.w	8002ea4 <vMemoryLocationINC>
 8001334:	24001650 	.word	0x24001650

08001338 <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 8001338:	4901      	ldr	r1, [pc, #4]	; (8001340 <vDEC_HL+0x8>)
 800133a:	88c8      	ldrh	r0, [r1, #6]
 800133c:	f001 bddc 	b.w	8002ef8 <vMemoryLocationDEC>
 8001340:	24001650 	.word	0x24001650

08001344 <vSCF>:
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
 8001344:	b508      	push	{r3, lr}
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <vSCF+0x20>)
 8001348:	2106      	movs	r1, #6
 800134a:	f001 fc9d 	bl	8002c88 <vResetBit>
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <vSCF+0x20>)
 8001350:	2105      	movs	r1, #5
 8001352:	f001 fc99 	bl	8002c88 <vResetBit>
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <vSCF+0x20>)
 8001358:	2104      	movs	r1, #4
 800135a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800135e:	f001 bc8b 	b.w	8002c78 <vSetBit>
 8001362:	bf00      	nop
 8001364:	24001650 	.word	0x24001650

08001368 <vRES_0_B>:
void vRES_0_B(){      vResetBit(&reg.B, 0);}
 8001368:	2100      	movs	r1, #0
 800136a:	4801      	ldr	r0, [pc, #4]	; (8001370 <vRES_0_B+0x8>)
 800136c:	f001 bc8c 	b.w	8002c88 <vResetBit>
 8001370:	24001653 	.word	0x24001653

08001374 <vRES_0_C>:
void vRES_0_C(){      vResetBit(&reg.C, 0);}
 8001374:	2100      	movs	r1, #0
 8001376:	4801      	ldr	r0, [pc, #4]	; (800137c <vRES_0_C+0x8>)
 8001378:	f001 bc86 	b.w	8002c88 <vResetBit>
 800137c:	24001652 	.word	0x24001652

08001380 <vRES_0_D>:
void vRES_0_D(){      vResetBit(&reg.D, 0);}
 8001380:	2100      	movs	r1, #0
 8001382:	4801      	ldr	r0, [pc, #4]	; (8001388 <vRES_0_D+0x8>)
 8001384:	f001 bc80 	b.w	8002c88 <vResetBit>
 8001388:	24001655 	.word	0x24001655

0800138c <vRES_0_E>:
void vRES_0_E(){      vResetBit(&reg.E, 0);}
 800138c:	2100      	movs	r1, #0
 800138e:	4801      	ldr	r0, [pc, #4]	; (8001394 <vRES_0_E+0x8>)
 8001390:	f001 bc7a 	b.w	8002c88 <vResetBit>
 8001394:	24001654 	.word	0x24001654

08001398 <vRES_0_H>:
void vRES_0_H(){      vResetBit(&reg.H, 0);}
 8001398:	2100      	movs	r1, #0
 800139a:	4801      	ldr	r0, [pc, #4]	; (80013a0 <vRES_0_H+0x8>)
 800139c:	f001 bc74 	b.w	8002c88 <vResetBit>
 80013a0:	24001657 	.word	0x24001657

080013a4 <vRES_0_L>:
void vRES_0_L(){      vResetBit(&reg.L, 0);}
 80013a4:	2100      	movs	r1, #0
 80013a6:	4801      	ldr	r0, [pc, #4]	; (80013ac <vRES_0_L+0x8>)
 80013a8:	f001 bc6e 	b.w	8002c88 <vResetBit>
 80013ac:	24001656 	.word	0x24001656

080013b0 <vRES_0_A>:
void vRES_0_A(){      vResetBit(&reg.A, 0);}
 80013b0:	2100      	movs	r1, #0
 80013b2:	4801      	ldr	r0, [pc, #4]	; (80013b8 <vRES_0_A+0x8>)
 80013b4:	f001 bc68 	b.w	8002c88 <vResetBit>
 80013b8:	24001651 	.word	0x24001651

080013bc <vRES_1_B>:
void vRES_1_B(){      vResetBit(&reg.B, 1);}
 80013bc:	2101      	movs	r1, #1
 80013be:	4801      	ldr	r0, [pc, #4]	; (80013c4 <vRES_1_B+0x8>)
 80013c0:	f001 bc62 	b.w	8002c88 <vResetBit>
 80013c4:	24001653 	.word	0x24001653

080013c8 <vRES_1_C>:
void vRES_1_C(){      vResetBit(&reg.C, 1);}
 80013c8:	2101      	movs	r1, #1
 80013ca:	4801      	ldr	r0, [pc, #4]	; (80013d0 <vRES_1_C+0x8>)
 80013cc:	f001 bc5c 	b.w	8002c88 <vResetBit>
 80013d0:	24001652 	.word	0x24001652

080013d4 <vRES_1_D>:
void vRES_1_D(){      vResetBit(&reg.D, 1);}
 80013d4:	2101      	movs	r1, #1
 80013d6:	4801      	ldr	r0, [pc, #4]	; (80013dc <vRES_1_D+0x8>)
 80013d8:	f001 bc56 	b.w	8002c88 <vResetBit>
 80013dc:	24001655 	.word	0x24001655

080013e0 <vRES_1_E>:
void vRES_1_E(){      vResetBit(&reg.E, 1);}
 80013e0:	2101      	movs	r1, #1
 80013e2:	4801      	ldr	r0, [pc, #4]	; (80013e8 <vRES_1_E+0x8>)
 80013e4:	f001 bc50 	b.w	8002c88 <vResetBit>
 80013e8:	24001654 	.word	0x24001654

080013ec <vRES_1_H>:
void vRES_1_H(){      vResetBit(&reg.H, 1);}
 80013ec:	2101      	movs	r1, #1
 80013ee:	4801      	ldr	r0, [pc, #4]	; (80013f4 <vRES_1_H+0x8>)
 80013f0:	f001 bc4a 	b.w	8002c88 <vResetBit>
 80013f4:	24001657 	.word	0x24001657

080013f8 <vRES_1_L>:
void vRES_1_L(){      vResetBit(&reg.L, 1);}
 80013f8:	2101      	movs	r1, #1
 80013fa:	4801      	ldr	r0, [pc, #4]	; (8001400 <vRES_1_L+0x8>)
 80013fc:	f001 bc44 	b.w	8002c88 <vResetBit>
 8001400:	24001656 	.word	0x24001656

08001404 <vRES_1_A>:
void vRES_1_A(){      vResetBit(&reg.A, 1);}
 8001404:	2101      	movs	r1, #1
 8001406:	4801      	ldr	r0, [pc, #4]	; (800140c <vRES_1_A+0x8>)
 8001408:	f001 bc3e 	b.w	8002c88 <vResetBit>
 800140c:	24001651 	.word	0x24001651

08001410 <vRES_2_B>:
void vRES_2_B(){      vResetBit(&reg.B, 2);}
 8001410:	2102      	movs	r1, #2
 8001412:	4801      	ldr	r0, [pc, #4]	; (8001418 <vRES_2_B+0x8>)
 8001414:	f001 bc38 	b.w	8002c88 <vResetBit>
 8001418:	24001653 	.word	0x24001653

0800141c <vRES_2_C>:
void vRES_2_C(){      vResetBit(&reg.C, 2);}
 800141c:	2102      	movs	r1, #2
 800141e:	4801      	ldr	r0, [pc, #4]	; (8001424 <vRES_2_C+0x8>)
 8001420:	f001 bc32 	b.w	8002c88 <vResetBit>
 8001424:	24001652 	.word	0x24001652

08001428 <vRES_2_D>:
void vRES_2_D(){      vResetBit(&reg.D, 2);}
 8001428:	2102      	movs	r1, #2
 800142a:	4801      	ldr	r0, [pc, #4]	; (8001430 <vRES_2_D+0x8>)
 800142c:	f001 bc2c 	b.w	8002c88 <vResetBit>
 8001430:	24001655 	.word	0x24001655

08001434 <vRES_2_E>:
void vRES_2_E(){      vResetBit(&reg.E, 2);}
 8001434:	2102      	movs	r1, #2
 8001436:	4801      	ldr	r0, [pc, #4]	; (800143c <vRES_2_E+0x8>)
 8001438:	f001 bc26 	b.w	8002c88 <vResetBit>
 800143c:	24001654 	.word	0x24001654

08001440 <vRES_2_H>:
void vRES_2_H(){      vResetBit(&reg.H, 2);}
 8001440:	2102      	movs	r1, #2
 8001442:	4801      	ldr	r0, [pc, #4]	; (8001448 <vRES_2_H+0x8>)
 8001444:	f001 bc20 	b.w	8002c88 <vResetBit>
 8001448:	24001657 	.word	0x24001657

0800144c <vRES_2_L>:
void vRES_2_L(){      vResetBit(&reg.L, 2);}
 800144c:	2102      	movs	r1, #2
 800144e:	4801      	ldr	r0, [pc, #4]	; (8001454 <vRES_2_L+0x8>)
 8001450:	f001 bc1a 	b.w	8002c88 <vResetBit>
 8001454:	24001656 	.word	0x24001656

08001458 <vRES_2_A>:
void vRES_2_A(){      vResetBit(&reg.A, 2);}
 8001458:	2102      	movs	r1, #2
 800145a:	4801      	ldr	r0, [pc, #4]	; (8001460 <vRES_2_A+0x8>)
 800145c:	f001 bc14 	b.w	8002c88 <vResetBit>
 8001460:	24001651 	.word	0x24001651

08001464 <vRES_3_B>:
void vRES_3_B(){      vResetBit(&reg.B, 3);}
 8001464:	2103      	movs	r1, #3
 8001466:	4801      	ldr	r0, [pc, #4]	; (800146c <vRES_3_B+0x8>)
 8001468:	f001 bc0e 	b.w	8002c88 <vResetBit>
 800146c:	24001653 	.word	0x24001653

08001470 <vRES_3_C>:
void vRES_3_C(){      vResetBit(&reg.C, 3);}
 8001470:	2103      	movs	r1, #3
 8001472:	4801      	ldr	r0, [pc, #4]	; (8001478 <vRES_3_C+0x8>)
 8001474:	f001 bc08 	b.w	8002c88 <vResetBit>
 8001478:	24001652 	.word	0x24001652

0800147c <vRES_3_D>:
void vRES_3_D(){      vResetBit(&reg.D, 3);}
 800147c:	2103      	movs	r1, #3
 800147e:	4801      	ldr	r0, [pc, #4]	; (8001484 <vRES_3_D+0x8>)
 8001480:	f001 bc02 	b.w	8002c88 <vResetBit>
 8001484:	24001655 	.word	0x24001655

08001488 <vRES_3_E>:
void vRES_3_E(){      vResetBit(&reg.E, 3);}
 8001488:	2103      	movs	r1, #3
 800148a:	4801      	ldr	r0, [pc, #4]	; (8001490 <vRES_3_E+0x8>)
 800148c:	f001 bbfc 	b.w	8002c88 <vResetBit>
 8001490:	24001654 	.word	0x24001654

08001494 <vRES_3_H>:
void vRES_3_H(){      vResetBit(&reg.H, 3);}
 8001494:	2103      	movs	r1, #3
 8001496:	4801      	ldr	r0, [pc, #4]	; (800149c <vRES_3_H+0x8>)
 8001498:	f001 bbf6 	b.w	8002c88 <vResetBit>
 800149c:	24001657 	.word	0x24001657

080014a0 <vRES_3_L>:
void vRES_3_L(){      vResetBit(&reg.L, 3);}
 80014a0:	2103      	movs	r1, #3
 80014a2:	4801      	ldr	r0, [pc, #4]	; (80014a8 <vRES_3_L+0x8>)
 80014a4:	f001 bbf0 	b.w	8002c88 <vResetBit>
 80014a8:	24001656 	.word	0x24001656

080014ac <vRES_3_A>:
void vRES_3_A(){      vResetBit(&reg.A, 3);}
 80014ac:	2103      	movs	r1, #3
 80014ae:	4801      	ldr	r0, [pc, #4]	; (80014b4 <vRES_3_A+0x8>)
 80014b0:	f001 bbea 	b.w	8002c88 <vResetBit>
 80014b4:	24001651 	.word	0x24001651

080014b8 <vRES_4_B>:
void vRES_4_B(){      vResetBit(&reg.B, 4);}
 80014b8:	2104      	movs	r1, #4
 80014ba:	4801      	ldr	r0, [pc, #4]	; (80014c0 <vRES_4_B+0x8>)
 80014bc:	f001 bbe4 	b.w	8002c88 <vResetBit>
 80014c0:	24001653 	.word	0x24001653

080014c4 <vRES_4_C>:
void vRES_4_C(){      vResetBit(&reg.C, 4);}
 80014c4:	2104      	movs	r1, #4
 80014c6:	4801      	ldr	r0, [pc, #4]	; (80014cc <vRES_4_C+0x8>)
 80014c8:	f001 bbde 	b.w	8002c88 <vResetBit>
 80014cc:	24001652 	.word	0x24001652

080014d0 <vRES_4_D>:
void vRES_4_D(){      vResetBit(&reg.D, 4);}
 80014d0:	2104      	movs	r1, #4
 80014d2:	4801      	ldr	r0, [pc, #4]	; (80014d8 <vRES_4_D+0x8>)
 80014d4:	f001 bbd8 	b.w	8002c88 <vResetBit>
 80014d8:	24001655 	.word	0x24001655

080014dc <vRES_4_E>:
void vRES_4_E(){      vResetBit(&reg.E, 4);}
 80014dc:	2104      	movs	r1, #4
 80014de:	4801      	ldr	r0, [pc, #4]	; (80014e4 <vRES_4_E+0x8>)
 80014e0:	f001 bbd2 	b.w	8002c88 <vResetBit>
 80014e4:	24001654 	.word	0x24001654

080014e8 <vRES_4_H>:
void vRES_4_H(){      vResetBit(&reg.H, 4);}
 80014e8:	2104      	movs	r1, #4
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <vRES_4_H+0x8>)
 80014ec:	f001 bbcc 	b.w	8002c88 <vResetBit>
 80014f0:	24001657 	.word	0x24001657

080014f4 <vRES_4_L>:
void vRES_4_L(){      vResetBit(&reg.L, 4);}
 80014f4:	2104      	movs	r1, #4
 80014f6:	4801      	ldr	r0, [pc, #4]	; (80014fc <vRES_4_L+0x8>)
 80014f8:	f001 bbc6 	b.w	8002c88 <vResetBit>
 80014fc:	24001656 	.word	0x24001656

08001500 <vRES_4_A>:
void vRES_4_A(){      vResetBit(&reg.A, 4);}
 8001500:	2104      	movs	r1, #4
 8001502:	4801      	ldr	r0, [pc, #4]	; (8001508 <vRES_4_A+0x8>)
 8001504:	f001 bbc0 	b.w	8002c88 <vResetBit>
 8001508:	24001651 	.word	0x24001651

0800150c <vRES_5_B>:
void vRES_5_B(){      vResetBit(&reg.B, 5);}
 800150c:	2105      	movs	r1, #5
 800150e:	4801      	ldr	r0, [pc, #4]	; (8001514 <vRES_5_B+0x8>)
 8001510:	f001 bbba 	b.w	8002c88 <vResetBit>
 8001514:	24001653 	.word	0x24001653

08001518 <vRES_5_C>:
void vRES_5_C(){      vResetBit(&reg.C, 5);}
 8001518:	2105      	movs	r1, #5
 800151a:	4801      	ldr	r0, [pc, #4]	; (8001520 <vRES_5_C+0x8>)
 800151c:	f001 bbb4 	b.w	8002c88 <vResetBit>
 8001520:	24001652 	.word	0x24001652

08001524 <vRES_5_D>:
void vRES_5_D(){      vResetBit(&reg.D, 5);}
 8001524:	2105      	movs	r1, #5
 8001526:	4801      	ldr	r0, [pc, #4]	; (800152c <vRES_5_D+0x8>)
 8001528:	f001 bbae 	b.w	8002c88 <vResetBit>
 800152c:	24001655 	.word	0x24001655

08001530 <vRES_5_E>:
void vRES_5_E(){      vResetBit(&reg.E, 5);}
 8001530:	2105      	movs	r1, #5
 8001532:	4801      	ldr	r0, [pc, #4]	; (8001538 <vRES_5_E+0x8>)
 8001534:	f001 bba8 	b.w	8002c88 <vResetBit>
 8001538:	24001654 	.word	0x24001654

0800153c <vRES_5_H>:
void vRES_5_H(){      vResetBit(&reg.H, 5);}
 800153c:	2105      	movs	r1, #5
 800153e:	4801      	ldr	r0, [pc, #4]	; (8001544 <vRES_5_H+0x8>)
 8001540:	f001 bba2 	b.w	8002c88 <vResetBit>
 8001544:	24001657 	.word	0x24001657

08001548 <vRES_5_L>:
void vRES_5_L(){      vResetBit(&reg.L, 5);}
 8001548:	2105      	movs	r1, #5
 800154a:	4801      	ldr	r0, [pc, #4]	; (8001550 <vRES_5_L+0x8>)
 800154c:	f001 bb9c 	b.w	8002c88 <vResetBit>
 8001550:	24001656 	.word	0x24001656

08001554 <vRES_5_A>:
void vRES_5_A(){      vResetBit(&reg.A, 5);}
 8001554:	2105      	movs	r1, #5
 8001556:	4801      	ldr	r0, [pc, #4]	; (800155c <vRES_5_A+0x8>)
 8001558:	f001 bb96 	b.w	8002c88 <vResetBit>
 800155c:	24001651 	.word	0x24001651

08001560 <vRES_6_B>:
void vRES_6_B(){      vResetBit(&reg.B, 6);}
 8001560:	2106      	movs	r1, #6
 8001562:	4801      	ldr	r0, [pc, #4]	; (8001568 <vRES_6_B+0x8>)
 8001564:	f001 bb90 	b.w	8002c88 <vResetBit>
 8001568:	24001653 	.word	0x24001653

0800156c <vRES_6_C>:
void vRES_6_C(){      vResetBit(&reg.C, 6);}
 800156c:	2106      	movs	r1, #6
 800156e:	4801      	ldr	r0, [pc, #4]	; (8001574 <vRES_6_C+0x8>)
 8001570:	f001 bb8a 	b.w	8002c88 <vResetBit>
 8001574:	24001652 	.word	0x24001652

08001578 <vRES_6_D>:
void vRES_6_D(){      vResetBit(&reg.D, 6);}
 8001578:	2106      	movs	r1, #6
 800157a:	4801      	ldr	r0, [pc, #4]	; (8001580 <vRES_6_D+0x8>)
 800157c:	f001 bb84 	b.w	8002c88 <vResetBit>
 8001580:	24001655 	.word	0x24001655

08001584 <vRES_6_E>:
void vRES_6_E(){      vResetBit(&reg.E, 6);}
 8001584:	2106      	movs	r1, #6
 8001586:	4801      	ldr	r0, [pc, #4]	; (800158c <vRES_6_E+0x8>)
 8001588:	f001 bb7e 	b.w	8002c88 <vResetBit>
 800158c:	24001654 	.word	0x24001654

08001590 <vRES_6_H>:
void vRES_6_H(){      vResetBit(&reg.H, 6);}
 8001590:	2106      	movs	r1, #6
 8001592:	4801      	ldr	r0, [pc, #4]	; (8001598 <vRES_6_H+0x8>)
 8001594:	f001 bb78 	b.w	8002c88 <vResetBit>
 8001598:	24001657 	.word	0x24001657

0800159c <vRES_6_L>:
void vRES_6_L(){      vResetBit(&reg.L, 6);}
 800159c:	2106      	movs	r1, #6
 800159e:	4801      	ldr	r0, [pc, #4]	; (80015a4 <vRES_6_L+0x8>)
 80015a0:	f001 bb72 	b.w	8002c88 <vResetBit>
 80015a4:	24001656 	.word	0x24001656

080015a8 <vRES_6_A>:
void vRES_6_A(){      vResetBit(&reg.A, 6);}
 80015a8:	2106      	movs	r1, #6
 80015aa:	4801      	ldr	r0, [pc, #4]	; (80015b0 <vRES_6_A+0x8>)
 80015ac:	f001 bb6c 	b.w	8002c88 <vResetBit>
 80015b0:	24001651 	.word	0x24001651

080015b4 <vRES_7_B>:
void vRES_7_B(){      vResetBit(&reg.B, 7);}
 80015b4:	2107      	movs	r1, #7
 80015b6:	4801      	ldr	r0, [pc, #4]	; (80015bc <vRES_7_B+0x8>)
 80015b8:	f001 bb66 	b.w	8002c88 <vResetBit>
 80015bc:	24001653 	.word	0x24001653

080015c0 <vRES_7_C>:
void vRES_7_C(){      vResetBit(&reg.C, 7);}
 80015c0:	2107      	movs	r1, #7
 80015c2:	4801      	ldr	r0, [pc, #4]	; (80015c8 <vRES_7_C+0x8>)
 80015c4:	f001 bb60 	b.w	8002c88 <vResetBit>
 80015c8:	24001652 	.word	0x24001652

080015cc <vRES_7_D>:
void vRES_7_D(){      vResetBit(&reg.D, 7);}
 80015cc:	2107      	movs	r1, #7
 80015ce:	4801      	ldr	r0, [pc, #4]	; (80015d4 <vRES_7_D+0x8>)
 80015d0:	f001 bb5a 	b.w	8002c88 <vResetBit>
 80015d4:	24001655 	.word	0x24001655

080015d8 <vRES_7_E>:
void vRES_7_E(){      vResetBit(&reg.E, 7);}
 80015d8:	2107      	movs	r1, #7
 80015da:	4801      	ldr	r0, [pc, #4]	; (80015e0 <vRES_7_E+0x8>)
 80015dc:	f001 bb54 	b.w	8002c88 <vResetBit>
 80015e0:	24001654 	.word	0x24001654

080015e4 <vRES_7_H>:
void vRES_7_H(){      vResetBit(&reg.H, 7);}
 80015e4:	2107      	movs	r1, #7
 80015e6:	4801      	ldr	r0, [pc, #4]	; (80015ec <vRES_7_H+0x8>)
 80015e8:	f001 bb4e 	b.w	8002c88 <vResetBit>
 80015ec:	24001657 	.word	0x24001657

080015f0 <vRES_7_L>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
 80015f0:	2107      	movs	r1, #7
 80015f2:	4801      	ldr	r0, [pc, #4]	; (80015f8 <vRES_7_L+0x8>)
 80015f4:	f001 bb48 	b.w	8002c88 <vResetBit>
 80015f8:	24001656 	.word	0x24001656

080015fc <vRES_7_A>:
void vRES_7_A(){      vResetBit(&reg.A, 7);}
 80015fc:	2107      	movs	r1, #7
 80015fe:	4801      	ldr	r0, [pc, #4]	; (8001604 <vRES_7_A+0x8>)
 8001600:	f001 bb42 	b.w	8002c88 <vResetBit>
 8001604:	24001651 	.word	0x24001651

08001608 <vJR_C_r8>:
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	4d08      	ldr	r5, [pc, #32]	; (800162c <vJR_C_r8+0x24>)
 800160c:	462c      	mov	r4, r5
 800160e:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001612:	3801      	subs	r0, #1
 8001614:	b280      	uxth	r0, r0
 8001616:	f002 f83b 	bl	8003690 <ucGBMemoryRead>
 800161a:	4629      	mov	r1, r5
 800161c:	4602      	mov	r2, r0
 800161e:	4620      	mov	r0, r4
 8001620:	f001 fc92 	bl	8002f48 <vGBFunctionJR_C>
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <vJR_C_r8+0x28>)
 8001626:	7018      	strb	r0, [r3, #0]
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	24001650 	.word	0x24001650
 8001630:	2400109c 	.word	0x2400109c

08001634 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADD_A_B+0xc>)
 8001636:	78ca      	ldrb	r2, [r1, #3]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc91 	b.w	8002f60 <vGBFunctionADD>
 800163e:	bf00      	nop
 8001640:	24001650 	.word	0x24001650

08001644 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADD_A_C+0xc>)
 8001646:	788a      	ldrb	r2, [r1, #2]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc89 	b.w	8002f60 <vGBFunctionADD>
 800164e:	bf00      	nop
 8001650:	24001650 	.word	0x24001650

08001654 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADD_A_D+0xc>)
 8001656:	794a      	ldrb	r2, [r1, #5]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc81 	b.w	8002f60 <vGBFunctionADD>
 800165e:	bf00      	nop
 8001660:	24001650 	.word	0x24001650

08001664 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 8001664:	4902      	ldr	r1, [pc, #8]	; (8001670 <vADD_A_E+0xc>)
 8001666:	790a      	ldrb	r2, [r1, #4]
 8001668:	1c48      	adds	r0, r1, #1
 800166a:	f001 bc79 	b.w	8002f60 <vGBFunctionADD>
 800166e:	bf00      	nop
 8001670:	24001650 	.word	0x24001650

08001674 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 8001674:	4902      	ldr	r1, [pc, #8]	; (8001680 <vADD_A_H+0xc>)
 8001676:	79ca      	ldrb	r2, [r1, #7]
 8001678:	1c48      	adds	r0, r1, #1
 800167a:	f001 bc71 	b.w	8002f60 <vGBFunctionADD>
 800167e:	bf00      	nop
 8001680:	24001650 	.word	0x24001650

08001684 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <vADD_A_L+0xc>)
 8001686:	798a      	ldrb	r2, [r1, #6]
 8001688:	1c48      	adds	r0, r1, #1
 800168a:	f001 bc69 	b.w	8002f60 <vGBFunctionADD>
 800168e:	bf00      	nop
 8001690:	24001650 	.word	0x24001650

08001694 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001694:	b510      	push	{r4, lr}
 8001696:	4c05      	ldr	r4, [pc, #20]	; (80016ac <vADD_A_HL+0x18>)
 8001698:	88e0      	ldrh	r0, [r4, #6]
 800169a:	f001 fff9 	bl	8003690 <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc5a 	b.w	8002f60 <vGBFunctionADD>
 80016ac:	24001650 	.word	0x24001650

080016b0 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <vADD_A_A+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016b8:	f001 bc52 	b.w	8002f60 <vGBFunctionADD>
 80016bc:	24001650 	.word	0x24001650

080016c0 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4c06      	ldr	r4, [pc, #24]	; (80016dc <vADD_A_d8+0x1c>)
 80016c4:	8960      	ldrh	r0, [r4, #10]
 80016c6:	3801      	subs	r0, #1
 80016c8:	b280      	uxth	r0, r0
 80016ca:	f001 ffe1 	bl	8003690 <ucGBMemoryRead>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4602      	mov	r2, r0
 80016d2:	1c60      	adds	r0, r4, #1
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f001 bc42 	b.w	8002f60 <vGBFunctionADD>
 80016dc:	24001650 	.word	0x24001650

080016e0 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vADC_A_B+0xc>)
 80016e2:	78ca      	ldrb	r2, [r1, #3]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc69 	b.w	8002fbc <vGBFunctionADC>
 80016ea:	bf00      	nop
 80016ec:	24001650 	.word	0x24001650

080016f0 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vADC_A_C+0xc>)
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc61 	b.w	8002fbc <vGBFunctionADC>
 80016fa:	bf00      	nop
 80016fc:	24001650 	.word	0x24001650

08001700 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vADC_A_D+0xc>)
 8001702:	794a      	ldrb	r2, [r1, #5]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc59 	b.w	8002fbc <vGBFunctionADC>
 800170a:	bf00      	nop
 800170c:	24001650 	.word	0x24001650

08001710 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001710:	4902      	ldr	r1, [pc, #8]	; (800171c <vADC_A_E+0xc>)
 8001712:	790a      	ldrb	r2, [r1, #4]
 8001714:	1c48      	adds	r0, r1, #1
 8001716:	f001 bc51 	b.w	8002fbc <vGBFunctionADC>
 800171a:	bf00      	nop
 800171c:	24001650 	.word	0x24001650

08001720 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001720:	4902      	ldr	r1, [pc, #8]	; (800172c <vADC_A_H+0xc>)
 8001722:	79ca      	ldrb	r2, [r1, #7]
 8001724:	1c48      	adds	r0, r1, #1
 8001726:	f001 bc49 	b.w	8002fbc <vGBFunctionADC>
 800172a:	bf00      	nop
 800172c:	24001650 	.word	0x24001650

08001730 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <vADC_A_L+0xc>)
 8001732:	798a      	ldrb	r2, [r1, #6]
 8001734:	1c48      	adds	r0, r1, #1
 8001736:	f001 bc41 	b.w	8002fbc <vGBFunctionADC>
 800173a:	bf00      	nop
 800173c:	24001650 	.word	0x24001650

08001740 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001740:	b510      	push	{r4, lr}
 8001742:	4c05      	ldr	r4, [pc, #20]	; (8001758 <vADC_A_HL+0x18>)
 8001744:	88e0      	ldrh	r0, [r4, #6]
 8001746:	f001 ffa3 	bl	8003690 <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bc32 	b.w	8002fbc <vGBFunctionADC>
 8001758:	24001650 	.word	0x24001650

0800175c <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <vADC_A_A+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001764:	f001 bc2a 	b.w	8002fbc <vGBFunctionADC>
 8001768:	24001650 	.word	0x24001650

0800176c <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800176c:	b510      	push	{r4, lr}
 800176e:	4c06      	ldr	r4, [pc, #24]	; (8001788 <vADC_A_d8+0x1c>)
 8001770:	8960      	ldrh	r0, [r4, #10]
 8001772:	3801      	subs	r0, #1
 8001774:	b280      	uxth	r0, r0
 8001776:	f001 ff8b 	bl	8003690 <ucGBMemoryRead>
 800177a:	4621      	mov	r1, r4
 800177c:	4602      	mov	r2, r0
 800177e:	1c60      	adds	r0, r4, #1
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f001 bc1a 	b.w	8002fbc <vGBFunctionADC>
 8001788:	24001650 	.word	0x24001650

0800178c <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSUB_B+0xc>)
 800178e:	78ca      	ldrb	r2, [r1, #3]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bc45 	b.w	8003020 <vGBFunctionSUB>
 8001796:	bf00      	nop
 8001798:	24001650 	.word	0x24001650

0800179c <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSUB_C+0xc>)
 800179e:	788a      	ldrb	r2, [r1, #2]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bc3d 	b.w	8003020 <vGBFunctionSUB>
 80017a6:	bf00      	nop
 80017a8:	24001650 	.word	0x24001650

080017ac <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSUB_D+0xc>)
 80017ae:	794a      	ldrb	r2, [r1, #5]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bc35 	b.w	8003020 <vGBFunctionSUB>
 80017b6:	bf00      	nop
 80017b8:	24001650 	.word	0x24001650

080017bc <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80017bc:	4902      	ldr	r1, [pc, #8]	; (80017c8 <vSUB_E+0xc>)
 80017be:	790a      	ldrb	r2, [r1, #4]
 80017c0:	1c48      	adds	r0, r1, #1
 80017c2:	f001 bc2d 	b.w	8003020 <vGBFunctionSUB>
 80017c6:	bf00      	nop
 80017c8:	24001650 	.word	0x24001650

080017cc <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 80017cc:	4902      	ldr	r1, [pc, #8]	; (80017d8 <vSUB_H+0xc>)
 80017ce:	79ca      	ldrb	r2, [r1, #7]
 80017d0:	1c48      	adds	r0, r1, #1
 80017d2:	f001 bc25 	b.w	8003020 <vGBFunctionSUB>
 80017d6:	bf00      	nop
 80017d8:	24001650 	.word	0x24001650

080017dc <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 80017dc:	4902      	ldr	r1, [pc, #8]	; (80017e8 <vSUB_L+0xc>)
 80017de:	798a      	ldrb	r2, [r1, #6]
 80017e0:	1c48      	adds	r0, r1, #1
 80017e2:	f001 bc1d 	b.w	8003020 <vGBFunctionSUB>
 80017e6:	bf00      	nop
 80017e8:	24001650 	.word	0x24001650

080017ec <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4c05      	ldr	r4, [pc, #20]	; (8001804 <vSUB_HL+0x18>)
 80017f0:	88e0      	ldrh	r0, [r4, #6]
 80017f2:	f001 ff4d 	bl	8003690 <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bc0e 	b.w	8003020 <vGBFunctionSUB>
 8001804:	24001650 	.word	0x24001650

08001808 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <vSUB_A+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001810:	f001 bc06 	b.w	8003020 <vGBFunctionSUB>
 8001814:	24001650 	.word	0x24001650

08001818 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001818:	b510      	push	{r4, lr}
 800181a:	4c06      	ldr	r4, [pc, #24]	; (8001834 <vSUB_d8+0x1c>)
 800181c:	8960      	ldrh	r0, [r4, #10]
 800181e:	3801      	subs	r0, #1
 8001820:	b280      	uxth	r0, r0
 8001822:	f001 ff35 	bl	8003690 <ucGBMemoryRead>
 8001826:	4621      	mov	r1, r4
 8001828:	4602      	mov	r2, r0
 800182a:	1c60      	adds	r0, r4, #1
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	f001 bbf6 	b.w	8003020 <vGBFunctionSUB>
 8001834:	24001650 	.word	0x24001650

08001838 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vSBC_A_B+0xc>)
 800183a:	78ca      	ldrb	r2, [r1, #3]
 800183c:	1c48      	adds	r0, r1, #1
 800183e:	f001 bc25 	b.w	800308c <vGBFunctionSBC>
 8001842:	bf00      	nop
 8001844:	24001650 	.word	0x24001650

08001848 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vSBC_A_C+0xc>)
 800184a:	788a      	ldrb	r2, [r1, #2]
 800184c:	1c48      	adds	r0, r1, #1
 800184e:	f001 bc1d 	b.w	800308c <vGBFunctionSBC>
 8001852:	bf00      	nop
 8001854:	24001650 	.word	0x24001650

08001858 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vSBC_A_D+0xc>)
 800185a:	794a      	ldrb	r2, [r1, #5]
 800185c:	1c48      	adds	r0, r1, #1
 800185e:	f001 bc15 	b.w	800308c <vGBFunctionSBC>
 8001862:	bf00      	nop
 8001864:	24001650 	.word	0x24001650

08001868 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vSBC_A_E+0xc>)
 800186a:	790a      	ldrb	r2, [r1, #4]
 800186c:	1c48      	adds	r0, r1, #1
 800186e:	f001 bc0d 	b.w	800308c <vGBFunctionSBC>
 8001872:	bf00      	nop
 8001874:	24001650 	.word	0x24001650

08001878 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 8001878:	4902      	ldr	r1, [pc, #8]	; (8001884 <vSBC_A_H+0xc>)
 800187a:	79ca      	ldrb	r2, [r1, #7]
 800187c:	1c48      	adds	r0, r1, #1
 800187e:	f001 bc05 	b.w	800308c <vGBFunctionSBC>
 8001882:	bf00      	nop
 8001884:	24001650 	.word	0x24001650

08001888 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 8001888:	4902      	ldr	r1, [pc, #8]	; (8001894 <vSBC_A_L+0xc>)
 800188a:	798a      	ldrb	r2, [r1, #6]
 800188c:	1c48      	adds	r0, r1, #1
 800188e:	f001 bbfd 	b.w	800308c <vGBFunctionSBC>
 8001892:	bf00      	nop
 8001894:	24001650 	.word	0x24001650

08001898 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001898:	b510      	push	{r4, lr}
 800189a:	4c05      	ldr	r4, [pc, #20]	; (80018b0 <vSBC_A_HL+0x18>)
 800189c:	88e0      	ldrh	r0, [r4, #6]
 800189e:	f001 fef7 	bl	8003690 <ucGBMemoryRead>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4602      	mov	r2, r0
 80018a6:	1c60      	adds	r0, r4, #1
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f001 bbee 	b.w	800308c <vGBFunctionSBC>
 80018b0:	24001650 	.word	0x24001650

080018b4 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <vSBC_A_A+0xc>)
 80018b6:	4601      	mov	r1, r0
 80018b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80018bc:	f001 bbe6 	b.w	800308c <vGBFunctionSBC>
 80018c0:	24001650 	.word	0x24001650

080018c4 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4c06      	ldr	r4, [pc, #24]	; (80018e0 <vSBC_A_d8+0x1c>)
 80018c8:	8960      	ldrh	r0, [r4, #10]
 80018ca:	3801      	subs	r0, #1
 80018cc:	b280      	uxth	r0, r0
 80018ce:	f001 fedf 	bl	8003690 <ucGBMemoryRead>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4602      	mov	r2, r0
 80018d6:	1c60      	adds	r0, r4, #1
 80018d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018dc:	f001 bbd6 	b.w	800308c <vGBFunctionSBC>
 80018e0:	24001650 	.word	0x24001650

080018e4 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 80018e4:	4902      	ldr	r1, [pc, #8]	; (80018f0 <vCP_B+0xc>)
 80018e6:	78ca      	ldrb	r2, [r1, #3]
 80018e8:	7848      	ldrb	r0, [r1, #1]
 80018ea:	f001 bc07 	b.w	80030fc <vGBFunctionCP>
 80018ee:	bf00      	nop
 80018f0:	24001650 	.word	0x24001650

080018f4 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 80018f4:	4902      	ldr	r1, [pc, #8]	; (8001900 <vCP_C+0xc>)
 80018f6:	788a      	ldrb	r2, [r1, #2]
 80018f8:	7848      	ldrb	r0, [r1, #1]
 80018fa:	f001 bbff 	b.w	80030fc <vGBFunctionCP>
 80018fe:	bf00      	nop
 8001900:	24001650 	.word	0x24001650

08001904 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001904:	4902      	ldr	r1, [pc, #8]	; (8001910 <vCP_D+0xc>)
 8001906:	794a      	ldrb	r2, [r1, #5]
 8001908:	7848      	ldrb	r0, [r1, #1]
 800190a:	f001 bbf7 	b.w	80030fc <vGBFunctionCP>
 800190e:	bf00      	nop
 8001910:	24001650 	.word	0x24001650

08001914 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001914:	4902      	ldr	r1, [pc, #8]	; (8001920 <vCP_E+0xc>)
 8001916:	790a      	ldrb	r2, [r1, #4]
 8001918:	7848      	ldrb	r0, [r1, #1]
 800191a:	f001 bbef 	b.w	80030fc <vGBFunctionCP>
 800191e:	bf00      	nop
 8001920:	24001650 	.word	0x24001650

08001924 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001924:	4902      	ldr	r1, [pc, #8]	; (8001930 <vCP_H+0xc>)
 8001926:	79ca      	ldrb	r2, [r1, #7]
 8001928:	7848      	ldrb	r0, [r1, #1]
 800192a:	f001 bbe7 	b.w	80030fc <vGBFunctionCP>
 800192e:	bf00      	nop
 8001930:	24001650 	.word	0x24001650

08001934 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <vCP_L+0xc>)
 8001936:	798a      	ldrb	r2, [r1, #6]
 8001938:	7848      	ldrb	r0, [r1, #1]
 800193a:	f001 bbdf 	b.w	80030fc <vGBFunctionCP>
 800193e:	bf00      	nop
 8001940:	24001650 	.word	0x24001650

08001944 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	4c06      	ldr	r4, [pc, #24]	; (8001960 <vCP_HL+0x1c>)
 8001948:	7865      	ldrb	r5, [r4, #1]
 800194a:	88e0      	ldrh	r0, [r4, #6]
 800194c:	f001 fea0 	bl	8003690 <ucGBMemoryRead>
 8001950:	4621      	mov	r1, r4
 8001952:	4602      	mov	r2, r0
 8001954:	4628      	mov	r0, r5
 8001956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195a:	f001 bbcf 	b.w	80030fc <vGBFunctionCP>
 800195e:	bf00      	nop
 8001960:	24001650 	.word	0x24001650

08001964 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 8001964:	4902      	ldr	r1, [pc, #8]	; (8001970 <vCP_A+0xc>)
 8001966:	784a      	ldrb	r2, [r1, #1]
 8001968:	4610      	mov	r0, r2
 800196a:	f001 bbc7 	b.w	80030fc <vGBFunctionCP>
 800196e:	bf00      	nop
 8001970:	24001650 	.word	0x24001650

08001974 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4c07      	ldr	r4, [pc, #28]	; (8001994 <vCP_d8+0x20>)
 8001978:	8960      	ldrh	r0, [r4, #10]
 800197a:	7865      	ldrb	r5, [r4, #1]
 800197c:	3801      	subs	r0, #1
 800197e:	b280      	uxth	r0, r0
 8001980:	f001 fe86 	bl	8003690 <ucGBMemoryRead>
 8001984:	4621      	mov	r1, r4
 8001986:	4602      	mov	r2, r0
 8001988:	4628      	mov	r0, r5
 800198a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800198e:	f001 bbb5 	b.w	80030fc <vGBFunctionCP>
 8001992:	bf00      	nop
 8001994:	24001650 	.word	0x24001650

08001998 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 8001998:	4901      	ldr	r1, [pc, #4]	; (80019a0 <vRET+0x8>)
 800199a:	1e88      	subs	r0, r1, #2
 800199c:	f001 bbcc 	b.w	8003138 <vGBFunctionRET>
 80019a0:	2400165a 	.word	0x2400165a

080019a4 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <vRETI+0x10>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <vRETI+0x14>)
 80019aa:	1e88      	subs	r0, r1, #2
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	f001 bbc3 	b.w	8003138 <vGBFunctionRET>
 80019b2:	bf00      	nop
 80019b4:	2400165a 	.word	0x2400165a
 80019b8:	2400109e 	.word	0x2400109e

080019bc <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80019bc:	4901      	ldr	r1, [pc, #4]	; (80019c4 <vPOP_BC+0x8>)
 80019be:	1d88      	adds	r0, r1, #6
 80019c0:	f001 bbce 	b.w	8003160 <vGBFunctionPOP>
 80019c4:	24001652 	.word	0x24001652

080019c8 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 80019c8:	4901      	ldr	r1, [pc, #4]	; (80019d0 <vPOP_DE+0x8>)
 80019ca:	1d08      	adds	r0, r1, #4
 80019cc:	f001 bbc8 	b.w	8003160 <vGBFunctionPOP>
 80019d0:	24001654 	.word	0x24001654

080019d4 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 80019d4:	4901      	ldr	r1, [pc, #4]	; (80019dc <vPOP_HL+0x8>)
 80019d6:	1c88      	adds	r0, r1, #2
 80019d8:	f001 bbc2 	b.w	8003160 <vGBFunctionPOP>
 80019dc:	24001656 	.word	0x24001656

080019e0 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4c05      	ldr	r4, [pc, #20]	; (80019f8 <vPOP_AF+0x18>)
 80019e4:	4621      	mov	r1, r4
 80019e6:	f104 0008 	add.w	r0, r4, #8
 80019ea:	f001 fbb9 	bl	8003160 <vGBFunctionPOP>
 80019ee:	8823      	ldrh	r3, [r4, #0]
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	8023      	strh	r3, [r4, #0]
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	24001650 	.word	0x24001650

080019fc <vJP_NZ_a16>:
void vJP_NZ_a16(){    ucCustomDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4d0d      	ldr	r5, [pc, #52]	; (8001a34 <vJP_NZ_a16+0x38>)
 8001a00:	8968      	ldrh	r0, [r5, #10]
 8001a02:	462c      	mov	r4, r5
 8001a04:	3802      	subs	r0, #2
 8001a06:	b280      	uxth	r0, r0
 8001a08:	f001 fe42 	bl	8003690 <ucGBMemoryRead>
 8001a0c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001a10:	4606      	mov	r6, r0
 8001a12:	1e58      	subs	r0, r3, #1
 8001a14:	b280      	uxth	r0, r0
 8001a16:	f001 fe3b 	bl	8003690 <ucGBMemoryRead>
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f001 f927 	bl	8002c70 <usConcat16BitBigEndian>
 8001a22:	4629      	mov	r1, r5
 8001a24:	4602      	mov	r2, r0
 8001a26:	4620      	mov	r0, r4
 8001a28:	f001 fb9c 	bl	8003164 <vGBFunctionJP_NZ_a16>
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <vJP_NZ_a16+0x3c>)
 8001a2e:	7018      	strb	r0, [r3, #0]
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	bf00      	nop
 8001a34:	24001650 	.word	0x24001650
 8001a38:	2400109c 	.word	0x2400109c

08001a3c <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  ucCustomDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <vCALL_NZ_a16+0x14>)
 8001a3e:	b508      	push	{r3, lr}
 8001a40:	f1a2 0108 	sub.w	r1, r2, #8
 8001a44:	1c90      	adds	r0, r2, #2
 8001a46:	f001 fba9 	bl	800319c <vGBFunctionCALL_NZ_a16>
 8001a4a:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <vCALL_NZ_a16+0x18>)
 8001a4c:	7018      	strb	r0, [r3, #0]
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	24001658 	.word	0x24001658
 8001a54:	2400109c 	.word	0x2400109c

08001a58 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001a58:	4901      	ldr	r1, [pc, #4]	; (8001a60 <vPUSH_BC+0x8>)
 8001a5a:	1d88      	adds	r0, r1, #6
 8001a5c:	f001 bb8a 	b.w	8003174 <vGBFunctionPUSH>
 8001a60:	24001652 	.word	0x24001652

08001a64 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4c04      	ldr	r4, [pc, #16]	; (8001a78 <vRST_00H+0x14>)
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1ea0      	subs	r0, r4, #2
 8001a6c:	f001 fb82 	bl	8003174 <vGBFunctionPUSH>
 8001a70:	3c0a      	subs	r4, #10
 8001a72:	2300      	movs	r3, #0
 8001a74:	8163      	strh	r3, [r4, #10]
 8001a76:	bd10      	pop	{r4, pc}
 8001a78:	2400165a 	.word	0x2400165a

08001a7c <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8001a7c:	490b      	ldr	r1, [pc, #44]	; (8001aac <vCALL_a16+0x30>)
 8001a7e:	b538      	push	{r3, r4, r5, lr}
 8001a80:	460c      	mov	r4, r1
 8001a82:	1e88      	subs	r0, r1, #2
 8001a84:	f001 fb76 	bl	8003174 <vGBFunctionPUSH>
 8001a88:	f834 090a 	ldrh.w	r0, [r4], #-10
 8001a8c:	3802      	subs	r0, #2
 8001a8e:	b280      	uxth	r0, r0
 8001a90:	f001 fdfe 	bl	8003690 <ucGBMemoryRead>
 8001a94:	8963      	ldrh	r3, [r4, #10]
 8001a96:	4605      	mov	r5, r0
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	b280      	uxth	r0, r0
 8001a9c:	f001 fdf8 	bl	8003690 <ucGBMemoryRead>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f001 f8e4 	bl	8002c70 <usConcat16BitBigEndian>
 8001aa8:	8160      	strh	r0, [r4, #10]
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
 8001aac:	2400165a 	.word	0x2400165a

08001ab0 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4c04      	ldr	r4, [pc, #16]	; (8001ac4 <vRST_08H+0x14>)
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	1ea0      	subs	r0, r4, #2
 8001ab8:	f001 fb5c 	bl	8003174 <vGBFunctionPUSH>
 8001abc:	2308      	movs	r3, #8
 8001abe:	8023      	strh	r3, [r4, #0]
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400165a 	.word	0x2400165a

08001ac8 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001ac8:	4901      	ldr	r1, [pc, #4]	; (8001ad0 <vPUSH_DE+0x8>)
 8001aca:	1d08      	adds	r0, r1, #4
 8001acc:	f001 bb52 	b.w	8003174 <vGBFunctionPUSH>
 8001ad0:	24001654 	.word	0x24001654

08001ad4 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4c04      	ldr	r4, [pc, #16]	; (8001ae8 <vRST_10H+0x14>)
 8001ad8:	4621      	mov	r1, r4
 8001ada:	1ea0      	subs	r0, r4, #2
 8001adc:	f001 fb4a 	bl	8003174 <vGBFunctionPUSH>
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	8023      	strh	r3, [r4, #0]
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2400165a 	.word	0x2400165a

08001aec <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4c04      	ldr	r4, [pc, #16]	; (8001b00 <vRST_18H+0x14>)
 8001af0:	4621      	mov	r1, r4
 8001af2:	1ea0      	subs	r0, r4, #2
 8001af4:	f001 fb3e 	bl	8003174 <vGBFunctionPUSH>
 8001af8:	2318      	movs	r3, #24
 8001afa:	8023      	strh	r3, [r4, #0]
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	bf00      	nop
 8001b00:	2400165a 	.word	0x2400165a

08001b04 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001b04:	4901      	ldr	r1, [pc, #4]	; (8001b0c <vPUSH_HL+0x8>)
 8001b06:	1c88      	adds	r0, r1, #2
 8001b08:	f001 bb34 	b.w	8003174 <vGBFunctionPUSH>
 8001b0c:	24001656 	.word	0x24001656

08001b10 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001b10:	b510      	push	{r4, lr}
 8001b12:	4c04      	ldr	r4, [pc, #16]	; (8001b24 <vRST20H+0x14>)
 8001b14:	4621      	mov	r1, r4
 8001b16:	1ea0      	subs	r0, r4, #2
 8001b18:	f001 fb2c 	bl	8003174 <vGBFunctionPUSH>
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	8023      	strh	r3, [r4, #0]
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	bf00      	nop
 8001b24:	2400165a 	.word	0x2400165a

08001b28 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	4c04      	ldr	r4, [pc, #16]	; (8001b3c <vRST_28H+0x14>)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	1ea0      	subs	r0, r4, #2
 8001b30:	f001 fb20 	bl	8003174 <vGBFunctionPUSH>
 8001b34:	2328      	movs	r3, #40	; 0x28
 8001b36:	8023      	strh	r3, [r4, #0]
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2400165a 	.word	0x2400165a

08001b40 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001b40:	4902      	ldr	r1, [pc, #8]	; (8001b4c <vPUSH_AF+0xc>)
 8001b42:	f101 0008 	add.w	r0, r1, #8
 8001b46:	f001 bb15 	b.w	8003174 <vGBFunctionPUSH>
 8001b4a:	bf00      	nop
 8001b4c:	24001650 	.word	0x24001650

08001b50 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4c04      	ldr	r4, [pc, #16]	; (8001b64 <vRST_30H+0x14>)
 8001b54:	4621      	mov	r1, r4
 8001b56:	1ea0      	subs	r0, r4, #2
 8001b58:	f001 fb0c 	bl	8003174 <vGBFunctionPUSH>
 8001b5c:	2330      	movs	r3, #48	; 0x30
 8001b5e:	8023      	strh	r3, [r4, #0]
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop
 8001b64:	2400165a 	.word	0x2400165a

08001b68 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4c04      	ldr	r4, [pc, #16]	; (8001b7c <vRST_38H+0x14>)
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	1ea0      	subs	r0, r4, #2
 8001b70:	f001 fb00 	bl	8003174 <vGBFunctionPUSH>
 8001b74:	2338      	movs	r3, #56	; 0x38
 8001b76:	8023      	strh	r3, [r4, #0]
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2400165a 	.word	0x2400165a

08001b80 <vJP_Z_a16>:
void vJP_Z_a16(){     ucCustomDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	4d0d      	ldr	r5, [pc, #52]	; (8001bb8 <vJP_Z_a16+0x38>)
 8001b84:	8968      	ldrh	r0, [r5, #10]
 8001b86:	462c      	mov	r4, r5
 8001b88:	3802      	subs	r0, #2
 8001b8a:	b280      	uxth	r0, r0
 8001b8c:	f001 fd80 	bl	8003690 <ucGBMemoryRead>
 8001b90:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b94:	4606      	mov	r6, r0
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	b280      	uxth	r0, r0
 8001b9a:	f001 fd79 	bl	8003690 <ucGBMemoryRead>
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f001 f865 	bl	8002c70 <usConcat16BitBigEndian>
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4620      	mov	r0, r4
 8001bac:	f001 fb12 	bl	80031d4 <vGBFunctionJP_Z_a16>
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <vJP_Z_a16+0x3c>)
 8001bb2:	7018      	strb	r0, [r3, #0]
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24001650 	.word	0x24001650
 8001bbc:	2400109c 	.word	0x2400109c

08001bc0 <vCALL_Z_a16>:
void vCALL_Z_a16(){   ucCustomDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <vCALL_Z_a16+0x14>)
 8001bc2:	b508      	push	{r3, lr}
 8001bc4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bc8:	1c90      	adds	r0, r2, #2
 8001bca:	f001 fb0b 	bl	80031e4 <vGBFunctionCALL_Z_a16>
 8001bce:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <vCALL_Z_a16+0x18>)
 8001bd0:	7018      	strb	r0, [r3, #0]
 8001bd2:	bd08      	pop	{r3, pc}
 8001bd4:	24001658 	.word	0x24001658
 8001bd8:	2400109c 	.word	0x2400109c

08001bdc <vJP_NC_a16>:
void vJP_NC_a16(){    ucCustomDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	4d0d      	ldr	r5, [pc, #52]	; (8001c14 <vJP_NC_a16+0x38>)
 8001be0:	8968      	ldrh	r0, [r5, #10]
 8001be2:	462c      	mov	r4, r5
 8001be4:	3802      	subs	r0, #2
 8001be6:	b280      	uxth	r0, r0
 8001be8:	f001 fd52 	bl	8003690 <ucGBMemoryRead>
 8001bec:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	b280      	uxth	r0, r0
 8001bf6:	f001 fd4b 	bl	8003690 <ucGBMemoryRead>
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f001 f837 	bl	8002c70 <usConcat16BitBigEndian>
 8001c02:	4629      	mov	r1, r5
 8001c04:	4602      	mov	r2, r0
 8001c06:	4620      	mov	r0, r4
 8001c08:	f001 fb08 	bl	800321c <vGBFunctionJP_NC_a16>
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <vJP_NC_a16+0x3c>)
 8001c0e:	7018      	strb	r0, [r3, #0]
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	bf00      	nop
 8001c14:	24001650 	.word	0x24001650
 8001c18:	2400109c 	.word	0x2400109c

08001c1c <vCALL_NC_a16>:
void vCALL_NC_a16(){  ucCustomDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <vCALL_NC_a16+0x14>)
 8001c1e:	b508      	push	{r3, lr}
 8001c20:	f1a2 0108 	sub.w	r1, r2, #8
 8001c24:	1c90      	adds	r0, r2, #2
 8001c26:	f001 fb01 	bl	800322c <vGBFunctionCALL_NC_a16>
 8001c2a:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <vCALL_NC_a16+0x18>)
 8001c2c:	7018      	strb	r0, [r3, #0]
 8001c2e:	bd08      	pop	{r3, pc}
 8001c30:	24001658 	.word	0x24001658
 8001c34:	2400109c 	.word	0x2400109c

08001c38 <vJP_C_a16>:
void vJP_C_a16(){     ucCustomDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4d0d      	ldr	r5, [pc, #52]	; (8001c70 <vJP_C_a16+0x38>)
 8001c3c:	8968      	ldrh	r0, [r5, #10]
 8001c3e:	462c      	mov	r4, r5
 8001c40:	3802      	subs	r0, #2
 8001c42:	b280      	uxth	r0, r0
 8001c44:	f001 fd24 	bl	8003690 <ucGBMemoryRead>
 8001c48:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001c4c:	4606      	mov	r6, r0
 8001c4e:	1e58      	subs	r0, r3, #1
 8001c50:	b280      	uxth	r0, r0
 8001c52:	f001 fd1d 	bl	8003690 <ucGBMemoryRead>
 8001c56:	4601      	mov	r1, r0
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f001 f809 	bl	8002c70 <usConcat16BitBigEndian>
 8001c5e:	4629      	mov	r1, r5
 8001c60:	4602      	mov	r2, r0
 8001c62:	4620      	mov	r0, r4
 8001c64:	f001 fafe 	bl	8003264 <vGBFunctionJP_C_a16>
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <vJP_C_a16+0x3c>)
 8001c6a:	7018      	strb	r0, [r3, #0]
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
 8001c6e:	bf00      	nop
 8001c70:	24001650 	.word	0x24001650
 8001c74:	2400109c 	.word	0x2400109c

08001c78 <vCALL_C_a16>:
void vCALL_C_a16(){   ucCustomDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <vCALL_C_a16+0x14>)
 8001c7a:	b508      	push	{r3, lr}
 8001c7c:	f1a2 0108 	sub.w	r1, r2, #8
 8001c80:	1c90      	adds	r0, r2, #2
 8001c82:	f001 faf7 	bl	8003274 <vGBFunctionCALL_C_a16>
 8001c86:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <vCALL_C_a16+0x18>)
 8001c88:	7018      	strb	r0, [r3, #0]
 8001c8a:	bd08      	pop	{r3, pc}
 8001c8c:	24001658 	.word	0x24001658
 8001c90:	2400109c 	.word	0x2400109c

08001c94 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4c07      	ldr	r4, [pc, #28]	; (8001cb4 <vADDs_SP_r8+0x20>)
 8001c98:	8960      	ldrh	r0, [r4, #10]
 8001c9a:	3801      	subs	r0, #1
 8001c9c:	b280      	uxth	r0, r0
 8001c9e:	f001 fcf7 	bl	8003690 <ucGBMemoryRead>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f104 0008 	add.w	r0, r4, #8
 8001caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cae:	f001 bafd 	b.w	80032ac <vGBFunctionADD_SP_r8>
 8001cb2:	bf00      	nop
 8001cb4:	24001650 	.word	0x24001650

08001cb8 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	4c07      	ldr	r4, [pc, #28]	; (8001cd8 <vLDs_HL_SP_r8+0x20>)
 8001cbc:	8960      	ldrh	r0, [r4, #10]
 8001cbe:	3801      	subs	r0, #1
 8001cc0:	b280      	uxth	r0, r0
 8001cc2:	f001 fce5 	bl	8003690 <ucGBMemoryRead>
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f104 0108 	add.w	r1, r4, #8
 8001cce:	1da0      	adds	r0, r4, #6
 8001cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd4:	f001 bb12 	b.w	80032fc <vGBFunctionLD_HL_SP_r8>
 8001cd8:	24001650 	.word	0x24001650

08001cdc <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	4c03      	ldr	r4, [pc, #12]	; (8001cec <vRLC_B+0x10>)
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	78e0      	ldrb	r0, [r4, #3]
 8001ce4:	f001 fb32 	bl	800334c <ucGBFunctionRLC>
 8001ce8:	70e0      	strb	r0, [r4, #3]
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	24001650 	.word	0x24001650

08001cf0 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4c03      	ldr	r4, [pc, #12]	; (8001d00 <vRLC_C+0x10>)
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	78a0      	ldrb	r0, [r4, #2]
 8001cf8:	f001 fb28 	bl	800334c <ucGBFunctionRLC>
 8001cfc:	70a0      	strb	r0, [r4, #2]
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	24001650 	.word	0x24001650

08001d04 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4c03      	ldr	r4, [pc, #12]	; (8001d14 <vRLC_D+0x10>)
 8001d08:	4621      	mov	r1, r4
 8001d0a:	7960      	ldrb	r0, [r4, #5]
 8001d0c:	f001 fb1e 	bl	800334c <ucGBFunctionRLC>
 8001d10:	7160      	strb	r0, [r4, #5]
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	24001650 	.word	0x24001650

08001d18 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4c03      	ldr	r4, [pc, #12]	; (8001d28 <vRLC_E+0x10>)
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	7920      	ldrb	r0, [r4, #4]
 8001d20:	f001 fb14 	bl	800334c <ucGBFunctionRLC>
 8001d24:	7120      	strb	r0, [r4, #4]
 8001d26:	bd10      	pop	{r4, pc}
 8001d28:	24001650 	.word	0x24001650

08001d2c <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4c03      	ldr	r4, [pc, #12]	; (8001d3c <vRLC_H+0x10>)
 8001d30:	4621      	mov	r1, r4
 8001d32:	79e0      	ldrb	r0, [r4, #7]
 8001d34:	f001 fb0a 	bl	800334c <ucGBFunctionRLC>
 8001d38:	71e0      	strb	r0, [r4, #7]
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	24001650 	.word	0x24001650

08001d40 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4c03      	ldr	r4, [pc, #12]	; (8001d50 <vRLC_L+0x10>)
 8001d44:	4621      	mov	r1, r4
 8001d46:	79a0      	ldrb	r0, [r4, #6]
 8001d48:	f001 fb00 	bl	800334c <ucGBFunctionRLC>
 8001d4c:	71a0      	strb	r0, [r4, #6]
 8001d4e:	bd10      	pop	{r4, pc}
 8001d50:	24001650 	.word	0x24001650

08001d54 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4d07      	ldr	r5, [pc, #28]	; (8001d74 <vRLC_HL+0x20>)
 8001d58:	88ec      	ldrh	r4, [r5, #6]
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f001 fc98 	bl	8003690 <ucGBMemoryRead>
 8001d60:	4629      	mov	r1, r5
 8001d62:	f001 faf3 	bl	800334c <ucGBFunctionRLC>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4620      	mov	r0, r4
 8001d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d6e:	f001 bcb7 	b.w	80036e0 <vGBMemoryWrite>
 8001d72:	bf00      	nop
 8001d74:	24001650 	.word	0x24001650

08001d78 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4c03      	ldr	r4, [pc, #12]	; (8001d88 <vRLC_A+0x10>)
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	7860      	ldrb	r0, [r4, #1]
 8001d80:	f001 fae4 	bl	800334c <ucGBFunctionRLC>
 8001d84:	7060      	strb	r0, [r4, #1]
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	24001650 	.word	0x24001650

08001d8c <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4c03      	ldr	r4, [pc, #12]	; (8001d9c <vRRC_B+0x10>)
 8001d90:	4621      	mov	r1, r4
 8001d92:	78e0      	ldrb	r0, [r4, #3]
 8001d94:	f001 faf6 	bl	8003384 <ucGBFunctionRRC>
 8001d98:	70e0      	strb	r0, [r4, #3]
 8001d9a:	bd10      	pop	{r4, pc}
 8001d9c:	24001650 	.word	0x24001650

08001da0 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001da0:	b510      	push	{r4, lr}
 8001da2:	4c03      	ldr	r4, [pc, #12]	; (8001db0 <vRRC_C+0x10>)
 8001da4:	4621      	mov	r1, r4
 8001da6:	78a0      	ldrb	r0, [r4, #2]
 8001da8:	f001 faec 	bl	8003384 <ucGBFunctionRRC>
 8001dac:	70a0      	strb	r0, [r4, #2]
 8001dae:	bd10      	pop	{r4, pc}
 8001db0:	24001650 	.word	0x24001650

08001db4 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4c03      	ldr	r4, [pc, #12]	; (8001dc4 <vRRC_D+0x10>)
 8001db8:	4621      	mov	r1, r4
 8001dba:	7960      	ldrb	r0, [r4, #5]
 8001dbc:	f001 fae2 	bl	8003384 <ucGBFunctionRRC>
 8001dc0:	7160      	strb	r0, [r4, #5]
 8001dc2:	bd10      	pop	{r4, pc}
 8001dc4:	24001650 	.word	0x24001650

08001dc8 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	4c03      	ldr	r4, [pc, #12]	; (8001dd8 <vRRC_E+0x10>)
 8001dcc:	4621      	mov	r1, r4
 8001dce:	7920      	ldrb	r0, [r4, #4]
 8001dd0:	f001 fad8 	bl	8003384 <ucGBFunctionRRC>
 8001dd4:	7120      	strb	r0, [r4, #4]
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	24001650 	.word	0x24001650

08001ddc <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4c03      	ldr	r4, [pc, #12]	; (8001dec <vRRC_H+0x10>)
 8001de0:	4621      	mov	r1, r4
 8001de2:	79e0      	ldrb	r0, [r4, #7]
 8001de4:	f001 face 	bl	8003384 <ucGBFunctionRRC>
 8001de8:	71e0      	strb	r0, [r4, #7]
 8001dea:	bd10      	pop	{r4, pc}
 8001dec:	24001650 	.word	0x24001650

08001df0 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4c03      	ldr	r4, [pc, #12]	; (8001e00 <vRRC_L+0x10>)
 8001df4:	4621      	mov	r1, r4
 8001df6:	79a0      	ldrb	r0, [r4, #6]
 8001df8:	f001 fac4 	bl	8003384 <ucGBFunctionRRC>
 8001dfc:	71a0      	strb	r0, [r4, #6]
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	24001650 	.word	0x24001650

08001e04 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d07      	ldr	r5, [pc, #28]	; (8001e24 <vRRC_HL+0x20>)
 8001e08:	88ec      	ldrh	r4, [r5, #6]
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f001 fc40 	bl	8003690 <ucGBMemoryRead>
 8001e10:	4629      	mov	r1, r5
 8001e12:	f001 fab7 	bl	8003384 <ucGBFunctionRRC>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4620      	mov	r0, r4
 8001e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e1e:	f001 bc5f 	b.w	80036e0 <vGBMemoryWrite>
 8001e22:	bf00      	nop
 8001e24:	24001650 	.word	0x24001650

08001e28 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4c03      	ldr	r4, [pc, #12]	; (8001e38 <vRRC_A+0x10>)
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	7860      	ldrb	r0, [r4, #1]
 8001e30:	f001 faa8 	bl	8003384 <ucGBFunctionRRC>
 8001e34:	7060      	strb	r0, [r4, #1]
 8001e36:	bd10      	pop	{r4, pc}
 8001e38:	24001650 	.word	0x24001650

08001e3c <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001e3c:	b510      	push	{r4, lr}
 8001e3e:	4c03      	ldr	r4, [pc, #12]	; (8001e4c <vRL_B+0x10>)
 8001e40:	4621      	mov	r1, r4
 8001e42:	78e0      	ldrb	r0, [r4, #3]
 8001e44:	f001 faba 	bl	80033bc <ucGBFunctionRL>
 8001e48:	70e0      	strb	r0, [r4, #3]
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	24001650 	.word	0x24001650

08001e50 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4c03      	ldr	r4, [pc, #12]	; (8001e60 <vRL_C+0x10>)
 8001e54:	4621      	mov	r1, r4
 8001e56:	78a0      	ldrb	r0, [r4, #2]
 8001e58:	f001 fab0 	bl	80033bc <ucGBFunctionRL>
 8001e5c:	70a0      	strb	r0, [r4, #2]
 8001e5e:	bd10      	pop	{r4, pc}
 8001e60:	24001650 	.word	0x24001650

08001e64 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4c03      	ldr	r4, [pc, #12]	; (8001e74 <vRL_D+0x10>)
 8001e68:	4621      	mov	r1, r4
 8001e6a:	7960      	ldrb	r0, [r4, #5]
 8001e6c:	f001 faa6 	bl	80033bc <ucGBFunctionRL>
 8001e70:	7160      	strb	r0, [r4, #5]
 8001e72:	bd10      	pop	{r4, pc}
 8001e74:	24001650 	.word	0x24001650

08001e78 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	4c03      	ldr	r4, [pc, #12]	; (8001e88 <vRL_E+0x10>)
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	7920      	ldrb	r0, [r4, #4]
 8001e80:	f001 fa9c 	bl	80033bc <ucGBFunctionRL>
 8001e84:	7120      	strb	r0, [r4, #4]
 8001e86:	bd10      	pop	{r4, pc}
 8001e88:	24001650 	.word	0x24001650

08001e8c <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	4c03      	ldr	r4, [pc, #12]	; (8001e9c <vRL_H+0x10>)
 8001e90:	4621      	mov	r1, r4
 8001e92:	79e0      	ldrb	r0, [r4, #7]
 8001e94:	f001 fa92 	bl	80033bc <ucGBFunctionRL>
 8001e98:	71e0      	strb	r0, [r4, #7]
 8001e9a:	bd10      	pop	{r4, pc}
 8001e9c:	24001650 	.word	0x24001650

08001ea0 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4c03      	ldr	r4, [pc, #12]	; (8001eb0 <vRL_L+0x10>)
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	79a0      	ldrb	r0, [r4, #6]
 8001ea8:	f001 fa88 	bl	80033bc <ucGBFunctionRL>
 8001eac:	71a0      	strb	r0, [r4, #6]
 8001eae:	bd10      	pop	{r4, pc}
 8001eb0:	24001650 	.word	0x24001650

08001eb4 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d07      	ldr	r5, [pc, #28]	; (8001ed4 <vRL_HL+0x20>)
 8001eb8:	88ec      	ldrh	r4, [r5, #6]
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f001 fbe8 	bl	8003690 <ucGBMemoryRead>
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f001 fa7b 	bl	80033bc <ucGBFunctionRL>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ece:	f001 bc07 	b.w	80036e0 <vGBMemoryWrite>
 8001ed2:	bf00      	nop
 8001ed4:	24001650 	.word	0x24001650

08001ed8 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4c03      	ldr	r4, [pc, #12]	; (8001ee8 <vRL_A+0x10>)
 8001edc:	4621      	mov	r1, r4
 8001ede:	7860      	ldrb	r0, [r4, #1]
 8001ee0:	f001 fa6c 	bl	80033bc <ucGBFunctionRL>
 8001ee4:	7060      	strb	r0, [r4, #1]
 8001ee6:	bd10      	pop	{r4, pc}
 8001ee8:	24001650 	.word	0x24001650

08001eec <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001eec:	b510      	push	{r4, lr}
 8001eee:	4c03      	ldr	r4, [pc, #12]	; (8001efc <vRR_B+0x10>)
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	78e0      	ldrb	r0, [r4, #3]
 8001ef4:	f001 fa7c 	bl	80033f0 <ucGBFunctionRR>
 8001ef8:	70e0      	strb	r0, [r4, #3]
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	24001650 	.word	0x24001650

08001f00 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4c03      	ldr	r4, [pc, #12]	; (8001f10 <vRR_C+0x10>)
 8001f04:	4621      	mov	r1, r4
 8001f06:	78a0      	ldrb	r0, [r4, #2]
 8001f08:	f001 fa72 	bl	80033f0 <ucGBFunctionRR>
 8001f0c:	70a0      	strb	r0, [r4, #2]
 8001f0e:	bd10      	pop	{r4, pc}
 8001f10:	24001650 	.word	0x24001650

08001f14 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4c03      	ldr	r4, [pc, #12]	; (8001f24 <vRR_D+0x10>)
 8001f18:	4621      	mov	r1, r4
 8001f1a:	7960      	ldrb	r0, [r4, #5]
 8001f1c:	f001 fa68 	bl	80033f0 <ucGBFunctionRR>
 8001f20:	7160      	strb	r0, [r4, #5]
 8001f22:	bd10      	pop	{r4, pc}
 8001f24:	24001650 	.word	0x24001650

08001f28 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	4c03      	ldr	r4, [pc, #12]	; (8001f38 <vRR_E+0x10>)
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	7920      	ldrb	r0, [r4, #4]
 8001f30:	f001 fa5e 	bl	80033f0 <ucGBFunctionRR>
 8001f34:	7120      	strb	r0, [r4, #4]
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	24001650 	.word	0x24001650

08001f3c <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	4c03      	ldr	r4, [pc, #12]	; (8001f4c <vRR_H+0x10>)
 8001f40:	4621      	mov	r1, r4
 8001f42:	79e0      	ldrb	r0, [r4, #7]
 8001f44:	f001 fa54 	bl	80033f0 <ucGBFunctionRR>
 8001f48:	71e0      	strb	r0, [r4, #7]
 8001f4a:	bd10      	pop	{r4, pc}
 8001f4c:	24001650 	.word	0x24001650

08001f50 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4c03      	ldr	r4, [pc, #12]	; (8001f60 <vRR_L+0x10>)
 8001f54:	4621      	mov	r1, r4
 8001f56:	79a0      	ldrb	r0, [r4, #6]
 8001f58:	f001 fa4a 	bl	80033f0 <ucGBFunctionRR>
 8001f5c:	71a0      	strb	r0, [r4, #6]
 8001f5e:	bd10      	pop	{r4, pc}
 8001f60:	24001650 	.word	0x24001650

08001f64 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d07      	ldr	r5, [pc, #28]	; (8001f84 <vRR_HL+0x20>)
 8001f68:	88ec      	ldrh	r4, [r5, #6]
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f001 fb90 	bl	8003690 <ucGBMemoryRead>
 8001f70:	4629      	mov	r1, r5
 8001f72:	f001 fa3d 	bl	80033f0 <ucGBFunctionRR>
 8001f76:	4601      	mov	r1, r0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f7e:	f001 bbaf 	b.w	80036e0 <vGBMemoryWrite>
 8001f82:	bf00      	nop
 8001f84:	24001650 	.word	0x24001650

08001f88 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4c03      	ldr	r4, [pc, #12]	; (8001f98 <vRR_A+0x10>)
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	7860      	ldrb	r0, [r4, #1]
 8001f90:	f001 fa2e 	bl	80033f0 <ucGBFunctionRR>
 8001f94:	7060      	strb	r0, [r4, #1]
 8001f96:	bd10      	pop	{r4, pc}
 8001f98:	24001650 	.word	0x24001650

08001f9c <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4c03      	ldr	r4, [pc, #12]	; (8001fac <vSLA_B+0x10>)
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	78e0      	ldrb	r0, [r4, #3]
 8001fa4:	f001 fa40 	bl	8003428 <ucGBFunctionSLA>
 8001fa8:	70e0      	strb	r0, [r4, #3]
 8001faa:	bd10      	pop	{r4, pc}
 8001fac:	24001650 	.word	0x24001650

08001fb0 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4c03      	ldr	r4, [pc, #12]	; (8001fc0 <vSLA_C+0x10>)
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	78a0      	ldrb	r0, [r4, #2]
 8001fb8:	f001 fa36 	bl	8003428 <ucGBFunctionSLA>
 8001fbc:	70a0      	strb	r0, [r4, #2]
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	24001650 	.word	0x24001650

08001fc4 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	4c03      	ldr	r4, [pc, #12]	; (8001fd4 <vSLA_D+0x10>)
 8001fc8:	4621      	mov	r1, r4
 8001fca:	7960      	ldrb	r0, [r4, #5]
 8001fcc:	f001 fa2c 	bl	8003428 <ucGBFunctionSLA>
 8001fd0:	7160      	strb	r0, [r4, #5]
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	24001650 	.word	0x24001650

08001fd8 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	4c03      	ldr	r4, [pc, #12]	; (8001fe8 <vSLA_E+0x10>)
 8001fdc:	4621      	mov	r1, r4
 8001fde:	7920      	ldrb	r0, [r4, #4]
 8001fe0:	f001 fa22 	bl	8003428 <ucGBFunctionSLA>
 8001fe4:	7120      	strb	r0, [r4, #4]
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	24001650 	.word	0x24001650

08001fec <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4c03      	ldr	r4, [pc, #12]	; (8001ffc <vSLA_H+0x10>)
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	79e0      	ldrb	r0, [r4, #7]
 8001ff4:	f001 fa18 	bl	8003428 <ucGBFunctionSLA>
 8001ff8:	71e0      	strb	r0, [r4, #7]
 8001ffa:	bd10      	pop	{r4, pc}
 8001ffc:	24001650 	.word	0x24001650

08002000 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8002000:	b510      	push	{r4, lr}
 8002002:	4c03      	ldr	r4, [pc, #12]	; (8002010 <vSLA_L+0x10>)
 8002004:	4621      	mov	r1, r4
 8002006:	79a0      	ldrb	r0, [r4, #6]
 8002008:	f001 fa0e 	bl	8003428 <ucGBFunctionSLA>
 800200c:	71a0      	strb	r0, [r4, #6]
 800200e:	bd10      	pop	{r4, pc}
 8002010:	24001650 	.word	0x24001650

08002014 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4d07      	ldr	r5, [pc, #28]	; (8002034 <vSLA_HL+0x20>)
 8002018:	88ec      	ldrh	r4, [r5, #6]
 800201a:	4620      	mov	r0, r4
 800201c:	f001 fb38 	bl	8003690 <ucGBMemoryRead>
 8002020:	4629      	mov	r1, r5
 8002022:	f001 fa01 	bl	8003428 <ucGBFunctionSLA>
 8002026:	4601      	mov	r1, r0
 8002028:	4620      	mov	r0, r4
 800202a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800202e:	f001 bb57 	b.w	80036e0 <vGBMemoryWrite>
 8002032:	bf00      	nop
 8002034:	24001650 	.word	0x24001650

08002038 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8002038:	b510      	push	{r4, lr}
 800203a:	4c03      	ldr	r4, [pc, #12]	; (8002048 <vSLA_A+0x10>)
 800203c:	4621      	mov	r1, r4
 800203e:	7860      	ldrb	r0, [r4, #1]
 8002040:	f001 f9f2 	bl	8003428 <ucGBFunctionSLA>
 8002044:	7060      	strb	r0, [r4, #1]
 8002046:	bd10      	pop	{r4, pc}
 8002048:	24001650 	.word	0x24001650

0800204c <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 800204c:	b510      	push	{r4, lr}
 800204e:	4c03      	ldr	r4, [pc, #12]	; (800205c <vSRA_B+0x10>)
 8002050:	4621      	mov	r1, r4
 8002052:	78e0      	ldrb	r0, [r4, #3]
 8002054:	f001 fa00 	bl	8003458 <ucGBFunctionSRA>
 8002058:	70e0      	strb	r0, [r4, #3]
 800205a:	bd10      	pop	{r4, pc}
 800205c:	24001650 	.word	0x24001650

08002060 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8002060:	b510      	push	{r4, lr}
 8002062:	4c03      	ldr	r4, [pc, #12]	; (8002070 <vSRA_C+0x10>)
 8002064:	4621      	mov	r1, r4
 8002066:	78a0      	ldrb	r0, [r4, #2]
 8002068:	f001 f9f6 	bl	8003458 <ucGBFunctionSRA>
 800206c:	70a0      	strb	r0, [r4, #2]
 800206e:	bd10      	pop	{r4, pc}
 8002070:	24001650 	.word	0x24001650

08002074 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8002074:	b510      	push	{r4, lr}
 8002076:	4c03      	ldr	r4, [pc, #12]	; (8002084 <vSRA_D+0x10>)
 8002078:	4621      	mov	r1, r4
 800207a:	7960      	ldrb	r0, [r4, #5]
 800207c:	f001 f9ec 	bl	8003458 <ucGBFunctionSRA>
 8002080:	7160      	strb	r0, [r4, #5]
 8002082:	bd10      	pop	{r4, pc}
 8002084:	24001650 	.word	0x24001650

08002088 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8002088:	b510      	push	{r4, lr}
 800208a:	4c03      	ldr	r4, [pc, #12]	; (8002098 <vSRA_E+0x10>)
 800208c:	4621      	mov	r1, r4
 800208e:	7920      	ldrb	r0, [r4, #4]
 8002090:	f001 f9e2 	bl	8003458 <ucGBFunctionSRA>
 8002094:	7120      	strb	r0, [r4, #4]
 8002096:	bd10      	pop	{r4, pc}
 8002098:	24001650 	.word	0x24001650

0800209c <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 800209c:	b510      	push	{r4, lr}
 800209e:	4c03      	ldr	r4, [pc, #12]	; (80020ac <vSRA_H+0x10>)
 80020a0:	4621      	mov	r1, r4
 80020a2:	79e0      	ldrb	r0, [r4, #7]
 80020a4:	f001 f9d8 	bl	8003458 <ucGBFunctionSRA>
 80020a8:	71e0      	strb	r0, [r4, #7]
 80020aa:	bd10      	pop	{r4, pc}
 80020ac:	24001650 	.word	0x24001650

080020b0 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4c03      	ldr	r4, [pc, #12]	; (80020c0 <vSRA_L+0x10>)
 80020b4:	4621      	mov	r1, r4
 80020b6:	79a0      	ldrb	r0, [r4, #6]
 80020b8:	f001 f9ce 	bl	8003458 <ucGBFunctionSRA>
 80020bc:	71a0      	strb	r0, [r4, #6]
 80020be:	bd10      	pop	{r4, pc}
 80020c0:	24001650 	.word	0x24001650

080020c4 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4d07      	ldr	r5, [pc, #28]	; (80020e4 <vSRA_HL+0x20>)
 80020c8:	88ec      	ldrh	r4, [r5, #6]
 80020ca:	4620      	mov	r0, r4
 80020cc:	f001 fae0 	bl	8003690 <ucGBMemoryRead>
 80020d0:	4629      	mov	r1, r5
 80020d2:	f001 f9c1 	bl	8003458 <ucGBFunctionSRA>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4620      	mov	r0, r4
 80020da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020de:	f001 baff 	b.w	80036e0 <vGBMemoryWrite>
 80020e2:	bf00      	nop
 80020e4:	24001650 	.word	0x24001650

080020e8 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4c03      	ldr	r4, [pc, #12]	; (80020f8 <vSRA_A+0x10>)
 80020ec:	4621      	mov	r1, r4
 80020ee:	7860      	ldrb	r0, [r4, #1]
 80020f0:	f001 f9b2 	bl	8003458 <ucGBFunctionSRA>
 80020f4:	7060      	strb	r0, [r4, #1]
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	24001650 	.word	0x24001650

080020fc <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4c03      	ldr	r4, [pc, #12]	; (800210c <vSWAP_B+0x10>)
 8002100:	4621      	mov	r1, r4
 8002102:	78e0      	ldrb	r0, [r4, #3]
 8002104:	f001 f9c2 	bl	800348c <ucGBFunctionSWAP>
 8002108:	70e0      	strb	r0, [r4, #3]
 800210a:	bd10      	pop	{r4, pc}
 800210c:	24001650 	.word	0x24001650

08002110 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002110:	b510      	push	{r4, lr}
 8002112:	4c03      	ldr	r4, [pc, #12]	; (8002120 <vSWAP_C+0x10>)
 8002114:	4621      	mov	r1, r4
 8002116:	78a0      	ldrb	r0, [r4, #2]
 8002118:	f001 f9b8 	bl	800348c <ucGBFunctionSWAP>
 800211c:	70a0      	strb	r0, [r4, #2]
 800211e:	bd10      	pop	{r4, pc}
 8002120:	24001650 	.word	0x24001650

08002124 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002124:	b510      	push	{r4, lr}
 8002126:	4c03      	ldr	r4, [pc, #12]	; (8002134 <vSWAP_D+0x10>)
 8002128:	4621      	mov	r1, r4
 800212a:	7960      	ldrb	r0, [r4, #5]
 800212c:	f001 f9ae 	bl	800348c <ucGBFunctionSWAP>
 8002130:	7160      	strb	r0, [r4, #5]
 8002132:	bd10      	pop	{r4, pc}
 8002134:	24001650 	.word	0x24001650

08002138 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002138:	b510      	push	{r4, lr}
 800213a:	4c03      	ldr	r4, [pc, #12]	; (8002148 <vSWAP_E+0x10>)
 800213c:	4621      	mov	r1, r4
 800213e:	7920      	ldrb	r0, [r4, #4]
 8002140:	f001 f9a4 	bl	800348c <ucGBFunctionSWAP>
 8002144:	7120      	strb	r0, [r4, #4]
 8002146:	bd10      	pop	{r4, pc}
 8002148:	24001650 	.word	0x24001650

0800214c <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 800214c:	b510      	push	{r4, lr}
 800214e:	4c03      	ldr	r4, [pc, #12]	; (800215c <vSWAP_H+0x10>)
 8002150:	4621      	mov	r1, r4
 8002152:	79e0      	ldrb	r0, [r4, #7]
 8002154:	f001 f99a 	bl	800348c <ucGBFunctionSWAP>
 8002158:	71e0      	strb	r0, [r4, #7]
 800215a:	bd10      	pop	{r4, pc}
 800215c:	24001650 	.word	0x24001650

08002160 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002160:	b510      	push	{r4, lr}
 8002162:	4c03      	ldr	r4, [pc, #12]	; (8002170 <vSWAP_L+0x10>)
 8002164:	4621      	mov	r1, r4
 8002166:	79a0      	ldrb	r0, [r4, #6]
 8002168:	f001 f990 	bl	800348c <ucGBFunctionSWAP>
 800216c:	71a0      	strb	r0, [r4, #6]
 800216e:	bd10      	pop	{r4, pc}
 8002170:	24001650 	.word	0x24001650

08002174 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4d07      	ldr	r5, [pc, #28]	; (8002194 <vSWAP_HL+0x20>)
 8002178:	88ec      	ldrh	r4, [r5, #6]
 800217a:	4620      	mov	r0, r4
 800217c:	f001 fa88 	bl	8003690 <ucGBMemoryRead>
 8002180:	4629      	mov	r1, r5
 8002182:	f001 f983 	bl	800348c <ucGBFunctionSWAP>
 8002186:	4601      	mov	r1, r0
 8002188:	4620      	mov	r0, r4
 800218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800218e:	f001 baa7 	b.w	80036e0 <vGBMemoryWrite>
 8002192:	bf00      	nop
 8002194:	24001650 	.word	0x24001650

08002198 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 8002198:	b510      	push	{r4, lr}
 800219a:	4c03      	ldr	r4, [pc, #12]	; (80021a8 <vSWAP_A+0x10>)
 800219c:	4621      	mov	r1, r4
 800219e:	7860      	ldrb	r0, [r4, #1]
 80021a0:	f001 f974 	bl	800348c <ucGBFunctionSWAP>
 80021a4:	7060      	strb	r0, [r4, #1]
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	24001650 	.word	0x24001650

080021ac <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80021ac:	b510      	push	{r4, lr}
 80021ae:	4c03      	ldr	r4, [pc, #12]	; (80021bc <vSRL_B+0x10>)
 80021b0:	4621      	mov	r1, r4
 80021b2:	78e0      	ldrb	r0, [r4, #3]
 80021b4:	f001 f980 	bl	80034b8 <ucGBFunctionSRL>
 80021b8:	70e0      	strb	r0, [r4, #3]
 80021ba:	bd10      	pop	{r4, pc}
 80021bc:	24001650 	.word	0x24001650

080021c0 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4c03      	ldr	r4, [pc, #12]	; (80021d0 <vSRL_C+0x10>)
 80021c4:	4621      	mov	r1, r4
 80021c6:	78a0      	ldrb	r0, [r4, #2]
 80021c8:	f001 f976 	bl	80034b8 <ucGBFunctionSRL>
 80021cc:	70a0      	strb	r0, [r4, #2]
 80021ce:	bd10      	pop	{r4, pc}
 80021d0:	24001650 	.word	0x24001650

080021d4 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 80021d4:	b510      	push	{r4, lr}
 80021d6:	4c03      	ldr	r4, [pc, #12]	; (80021e4 <vSRL_D+0x10>)
 80021d8:	4621      	mov	r1, r4
 80021da:	7960      	ldrb	r0, [r4, #5]
 80021dc:	f001 f96c 	bl	80034b8 <ucGBFunctionSRL>
 80021e0:	7160      	strb	r0, [r4, #5]
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	24001650 	.word	0x24001650

080021e8 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4c03      	ldr	r4, [pc, #12]	; (80021f8 <vSRL_E+0x10>)
 80021ec:	4621      	mov	r1, r4
 80021ee:	7920      	ldrb	r0, [r4, #4]
 80021f0:	f001 f962 	bl	80034b8 <ucGBFunctionSRL>
 80021f4:	7120      	strb	r0, [r4, #4]
 80021f6:	bd10      	pop	{r4, pc}
 80021f8:	24001650 	.word	0x24001650

080021fc <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4c03      	ldr	r4, [pc, #12]	; (800220c <vSRL_H+0x10>)
 8002200:	4621      	mov	r1, r4
 8002202:	79e0      	ldrb	r0, [r4, #7]
 8002204:	f001 f958 	bl	80034b8 <ucGBFunctionSRL>
 8002208:	71e0      	strb	r0, [r4, #7]
 800220a:	bd10      	pop	{r4, pc}
 800220c:	24001650 	.word	0x24001650

08002210 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002210:	b510      	push	{r4, lr}
 8002212:	4c03      	ldr	r4, [pc, #12]	; (8002220 <vSRL_L+0x10>)
 8002214:	4621      	mov	r1, r4
 8002216:	79a0      	ldrb	r0, [r4, #6]
 8002218:	f001 f94e 	bl	80034b8 <ucGBFunctionSRL>
 800221c:	71a0      	strb	r0, [r4, #6]
 800221e:	bd10      	pop	{r4, pc}
 8002220:	24001650 	.word	0x24001650

08002224 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	; (8002244 <vSRL_HL+0x20>)
 8002228:	88ec      	ldrh	r4, [r5, #6]
 800222a:	4620      	mov	r0, r4
 800222c:	f001 fa30 	bl	8003690 <ucGBMemoryRead>
 8002230:	4629      	mov	r1, r5
 8002232:	f001 f941 	bl	80034b8 <ucGBFunctionSRL>
 8002236:	4601      	mov	r1, r0
 8002238:	4620      	mov	r0, r4
 800223a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800223e:	f001 ba4f 	b.w	80036e0 <vGBMemoryWrite>
 8002242:	bf00      	nop
 8002244:	24001650 	.word	0x24001650

08002248 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002248:	b510      	push	{r4, lr}
 800224a:	4c03      	ldr	r4, [pc, #12]	; (8002258 <vSRL_A+0x10>)
 800224c:	4621      	mov	r1, r4
 800224e:	7860      	ldrb	r0, [r4, #1]
 8002250:	f001 f932 	bl	80034b8 <ucGBFunctionSRL>
 8002254:	7060      	strb	r0, [r4, #1]
 8002256:	bd10      	pop	{r4, pc}
 8002258:	24001650 	.word	0x24001650

0800225c <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_0_B+0xc>)
 800225e:	2100      	movs	r1, #0
 8002260:	78d0      	ldrb	r0, [r2, #3]
 8002262:	f001 b93d 	b.w	80034e0 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	24001650 	.word	0x24001650

0800226c <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_0_C+0xc>)
 800226e:	2100      	movs	r1, #0
 8002270:	7890      	ldrb	r0, [r2, #2]
 8002272:	f001 b935 	b.w	80034e0 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	24001650 	.word	0x24001650

0800227c <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_0_D+0xc>)
 800227e:	2100      	movs	r1, #0
 8002280:	7950      	ldrb	r0, [r2, #5]
 8002282:	f001 b92d 	b.w	80034e0 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	24001650 	.word	0x24001650

0800228c <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <vBIT_0_E+0xc>)
 800228e:	2100      	movs	r1, #0
 8002290:	7910      	ldrb	r0, [r2, #4]
 8002292:	f001 b925 	b.w	80034e0 <vGBFunctionBIT>
 8002296:	bf00      	nop
 8002298:	24001650 	.word	0x24001650

0800229c <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <vBIT_0_H+0xc>)
 800229e:	2100      	movs	r1, #0
 80022a0:	79d0      	ldrb	r0, [r2, #7]
 80022a2:	f001 b91d 	b.w	80034e0 <vGBFunctionBIT>
 80022a6:	bf00      	nop
 80022a8:	24001650 	.word	0x24001650

080022ac <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80022ac:	4a02      	ldr	r2, [pc, #8]	; (80022b8 <vBIT_0_L+0xc>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	7990      	ldrb	r0, [r2, #6]
 80022b2:	f001 b915 	b.w	80034e0 <vGBFunctionBIT>
 80022b6:	bf00      	nop
 80022b8:	24001650 	.word	0x24001650

080022bc <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80022bc:	b510      	push	{r4, lr}
 80022be:	4c05      	ldr	r4, [pc, #20]	; (80022d4 <vBIT_0_HL+0x18>)
 80022c0:	88e0      	ldrh	r0, [r4, #6]
 80022c2:	f001 f9e5 	bl	8003690 <ucGBMemoryRead>
 80022c6:	4622      	mov	r2, r4
 80022c8:	2100      	movs	r1, #0
 80022ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ce:	f001 b907 	b.w	80034e0 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	24001650 	.word	0x24001650

080022d8 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_0_A+0xc>)
 80022da:	2100      	movs	r1, #0
 80022dc:	7850      	ldrb	r0, [r2, #1]
 80022de:	f001 b8ff 	b.w	80034e0 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	24001650 	.word	0x24001650

080022e8 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_1_B+0xc>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	78d0      	ldrb	r0, [r2, #3]
 80022ee:	f001 b8f7 	b.w	80034e0 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	24001650 	.word	0x24001650

080022f8 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_1_C+0xc>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	7890      	ldrb	r0, [r2, #2]
 80022fe:	f001 b8ef 	b.w	80034e0 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	24001650 	.word	0x24001650

08002308 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_1_D+0xc>)
 800230a:	2101      	movs	r1, #1
 800230c:	7950      	ldrb	r0, [r2, #5]
 800230e:	f001 b8e7 	b.w	80034e0 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	24001650 	.word	0x24001650

08002318 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <vBIT_1_E+0xc>)
 800231a:	2101      	movs	r1, #1
 800231c:	7910      	ldrb	r0, [r2, #4]
 800231e:	f001 b8df 	b.w	80034e0 <vGBFunctionBIT>
 8002322:	bf00      	nop
 8002324:	24001650 	.word	0x24001650

08002328 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 8002328:	4a02      	ldr	r2, [pc, #8]	; (8002334 <vBIT_1_H+0xc>)
 800232a:	2101      	movs	r1, #1
 800232c:	79d0      	ldrb	r0, [r2, #7]
 800232e:	f001 b8d7 	b.w	80034e0 <vGBFunctionBIT>
 8002332:	bf00      	nop
 8002334:	24001650 	.word	0x24001650

08002338 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002338:	4a02      	ldr	r2, [pc, #8]	; (8002344 <vBIT_1_L+0xc>)
 800233a:	2101      	movs	r1, #1
 800233c:	7990      	ldrb	r0, [r2, #6]
 800233e:	f001 b8cf 	b.w	80034e0 <vGBFunctionBIT>
 8002342:	bf00      	nop
 8002344:	24001650 	.word	0x24001650

08002348 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002348:	b510      	push	{r4, lr}
 800234a:	4c05      	ldr	r4, [pc, #20]	; (8002360 <vBIT_1_HL+0x18>)
 800234c:	88e0      	ldrh	r0, [r4, #6]
 800234e:	f001 f99f 	bl	8003690 <ucGBMemoryRead>
 8002352:	4622      	mov	r2, r4
 8002354:	2101      	movs	r1, #1
 8002356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235a:	f001 b8c1 	b.w	80034e0 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	24001650 	.word	0x24001650

08002364 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_1_A+0xc>)
 8002366:	2101      	movs	r1, #1
 8002368:	7850      	ldrb	r0, [r2, #1]
 800236a:	f001 b8b9 	b.w	80034e0 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	24001650 	.word	0x24001650

08002374 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_2_B+0xc>)
 8002376:	2102      	movs	r1, #2
 8002378:	78d0      	ldrb	r0, [r2, #3]
 800237a:	f001 b8b1 	b.w	80034e0 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	24001650 	.word	0x24001650

08002384 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_2_C+0xc>)
 8002386:	2102      	movs	r1, #2
 8002388:	7890      	ldrb	r0, [r2, #2]
 800238a:	f001 b8a9 	b.w	80034e0 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	24001650 	.word	0x24001650

08002394 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_2_D+0xc>)
 8002396:	2102      	movs	r1, #2
 8002398:	7950      	ldrb	r0, [r2, #5]
 800239a:	f001 b8a1 	b.w	80034e0 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	24001650 	.word	0x24001650

080023a4 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <vBIT_2_E+0xc>)
 80023a6:	2102      	movs	r1, #2
 80023a8:	7910      	ldrb	r0, [r2, #4]
 80023aa:	f001 b899 	b.w	80034e0 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	24001650 	.word	0x24001650

080023b4 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <vBIT_2_H+0xc>)
 80023b6:	2102      	movs	r1, #2
 80023b8:	79d0      	ldrb	r0, [r2, #7]
 80023ba:	f001 b891 	b.w	80034e0 <vGBFunctionBIT>
 80023be:	bf00      	nop
 80023c0:	24001650 	.word	0x24001650

080023c4 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80023c4:	4a02      	ldr	r2, [pc, #8]	; (80023d0 <vBIT_2_L+0xc>)
 80023c6:	2102      	movs	r1, #2
 80023c8:	7990      	ldrb	r0, [r2, #6]
 80023ca:	f001 b889 	b.w	80034e0 <vGBFunctionBIT>
 80023ce:	bf00      	nop
 80023d0:	24001650 	.word	0x24001650

080023d4 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4c05      	ldr	r4, [pc, #20]	; (80023ec <vBIT_2_HL+0x18>)
 80023d8:	88e0      	ldrh	r0, [r4, #6]
 80023da:	f001 f959 	bl	8003690 <ucGBMemoryRead>
 80023de:	4622      	mov	r2, r4
 80023e0:	2102      	movs	r1, #2
 80023e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023e6:	f001 b87b 	b.w	80034e0 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	24001650 	.word	0x24001650

080023f0 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_2_A+0xc>)
 80023f2:	2102      	movs	r1, #2
 80023f4:	7850      	ldrb	r0, [r2, #1]
 80023f6:	f001 b873 	b.w	80034e0 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	24001650 	.word	0x24001650

08002400 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_3_B+0xc>)
 8002402:	2103      	movs	r1, #3
 8002404:	78d0      	ldrb	r0, [r2, #3]
 8002406:	f001 b86b 	b.w	80034e0 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	24001650 	.word	0x24001650

08002410 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_3_C+0xc>)
 8002412:	2103      	movs	r1, #3
 8002414:	7890      	ldrb	r0, [r2, #2]
 8002416:	f001 b863 	b.w	80034e0 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	24001650 	.word	0x24001650

08002420 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_3_D+0xc>)
 8002422:	2103      	movs	r1, #3
 8002424:	7950      	ldrb	r0, [r2, #5]
 8002426:	f001 b85b 	b.w	80034e0 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	24001650 	.word	0x24001650

08002430 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <vBIT_3_E+0xc>)
 8002432:	2103      	movs	r1, #3
 8002434:	7910      	ldrb	r0, [r2, #4]
 8002436:	f001 b853 	b.w	80034e0 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	24001650 	.word	0x24001650

08002440 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002440:	4a02      	ldr	r2, [pc, #8]	; (800244c <vBIT_3_H+0xc>)
 8002442:	2103      	movs	r1, #3
 8002444:	79d0      	ldrb	r0, [r2, #7]
 8002446:	f001 b84b 	b.w	80034e0 <vGBFunctionBIT>
 800244a:	bf00      	nop
 800244c:	24001650 	.word	0x24001650

08002450 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <vBIT_3_L+0xc>)
 8002452:	2103      	movs	r1, #3
 8002454:	7990      	ldrb	r0, [r2, #6]
 8002456:	f001 b843 	b.w	80034e0 <vGBFunctionBIT>
 800245a:	bf00      	nop
 800245c:	24001650 	.word	0x24001650

08002460 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 8002460:	b510      	push	{r4, lr}
 8002462:	4c05      	ldr	r4, [pc, #20]	; (8002478 <vBIT_3_HL+0x18>)
 8002464:	88e0      	ldrh	r0, [r4, #6]
 8002466:	f001 f913 	bl	8003690 <ucGBMemoryRead>
 800246a:	4622      	mov	r2, r4
 800246c:	2103      	movs	r1, #3
 800246e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002472:	f001 b835 	b.w	80034e0 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	24001650 	.word	0x24001650

0800247c <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_3_A+0xc>)
 800247e:	2103      	movs	r1, #3
 8002480:	7850      	ldrb	r0, [r2, #1]
 8002482:	f001 b82d 	b.w	80034e0 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	24001650 	.word	0x24001650

0800248c <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_4_B+0xc>)
 800248e:	2104      	movs	r1, #4
 8002490:	78d0      	ldrb	r0, [r2, #3]
 8002492:	f001 b825 	b.w	80034e0 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	24001650 	.word	0x24001650

0800249c <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_4_C+0xc>)
 800249e:	2104      	movs	r1, #4
 80024a0:	7890      	ldrb	r0, [r2, #2]
 80024a2:	f001 b81d 	b.w	80034e0 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	24001650 	.word	0x24001650

080024ac <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_4_D+0xc>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	7950      	ldrb	r0, [r2, #5]
 80024b2:	f001 b815 	b.w	80034e0 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	24001650 	.word	0x24001650

080024bc <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <vBIT_4_E+0xc>)
 80024be:	2104      	movs	r1, #4
 80024c0:	7910      	ldrb	r0, [r2, #4]
 80024c2:	f001 b80d 	b.w	80034e0 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	24001650 	.word	0x24001650

080024cc <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <vBIT_4_H+0xc>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	79d0      	ldrb	r0, [r2, #7]
 80024d2:	f001 b805 	b.w	80034e0 <vGBFunctionBIT>
 80024d6:	bf00      	nop
 80024d8:	24001650 	.word	0x24001650

080024dc <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 80024dc:	4a02      	ldr	r2, [pc, #8]	; (80024e8 <vBIT_4_L+0xc>)
 80024de:	2104      	movs	r1, #4
 80024e0:	7990      	ldrb	r0, [r2, #6]
 80024e2:	f000 bffd 	b.w	80034e0 <vGBFunctionBIT>
 80024e6:	bf00      	nop
 80024e8:	24001650 	.word	0x24001650

080024ec <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4c05      	ldr	r4, [pc, #20]	; (8002504 <vBIT_4_HL+0x18>)
 80024f0:	88e0      	ldrh	r0, [r4, #6]
 80024f2:	f001 f8cd 	bl	8003690 <ucGBMemoryRead>
 80024f6:	4622      	mov	r2, r4
 80024f8:	2104      	movs	r1, #4
 80024fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024fe:	f000 bfef 	b.w	80034e0 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	24001650 	.word	0x24001650

08002508 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_4_A+0xc>)
 800250a:	2104      	movs	r1, #4
 800250c:	7850      	ldrb	r0, [r2, #1]
 800250e:	f000 bfe7 	b.w	80034e0 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	24001650 	.word	0x24001650

08002518 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_5_B+0xc>)
 800251a:	2105      	movs	r1, #5
 800251c:	78d0      	ldrb	r0, [r2, #3]
 800251e:	f000 bfdf 	b.w	80034e0 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	24001650 	.word	0x24001650

08002528 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_5_C+0xc>)
 800252a:	2105      	movs	r1, #5
 800252c:	7890      	ldrb	r0, [r2, #2]
 800252e:	f000 bfd7 	b.w	80034e0 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	24001650 	.word	0x24001650

08002538 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_5_D+0xc>)
 800253a:	2105      	movs	r1, #5
 800253c:	7950      	ldrb	r0, [r2, #5]
 800253e:	f000 bfcf 	b.w	80034e0 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	24001650 	.word	0x24001650

08002548 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002548:	4a02      	ldr	r2, [pc, #8]	; (8002554 <vBIT_5_E+0xc>)
 800254a:	2105      	movs	r1, #5
 800254c:	7910      	ldrb	r0, [r2, #4]
 800254e:	f000 bfc7 	b.w	80034e0 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	24001650 	.word	0x24001650

08002558 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <vBIT_5_H+0xc>)
 800255a:	2105      	movs	r1, #5
 800255c:	79d0      	ldrb	r0, [r2, #7]
 800255e:	f000 bfbf 	b.w	80034e0 <vGBFunctionBIT>
 8002562:	bf00      	nop
 8002564:	24001650 	.word	0x24001650

08002568 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <vBIT_5_L+0xc>)
 800256a:	2105      	movs	r1, #5
 800256c:	7990      	ldrb	r0, [r2, #6]
 800256e:	f000 bfb7 	b.w	80034e0 <vGBFunctionBIT>
 8002572:	bf00      	nop
 8002574:	24001650 	.word	0x24001650

08002578 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 8002578:	b510      	push	{r4, lr}
 800257a:	4c05      	ldr	r4, [pc, #20]	; (8002590 <vBIT_5_HL+0x18>)
 800257c:	88e0      	ldrh	r0, [r4, #6]
 800257e:	f001 f887 	bl	8003690 <ucGBMemoryRead>
 8002582:	4622      	mov	r2, r4
 8002584:	2105      	movs	r1, #5
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800258a:	f000 bfa9 	b.w	80034e0 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	24001650 	.word	0x24001650

08002594 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_5_A+0xc>)
 8002596:	2105      	movs	r1, #5
 8002598:	7850      	ldrb	r0, [r2, #1]
 800259a:	f000 bfa1 	b.w	80034e0 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	24001650 	.word	0x24001650

080025a4 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_6_B+0xc>)
 80025a6:	2106      	movs	r1, #6
 80025a8:	78d0      	ldrb	r0, [r2, #3]
 80025aa:	f000 bf99 	b.w	80034e0 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	24001650 	.word	0x24001650

080025b4 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_6_C+0xc>)
 80025b6:	2106      	movs	r1, #6
 80025b8:	7890      	ldrb	r0, [r2, #2]
 80025ba:	f000 bf91 	b.w	80034e0 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	24001650 	.word	0x24001650

080025c4 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_6_D+0xc>)
 80025c6:	2106      	movs	r1, #6
 80025c8:	7950      	ldrb	r0, [r2, #5]
 80025ca:	f000 bf89 	b.w	80034e0 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	24001650 	.word	0x24001650

080025d4 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 80025d4:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <vBIT_6_E+0xc>)
 80025d6:	2106      	movs	r1, #6
 80025d8:	7910      	ldrb	r0, [r2, #4]
 80025da:	f000 bf81 	b.w	80034e0 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	24001650 	.word	0x24001650

080025e4 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 80025e4:	4a02      	ldr	r2, [pc, #8]	; (80025f0 <vBIT_6_H+0xc>)
 80025e6:	2106      	movs	r1, #6
 80025e8:	79d0      	ldrb	r0, [r2, #7]
 80025ea:	f000 bf79 	b.w	80034e0 <vGBFunctionBIT>
 80025ee:	bf00      	nop
 80025f0:	24001650 	.word	0x24001650

080025f4 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 80025f4:	4a02      	ldr	r2, [pc, #8]	; (8002600 <vBIT_6_L+0xc>)
 80025f6:	2106      	movs	r1, #6
 80025f8:	7990      	ldrb	r0, [r2, #6]
 80025fa:	f000 bf71 	b.w	80034e0 <vGBFunctionBIT>
 80025fe:	bf00      	nop
 8002600:	24001650 	.word	0x24001650

08002604 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002604:	b510      	push	{r4, lr}
 8002606:	4c05      	ldr	r4, [pc, #20]	; (800261c <vBIT_6_HL+0x18>)
 8002608:	88e0      	ldrh	r0, [r4, #6]
 800260a:	f001 f841 	bl	8003690 <ucGBMemoryRead>
 800260e:	4622      	mov	r2, r4
 8002610:	2106      	movs	r1, #6
 8002612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002616:	f000 bf63 	b.w	80034e0 <vGBFunctionBIT>
 800261a:	bf00      	nop
 800261c:	24001650 	.word	0x24001650

08002620 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002620:	4a02      	ldr	r2, [pc, #8]	; (800262c <vBIT_6_A+0xc>)
 8002622:	2106      	movs	r1, #6
 8002624:	7850      	ldrb	r0, [r2, #1]
 8002626:	f000 bf5b 	b.w	80034e0 <vGBFunctionBIT>
 800262a:	bf00      	nop
 800262c:	24001650 	.word	0x24001650

08002630 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002630:	4a02      	ldr	r2, [pc, #8]	; (800263c <vBIT_7_B+0xc>)
 8002632:	2107      	movs	r1, #7
 8002634:	78d0      	ldrb	r0, [r2, #3]
 8002636:	f000 bf53 	b.w	80034e0 <vGBFunctionBIT>
 800263a:	bf00      	nop
 800263c:	24001650 	.word	0x24001650

08002640 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002640:	4a02      	ldr	r2, [pc, #8]	; (800264c <vBIT_7_C+0xc>)
 8002642:	2107      	movs	r1, #7
 8002644:	7890      	ldrb	r0, [r2, #2]
 8002646:	f000 bf4b 	b.w	80034e0 <vGBFunctionBIT>
 800264a:	bf00      	nop
 800264c:	24001650 	.word	0x24001650

08002650 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <vBIT_7_D+0xc>)
 8002652:	2107      	movs	r1, #7
 8002654:	7950      	ldrb	r0, [r2, #5]
 8002656:	f000 bf43 	b.w	80034e0 <vGBFunctionBIT>
 800265a:	bf00      	nop
 800265c:	24001650 	.word	0x24001650

08002660 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 8002660:	4a02      	ldr	r2, [pc, #8]	; (800266c <vBIT_7_E+0xc>)
 8002662:	2107      	movs	r1, #7
 8002664:	7910      	ldrb	r0, [r2, #4]
 8002666:	f000 bf3b 	b.w	80034e0 <vGBFunctionBIT>
 800266a:	bf00      	nop
 800266c:	24001650 	.word	0x24001650

08002670 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <vBIT_7_H+0xc>)
 8002672:	2107      	movs	r1, #7
 8002674:	79d0      	ldrb	r0, [r2, #7]
 8002676:	f000 bf33 	b.w	80034e0 <vGBFunctionBIT>
 800267a:	bf00      	nop
 800267c:	24001650 	.word	0x24001650

08002680 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 8002680:	4a02      	ldr	r2, [pc, #8]	; (800268c <vBIT_7_L+0xc>)
 8002682:	2107      	movs	r1, #7
 8002684:	7990      	ldrb	r0, [r2, #6]
 8002686:	f000 bf2b 	b.w	80034e0 <vGBFunctionBIT>
 800268a:	bf00      	nop
 800268c:	24001650 	.word	0x24001650

08002690 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 8002690:	b510      	push	{r4, lr}
 8002692:	4c05      	ldr	r4, [pc, #20]	; (80026a8 <vBIT_7_HL+0x18>)
 8002694:	88e0      	ldrh	r0, [r4, #6]
 8002696:	f000 fffb 	bl	8003690 <ucGBMemoryRead>
 800269a:	4622      	mov	r2, r4
 800269c:	2107      	movs	r1, #7
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a2:	f000 bf1d 	b.w	80034e0 <vGBFunctionBIT>
 80026a6:	bf00      	nop
 80026a8:	24001650 	.word	0x24001650

080026ac <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80026ac:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <vBIT_7_A+0xc>)
 80026ae:	2107      	movs	r1, #7
 80026b0:	7850      	ldrb	r0, [r2, #1]
 80026b2:	f000 bf15 	b.w	80034e0 <vGBFunctionBIT>
 80026b6:	bf00      	nop
 80026b8:	24001650 	.word	0x24001650

080026bc <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <vRES_0_HL+0x1c>)
 80026be:	2100      	movs	r1, #0
 80026c0:	b510      	push	{r4, lr}
 80026c2:	88dc      	ldrh	r4, [r3, #6]
 80026c4:	4620      	mov	r0, r4
 80026c6:	f000 ff23 	bl	8003510 <ucGBFunctionRESHL>
 80026ca:	4601      	mov	r1, r0
 80026cc:	4620      	mov	r0, r4
 80026ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d2:	f001 b805 	b.w	80036e0 <vGBMemoryWrite>
 80026d6:	bf00      	nop
 80026d8:	24001650 	.word	0x24001650

080026dc <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <vRES_1_HL+0x1c>)
 80026de:	2101      	movs	r1, #1
 80026e0:	b510      	push	{r4, lr}
 80026e2:	88dc      	ldrh	r4, [r3, #6]
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 ff13 	bl	8003510 <ucGBFunctionRESHL>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4620      	mov	r0, r4
 80026ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f2:	f000 bff5 	b.w	80036e0 <vGBMemoryWrite>
 80026f6:	bf00      	nop
 80026f8:	24001650 	.word	0x24001650

080026fc <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <vRES_2_HL+0x1c>)
 80026fe:	2102      	movs	r1, #2
 8002700:	b510      	push	{r4, lr}
 8002702:	88dc      	ldrh	r4, [r3, #6]
 8002704:	4620      	mov	r0, r4
 8002706:	f000 ff03 	bl	8003510 <ucGBFunctionRESHL>
 800270a:	4601      	mov	r1, r0
 800270c:	4620      	mov	r0, r4
 800270e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002712:	f000 bfe5 	b.w	80036e0 <vGBMemoryWrite>
 8002716:	bf00      	nop
 8002718:	24001650 	.word	0x24001650

0800271c <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <vRES_3_HL+0x1c>)
 800271e:	2103      	movs	r1, #3
 8002720:	b510      	push	{r4, lr}
 8002722:	88dc      	ldrh	r4, [r3, #6]
 8002724:	4620      	mov	r0, r4
 8002726:	f000 fef3 	bl	8003510 <ucGBFunctionRESHL>
 800272a:	4601      	mov	r1, r0
 800272c:	4620      	mov	r0, r4
 800272e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002732:	f000 bfd5 	b.w	80036e0 <vGBMemoryWrite>
 8002736:	bf00      	nop
 8002738:	24001650 	.word	0x24001650

0800273c <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <vRES_4_HL+0x1c>)
 800273e:	2104      	movs	r1, #4
 8002740:	b510      	push	{r4, lr}
 8002742:	88dc      	ldrh	r4, [r3, #6]
 8002744:	4620      	mov	r0, r4
 8002746:	f000 fee3 	bl	8003510 <ucGBFunctionRESHL>
 800274a:	4601      	mov	r1, r0
 800274c:	4620      	mov	r0, r4
 800274e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002752:	f000 bfc5 	b.w	80036e0 <vGBMemoryWrite>
 8002756:	bf00      	nop
 8002758:	24001650 	.word	0x24001650

0800275c <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <vRES_5_HL+0x1c>)
 800275e:	2105      	movs	r1, #5
 8002760:	b510      	push	{r4, lr}
 8002762:	88dc      	ldrh	r4, [r3, #6]
 8002764:	4620      	mov	r0, r4
 8002766:	f000 fed3 	bl	8003510 <ucGBFunctionRESHL>
 800276a:	4601      	mov	r1, r0
 800276c:	4620      	mov	r0, r4
 800276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002772:	f000 bfb5 	b.w	80036e0 <vGBMemoryWrite>
 8002776:	bf00      	nop
 8002778:	24001650 	.word	0x24001650

0800277c <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <vRES_6_HL+0x1c>)
 800277e:	2106      	movs	r1, #6
 8002780:	b510      	push	{r4, lr}
 8002782:	88dc      	ldrh	r4, [r3, #6]
 8002784:	4620      	mov	r0, r4
 8002786:	f000 fec3 	bl	8003510 <ucGBFunctionRESHL>
 800278a:	4601      	mov	r1, r0
 800278c:	4620      	mov	r0, r4
 800278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002792:	f000 bfa5 	b.w	80036e0 <vGBMemoryWrite>
 8002796:	bf00      	nop
 8002798:	24001650 	.word	0x24001650

0800279c <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <vRES_7_HL+0x1c>)
 800279e:	2107      	movs	r1, #7
 80027a0:	b510      	push	{r4, lr}
 80027a2:	88dc      	ldrh	r4, [r3, #6]
 80027a4:	4620      	mov	r0, r4
 80027a6:	f000 feb3 	bl	8003510 <ucGBFunctionRESHL>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4620      	mov	r0, r4
 80027ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b2:	f000 bf95 	b.w	80036e0 <vGBMemoryWrite>
 80027b6:	bf00      	nop
 80027b8:	24001650 	.word	0x24001650

080027bc <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <vSET_0_HL+0x1c>)
 80027be:	2100      	movs	r1, #0
 80027c0:	b510      	push	{r4, lr}
 80027c2:	88dc      	ldrh	r4, [r3, #6]
 80027c4:	4620      	mov	r0, r4
 80027c6:	f000 feaf 	bl	8003528 <ucGBFunctionSETHL>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4620      	mov	r0, r4
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d2:	f000 bf85 	b.w	80036e0 <vGBMemoryWrite>
 80027d6:	bf00      	nop
 80027d8:	24001650 	.word	0x24001650

080027dc <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <vSET_1_HL+0x1c>)
 80027de:	2101      	movs	r1, #1
 80027e0:	b510      	push	{r4, lr}
 80027e2:	88dc      	ldrh	r4, [r3, #6]
 80027e4:	4620      	mov	r0, r4
 80027e6:	f000 fe9f 	bl	8003528 <ucGBFunctionSETHL>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4620      	mov	r0, r4
 80027ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f2:	f000 bf75 	b.w	80036e0 <vGBMemoryWrite>
 80027f6:	bf00      	nop
 80027f8:	24001650 	.word	0x24001650

080027fc <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <vSET_2_HL+0x1c>)
 80027fe:	2102      	movs	r1, #2
 8002800:	b510      	push	{r4, lr}
 8002802:	88dc      	ldrh	r4, [r3, #6]
 8002804:	4620      	mov	r0, r4
 8002806:	f000 fe8f 	bl	8003528 <ucGBFunctionSETHL>
 800280a:	4601      	mov	r1, r0
 800280c:	4620      	mov	r0, r4
 800280e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002812:	f000 bf65 	b.w	80036e0 <vGBMemoryWrite>
 8002816:	bf00      	nop
 8002818:	24001650 	.word	0x24001650

0800281c <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <vSET_3_HL+0x1c>)
 800281e:	2103      	movs	r1, #3
 8002820:	b510      	push	{r4, lr}
 8002822:	88dc      	ldrh	r4, [r3, #6]
 8002824:	4620      	mov	r0, r4
 8002826:	f000 fe7f 	bl	8003528 <ucGBFunctionSETHL>
 800282a:	4601      	mov	r1, r0
 800282c:	4620      	mov	r0, r4
 800282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002832:	f000 bf55 	b.w	80036e0 <vGBMemoryWrite>
 8002836:	bf00      	nop
 8002838:	24001650 	.word	0x24001650

0800283c <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <vSET_4_HL+0x1c>)
 800283e:	2104      	movs	r1, #4
 8002840:	b510      	push	{r4, lr}
 8002842:	88dc      	ldrh	r4, [r3, #6]
 8002844:	4620      	mov	r0, r4
 8002846:	f000 fe6f 	bl	8003528 <ucGBFunctionSETHL>
 800284a:	4601      	mov	r1, r0
 800284c:	4620      	mov	r0, r4
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002852:	f000 bf45 	b.w	80036e0 <vGBMemoryWrite>
 8002856:	bf00      	nop
 8002858:	24001650 	.word	0x24001650

0800285c <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <vSET_5_HL+0x1c>)
 800285e:	2105      	movs	r1, #5
 8002860:	b510      	push	{r4, lr}
 8002862:	88dc      	ldrh	r4, [r3, #6]
 8002864:	4620      	mov	r0, r4
 8002866:	f000 fe5f 	bl	8003528 <ucGBFunctionSETHL>
 800286a:	4601      	mov	r1, r0
 800286c:	4620      	mov	r0, r4
 800286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002872:	f000 bf35 	b.w	80036e0 <vGBMemoryWrite>
 8002876:	bf00      	nop
 8002878:	24001650 	.word	0x24001650

0800287c <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <vSET_6_HL+0x1c>)
 800287e:	2106      	movs	r1, #6
 8002880:	b510      	push	{r4, lr}
 8002882:	88dc      	ldrh	r4, [r3, #6]
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fe4f 	bl	8003528 <ucGBFunctionSETHL>
 800288a:	4601      	mov	r1, r0
 800288c:	4620      	mov	r0, r4
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002892:	f000 bf25 	b.w	80036e0 <vGBMemoryWrite>
 8002896:	bf00      	nop
 8002898:	24001650 	.word	0x24001650

0800289c <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <vSET_7_HL+0x1c>)
 800289e:	2107      	movs	r1, #7
 80028a0:	b510      	push	{r4, lr}
 80028a2:	88dc      	ldrh	r4, [r3, #6]
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 fe3f 	bl	8003528 <ucGBFunctionSETHL>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4620      	mov	r0, r4
 80028ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b2:	f000 bf15 	b.w	80036e0 <vGBMemoryWrite>
 80028b6:	bf00      	nop
 80028b8:	24001650 	.word	0x24001650

080028bc <vCCF>:
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}
 80028bc:	b510      	push	{r4, lr}
 80028be:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <vCCF+0x38>)
 80028c0:	2106      	movs	r1, #6
 80028c2:	4620      	mov	r0, r4
 80028c4:	f000 f9e0 	bl	8002c88 <vResetBit>
 80028c8:	4620      	mov	r0, r4
 80028ca:	2105      	movs	r1, #5
 80028cc:	f000 f9dc 	bl	8002c88 <vResetBit>
 80028d0:	7820      	ldrb	r0, [r4, #0]
 80028d2:	2104      	movs	r1, #4
 80028d4:	f000 f9e0 	bl	8002c98 <ucCheckBit>
 80028d8:	b128      	cbz	r0, 80028e6 <vCCF+0x2a>
 80028da:	4620      	mov	r0, r4
 80028dc:	2104      	movs	r1, #4
 80028de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e2:	f000 b9d1 	b.w	8002c88 <vResetBit>
 80028e6:	4620      	mov	r0, r4
 80028e8:	2104      	movs	r1, #4
 80028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ee:	f000 b9c3 	b.w	8002c78 <vSetBit>
 80028f2:	bf00      	nop
 80028f4:	24001650 	.word	0x24001650

080028f8 <vRET_C.part.0>:
void vRET_NZ(){       ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028f8:	4901      	ldr	r1, [pc, #4]	; (8002900 <vRET_C.part.0+0x8>)
 80028fa:	1e88      	subs	r0, r1, #2
 80028fc:	f000 bc1c 	b.w	8003138 <vGBFunctionRET>
 8002900:	2400165a 	.word	0x2400165a

08002904 <vRET_NZ>:
 8002904:	b510      	push	{r4, lr}
 8002906:	4c0b      	ldr	r4, [pc, #44]	; (8002934 <vRET_NZ+0x30>)
 8002908:	2107      	movs	r1, #7
 800290a:	7820      	ldrb	r0, [r4, #0]
 800290c:	f000 f9c4 	bl	8002c98 <ucCheckBit>
 8002910:	2800      	cmp	r0, #0
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <vRET_NZ+0x34>)
 8002914:	f04f 0107 	mov.w	r1, #7
 8002918:	bf14      	ite	ne
 800291a:	2208      	movne	r2, #8
 800291c:	2214      	moveq	r2, #20
 800291e:	7820      	ldrb	r0, [r4, #0]
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	f000 f9b9 	bl	8002c98 <ucCheckBit>
 8002926:	b100      	cbz	r0, 800292a <vRET_NZ+0x26>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292e:	f7ff bfe3 	b.w	80028f8 <vRET_C.part.0>
 8002932:	bf00      	nop
 8002934:	24001650 	.word	0x24001650
 8002938:	2400109c 	.word	0x2400109c

0800293c <vRET_Z>:
void vRET_Z(){        ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 800293c:	b510      	push	{r4, lr}
 800293e:	4c0b      	ldr	r4, [pc, #44]	; (800296c <vRET_Z+0x30>)
 8002940:	2107      	movs	r1, #7
 8002942:	7820      	ldrb	r0, [r4, #0]
 8002944:	f000 f9a8 	bl	8002c98 <ucCheckBit>
 8002948:	2800      	cmp	r0, #0
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <vRET_Z+0x34>)
 800294c:	f04f 0107 	mov.w	r1, #7
 8002950:	bf14      	ite	ne
 8002952:	2214      	movne	r2, #20
 8002954:	2208      	moveq	r2, #8
 8002956:	7820      	ldrb	r0, [r4, #0]
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	f000 f99d 	bl	8002c98 <ucCheckBit>
 800295e:	b900      	cbnz	r0, 8002962 <vRET_Z+0x26>
 8002960:	bd10      	pop	{r4, pc}
 8002962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002966:	f7ff bfc7 	b.w	80028f8 <vRET_C.part.0>
 800296a:	bf00      	nop
 800296c:	24001650 	.word	0x24001650
 8002970:	2400109c 	.word	0x2400109c

08002974 <vRET_NC>:
void vRET_NC(){       ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002974:	b510      	push	{r4, lr}
 8002976:	4c0b      	ldr	r4, [pc, #44]	; (80029a4 <vRET_NC+0x30>)
 8002978:	2104      	movs	r1, #4
 800297a:	7820      	ldrb	r0, [r4, #0]
 800297c:	f000 f98c 	bl	8002c98 <ucCheckBit>
 8002980:	2800      	cmp	r0, #0
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <vRET_NC+0x34>)
 8002984:	f04f 0104 	mov.w	r1, #4
 8002988:	bf14      	ite	ne
 800298a:	2208      	movne	r2, #8
 800298c:	2214      	moveq	r2, #20
 800298e:	7820      	ldrb	r0, [r4, #0]
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	f000 f981 	bl	8002c98 <ucCheckBit>
 8002996:	b100      	cbz	r0, 800299a <vRET_NC+0x26>
 8002998:	bd10      	pop	{r4, pc}
 800299a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299e:	f7ff bfab 	b.w	80028f8 <vRET_C.part.0>
 80029a2:	bf00      	nop
 80029a4:	24001650 	.word	0x24001650
 80029a8:	2400109c 	.word	0x2400109c

080029ac <vRET_C>:
void vRET_C(){        ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4c0b      	ldr	r4, [pc, #44]	; (80029dc <vRET_C+0x30>)
 80029b0:	2104      	movs	r1, #4
 80029b2:	7820      	ldrb	r0, [r4, #0]
 80029b4:	f000 f970 	bl	8002c98 <ucCheckBit>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <vRET_C+0x34>)
 80029bc:	f04f 0104 	mov.w	r1, #4
 80029c0:	bf14      	ite	ne
 80029c2:	2214      	movne	r2, #20
 80029c4:	2208      	moveq	r2, #8
 80029c6:	7820      	ldrb	r0, [r4, #0]
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	f000 f965 	bl	8002c98 <ucCheckBit>
 80029ce:	b900      	cbnz	r0, 80029d2 <vRET_C+0x26>
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029d6:	f7ff bf8f 	b.w	80028f8 <vRET_C.part.0>
 80029da:	bf00      	nop
 80029dc:	24001650 	.word	0x24001650
 80029e0:	2400109c 	.word	0x2400109c

080029e4 <vLD_A_A>:
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <vLD_B_B>:
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <vLD_C_C>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <vLD_D_D>:
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <vLD_E_E>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <vLD_H_H>:
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <vLD_L_L>:
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <ucGetTstate>:

/**
 * @returns amount of T-states that the current instruction takes to execute
 */
uint8_t ucGetTstate(){
    return uctStates;
 8002a00:	4b01      	ldr	r3, [pc, #4]	; (8002a08 <ucGetTstate+0x8>)
}
 8002a02:	7818      	ldrb	r0, [r3, #0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	240010a2 	.word	0x240010a2

08002a0c <prvGBCPUInterruptHandler>:

/**
 * @brief If the corresponding IE and IF are both set then jump to the corresponding ISR
 * @returns Nothing
 */
void prvGBCPUInterruptHandler(){
 8002a0c:	b570      	push	{r4, r5, r6, lr}
    if(ucOneCycleInterruptDelay == 1){
 8002a0e:	4d39      	ldr	r5, [pc, #228]	; (8002af4 <prvGBCPUInterruptHandler+0xe8>)
 8002a10:	782c      	ldrb	r4, [r5, #0]
 8002a12:	2c01      	cmp	r4, #1
 8002a14:	d002      	beq.n	8002a1c <prvGBCPUInterruptHandler+0x10>
                uctStates += 5*4;
            }
        }

    }else{
        ucOneCycleInterruptDelay++;
 8002a16:	3401      	adds	r4, #1
 8002a18:	702c      	strb	r4, [r5, #0]
    }
}
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
        if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002a1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a20:	f000 fe36 	bl	8003690 <ucGBMemoryRead>
 8002a24:	4606      	mov	r6, r0
 8002a26:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a2a:	f000 fe31 	bl	8003690 <ucGBMemoryRead>
 8002a2e:	4030      	ands	r0, r6
 8002a30:	06c6      	lsls	r6, r0, #27
 8002a32:	d0f2      	beq.n	8002a1a <prvGBCPUInterruptHandler+0xe>
            ucHALTED = 0;
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <prvGBCPUInterruptHandler+0xec>)
            ucInterruptMasterEnable = 0;
 8002a36:	2600      	movs	r6, #0
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <prvGBCPUInterruptHandler+0xf0>)
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
            ucHALTED = 0;
 8002a3e:	701e      	strb	r6, [r3, #0]
            ucInterruptMasterEnable = 0;
 8002a40:	7016      	strb	r6, [r2, #0]
            ucOneCycleInterruptDelay = 0;
 8002a42:	702e      	strb	r6, [r5, #0]
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a44:	f000 fe24 	bl	8003690 <ucGBMemoryRead>
 8002a48:	4605      	mov	r5, r0
 8002a4a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a4e:	f000 fe1f 	bl	8003690 <ucGBMemoryRead>
 8002a52:	4028      	ands	r0, r5
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a54:	07c5      	lsls	r5, r0, #31
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a56:	b2c3      	uxtb	r3, r0
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a58:	d418      	bmi.n	8002a8c <prvGBCPUInterruptHandler+0x80>
            }else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a5a:	0798      	lsls	r0, r3, #30
 8002a5c:	d423      	bmi.n	8002aa6 <prvGBCPUInterruptHandler+0x9a>
            }else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a5e:	0759      	lsls	r1, r3, #29
 8002a60:	d42e      	bmi.n	8002ac0 <prvGBCPUInterruptHandler+0xb4>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002a62:	071a      	lsls	r2, r3, #28
 8002a64:	d439      	bmi.n	8002ada <prvGBCPUInterruptHandler+0xce>
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = JOYPAD_VECTOR;
 8002a66:	06db      	lsls	r3, r3, #27
 8002a68:	d5d7      	bpl.n	8002a1a <prvGBCPUInterruptHandler+0xe>
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a70:	f000 fdec 	bl	800364c <vGBMemoryResetBit>
 8002a74:	4922      	ldr	r1, [pc, #136]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002a76:	1e88      	subs	r0, r1, #2
 8002a78:	f000 fb7c 	bl	8003174 <vGBFunctionPUSH>
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002a7e:	2260      	movs	r2, #96	; 0x60
 8002a80:	815a      	strh	r2, [r3, #10]
                uctStates += 5*4;
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <prvGBCPUInterruptHandler+0xfc>)
 8002a84:	7813      	ldrb	r3, [r2, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	7013      	strb	r3, [r2, #0]
}
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a8c:	4631      	mov	r1, r6
 8002a8e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a92:	f000 fddb 	bl	800364c <vGBMemoryResetBit>
 8002a96:	491a      	ldr	r1, [pc, #104]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002a98:	1e88      	subs	r0, r1, #2
 8002a9a:	f000 fb6b 	bl	8003174 <vGBFunctionPUSH>
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002aa4:	e7ed      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002aac:	f000 fdce 	bl	800364c <vGBMemoryResetBit>
 8002ab0:	4913      	ldr	r1, [pc, #76]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002ab2:	1e88      	subs	r0, r1, #2
 8002ab4:	f000 fb5e 	bl	8003174 <vGBFunctionPUSH>
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aba:	2248      	movs	r2, #72	; 0x48
 8002abc:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002abe:	e7e0      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ac6:	f000 fdc1 	bl	800364c <vGBMemoryResetBit>
 8002aca:	490d      	ldr	r1, [pc, #52]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002acc:	1e88      	subs	r0, r1, #2
 8002ace:	f000 fb51 	bl	8003174 <vGBFunctionPUSH>
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002ad4:	2250      	movs	r2, #80	; 0x50
 8002ad6:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002ad8:	e7d3      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002ada:	2103      	movs	r1, #3
 8002adc:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ae0:	f000 fdb4 	bl	800364c <vGBMemoryResetBit>
 8002ae4:	4906      	ldr	r1, [pc, #24]	; (8002b00 <prvGBCPUInterruptHandler+0xf4>)
 8002ae6:	1e88      	subs	r0, r1, #2
 8002ae8:	f000 fb44 	bl	8003174 <vGBFunctionPUSH>
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <prvGBCPUInterruptHandler+0xf8>)
 8002aee:	2258      	movs	r2, #88	; 0x58
 8002af0:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002af2:	e7c6      	b.n	8002a82 <prvGBCPUInterruptHandler+0x76>
 8002af4:	240010a0 	.word	0x240010a0
 8002af8:	2400109d 	.word	0x2400109d
 8002afc:	2400109e 	.word	0x2400109e
 8002b00:	2400165a 	.word	0x2400165a
 8002b04:	24001650 	.word	0x24001650
 8002b08:	240010a2 	.word	0x240010a2

08002b0c <prvGBCPUHaltedHandler>:
/**
 * @brief If the CPU is halted and ucInterruptMasterEnable is not set, then this function will unhalt the CPU if both IE and IF flags are set
 * without jumping to the ISR
 * @returns Nothing
 */
void prvGBCPUHaltedHandler(){
 8002b0c:	b538      	push	{r3, r4, r5, lr}
    if(ucOneCycleInterruptDelay == 1){
 8002b0e:	4c13      	ldr	r4, [pc, #76]	; (8002b5c <prvGBCPUHaltedHandler+0x50>)
 8002b10:	7823      	ldrb	r3, [r4, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d002      	beq.n	8002b1c <prvGBCPUHaltedHandler+0x10>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ ucHALTED = 0;
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
            }
        }
    }else{
        ucOneCycleInterruptDelay++;
 8002b16:	3301      	adds	r3, #1
 8002b18:	7023      	strb	r3, [r4, #0]
    }
}
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
        if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002b1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b20:	f000 fdb6 	bl	8003690 <ucGBMemoryRead>
 8002b24:	4605      	mov	r5, r0
 8002b26:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b2a:	f000 fdb1 	bl	8003690 <ucGBMemoryRead>
 8002b2e:	4028      	ands	r0, r5
 8002b30:	06c2      	lsls	r2, r0, #27
 8002b32:	d0f2      	beq.n	8002b1a <prvGBCPUHaltedHandler+0xe>
            ucInterruptMasterEnable = 0;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvGBCPUHaltedHandler+0x54>)
 8002b36:	2500      	movs	r5, #0
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b38:	f64f 70ff 	movw	r0, #65535	; 0xffff
            ucInterruptMasterEnable = 0;
 8002b3c:	701d      	strb	r5, [r3, #0]
            ucOneCycleInterruptDelay = 0;
 8002b3e:	7025      	strb	r5, [r4, #0]
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b40:	f000 fda6 	bl	8003690 <ucGBMemoryRead>
 8002b44:	4604      	mov	r4, r0
 8002b46:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b4a:	f000 fda1 	bl	8003690 <ucGBMemoryRead>
 8002b4e:	4020      	ands	r0, r4
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
 8002b50:	06c3      	lsls	r3, r0, #27
 8002b52:	d0e2      	beq.n	8002b1a <prvGBCPUHaltedHandler+0xe>
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ ucHALTED = 0;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <prvGBCPUHaltedHandler+0x58>)
 8002b56:	701d      	strb	r5, [r3, #0]
}
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	bf00      	nop
 8002b5c:	240010a0 	.word	0x240010a0
 8002b60:	2400109e 	.word	0x2400109e
 8002b64:	2400109d 	.word	0x2400109d

08002b68 <prvGBCPUinstr>:
/**
 * @brief fetch, decode and execute 1 CPU instruction, increment timers and jump to interrupt handler
 * @param opcode Opcode of instruction to be executed
 * @returns Nothing
 */
void prvGBCPUinstr(uint8_t opcode){
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if(reg.PC == usDebugPC){
 8002b6a:	4e2c      	ldr	r6, [pc, #176]	; (8002c1c <prvGBCPUinstr+0xb4>)
void prvGBCPUinstr(uint8_t opcode){
 8002b6c:	4604      	mov	r4, r0
    if(reg.PC == usDebugPC){
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <prvGBCPUinstr+0xb8>)
 8002b70:	8972      	ldrh	r2, [r6, #10]
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d103      	bne.n	8002b80 <prvGBCPUinstr+0x18>
        ucMemoryBreakPointTrigger++;
 8002b78:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <prvGBCPUinstr+0xbc>)
 8002b7a:	7813      	ldrb	r3, [r2, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	7013      	strb	r3, [r2, #0]
    }

    if(!ucHALTED){
 8002b80:	4d29      	ldr	r5, [pc, #164]	; (8002c28 <prvGBCPUinstr+0xc0>)
 8002b82:	782b      	ldrb	r3, [r5, #0]
 8002b84:	b163      	cbz	r3, 8002ba0 <prvGBCPUinstr+0x38>
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002b88:	7818      	ldrb	r0, [r3, #0]
		    uctStates = instructions[opcode].Tstate;
		}

    }

    vGBMemoryIncTimers(uctStates >> 2);
 8002b8a:	0880      	lsrs	r0, r0, #2
 8002b8c:	f000 fe78 	bl	8003880 <vGBMemoryIncTimers>

    if(ucInterruptMasterEnable == 1){
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <prvGBCPUinstr+0xc8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d018      	beq.n	8002bca <prvGBCPUinstr+0x62>
	    prvGBCPUInterruptHandler();
    }else if(ucHALTED == 1){
 8002b98:	782b      	ldrb	r3, [r5, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d01e      	beq.n	8002bdc <prvGBCPUinstr+0x74>
	    prvGBCPUHaltedHandler();
    }
}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    vGBMemorySetOP(opcode);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 fccb 	bl	800353c <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ba6:	2ccb      	cmp	r4, #203	; 0xcb
 8002ba8:	d01c      	beq.n	8002be4 <prvGBCPUinstr+0x7c>
 8002baa:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <prvGBCPUinstr+0xcc>)
 8002bac:	8971      	ldrh	r1, [r6, #10]
 8002bae:	eb02 07c4 	add.w	r7, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bb2:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bb6:	793b      	ldrb	r3, [r7, #4]
 8002bb8:	440b      	add	r3, r1
 8002bba:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002bbc:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002bbe:	7978      	ldrb	r0, [r7, #5]
 8002bc0:	28ff      	cmp	r0, #255	; 0xff
 8002bc2:	d006      	beq.n	8002bd2 <prvGBCPUinstr+0x6a>
		    uctStates = instructions[opcode].Tstate;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002bc6:	7018      	strb	r0, [r3, #0]
 8002bc8:	e7df      	b.n	8002b8a <prvGBCPUinstr+0x22>
}
 8002bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    prvGBCPUInterruptHandler();
 8002bce:	f7ff bf1d 	b.w	8002a0c <prvGBCPUInterruptHandler>
		    uctStates = ucCustomDuration;
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <prvGBCPUinstr+0xd0>)
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002bd6:	7810      	ldrb	r0, [r2, #0]
 8002bd8:	7018      	strb	r0, [r3, #0]
 8002bda:	e7d6      	b.n	8002b8a <prvGBCPUinstr+0x22>
}
 8002bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    prvGBCPUHaltedHandler();
 8002be0:	f7ff bf94 	b.w	8002b0c <prvGBCPUHaltedHandler>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002be4:	8970      	ldrh	r0, [r6, #10]
 8002be6:	4c15      	ldr	r4, [pc, #84]	; (8002c3c <prvGBCPUinstr+0xd4>)
 8002be8:	3001      	adds	r0, #1
 8002bea:	b280      	uxth	r0, r0
 8002bec:	f000 fd50 	bl	8003690 <ucGBMemoryRead>
 8002bf0:	8971      	ldrh	r1, [r6, #10]
 8002bf2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <prvGBCPUinstr+0xcc>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bf8:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002bfa:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bfe:	440b      	add	r3, r1
 8002c00:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002c02:	4790      	blx	r2
		    uctStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002c04:	8970      	ldrh	r0, [r6, #10]
 8002c06:	3801      	subs	r0, #1
 8002c08:	b280      	uxth	r0, r0
 8002c0a:	f000 fd41 	bl	8003690 <ucGBMemoryRead>
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <prvGBCPUinstr+0xc4>)
 8002c10:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002c14:	7940      	ldrb	r0, [r0, #5]
 8002c16:	7018      	strb	r0, [r3, #0]
 8002c18:	e7b7      	b.n	8002b8a <prvGBCPUinstr+0x22>
 8002c1a:	bf00      	nop
 8002c1c:	24001650 	.word	0x24001650
 8002c20:	2400100c 	.word	0x2400100c
 8002c24:	2400109f 	.word	0x2400109f
 8002c28:	2400109d 	.word	0x2400109d
 8002c2c:	240010a2 	.word	0x240010a2
 8002c30:	2400109e 	.word	0x2400109e
 8002c34:	2400000c 	.word	0x2400000c
 8002c38:	2400109c 	.word	0x2400109c
 8002c3c:	2400080c 	.word	0x2400080c

08002c40 <vGBCPUStep>:
void vGBCPUStep(){
 8002c40:	b508      	push	{r3, lr}
    if(ucBootRomEn != 0){
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <vGBCPUStep+0x28>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	b93a      	cbnz	r2, 8002c58 <vGBCPUStep+0x18>
        ucBootRomEn = 1;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
        vGBMemoryLoad(getRomPointer(), 256);
 8002c4c:	f001 fb08 	bl	8004260 <getRomPointer>
 8002c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c54:	f000 fc78 	bl	8003548 <vGBMemoryLoad>
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <vGBCPUStep+0x2c>)
 8002c5a:	8958      	ldrh	r0, [r3, #10]
 8002c5c:	f000 fd18 	bl	8003690 <ucGBMemoryRead>
}
 8002c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c64:	f7ff bf80 	b.w	8002b68 <prvGBCPUinstr>
 8002c68:	2400100e 	.word	0x2400100e
 8002c6c:	24001650 	.word	0x24001650

08002c70 <usConcat16BitBigEndian>:
 * @param x Lower address
 * @param y Higher address
 * @returns Newly concatenated short value
 */
uint16_t usConcat16BitBigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002c70:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002c74:	b280      	uxth	r0, r0
 8002c76:	4770      	bx	lr

08002c78 <vSetBit>:
 * @param n Register/memory location
 * @param bit The bit to be set (0 - 7)
 * @returns Nothing
 */
void vSetBit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002c78:	2301      	movs	r3, #1
 8002c7a:	fa03 f101 	lsl.w	r1, r3, r1
 8002c7e:	7803      	ldrb	r3, [r0, #0]
 8002c80:	4319      	orrs	r1, r3
 8002c82:	7001      	strb	r1, [r0, #0]
}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <vResetBit>:
 * @param n Register/memory location
 * @param bit The bit to be reset (0 - 7)
 * @returns Nothing
 */
void vResetBit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002c88:	2301      	movs	r3, #1
 8002c8a:	fa03 f101 	lsl.w	r1, r3, r1
 8002c8e:	7803      	ldrb	r3, [r0, #0]
 8002c90:	ea23 0101 	bic.w	r1, r3, r1
 8002c94:	7001      	strb	r1, [r0, #0]
}
 8002c96:	4770      	bx	lr

08002c98 <ucCheckBit>:
 * @param n Value of register/memory location
 * @param bit The bit to be checked (0 - 7)
 * @returns Value of checked bit
 */
uint8_t ucCheckBit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002c98:	4108      	asrs	r0, r1
}
 8002c9a:	f000 0001 	and.w	r0, r0, #1
 8002c9e:	4770      	bx	lr

08002ca0 <v8bitRegisterINC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002ca0:	7803      	ldrb	r3, [r0, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002ca8:	780b      	ldrb	r3, [r1, #0]
 8002caa:	bf0c      	ite	eq
 8002cac:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002cb0:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002cb4:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002cb6:	7803      	ldrb	r3, [r0, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002cbc:	f991 2000 	ldrsb.w	r2, [r1]
 8002cc0:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002cc4:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002cc6:	7800      	ldrb	r0, [r0, #0]
 8002cc8:	b118      	cbz	r0, 8002cd2 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002cca:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002cce:	700b      	strb	r3, [r1, #0]
}
 8002cd0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	700b      	strb	r3, [r1, #0]
}
 8002cda:	4770      	bx	lr

08002cdc <v8bitRegisterDEC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002cdc:	7803      	ldrb	r3, [r0, #0]
 8002cde:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002ce2:	780b      	ldrb	r3, [r1, #0]
 8002ce4:	bf14      	ite	ne
 8002ce6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002cea:	f043 0320 	orreq.w	r3, r3, #32
 8002cee:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002cf0:	7803      	ldrb	r3, [r0, #0]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002cf6:	f991 3000 	ldrsb.w	r3, [r1]
 8002cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cfe:	700a      	strb	r2, [r1, #0]
	vSetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002d00:	7802      	ldrb	r2, [r0, #0]
 8002d02:	b12a      	cbz	r2, 8002d10 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	700b      	strb	r3, [r1, #0]
}
 8002d0e:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002d10:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	700b      	strb	r3, [r1, #0]
}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop

08002d1c <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002d1c:	7802      	ldrb	r2, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d1e:	09d3      	lsrs	r3, r2, #7
 8002d20:	bf0c      	ite	eq
 8002d22:	2300      	moveq	r3, #0
 8002d24:	2310      	movne	r3, #16
 8002d26:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002d28:	7803      	ldrb	r3, [r0, #0]
 8002d2a:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002d2c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002d30:	7003      	strb	r3, [r0, #0]
}
 8002d32:	4770      	bx	lr

08002d34 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002d34:	7803      	ldrb	r3, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d36:	f013 0301 	ands.w	r3, r3, #1
 8002d3a:	d007      	beq.n	8002d4c <vGBFunctionRRCA+0x18>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d40:	7803      	ldrb	r3, [r0, #0]
 8002d42:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d48:	7003      	strb	r3, [r0, #0]
}
 8002d4a:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d4c:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d4e:	7803      	ldrb	r3, [r0, #0]
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) vSetBit(reg, 7);
}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop

08002d58 <vGBFunction16bitADD>:
 * @param reg16 value of a 16 bit register
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002d58:	8803      	ldrh	r3, [r0, #0]
 8002d5a:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d5c:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002d5e:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d60:	d517      	bpl.n	8002d92 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002d62:	f992 3000 	ldrsb.w	r3, [r2]
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	b2dc      	uxtb	r4, r3
 8002d6c:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002d6e:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002d72:	8804      	ldrh	r4, [r0, #0]
 8002d74:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002d78:	42a5      	cmp	r5, r4
 8002d7a:	d211      	bcs.n	8002da0 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002d7c:	f043 0320 	orr.w	r3, r3, #32
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002d84:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d86:	7813      	ldrb	r3, [r2, #0]
 8002d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	vResetBit(flagReg, N_FLAG);
}
 8002d8c:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002d8e:	7013      	strb	r3, [r2, #0]
}
 8002d90:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002d92:	f992 4000 	ldrsb.w	r4, [r2]
 8002d96:	f024 0310 	bic.w	r3, r4, #16
 8002d9a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002d9e:	e7e5      	b.n	8002d6c <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002da0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002da4:	e7ed      	b.n	8002d82 <vGBFunction16bitADD+0x2a>
 8002da6:	bf00      	nop

08002da8 <vGBFunctionRLA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002da8:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002dac:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dae:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002db0:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002db4:	f002 0210 	and.w	r2, r2, #16
 8002db8:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002dba:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002dbc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002dc0:	7003      	strb	r3, [r0, #0]
}
 8002dc2:	4770      	bx	lr

08002dc4 <vGBFunctionRRA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dc4:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002dc6:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dc8:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002dca:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dcc:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002dd0:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dd2:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002dd4:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002dd6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002dda:	7003      	strb	r3, [r0, #0]
}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002de0:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002de2:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002de4:	09c9      	lsrs	r1, r1, #7
 8002de6:	d105      	bne.n	8002df4 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002de8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002dea:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002dec:	fa41 f282 	sxtab	r2, r1, r2
 8002df0:	801a      	strh	r2, [r3, #0]
		return 12;
 8002df2:	4770      	bx	lr
		return 8;
 8002df4:	2008      	movs	r0, #8
	}
}
 8002df6:	4770      	bx	lr

08002df8 <vGBFunctionDAA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002df8:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002dfa:	b410      	push	{r4}
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002dfc:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002e00:	7804      	ldrb	r4, [r0, #0]
 8002e02:	b2a3      	uxth	r3, r4
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002e04:	d012      	beq.n	8002e2c <vGBFunctionDAA+0x34>
		if(ucCheckBit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002e06:	0694      	lsls	r4, r2, #26
 8002e08:	bf48      	it	mi
 8002e0a:	33fa      	addmi	r3, #250	; 0xfa
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e0c:	06d2      	lsls	r2, r2, #27
 8002e0e:	d425      	bmi.n	8002e5c <vGBFunctionDAA+0x64>
	}else{
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
		}else{ vResetBit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002e10:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e12:	f991 2000 	ldrsb.w	r2, [r1]
 8002e16:	f022 0320 	bic.w	r3, r2, #32
 8002e1a:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, H_FLAG);
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002e1c:	7800      	ldrb	r0, [r0, #0]
 8002e1e:	b1b0      	cbz	r0, 8002e4e <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002e20:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e28:	700b      	strb	r3, [r1, #0]
 8002e2a:	4770      	bx	lr
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e2c:	f012 0f20 	tst.w	r2, #32
 8002e30:	d017      	beq.n	8002e62 <vGBFunctionDAA+0x6a>
 8002e32:	3306      	adds	r3, #6
 8002e34:	b29b      	uxth	r3, r3
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e36:	06d4      	lsls	r4, r2, #27
 8002e38:	d403      	bmi.n	8002e42 <vGBFunctionDAA+0x4a>
 8002e3a:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002e3e:	2c90      	cmp	r4, #144	; 0x90
 8002e40:	d914      	bls.n	8002e6c <vGBFunctionDAA+0x74>
 8002e42:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002e44:	f042 0210 	orr.w	r2, r2, #16
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e48:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002e4a:	700a      	strb	r2, [r1, #0]
}
 8002e4c:	e7e0      	b.n	8002e10 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002e52:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	700b      	strb	r3, [r1, #0]
}
 8002e5a:	4770      	bx	lr
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e5c:	33a0      	adds	r3, #160	; 0xa0
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	e7d6      	b.n	8002e10 <vGBFunctionDAA+0x18>
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e62:	f004 040f 	and.w	r4, r4, #15
 8002e66:	2c09      	cmp	r4, #9
 8002e68:	d9e5      	bls.n	8002e36 <vGBFunctionDAA+0x3e>
 8002e6a:	e7e2      	b.n	8002e32 <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002e6c:	f022 0210 	bic.w	r2, r2, #16
 8002e70:	700a      	strb	r2, [r1, #0]
}
 8002e72:	e7cd      	b.n	8002e10 <vGBFunctionDAA+0x18>

08002e74 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002e74:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e76:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002e78:	09c9      	lsrs	r1, r1, #7
 8002e7a:	d005      	beq.n	8002e88 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002e7c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e7e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e80:	fa41 f282 	sxtab	r2, r1, r2
 8002e84:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e86:	4770      	bx	lr
	}else{
		return 8;
 8002e88:	2008      	movs	r0, #8
	}
}
 8002e8a:	4770      	bx	lr

08002e8c <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002e8c:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e8e:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002e90:	06c9      	lsls	r1, r1, #27
 8002e92:	d405      	bmi.n	8002ea0 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002e94:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e96:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e98:	fa41 f282 	sxtab	r2, r1, r2
 8002e9c:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e9e:	4770      	bx	lr
		return 8;
 8002ea0:	2008      	movs	r0, #8
	}
}
 8002ea2:	4770      	bx	lr

08002ea4 <vMemoryLocationINC>:
 * @brief Increment memory location
 * @param loc memory address
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002eaa:	f000 fbf1 	bl	8003690 <ucGBMemoryRead>
 8002eae:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002eb2:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002eb4:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002eb6:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002eb8:	bf0c      	ite	eq
 8002eba:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ebe:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002ec2:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002ec4:	f000 fbe4 	bl	8003690 <ucGBMemoryRead>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4628      	mov	r0, r5
 8002ecc:	3101      	adds	r1, #1
 8002ece:	b2c9      	uxtb	r1, r1
 8002ed0:	f000 fc06 	bl	80036e0 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002ed4:	7823      	ldrb	r3, [r4, #0]
	vResetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ed6:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002edc:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ede:	f000 fbd7 	bl	8003690 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002ee2:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ee4:	b118      	cbz	r0, 8002eee <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eea:	7023      	strb	r3, [r4, #0]
}
 8002eec:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	7023      	strb	r3, [r4, #0]
}
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
 8002ef6:	bf00      	nop

08002ef8 <vMemoryLocationDEC>:
 * @brief Decrement memory location
 * @param loc memory address
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	460c      	mov	r4, r1
 8002efc:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002efe:	f000 fbc7 	bl	8003690 <ucGBMemoryRead>
 8002f02:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002f04:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f06:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002f08:	bf14      	ite	ne
 8002f0a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002f0e:	f043 0320 	orreq.w	r3, r3, #32
 8002f12:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f14:	f000 fbbc 	bl	8003690 <ucGBMemoryRead>
 8002f18:	4601      	mov	r1, r0
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	3901      	subs	r1, #1
 8002f1e:	b2c9      	uxtb	r1, r1
 8002f20:	f000 fbde 	bl	80036e0 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002f24:	7823      	ldrb	r3, [r4, #0]
	vSetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f26:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f2c:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f2e:	f000 fbaf 	bl	8003690 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002f32:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f34:	b118      	cbz	r0, 8002f3e <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3a:	7023      	strb	r3, [r4, #0]
}
 8002f3c:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	7023      	strb	r3, [r4, #0]
}
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	bf00      	nop

08002f48 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002f48:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002f4a:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002f4c:	06c9      	lsls	r1, r1, #27
 8002f4e:	d505      	bpl.n	8002f5c <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002f50:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002f52:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002f54:	fa41 f282 	sxtab	r2, r1, r2
 8002f58:	801a      	strh	r2, [r3, #0]
		return 12;
 8002f5a:	4770      	bx	lr
	}else{
		return 8;
 8002f5c:	2008      	movs	r0, #8
	}
}
 8002f5e:	4770      	bx	lr

08002f60 <vGBFunctionADD>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002f60:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f62:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f64:	f002 050f 	and.w	r5, r2, #15
 8002f68:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002f6c:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f6e:	1963      	adds	r3, r4, r5
 8002f70:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002f72:	f991 3000 	ldrsb.w	r3, [r1]
 8002f76:	bfcc      	ite	gt
 8002f78:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002f7c:	f023 0320 	bicle.w	r3, r3, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002f80:	2aff      	cmp	r2, #255	; 0xff
 8002f82:	dd0d      	ble.n	8002fa0 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002f84:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002f88:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002f8a:	f043 0310 	orr.w	r3, r3, #16
 8002f8e:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002f90:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002f92:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f94:	b162      	cbz	r2, 8002fb0 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f9a:	bc30      	pop	{r4, r5}
 8002f9c:	700b      	strb	r3, [r1, #0]
 8002f9e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002fa0:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	700b      	strb	r3, [r1, #0]
 8002fa8:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002faa:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d1f2      	bne.n	8002f96 <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002fb4:	bc30      	pop	{r4, r5}
 8002fb6:	700b      	strb	r3, [r1, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop

08002fbc <vGBFunctionADC>:
 * @param regA Pointer to the A register
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002fbc:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fbe:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fc0:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fc4:	7804      	ldrb	r4, [r0, #0]
 8002fc6:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002fca:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fcc:	f004 070f 	and.w	r7, r4, #15
 8002fd0:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fd2:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fd4:	19e2      	adds	r2, r4, r7
 8002fd6:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002fd8:	bfcc      	ite	gt
 8002fda:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002fde:	f025 0520 	bicle.w	r5, r5, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002fe2:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002fe4:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002fe6:	dd0d      	ble.n	8003004 <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002fe8:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8002fec:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8002fee:	f045 0510 	orr.w	r5, r5, #16
 8002ff2:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8002ff4:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ff6:	b163      	cbz	r3, 8003012 <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8002ff8:	780b      	ldrb	r3, [r1, #0]
 8002ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8003000:	700b      	strb	r3, [r1, #0]
 8003002:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003004:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8003008:	b2db      	uxtb	r3, r3
 800300a:	700d      	strb	r5, [r1, #0]
 800300c:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f2      	bne.n	8002ff8 <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8003012:	780b      	ldrb	r3, [r1, #0]
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8003018:	bcf0      	pop	{r4, r5, r6, r7}
 800301a:	700b      	strb	r3, [r1, #0]
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <vGBFunctionSUB>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003020:	7803      	ldrb	r3, [r0, #0]
 8003022:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8003024:	b430      	push	{r4, r5}
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003026:	d21d      	bcs.n	8003064 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8003028:	f991 3000 	ldrsb.w	r3, [r1]
 800302c:	f043 0310 	orr.w	r3, r3, #16
 8003030:	b2dc      	uxtb	r4, r3
 8003032:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003034:	f002 050f 	and.w	r5, r2, #15
 8003038:	7804      	ldrb	r4, [r0, #0]
 800303a:	f004 040f 	and.w	r4, r4, #15
 800303e:	42a5      	cmp	r5, r4
 8003040:	d920      	bls.n	8003084 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8003042:	f043 0320 	orr.w	r3, r3, #32
 8003046:	b2db      	uxtb	r3, r3
 8003048:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 800304a:	7803      	ldrb	r3, [r0, #0]
 800304c:	1a9a      	subs	r2, r3, r2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8003052:	b172      	cbz	r2, 8003072 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8003054:	780b      	ldrb	r3, [r1, #0]
 8003056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800305a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 800305e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003060:	700b      	strb	r3, [r1, #0]
}
 8003062:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003064:	f991 4000 	ldrsb.w	r4, [r1]
 8003068:	f024 0310 	bic.w	r3, r4, #16
 800306c:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8003070:	e7df      	b.n	8003032 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8003072:	f991 3000 	ldrsb.w	r3, [r1]
 8003076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800307e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003080:	700b      	strb	r3, [r1, #0]
}
 8003082:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003084:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8003088:	e7de      	b.n	8003048 <vGBFunctionSUB+0x28>
 800308a:	bf00      	nop

0800308c <vGBFunctionSBC>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + ucCheckBit(*flagReg, C_FLAG);
 800308c:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 800308e:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 8003090:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) < 0x0) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8003094:	7804      	ldrb	r4, [r0, #0]
 8003096:	f002 060f 	and.w	r6, r2, #15
 800309a:	f004 040f 	and.w	r4, r4, #15
 800309e:	442e      	add	r6, r5
 80030a0:	1ba4      	subs	r4, r4, r6
 80030a2:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 80030a4:	bfb4      	ite	lt
 80030a6:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80030aa:	f023 0320 	bicge.w	r3, r3, #32
 80030ae:	700b      	strb	r3, [r1, #0]
 80030b0:	b25e      	sxtb	r6, r3
	(*regA - regValue - ucCheckBit(*flagReg, C_FLAG) < 0 ) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80030b2:	7804      	ldrb	r4, [r0, #0]
 80030b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030b8:	1aa4      	subs	r4, r4, r2
 80030ba:	1ae3      	subs	r3, r4, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db19      	blt.n	80030f4 <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 80030c0:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 80030c4:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 80030c6:	7804      	ldrb	r4, [r0, #0]
 80030c8:	1aa3      	subs	r3, r4, r2
 80030ca:	1b5b      	subs	r3, r3, r5
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80030d0:	b13b      	cbz	r3, 80030e2 <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 80030d2:	780b      	ldrb	r3, [r1, #0]
 80030d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 80030dc:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 80030de:	700b      	strb	r3, [r1, #0]
}
 80030e0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80030e2:	f991 3000 	ldrsb.w	r3, [r1]
 80030e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80030ee:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 80030f0:	700b      	strb	r3, [r1, #0]
}
 80030f2:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80030f4:	f046 0310 	orr.w	r3, r6, #16
 80030f8:	b2db      	uxtb	r3, r3
}
 80030fa:	e7e3      	b.n	80030c4 <vGBFunctionSBC+0x38>

080030fc <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 80030fc:	f991 3000 	ldrsb.w	r3, [r1]
 * @param flagReg Pointer to the flag register
 * @param regValue Value of a register/memory location
 * @returns Nothing
 */
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003100:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8003102:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003104:	f002 040f 	and.w	r4, r2, #15
 8003108:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 800310c:	bf8c      	ite	hi
 800310e:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003112:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003116:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8003118:	bf8c      	ite	hi
 800311a:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800311e:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003122:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8003124:	bf0c      	ite	eq
 8003126:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800312a:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 8003132:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003134:	700b      	strb	r3, [r1, #0]
}
 8003136:	4770      	bx	lr

08003138 <vGBFunctionRET>:
 * @brief Pop two bytes from the stack and jump to that address
 * @param regSP Pointer to the Stack Pointer register
 * @param regPC Pointer to the Program Counter register
 * @returns Nothing
 */
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4604      	mov	r4, r0
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 800313c:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 800313e:	460e      	mov	r6, r1
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003140:	f000 faa6 	bl	8003690 <ucGBMemoryRead>
 8003144:	8823      	ldrh	r3, [r4, #0]
 8003146:	4605      	mov	r5, r0
 8003148:	1c58      	adds	r0, r3, #1
 800314a:	b280      	uxth	r0, r0
 800314c:	f000 faa0 	bl	8003690 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003150:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003154:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8003156:	8823      	ldrh	r3, [r4, #0]
 8003158:	3302      	adds	r3, #2
 800315a:	8023      	strh	r3, [r4, #0]
}
 800315c:	bd70      	pop	{r4, r5, r6, pc}
 800315e:	bf00      	nop

08003160 <vGBFunctionPOP>:
 8003160:	f7ff bfea 	b.w	8003138 <vGBFunctionRET>

08003164 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8003164:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8003166:	09db      	lsrs	r3, r3, #7
 8003168:	d102      	bne.n	8003170 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800316a:	8002      	strh	r2, [r0, #0]
		return 16;
 800316c:	2010      	movs	r0, #16
 800316e:	4770      	bx	lr
		return 12;
 8003170:	200c      	movs	r0, #12
	}
}
 8003172:	4770      	bx	lr

08003174 <vGBFunctionPUSH>:
 * @brief Pushes 16 bit register onto stack
 * @param regSP Pointer to Stack Pointer register
 * @param reg16 Pointer to 16 bit register
 * @returns Nothing
 */
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003178:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800317a:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 800317c:	8809      	ldrh	r1, [r1, #0]
 800317e:	3801      	subs	r0, #1
 8003180:	0a09      	lsrs	r1, r1, #8
 8003182:	b280      	uxth	r0, r0
 8003184:	f000 faac 	bl	80036e0 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003188:	8820      	ldrh	r0, [r4, #0]
 800318a:	7829      	ldrb	r1, [r5, #0]
 800318c:	3802      	subs	r0, #2
 800318e:	b280      	uxth	r0, r0
 8003190:	f000 faa6 	bl	80036e0 <vGBMemoryWrite>
	*regSP -= 2;
 8003194:	8823      	ldrh	r3, [r4, #0]
 8003196:	3b02      	subs	r3, #2
 8003198:	8023      	strh	r3, [r4, #0]
}
 800319a:	bd38      	pop	{r3, r4, r5, pc}

0800319c <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800319c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800319e:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031a0:	09db      	lsrs	r3, r3, #7
 80031a2:	d001      	beq.n	80031a8 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 80031a4:	200c      	movs	r0, #12
}
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031a8:	4604      	mov	r4, r0
 80031aa:	4610      	mov	r0, r2
 80031ac:	4621      	mov	r1, r4
 80031ae:	f7ff ffe1 	bl	8003174 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031b2:	8820      	ldrh	r0, [r4, #0]
 80031b4:	3802      	subs	r0, #2
 80031b6:	b280      	uxth	r0, r0
 80031b8:	f000 fa6a 	bl	8003690 <ucGBMemoryRead>
 80031bc:	8823      	ldrh	r3, [r4, #0]
 80031be:	4605      	mov	r5, r0
 80031c0:	1e58      	subs	r0, r3, #1
 80031c2:	b280      	uxth	r0, r0
 80031c4:	f000 fa64 	bl	8003690 <ucGBMemoryRead>
 80031c8:	4603      	mov	r3, r0
		return 24;
 80031ca:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031cc:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031d0:	8025      	strh	r5, [r4, #0]
}
 80031d2:	bd38      	pop	{r3, r4, r5, pc}

080031d4 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80031d4:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031d6:	09db      	lsrs	r3, r3, #7
 80031d8:	d002      	beq.n	80031e0 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 80031da:	8002      	strh	r2, [r0, #0]
		return 16;
 80031dc:	2010      	movs	r0, #16
 80031de:	4770      	bx	lr
	}else{
		return 12;
 80031e0:	200c      	movs	r0, #12
	}
}
 80031e2:	4770      	bx	lr

080031e4 <vGBFunctionCALL_Z_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031e4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031e6:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031e8:	09db      	lsrs	r3, r3, #7
 80031ea:	d101      	bne.n	80031f0 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80031ec:	200c      	movs	r0, #12
	}
}
 80031ee:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031f0:	4604      	mov	r4, r0
 80031f2:	4610      	mov	r0, r2
 80031f4:	4621      	mov	r1, r4
 80031f6:	f7ff ffbd 	bl	8003174 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031fa:	8820      	ldrh	r0, [r4, #0]
 80031fc:	3802      	subs	r0, #2
 80031fe:	b280      	uxth	r0, r0
 8003200:	f000 fa46 	bl	8003690 <ucGBMemoryRead>
 8003204:	8823      	ldrh	r3, [r4, #0]
 8003206:	4605      	mov	r5, r0
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	b280      	uxth	r0, r0
 800320c:	f000 fa40 	bl	8003690 <ucGBMemoryRead>
 8003210:	4603      	mov	r3, r0
		return 24;
 8003212:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003214:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003218:	8025      	strh	r5, [r4, #0]
}
 800321a:	bd38      	pop	{r3, r4, r5, pc}

0800321c <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 800321c:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 800321e:	06db      	lsls	r3, r3, #27
 8003220:	d402      	bmi.n	8003228 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003222:	8002      	strh	r2, [r0, #0]
		return 16;
 8003224:	2010      	movs	r0, #16
 8003226:	4770      	bx	lr
		return 12;
 8003228:	200c      	movs	r0, #12
	}
}
 800322a:	4770      	bx	lr

0800322c <vGBFunctionCALL_NC_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800322c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800322e:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003230:	06db      	lsls	r3, r3, #27
 8003232:	d501      	bpl.n	8003238 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 8003234:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 8003236:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003238:	4604      	mov	r4, r0
 800323a:	4610      	mov	r0, r2
 800323c:	4621      	mov	r1, r4
 800323e:	f7ff ff99 	bl	8003174 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003242:	8820      	ldrh	r0, [r4, #0]
 8003244:	3802      	subs	r0, #2
 8003246:	b280      	uxth	r0, r0
 8003248:	f000 fa22 	bl	8003690 <ucGBMemoryRead>
 800324c:	8823      	ldrh	r3, [r4, #0]
 800324e:	4605      	mov	r5, r0
 8003250:	1e58      	subs	r0, r3, #1
 8003252:	b280      	uxth	r0, r0
 8003254:	f000 fa1c 	bl	8003690 <ucGBMemoryRead>
 8003258:	4603      	mov	r3, r0
		return 24;
 800325a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800325c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003260:	8025      	strh	r5, [r4, #0]
}
 8003262:	bd38      	pop	{r3, r4, r5, pc}

08003264 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 8003264:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003266:	06db      	lsls	r3, r3, #27
 8003268:	d502      	bpl.n	8003270 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 800326a:	8002      	strh	r2, [r0, #0]
		return 16;
 800326c:	2010      	movs	r0, #16
 800326e:	4770      	bx	lr
	}else{
		return 12;
 8003270:	200c      	movs	r0, #12
	}
}
 8003272:	4770      	bx	lr

08003274 <vGBFunctionCALL_C_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003274:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003276:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003278:	06db      	lsls	r3, r3, #27
 800327a:	d401      	bmi.n	8003280 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 800327c:	200c      	movs	r0, #12
	}
}
 800327e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003280:	4604      	mov	r4, r0
 8003282:	4610      	mov	r0, r2
 8003284:	4621      	mov	r1, r4
 8003286:	f7ff ff75 	bl	8003174 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800328a:	8820      	ldrh	r0, [r4, #0]
 800328c:	3802      	subs	r0, #2
 800328e:	b280      	uxth	r0, r0
 8003290:	f000 f9fe 	bl	8003690 <ucGBMemoryRead>
 8003294:	8823      	ldrh	r3, [r4, #0]
 8003296:	4605      	mov	r5, r0
 8003298:	1e58      	subs	r0, r3, #1
 800329a:	b280      	uxth	r0, r0
 800329c:	f000 f9f8 	bl	8003690 <ucGBMemoryRead>
 80032a0:	4603      	mov	r3, r0
		return 24;
 80032a2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80032a4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80032a8:	8025      	strh	r5, [r4, #0]
}
 80032aa:	bd38      	pop	{r3, r4, r5, pc}

080032ac <vGBFunctionADD_SP_r8>:
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 80032ac:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80032ae:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 80032b0:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	b2e5      	uxtb	r5, r4
 80032b6:	429d      	cmp	r5, r3
 80032b8:	d219      	bcs.n	80032ee <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80032ba:	f991 3000 	ldrsb.w	r3, [r1]
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	b2dd      	uxtb	r5, r3
 80032c4:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80032c6:	f004 040f 	and.w	r4, r4, #15
 80032ca:	8805      	ldrh	r5, [r0, #0]
 80032cc:	f005 050f 	and.w	r5, r5, #15
 80032d0:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80032d2:	bf34      	ite	cc
 80032d4:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80032d8:	f023 0320 	biccs.w	r3, r3, #32
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 80032e2:	8803      	ldrh	r3, [r0, #0]
 80032e4:	fa43 f282 	sxtab	r2, r3, r2
}
 80032e8:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 80032ea:	8002      	strh	r2, [r0, #0]
}
 80032ec:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032ee:	f991 5000 	ldrsb.w	r5, [r1]
 80032f2:	f025 0310 	bic.w	r3, r5, #16
 80032f6:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 80032fa:	e7e3      	b.n	80032c4 <vGBFunctionADD_SP_r8+0x18>

080032fc <vGBFunctionLD_HL_SP_r8>:
 * @param regSP Pointer to the SP register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80032fc:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 80032fe:	880c      	ldrh	r4, [r1, #0]
 8003300:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003302:	b2e4      	uxtb	r4, r4
 8003304:	b2ee      	uxtb	r6, r5
 8003306:	42a6      	cmp	r6, r4
 8003308:	d219      	bcs.n	800333e <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800330a:	f992 4000 	ldrsb.w	r4, [r2]
 800330e:	f044 0410 	orr.w	r4, r4, #16
 8003312:	b2e6      	uxtb	r6, r4
 8003314:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003316:	f005 050f 	and.w	r5, r5, #15
 800331a:	880e      	ldrh	r6, [r1, #0]
 800331c:	f006 060f 	and.w	r6, r6, #15
 8003320:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 8003322:	bf34      	ite	cc
 8003324:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 8003328:	f024 0420 	biccs.w	r4, r4, #32
 800332c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003330:	7014      	strb	r4, [r2, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 8003332:	880a      	ldrh	r2, [r1, #0]
 8003334:	fa42 f383 	sxtab	r3, r2, r3
}
 8003338:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 800333a:	8003      	strh	r3, [r0, #0]
}
 800333c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800333e:	f992 6000 	ldrsb.w	r6, [r2]
 8003342:	f026 0410 	bic.w	r4, r6, #16
 8003346:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 800334a:	e7e3      	b.n	8003314 <vGBFunctionLD_HL_SP_r8+0x18>

0800334c <ucGBFunctionRLC>:
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 7);
	regValue <<= 1;
 800334c:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 800334e:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003350:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003354:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003358:	d10a      	bne.n	8003370 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 800335a:	f991 3000 	ldrsb.w	r3, [r1]
 800335e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003362:	b152      	cbz	r2, 800337a <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 8003364:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003368:	f043 0310 	orr.w	r3, r3, #16
 800336c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800336e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003370:	780b      	ldrb	r3, [r1, #0]
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003376:	2a00      	cmp	r2, #0
 8003378:	d1f4      	bne.n	8003364 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 800337a:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 800337e:	700b      	strb	r3, [r1, #0]
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <ucGBFunctionRRC>:
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) vSetBit(&regValue, 7);
 8003384:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 8003386:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) vSetBit(&regValue, 7);
 800338a:	d509      	bpl.n	80033a0 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 800338c:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 800338e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 8003392:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
	return regValue;
}
 8003396:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003398:	f043 0310 	orr.w	r3, r3, #16
 800339c:	700b      	strb	r3, [r1, #0]
}
 800339e:	4770      	bx	lr
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033a0:	b942      	cbnz	r2, 80033b4 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 80033a2:	f991 3000 	ldrsb.w	r3, [r1]
 80033a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80033aa:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 80033ae:	4610      	mov	r0, r2
 80033b0:	700b      	strb	r3, [r1, #0]
 80033b2:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033b4:	780b      	ldrb	r3, [r1, #0]
 80033b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033ba:	e7f6      	b.n	80033aa <ucGBFunctionRRC+0x26>

080033bc <ucGBFunctionRL>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 80033bc:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033be:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80033c2:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80033c6:	bf14      	ite	ne
 80033c8:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033cc:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80033d0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80033d4:	b25b      	sxtb	r3, r3
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033d6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033da:	d105      	bne.n	80033e8 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 80033dc:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033e6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	700b      	strb	r3, [r1, #0]
}
 80033ee:	4770      	bx	lr

080033f0 <ucGBFunctionRR>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 80033f0:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033f2:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 80033f6:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 80033fa:	bf14      	ite	ne
 80033fc:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003400:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 8003404:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 8003406:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 8003408:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 800340c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003410:	d105      	bne.n	800341e <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 8003412:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341a:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800341c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	700b      	strb	r3, [r1, #0]
}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <ucGBFunctionSLA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003428:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 800342a:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 800342e:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 8003432:	bf4c      	ite	mi
 8003434:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003438:	f023 0310 	bicpl.w	r3, r3, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 800343c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003440:	d105      	bne.n	800344e <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 8003442:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800344c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	700b      	strb	r3, [r1, #0]
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop

08003458 <ucGBFunctionSRA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 8003458:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800345c:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003460:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 8003464:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003468:	bf14      	ite	ne
 800346a:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 800346e:	f022 0210 	biceq.w	r2, r2, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003472:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003476:	d105      	bne.n	8003484 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003478:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003482:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003484:	f002 031f 	and.w	r3, r2, #31
 8003488:	700b      	strb	r3, [r1, #0]
}
 800348a:	4770      	bx	lr

0800348c <ucGBFunctionSWAP>:
 * @param regValue value of the register or memory location
 * @param flagReg Pointer to the flag register
 * @returns New value of the register or memory
 */
uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 800348c:	0903      	lsrs	r3, r0, #4
 800348e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003492:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003496:	d107      	bne.n	80034a8 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003498:	f991 3000 	ldrsb.w	r3, [r1]
 800349c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	vResetBit(flagReg, C_FLAG);
	return regValue;
}
 80034a6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034a8:	780b      	ldrb	r3, [r1, #0]
 80034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	700b      	strb	r3, [r1, #0]
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop

080034b8 <ucGBFunctionSRL>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80034b8:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 80034ba:	f991 3000 	ldrsb.w	r3, [r1]
 80034be:	bf4c      	ite	mi
 80034c0:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80034c4:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80034c8:	0840      	lsrs	r0, r0, #1
 80034ca:	d105      	bne.n	80034d8 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80034cc:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80034d6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	700b      	strb	r3, [r1, #0]
}
 80034de:	4770      	bx	lr

080034e0 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80034e0:	fa40 f101 	asr.w	r1, r0, r1
 * @param bit The bit to be tested
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(ucCheckBit(regValue, bit) != 0) ?  vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80034e4:	07cb      	lsls	r3, r1, #31
 80034e6:	d508      	bpl.n	80034fa <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80034e8:	7813      	ldrb	r3, [r2, #0]
 80034ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80034f2:	f043 0320 	orr.w	r3, r3, #32
 80034f6:	7013      	strb	r3, [r2, #0]
	vResetBit(flagReg, N_FLAG);
	vSetBit(flagReg, H_FLAG);
}
 80034f8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80034fa:	f992 3000 	ldrsb.w	r3, [r2]
 80034fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	7013      	strb	r3, [r2, #0]
}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <ucGBFunctionRESHL>:
 * @brief Resets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be reset (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003510:	b510      	push	{r4, lr}
 8003512:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003514:	f000 f8bc 	bl	8003690 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8003518:	2301      	movs	r3, #1
 800351a:	fa03 f104 	lsl.w	r1, r3, r4
 800351e:	ea20 0001 	bic.w	r0, r0, r1
	vResetBit(&tempRes, bit);
	return tempRes;
}
 8003522:	b2c0      	uxtb	r0, r0
 8003524:	bd10      	pop	{r4, pc}
 8003526:	bf00      	nop

08003528 <ucGBFunctionSETHL>:
 * @brief Sets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be set (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 8003528:	b510      	push	{r4, lr}
 800352a:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 800352c:	f000 f8b0 	bl	8003690 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003530:	2301      	movs	r3, #1
 8003532:	fa03 f104 	lsl.w	r1, r3, r4
 8003536:	4308      	orrs	r0, r1
	vSetBit(&tempRes, bit);
	return tempRes;
}
 8003538:	b2c0      	uxtb	r0, r0
 800353a:	bd10      	pop	{r4, pc}

0800353c <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
    ucCurrentOP = op;
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <vGBMemorySetOP+0x8>)
 800353e:	7018      	strb	r0, [r3, #0]
}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	24011661 	.word	0x24011661

08003548 <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 8003548:	4603      	mov	r3, r0
 800354a:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <vGBMemoryLoad+0xc>)
 800354e:	4619      	mov	r1, r3
 8003550:	f007 bda8 	b.w	800b0a4 <memcpy>
 8003554:	24001660 	.word	0x24001660

08003558 <prvGBMemoryJoypad>:
/**
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @param data data trying to be written to Joypad Register.
 * @return Joypad Keys pressed
 */
uint8_t prvGBMemoryJoypad(){
 8003558:	b538      	push	{r3, r4, r5, lr}
    uint32_t value = 0;
	uint8_t mask = 0;

	if(ucJoypadSELdir == 0x10){
 800355a:	4c25      	ldr	r4, [pc, #148]	; (80035f0 <prvGBMemoryJoypad+0x98>)
 800355c:	7822      	ldrb	r2, [r4, #0]
 800355e:	2a10      	cmp	r2, #16
 8003560:	d009      	beq.n	8003576 <prvGBMemoryJoypad+0x1e>
	    HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
		value = HAL_ADC_GetValue(&hadc3) >> 12;
	}else if(ucJoypadSELbut == 0x20){
 8003562:	4d24      	ldr	r5, [pc, #144]	; (80035f4 <prvGBMemoryJoypad+0x9c>)
 8003564:	782b      	ldrb	r3, [r5, #0]
 8003566:	2b20      	cmp	r3, #32
 8003568:	d029      	beq.n	80035be <prvGBMemoryJoypad+0x66>
 800356a:	200e      	movs	r0, #14
		}else{
		    mask = (0x1);
		}
	}

	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 800356c:	4310      	orrs	r0, r2
 800356e:	4318      	orrs	r0, r3
}
 8003570:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003574:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc3);
 8003576:	4820      	ldr	r0, [pc, #128]	; (80035f8 <prvGBMemoryJoypad+0xa0>)
 8003578:	f003 fb38 	bl	8006bec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	481d      	ldr	r0, [pc, #116]	; (80035f8 <prvGBMemoryJoypad+0xa0>)
 8003582:	f003 f821 	bl	80065c8 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc3) >> 12;
 8003586:	481c      	ldr	r0, [pc, #112]	; (80035f8 <prvGBMemoryJoypad+0xa0>)
 8003588:	f003 f8a8 	bl	80066dc <HAL_ADC_GetValue>
 800358c:	4d19      	ldr	r5, [pc, #100]	; (80035f4 <prvGBMemoryJoypad+0x9c>)
 800358e:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 8003590:	280f      	cmp	r0, #15
 8003592:	d022      	beq.n	80035da <prvGBMemoryJoypad+0x82>
	    if((value >> 3) & 0x1){
 8003594:	0703      	lsls	r3, r0, #28
 8003596:	d40a      	bmi.n	80035ae <prvGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 8003598:	f000 0306 	and.w	r3, r0, #6
 800359c:	2b06      	cmp	r3, #6
 800359e:	782b      	ldrb	r3, [r5, #0]
 80035a0:	d022      	beq.n	80035e8 <prvGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 80035a2:	2802      	cmp	r0, #2
 80035a4:	7822      	ldrb	r2, [r4, #0]
 80035a6:	bf8c      	ite	hi
 80035a8:	200d      	movhi	r0, #13
 80035aa:	200e      	movls	r0, #14
 80035ac:	e7de      	b.n	800356c <prvGBMemoryJoypad+0x14>
 80035ae:	7822      	ldrb	r2, [r4, #0]
	    if((value >> 3) & 0x1){
 80035b0:	200b      	movs	r0, #11
 80035b2:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 80035b4:	4310      	orrs	r0, r2
 80035b6:	4318      	orrs	r0, r3
}
 80035b8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035bc:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc1);
 80035be:	480f      	ldr	r0, [pc, #60]	; (80035fc <prvGBMemoryJoypad+0xa4>)
 80035c0:	f003 fb14 	bl	8006bec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <prvGBMemoryJoypad+0xa4>)
 80035ca:	f002 fffd 	bl	80065c8 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 80035ce:	480b      	ldr	r0, [pc, #44]	; (80035fc <prvGBMemoryJoypad+0xa4>)
 80035d0:	f003 f884 	bl	80066dc <HAL_ADC_GetValue>
 80035d4:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035d6:	280f      	cmp	r0, #15
 80035d8:	d1dc      	bne.n	8003594 <prvGBMemoryJoypad+0x3c>
 80035da:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 80035dc:	782b      	ldrb	r3, [r5, #0]
 80035de:	4310      	orrs	r0, r2
 80035e0:	4318      	orrs	r0, r3
}
 80035e2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 80035e8:	2007      	movs	r0, #7
 80035ea:	7822      	ldrb	r2, [r4, #0]
 80035ec:	e7be      	b.n	800356c <prvGBMemoryJoypad+0x14>
 80035ee:	bf00      	nop
 80035f0:	24011662 	.word	0x24011662
 80035f4:	2400165d 	.word	0x2400165d
 80035f8:	24011848 	.word	0x24011848
 80035fc:	240117e4 	.word	0x240117e4

08003600 <vGBMemorySetBit>:
 * @param address memory map address
 * @param bit which bit to set (0 - 7)
 * @returns Nothing
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003600:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003604:	b29b      	uxth	r3, r3
 8003606:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800360a:	d302      	bcc.n	8003612 <vGBMemorySetBit+0x12>
	    mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800360c:	0403      	lsls	r3, r0, #16
 800360e:	d411      	bmi.n	8003634 <vGBMemorySetBit+0x34>
 8003610:	4770      	bx	lr
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 8003612:	2301      	movs	r3, #1
 8003614:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 8003616:	b410      	push	{r4}
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 8003618:	fa03 f101 	lsl.w	r1, r3, r1
 800361c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8003620:	b249      	sxtb	r1, r1
 8003622:	5d13      	ldrb	r3, [r2, r4]
 8003624:	430b      	orrs	r3, r1
 8003626:	5513      	strb	r3, [r2, r4]
	    return;

	mem.ram[address] |= (0x1 << bit);
 8003628:	5c13      	ldrb	r3, [r2, r0]
 800362a:	4319      	orrs	r1, r3
 800362c:	5411      	strb	r1, [r2, r0]
}
 800362e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	2301      	movs	r3, #1
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <vGBMemorySetBit+0x48>)
 8003638:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 800363c:	5c13      	ldrb	r3, [r2, r0]
 800363e:	b249      	sxtb	r1, r1
 8003640:	4319      	orrs	r1, r3
 8003642:	5411      	strb	r1, [r2, r0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	24001660 	.word	0x24001660

0800364c <vGBMemoryResetBit>:
 * @param bit which bit to reset (0 - 7)
 * @returns Nothing
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

    if(address >= ECHORAM_BASE && address < OAM_BASE)
 800364c:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8003650:	b292      	uxth	r2, r2
 8003652:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 8003656:	b430      	push	{r4, r5}
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003658:	d20f      	bcs.n	800367a <vGBMemoryResetBit+0x2e>
	    mem.ram[address - 0x2000] &= ~(0x1 << bit);
 800365a:	2201      	movs	r2, #1
 800365c:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <vGBMemoryResetBit+0x40>)
 8003662:	fa02 f101 	lsl.w	r1, r2, r1
 8003666:	5d62      	ldrb	r2, [r4, r5]
 8003668:	43cb      	mvns	r3, r1
 800366a:	b25b      	sxtb	r3, r3
 800366c:	401a      	ands	r2, r3
 800366e:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
	    return;

	mem.ram[address] &= ~(0x1 << bit);
 8003670:	5c22      	ldrb	r2, [r4, r0]
 8003672:	4013      	ands	r3, r2
 8003674:	5423      	strb	r3, [r4, r0]
}
 8003676:	bc30      	pop	{r4, r5}
 8003678:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800367a:	0403      	lsls	r3, r0, #16
 800367c:	d5fb      	bpl.n	8003676 <vGBMemoryResetBit+0x2a>
 800367e:	2201      	movs	r2, #1
 8003680:	4c02      	ldr	r4, [pc, #8]	; (800368c <vGBMemoryResetBit+0x40>)
 8003682:	fa02 f301 	lsl.w	r3, r2, r1
 8003686:	43db      	mvns	r3, r3
 8003688:	b25b      	sxtb	r3, r3
 800368a:	e7f1      	b.n	8003670 <vGBMemoryResetBit+0x24>
 800368c:	24001660 	.word	0x24001660

08003690 <ucGBMemoryRead>:
 * @param address memory map address
 * @return data byte of data located in memory map
 */
uint8_t ucGBMemoryRead(uint16_t address){

    if(address >= 0xFF00){
 8003690:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
uint8_t ucGBMemoryRead(uint16_t address){
 8003694:	4603      	mov	r3, r0
    if(address >= 0xFF00){
 8003696:	d307      	bcc.n	80036a8 <ucGBMemoryRead+0x18>
	    if(address == JOY_ADDR){
 8003698:	d019      	beq.n	80036ce <ucGBMemoryRead+0x3e>
		    return prvGBMemoryJoypad();
		}

		if(address == SB_ADDR){
 800369a:	f64f 7201 	movw	r2, #65281	; 0xff01
 800369e:	4290      	cmp	r0, r2
 80036a0:	d017      	beq.n	80036d2 <ucGBMemoryRead+0x42>
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <ucGBMemoryRead+0x48>)
	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
	    return mem.ram[address - 0x2000];

	return mem.ram[address];
 80036a4:	5cd0      	ldrb	r0, [r2, r3]
 80036a6:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE) && mem.ram[0xFF50] != 0){
 80036a8:	0402      	lsls	r2, r0, #16
 80036aa:	d407      	bmi.n	80036bc <ucGBMemoryRead+0x2c>
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <ucGBMemoryRead+0x48>)
 80036ae:	f64f 7150 	movw	r1, #65360	; 0xff50
 80036b2:	5c51      	ldrb	r1, [r2, r1]
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d0f5      	beq.n	80036a4 <ucGBMemoryRead+0x14>
	    return ucGBMBCreadBankX(address);
 80036b8:	f7fc be88 	b.w	80003cc <ucGBMBCreadBankX>
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80036bc:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 80036c0:	b292      	uxth	r2, r2
 80036c2:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 80036c6:	d2ec      	bcs.n	80036a2 <ucGBMemoryRead+0x12>
	    return mem.ram[address - 0x2000];
 80036c8:	4a04      	ldr	r2, [pc, #16]	; (80036dc <ucGBMemoryRead+0x4c>)
 80036ca:	5c80      	ldrb	r0, [r0, r2]
 80036cc:	4770      	bx	lr
		    return prvGBMemoryJoypad();
 80036ce:	f7ff bf43 	b.w	8003558 <prvGBMemoryJoypad>
		    return 0xFF;
 80036d2:	20ff      	movs	r0, #255	; 0xff
}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	24001660 	.word	0x24001660
 80036dc:	23fff660 	.word	0x23fff660

080036e0 <vGBMemoryWrite>:
    if(address >= 0xFF00){
 80036e0:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4605      	mov	r5, r0
 80036e8:	460c      	mov	r4, r1
    if(address >= 0xFF00){
 80036ea:	d319      	bcc.n	8003720 <vGBMemoryWrite+0x40>
	    if(address == JOY_ADDR){
 80036ec:	d027      	beq.n	800373e <vGBMemoryWrite+0x5e>
		else if(address == DMA_ADDR){
 80036ee:	f64f 7346 	movw	r3, #65350	; 0xff46
 80036f2:	4298      	cmp	r0, r3
 80036f4:	d02c      	beq.n	8003750 <vGBMemoryWrite+0x70>
		else if(address == DIV_ADDR){
 80036f6:	f64f 7304 	movw	r3, #65284	; 0xff04
 80036fa:	4298      	cmp	r0, r3
 80036fc:	d03c      	beq.n	8003778 <vGBMemoryWrite+0x98>
		else if(address == TAC_ADDR){
 80036fe:	f64f 7307 	movw	r3, #65287	; 0xff07
 8003702:	4298      	cmp	r0, r3
 8003704:	d04d      	beq.n	80037a2 <vGBMemoryWrite+0xc2>
		else if(address == STC_ADDR){
 8003706:	f64f 7302 	movw	r3, #65282	; 0xff02
 800370a:	4298      	cmp	r0, r3
 800370c:	d038      	beq.n	8003780 <vGBMemoryWrite+0xa0>
		    if(data == 1)
 800370e:	2901      	cmp	r1, #1
 8003710:	d103      	bne.n	800371a <vGBMemoryWrite+0x3a>
		else if(address == 0xFF50){
 8003712:	f64f 7350 	movw	r3, #65360	; 0xff50
		    if(data == 1)
 8003716:	4298      	cmp	r0, r3
 8003718:	d03f      	beq.n	800379a <vGBMemoryWrite+0xba>
	mem.ram[address] = data;
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <vGBMemoryWrite+0xf0>)
 800371c:	555c      	strb	r4, [r3, r5]
}
 800371e:	bd70      	pop	{r4, r5, r6, pc}
	if((address >= CARTROM_BANK0 && address < VRAM_BASE)){
 8003720:	0403      	lsls	r3, r0, #16
 8003722:	d508      	bpl.n	8003736 <vGBMemoryWrite+0x56>
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 8003724:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003728:	b29b      	uxth	r3, r3
 800372a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800372e:	d2f4      	bcs.n	800371a <vGBMemoryWrite+0x3a>
	    mem.ram[address - 0x2000] = data;
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <vGBMemoryWrite+0xf4>)
 8003732:	54ec      	strb	r4, [r5, r3]
}
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    vGBMBCwrite(address, data);
 800373a:	f7fc be65 	b.w	8000408 <vGBMBCwrite>
	        ucJoypadSELdir = data & 0x10;
 800373e:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <vGBMemoryWrite+0xf8>)
 8003740:	f001 0110 	and.w	r1, r1, #16
	        ucJoypadSELbut = data & 0x20;
 8003744:	f004 0420 	and.w	r4, r4, #32
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <vGBMemoryWrite+0xfc>)
	        ucJoypadSELdir = data & 0x10;
 800374a:	7011      	strb	r1, [r2, #0]
	        ucJoypadSELbut = data & 0x20;
 800374c:	701c      	strb	r4, [r3, #0]
}
 800374e:	bd70      	pop	{r4, r5, r6, pc}
		    for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 8003750:	020d      	lsls	r5, r1, #8
 8003752:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003756:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 800375a:	f505 7500 	add.w	r5, r5, #512	; 0x200
 800375e:	1960      	adds	r0, r4, r5
 8003760:	b280      	uxth	r0, r0
 8003762:	f7ff ff95 	bl	8003690 <ucGBMemoryRead>
 8003766:	4601      	mov	r1, r0
 8003768:	4620      	mov	r0, r4
 800376a:	3401      	adds	r4, #1
 800376c:	f7ff ffb8 	bl	80036e0 <vGBMemoryWrite>
 8003770:	b2a4      	uxth	r4, r4
 8003772:	42b4      	cmp	r4, r6
 8003774:	d1f3      	bne.n	800375e <vGBMemoryWrite+0x7e>
}
 8003776:	bd70      	pop	{r4, r5, r6, pc}
		    mem.ram[DIV_ADDR] = 0;
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <vGBMemoryWrite+0xf0>)
 800377a:	2200      	movs	r2, #0
 800377c:	541a      	strb	r2, [r3, r0]
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}
		    if(ucCheckBit(data, 7)){
 8003780:	2107      	movs	r1, #7
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff fa88 	bl	8002c98 <ucCheckBit>
 8003788:	b110      	cbz	r0, 8003790 <vGBMemoryWrite+0xb0>
		        ucDataTransFlag = 1;
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <vGBMemoryWrite+0x100>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
			mem.ram[address] = data;
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <vGBMemoryWrite+0xf0>)
 8003792:	f64f 7302 	movw	r3, #65282	; 0xff02
 8003796:	54d4      	strb	r4, [r2, r3]
}
 8003798:	bd70      	pop	{r4, r5, r6, pc}
		        ucBootRomEn = 0;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <vGBMemoryWrite+0x104>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e7bb      	b.n	800371a <vGBMemoryWrite+0x3a>
		    ucTimerStopStart = ucCheckBit(data, 2);
 80037a2:	2102      	movs	r1, #2
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff fa77 	bl	8002c98 <ucCheckBit>
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <vGBMemoryWrite+0x108>)
 80037ac:	4602      	mov	r2, r0
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037ae:	2101      	movs	r1, #1
 80037b0:	4620      	mov	r0, r4
		    ucTimerStopStart = ucCheckBit(data, 2);
 80037b2:	701a      	strb	r2, [r3, #0]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037b4:	f7ff fa70 	bl	8002c98 <ucCheckBit>
 80037b8:	4606      	mov	r6, r0
 80037ba:	2100      	movs	r1, #0
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fa6b 	bl	8002c98 <ucCheckBit>
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <vGBMemoryWrite+0x10c>)
			mem.ram[address] = data;
 80037c4:	4a02      	ldr	r2, [pc, #8]	; (80037d0 <vGBMemoryWrite+0xf0>)
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037c6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
			mem.ram[address] = data;
 80037ca:	5554      	strb	r4, [r2, r5]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 80037cc:	7018      	strb	r0, [r3, #0]
}
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	24001660 	.word	0x24001660
 80037d4:	23fff660 	.word	0x23fff660
 80037d8:	24011662 	.word	0x24011662
 80037dc:	2400165d 	.word	0x2400165d
 80037e0:	240010a7 	.word	0x240010a7
 80037e4:	2400100e 	.word	0x2400100e
 80037e8:	24011660 	.word	0x24011660
 80037ec:	2400165c 	.word	0x2400165c

080037f0 <vGBMemoryInit>:
void vGBMemoryInit(){
 80037f0:	b570      	push	{r4, r5, r6, lr}
    vGBMBCsetControllerType(mem.ram[0x147]);
 80037f2:	4c12      	ldr	r4, [pc, #72]	; (800383c <vGBMemoryInit+0x4c>)
	mem.ram[IF_ADDR] = 0xE1;
 80037f4:	25e1      	movs	r5, #225	; 0xe1
    ucTimerStopStart = 0;
 80037f6:	4e12      	ldr	r6, [pc, #72]	; (8003840 <vGBMemoryInit+0x50>)
    vGBMBCsetControllerType(mem.ram[0x147]);
 80037f8:	f894 0147 	ldrb.w	r0, [r4, #327]	; 0x147
 80037fc:	f7fc fde0 	bl	80003c0 <vGBMBCsetControllerType>
	mem.ram[IF_ADDR] = 0xE1;
 8003800:	f64f 730f 	movw	r3, #65295	; 0xff0f
    reg.PC = 0; reg.AF = 0; reg.BC = 0; reg.DE = 0; reg.HL = 0; reg.SP = 0;
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <vGBMemoryInit+0x54>)
	mem.ram[JOY_ADDR] = 0xCF;
 8003806:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
	mem.ram[IF_ADDR] = 0xE1;
 800380a:	54e5      	strb	r5, [r4, r3]
    reg.PC = 0; reg.AF = 0; reg.BC = 0; reg.DE = 0; reg.HL = 0; reg.SP = 0;
 800380c:	2300      	movs	r3, #0
    ucClockMode = 0;
 800380e:	4d0e      	ldr	r5, [pc, #56]	; (8003848 <vGBMemoryInit+0x58>)
	mem.ram[JOY_ADDR] = 0xCF;
 8003810:	20cf      	movs	r0, #207	; 0xcf
    ucBootRomEn = 1;
 8003812:	2401      	movs	r4, #1
    reg.PC = 0; reg.AF = 0; reg.BC = 0; reg.DE = 0; reg.HL = 0; reg.SP = 0;
 8003814:	8013      	strh	r3, [r2, #0]
    ucClockMode = 0;
 8003816:	702b      	strb	r3, [r5, #0]
    reg.PC = 0; reg.AF = 0; reg.BC = 0; reg.DE = 0; reg.HL = 0; reg.SP = 0;
 8003818:	8153      	strh	r3, [r2, #10]
    ucDataTransFlag = 0;
 800381a:	4d0c      	ldr	r5, [pc, #48]	; (800384c <vGBMemoryInit+0x5c>)
    reg.PC = 0; reg.AF = 0; reg.BC = 0; reg.DE = 0; reg.HL = 0; reg.SP = 0;
 800381c:	8053      	strh	r3, [r2, #2]
 800381e:	8093      	strh	r3, [r2, #4]
 8003820:	80d3      	strh	r3, [r2, #6]
 8003822:	8113      	strh	r3, [r2, #8]
    ucBootRomEn = 1;
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <vGBMemoryInit+0x60>)
	mem.ram[JOY_ADDR] = 0xCF;
 8003826:	7008      	strb	r0, [r1, #0]
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003828:	21f8      	movs	r1, #248	; 0xf8
    ucTimerStopStart = 0;
 800382a:	7033      	strb	r3, [r6, #0]
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 800382c:	f64f 7007 	movw	r0, #65287	; 0xff07
    ucDataTransFlag = 0;
 8003830:	702b      	strb	r3, [r5, #0]
    ucBootRomEn = 1;
 8003832:	7014      	strb	r4, [r2, #0]
}
 8003834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003838:	f7ff bf52 	b.w	80036e0 <vGBMemoryWrite>
 800383c:	24001660 	.word	0x24001660
 8003840:	24011660 	.word	0x24011660
 8003844:	24001650 	.word	0x24001650
 8003848:	2400165c 	.word	0x2400165c
 800384c:	240010a7 	.word	0x240010a7
 8003850:	2400100e 	.word	0x2400100e

08003854 <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	460d      	mov	r5, r1
    vGBMemoryWrite(address,   data & 0xFF);
 800385a:	b2c9      	uxtb	r1, r1
 800385c:	f7ff ff40 	bl	80036e0 <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 8003860:	1c60      	adds	r0, r4, #1
 8003862:	0a29      	lsrs	r1, r5, #8
 8003864:	b280      	uxth	r0, r0
}
 8003866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 800386a:	f7ff bf39 	b.w	80036e0 <vGBMemoryWrite>
 800386e:	bf00      	nop

08003870 <usGBMemoryReadShort>:
 * @brief Read from 2 sequential locations in memory map
 * @param address memory map address
 * @return Short information of data in memory map
 */
uint16_t usGBMemoryReadShort(uint16_t address){
    return usConcat16BitBigEndian(mem.ram[address], mem.ram[address+1]);
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <usGBMemoryReadShort+0xc>)
 8003872:	181a      	adds	r2, r3, r0
 8003874:	5c18      	ldrb	r0, [r3, r0]
 8003876:	7851      	ldrb	r1, [r2, #1]
 8003878:	f7ff b9fa 	b.w	8002c70 <usConcat16BitBigEndian>
 800387c:	24001660 	.word	0x24001660

08003880 <vGBMemoryIncTimers>:
    static uint8_t timerDIV  = 0;
    static uint8_t timerTIMA = 0;
    static uint8_t oldTIMA   = 0;
    static uint8_t timerDiv8k = 0;

    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003880:	4a39      	ldr	r2, [pc, #228]	; (8003968 <vGBMemoryIncTimers+0xe8>)
 8003882:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 8003884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003888:	7813      	ldrb	r3, [r2, #0]
 800388a:	0084      	lsls	r4, r0, #2
 800388c:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8003890:	2dff      	cmp	r5, #255	; 0xff
 8003892:	dd0c      	ble.n	80038ae <vGBMemoryIncTimers+0x2e>
        mem.ram[DIV_ADDR]++;
 8003894:	4e35      	ldr	r6, [pc, #212]	; (800396c <vGBMemoryIncTimers+0xec>)
 8003896:	f64f 7704 	movw	r7, #65284	; 0xff04

        if(ucDataTransFlag){
 800389a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8003984 <vGBMemoryIncTimers+0x104>
        mem.ram[DIV_ADDR]++;
 800389e:	5df5      	ldrb	r5, [r6, r7]
        if(ucDataTransFlag){
 80038a0:	f89c e000 	ldrb.w	lr, [ip]
        mem.ram[DIV_ADDR]++;
 80038a4:	3501      	adds	r5, #1
 80038a6:	55f5      	strb	r5, [r6, r7]
        if(ucDataTransFlag){
 80038a8:	f1be 0f00 	cmp.w	lr, #0
 80038ac:	d137      	bne.n	800391e <vGBMemoryIncTimers+0x9e>
        }
    }

    timerDIV += (durationMcycle << 2);

    if(ucTimerStopStart){
 80038ae:	4d30      	ldr	r5, [pc, #192]	; (8003970 <vGBMemoryIncTimers+0xf0>)
    timerDIV += (durationMcycle << 2);
 80038b0:	4423      	add	r3, r4
    if(ucTimerStopStart){
 80038b2:	782d      	ldrb	r5, [r5, #0]
    timerDIV += (durationMcycle << 2);
 80038b4:	7013      	strb	r3, [r2, #0]
    if(ucTimerStopStart){
 80038b6:	2d00      	cmp	r5, #0
 80038b8:	d02f      	beq.n	800391a <vGBMemoryIncTimers+0x9a>
        uint16_t curDuration = 0;

        switch (ucClockMode) {
 80038ba:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <vGBMemoryIncTimers+0xf4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d835      	bhi.n	800392e <vGBMemoryIncTimers+0xae>
 80038c2:	e8df f003 	tbb	[pc, r3]
 80038c6:	3c05      	.short	0x3c05
 80038c8:	023f      	.short	0x023f
            case 0x0: curDuration = (durationMcycle << 0);  break;
            case 0x1: curDuration = (durationMcycle << 6);  break;
            case 0x2: curDuration = (durationMcycle << 4);  break;
            case 0x3: curDuration = (durationMcycle << 2);  break;
 80038ca:	b2a1      	uxth	r1, r4
 80038cc:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
            default:                                        break;
        }

        if(timerTIMA + curDuration > 0xFF){
 80038d0:	4d29      	ldr	r5, [pc, #164]	; (8003978 <vGBMemoryIncTimers+0xf8>)
 80038d2:	782a      	ldrb	r2, [r5, #0]
 80038d4:	4411      	add	r1, r2
 80038d6:	29ff      	cmp	r1, #255	; 0xff
 80038d8:	dd2c      	ble.n	8003934 <vGBMemoryIncTimers+0xb4>
            mem.ram[TIMA_ADDR]++;
 80038da:	4c24      	ldr	r4, [pc, #144]	; (800396c <vGBMemoryIncTimers+0xec>)
 80038dc:	f64f 7605 	movw	r6, #65285	; 0xff05
        }

        if(timerTIMA + curDuration > 0x1FE){
 80038e0:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
            mem.ram[TIMA_ADDR]++;
 80038e4:	5da3      	ldrb	r3, [r4, r6]
 80038e6:	bfd4      	ite	le
 80038e8:	3301      	addle	r3, #1
            mem.ram[TIMA_ADDR]++;
 80038ea:	3302      	addgt	r3, #2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	55a3      	strb	r3, [r4, r6]
        }

        timerTIMA += curDuration;
 80038f0:	4410      	add	r0, r2

        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <vGBMemoryIncTimers+0xfc>)
        timerTIMA += curDuration;
 80038f6:	7028      	strb	r0, [r5, #0]
        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038f8:	d80e      	bhi.n	8003918 <vGBMemoryIncTimers+0x98>
 80038fa:	7811      	ldrb	r1, [r2, #0]
 80038fc:	29ff      	cmp	r1, #255	; 0xff
 80038fe:	d10b      	bne.n	8003918 <vGBMemoryIncTimers+0x98>
	mem.ram[address] |= (0x1 << bit);
 8003900:	f64f 700f 	movw	r0, #65295	; 0xff0f
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 8003904:	f64f 7306 	movw	r3, #65286	; 0xff06
 8003908:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 800390c:	5c21      	ldrb	r1, [r4, r0]
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 800390e:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 8003910:	f041 0104 	orr.w	r1, r1, #4
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 8003914:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 8003916:	5421      	strb	r1, [r4, r0]
            vGBMemorySetBit(IF_ADDR, 2);
        }

        oldTIMA = mem.ram[TIMA_ADDR];
 8003918:	7013      	strb	r3, [r2, #0]
    }
}
 800391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timerDiv8k++;
 800391e:	4f18      	ldr	r7, [pc, #96]	; (8003980 <vGBMemoryIncTimers+0x100>)
 8003920:	783d      	ldrb	r5, [r7, #0]
 8003922:	3501      	adds	r5, #1
 8003924:	b2ed      	uxtb	r5, r5
            if(timerDiv8k == 0x10){
 8003926:	2d10      	cmp	r5, #16
 8003928:	d00f      	beq.n	800394a <vGBMemoryIncTimers+0xca>
            timerDiv8k++;
 800392a:	703d      	strb	r5, [r7, #0]
 800392c:	e7bf      	b.n	80038ae <vGBMemoryIncTimers+0x2e>
        if(timerTIMA + curDuration > 0xFF){
 800392e:	4d12      	ldr	r5, [pc, #72]	; (8003978 <vGBMemoryIncTimers+0xf8>)
 8003930:	2000      	movs	r0, #0
 8003932:	782a      	ldrb	r2, [r5, #0]
 8003934:	4c0d      	ldr	r4, [pc, #52]	; (800396c <vGBMemoryIncTimers+0xec>)
 8003936:	f64f 7305 	movw	r3, #65285	; 0xff05
 800393a:	5ce3      	ldrb	r3, [r4, r3]
 800393c:	e7d8      	b.n	80038f0 <vGBMemoryIncTimers+0x70>
            case 0x1: curDuration = (durationMcycle << 6);  break;
 800393e:	0181      	lsls	r1, r0, #6
 8003940:	b2c8      	uxtb	r0, r1
 8003942:	e7c5      	b.n	80038d0 <vGBMemoryIncTimers+0x50>
            case 0x2: curDuration = (durationMcycle << 4);  break;
 8003944:	0101      	lsls	r1, r0, #4
 8003946:	b2c8      	uxtb	r0, r1
 8003948:	e7c2      	b.n	80038d0 <vGBMemoryIncTimers+0x50>
	mem.ram[address] &= ~(0x1 << bit);
 800394a:	f64f 7e02 	movw	lr, #65282	; 0xff02
                timerDiv8k = 0;
 800394e:	f04f 0800 	mov.w	r8, #0
	mem.ram[address] &= ~(0x1 << bit);
 8003952:	f816 500e 	ldrb.w	r5, [r6, lr]
                timerDiv8k = 0;
 8003956:	f887 8000 	strb.w	r8, [r7]
	mem.ram[address] &= ~(0x1 << bit);
 800395a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
                ucDataTransFlag = 0;
 800395e:	f88c 8000 	strb.w	r8, [ip]
	mem.ram[address] &= ~(0x1 << bit);
 8003962:	f806 500e 	strb.w	r5, [r6, lr]
                ucDataTransFlag = 0;
 8003966:	e7a2      	b.n	80038ae <vGBMemoryIncTimers+0x2e>
 8003968:	240010a4 	.word	0x240010a4
 800396c:	24001660 	.word	0x24001660
 8003970:	24011660 	.word	0x24011660
 8003974:	2400165c 	.word	0x2400165c
 8003978:	240010a6 	.word	0x240010a6
 800397c:	240010a3 	.word	0x240010a3
 8003980:	240010a5 	.word	0x240010a5
 8003984:	240010a7 	.word	0x240010a7

08003988 <prvSetMode.part.0>:
 * @return Nothing
 */
void prvSetMode(uint8_t mode){
    ucMode = mode;
    switch (mode) {
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003988:	2101      	movs	r1, #1
 800398a:	f64f 7041 	movw	r0, #65345	; 0xff41
void prvSetMode(uint8_t mode){
 800398e:	b508      	push	{r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003990:	f7ff fe5c 	bl	800364c <vGBMemoryResetBit>
 8003994:	2100      	movs	r1, #0
 8003996:	f64f 7041 	movw	r0, #65345	; 0xff41
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
        default:                                                                       break;
    }
}
 800399a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800399e:	f7ff be55 	b.w	800364c <vGBMemoryResetBit>
 80039a2:	bf00      	nop

080039a4 <vSetLineBuffer>:
void vSetLineBuffer(){
 80039a4:	b508      	push	{r3, lr}
    memset(ucGBLine, 0, 160 * 144 * 4 * ulScaleAmount);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <vSetLineBuffer+0x28>)
 80039a8:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 80039ac:	4808      	ldr	r0, [pc, #32]	; (80039d0 <vSetLineBuffer+0x2c>)
 80039ae:	2100      	movs	r1, #0
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	6800      	ldr	r0, [r0, #0]
 80039b4:	fb02 f203 	mul.w	r2, r2, r3
 80039b8:	f007 fb82 	bl	800b0c0 <memset>
    ucLY = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <vSetLineBuffer+0x30>)
    ultStatesTotal = 0;
 80039c0:	4905      	ldr	r1, [pc, #20]	; (80039d8 <vSetLineBuffer+0x34>)
    ucMode = 0;
 80039c2:	4a06      	ldr	r2, [pc, #24]	; (80039dc <vSetLineBuffer+0x38>)
    ucLY = 0;
 80039c4:	7003      	strb	r3, [r0, #0]
    ultStatesTotal = 0;
 80039c6:	600b      	str	r3, [r1, #0]
    ucMode = 0;
 80039c8:	7013      	strb	r3, [r2, #0]
}
 80039ca:	bd08      	pop	{r3, pc}
 80039cc:	24001014 	.word	0x24001014
 80039d0:	24001010 	.word	0x24001010
 80039d4:	240010a9 	.word	0x240010a9
 80039d8:	24011714 	.word	0x24011714
 80039dc:	24011718 	.word	0x24011718

080039e0 <prvCheckBGP>:
void prvCheckBGP(){
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039e2:	f64f 7047 	movw	r0, #65351	; 0xff47
            case 2: ucBGPColorToPalette[i] = 3;  break;
 80039e6:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039e8:	f7ff fe52 	bl	8003690 <ucGBMemoryRead>
            case 3: ucBGPColorToPalette[i] = 4;  break;
 80039ec:	2604      	movs	r6, #4
 80039ee:	490c      	ldr	r1, [pc, #48]	; (8003a20 <prvCheckBGP+0x40>)
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039f0:	2200      	movs	r2, #0
            case 1: ucBGPColorToPalette[i] = 2;  break;
 80039f2:	2502      	movs	r5, #2
            case 0: ucBGPColorToPalette[i] = 1;  break;
 80039f4:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 80039f6:	fa40 f302 	asr.w	r3, r0, r2
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d00c      	beq.n	8003a1c <prvCheckBGP+0x3c>
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d008      	beq.n	8003a18 <prvCheckBGP+0x38>
 8003a06:	2b01      	cmp	r3, #1
            case 0: ucBGPColorToPalette[i] = 1;  break;
 8003a08:	bf14      	ite	ne
 8003a0a:	700c      	strbne	r4, [r1, #0]
            case 1: ucBGPColorToPalette[i] = 2;  break;
 8003a0c:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a0e:	3202      	adds	r2, #2
 8003a10:	3101      	adds	r1, #1
 8003a12:	2a08      	cmp	r2, #8
 8003a14:	d1ef      	bne.n	80039f6 <prvCheckBGP+0x16>
}
 8003a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucBGPColorToPalette[i] = 4;  break;
 8003a18:	700e      	strb	r6, [r1, #0]
 8003a1a:	e7f8      	b.n	8003a0e <prvCheckBGP+0x2e>
            case 2: ucBGPColorToPalette[i] = 3;  break;
 8003a1c:	700f      	strb	r7, [r1, #0]
 8003a1e:	e7f6      	b.n	8003a0e <prvCheckBGP+0x2e>
 8003a20:	24011710 	.word	0x24011710

08003a24 <prvCheckOBP0>:
void prvCheckOBP0(){
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003a26:	f64f 7048 	movw	r0, #65352	; 0xff48
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 8003a2a:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003a2c:	f7ff fe30 	bl	8003690 <ucGBMemoryRead>
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 8003a30:	2604      	movs	r6, #4
 8003a32:	490c      	ldr	r1, [pc, #48]	; (8003a64 <prvCheckOBP0+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003a34:	2200      	movs	r2, #0
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 8003a36:	2502      	movs	r5, #2
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 8003a38:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 8003a3a:	fa40 f302 	asr.w	r3, r0, r2
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d00c      	beq.n	8003a60 <prvCheckOBP0+0x3c>
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d008      	beq.n	8003a5c <prvCheckOBP0+0x38>
 8003a4a:	2b01      	cmp	r3, #1
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 8003a4c:	bf14      	ite	ne
 8003a4e:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 8003a50:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a52:	3202      	adds	r2, #2
 8003a54:	3101      	adds	r1, #1
 8003a56:	2a08      	cmp	r2, #8
 8003a58:	d1ef      	bne.n	8003a3a <prvCheckOBP0+0x16>
}
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 8003a5c:	700e      	strb	r6, [r1, #0]
 8003a5e:	e7f8      	b.n	8003a52 <prvCheckOBP0+0x2e>
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 8003a60:	700f      	strb	r7, [r1, #0]
 8003a62:	e7f6      	b.n	8003a52 <prvCheckOBP0+0x2e>
 8003a64:	24011664 	.word	0x24011664

08003a68 <prvCheckOBP1>:
void prvCheckOBP1(){
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a6a:	f64f 7049 	movw	r0, #65353	; 0xff49
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 8003a6e:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a70:	f7ff fe0e 	bl	8003690 <ucGBMemoryRead>
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003a74:	2604      	movs	r6, #4
 8003a76:	490c      	ldr	r1, [pc, #48]	; (8003aa8 <prvCheckOBP1+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a78:	2200      	movs	r2, #0
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a7a:	2502      	movs	r5, #2
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a7c:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 8003a7e:	fa40 f302 	asr.w	r3, r0, r2
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d00c      	beq.n	8003aa4 <prvCheckOBP1+0x3c>
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d008      	beq.n	8003aa0 <prvCheckOBP1+0x38>
 8003a8e:	2b01      	cmp	r3, #1
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a90:	bf14      	ite	ne
 8003a92:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a94:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a96:	3202      	adds	r2, #2
 8003a98:	3101      	adds	r1, #1
 8003a9a:	2a08      	cmp	r2, #8
 8003a9c:	d1ef      	bne.n	8003a7e <prvCheckOBP1+0x16>
}
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003aa0:	700e      	strb	r6, [r1, #0]
 8003aa2:	e7f8      	b.n	8003a96 <prvCheckOBP1+0x2e>
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 8003aa4:	700f      	strb	r7, [r1, #0]
 8003aa6:	e7f6      	b.n	8003a96 <prvCheckOBP1+0x2e>
 8003aa8:	2401171c 	.word	0x2401171c

08003aac <getTileLineData>:
    if (TileDataAddr == 0x8000){
 8003aac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	460d      	mov	r5, r1
    if (TileDataAddr == 0x8000){
 8003ab4:	d00e      	beq.n	8003ad4 <getTileLineData+0x28>
        int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 8003ab6:	4418      	add	r0, r3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	b280      	uxth	r0, r0
 8003abc:	f7ff fde8 	bl	8003690 <ucGBMemoryRead>
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003ac0:	1961      	adds	r1, r4, r5
        uint16_t temp2 =( temp + 128) * 0x10;
 8003ac2:	b240      	sxtb	r0, r0
 8003ac4:	3080      	adds	r0, #128	; 0x80
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003ac6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003ace:	b280      	uxth	r0, r0
 8003ad0:	f7ff bece 	b.w	8003870 <usGBMemoryReadShort>
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003ad4:	4418      	add	r0, r3
 8003ad6:	b280      	uxth	r0, r0
 8003ad8:	f7ff fdda 	bl	8003690 <ucGBMemoryRead>
 8003adc:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 8003ae0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003ae8:	b280      	uxth	r0, r0
 8003aea:	f7ff bec1 	b.w	8003870 <usGBMemoryReadShort>
 8003aee:	bf00      	nop

08003af0 <prvGBPPUDrawLineWindow.part.0>:
 */
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
    if(WY > ly || WY > 143 || WX > 166)
        return;

    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003af0:	1a80      	subs	r0, r0, r2
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset

    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003af2:	461a      	mov	r2, r3
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003af8:	4244      	negs	r4, r0
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003afa:	f1a1 0707 	sub.w	r7, r1, #7
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003afe:	f000 0107 	and.w	r1, r0, #7
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003b02:	f3c0 00c4 	ubfx	r0, r0, #3, #5
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003b06:	f004 0407 	and.w	r4, r4, #7
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003b0a:	f007 0607 	and.w	r6, r7, #7
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003b0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
        uint8_t pixelData = 0;

        switch (((tile_data << pixl_offset) & 0x8080)) {
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003b12:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003c10 <prvGBPPUDrawLineWindow.part.0+0x120>
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003b16:	bf58      	it	pl
 8003b18:	4261      	negpl	r1, r4
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003b1a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003c14 <prvGBPPUDrawLineWindow.part.0+0x124>
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4c38      	ldr	r4, [pc, #224]	; (8003c04 <prvGBPPUDrawLineWindow.part.0+0x114>)
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003b22:	0049      	lsls	r1, r1, #1
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b24:	ed2d 8b02 	vpush	{d8}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	ee08 3a10 	vmov	s16, r3
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003b2e:	b2c9      	uxtb	r1, r1
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b30:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003b34:	9101      	str	r1, [sp, #4]
 8003b36:	462b      	mov	r3, r5
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b38:	ee08 5a90 	vmov	s17, r5
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003b3c:	427d      	negs	r5, r7
 8003b3e:	f005 0507 	and.w	r5, r5, #7
 8003b42:	bf58      	it	pl
 8003b44:	426e      	negpl	r6, r5
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003b46:	f7ff ffb1 	bl	8003aac <getTileLineData>
 8003b4a:	4d2f      	ldr	r5, [pc, #188]	; (8003c08 <prvGBPPUDrawLineWindow.part.0+0x118>)
 8003b4c:	4683      	mov	fp, r0
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003b4e:	b2f6      	uxtb	r6, r6
    for(int j = (WX - 7); j < 160; j++){
 8003b50:	9901      	ldr	r1, [sp, #4]
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b52:	fa0b f306 	lsl.w	r3, fp, r6
 8003b56:	f248 0280 	movw	r2, #32896	; 0x8080
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d049      	beq.n	8003bf6 <prvGBPPUDrawLineWindow.part.0+0x106>
 8003b62:	dc28      	bgt.n	8003bb6 <prvGBPPUDrawLineWindow.part.0+0xc6>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d041      	beq.n	8003bec <prvGBPPUDrawLineWindow.part.0+0xfc>
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d12c      	bne.n	8003bc6 <prvGBPPUDrawLineWindow.part.0+0xd6>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f89a c001 	ldrb.w	ip, [sl, #1]
 8003b72:	f807 3009 	strb.w	r3, [r7, r9]
    pixelPos *= ulScaleAmount;
 8003b76:	7823      	ldrb	r3, [r4, #0]
 8003b78:	fb07 fe03 	mul.w	lr, r7, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b7c:	b17b      	cbz	r3, 8003b9e <prvGBPPUDrawLineWindow.part.0+0xae>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4822      	ldr	r0, [pc, #136]	; (8003c0c <prvGBPPUDrawLineWindow.part.0+0x11c>)
 8003b82:	ee07 1a90 	vmov	s15, r1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	6801      	ldr	r1, [r0, #0]
 8003b8a:	4473      	add	r3, lr
 8003b8c:	4413      	add	r3, r2
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b8e:	3201      	adds	r2, #1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003b90:	f803 c001 	strb.w	ip, [r3, r1]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b94:	7823      	ldrb	r3, [r4, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	dbf5      	blt.n	8003b86 <prvGBPPUDrawLineWindow.part.0+0x96>
 8003b9a:	ee17 1a90 	vmov	r1, s15
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
        }

        prvUpdateBuffer(pixelData, j);
        pixl_offset++;
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	b2f6      	uxtb	r6, r6

        if(pixl_offset == 8){
 8003ba2:	2e08      	cmp	r6, #8
 8003ba4:	d012      	beq.n	8003bcc <prvGBPPUDrawLineWindow.part.0+0xdc>
    for(int j = (WX - 7); j < 160; j++){
 8003ba6:	3701      	adds	r7, #1
 8003ba8:	2fa0      	cmp	r7, #160	; 0xa0
 8003baa:	d1d2      	bne.n	8003b52 <prvGBPPUDrawLineWindow.part.0+0x62>
            tile_offset++;
            pixl_offset = 0;
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
        }
    }
}
 8003bac:	b003      	add	sp, #12
 8003bae:	ecbd 8b02 	vpop	{d8}
 8003bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d105      	bne.n	8003bc6 <prvGBPPUDrawLineWindow.part.0+0xd6>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	f89a c003 	ldrb.w	ip, [sl, #3]
 8003bc0:	f807 3009 	strb.w	r3, [r7, r9]
 8003bc4:	e7d7      	b.n	8003b76 <prvGBPPUDrawLineWindow.part.0+0x86>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003bc6:	f04f 0c00 	mov.w	ip, #0
 8003bca:	e7d4      	b.n	8003b76 <prvGBPPUDrawLineWindow.part.0+0x86>
            tile_offset++;
 8003bcc:	f108 0801 	add.w	r8, r8, #1
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003bd0:	ee18 3a90 	vmov	r3, s17
 8003bd4:	ee18 2a10 	vmov	r2, s16
 8003bd8:	9101      	str	r1, [sp, #4]
            tile_offset++;
 8003bda:	fa1f f888 	uxth.w	r8, r8
            pixl_offset = 0;
 8003bde:	2600      	movs	r6, #0
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003be0:	4640      	mov	r0, r8
 8003be2:	f7ff ff63 	bl	8003aac <getTileLineData>
 8003be6:	9901      	ldr	r1, [sp, #4]
 8003be8:	4683      	mov	fp, r0
 8003bea:	e7dc      	b.n	8003ba6 <prvGBPPUDrawLineWindow.part.0+0xb6>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003bec:	f89a c000 	ldrb.w	ip, [sl]
 8003bf0:	f807 3009 	strb.w	r3, [r7, r9]
 8003bf4:	e7bf      	b.n	8003b76 <prvGBPPUDrawLineWindow.part.0+0x86>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f89a c002 	ldrb.w	ip, [sl, #2]
 8003bfc:	f807 3009 	strb.w	r3, [r7, r9]
 8003c00:	e7b9      	b.n	8003b76 <prvGBPPUDrawLineWindow.part.0+0x86>
 8003c02:	bf00      	nop
 8003c04:	24001014 	.word	0x24001014
 8003c08:	24001010 	.word	0x24001010
 8003c0c:	2401170c 	.word	0x2401170c
 8003c10:	24011710 	.word	0x24011710
 8003c14:	2401166c 	.word	0x2401166c

08003c18 <prvCheckLYC>:
void prvCheckLYC(uint8_t ly){
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003c1c:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003c20:	f7ff fd36 	bl	8003690 <ucGBMemoryRead>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003c24:	2102      	movs	r1, #2
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003c26:	42a0      	cmp	r0, r4
        vGBMemorySetBit(STAT_ADDR, 2);
 8003c28:	f64f 7041 	movw	r0, #65345	; 0xff41
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003c2c:	d003      	beq.n	8003c36 <prvCheckLYC+0x1e>
}
 8003c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vGBMemoryResetBit(STAT_ADDR, 2);
 8003c32:	f7ff bd0b 	b.w	800364c <vGBMemoryResetBit>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003c36:	f7ff fce3 	bl	8003600 <vGBMemorySetBit>
        if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 6))
 8003c3a:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c3e:	f7ff fd27 	bl	8003690 <ucGBMemoryRead>
 8003c42:	2106      	movs	r1, #6
 8003c44:	f7ff f828 	bl	8002c98 <ucCheckBit>
 8003c48:	b900      	cbnz	r0, 8003c4c <prvCheckLYC+0x34>
}
 8003c4a:	bd10      	pop	{r4, pc}
            vGBMemorySetBit(IF_ADDR, 1);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            vGBMemorySetBit(IF_ADDR, 1);
 8003c56:	f7ff bcd3 	b.w	8003600 <vGBMemorySetBit>
 8003c5a:	bf00      	nop

08003c5c <prvSetMode>:
void prvSetMode(uint8_t mode){
 8003c5c:	b508      	push	{r3, lr}
    ucMode = mode;
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <prvSetMode+0x64>)
 8003c60:	7018      	strb	r0, [r3, #0]
    switch (mode) {
 8003c62:	2803      	cmp	r0, #3
 8003c64:	d82b      	bhi.n	8003cbe <prvSetMode+0x62>
 8003c66:	e8df f000 	tbb	[pc, r0]
 8003c6a:	1202      	.short	0x1202
 8003c6c:	061e      	.short	0x061e
}
 8003c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c72:	f7ff be89 	b.w	8003988 <prvSetMode.part.0>
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003c76:	2101      	movs	r1, #1
 8003c78:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c7c:	f7ff fcc0 	bl	8003600 <vGBMemorySetBit>
 8003c80:	2100      	movs	r1, #0
 8003c82:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003c8a:	f7ff bcb9 	b.w	8003600 <vGBMemorySetBit>
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003c8e:	2101      	movs	r1, #1
 8003c90:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c94:	f7ff fcda 	bl	800364c <vGBMemoryResetBit>
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003ca2:	f7ff bcad 	b.w	8003600 <vGBMemorySetBit>
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003cac:	f7ff fca8 	bl	8003600 <vGBMemorySetBit>
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003cba:	f7ff bcc7 	b.w	800364c <vGBMemoryResetBit>
}
 8003cbe:	bd08      	pop	{r3, pc}
 8003cc0:	24011718 	.word	0x24011718

08003cc4 <prvGBPPUDrawLineBackground>:
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003cc8:	4402      	add	r2, r0
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cca:	460d      	mov	r5, r1
 8003ccc:	461e      	mov	r6, r3
 8003cce:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8003e08 <prvGBPPUDrawLineBackground+0x144>
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003cd2:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
 8003cd6:	f3c2 04c4 	ubfx	r4, r2, #3, #5
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003cda:	f002 0007 	and.w	r0, r2, #7
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003cde:	4632      	mov	r2, r6
    uint8_t pixl_offset = SCX % 8;                                                              // gives current pixel offset
 8003ce0:	f005 0707 	and.w	r7, r5, #7
 8003ce4:	f109 0aa0 	add.w	sl, r9, #160	; 0xa0
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003ce8:	46c8      	mov	r8, r9
 8003cea:	4e44      	ldr	r6, [pc, #272]	; (8003dfc <prvGBPPUDrawLineBackground+0x138>)
 8003cec:	4d44      	ldr	r5, [pc, #272]	; (8003e00 <prvGBPPUDrawLineBackground+0x13c>)
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cee:	ed2d 8b02 	vpush	{d8}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	ee08 3a10 	vmov	s16, r3
 8003cf8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    uint16_t first_tile = tile_offset % 32;
 8003cfc:	f8cd b00c 	str.w	fp, [sp, #12]
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003d00:	460b      	mov	r3, r1
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003d02:	ee08 1a90 	vmov	s17, r1
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003d06:	0041      	lsls	r1, r0, #1
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003d08:	eb0b 1044 	add.w	r0, fp, r4, lsl #5
 8003d0c:	4c3d      	ldr	r4, [pc, #244]	; (8003e04 <prvGBPPUDrawLineBackground+0x140>)
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003d0e:	9102      	str	r1, [sp, #8]
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003d10:	9001      	str	r0, [sp, #4]
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003d12:	f7ff fecb 	bl	8003aac <getTileLineData>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003d16:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8003e0c <prvGBPPUDrawLineBackground+0x148>
    for(int j = 0; j < 160; j++){
 8003d1a:	9902      	ldr	r1, [sp, #8]
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d1c:	fa00 f307 	lsl.w	r3, r0, r7
 8003d20:	f248 0280 	movw	r2, #32896	; 0x8080
 8003d24:	eba8 0c09 	sub.w	ip, r8, r9
 8003d28:	4013      	ands	r3, r2
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2e:	d050      	beq.n	8003dd2 <prvGBPPUDrawLineBackground+0x10e>
 8003d30:	dc28      	bgt.n	8003d84 <prvGBPPUDrawLineBackground+0xc0>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d048      	beq.n	8003dc8 <prvGBPPUDrawLineBackground+0x104>
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d143      	bne.n	8003dc2 <prvGBPPUDrawLineBackground+0xfe>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f89b e001 	ldrb.w	lr, [fp, #1]
 8003d40:	f888 3000 	strb.w	r3, [r8]
    pixelPos *= ulScaleAmount;
 8003d44:	7823      	ldrb	r3, [r4, #0]
 8003d46:	fb0c fc03 	mul.w	ip, ip, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003d4a:	b173      	cbz	r3, 8003d6a <prvGBPPUDrawLineBackground+0xa6>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	ee07 1a90 	vmov	s15, r1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003d52:	6833      	ldr	r3, [r6, #0]
 8003d54:	6829      	ldr	r1, [r5, #0]
 8003d56:	4463      	add	r3, ip
 8003d58:	4413      	add	r3, r2
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003d5a:	3201      	adds	r2, #1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003d5c:	f803 e001 	strb.w	lr, [r3, r1]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003d60:	7823      	ldrb	r3, [r4, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	dbf5      	blt.n	8003d52 <prvGBPPUDrawLineBackground+0x8e>
 8003d66:	ee17 1a90 	vmov	r1, s15
        pixl_offset++;
 8003d6a:	3701      	adds	r7, #1
 8003d6c:	b2ff      	uxtb	r7, r7
        if(pixl_offset == 8){
 8003d6e:	2f08      	cmp	r7, #8
 8003d70:	d010      	beq.n	8003d94 <prvGBPPUDrawLineBackground+0xd0>
    for(int j = 0; j < 160; j++){
 8003d72:	f108 0801 	add.w	r8, r8, #1
 8003d76:	45c2      	cmp	sl, r8
 8003d78:	d1d0      	bne.n	8003d1c <prvGBPPUDrawLineBackground+0x58>
}
 8003d7a:	b005      	add	sp, #20
 8003d7c:	ecbd 8b02 	vpop	{d8}
 8003d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d11c      	bne.n	8003dc2 <prvGBPPUDrawLineBackground+0xfe>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	f89b e003 	ldrb.w	lr, [fp, #3]
 8003d8e:	f888 3000 	strb.w	r3, [r8]
 8003d92:	e7d7      	b.n	8003d44 <prvGBPPUDrawLineBackground+0x80>
            tile_offset++;
 8003d94:	9b01      	ldr	r3, [sp, #4]
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d96:	9803      	ldr	r0, [sp, #12]
            tile_offset++;
 8003d98:	1c5f      	adds	r7, r3, #1
 8003d9a:	f007 031f 	and.w	r3, r7, #31
 8003d9e:	b2bf      	uxth	r7, r7
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003da0:	18c2      	adds	r2, r0, r3
 8003da2:	2a0b      	cmp	r2, #11
 8003da4:	dd01      	ble.n	8003daa <prvGBPPUDrawLineBackground+0xe6>
 8003da6:	4298      	cmp	r0, r3
 8003da8:	d819      	bhi.n	8003dde <prvGBPPUDrawLineBackground+0x11a>
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003daa:	4638      	mov	r0, r7
 8003dac:	ee18 3a90 	vmov	r3, s17
 8003db0:	ee18 2a10 	vmov	r2, s16
 8003db4:	9102      	str	r1, [sp, #8]
 8003db6:	f7ff fe79 	bl	8003aac <getTileLineData>
            tile_offset++;
 8003dba:	9701      	str	r7, [sp, #4]
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003dbc:	9902      	ldr	r1, [sp, #8]
            pixl_offset = 0;
 8003dbe:	2700      	movs	r7, #0
 8003dc0:	e7d7      	b.n	8003d72 <prvGBPPUDrawLineBackground+0xae>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003dc2:	f04f 0e00 	mov.w	lr, #0
 8003dc6:	e7bd      	b.n	8003d44 <prvGBPPUDrawLineBackground+0x80>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003dc8:	f89b e000 	ldrb.w	lr, [fp]
 8003dcc:	f888 3000 	strb.w	r3, [r8]
 8003dd0:	e7b8      	b.n	8003d44 <prvGBPPUDrawLineBackground+0x80>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f89b e002 	ldrb.w	lr, [fp, #2]
 8003dd8:	f888 3000 	strb.w	r3, [r8]
 8003ddc:	e7b2      	b.n	8003d44 <prvGBPPUDrawLineBackground+0x80>
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	ee18 2a10 	vmov	r2, s16
 8003de4:	9102      	str	r1, [sp, #8]
 8003de6:	f1a3 001f 	sub.w	r0, r3, #31
 8003dea:	ee18 3a90 	vmov	r3, s17
            tile_offset++;
 8003dee:	9701      	str	r7, [sp, #4]
            pixl_offset = 0;
 8003df0:	2700      	movs	r7, #0
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003df2:	b280      	uxth	r0, r0
 8003df4:	f7ff fe5a 	bl	8003aac <getTileLineData>
 8003df8:	9902      	ldr	r1, [sp, #8]
 8003dfa:	e7ba      	b.n	8003d72 <prvGBPPUDrawLineBackground+0xae>
 8003dfc:	24001010 	.word	0x24001010
 8003e00:	2401170c 	.word	0x2401170c
 8003e04:	24001014 	.word	0x24001014
 8003e08:	2401166c 	.word	0x2401166c
 8003e0c:	24011710 	.word	0x24011710

08003e10 <prvGBPPUDrawLineObjects>:
 * @brief  Update line buffer with object information
 * @details Populates the line buffer with object sprites on line ly
 * @param ly LY Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLineObjects(uint8_t ly){
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	f44f 4b7e 	mov.w	fp, #65024	; 0xfe00
 8003e18:	b083      	sub	sp, #12
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	e008      	b.n	8003e30 <prvGBPPUDrawLineObjects+0x20>
    for(int obj = 0; obj < 40; obj++){
 8003e1e:	f10b 0b04 	add.w	fp, fp, #4
 8003e22:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003e26:	fa1f fb8b 	uxth.w	fp, fp
 8003e2a:	459b      	cmp	fp, r3
 8003e2c:	f000 80ab 	beq.w	8003f86 <prvGBPPUDrawLineObjects+0x176>
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003e30:	4658      	mov	r0, fp
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003e32:	f10b 0503 	add.w	r5, fp, #3
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003e36:	f7ff fc2b 	bl	8003690 <ucGBMemoryRead>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003e3a:	f10b 0301 	add.w	r3, fp, #1
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003e3e:	f1a0 0a10 	sub.w	sl, r0, #16
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003e42:	b2ad      	uxth	r5, r5
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003e44:	b298      	uxth	r0, r3
 8003e46:	f7ff fc23 	bl	8003690 <ucGBMemoryRead>
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003e4a:	f10b 0202 	add.w	r2, fp, #2
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003e4e:	4607      	mov	r7, r0
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003e50:	fa0f fa8a 	sxth.w	sl, sl
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003e54:	b290      	uxth	r0, r2
 8003e56:	f7ff fc1b 	bl	8003690 <ucGBMemoryRead>
 8003e5a:	4680      	mov	r8, r0
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f7ff fc17 	bl	8003690 <ucGBMemoryRead>
 8003e62:	2107      	movs	r1, #7
 8003e64:	f7fe ff18 	bl	8002c98 <ucCheckBit>
 8003e68:	4603      	mov	r3, r0
        uint8_t objYFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003e6a:	4628      	mov	r0, r5
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003e6c:	9300      	str	r3, [sp, #0]
        uint8_t objYFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003e6e:	f7ff fc0f 	bl	8003690 <ucGBMemoryRead>
 8003e72:	2106      	movs	r1, #6
 8003e74:	f7fe ff10 	bl	8002c98 <ucCheckBit>
 8003e78:	4681      	mov	r9, r0
        uint8_t objXFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fc08 	bl	8003690 <ucGBMemoryRead>
 8003e80:	2105      	movs	r1, #5
 8003e82:	f7fe ff09 	bl	8002c98 <ucCheckBit>
 8003e86:	4604      	mov	r4, r0
        uint8_t objPalette  = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f7ff fc01 	bl	8003690 <ucGBMemoryRead>
 8003e8e:	2104      	movs	r1, #4
 8003e90:	f7fe ff02 	bl	8002c98 <ucCheckBit>
 8003e94:	4605      	mov	r5, r0
        uint8_t objSize     = ucCheckBit(ucGBMemoryRead(LCDC_ADDR), 2);
 8003e96:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003e9a:	f7ff fbf9 	bl	8003690 <ucGBMemoryRead>
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	f7fe fefa 	bl	8002c98 <ucCheckBit>

        uint8_t objHeight   = (objSize == 0) ? 8 : 16;
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2308      	moveq	r3, #8
 8003eaa:	2310      	movne	r3, #16

        if(yCoordinate <= ly && (yCoordinate + objHeight) > ly){
 8003eac:	45b2      	cmp	sl, r6
 8003eae:	dcb6      	bgt.n	8003e1e <prvGBPPUDrawLineObjects+0xe>
 8003eb0:	eb0a 0203 	add.w	r2, sl, r3
 8003eb4:	42b2      	cmp	r2, r6
 8003eb6:	ddb2      	ble.n	8003e1e <prvGBPPUDrawLineObjects+0xe>

            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003eb8:	f1b9 0f00 	cmp.w	r9, #0
 8003ebc:	d05e      	beq.n	8003f7c <prvGBPPUDrawLineObjects+0x16c>
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	eba6 0a0a 	sub.w	sl, r6, sl
 8003ec4:	eba0 000a 	sub.w	r0, r0, sl
 8003ec8:	0040      	lsls	r0, r0, #1
 8003eca:	b2c0      	uxtb	r0, r0
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003ecc:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8003ed0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003fa0 <prvGBPPUDrawLineObjects+0x190>
 8003ed4:	eb00 1008 	add.w	r0, r0, r8, lsl #4
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];

            for(int pixelNum = 0; pixelNum < 8; pixelNum++){

                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003ed8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003fa4 <prvGBPPUDrawLineObjects+0x194>
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003edc:	b280      	uxth	r0, r0
 8003ede:	f7ff fcc7 	bl	8003870 <usGBMemoryReadShort>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003ee2:	f1a7 0308 	sub.w	r3, r7, #8
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <prvGBPPUDrawLineObjects+0x17c>)
                uint8_t pixelData = 0;

                switch (colorInfo) {
 8003ee8:	f248 0e80 	movw	lr, #32896	; 0x8080
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003eec:	4f28      	ldr	r7, [pc, #160]	; (8003f90 <prvGBPPUDrawLineObjects+0x180>)
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	bf08      	it	eq
 8003ef4:	4617      	moveq	r7, r2
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003ef6:	2200      	movs	r2, #0
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003ef8:	b18c      	cbz	r4, 8003f1e <prvGBPPUDrawLineObjects+0x10e>
 8003efa:	fa40 f102 	asr.w	r1, r0, r2
 8003efe:	ea08 11c1 	and.w	r1, r8, r1, lsl #7
 8003f02:	b289      	uxth	r1, r1
                switch (colorInfo) {
 8003f04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f08:	d011      	beq.n	8003f2e <prvGBPPUDrawLineObjects+0x11e>
 8003f0a:	4571      	cmp	r1, lr
 8003f0c:	d034      	beq.n	8003f78 <prvGBPPUDrawLineObjects+0x168>
 8003f0e:	2980      	cmp	r1, #128	; 0x80
 8003f10:	d030      	beq.n	8003f74 <prvGBPPUDrawLineObjects+0x164>
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003f12:	3201      	adds	r2, #1
 8003f14:	3301      	adds	r3, #1
 8003f16:	2a08      	cmp	r2, #8
 8003f18:	d081      	beq.n	8003e1e <prvGBPPUDrawLineObjects+0xe>
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1ed      	bne.n	8003efa <prvGBPPUDrawLineObjects+0xea>
 8003f1e:	fa00 f102 	lsl.w	r1, r0, r2
 8003f22:	ea01 0108 	and.w	r1, r1, r8
 8003f26:	b289      	uxth	r1, r1
                switch (colorInfo) {
 8003f28:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f2c:	d1ed      	bne.n	8003f0a <prvGBPPUDrawLineObjects+0xfa>
                    case 0x0000: pixelData = 0;          break;
                    case 0x0080: pixelData = palette[1]; break;
                    case 0x8000: pixelData = palette[2]; break;
 8003f2e:	78bd      	ldrb	r5, [r7, #2]
                    case 0x8080: pixelData = palette[3]; break;
                }

                if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	d0ee      	beq.n	8003f12 <prvGBPPUDrawLineObjects+0x102>
 8003f34:	2b9f      	cmp	r3, #159	; 0x9f
 8003f36:	d8ec      	bhi.n	8003f12 <prvGBPPUDrawLineObjects+0x102>
                    if((objPrio) && ucBGWINline[xCoordinate + pixelNum]){
 8003f38:	9900      	ldr	r1, [sp, #0]
 8003f3a:	b119      	cbz	r1, 8003f44 <prvGBPPUDrawLineObjects+0x134>
 8003f3c:	4915      	ldr	r1, [pc, #84]	; (8003f94 <prvGBPPUDrawLineObjects+0x184>)
 8003f3e:	5c59      	ldrb	r1, [r3, r1]
 8003f40:	2900      	cmp	r1, #0
 8003f42:	d1e6      	bne.n	8003f12 <prvGBPPUDrawLineObjects+0x102>
    pixelPos *= ulScaleAmount;
 8003f44:	4914      	ldr	r1, [pc, #80]	; (8003f98 <prvGBPPUDrawLineObjects+0x188>)
 8003f46:	7809      	ldrb	r1, [r1, #0]
 8003f48:	fb01 fa03 	mul.w	sl, r1, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d0e0      	beq.n	8003f12 <prvGBPPUDrawLineObjects+0x102>
 8003f50:	f04f 0c00 	mov.w	ip, #0
 8003f54:	9301      	str	r3, [sp, #4]
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003f56:	4911      	ldr	r1, [pc, #68]	; (8003f9c <prvGBPPUDrawLineObjects+0x18c>)
 8003f58:	f8d9 3000 	ldr.w	r3, [r9]
 8003f5c:	6809      	ldr	r1, [r1, #0]
 8003f5e:	4451      	add	r1, sl
 8003f60:	4461      	add	r1, ip
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003f62:	f10c 0c01 	add.w	ip, ip, #1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8003f66:	54cd      	strb	r5, [r1, r3]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvGBPPUDrawLineObjects+0x188>)
 8003f6a:	7819      	ldrb	r1, [r3, #0]
 8003f6c:	458c      	cmp	ip, r1
 8003f6e:	dbf2      	blt.n	8003f56 <prvGBPPUDrawLineObjects+0x146>
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	e7ce      	b.n	8003f12 <prvGBPPUDrawLineObjects+0x102>
                    case 0x0080: pixelData = palette[1]; break;
 8003f74:	787d      	ldrb	r5, [r7, #1]
 8003f76:	e7db      	b.n	8003f30 <prvGBPPUDrawLineObjects+0x120>
                    case 0x8080: pixelData = palette[3]; break;
 8003f78:	78fd      	ldrb	r5, [r7, #3]
 8003f7a:	e7d9      	b.n	8003f30 <prvGBPPUDrawLineObjects+0x120>
            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003f7c:	eba6 000a 	sub.w	r0, r6, sl
 8003f80:	0040      	lsls	r0, r0, #1
 8003f82:	b2c0      	uxtb	r0, r0
 8003f84:	e7a2      	b.n	8003ecc <prvGBPPUDrawLineObjects+0xbc>
                    }
                }
            }
        }
    }
}
 8003f86:	b003      	add	sp, #12
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	24011664 	.word	0x24011664
 8003f90:	2401171c 	.word	0x2401171c
 8003f94:	2401166c 	.word	0x2401166c
 8003f98:	24001014 	.word	0x24001014
 8003f9c:	24001010 	.word	0x24001010
 8003fa0:	2401170c 	.word	0x2401170c
 8003fa4:	ffff8080 	.word	0xffff8080

08003fa8 <prvGBPPUDrawLine>:
 * @param ly LY Register Value
 * @param SCX Scroll X Register Value
 * @param SCY Scroll Y Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    prvCheckBGP();
    prvCheckOBP0();
    prvCheckOBP1();

    uint16_t TileDataAddr = prvGetBackWinTileDataSel();
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003fac:	4c4f      	ldr	r4, [pc, #316]	; (80040ec <prvGBPPUDrawLine+0x144>)
void prvGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003fae:	b083      	sub	sp, #12
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	4690      	mov	r8, r2
    prvCheckBGP();
 8003fb6:	f7ff fd13 	bl	80039e0 <prvCheckBGP>
    prvCheckOBP0();
 8003fba:	f7ff fd33 	bl	8003a24 <prvCheckOBP0>
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003fbe:	4e4c      	ldr	r6, [pc, #304]	; (80040f0 <prvGBPPUDrawLine+0x148>)
    prvCheckOBP1();
 8003fc0:	f7ff fd52 	bl	8003a68 <prvCheckOBP1>
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003fc4:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fc8:	f7ff fb62 	bl	8003690 <ucGBMemoryRead>
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003fcc:	7823      	ldrb	r3, [r4, #0]
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003fce:	4602      	mov	r2, r0
    ulLineAdd = ulScaleAmount * 160;

    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003fd0:	f64f 7040 	movw	r0, #65344	; 0xff40
    ulLineAdd = ulScaleAmount * 160;
 8003fd4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003fd8:	f012 0f10 	tst.w	r2, #16
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003fdc:	fb17 f203 	smulbb	r2, r7, r3
    ulLineAdd = ulScaleAmount * 160;
 8003fe0:	ea4f 1141 	mov.w	r1, r1, lsl #5
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003fe4:	bf14      	ite	ne
 8003fe6:	f44f 4900 	movne.w	r9, #32768	; 0x8000
 8003fea:	f44f 4908 	moveq.w	r9, #34816	; 0x8800
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003fee:	fb03 f302 	mul.w	r3, r3, r2
    ulLineAdd = ulScaleAmount * 160;
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <prvGBPPUDrawLine+0x14c>)
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003ff4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ulLineAdd = ulScaleAmount * 160;
 8003ff8:	6011      	str	r1, [r2, #0]
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	6033      	str	r3, [r6, #0]
    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003ffe:	f7ff fb47 	bl	8003690 <ucGBMemoryRead>
 8004002:	f010 0001 	ands.w	r0, r0, #1
 8004006:	d127      	bne.n	8004058 <prvGBPPUDrawLine+0xb0>
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20){
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
        }
    }else{
        for(int j = 0; j < 160; j++){
 8004008:	4686      	mov	lr, r0
 800400a:	4d3b      	ldr	r5, [pc, #236]	; (80040f8 <prvGBPPUDrawLine+0x150>)
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 800400c:	f04f 0c01 	mov.w	ip, #1
    pixelPos *= ulScaleAmount;
 8004010:	7823      	ldrb	r3, [r4, #0]
 8004012:	fb0e f003 	mul.w	r0, lr, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8004016:	b153      	cbz	r3, 800402e <prvGBPPUDrawLine+0x86>
 8004018:	2100      	movs	r1, #0
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	4403      	add	r3, r0
 8004020:	440b      	add	r3, r1
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8004022:	3101      	adds	r1, #1
            ucGBLine[pixelPos + xStretch + (ulCurLine)] = data;
 8004024:	f803 c002 	strb.w	ip, [r3, r2]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8004028:	7823      	ldrb	r3, [r4, #0]
 800402a:	4299      	cmp	r1, r3
 800402c:	dbf5      	blt.n	800401a <prvGBPPUDrawLine+0x72>
        for(int j = 0; j < 160; j++){
 800402e:	f10e 0e01 	add.w	lr, lr, #1
 8004032:	f1be 0fa0 	cmp.w	lr, #160	; 0xa0
 8004036:	d1eb      	bne.n	8004010 <prvGBPPUDrawLine+0x68>
            prvUpdateBuffer(1, j);
        }
    }

    if(ucGBMemoryRead(LCDC_ADDR) & 0x02){
 8004038:	f64f 7040 	movw	r0, #65344	; 0xff40
 800403c:	f7ff fb28 	bl	8003690 <ucGBMemoryRead>
 8004040:	0783      	lsls	r3, r0, #30
 8004042:	d428      	bmi.n	8004096 <prvGBPPUDrawLine+0xee>
        prvGBPPUDrawLineObjects(ly);
    }

    displayFrameBuffer(&ucGBLine[(ulCurLine)], ulScaleAmount, ly);
 8004044:	6828      	ldr	r0, [r5, #0]
 8004046:	463a      	mov	r2, r7
 8004048:	6833      	ldr	r3, [r6, #0]
 800404a:	7821      	ldrb	r1, [r4, #0]
 800404c:	4418      	add	r0, r3
}
 800404e:	b003      	add	sp, #12
 8004050:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    displayFrameBuffer(&ucGBLine[(ulCurLine)], ulScaleAmount, ly);
 8004054:	f000 bd40 	b.w	8004ad8 <displayFrameBuffer>
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8004058:	f64f 7040 	movw	r0, #65344	; 0xff40
 800405c:	f7ff fb18 	bl	8003690 <ucGBMemoryRead>
 8004060:	f010 0f08 	tst.w	r0, #8
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8004064:	4629      	mov	r1, r5
 8004066:	4642      	mov	r2, r8
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8004068:	bf14      	ite	ne
 800406a:	f44f 451c 	movne.w	r5, #39936	; 0x9c00
 800406e:	f44f 4518 	moveq.w	r5, #38912	; 0x9800
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8004072:	464b      	mov	r3, r9
 8004074:	4638      	mov	r0, r7
 8004076:	9500      	str	r5, [sp, #0]
 8004078:	f7ff fe24 	bl	8003cc4 <prvGBPPUDrawLineBackground>
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20){
 800407c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8004080:	f7ff fb06 	bl	8003690 <ucGBMemoryRead>
 8004084:	0682      	lsls	r2, r0, #26
 8004086:	d40a      	bmi.n	800409e <prvGBPPUDrawLine+0xf6>
    if(ucGBMemoryRead(LCDC_ADDR) & 0x02){
 8004088:	f64f 7040 	movw	r0, #65344	; 0xff40
 800408c:	4d1a      	ldr	r5, [pc, #104]	; (80040f8 <prvGBPPUDrawLine+0x150>)
 800408e:	f7ff faff 	bl	8003690 <ucGBMemoryRead>
 8004092:	0783      	lsls	r3, r0, #30
 8004094:	d5d6      	bpl.n	8004044 <prvGBPPUDrawLine+0x9c>
        prvGBPPUDrawLineObjects(ly);
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff feba 	bl	8003e10 <prvGBPPUDrawLineObjects>
 800409c:	e7d2      	b.n	8004044 <prvGBPPUDrawLine+0x9c>
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
 800409e:	f64f 704b 	movw	r0, #65355	; 0xff4b
 80040a2:	f7ff faf5 	bl	8003690 <ucGBMemoryRead>
 80040a6:	4605      	mov	r5, r0
 80040a8:	f64f 704a 	movw	r0, #65354	; 0xff4a
 80040ac:	f7ff faf0 	bl	8003690 <ucGBMemoryRead>
 80040b0:	4680      	mov	r8, r0
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80040b2:	f64f 7040 	movw	r0, #65344	; 0xff40
 80040b6:	f7ff faeb 	bl	8003690 <ucGBMemoryRead>
 80040ba:	f010 0f40 	tst.w	r0, #64	; 0x40
    if(WY > ly || WY > 143 || WX > 166)
 80040be:	463a      	mov	r2, r7
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80040c0:	bf14      	ite	ne
 80040c2:	f44f 431c 	movne.w	r3, #39936	; 0x9c00
 80040c6:	f44f 4318 	moveq.w	r3, #38912	; 0x9800
    if(WY > ly || WY > 143 || WX > 166)
 80040ca:	2f8f      	cmp	r7, #143	; 0x8f
 80040cc:	bf28      	it	cs
 80040ce:	228f      	movcs	r2, #143	; 0x8f
 80040d0:	4590      	cmp	r8, r2
 80040d2:	d8d9      	bhi.n	8004088 <prvGBPPUDrawLine+0xe0>
 80040d4:	2da6      	cmp	r5, #166	; 0xa6
 80040d6:	d8d7      	bhi.n	8004088 <prvGBPPUDrawLine+0xe0>
 80040d8:	4629      	mov	r1, r5
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	4638      	mov	r0, r7
 80040e2:	4d05      	ldr	r5, [pc, #20]	; (80040f8 <prvGBPPUDrawLine+0x150>)
 80040e4:	f7ff fd04 	bl	8003af0 <prvGBPPUDrawLineWindow.part.0>
 80040e8:	e7a6      	b.n	8004038 <prvGBPPUDrawLine+0x90>
 80040ea:	bf00      	nop
 80040ec:	24001014 	.word	0x24001014
 80040f0:	2401170c 	.word	0x2401170c
 80040f4:	24011668 	.word	0x24011668
 80040f8:	24001010 	.word	0x24001010

080040fc <vGBPPUStep>:
void vGBPPUStep(){
 80040fc:	b570      	push	{r4, r5, r6, lr}
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 80040fe:	f64f 7040 	movw	r0, #65344	; 0xff40
void vGBPPUStep(){
 8004102:	b082      	sub	sp, #8
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 8004104:	f7ff fac4 	bl	8003690 <ucGBMemoryRead>
 8004108:	0603      	lsls	r3, r0, #24
 800410a:	d409      	bmi.n	8004120 <vGBPPUStep+0x24>
        ucLY = 0;
 800410c:	2100      	movs	r1, #0
 800410e:	4b50      	ldr	r3, [pc, #320]	; (8004250 <vGBPPUStep+0x154>)
        vGBMemoryWrite(LY_ADDR, ucLY);
 8004110:	f64f 7044 	movw	r0, #65348	; 0xff44
        ucLY = 0;
 8004114:	7019      	strb	r1, [r3, #0]
}
 8004116:	b002      	add	sp, #8
 8004118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        vGBMemoryWrite(LY_ADDR, ucLY);
 800411c:	f7ff bae0 	b.w	80036e0 <vGBMemoryWrite>
        ultStatesTotal += ucGetTstate();
 8004120:	4c4c      	ldr	r4, [pc, #304]	; (8004254 <vGBPPUStep+0x158>)
 8004122:	f7fe fc6d 	bl	8002a00 <ucGetTstate>
            ucLY++;
 8004126:	4d4a      	ldr	r5, [pc, #296]	; (8004250 <vGBPPUStep+0x154>)
        ultStatesTotal += ucGetTstate();
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	4418      	add	r0, r3
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 800412c:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
        ultStatesTotal += ucGetTstate();
 8004130:	6020      	str	r0, [r4, #0]
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 8004132:	d845      	bhi.n	80041c0 <vGBPPUStep+0xc4>
        if (ucLY > 143){                                                                            // vblank region
 8004134:	782e      	ldrb	r6, [r5, #0]
 8004136:	2e8f      	cmp	r6, #143	; 0x8f
 8004138:	d905      	bls.n	8004146 <vGBPPUStep+0x4a>
            if(ucMode != MODE_1){
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <vGBPPUStep+0x15c>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d127      	bne.n	8004192 <vGBPPUStep+0x96>
}
 8004142:	b002      	add	sp, #8
 8004144:	bd70      	pop	{r4, r5, r6, pc}
            if (ultStatesTotal <= 80 && ucMode != MODE_2)                                           // oam region
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d809      	bhi.n	8004160 <vGBPPUStep+0x64>
 800414c:	4b42      	ldr	r3, [pc, #264]	; (8004258 <vGBPPUStep+0x15c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d0f6      	beq.n	8004142 <vGBPPUStep+0x46>
                prvSetMode(MODE_2);
 8004154:	2002      	movs	r0, #2
}
 8004156:	b002      	add	sp, #8
 8004158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                prvSetMode(MODE_3);
 800415c:	f7ff bd7e 	b.w	8003c5c <prvSetMode>
            else if(ultStatesTotal > 80 && ultStatesTotal <= 252 && ucMode != MODE_3){              // vram region
 8004160:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8004164:	2aab      	cmp	r2, #171	; 0xab
 8004166:	d83d      	bhi.n	80041e4 <vGBPPUStep+0xe8>
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <vGBPPUStep+0x15c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d0e8      	beq.n	8004142 <vGBPPUStep+0x46>
                    prvGBPPUDrawLine(ucLY, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8004170:	f64f 7043 	movw	r0, #65347	; 0xff43
 8004174:	f7ff fa8c 	bl	8003690 <ucGBMemoryRead>
 8004178:	4601      	mov	r1, r0
 800417a:	f64f 7042 	movw	r0, #65346	; 0xff42
 800417e:	9101      	str	r1, [sp, #4]
 8004180:	f7ff fa86 	bl	8003690 <ucGBMemoryRead>
 8004184:	9901      	ldr	r1, [sp, #4]
 8004186:	4602      	mov	r2, r0
 8004188:	4630      	mov	r0, r6
 800418a:	f7ff ff0d 	bl	8003fa8 <prvGBPPUDrawLine>
                prvSetMode(MODE_3);
 800418e:	2003      	movs	r0, #3
 8004190:	e7e1      	b.n	8004156 <vGBPPUStep+0x5a>
                prvSetMode(MODE_1);
 8004192:	2001      	movs	r0, #1
 8004194:	f7ff fd62 	bl	8003c5c <prvSetMode>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 4))
 8004198:	f64f 7041 	movw	r0, #65345	; 0xff41
 800419c:	f7ff fa78 	bl	8003690 <ucGBMemoryRead>
 80041a0:	2104      	movs	r1, #4
 80041a2:	f7fe fd79 	bl	8002c98 <ucCheckBit>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d145      	bne.n	8004236 <vGBPPUStep+0x13a>
                if(ucLY == 0x90){
 80041aa:	782b      	ldrb	r3, [r5, #0]
 80041ac:	2b90      	cmp	r3, #144	; 0x90
 80041ae:	d1c8      	bne.n	8004142 <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 0);
 80041b0:	2100      	movs	r1, #0
                    vGBMemorySetBit(IF_ADDR, 1);
 80041b2:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 80041b6:	b002      	add	sp, #8
 80041b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    vGBMemorySetBit(IF_ADDR, 1);
 80041bc:	f7ff ba20 	b.w	8003600 <vGBMemorySetBit>
            ucLY++;
 80041c0:	7828      	ldrb	r0, [r5, #0]
 80041c2:	3001      	adds	r0, #1
 80041c4:	b2c0      	uxtb	r0, r0
 80041c6:	7028      	strb	r0, [r5, #0]
            prvCheckLYC(ucLY);
 80041c8:	f7ff fd26 	bl	8003c18 <prvCheckLYC>
            if(ucLY > 153){                                                                         // end of vblank
 80041cc:	7829      	ldrb	r1, [r5, #0]
 80041ce:	2999      	cmp	r1, #153	; 0x99
 80041d0:	d81e      	bhi.n	8004210 <vGBPPUStep+0x114>
            vGBMemoryWrite(LY_ADDR, ucLY);                                                          // update LY register
 80041d2:	f64f 7044 	movw	r0, #65348	; 0xff44
 80041d6:	f7ff fa83 	bl	80036e0 <vGBMemoryWrite>
            ultStatesTotal -= 456;
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	e7a7      	b.n	8004134 <vGBPPUStep+0x38>
            }else if(ultStatesTotal > 252 && ultStatesTotal <= 456 && ucMode != MODE_0){            // hblank region
 80041e4:	3bfd      	subs	r3, #253	; 0xfd
 80041e6:	2bcb      	cmp	r3, #203	; 0xcb
 80041e8:	d8ab      	bhi.n	8004142 <vGBPPUStep+0x46>
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <vGBPPUStep+0x15c>)
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d0a7      	beq.n	8004142 <vGBPPUStep+0x46>
    ucMode = mode;
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
    switch (mode) {
 80041f6:	f7ff fbc7 	bl	8003988 <prvSetMode.part.0>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 3))
 80041fa:	f64f 7041 	movw	r0, #65345	; 0xff41
 80041fe:	f7ff fa47 	bl	8003690 <ucGBMemoryRead>
 8004202:	2103      	movs	r1, #3
 8004204:	f7fe fd48 	bl	8002c98 <ucCheckBit>
 8004208:	2800      	cmp	r0, #0
 800420a:	d09a      	beq.n	8004142 <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 1);
 800420c:	2101      	movs	r1, #1
 800420e:	e7d0      	b.n	80041b2 <vGBPPUStep+0xb6>
                framePerSecondLimiter++;
 8004210:	4a12      	ldr	r2, [pc, #72]	; (800425c <vGBPPUStep+0x160>)
                prvSetMode(MODE_2);
 8004212:	2002      	movs	r0, #2
                framePerSecondLimiter++;
 8004214:	7813      	ldrb	r3, [r2, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	7013      	strb	r3, [r2, #0]
                prvSetMode(MODE_2);
 800421a:	f7ff fd1f 	bl	8003c5c <prvSetMode>
                ucLY = 0;
 800421e:	2300      	movs	r3, #0
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 8004220:	f64f 7041 	movw	r0, #65345	; 0xff41
                ucLY = 0;
 8004224:	702b      	strb	r3, [r5, #0]
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 8004226:	f7ff fa33 	bl	8003690 <ucGBMemoryRead>
 800422a:	2105      	movs	r1, #5
 800422c:	f7fe fd34 	bl	8002c98 <ucCheckBit>
 8004230:	b938      	cbnz	r0, 8004242 <vGBPPUStep+0x146>
 8004232:	7829      	ldrb	r1, [r5, #0]
 8004234:	e7cd      	b.n	80041d2 <vGBPPUStep+0xd6>
                    vGBMemorySetBit(IF_ADDR, 1);
 8004236:	2101      	movs	r1, #1
 8004238:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800423c:	f7ff f9e0 	bl	8003600 <vGBMemorySetBit>
 8004240:	e7b3      	b.n	80041aa <vGBPPUStep+0xae>
                    vGBMemorySetBit(IF_ADDR, 1);
 8004242:	2101      	movs	r1, #1
 8004244:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8004248:	f7ff f9da 	bl	8003600 <vGBMemorySetBit>
 800424c:	e7f1      	b.n	8004232 <vGBPPUStep+0x136>
 800424e:	bf00      	nop
 8004250:	240010a9 	.word	0x240010a9
 8004254:	24011714 	.word	0x24011714
 8004258:	24011718 	.word	0x24011718
 800425c:	240010a8 	.word	0x240010a8

08004260 <getRomPointer>:
/**
 * @brief Returns pointer to Start of Gameboy ROM
 * @retval Gameboy ROM
 */
const unsigned char* getRomPointer(){
	return rom;
 8004260:	4b01      	ldr	r3, [pc, #4]	; (8004268 <getRomPointer+0x8>)
}
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	24001018 	.word	0x24001018

0800426c <menuSel>:

/**
 * @brief Handles Button inputs for Gameboy ROM selection
 * @retval None
 */
void menuSel(){
 800426c:	b510      	push	{r4, lr}
    HAL_ADC_Start(&hadc3);
 800426e:	4834      	ldr	r0, [pc, #208]	; (8004340 <menuSel+0xd4>)
 8004270:	f002 fcbc 	bl	8006bec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	4831      	ldr	r0, [pc, #196]	; (8004340 <menuSel+0xd4>)
 800427a:	f002 f9a5 	bl	80065c8 <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(&hadc3) >> 12;
 800427e:	4830      	ldr	r0, [pc, #192]	; (8004340 <menuSel+0xd4>)
 8004280:	f002 fa2c 	bl	80066dc <HAL_ADC_GetValue>
 8004284:	4604      	mov	r4, r0
    HAL_ADC_Start(&hadc1);
 8004286:	482f      	ldr	r0, [pc, #188]	; (8004344 <menuSel+0xd8>)
 8004288:	f002 fcb0 	bl	8006bec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	482c      	ldr	r0, [pc, #176]	; (8004344 <menuSel+0xd8>)
    uint32_t value = HAL_ADC_GetValue(&hadc3) >> 12;
 8004292:	0b24      	lsrs	r4, r4, #12
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004294:	f002 f998 	bl	80065c8 <HAL_ADC_PollForConversion>
    uint32_t value2 = HAL_ADC_GetValue(&hadc1) >> 12;
 8004298:	482a      	ldr	r0, [pc, #168]	; (8004344 <menuSel+0xd8>)
 800429a:	f002 fa1f 	bl	80066dc <HAL_ADC_GetValue>

    buttonState = NONE;
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <menuSel+0xdc>)
    uint32_t value2 = HAL_ADC_GetValue(&hadc1) >> 12;
 80042a0:	0b00      	lsrs	r0, r0, #12
    buttonState = NONE;
 80042a2:	2200      	movs	r2, #0

    if(value2 == 0xA){
 80042a4:	280a      	cmp	r0, #10
    buttonState = NONE;
 80042a6:	701a      	strb	r2, [r3, #0]
    if(value2 == 0xA){
 80042a8:	d021      	beq.n	80042ee <menuSel+0x82>
        buttonState = UP;
    }

    if(value2 == 0x6){
 80042aa:	2806      	cmp	r0, #6
 80042ac:	d111      	bne.n	80042d2 <menuSel+0x66>
        buttonState = DOWN;
 80042ae:	2202      	movs	r2, #2
    }

    if(value < 0x4){
 80042b0:	2c03      	cmp	r4, #3
        buttonState = DOWN;
 80042b2:	701a      	strb	r2, [r3, #0]
    if(value < 0x4){
 80042b4:	d90f      	bls.n	80042d6 <menuSel+0x6a>
 80042b6:	4c25      	ldr	r4, [pc, #148]	; (800434c <menuSel+0xe0>)
        case UP:    HAL_Delay(200);
                    if(gameState == TETRIS){ gameState = KIRBY;  break;}
                    if(gameState == MARIO){  gameState = TETRIS; break;}
                    if(gameState == KIRBY){  gameState = MARIO;  break;}

        case DOWN:  HAL_Delay(200);
 80042b8:	20c8      	movs	r0, #200	; 0xc8
 80042ba:	f002 f95b 	bl	8006574 <HAL_Delay>
                    if(gameState == TETRIS){ gameState = MARIO;  break;}
 80042be:	7823      	ldrb	r3, [r4, #0]
 80042c0:	b31b      	cbz	r3, 800430a <menuSel+0x9e>
                    if(gameState == MARIO){  gameState = KIRBY;  break;}
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d024      	beq.n	8004310 <menuSel+0xa4>
                    if(gameState == KIRBY){  gameState = TETRIS; break;}
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d025      	beq.n	8004316 <menuSel+0xaa>

        case IN:    if(gameState == TETRIS) setROM(Tetris_gb);
                    if(gameState == MARIO)  setROM(SML_gb);
                    if(gameState == KIRBY)  setROM(KDL_gb);
                    sel = 0;
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <menuSel+0xe4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
                    break;

        default:    break;
    }
}
 80042d0:	bd10      	pop	{r4, pc}
    if(value < 0x4){
 80042d2:	2c03      	cmp	r4, #3
 80042d4:	d8fc      	bhi.n	80042d0 <menuSel+0x64>
        case IN:    if(gameState == TETRIS) setROM(Tetris_gb);
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <menuSel+0xe0>)
        buttonState = IN;
 80042d8:	2103      	movs	r1, #3
        case IN:    if(gameState == TETRIS) setROM(Tetris_gb);
 80042da:	7812      	ldrb	r2, [r2, #0]
        buttonState = IN;
 80042dc:	7019      	strb	r1, [r3, #0]
        case IN:    if(gameState == TETRIS) setROM(Tetris_gb);
 80042de:	b9ea      	cbnz	r2, 800431c <menuSel+0xb0>
    rom = pROM;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <menuSel+0xe8>)
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <menuSel+0xec>)
 80042e4:	601a      	str	r2, [r3, #0]
                    sel = 0;
 80042e6:	2200      	movs	r2, #0
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <menuSel+0xe4>)
 80042ea:	701a      	strb	r2, [r3, #0]
                    break;
 80042ec:	e7f0      	b.n	80042d0 <menuSel+0x64>
        buttonState = UP;
 80042ee:	2201      	movs	r2, #1
    if(value < 0x4){
 80042f0:	2c03      	cmp	r4, #3
        buttonState = UP;
 80042f2:	701a      	strb	r2, [r3, #0]
    if(value < 0x4){
 80042f4:	d9ef      	bls.n	80042d6 <menuSel+0x6a>
                    if(gameState == TETRIS){ gameState = KIRBY;  break;}
 80042f6:	4c15      	ldr	r4, [pc, #84]	; (800434c <menuSel+0xe0>)
        case UP:    HAL_Delay(200);
 80042f8:	20c8      	movs	r0, #200	; 0xc8
 80042fa:	f002 f93b 	bl	8006574 <HAL_Delay>
                    if(gameState == TETRIS){ gameState = KIRBY;  break;}
 80042fe:	7823      	ldrb	r3, [r4, #0]
 8004300:	b133      	cbz	r3, 8004310 <menuSel+0xa4>
                    if(gameState == MARIO){  gameState = TETRIS; break;}
 8004302:	2b01      	cmp	r3, #1
 8004304:	d007      	beq.n	8004316 <menuSel+0xaa>
                    if(gameState == KIRBY){  gameState = MARIO;  break;}
 8004306:	2b02      	cmp	r3, #2
 8004308:	d1d6      	bne.n	80042b8 <menuSel+0x4c>
 800430a:	2301      	movs	r3, #1
 800430c:	7023      	strb	r3, [r4, #0]
}
 800430e:	bd10      	pop	{r4, pc}
                    if(gameState == TETRIS){ gameState = KIRBY;  break;}
 8004310:	2302      	movs	r3, #2
 8004312:	7023      	strb	r3, [r4, #0]
}
 8004314:	bd10      	pop	{r4, pc}
                    if(gameState == MARIO){  gameState = TETRIS; break;}
 8004316:	2300      	movs	r3, #0
 8004318:	7023      	strb	r3, [r4, #0]
}
 800431a:	bd10      	pop	{r4, pc}
                    if(gameState == MARIO)  setROM(SML_gb);
 800431c:	2a01      	cmp	r2, #1
 800431e:	d106      	bne.n	800432e <menuSel+0xc2>
    rom = pROM;
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <menuSel+0xe8>)
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <menuSel+0xf0>)
 8004324:	601a      	str	r2, [r3, #0]
                    sel = 0;
 8004326:	2200      	movs	r2, #0
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <menuSel+0xe4>)
 800432a:	701a      	strb	r2, [r3, #0]
                    break;
 800432c:	e7d0      	b.n	80042d0 <menuSel+0x64>
                    if(gameState == KIRBY)  setROM(KDL_gb);
 800432e:	2a02      	cmp	r2, #2
 8004330:	d1cb      	bne.n	80042ca <menuSel+0x5e>
    rom = pROM;
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <menuSel+0xe8>)
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <menuSel+0xf4>)
 8004336:	601a      	str	r2, [r3, #0]
                    sel = 0;
 8004338:	2200      	movs	r2, #0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <menuSel+0xe4>)
 800433c:	701a      	strb	r2, [r3, #0]
                    break;
 800433e:	e7c7      	b.n	80042d0 <menuSel+0x64>
 8004340:	24011848 	.word	0x24011848
 8004344:	240117e4 	.word	0x240117e4
 8004348:	240010aa 	.word	0x240010aa
 800434c:	240010ab 	.word	0x240010ab
 8004350:	2400101c 	.word	0x2400101c
 8004354:	24001018 	.word	0x24001018
 8004358:	0805b128 	.word	0x0805b128
 800435c:	0804b128 	.word	0x0804b128
 8004360:	0800b128 	.word	0x0800b128

08004364 <updateLCD>:

/**
 * @brief Updates menu LCD with correct ROM selected
 * @retval None
 */
void updateLCD(){
 8004364:	b538      	push	{r3, r4, r5, lr}
    if(gameState == TETRIS){
 8004366:	4c51      	ldr	r4, [pc, #324]	; (80044ac <updateLCD+0x148>)
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	b123      	cbz	r3, 8004376 <updateLCD+0x12>
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
        UTIL_LCD_DisplayStringAt(275, LINE(11), (uint8_t *) "Mario", LEFT_MODE);
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
    }

    if(gameState == MARIO){
 800436c:	2b01      	cmp	r3, #1
 800436e:	d036      	beq.n	80043de <updateLCD+0x7a>
        UTIL_LCD_DisplayStringAt(275, LINE(11), (uint8_t *) "Mario", LEFT_MODE);
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
    }

    if(gameState == KIRBY){
 8004370:	2b02      	cmp	r3, #2
 8004372:	d068      	beq.n	8004446 <updateLCD+0xe2>
        UTIL_LCD_SetBackColor(DARKEST_GREEN); UTIL_LCD_SetTextColor(LIGHTEST_GREEN);
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
    }

}
 8004374:	bd38      	pop	{r3, r4, r5, pc}
        UTIL_LCD_SetBackColor(DARKEST_GREEN); UTIL_LCD_SetTextColor(LIGHTEST_GREEN);
 8004376:	484e      	ldr	r0, [pc, #312]	; (80044b0 <updateLCD+0x14c>)
 8004378:	f006 fd1e 	bl	800adb8 <UTIL_LCD_SetBackColor>
 800437c:	484d      	ldr	r0, [pc, #308]	; (80044b4 <updateLCD+0x150>)
 800437e:	f006 fd13 	bl	800ada8 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(275, LINE(10), (uint8_t *) "Tetris", LEFT_MODE);
 8004382:	f006 fd29 	bl	800add8 <UTIL_LCD_GetFont>
 8004386:	88c1      	ldrh	r1, [r0, #6]
 8004388:	2303      	movs	r3, #3
 800438a:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <updateLCD+0x154>)
 800438c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004390:	f240 1013 	movw	r0, #275	; 0x113
 8004394:	0049      	lsls	r1, r1, #1
 8004396:	f006 fdd5 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
 800439a:	4846      	ldr	r0, [pc, #280]	; (80044b4 <updateLCD+0x150>)
 800439c:	f006 fd0c 	bl	800adb8 <UTIL_LCD_SetBackColor>
 80043a0:	4843      	ldr	r0, [pc, #268]	; (80044b0 <updateLCD+0x14c>)
 80043a2:	f006 fd01 	bl	800ada8 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(275, LINE(11), (uint8_t *) "Mario", LEFT_MODE);
 80043a6:	f006 fd17 	bl	800add8 <UTIL_LCD_GetFont>
 80043aa:	88c1      	ldrh	r1, [r0, #6]
 80043ac:	2303      	movs	r3, #3
 80043ae:	4a43      	ldr	r2, [pc, #268]	; (80044bc <updateLCD+0x158>)
 80043b0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80043b4:	f240 1013 	movw	r0, #275	; 0x113
 80043b8:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80043bc:	f006 fdc2 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
 80043c0:	f006 fd0a 	bl	800add8 <UTIL_LCD_GetFont>
 80043c4:	88c1      	ldrh	r1, [r0, #6]
 80043c6:	2303      	movs	r3, #3
 80043c8:	4a3d      	ldr	r2, [pc, #244]	; (80044c0 <updateLCD+0x15c>)
 80043ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80043ce:	f240 1013 	movw	r0, #275	; 0x113
 80043d2:	0089      	lsls	r1, r1, #2
 80043d4:	f006 fdb6 	bl	800af44 <UTIL_LCD_DisplayStringAt>
 80043d8:	7823      	ldrb	r3, [r4, #0]
    if(gameState == MARIO){
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d1c8      	bne.n	8004370 <updateLCD+0xc>
        UTIL_LCD_DisplayStringAt(275, LINE(10), (uint8_t *) "Tetris", LEFT_MODE);
 80043de:	f006 fcfb 	bl	800add8 <UTIL_LCD_GetFont>
 80043e2:	88c1      	ldrh	r1, [r0, #6]
 80043e4:	2303      	movs	r3, #3
 80043e6:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <updateLCD+0x154>)
 80043e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043ec:	f240 1013 	movw	r0, #275	; 0x113
 80043f0:	0049      	lsls	r1, r1, #1
 80043f2:	f006 fda7 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_SetBackColor(DARKEST_GREEN); UTIL_LCD_SetTextColor(LIGHTEST_GREEN);
 80043f6:	482e      	ldr	r0, [pc, #184]	; (80044b0 <updateLCD+0x14c>)
 80043f8:	f006 fcde 	bl	800adb8 <UTIL_LCD_SetBackColor>
 80043fc:	482d      	ldr	r0, [pc, #180]	; (80044b4 <updateLCD+0x150>)
 80043fe:	f006 fcd3 	bl	800ada8 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(275, LINE(11), (uint8_t *) "Mario", LEFT_MODE);
 8004402:	f006 fce9 	bl	800add8 <UTIL_LCD_GetFont>
 8004406:	88c1      	ldrh	r1, [r0, #6]
 8004408:	2303      	movs	r3, #3
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <updateLCD+0x158>)
 800440c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8004410:	f240 1013 	movw	r0, #275	; 0x113
 8004414:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8004418:	f006 fd94 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
 800441c:	4825      	ldr	r0, [pc, #148]	; (80044b4 <updateLCD+0x150>)
 800441e:	f006 fccb 	bl	800adb8 <UTIL_LCD_SetBackColor>
 8004422:	4823      	ldr	r0, [pc, #140]	; (80044b0 <updateLCD+0x14c>)
 8004424:	f006 fcc0 	bl	800ada8 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
 8004428:	f006 fcd6 	bl	800add8 <UTIL_LCD_GetFont>
 800442c:	88c1      	ldrh	r1, [r0, #6]
 800442e:	2303      	movs	r3, #3
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <updateLCD+0x15c>)
 8004432:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004436:	f240 1013 	movw	r0, #275	; 0x113
 800443a:	0089      	lsls	r1, r1, #2
 800443c:	f006 fd82 	bl	800af44 <UTIL_LCD_DisplayStringAt>
 8004440:	7823      	ldrb	r3, [r4, #0]
    if(gameState == KIRBY){
 8004442:	2b02      	cmp	r3, #2
 8004444:	d196      	bne.n	8004374 <updateLCD+0x10>
        UTIL_LCD_DisplayStringAt(275, LINE(10), (uint8_t *) "Tetris", LEFT_MODE);
 8004446:	f006 fcc7 	bl	800add8 <UTIL_LCD_GetFont>
 800444a:	88c1      	ldrh	r1, [r0, #6]
 800444c:	2303      	movs	r3, #3
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <updateLCD+0x154>)
 8004450:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004454:	f240 1013 	movw	r0, #275	; 0x113
 8004458:	0049      	lsls	r1, r1, #1
 800445a:	f006 fd73 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(275, LINE(11), (uint8_t *) "Mario", LEFT_MODE);
 800445e:	f006 fcbb 	bl	800add8 <UTIL_LCD_GetFont>
 8004462:	88c1      	ldrh	r1, [r0, #6]
 8004464:	2303      	movs	r3, #3
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <updateLCD+0x158>)
 8004468:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800446c:	f240 1013 	movw	r0, #275	; 0x113
 8004470:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8004474:	f006 fd66 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_SetBackColor(DARKEST_GREEN); UTIL_LCD_SetTextColor(LIGHTEST_GREEN);
 8004478:	480d      	ldr	r0, [pc, #52]	; (80044b0 <updateLCD+0x14c>)
 800447a:	f006 fc9d 	bl	800adb8 <UTIL_LCD_SetBackColor>
 800447e:	480d      	ldr	r0, [pc, #52]	; (80044b4 <updateLCD+0x150>)
 8004480:	f006 fc92 	bl	800ada8 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(275, LINE(12), (uint8_t *) "Kirby", LEFT_MODE);
 8004484:	f006 fca8 	bl	800add8 <UTIL_LCD_GetFont>
 8004488:	88c1      	ldrh	r1, [r0, #6]
 800448a:	2303      	movs	r3, #3
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <updateLCD+0x15c>)
 800448e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004492:	f240 1013 	movw	r0, #275	; 0x113
 8004496:	0089      	lsls	r1, r1, #2
 8004498:	f006 fd54 	bl	800af44 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
 800449c:	4805      	ldr	r0, [pc, #20]	; (80044b4 <updateLCD+0x150>)
 800449e:	f006 fc8b 	bl	800adb8 <UTIL_LCD_SetBackColor>
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <updateLCD+0x14c>)
}
 80044a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        UTIL_LCD_SetBackColor(LIGHTEST_GREEN); UTIL_LCD_SetTextColor(DARKEST_GREEN);
 80044a8:	f006 bc7e 	b.w	800ada8 <UTIL_LCD_SetTextColor>
 80044ac:	240010ab 	.word	0x240010ab
 80044b0:	ff0f380f 	.word	0xff0f380f
 80044b4:	ff9bbc0f 	.word	0xff9bbc0f
 80044b8:	0800b0f8 	.word	0x0800b0f8
 80044bc:	0800b100 	.word	0x0800b100
 80044c0:	0800b108 	.word	0x0800b108

080044c4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80044c6:	2004      	movs	r0, #4
{
 80044c8:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80044ca:	f004 fb89 	bl	8008be0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044ce:	4a2f      	ldr	r2, [pc, #188]	; (800458c <SystemClock_Config+0xc8>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044d6:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <SystemClock_Config+0xcc>)
 80044d8:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80044dc:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044e2:	f002 0201 	and.w	r2, r2, #1
 80044e6:	9201      	str	r2, [sp, #4]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80044ee:	619a      	str	r2, [r3, #24]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80044fa:	6983      	ldr	r3, [r0, #24]
 80044fc:	049b      	lsls	r3, r3, #18
 80044fe:	d5fc      	bpl.n	80044fa <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004500:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004502:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004506:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004508:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 800450a:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 800450c:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800450e:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004510:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004512:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004514:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004516:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004518:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800451a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800451c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 800451e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004520:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004522:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004524:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004528:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800452c:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004530:	f004 fb92 	bl	8008c58 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8004534:	b108      	cbz	r0, 800453a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004536:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004538:	e7fe      	b.n	8004538 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800453a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800453c:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800453e:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004540:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004544:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004546:	4629      	mov	r1, r5
 8004548:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800454a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800454c:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004550:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004554:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004558:	f004 ff14 	bl	8009384 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800455c:	b108      	cbz	r0, 8004562 <SystemClock_Config+0x9e>
 800455e:	b672      	cpsid	i
  while (1)
 8004560:	e7fe      	b.n	8004560 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <SystemClock_Config+0xd0>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800456a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800456c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004570:	f042 0202 	orr.w	r2, r2, #2
 8004574:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004584:	f002 f818 	bl	80065b8 <HAL_EnableCompensationCell>
}
 8004588:	b01f      	add	sp, #124	; 0x7c
 800458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800458c:	58000400 	.word	0x58000400
 8004590:	58024800 	.word	0x58024800
 8004594:	58024400 	.word	0x58024400

08004598 <PeriphCommonClock_Config>:
{
 8004598:	b530      	push	{r4, r5, lr}
 800459a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800459c:	229c      	movs	r2, #156	; 0x9c
 800459e:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80045a0:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045a2:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80045a4:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045a6:	f006 fd8b 	bl	800b0c0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80045aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80045ae:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80045b0:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80045b2:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80045b4:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045b6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80045b8:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80045ba:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80045bc:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80045be:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80045c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80045c4:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045c8:	f005 f920 	bl	800980c <HAL_RCCEx_PeriphCLKConfig>
 80045cc:	b108      	cbz	r0, 80045d2 <PeriphCommonClock_Config+0x3a>
 80045ce:	b672      	cpsid	i
  while (1)
 80045d0:	e7fe      	b.n	80045d0 <PeriphCommonClock_Config+0x38>
}
 80045d2:	b031      	add	sp, #196	; 0xc4
 80045d4:	bd30      	pop	{r4, r5, pc}
 80045d6:	bf00      	nop

080045d8 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80045d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045dc:	49b6      	ldr	r1, [pc, #728]	; (80048b8 <main+0x2e0>)
 80045de:	e002      	b.n	80045e6 <main+0xe>
 80045e0:	3b01      	subs	r3, #1
 80045e2:	f000 8117 	beq.w	8004814 <main+0x23c>
 80045e6:	680a      	ldr	r2, [r1, #0]
 80045e8:	0410      	lsls	r0, r2, #16
 80045ea:	d4f9      	bmi.n	80045e0 <main+0x8>
{
 80045ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f0:	b095      	sub	sp, #84	; 0x54
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80045f2:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 80045f4:	f002 fe26 	bl	8007244 <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80045f8:	4ab0      	ldr	r2, [pc, #704]	; (80048bc <main+0x2e4>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80045fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 80045fe:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004602:	a80d      	add	r0, sp, #52	; 0x34
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004604:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004608:	9310      	str	r3, [sp, #64]	; 0x40
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800460a:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800460e:	f002 fe3b 	bl	8007288 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004612:	2004      	movs	r0, #4
 8004614:	f002 fe26 	bl	8007264 <HAL_MPU_Enable>
  HAL_Init();
 8004618:	f001 ff6a 	bl	80064f0 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800461c:	4aa8      	ldr	r2, [pc, #672]	; (80048c0 <main+0x2e8>)
 800461e:	6953      	ldr	r3, [r2, #20]
 8004620:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004624:	d111      	bne.n	800464a <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004626:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800462a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800462e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004632:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004636:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800463a:	6953      	ldr	r3, [r2, #20]
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004646:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800464a:	4a9d      	ldr	r2, [pc, #628]	; (80048c0 <main+0x2e8>)
 800464c:	6953      	ldr	r3, [r2, #20]
 800464e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004652:	d124      	bne.n	800469e <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004654:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004658:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800465c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004660:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004664:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004668:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800466c:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800466e:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004672:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004674:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004678:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800467a:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	d1f8      	bne.n	8004674 <main+0x9c>
    } while(sets-- != 0U);
 8004682:	3820      	subs	r0, #32
 8004684:	f110 0f20 	cmn.w	r0, #32
 8004688:	d1f1      	bne.n	800466e <main+0x96>
 800468a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800468e:	6953      	ldr	r3, [r2, #20]
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	6153      	str	r3, [r2, #20]
 8004696:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800469a:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 800469e:	4c86      	ldr	r4, [pc, #536]	; (80048b8 <main+0x2e0>)
  SystemClock_Config();
 80046a0:	f7ff ff10 	bl	80044c4 <SystemClock_Config>
  PeriphCommonClock_Config();
 80046a4:	f7ff ff78 	bl	8004598 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 80046a8:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 80046aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80046ae:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 80046b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046b4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80046b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 80046c4:	f004 f834 	bl	8008730 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80046c8:	2100      	movs	r1, #0
 80046ca:	4608      	mov	r0, r1
 80046cc:	f004 f83e 	bl	800874c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80046d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046d4:	e002      	b.n	80046dc <main+0x104>
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f000 809e 	beq.w	8004818 <main+0x240>
 80046dc:	682a      	ldr	r2, [r5, #0]
 80046de:	0412      	lsls	r2, r2, #16
 80046e0:	d5f9      	bpl.n	80046d6 <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e6:	2701      	movs	r7, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ec:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80046f0:	f44f 7680 	mov.w	r6, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80046f4:	a90d      	add	r1, sp, #52	; 0x34
 80046f6:	4873      	ldr	r0, [pc, #460]	; (80048c4 <main+0x2ec>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80046fc:	f44f 2800 	mov.w	r8, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004704:	403b      	ands	r3, r7
 8004706:	9304      	str	r3, [sp, #16]
 8004708:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800470a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004714:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004718:	4013      	ands	r3, r2
 800471a:	9305      	str	r3, [sp, #20]
 800471c:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004722:	f043 0308 	orr.w	r3, r3, #8
 8004726:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800472a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	9306      	str	r3, [sp, #24]
 8004734:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004736:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004742:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	9307      	str	r3, [sp, #28]
 800474c:	9b07      	ldr	r3, [sp, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800474e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800475a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	9308      	str	r3, [sp, #32]
 8004764:	9b08      	ldr	r3, [sp, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004766:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800476a:	f043 0320 	orr.w	r3, r3, #32
 800476e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004772:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	920e      	str	r2, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004778:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800477c:	960d      	str	r6, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 800477e:	4e52      	ldr	r6, [pc, #328]	; (80048c8 <main+0x2f0>)
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004780:	9309      	str	r3, [sp, #36]	; 0x24
 8004782:	9b09      	ldr	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004784:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004788:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800478a:	f003 fea5 	bl	80084d8 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478e:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004790:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004794:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004798:	a90d      	add	r1, sp, #52	; 0x34
 800479a:	484c      	ldr	r0, [pc, #304]	; (80048cc <main+0x2f4>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80047a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047a8:	2504      	movs	r5, #4
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80047aa:	920d      	str	r2, [sp, #52]	; 0x34
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b2:	9410      	str	r4, [sp, #64]	; 0x40
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b8:	970e      	str	r7, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047ba:	f003 fe8d 	bl	80084d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c2:	a90d      	add	r1, sp, #52	; 0x34
 80047c4:	4842      	ldr	r0, [pc, #264]	; (80048d0 <main+0x2f8>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047c6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c8:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ce:	f003 fe83 	bl	80084d8 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <main+0x2fc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047d4:	4630      	mov	r0, r6
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80047d6:	82b4      	strh	r4, [r6, #20]
  ADC_MultiModeTypeDef multimode = {0};
 80047d8:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80047da:	9413      	str	r4, [sp, #76]	; 0x4c
  hadc1.Init.NbrOfConversion = 1;
 80047dc:	61b7      	str	r7, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80047de:	7734      	strb	r4, [r6, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80047e0:	6374      	str	r4, [r6, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80047e2:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047e6:	6135      	str	r5, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80047e8:	e9c6 3800 	strd	r3, r8, [r6]
  ADC_ChannelConfTypeDef sConfig = {0};
 80047ec:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80047f0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80047f4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_MultiModeTypeDef multimode = {0};
 80047f8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80047fc:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004800:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004804:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004808:	f002 fb34 	bl	8006e74 <HAL_ADC_Init>
 800480c:	4603      	mov	r3, r0
 800480e:	b128      	cbz	r0, 800481c <main+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8004810:	b672      	cpsid	i
  while (1)
 8004812:	e7fe      	b.n	8004812 <main+0x23a>
 8004814:	b672      	cpsid	i
 8004816:	e7fe      	b.n	8004816 <main+0x23e>
 8004818:	b672      	cpsid	i
 800481a:	e7fe      	b.n	800481a <main+0x242>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800481c:	a90a      	add	r1, sp, #40	; 0x28
 800481e:	4630      	mov	r0, r6
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004820:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004822:	f002 fc33 	bl	800708c <HAL_ADCEx_MultiModeConfigChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	b108      	cbz	r0, 800482e <main+0x256>
 800482a:	b672      	cpsid	i
  while (1)
 800482c:	e7fe      	b.n	800482c <main+0x254>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800482e:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004832:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004836:	4630      	mov	r0, r6
 8004838:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800483a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.OffsetSignedSaturation = DISABLE;
 800483c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.Channel = ADC_CHANNEL_0;
 8004840:	970d      	str	r7, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004842:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004846:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.Offset = 0;
 8004848:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800484c:	f001 ff4a 	bl	80066e4 <HAL_ADC_ConfigChannel>
 8004850:	4603      	mov	r3, r0
 8004852:	b108      	cbz	r0, 8004858 <main+0x280>
 8004854:	b672      	cpsid	i
  while (1)
 8004856:	e7fe      	b.n	8004856 <main+0x27e>
  hadc3.Instance = ADC3;
 8004858:	4e1f      	ldr	r6, [pc, #124]	; (80048d8 <main+0x300>)
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <main+0x304>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800485c:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800485e:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004860:	82b3      	strh	r3, [r6, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004862:	7733      	strb	r3, [r6, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004864:	6373      	str	r3, [r6, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8004866:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800486a:	61b7      	str	r7, [r6, #24]
  hadc3.Instance = ADC3;
 800486c:	6032      	str	r2, [r6, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 800486e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8004872:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8004876:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800487a:	e9c6 8301 	strd	r8, r3, [r6, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800487e:	e9c6 3503 	strd	r3, r5, [r6, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004882:	e9c6 3309 	strd	r3, r3, [r6, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004886:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800488a:	f002 faf3 	bl	8006e74 <HAL_ADC_Init>
 800488e:	4603      	mov	r3, r0
 8004890:	b108      	cbz	r0, 8004896 <main+0x2be>
 8004892:	b672      	cpsid	i
  while (1)
 8004894:	e7fe      	b.n	8004894 <main+0x2bc>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004896:	a90d      	add	r1, sp, #52	; 0x34
 8004898:	4630      	mov	r0, r6
  sConfig.OffsetSignedSaturation = DISABLE;
 800489a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800489e:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048a2:	e9cd 790d 	strd	r7, r9, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 80048a6:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80048aa:	f001 ff1b 	bl	80066e4 <HAL_ADC_ConfigChannel>
 80048ae:	4604      	mov	r4, r0
 80048b0:	b1b0      	cbz	r0, 80048e0 <main+0x308>
 80048b2:	b672      	cpsid	i
  while (1)
 80048b4:	e7fe      	b.n	80048b4 <main+0x2dc>
 80048b6:	bf00      	nop
 80048b8:	58024400 	.word	0x58024400
 80048bc:	03000018 	.word	0x03000018
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	58020000 	.word	0x58020000
 80048c8:	240117e4 	.word	0x240117e4
 80048cc:	58022000 	.word	0x58022000
 80048d0:	58020800 	.word	0x58020800
 80048d4:	40022000 	.word	0x40022000
 80048d8:	24011848 	.word	0x24011848
 80048dc:	58026000 	.word	0x58026000
  stm32h7_displaySetPalette();                                                      // sets the L8 indirect addressing Pallette
 80048e0:	f000 f85a 	bl	8004998 <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);                                       // Init LCD
 80048e4:	4639      	mov	r1, r7
 80048e6:	4620      	mov	r0, r4
  UTIL_LCD_FillRect(160, (480 - (144*3))/2, 160*3, 144*3, LIGHTEST_GREEN);          // "" "" ""
 80048e8:	4d23      	ldr	r5, [pc, #140]	; (8004978 <main+0x3a0>)
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);                                       // Init LCD
 80048ea:	f001 fc9f 	bl	800622c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);                                              // "" "" ""
 80048ee:	4823      	ldr	r0, [pc, #140]	; (800497c <main+0x3a4>)
 80048f0:	f006 fa18 	bl	800ad24 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);                                                             // "" "" ""
 80048f4:	4620      	mov	r0, r4
 80048f6:	f006 fa47 	bl	800ad88 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);                                             // "" "" ""
 80048fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80048fe:	f006 fb9d 	bl	800b03c <UTIL_LCD_Clear>
  UTIL_LCD_FillRect(160, (480 - (144*3))/2, 160*3, 144*3, LIGHTEST_GREEN);          // "" "" ""
 8004902:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004906:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800490a:	2118      	movs	r1, #24
 800490c:	9500      	str	r5, [sp, #0]
 800490e:	20a0      	movs	r0, #160	; 0xa0
 8004910:	f006 fb68 	bl	800afe4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(LIGHTEST_GREEN);                                            // set text color and font size
 8004914:	4628      	mov	r0, r5
 8004916:	f006 fa4f 	bl	800adb8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(DARKEST_GREEN);                                             // "" "" ""
 800491a:	4819      	ldr	r0, [pc, #100]	; (8004980 <main+0x3a8>)
 800491c:	f006 fa44 	bl	800ada8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);                                                        // "" "" ""
 8004920:	4818      	ldr	r0, [pc, #96]	; (8004984 <main+0x3ac>)
 8004922:	f006 fa51 	bl	800adc8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *) "Please Select A Game", CENTER_MODE);
 8004926:	4d18      	ldr	r5, [pc, #96]	; (8004988 <main+0x3b0>)
 8004928:	f006 fa56 	bl	800add8 <UTIL_LCD_GetFont>
 800492c:	4602      	mov	r2, r0
 800492e:	463b      	mov	r3, r7
 8004930:	4620      	mov	r0, r4
 8004932:	88d1      	ldrh	r1, [r2, #6]
 8004934:	4a15      	ldr	r2, [pc, #84]	; (800498c <main+0x3b4>)
 8004936:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800493a:	f006 fb03 	bl	800af44 <UTIL_LCD_DisplayStringAt>
    while(sel == 1){
 800493e:	e003      	b.n	8004948 <main+0x370>
        menuSel();
 8004940:	f7ff fc94 	bl	800426c <menuSel>
        updateLCD();
 8004944:	f7ff fd0e 	bl	8004364 <updateLCD>
    while(sel == 1){
 8004948:	782b      	ldrb	r3, [r5, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d0f8      	beq.n	8004940 <main+0x368>
  vGBMemoryLoad(rom, 32768);                                                        // load rom into memory
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <main+0x3b8>)
 8004950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f7fe fdf7 	bl	8003548 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);                                                 // load boot rom into appropriate place in memory map
 800495a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800495e:	480d      	ldr	r0, [pc, #52]	; (8004994 <main+0x3bc>)
 8004960:	f7fe fdf2 	bl	8003548 <vGBMemoryLoad>
  vGBMemoryInit();                                                                  // initialize Gameboy Memory and Registers
 8004964:	f7fe ff44 	bl	80037f0 <vGBMemoryInit>
  vSetLineBuffer();                                                                 //
 8004968:	f7ff f81c 	bl	80039a4 <vSetLineBuffer>
      vGBCPUStep();
 800496c:	f7fe f968 	bl	8002c40 <vGBCPUStep>
	  vGBPPUStep();
 8004970:	f7ff fbc4 	bl	80040fc <vGBPPUStep>
  while (1)
 8004974:	e7fa      	b.n	800496c <main+0x394>
 8004976:	bf00      	nop
 8004978:	ff9bbc0f 	.word	0xff9bbc0f
 800497c:	08063394 	.word	0x08063394
 8004980:	ff0f380f 	.word	0xff0f380f
 8004984:	24001074 	.word	0x24001074
 8004988:	2400101c 	.word	0x2400101c
 800498c:	0800b110 	.word	0x0800b110
 8004990:	24001018 	.word	0x24001018
 8004994:	08063128 	.word	0x08063128

08004998 <stm32h7_displaySetPalette>:
 * @brief Sets the color palette for the L8 indirect color mode used for the gameboy
 * @returns Nothing
 */
void stm32h7_displaySetPalette(){

	clut_argb8888[1] = LIGHTEST_GREEN;
 8004998:	4911      	ldr	r1, [pc, #68]	; (80049e0 <stm32h7_displaySetPalette+0x48>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 800499a:	2200      	movs	r2, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 800499c:	4811      	ldr	r0, [pc, #68]	; (80049e4 <stm32h7_displaySetPalette+0x4c>)
	clut_argb8888[2] = LIGHT_GREEN;
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <stm32h7_displaySetPalette+0x50>)
void stm32h7_displaySetPalette(){
 80049a0:	b470      	push	{r4, r5, r6}
	clut_argb8888[1] = LIGHTEST_GREEN;
 80049a2:	6048      	str	r0, [r1, #4]
	clut_cfg.Size = 255;
 80049a4:	24ff      	movs	r4, #255	; 0xff
	clut_argb8888[4] = DARKEST_GREEN;
 80049a6:	4811      	ldr	r0, [pc, #68]	; (80049ec <stm32h7_displaySetPalette+0x54>)

    /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80049a8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	clut_argb8888[2] = LIGHT_GREEN;
 80049ac:	608b      	str	r3, [r1, #8]

    /*##-3- Foreground Configuration ###########################################*/
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
    hdma2d.LayerCfg[1].InputAlpha = 0xFF;
    //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80049ae:	2505      	movs	r5, #5
	clut_argb8888[4] = DARKEST_GREEN;
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <stm32h7_displaySetPalette+0x58>)
 80049b2:	e9c1 0303 	strd	r0, r3, [r1, #12]
	clut_cfg.pCLUT = clut_argb8888;
 80049b6:	480f      	ldr	r0, [pc, #60]	; (80049f4 <stm32h7_displaySetPalette+0x5c>)
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <stm32h7_displaySetPalette+0x60>)
	clut_cfg.Size = 255;
 80049ba:	6084      	str	r4, [r0, #8]
    hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80049bc:	651c      	str	r4, [r3, #80]	; 0x50
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80049be:	605e      	str	r6, [r3, #4]
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80049c0:	649d      	str	r5, [r3, #72]	; 0x48
    hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80049c2:	609a      	str	r2, [r3, #8]
    hdma2d.XferCpltCallback  = NULL;
 80049c4:	621a      	str	r2, [r3, #32]
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80049c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma2d.LayerCfg[1].InputOffset = 0;
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80049ca:	e9c0 1200 	strd	r1, r2, [r0]
    hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
    hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

    hdma2d.Instance          = DMA2D;
 80049ce:	490b      	ldr	r1, [pc, #44]	; (80049fc <stm32h7_displaySetPalette+0x64>)
}
 80049d0:	bc70      	pop	{r4, r5, r6}
    hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80049d2:	e9c3 2204 	strd	r2, r2, [r3, #16]
    hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 80049d6:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma2d.Instance          = DMA2D;
 80049da:	6019      	str	r1, [r3, #0]
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	240010ac 	.word	0x240010ac
 80049e4:	ff9bbc0f 	.word	0xff9bbc0f
 80049e8:	ff8bac0f 	.word	0xff8bac0f
 80049ec:	ff306230 	.word	0xff306230
 80049f0:	ff0f380f 	.word	0xff0f380f
 80049f4:	24011900 	.word	0x24011900
 80049f8:	240014ac 	.word	0x240014ac
 80049fc:	52001000 	.word	0x52001000

08004a00 <CopyBuffer>:
 * @param y The coordinate y position of the buffer on the display
 * @param xsize The x size of the buffer
 * @param ysize The y size of the buffer
 * @returns Nothing
 */
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a04:	b082      	sub	sp, #8
    uint32_t source      = (uint32_t)pSrc;

//    /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
//    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
//    hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
    hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004a06:	4c32      	ldr	r4, [pc, #200]	; (8004ad0 <CopyBuffer+0xd0>)
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004a08:	4680      	mov	r8, r0
 8004a0a:	460e      	mov	r6, r1
 8004a0c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
//    hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
//
//    hdma2d.Instance          = DMA2D;

    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK){
 8004a10:	4620      	mov	r0, r4
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004a12:	4617      	mov	r7, r2
 8004a14:	469a      	mov	sl, r3
    hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004a16:	f5c9 7548 	rsb	r5, r9, #800	; 0x320
 8004a1a:	60e5      	str	r5, [r4, #12]
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004a1c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK){
 8004a20:	f003 f806 	bl	8007a30 <HAL_DMA2D_Init>
 8004a24:	b110      	cbz	r0, 8004a2c <CopyBuffer+0x2c>
                   HAL_DMA2D_PollForTransfer(&hdma2d, 10);
                }
            }
        }
    }
}
 8004a26:	b002      	add	sp, #8
 8004a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK){
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f003 f920 	bl	8007c74 <HAL_DMA2D_ConfigLayer>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d1f6      	bne.n	8004a26 <CopyBuffer+0x26>
            if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <CopyBuffer+0xd4>)
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	9200      	str	r2, [sp, #0]
 8004a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a42:	f003 f853 	bl	8007aec <HAL_DMA2D_CLUTLoad>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d1ed      	bne.n	8004a26 <CopyBuffer+0x26>
                HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004a4a:	210a      	movs	r1, #10
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f003 f88b 	bl	8007b68 <HAL_DMA2D_PollForTransfer>
    uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a52:	f44f 7248 	mov.w	r2, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a56:	464b      	mov	r3, r9
 8004a58:	4641      	mov	r1, r8
    uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a5a:	fb02 720a 	mla	r2, r2, sl, r7
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a5e:	4620      	mov	r0, r4
 8004a60:	9500      	str	r5, [sp, #0]
 8004a62:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004a66:	f003 f825 	bl	8007ab4 <HAL_DMA2D_Start>
 8004a6a:	b338      	cbz	r0, 8004abc <CopyBuffer+0xbc>
                ++y;
 8004a6c:	f10a 0201 	add.w	r2, sl, #1
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a70:	f44f 7448 	mov.w	r4, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a74:	464b      	mov	r3, r9
 8004a76:	4641      	mov	r1, r8
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a78:	b292      	uxth	r2, r2
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a7a:	4815      	ldr	r0, [pc, #84]	; (8004ad0 <CopyBuffer+0xd0>)
 8004a7c:	9500      	str	r5, [sp, #0]
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a7e:	fb04 7202 	mla	r2, r4, r2, r7
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a82:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004a86:	f003 f815 	bl	8007ab4 <HAL_DMA2D_Start>
 8004a8a:	b1e0      	cbz	r0, 8004ac6 <CopyBuffer+0xc6>
                ++y;
 8004a8c:	f10a 0202 	add.w	r2, sl, #2
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a90:	f44f 7448 	mov.w	r4, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a94:	464b      	mov	r3, r9
 8004a96:	4641      	mov	r1, r8
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a98:	b292      	uxth	r2, r2
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004a9a:	480d      	ldr	r0, [pc, #52]	; (8004ad0 <CopyBuffer+0xd0>)
 8004a9c:	9500      	str	r5, [sp, #0]
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004a9e:	fb04 7202 	mla	r2, r4, r2, r7
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004aa2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004aa6:	f003 f805 	bl	8007ab4 <HAL_DMA2D_Start>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d1bb      	bne.n	8004a26 <CopyBuffer+0x26>
                   HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004aae:	210a      	movs	r1, #10
 8004ab0:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <CopyBuffer+0xd0>)
}
 8004ab2:	b002      	add	sp, #8
 8004ab4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                   HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004ab8:	f003 b856 	b.w	8007b68 <HAL_DMA2D_PollForTransfer>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004abc:	4620      	mov	r0, r4
 8004abe:	210a      	movs	r1, #10
 8004ac0:	f003 f852 	bl	8007b68 <HAL_DMA2D_PollForTransfer>
 8004ac4:	e7d2      	b.n	8004a6c <CopyBuffer+0x6c>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004ac6:	210a      	movs	r1, #10
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <CopyBuffer+0xd0>)
 8004aca:	f003 f84d 	bl	8007b68 <HAL_DMA2D_PollForTransfer>
 8004ace:	e7dd      	b.n	8004a8c <CopyBuffer+0x8c>
 8004ad0:	240014ac 	.word	0x240014ac
 8004ad4:	24011900 	.word	0x24011900

08004ad8 <displayFrameBuffer>:
 * @brief Copies the line buffer to the frame buffer while converting from L8 color to RGB8888 through use of DMA2D
 * @param gb_line line buffer
 * @param scaleAmount Up-scaling amount
 * @returns Nothing
 */
void displayFrameBuffer(uint8_t* gb_line, uint8_t scaleAmount, uint8_t ly){
 8004ad8:	b530      	push	{r4, r5, lr}
 8004ada:	4613      	mov	r3, r2
	CopyBuffer((uint32_t *) gb_line, (uint32_t *)Buffers[0], 160, (480 - (144*3))/2 + (ly * scaleAmount), 160 * scaleAmount, 1);
 8004adc:	460c      	mov	r4, r1
void displayFrameBuffer(uint8_t* gb_line, uint8_t scaleAmount, uint8_t ly){
 8004ade:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_line, (uint32_t *)Buffers[0], 160, (480 - (144*3))/2 + (ly * scaleAmount), 160 * scaleAmount, 1);
 8004ae0:	2501      	movs	r5, #1
 8004ae2:	fb03 f304 	mul.w	r3, r3, r4
 8004ae6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004aea:	22a0      	movs	r2, #160	; 0xa0
 8004aec:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004af0:	3318      	adds	r3, #24
 8004af2:	0164      	lsls	r4, r4, #5
 8004af4:	9501      	str	r5, [sp, #4]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	9400      	str	r4, [sp, #0]
 8004afa:	f7ff ff81 	bl	8004a00 <CopyBuffer>
}
 8004afe:	b003      	add	sp, #12
 8004b00:	bd30      	pop	{r4, r5, pc}
 8004b02:	bf00      	nop

08004b04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_MspInit+0x20>)
{
 8004b06:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b08:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004b0c:	f042 0202 	orr.w	r2, r2, #2
 8004b10:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b20:	b002      	add	sp, #8
 8004b22:	4770      	bx	lr
 8004b24:	58024400 	.word	0x58024400

08004b28 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004b28:	4938      	ldr	r1, [pc, #224]	; (8004c0c <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8004b2c:	6802      	ldr	r2, [r0, #0]
{
 8004b2e:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8004b30:	428a      	cmp	r2, r1
{
 8004b32:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004b38:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b3c:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8004b3e:	d004      	beq.n	8004b4a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8004b40:	4933      	ldr	r1, [pc, #204]	; (8004c10 <HAL_ADC_MspInit+0xe8>)
 8004b42:	428a      	cmp	r2, r1
 8004b44:	d026      	beq.n	8004b94 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004b46:	b00a      	add	sp, #40	; 0x28
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004b4a:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004b4c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004b50:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004b54:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004b56:	f042 0220 	orr.w	r2, r2, #32
 8004b5a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004b5e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004b62:	f002 0220 	and.w	r2, r2, #32
 8004b66:	9200      	str	r2, [sp, #0]
 8004b68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004b82:	f001 fd0f 	bl	80065a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8004b86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	f001 fd0a 	bl	80065a4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004b90:	b00a      	add	sp, #40	; 0x28
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8004b96:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b9a:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004b9c:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004b9e:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004ba2:	481d      	ldr	r0, [pc, #116]	; (8004c18 <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004ba4:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8004ba8:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004bac:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004bb0:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8004bb4:	9402      	str	r4, [sp, #8]
 8004bb6:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bb8:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004bbc:	f044 0420 	orr.w	r4, r4, #32
 8004bc0:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004bc4:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004bc8:	f004 0420 	and.w	r4, r4, #32
 8004bcc:	9403      	str	r4, [sp, #12]
 8004bce:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bd0:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004bd4:	f044 0404 	orr.w	r4, r4, #4
 8004bd8:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004bdc:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be2:	f002 0204 	and.w	r2, r2, #4
 8004be6:	9204      	str	r2, [sp, #16]
 8004be8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bea:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004bee:	f003 fc73 	bl	80084d8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004bf2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	f001 fcd4 	bl	80065a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004bfc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004c00:	4608      	mov	r0, r1
 8004c02:	f001 fccf 	bl	80065a4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004c06:	b00a      	add	sp, #40	; 0x28
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	58026000 	.word	0x58026000
 8004c14:	58024400 	.word	0x58024400
 8004c18:	58021400 	.word	0x58021400

08004c1c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004c20:	4c05      	ldr	r4, [pc, #20]	; (8004c38 <HardFault_Handler+0x18>)
{
 8004c22:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004c24:	4620      	mov	r0, r4
 8004c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c2a:	f003 fd77 	bl	800871c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c32:	f001 fc9f 	bl	8006574 <HAL_Delay>
  while (1)
 8004c36:	e7f5      	b.n	8004c24 <HardFault_Handler+0x4>
 8004c38:	58022000 	.word	0x58022000

08004c3c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <MemManage_Handler>
 8004c3e:	bf00      	nop

08004c40 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004c40:	e7fe      	b.n	8004c40 <BusFault_Handler>
 8004c42:	bf00      	nop

08004c44 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004c44:	e7fe      	b.n	8004c44 <UsageFault_Handler>
 8004c46:	bf00      	nop

08004c48 <SVC_Handler>:
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <DebugMon_Handler>:
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <PendSV_Handler>:
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004c54:	f001 bc7c 	b.w	8006550 <HAL_IncTick>

08004c58 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <LTDC_IRQHandler+0x8>)
 8004c5a:	f003 be93 	b.w	8008984 <HAL_LTDC_IRQHandler>
 8004c5e:	bf00      	nop
 8004c60:	24011a3c 	.word	0x24011a3c

08004c64 <LTDC_ER_IRQHandler>:
 8004c64:	f7ff bff8 	b.w	8004c58 <LTDC_IRQHandler>

08004c68 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <DSI_IRQHandler+0x8>)
 8004c6a:	f003 b957 	b.w	8007f1c <HAL_DSI_IRQHandler>
 8004c6e:	bf00      	nop
 8004c70:	24011b00 	.word	0x24011b00

08004c74 <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  BSP_AUDIO_OUT_IRQHandler(0);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f000 bddd 	b.w	8005834 <BSP_AUDIO_OUT_IRQHandler>
 8004c7a:	bf00      	nop

08004c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c80:	f7fb fb2a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c86:	490d      	ldr	r1, [pc, #52]	; (8004cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c88:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c8c:	e002      	b.n	8004c94 <LoopCopyDataInit>

08004c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c92:	3304      	adds	r3, #4

08004c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c98:	d3f9      	bcc.n	8004c8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c9c:	4c0a      	ldr	r4, [pc, #40]	; (8004cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ca0:	e001      	b.n	8004ca6 <LoopFillZerobss>

08004ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ca4:	3204      	adds	r2, #4

08004ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ca8:	d3fb      	bcc.n	8004ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004caa:	f006 f9d7 	bl	800b05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cae:	f7ff fc93 	bl	80045d8 <main>
  bx  lr
 8004cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cb4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004cb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cbc:	2400107c 	.word	0x2400107c
  ldr r2, =_sidata
 8004cc0:	08064e80 	.word	0x08064e80
  ldr r2, =_sbss
 8004cc4:	2400107c 	.word	0x2400107c
  ldr r4, =_ebss
 8004cc8:	24011bbc 	.word	0x24011bbc

08004ccc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ccc:	e7fe      	b.n	8004ccc <ADC3_IRQHandler>
	...

08004cd0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004cd2:	4c0e      	ldr	r4, [pc, #56]	; (8004d0c <IS42S32800J_ModeRegConfig+0x3c>)
 8004cd4:	2304      	movs	r3, #4
{
 8004cd6:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004cd8:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004cda:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004cdc:	69d7      	ldr	r7, [r2, #28]
 8004cde:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004ce2:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004ce4:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004ce6:	6955      	ldr	r5, [r2, #20]
 8004ce8:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004cea:	6995      	ldr	r5, [r2, #24]
 8004cec:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 8004cee:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8004cf4:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004cf6:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004cf8:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004cfa:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004cfc:	f005 ff2e 	bl	800ab5c <HAL_SDRAM_SendCommand>
 8004d00:	3800      	subs	r0, #0
 8004d02:	bf18      	it	ne
 8004d04:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d06:	4240      	negs	r0, r0
 8004d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	24001514 	.word	0x24001514

08004d10 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004d10:	680a      	ldr	r2, [r1, #0]
{
 8004d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004d14:	4c22      	ldr	r4, [pc, #136]	; (8004da0 <IS42S32800J_Init+0x90>)
 8004d16:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004d18:	2700      	movs	r7, #0
{
 8004d1a:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004d1c:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d1e:	4621      	mov	r1, r4
 8004d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004d24:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8004d26:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004d28:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004d2a:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d2c:	f005 ff16 	bl	800ab5c <HAL_SDRAM_SendCommand>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d132      	bne.n	8004d9a <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004d34:	f001 fc18 	bl	8006568 <HAL_GetTick>
 8004d38:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004d3a:	f001 fc15 	bl	8006568 <HAL_GetTick>
 8004d3e:	4287      	cmp	r7, r0
 8004d40:	d0fb      	beq.n	8004d3a <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004d42:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004d44:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8004d46:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004d48:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004d4a:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004d50:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d52:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8004d54:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d56:	4912      	ldr	r1, [pc, #72]	; (8004da0 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004d58:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d5a:	f005 feff 	bl	800ab5c <HAL_SDRAM_SendCommand>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	b9d8      	cbnz	r0, 8004d9a <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004d62:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8004d64:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8004d66:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8004d6c:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d6e:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8004d70:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d72:	490b      	ldr	r1, [pc, #44]	; (8004da0 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004d74:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004d76:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d78:	f005 fef0 	bl	800ab5c <HAL_SDRAM_SendCommand>
 8004d7c:	b968      	cbnz	r0, 8004d9a <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	f7ff ffa5 	bl	8004cd0 <IS42S32800J_ModeRegConfig>
 8004d86:	b940      	cbnz	r0, 8004d9a <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004d88:	68a9      	ldr	r1, [r5, #8]
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f005 ff06 	bl	800ab9c <HAL_SDRAM_ProgramRefreshRate>
 8004d90:	3800      	subs	r0, #0
 8004d92:	bf18      	it	ne
 8004d94:	2001      	movne	r0, #1
 8004d96:	4240      	negs	r0, r0
}
 8004d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da0:	24001514 	.word	0x24001514

08004da4 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop

08004dac <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004dac:	4b02      	ldr	r3, [pc, #8]	; (8004db8 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8004dae:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	600b      	str	r3, [r1, #0]
}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	24001524 	.word	0x24001524

08004dbc <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004dbc:	4b02      	ldr	r3, [pc, #8]	; (8004dc8 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8004dbe:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	600b      	str	r3, [r1, #0]
}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	24001524 	.word	0x24001524

08004dcc <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <OTM8009A_GetXSize+0x1c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	b123      	cbz	r3, 8004ddc <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8004dd2:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004dd6:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004dd8:	600b      	str	r3, [r1, #0]
}
 8004dda:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004ddc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004de0:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8004de2:	600b      	str	r3, [r1, #0]
}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	24001524 	.word	0x24001524

08004dec <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <OTM8009A_GetYSize+0x1c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	b123      	cbz	r3, 8004dfc <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004df2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004df6:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004df8:	600b      	str	r3, [r1, #0]
}
 8004dfa:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004dfc:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004e00:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004e02:	600b      	str	r3, [r1, #0]
}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	24001524 	.word	0x24001524

08004e0c <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop

08004e1c <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop

08004e2c <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop

08004e3c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004e3c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e3e:	6884      	ldr	r4, [r0, #8]
 8004e40:	8800      	ldrh	r0, [r0, #0]
 8004e42:	46a4      	mov	ip, r4
}
 8004e44:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e48:	4760      	bx	ip
 8004e4a:	bf00      	nop

08004e4c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e4c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e4e:	6844      	ldr	r4, [r0, #4]
 8004e50:	8800      	ldrh	r0, [r0, #0]
 8004e52:	46a4      	mov	ip, r4
}
 8004e54:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e58:	4760      	bx	ip
 8004e5a:	bf00      	nop

08004e5c <OTM8009A_Init>:
{
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e60:	2300      	movs	r3, #0
 8004e62:	f100 0710 	add.w	r7, r0, #16
{
 8004e66:	b082      	sub	sp, #8
 8004e68:	4680      	mov	r8, r0
 8004e6a:	4689      	mov	r9, r1
 8004e6c:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4ae0      	ldr	r2, [pc, #896]	; (80051f4 <OTM8009A_Init+0x398>)
 8004e72:	4638      	mov	r0, r7
 8004e74:	f000 fcd6 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e78:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e7a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e7c:	4ade      	ldr	r2, [pc, #888]	; (80051f8 <OTM8009A_Init+0x39c>)
 8004e7e:	21ff      	movs	r1, #255	; 0xff
 8004e80:	4638      	mov	r0, r7
 8004e82:	f000 fccf 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e88:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e8a:	4adc      	ldr	r2, [pc, #880]	; (80051fc <OTM8009A_Init+0x3a0>)
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4638      	mov	r0, r7
 8004e90:	f000 fcc8 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004e94:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004e96:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004e9a:	4ad9      	ldr	r2, [pc, #868]	; (8005200 <OTM8009A_Init+0x3a4>)
 8004e9c:	21ff      	movs	r1, #255	; 0xff
 8004e9e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ea0:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ea2:	f000 fcbf 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ea6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ea8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004eaa:	4ad4      	ldr	r2, [pc, #848]	; (80051fc <OTM8009A_Init+0x3a0>)
 8004eac:	4619      	mov	r1, r3
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f000 fcb8 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004eb4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004eb6:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4ad2      	ldr	r2, [pc, #840]	; (8005204 <OTM8009A_Init+0x3a8>)
 8004ebc:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ebe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f000 fcaf 	bl	8005824 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004ec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004eca:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004ecc:	4798      	blx	r3
 8004ece:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004ed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004ed4:	4798      	blx	r3
 8004ed6:	1b00      	subs	r0, r0, r4
 8004ed8:	2809      	cmp	r0, #9
 8004eda:	d9f9      	bls.n	8004ed0 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004edc:	2300      	movs	r3, #0
 8004ede:	4aca      	ldr	r2, [pc, #808]	; (8005208 <OTM8009A_Init+0x3ac>)
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f000 fc9e 	bl	8005824 <otm8009a_write_reg>
 8004ee8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004eea:	2300      	movs	r3, #0
 8004eec:	4ac7      	ldr	r2, [pc, #796]	; (800520c <OTM8009A_Init+0x3b0>)
 8004eee:	21c4      	movs	r1, #196	; 0xc4
 8004ef0:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004ef2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004ef4:	f000 fc96 	bl	8005824 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004ef8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004efc:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004efe:	4798      	blx	r3
 8004f00:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f06:	4798      	blx	r3
 8004f08:	1b40      	subs	r0, r0, r5
 8004f0a:	2809      	cmp	r0, #9
 8004f0c:	d9f9      	bls.n	8004f02 <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4abf      	ldr	r2, [pc, #764]	; (8005210 <OTM8009A_Init+0x3b4>)
 8004f12:	4638      	mov	r0, r7
 8004f14:	4619      	mov	r1, r3
 8004f16:	f000 fc85 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f1a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004f1c:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f1e:	4abd      	ldr	r2, [pc, #756]	; (8005214 <OTM8009A_Init+0x3b8>)
 8004f20:	21c5      	movs	r1, #197	; 0xc5
 8004f22:	4638      	mov	r0, r7
 8004f24:	f000 fc7e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004f2a:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4ab9      	ldr	r2, [pc, #740]	; (8005218 <OTM8009A_Init+0x3bc>)
 8004f32:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004f34:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f36:	f000 fc75 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f3a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f3c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f3e:	4ab7      	ldr	r2, [pc, #732]	; (800521c <OTM8009A_Init+0x3c0>)
 8004f40:	21c5      	movs	r1, #197	; 0xc5
 8004f42:	4638      	mov	r0, r7
 8004f44:	f000 fc6e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004f4a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f4c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4ab3      	ldr	r2, [pc, #716]	; (8005220 <OTM8009A_Init+0x3c4>)
 8004f52:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004f54:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f56:	f000 fc65 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f5a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f5e:	4ab1      	ldr	r2, [pc, #708]	; (8005224 <OTM8009A_Init+0x3c8>)
 8004f60:	21c0      	movs	r1, #192	; 0xc0
 8004f62:	4638      	mov	r0, r7
 8004f64:	f000 fc5e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004f6a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f6c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4aa0      	ldr	r2, [pc, #640]	; (80051f4 <OTM8009A_Init+0x398>)
 8004f72:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004f74:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f76:	f000 fc55 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f7e:	4aaa      	ldr	r2, [pc, #680]	; (8005228 <OTM8009A_Init+0x3cc>)
 8004f80:	21d9      	movs	r1, #217	; 0xd9
 8004f82:	4638      	mov	r0, r7
 8004f84:	f000 fc4e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f8a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4aa6      	ldr	r2, [pc, #664]	; (800522c <OTM8009A_Init+0x3d0>)
 8004f92:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004f94:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f96:	f000 fc45 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004f9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004f9e:	4aa4      	ldr	r2, [pc, #656]	; (8005230 <OTM8009A_Init+0x3d4>)
 8004fa0:	21c1      	movs	r1, #193	; 0xc1
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f000 fc3e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004faa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004fac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4aa0      	ldr	r2, [pc, #640]	; (8005234 <OTM8009A_Init+0x3d8>)
 8004fb2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004fb4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fb6:	f000 fc35 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fbc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fbe:	4a9e      	ldr	r2, [pc, #632]	; (8005238 <OTM8009A_Init+0x3dc>)
 8004fc0:	21c1      	movs	r1, #193	; 0xc1
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f000 fc2e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004fca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fcc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4a9a      	ldr	r2, [pc, #616]	; (800523c <OTM8009A_Init+0x3e0>)
 8004fd2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004fd4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fd6:	f000 fc25 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004fda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fdc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004fde:	4a98      	ldr	r2, [pc, #608]	; (8005240 <OTM8009A_Init+0x3e4>)
 8004fe0:	21c5      	movs	r1, #197	; 0xc5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f000 fc1e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004fe8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004fea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004fec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4a94      	ldr	r2, [pc, #592]	; (8005244 <OTM8009A_Init+0x3e8>)
 8004ff2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ff4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ff6:	f000 fc15 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ffa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ffc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ffe:	4a87      	ldr	r2, [pc, #540]	; (800521c <OTM8009A_Init+0x3c0>)
 8005000:	21c5      	movs	r1, #197	; 0xc5
 8005002:	4638      	mov	r0, r7
 8005004:	f000 fc0e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005008:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800500a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800500c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800500e:	4619      	mov	r1, r3
 8005010:	4a78      	ldr	r2, [pc, #480]	; (80051f4 <OTM8009A_Init+0x398>)
 8005012:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005014:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005016:	f000 fc05 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800501a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800501c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800501e:	4a8a      	ldr	r2, [pc, #552]	; (8005248 <OTM8009A_Init+0x3ec>)
 8005020:	21d8      	movs	r1, #216	; 0xd8
 8005022:	4638      	mov	r0, r7
 8005024:	f000 fbfe 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005028:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800502a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800502c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800502e:	4619      	mov	r1, r3
 8005030:	4a86      	ldr	r2, [pc, #536]	; (800524c <OTM8009A_Init+0x3f0>)
 8005032:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005034:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005036:	f000 fbf5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800503a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800503c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800503e:	4a84      	ldr	r2, [pc, #528]	; (8005250 <OTM8009A_Init+0x3f4>)
 8005040:	21c5      	movs	r1, #197	; 0xc5
 8005042:	4638      	mov	r0, r7
 8005044:	f000 fbee 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005048:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800504a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800504c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800504e:	4619      	mov	r1, r3
 8005050:	4a80      	ldr	r2, [pc, #512]	; (8005254 <OTM8009A_Init+0x3f8>)
 8005052:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005054:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005056:	f000 fbe5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800505a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800505c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800505e:	4a7e      	ldr	r2, [pc, #504]	; (8005258 <OTM8009A_Init+0x3fc>)
 8005060:	21c0      	movs	r1, #192	; 0xc0
 8005062:	4638      	mov	r0, r7
 8005064:	f000 fbde 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005068:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800506a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800506c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800506e:	4619      	mov	r1, r3
 8005070:	4a7a      	ldr	r2, [pc, #488]	; (800525c <OTM8009A_Init+0x400>)
 8005072:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005074:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005076:	f000 fbd5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800507a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800507c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800507e:	4a78      	ldr	r2, [pc, #480]	; (8005260 <OTM8009A_Init+0x404>)
 8005080:	21c5      	movs	r1, #197	; 0xc5
 8005082:	4638      	mov	r0, r7
 8005084:	f000 fbce 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005088:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800508a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800508c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800508e:	4619      	mov	r1, r3
 8005090:	4a66      	ldr	r2, [pc, #408]	; (800522c <OTM8009A_Init+0x3d0>)
 8005092:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005094:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005096:	f000 fbc5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800509a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800509c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800509e:	4a71      	ldr	r2, [pc, #452]	; (8005264 <OTM8009A_Init+0x408>)
 80050a0:	21c4      	movs	r1, #196	; 0xc4
 80050a2:	4638      	mov	r0, r7
 80050a4:	f000 fbbe 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050aa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80050ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050ae:	4619      	mov	r1, r3
 80050b0:	4a60      	ldr	r2, [pc, #384]	; (8005234 <OTM8009A_Init+0x3d8>)
 80050b2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80050b4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050b6:	f000 fbb5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050be:	4a6a      	ldr	r2, [pc, #424]	; (8005268 <OTM8009A_Init+0x40c>)
 80050c0:	21c1      	movs	r1, #193	; 0xc1
 80050c2:	4638      	mov	r0, r7
 80050c4:	f000 fbae 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80050ca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050cc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050ce:	4619      	mov	r1, r3
 80050d0:	4a66      	ldr	r2, [pc, #408]	; (800526c <OTM8009A_Init+0x410>)
 80050d2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80050d4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050d6:	f000 fba5 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050da:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050de:	4a64      	ldr	r2, [pc, #400]	; (8005270 <OTM8009A_Init+0x414>)
 80050e0:	21b3      	movs	r1, #179	; 0xb3
 80050e2:	4638      	mov	r0, r7
 80050e4:	f000 fb9e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80050ea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050ec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050ee:	4619      	mov	r1, r3
 80050f0:	4a42      	ldr	r2, [pc, #264]	; (80051fc <OTM8009A_Init+0x3a0>)
 80050f2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80050f4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050f6:	f000 fb95 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80050fa:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80050fe:	4a5d      	ldr	r2, [pc, #372]	; (8005274 <OTM8009A_Init+0x418>)
 8005100:	21ce      	movs	r1, #206	; 0xce
 8005102:	4638      	mov	r0, r7
 8005104:	f000 fb8e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005108:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800510a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800510c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800510e:	4619      	mov	r1, r3
 8005110:	4a59      	ldr	r2, [pc, #356]	; (8005278 <OTM8009A_Init+0x41c>)
 8005112:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005114:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005116:	f000 fb85 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800511a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800511c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800511e:	4a57      	ldr	r2, [pc, #348]	; (800527c <OTM8009A_Init+0x420>)
 8005120:	21ce      	movs	r1, #206	; 0xce
 8005122:	4638      	mov	r0, r7
 8005124:	f000 fb7e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005128:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800512a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800512c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800512e:	4619      	mov	r1, r3
 8005130:	4a53      	ldr	r2, [pc, #332]	; (8005280 <OTM8009A_Init+0x424>)
 8005132:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005134:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005136:	f000 fb75 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800513a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800513c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800513e:	4a51      	ldr	r2, [pc, #324]	; (8005284 <OTM8009A_Init+0x428>)
 8005140:	21ce      	movs	r1, #206	; 0xce
 8005142:	4638      	mov	r0, r7
 8005144:	f000 fb6e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005148:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800514a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800514c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800514e:	4619      	mov	r1, r3
 8005150:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <OTM8009A_Init+0x42c>)
 8005152:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005154:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005156:	f000 fb65 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800515a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800515c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800515e:	4a4b      	ldr	r2, [pc, #300]	; (800528c <OTM8009A_Init+0x430>)
 8005160:	21cf      	movs	r1, #207	; 0xcf
 8005162:	4638      	mov	r0, r7
 8005164:	f000 fb5e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005168:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800516a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800516c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800516e:	4619      	mov	r1, r3
 8005170:	4a47      	ldr	r2, [pc, #284]	; (8005290 <OTM8009A_Init+0x434>)
 8005172:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005174:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005176:	f000 fb55 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800517a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800517c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800517e:	4a45      	ldr	r2, [pc, #276]	; (8005294 <OTM8009A_Init+0x438>)
 8005180:	21cf      	movs	r1, #207	; 0xcf
 8005182:	4638      	mov	r0, r7
 8005184:	f000 fb4e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005188:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800518a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800518c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800518e:	4619      	mov	r1, r3
 8005190:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <OTM8009A_Init+0x3a0>)
 8005192:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005194:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005196:	f000 fb45 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800519a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800519c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800519e:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <OTM8009A_Init+0x43c>)
 80051a0:	21cb      	movs	r1, #203	; 0xcb
 80051a2:	4638      	mov	r0, r7
 80051a4:	f000 fb3e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051aa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80051ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051ae:	4619      	mov	r1, r3
 80051b0:	4a3a      	ldr	r2, [pc, #232]	; (800529c <OTM8009A_Init+0x440>)
 80051b2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80051b4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051b6:	f000 fb35 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80051ba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80051be:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <OTM8009A_Init+0x444>)
 80051c0:	21cb      	movs	r1, #203	; 0xcb
 80051c2:	4638      	mov	r0, r7
 80051c4:	f000 fb2e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051ca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80051cc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051ce:	4619      	mov	r1, r3
 80051d0:	4a29      	ldr	r2, [pc, #164]	; (8005278 <OTM8009A_Init+0x41c>)
 80051d2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80051d4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051d6:	f000 fb25 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051da:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051de:	4a31      	ldr	r2, [pc, #196]	; (80052a4 <OTM8009A_Init+0x448>)
 80051e0:	21cb      	movs	r1, #203	; 0xcb
 80051e2:	4638      	mov	r0, r7
 80051e4:	f000 fb1e 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051ea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80051ec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051ee:	4619      	mov	r1, r3
 80051f0:	e05a      	b.n	80052a8 <OTM8009A_Init+0x44c>
 80051f2:	bf00      	nop
 80051f4:	08063361 	.word	0x08063361
 80051f8:	08063230 	.word	0x08063230
 80051fc:	08063362 	.word	0x08063362
 8005200:	080632bc 	.word	0x080632bc
 8005204:	08063363 	.word	0x08063363
 8005208:	08063364 	.word	0x08063364
 800520c:	08063365 	.word	0x08063365
 8005210:	08063366 	.word	0x08063366
 8005214:	08063367 	.word	0x08063367
 8005218:	08063368 	.word	0x08063368
 800521c:	08063369 	.word	0x08063369
 8005220:	0806336a 	.word	0x0806336a
 8005224:	0806336b 	.word	0x0806336b
 8005228:	0806336c 	.word	0x0806336c
 800522c:	0806336d 	.word	0x0806336d
 8005230:	0806336e 	.word	0x0806336e
 8005234:	0806336f 	.word	0x0806336f
 8005238:	08063370 	.word	0x08063370
 800523c:	08063371 	.word	0x08063371
 8005240:	08063372 	.word	0x08063372
 8005244:	08063373 	.word	0x08063373
 8005248:	08063330 	.word	0x08063330
 800524c:	08063374 	.word	0x08063374
 8005250:	08063375 	.word	0x08063375
 8005254:	08063376 	.word	0x08063376
 8005258:	08063377 	.word	0x08063377
 800525c:	08063378 	.word	0x08063378
 8005260:	08063379 	.word	0x08063379
 8005264:	0806337a 	.word	0x0806337a
 8005268:	0806337b 	.word	0x0806337b
 800526c:	0806337c 	.word	0x0806337c
 8005270:	08063334 	.word	0x08063334
 8005274:	08063338 	.word	0x08063338
 8005278:	0806337d 	.word	0x0806337d
 800527c:	08063340 	.word	0x08063340
 8005280:	0806337e 	.word	0x0806337e
 8005284:	08063350 	.word	0x08063350
 8005288:	0806337f 	.word	0x0806337f
 800528c:	08063234 	.word	0x08063234
 8005290:	08063380 	.word	0x08063380
 8005294:	0806338d 	.word	0x0806338d
 8005298:	08063240 	.word	0x08063240
 800529c:	08063381 	.word	0x08063381
 80052a0:	0806324c 	.word	0x0806324c
 80052a4:	0806325c 	.word	0x0806325c
 80052a8:	4ad1      	ldr	r2, [pc, #836]	; (80055f0 <OTM8009A_Init+0x794>)
 80052aa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80052ac:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052ae:	f000 fab9 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80052b2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80052b6:	4acf      	ldr	r2, [pc, #828]	; (80055f4 <OTM8009A_Init+0x798>)
 80052b8:	21cb      	movs	r1, #203	; 0xcb
 80052ba:	4638      	mov	r0, r7
 80052bc:	f000 fab2 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80052c2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80052c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052c6:	4619      	mov	r1, r3
 80052c8:	4acb      	ldr	r2, [pc, #812]	; (80055f8 <OTM8009A_Init+0x79c>)
 80052ca:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80052cc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052ce:	f000 faa9 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80052d2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80052d6:	4ac9      	ldr	r2, [pc, #804]	; (80055fc <OTM8009A_Init+0x7a0>)
 80052d8:	21cb      	movs	r1, #203	; 0xcb
 80052da:	4638      	mov	r0, r7
 80052dc:	f000 faa2 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80052e2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80052e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052e6:	4619      	mov	r1, r3
 80052e8:	4ac5      	ldr	r2, [pc, #788]	; (8005600 <OTM8009A_Init+0x7a4>)
 80052ea:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80052ec:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052ee:	f000 fa99 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80052f2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80052f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80052f6:	4ac3      	ldr	r2, [pc, #780]	; (8005604 <OTM8009A_Init+0x7a8>)
 80052f8:	21cb      	movs	r1, #203	; 0xcb
 80052fa:	4638      	mov	r0, r7
 80052fc:	f000 fa92 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005300:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005302:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005304:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005306:	4619      	mov	r1, r3
 8005308:	4abf      	ldr	r2, [pc, #764]	; (8005608 <OTM8009A_Init+0x7ac>)
 800530a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800530c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800530e:	f000 fa89 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005312:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005314:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005316:	4abd      	ldr	r2, [pc, #756]	; (800560c <OTM8009A_Init+0x7b0>)
 8005318:	21cb      	movs	r1, #203	; 0xcb
 800531a:	4638      	mov	r0, r7
 800531c:	f000 fa82 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005320:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005322:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005324:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005326:	4619      	mov	r1, r3
 8005328:	4ab9      	ldr	r2, [pc, #740]	; (8005610 <OTM8009A_Init+0x7b4>)
 800532a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800532c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800532e:	f000 fa79 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005332:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005334:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005336:	4ab7      	ldr	r2, [pc, #732]	; (8005614 <OTM8009A_Init+0x7b8>)
 8005338:	21cb      	movs	r1, #203	; 0xcb
 800533a:	4638      	mov	r0, r7
 800533c:	f000 fa72 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005340:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005342:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005344:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005346:	4619      	mov	r1, r3
 8005348:	4ab3      	ldr	r2, [pc, #716]	; (8005618 <OTM8009A_Init+0x7bc>)
 800534a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800534c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800534e:	f000 fa69 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005352:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005354:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <OTM8009A_Init+0x7c0>)
 8005358:	21cc      	movs	r1, #204	; 0xcc
 800535a:	4638      	mov	r0, r7
 800535c:	f000 fa62 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005360:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005362:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005364:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005366:	4619      	mov	r1, r3
 8005368:	4aad      	ldr	r2, [pc, #692]	; (8005620 <OTM8009A_Init+0x7c4>)
 800536a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800536c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800536e:	f000 fa59 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005372:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005374:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005376:	4aab      	ldr	r2, [pc, #684]	; (8005624 <OTM8009A_Init+0x7c8>)
 8005378:	21cc      	movs	r1, #204	; 0xcc
 800537a:	4638      	mov	r0, r7
 800537c:	f000 fa52 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005380:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005382:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005384:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005386:	4619      	mov	r1, r3
 8005388:	4aa7      	ldr	r2, [pc, #668]	; (8005628 <OTM8009A_Init+0x7cc>)
 800538a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800538c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800538e:	f000 fa49 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005392:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005394:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005396:	4aa5      	ldr	r2, [pc, #660]	; (800562c <OTM8009A_Init+0x7d0>)
 8005398:	21cc      	movs	r1, #204	; 0xcc
 800539a:	4638      	mov	r0, r7
 800539c:	f000 fa42 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80053a2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80053a4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053a6:	4619      	mov	r1, r3
 80053a8:	4a91      	ldr	r2, [pc, #580]	; (80055f0 <OTM8009A_Init+0x794>)
 80053aa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80053ac:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053ae:	f000 fa39 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80053b2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80053b6:	4a9e      	ldr	r2, [pc, #632]	; (8005630 <OTM8009A_Init+0x7d4>)
 80053b8:	21cc      	movs	r1, #204	; 0xcc
 80053ba:	4638      	mov	r0, r7
 80053bc:	f000 fa32 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053c2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80053c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053c6:	4619      	mov	r1, r3
 80053c8:	4a8b      	ldr	r2, [pc, #556]	; (80055f8 <OTM8009A_Init+0x79c>)
 80053ca:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80053cc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053ce:	f000 fa29 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80053d2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80053d6:	4a97      	ldr	r2, [pc, #604]	; (8005634 <OTM8009A_Init+0x7d8>)
 80053d8:	21cc      	movs	r1, #204	; 0xcc
 80053da:	4638      	mov	r0, r7
 80053dc:	f000 fa22 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053e2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80053e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053e6:	4619      	mov	r1, r3
 80053e8:	4a85      	ldr	r2, [pc, #532]	; (8005600 <OTM8009A_Init+0x7a4>)
 80053ea:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80053ec:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053ee:	f000 fa19 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80053f2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80053f6:	4a90      	ldr	r2, [pc, #576]	; (8005638 <OTM8009A_Init+0x7dc>)
 80053f8:	21cc      	movs	r1, #204	; 0xcc
 80053fa:	4638      	mov	r0, r7
 80053fc:	f000 fa12 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005400:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005402:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005404:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005406:	4619      	mov	r1, r3
 8005408:	4a8c      	ldr	r2, [pc, #560]	; (800563c <OTM8009A_Init+0x7e0>)
 800540a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800540c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800540e:	f000 fa09 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005412:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005414:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005416:	4a8a      	ldr	r2, [pc, #552]	; (8005640 <OTM8009A_Init+0x7e4>)
 8005418:	21c5      	movs	r1, #197	; 0xc5
 800541a:	4638      	mov	r0, r7
 800541c:	f000 fa02 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005420:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005422:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005424:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005426:	4619      	mov	r1, r3
 8005428:	4a86      	ldr	r2, [pc, #536]	; (8005644 <OTM8009A_Init+0x7e8>)
 800542a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800542c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800542e:	f000 f9f9 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005432:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005434:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005436:	4a84      	ldr	r2, [pc, #528]	; (8005648 <OTM8009A_Init+0x7ec>)
 8005438:	21f5      	movs	r1, #245	; 0xf5
 800543a:	4638      	mov	r0, r7
 800543c:	f000 f9f2 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005440:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005442:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005444:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005446:	4619      	mov	r1, r3
 8005448:	4a80      	ldr	r2, [pc, #512]	; (800564c <OTM8009A_Init+0x7f0>)
 800544a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800544c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800544e:	f000 f9e9 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005452:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005454:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005456:	4a7e      	ldr	r2, [pc, #504]	; (8005650 <OTM8009A_Init+0x7f4>)
 8005458:	21c6      	movs	r1, #198	; 0xc6
 800545a:	4638      	mov	r0, r7
 800545c:	f000 f9e2 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005460:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005462:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005464:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005466:	4619      	mov	r1, r3
 8005468:	4a7a      	ldr	r2, [pc, #488]	; (8005654 <OTM8009A_Init+0x7f8>)
 800546a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800546c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800546e:	f000 f9d9 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005472:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005474:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005476:	4a78      	ldr	r2, [pc, #480]	; (8005658 <OTM8009A_Init+0x7fc>)
 8005478:	21ff      	movs	r1, #255	; 0xff
 800547a:	4638      	mov	r0, r7
 800547c:	f000 f9d2 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005480:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005482:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005484:	4a73      	ldr	r2, [pc, #460]	; (8005654 <OTM8009A_Init+0x7f8>)
 8005486:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005488:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800548a:	4638      	mov	r0, r7
 800548c:	f000 f9ca 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005490:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005492:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005494:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005496:	4619      	mov	r1, r3
 8005498:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <OTM8009A_Init+0x7f8>)
 800549a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800549c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800549e:	f000 f9c1 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80054a2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054a4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80054a6:	4a6d      	ldr	r2, [pc, #436]	; (800565c <OTM8009A_Init+0x800>)
 80054a8:	21e1      	movs	r1, #225	; 0xe1
 80054aa:	4638      	mov	r0, r7
 80054ac:	f000 f9ba 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054b2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80054b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054b6:	4619      	mov	r1, r3
 80054b8:	4a66      	ldr	r2, [pc, #408]	; (8005654 <OTM8009A_Init+0x7f8>)
 80054ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80054bc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054be:	f000 f9b1 	bl	8005824 <otm8009a_write_reg>
 80054c2:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80054c4:	2310      	movs	r3, #16
 80054c6:	4a66      	ldr	r2, [pc, #408]	; (8005660 <OTM8009A_Init+0x804>)
 80054c8:	21e2      	movs	r1, #226	; 0xe2
 80054ca:	4638      	mov	r0, r7
 80054cc:	f000 f9aa 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054d0:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80054d2:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80054d4:	2300      	movs	r3, #0
 80054d6:	4a63      	ldr	r2, [pc, #396]	; (8005664 <OTM8009A_Init+0x808>)
 80054d8:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80054da:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80054dc:	4638      	mov	r0, r7
 80054de:	f000 f9a1 	bl	8005824 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80054e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80054e6:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80054e8:	4798      	blx	r3
 80054ea:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80054ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054f0:	4798      	blx	r3
 80054f2:	1b40      	subs	r0, r0, r5
 80054f4:	2877      	cmp	r0, #119	; 0x77
 80054f6:	d9f9      	bls.n	80054ec <OTM8009A_Init+0x690>
  switch(ColorCoding)
 80054f8:	f1b9 0f00 	cmp.w	r9, #0
 80054fc:	d074      	beq.n	80055e8 <OTM8009A_Init+0x78c>
 80054fe:	f1b9 0f02 	cmp.w	r9, #2
 8005502:	d14f      	bne.n	80055a4 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005504:	2300      	movs	r3, #0
 8005506:	4a58      	ldr	r2, [pc, #352]	; (8005668 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005508:	213a      	movs	r1, #58	; 0x3a
 800550a:	4638      	mov	r0, r7
 800550c:	f000 f98a 	bl	8005824 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005510:	4d56      	ldr	r5, [pc, #344]	; (800566c <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005512:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005516:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005518:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800551c:	d046      	beq.n	80055ac <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800551e:	2300      	movs	r3, #0
 8005520:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005522:	2300      	movs	r3, #0
 8005524:	4a52      	ldr	r2, [pc, #328]	; (8005670 <OTM8009A_Init+0x814>)
 8005526:	2151      	movs	r1, #81	; 0x51
 8005528:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800552a:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800552c:	f000 f97a 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005530:	4a50      	ldr	r2, [pc, #320]	; (8005674 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005532:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005536:	4653      	mov	r3, sl
 8005538:	2153      	movs	r1, #83	; 0x53
 800553a:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800553c:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005540:	f000 f970 	bl	8005824 <otm8009a_write_reg>
 8005544:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005546:	4653      	mov	r3, sl
 8005548:	4a4b      	ldr	r2, [pc, #300]	; (8005678 <OTM8009A_Init+0x81c>)
 800554a:	2155      	movs	r1, #85	; 0x55
 800554c:	4638      	mov	r0, r7
 800554e:	f000 f969 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005552:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005554:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005556:	4653      	mov	r3, sl
 8005558:	4a48      	ldr	r2, [pc, #288]	; (800567c <OTM8009A_Init+0x820>)
 800555a:	215e      	movs	r1, #94	; 0x5e
 800555c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800555e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005560:	f000 f960 	bl	8005824 <otm8009a_write_reg>
 8005564:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005566:	4653      	mov	r3, sl
 8005568:	4a45      	ldr	r2, [pc, #276]	; (8005680 <OTM8009A_Init+0x824>)
 800556a:	2129      	movs	r1, #41	; 0x29
 800556c:	4638      	mov	r0, r7
 800556e:	f000 f959 	bl	8005824 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005572:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005574:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005576:	4653      	mov	r3, sl
 8005578:	4651      	mov	r1, sl
 800557a:	4a36      	ldr	r2, [pc, #216]	; (8005654 <OTM8009A_Init+0x7f8>)
 800557c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800557e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005580:	f000 f950 	bl	8005824 <otm8009a_write_reg>
 8005584:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005586:	4653      	mov	r3, sl
 8005588:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800558a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800558c:	4a3d      	ldr	r2, [pc, #244]	; (8005684 <OTM8009A_Init+0x828>)
 800558e:	212c      	movs	r1, #44	; 0x2c
 8005590:	f000 f948 	bl	8005824 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005594:	42c4      	cmn	r4, r0
}
 8005596:	bf14      	ite	ne
 8005598:	f04f 30ff 	movne.w	r0, #4294967295
 800559c:	4650      	moveq	r0, sl
 800559e:	b002      	add	sp, #8
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80055a4:	f1ba 0f01 	cmp.w	sl, #1
 80055a8:	4d30      	ldr	r5, [pc, #192]	; (800566c <OTM8009A_Init+0x810>)
 80055aa:	d1b8      	bne.n	800551e <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80055ac:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80055ae:	2300      	movs	r3, #0
 80055b0:	f10d 0207 	add.w	r2, sp, #7
 80055b4:	2136      	movs	r1, #54	; 0x36
 80055b6:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80055b8:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80055bc:	f000 f932 	bl	8005824 <otm8009a_write_reg>
 80055c0:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80055c2:	2304      	movs	r3, #4
 80055c4:	4a30      	ldr	r2, [pc, #192]	; (8005688 <OTM8009A_Init+0x82c>)
 80055c6:	212a      	movs	r1, #42	; 0x2a
 80055c8:	4638      	mov	r0, r7
 80055ca:	f000 f92b 	bl	8005824 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80055ce:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80055d0:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80055d2:	2304      	movs	r3, #4
 80055d4:	4a2d      	ldr	r2, [pc, #180]	; (800568c <OTM8009A_Init+0x830>)
 80055d6:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80055d8:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80055da:	4638      	mov	r0, r7
 80055dc:	f000 f922 	bl	8005824 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80055e0:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80055e4:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80055e6:	e79c      	b.n	8005522 <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80055e8:	464b      	mov	r3, r9
 80055ea:	4a29      	ldr	r2, [pc, #164]	; (8005690 <OTM8009A_Init+0x834>)
 80055ec:	e78c      	b.n	8005508 <OTM8009A_Init+0x6ac>
 80055ee:	bf00      	nop
 80055f0:	0806337e 	.word	0x0806337e
 80055f4:	0806326c 	.word	0x0806326c
 80055f8:	0806337f 	.word	0x0806337f
 80055fc:	08063278 	.word	0x08063278
 8005600:	08063380 	.word	0x08063380
 8005604:	08063288 	.word	0x08063288
 8005608:	08063382 	.word	0x08063382
 800560c:	08063298 	.word	0x08063298
 8005610:	08063383 	.word	0x08063383
 8005614:	080632a4 	.word	0x080632a4
 8005618:	08063362 	.word	0x08063362
 800561c:	080632b0 	.word	0x080632b0
 8005620:	08063381 	.word	0x08063381
 8005624:	080632c0 	.word	0x080632c0
 8005628:	0806337d 	.word	0x0806337d
 800562c:	080632d0 	.word	0x080632d0
 8005630:	080632e0 	.word	0x080632e0
 8005634:	080632ec 	.word	0x080632ec
 8005638:	080632fc 	.word	0x080632fc
 800563c:	0806336d 	.word	0x0806336d
 8005640:	0806338e 	.word	0x0806338e
 8005644:	0806338f 	.word	0x0806338f
 8005648:	08063390 	.word	0x08063390
 800564c:	08063391 	.word	0x08063391
 8005650:	08063392 	.word	0x08063392
 8005654:	08063361 	.word	0x08063361
 8005658:	0806330c 	.word	0x0806330c
 800565c:	08063310 	.word	0x08063310
 8005660:	08063320 	.word	0x08063320
 8005664:	08063384 	.word	0x08063384
 8005668:	08063385 	.word	0x08063385
 800566c:	24001524 	.word	0x24001524
 8005670:	08063387 	.word	0x08063387
 8005674:	08063388 	.word	0x08063388
 8005678:	08063389 	.word	0x08063389
 800567c:	0806338a 	.word	0x0806338a
 8005680:	0806338b 	.word	0x0806338b
 8005684:	0806338c 	.word	0x0806338c
 8005688:	08063228 	.word	0x08063228
 800568c:	0806322c 	.word	0x0806322c
 8005690:	08063386 	.word	0x08063386

08005694 <OTM8009A_SetBrightness>:
{
 8005694:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005696:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 800569a:	4e0b      	ldr	r6, [pc, #44]	; (80056c8 <OTM8009A_SetBrightness+0x34>)
{
 800569c:	b082      	sub	sp, #8
 800569e:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80056a0:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80056a4:	2300      	movs	r3, #0
 80056a6:	f10d 0207 	add.w	r2, sp, #7
 80056aa:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80056ac:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80056ae:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80056b0:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80056b4:	f000 f8b6 	bl	8005824 <otm8009a_write_reg>
 80056b8:	b918      	cbnz	r0, 80056c2 <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <OTM8009A_SetBrightness+0x38>)
 80056bc:	609d      	str	r5, [r3, #8]
}
 80056be:	b002      	add	sp, #8
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 80056c2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80056c6:	e7fa      	b.n	80056be <OTM8009A_SetBrightness+0x2a>
 80056c8:	51eb851f 	.word	0x51eb851f
 80056cc:	24001524 	.word	0x24001524

080056d0 <OTM8009A_DisplayOn>:
{
 80056d0:	b500      	push	{lr}
 80056d2:	b083      	sub	sp, #12
  uint8_t display = 0;
 80056d4:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80056d6:	2129      	movs	r1, #41	; 0x29
 80056d8:	3010      	adds	r0, #16
 80056da:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80056de:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80056e2:	f000 f89f 	bl	8005824 <otm8009a_write_reg>
 80056e6:	3800      	subs	r0, #0
 80056e8:	bf18      	it	ne
 80056ea:	2001      	movne	r0, #1
}
 80056ec:	4240      	negs	r0, r0
 80056ee:	b003      	add	sp, #12
 80056f0:	f85d fb04 	ldr.w	pc, [sp], #4

080056f4 <OTM8009A_DisplayOff>:
{
 80056f4:	b500      	push	{lr}
 80056f6:	b083      	sub	sp, #12
  uint8_t display = 0;
 80056f8:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80056fa:	2128      	movs	r1, #40	; 0x28
 80056fc:	3010      	adds	r0, #16
 80056fe:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8005702:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005706:	f000 f88d 	bl	8005824 <otm8009a_write_reg>
 800570a:	3800      	subs	r0, #0
 800570c:	bf18      	it	ne
 800570e:	2001      	movne	r0, #1
}
 8005710:	4240      	negs	r0, r0
 8005712:	b003      	add	sp, #12
 8005714:	f85d fb04 	ldr.w	pc, [sp], #4

08005718 <OTM8009A_SetOrientation>:
{
 8005718:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800571a:	2360      	movs	r3, #96	; 0x60
{
 800571c:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800571e:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005720:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005722:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8005726:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800572a:	d83e      	bhi.n	80057aa <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800572c:	d020      	beq.n	8005770 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800572e:	f100 0510 	add.w	r5, r0, #16
 8005732:	4633      	mov	r3, r6
 8005734:	f10d 0207 	add.w	r2, sp, #7
 8005738:	2136      	movs	r1, #54	; 0x36
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f872 	bl	8005824 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005740:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8005742:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <OTM8009A_SetOrientation+0x98>)
 8005746:	212a      	movs	r1, #42	; 0x2a
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f86b 	bl	8005824 <otm8009a_write_reg>
 800574e:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005750:	2304      	movs	r3, #4
 8005752:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005754:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <OTM8009A_SetOrientation+0x9c>)
 8005758:	212b      	movs	r1, #43	; 0x2b
 800575a:	f000 f863 	bl	8005824 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005760:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005762:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8005764:	3800      	subs	r0, #0
 8005766:	bf18      	it	ne
 8005768:	2001      	movne	r0, #1
 800576a:	4240      	negs	r0, r0
}
 800576c:	b003      	add	sp, #12
 800576e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005770:	f100 0510 	add.w	r5, r0, #16
 8005774:	4633      	mov	r3, r6
 8005776:	460f      	mov	r7, r1
 8005778:	f10d 0206 	add.w	r2, sp, #6
 800577c:	2136      	movs	r1, #54	; 0x36
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f850 	bl	8005824 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005784:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005786:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <OTM8009A_SetOrientation+0x98>)
 800578a:	212a      	movs	r1, #42	; 0x2a
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f849 	bl	8005824 <otm8009a_write_reg>
 8005792:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005794:	2304      	movs	r3, #4
 8005796:	4628      	mov	r0, r5
 8005798:	4a06      	ldr	r2, [pc, #24]	; (80057b4 <OTM8009A_SetOrientation+0x9c>)
 800579a:	212b      	movs	r1, #43	; 0x2b
 800579c:	f000 f842 	bl	8005824 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80057a0:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80057a4:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80057a6:	601f      	str	r7, [r3, #0]
 80057a8:	e7dc      	b.n	8005764 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80057ae:	e7dd      	b.n	800576c <OTM8009A_SetOrientation+0x54>
 80057b0:	08063228 	.word	0x08063228
 80057b4:	0806322c 	.word	0x0806322c
 80057b8:	24001524 	.word	0x24001524

080057bc <OTM8009A_ReadID>:
{ 
 80057bc:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80057be:	3010      	adds	r0, #16
 80057c0:	21da      	movs	r1, #218	; 0xda
{ 
 80057c2:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80057c4:	2300      	movs	r3, #0
 80057c6:	f000 f825 	bl	8005814 <otm8009a_read_reg>
 80057ca:	3800      	subs	r0, #0
 80057cc:	bf18      	it	ne
 80057ce:	2001      	movne	r0, #1
}  
 80057d0:	4240      	negs	r0, r0
 80057d2:	bd08      	pop	{r3, pc}

080057d4 <OTM8009A_DrawVLine>:
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <OTM8009A_GetPixel>:
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80057e4:	b178      	cbz	r0, 8005806 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80057e6:	684a      	ldr	r2, [r1, #4]
 80057e8:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 80057ea:	2000      	movs	r0, #0
{
 80057ec:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 80057ee:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80057f4:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80057f8:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80057fc:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8005800:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005802:	611a      	str	r2, [r3, #16]
}
 8005804:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005806:	f04f 30ff 	mov.w	r0, #4294967295
}
 800580a:	4770      	bx	lr
 800580c:	08004e3d 	.word	0x08004e3d
 8005810:	08004e4d 	.word	0x08004e4d

08005814 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8005814:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005816:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800581a:	46a4      	mov	ip, r4
}
 800581c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005820:	4760      	bx	ip
 8005822:	bf00      	nop

08005824 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005824:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005826:	6804      	ldr	r4, [r0, #0]
 8005828:	6880      	ldr	r0, [r0, #8]
 800582a:	46a4      	mov	ip, r4
}
 800582c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005830:	4760      	bx	ip
 8005832:	bf00      	nop

08005834 <BSP_AUDIO_OUT_IRQHandler>:
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
  if (Instance == 0U)
 8005834:	b100      	cbz	r0, 8005838 <BSP_AUDIO_OUT_IRQHandler+0x4>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
  }
}
 8005836:	4770      	bx	lr
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <BSP_AUDIO_OUT_IRQHandler+0x10>)
 800583a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800583e:	f001 bd4b 	b.w	80072d8 <HAL_DMA_IRQHandler>
 8005842:	bf00      	nop
 8005844:	240119a4 	.word	0x240119a4

08005848 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8005848:	f000 be8e 	b.w	8006568 <HAL_GetTick>

0800584c <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800584c:	b910      	cbnz	r0, 8005854 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <BSP_LCD_SetActiveLayer+0x10>)
 8005850:	6099      	str	r1, [r3, #8]
 8005852:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005854:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	24011ae4 	.word	0x24011ae4

08005860 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005860:	b918      	cbnz	r0, 800586a <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8005862:	4b03      	ldr	r3, [pc, #12]	; (8005870 <BSP_LCD_GetPixelFormat+0x10>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	600b      	str	r3, [r1, #0]
 8005868:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800586a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800586e:	4770      	bx	lr
 8005870:	24011ae4 	.word	0x24011ae4

08005874 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005874:	b948      	cbnz	r0, 800588a <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <BSP_LCD_GetXSize+0x1c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	b11b      	cbz	r3, 8005886 <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <BSP_LCD_GetXSize+0x20>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8005886:	4618      	mov	r0, r3
  }

  return ret;
}
 8005888:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800588a:	f06f 0001 	mvn.w	r0, #1
 800588e:	4770      	bx	lr
 8005890:	24001534 	.word	0x24001534
 8005894:	24011ae4 	.word	0x24011ae4

08005898 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005898:	b948      	cbnz	r0, 80058ae <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <BSP_LCD_GetYSize+0x1c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a0:	b11b      	cbz	r3, 80058aa <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <BSP_LCD_GetYSize+0x20>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	600b      	str	r3, [r1, #0]
 80058a8:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80058aa:	4618      	mov	r0, r3
  }

  return ret;
}
 80058ac:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80058ae:	f06f 0001 	mvn.w	r0, #1
 80058b2:	4770      	bx	lr
 80058b4:	24001534 	.word	0x24001534
 80058b8:	24011ae4 	.word	0x24011ae4

080058bc <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80058c4:	b39c      	cbz	r4, 800592e <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80058ca:	4d1a      	ldr	r5, [pc, #104]	; (8005934 <BSP_LCD_FillRGBRect+0x78>)
 80058cc:	eb04 0802 	add.w	r8, r4, r2
 80058d0:	eb0b 0e01 	add.w	lr, fp, r1
 80058d4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80058d8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005938 <BSP_LCD_FillRGBRect+0x7c>
 80058dc:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 80058de:	f1bb 0f00 	cmp.w	fp, #0
 80058e2:	d021      	beq.n	8005928 <BSP_LCD_FillRGBRect+0x6c>
 80058e4:	460c      	mov	r4, r1
 80058e6:	e00a      	b.n	80058fe <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80058e8:	682e      	ldr	r6, [r5, #0]
 80058ea:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80058ec:	fb06 4602 	mla	r6, r6, r2, r4
 80058f0:	3401      	adds	r4, #1
 80058f2:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80058f6:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 80058f8:	6928      	ldr	r0, [r5, #16]
 80058fa:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80058fc:	d014      	beq.n	8005928 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058fe:	68a8      	ldr	r0, [r5, #8]
 8005900:	f8d3 9000 	ldr.w	r9, [r3]
 8005904:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005908:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800590c:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800590e:	2e00      	cmp	r6, #0
 8005910:	d0ea      	beq.n	80058e8 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005912:	682e      	ldr	r6, [r5, #0]
 8005914:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005916:	fb06 4602 	mla	r6, r6, r2, r4
 800591a:	3401      	adds	r4, #1
 800591c:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8005920:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8005922:	6928      	ldr	r0, [r5, #16]
 8005924:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8005926:	d1ea      	bne.n	80058fe <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8005928:	3201      	adds	r2, #1
 800592a:	4542      	cmp	r2, r8
 800592c:	d1d7      	bne.n	80058de <BSP_LCD_FillRGBRect+0x22>
}
 800592e:	2000      	movs	r0, #0
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	24011ae4 	.word	0x24011ae4
 8005938:	24011a3c 	.word	0x24011a3c

0800593c <BSP_LCD_ReadPixel>:
{
 800593c:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800593e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005942:	4e10      	ldr	r6, [pc, #64]	; (8005984 <BSP_LCD_ReadPixel+0x48>)
 8005944:	4f10      	ldr	r7, [pc, #64]	; (8005988 <BSP_LCD_ReadPixel+0x4c>)
 8005946:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800594a:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800594e:	0080      	lsls	r0, r0, #2
 8005950:	68ac      	ldr	r4, [r5, #8]
 8005952:	fb0c 7404 	mla	r4, ip, r4, r7
 8005956:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005958:	b94d      	cbnz	r5, 800596e <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800595a:	5830      	ldr	r0, [r6, r0]
 800595c:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800595e:	fb00 1202 	mla	r2, r0, r2, r1
}
 8005962:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005964:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8005968:	bcf0      	pop	{r4, r5, r6, r7}
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800596e:	5835      	ldr	r5, [r6, r0]
 8005970:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005972:	fb05 1202 	mla	r2, r5, r2, r1
 8005976:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 800597a:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800597c:	b292      	uxth	r2, r2
}
 800597e:	bcf0      	pop	{r4, r5, r6, r7}
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	4770      	bx	lr
 8005984:	24011ae4 	.word	0x24011ae4
 8005988:	24011a3c 	.word	0x24011a3c

0800598c <BSP_LCD_WritePixel>:
{
 800598c:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800598e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005992:	4e0f      	ldr	r6, [pc, #60]	; (80059d0 <BSP_LCD_WritePixel+0x44>)
 8005994:	4f0f      	ldr	r7, [pc, #60]	; (80059d4 <BSP_LCD_WritePixel+0x48>)
 8005996:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800599a:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800599e:	0080      	lsls	r0, r0, #2
 80059a0:	68ac      	ldr	r4, [r5, #8]
 80059a2:	fb0c 7404 	mla	r4, ip, r4, r7
 80059a6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80059a8:	b945      	cbnz	r5, 80059bc <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80059aa:	5830      	ldr	r0, [r6, r0]
 80059ac:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80059ae:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80059b2:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80059b4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80059b8:	bcf0      	pop	{r4, r5, r6, r7}
 80059ba:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80059bc:	5835      	ldr	r5, [r6, r0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80059c2:	fb05 1202 	mla	r2, r5, r2, r1
}
 80059c6:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80059c8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80059cc:	2000      	movs	r0, #0
 80059ce:	4770      	bx	lr
 80059d0:	24011ae4 	.word	0x24011ae4
 80059d4:	24011a3c 	.word	0x24011a3c

080059d8 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80059d8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80059da:	2406      	movs	r4, #6
{
 80059dc:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80059de:	9101      	str	r1, [sp, #4]
 80059e0:	4601      	mov	r1, r0
 80059e2:	9202      	str	r2, [sp, #8]
 80059e4:	9400      	str	r4, [sp, #0]
 80059e6:	4805      	ldr	r0, [pc, #20]	; (80059fc <DSI_IO_Read+0x24>)
 80059e8:	f002 fcee 	bl	80083c8 <HAL_DSI_Read>
 80059ec:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80059ee:	bf14      	ite	ne
 80059f0:	f06f 0007 	mvnne.w	r0, #7
 80059f4:	2000      	moveq	r0, #0
 80059f6:	b004      	add	sp, #16
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	24011b00 	.word	0x24011b00

08005a00 <BSP_LCD_DrawBitmap>:
{
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a04:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005a08:	4e4f      	ldr	r6, [pc, #316]	; (8005b48 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a0a:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a0c:	f04f 0934 	mov.w	r9, #52	; 0x34
 8005a10:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8005a14:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8005a18:	f8df e138 	ldr.w	lr, [pc, #312]	; 8005b54 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a1c:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a1e:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a22:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a26:	68b9      	ldr	r1, [r7, #8]
{
 8005a28:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a2a:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a2c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a30:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a34:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005a38:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a3c:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a3e:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005a42:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a46:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a4a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a4c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a50:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005a54:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a58:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a5a:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a5e:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a62:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a66:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a68:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8005a6c:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a6e:	4465      	add	r5, ip
 8005a70:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a72:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a74:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005a76:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8005a7a:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a7e:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a80:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8005a84:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005a86:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005a8a:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8005a90:	d957      	bls.n	8005b42 <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8005a92:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8005a96:	2c08      	cmp	r4, #8
 8005a98:	bf34      	ite	cc
 8005a9a:	f04f 0b02 	movcc.w	fp, #2
 8005a9e:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8005aa2:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8005aa6:	9c03      	ldr	r4, [sp, #12]
 8005aa8:	f10a 35ff 	add.w	r5, sl, #4294967295
 8005aac:	fb04 f909 	mul.w	r9, r4, r9
 8005ab0:	fb09 1505 	mla	r5, r9, r5, r1
 8005ab4:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8005ab6:	f1ba 0f00 	cmp.w	sl, #0
 8005aba:	d03e      	beq.n	8005b3a <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005abc:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8005abe:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8005ac2:	2700      	movs	r7, #0
 8005ac4:	4c21      	ldr	r4, [pc, #132]	; (8005b4c <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005ac6:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005aca:	e006      	b.n	8005ada <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005acc:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8005ace:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005ad0:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8005ad2:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005ad4:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8005ad8:	d02f      	beq.n	8005b3a <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005ada:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8005adc:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005ade:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005ae2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005ae6:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8005ae8:	4919      	ldr	r1, [pc, #100]	; (8005b50 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8005aea:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8005aee:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005af2:	bf18      	it	ne
 8005af4:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005af6:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005af8:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005afa:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005afe:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005b02:	4812      	ldr	r0, [pc, #72]	; (8005b4c <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8005b04:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005b08:	f001 ff92 	bl	8007a30 <HAL_DMA2D_Init>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d1dd      	bne.n	8005acc <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005b10:	2101      	movs	r1, #1
 8005b12:	480e      	ldr	r0, [pc, #56]	; (8005b4c <BSP_LCD_DrawBitmap+0x14c>)
 8005b14:	f002 f8ae 	bl	8007c74 <HAL_DMA2D_ConfigLayer>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d1d7      	bne.n	8005acc <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	4642      	mov	r2, r8
 8005b22:	4629      	mov	r1, r5
 8005b24:	9000      	str	r0, [sp, #0]
 8005b26:	4809      	ldr	r0, [pc, #36]	; (8005b4c <BSP_LCD_DrawBitmap+0x14c>)
 8005b28:	f001 ffc4 	bl	8007ab4 <HAL_DMA2D_Start>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1cd      	bne.n	8005acc <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005b30:	2132      	movs	r1, #50	; 0x32
 8005b32:	4806      	ldr	r0, [pc, #24]	; (8005b4c <BSP_LCD_DrawBitmap+0x14c>)
 8005b34:	f002 f818 	bl	8007b68 <HAL_DMA2D_PollForTransfer>
 8005b38:	e7c8      	b.n	8005acc <BSP_LCD_DrawBitmap+0xcc>
}
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	b005      	add	sp, #20
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8005b42:	f04f 0b00 	mov.w	fp, #0
 8005b46:	e7ac      	b.n	8005aa2 <BSP_LCD_DrawBitmap+0xa2>
 8005b48:	24011ae4 	.word	0x24011ae4
 8005b4c:	24011b1c 	.word	0x24011b1c
 8005b50:	52001000 	.word	0x52001000
 8005b54:	24011a3c 	.word	0x24011a3c

08005b58 <LL_FillBuffer>:
{
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005b5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005b60:	4c28      	ldr	r4, [pc, #160]	; (8005c04 <LL_FillBuffer+0xac>)
{
 8005b62:	4617      	mov	r7, r2
 8005b64:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005b66:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8005b6a:	4698      	mov	r8, r3
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005b70:	68c2      	ldr	r2, [r0, #12]
{
 8005b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005b74:	2a02      	cmp	r2, #2
 8005b76:	d00f      	beq.n	8005b98 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005b78:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8005b7a:	4c23      	ldr	r4, [pc, #140]	; (8005c08 <LL_FillBuffer+0xb0>)
 8005b7c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8005b80:	4922      	ldr	r1, [pc, #136]	; (8005c0c <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005b82:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8005b84:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8005b86:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8005b88:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005b8c:	f001 ff50 	bl	8007a30 <HAL_DMA2D_Init>
 8005b90:	b308      	cbz	r0, 8005bd6 <LL_FillBuffer+0x7e>
}
 8005b92:	b002      	add	sp, #8
 8005b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8005b98:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8005b9c:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8005ba0:	f005 041f 	and.w	r4, r5, #31
 8005ba4:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8005ba8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8005bac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005bb0:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8005bb4:	3521      	adds	r5, #33	; 0x21
 8005bb6:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8005bba:	3117      	adds	r1, #23
 8005bbc:	09ad      	lsrs	r5, r5, #6
 8005bbe:	0989      	lsrs	r1, r1, #6
 8005bc0:	022d      	lsls	r5, r5, #8
 8005bc2:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8005bc6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005bca:	3017      	adds	r0, #23
 8005bcc:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005bd0:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8005bd4:	e7d1      	b.n	8005b7a <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f002 f84b 	bl	8007c74 <HAL_DMA2D_ConfigLayer>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d1d7      	bne.n	8005b92 <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005be2:	463b      	mov	r3, r7
 8005be4:	4632      	mov	r2, r6
 8005be6:	4629      	mov	r1, r5
 8005be8:	4620      	mov	r0, r4
 8005bea:	f8cd 8000 	str.w	r8, [sp]
 8005bee:	f001 ff61 	bl	8007ab4 <HAL_DMA2D_Start>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d1cd      	bne.n	8005b92 <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	2119      	movs	r1, #25
}
 8005bfa:	b002      	add	sp, #8
 8005bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005c00:	f001 bfb2 	b.w	8007b68 <HAL_DMA2D_PollForTransfer>
 8005c04:	24011ae4 	.word	0x24011ae4
 8005c08:	24011b1c 	.word	0x24011b1c
 8005c0c:	52001000 	.word	0x52001000

08005c10 <BSP_LCD_DrawHLine>:
{
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c14:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005c18:	4f12      	ldr	r7, [pc, #72]	; (8005c64 <BSP_LCD_DrawHLine+0x54>)
{
 8005c1a:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c1c:	f8df e048 	ldr.w	lr, [pc, #72]	; 8005c68 <BSP_LCD_DrawHLine+0x58>
 8005c20:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 8005c24:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005c28:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005c2c:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c30:	688d      	ldr	r5, [r1, #8]
{
 8005c32:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c34:	690e      	ldr	r6, [r1, #16]
 8005c36:	fb02 4207 	mla	r2, r2, r7, r4
 8005c3a:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005c3e:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c40:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8005c42:	bf38      	it	cc
 8005c44:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005c46:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005c48:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005c4c:	9a08      	ldr	r2, [sp, #32]
 8005c4e:	9400      	str	r4, [sp, #0]
 8005c50:	9201      	str	r2, [sp, #4]
 8005c52:	461a      	mov	r2, r3
 8005c54:	2301      	movs	r3, #1
 8005c56:	f7ff ff7f 	bl	8005b58 <LL_FillBuffer>
}
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	b002      	add	sp, #8
 8005c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c62:	bf00      	nop
 8005c64:	24011ae4 	.word	0x24011ae4
 8005c68:	24011a3c 	.word	0x24011a3c

08005c6c <BSP_LCD_DrawVLine>:
{
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005c70:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005c74:	4c11      	ldr	r4, [pc, #68]	; (8005cbc <BSP_LCD_DrawVLine+0x50>)
 8005c76:	4d12      	ldr	r5, [pc, #72]	; (8005cc0 <BSP_LCD_DrawVLine+0x54>)
 8005c78:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005c7c:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005c80:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005c84:	eb02 0c03 	add.w	ip, r2, r3
{
 8005c88:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005c8a:	68be      	ldr	r6, [r7, #8]
 8005c8c:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005c90:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005c92:	fb08 5606 	mla	r6, r8, r6, r5
 8005c96:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005c98:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005c9a:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005c9c:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005c9e:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8005ca2:	bf88      	it	hi
 8005ca4:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005ca6:	9a08      	ldr	r2, [sp, #32]
 8005ca8:	e9cd 4200 	strd	r4, r2, [sp]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f7ff ff53 	bl	8005b58 <LL_FillBuffer>
}
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	b002      	add	sp, #8
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cba:	bf00      	nop
 8005cbc:	24011ae4 	.word	0x24011ae4
 8005cc0:	24011a3c 	.word	0x24011a3c

08005cc4 <BSP_LCD_FillRect>:
{
 8005cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005cc6:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005cca:	4f0e      	ldr	r7, [pc, #56]	; (8005d04 <BSP_LCD_FillRect+0x40>)
 8005ccc:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005cd0:	4d0d      	ldr	r5, [pc, #52]	; (8005d08 <BSP_LCD_FillRect+0x44>)
 8005cd2:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 8005cd6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8005cda:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005cdc:	68b7      	ldr	r7, [r6, #8]
 8005cde:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005ce2:	1ae4      	subs	r4, r4, r3
 8005ce4:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005ce6:	fb0e 5507 	mla	r5, lr, r7, r5
 8005cea:	6937      	ldr	r7, [r6, #16]
{
 8005cec:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005cee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005cf0:	9400      	str	r4, [sp, #0]
 8005cf2:	fb07 3101 	mla	r1, r7, r1, r3
 8005cf6:	9b08      	ldr	r3, [sp, #32]
 8005cf8:	9601      	str	r6, [sp, #4]
 8005cfa:	f7ff ff2d 	bl	8005b58 <LL_FillBuffer>
}
 8005cfe:	2000      	movs	r0, #0
 8005d00:	b003      	add	sp, #12
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d04:	24011ae4 	.word	0x24011ae4
 8005d08:	24011a3c 	.word	0x24011a3c

08005d0c <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005d0e:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005d10:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005d1c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005d20:	f002 0208 	and.w	r2, r2, #8
 8005d24:	9201      	str	r2, [sp, #4]
 8005d26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8005d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d2c:	f042 0208 	orr.w	r2, r2, #8
 8005d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8005d34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d38:	f022 0208 	bic.w	r2, r2, #8
 8005d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005d40:	b002      	add	sp, #8
 8005d42:	4770      	bx	lr
 8005d44:	58024400 	.word	0x58024400

08005d48 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005d4a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005d4c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d50:	f042 0210 	orr.w	r2, r2, #16
 8005d54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d58:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d5c:	f002 0210 	and.w	r2, r2, #16
 8005d60:	9201      	str	r2, [sp, #4]
 8005d62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005d64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d66:	f042 0210 	orr.w	r2, r2, #16
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005d6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d6e:	f022 0210 	bic.w	r2, r2, #16
 8005d72:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005d74:	b002      	add	sp, #8
 8005d76:	4770      	bx	lr
 8005d78:	58024400 	.word	0x58024400

08005d7c <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8005d7e:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8005d80:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005d84:	f042 0210 	orr.w	r2, r2, #16
 8005d88:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005d8c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005d90:	f002 0210 	and.w	r2, r2, #16
 8005d94:	9201      	str	r2, [sp, #4]
 8005d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8005d98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d9c:	f042 0210 	orr.w	r2, r2, #16
 8005da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8005da4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005da8:	f022 0210 	bic.w	r2, r2, #16
 8005dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005db0:	b002      	add	sp, #8
 8005db2:	4770      	bx	lr
 8005db4:	58024400 	.word	0x58024400

08005db8 <DSI_IO_Write>:
  if(Size <= 1U)
 8005db8:	2b01      	cmp	r3, #1
{
 8005dba:	b530      	push	{r4, r5, lr}
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	4601      	mov	r1, r0
  if(Size <= 1U)
 8005dc2:	d909      	bls.n	8005dd8 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8005dc4:	480a      	ldr	r0, [pc, #40]	; (8005df0 <DSI_IO_Write+0x38>)
 8005dc6:	e9cd 5200 	strd	r5, r2, [sp]
 8005dca:	2239      	movs	r2, #57	; 0x39
 8005dcc:	f002 fa90 	bl	80082f0 <HAL_DSI_LongWrite>
 8005dd0:	b958      	cbnz	r0, 8005dea <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8005dd2:	2000      	movs	r0, #0
}
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005dd8:	5cd0      	ldrb	r0, [r2, r3]
 8005dda:	462b      	mov	r3, r5
 8005ddc:	2215      	movs	r2, #21
 8005dde:	9000      	str	r0, [sp, #0]
 8005de0:	4803      	ldr	r0, [pc, #12]	; (8005df0 <DSI_IO_Write+0x38>)
 8005de2:	f002 fa71 	bl	80082c8 <HAL_DSI_ShortWrite>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f3      	beq.n	8005dd2 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005dea:	f06f 0007 	mvn.w	r0, #7
 8005dee:	e7f1      	b.n	8005dd4 <DSI_IO_Write+0x1c>
 8005df0:	24011b00 	.word	0x24011b00

08005df4 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8005df4:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <BSP_LCD_Reset+0x5c>)
 8005df6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005e00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8005e04:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8005e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005e0a:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005e0c:	4c11      	ldr	r4, [pc, #68]	; (8005e54 <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005e0e:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e14:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005e16:	4620      	mov	r0, r4
 8005e18:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005e1e:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e20:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005e22:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005e26:	f002 fb57 	bl	80084d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f002 fc70 	bl	8008714 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8005e34:	2014      	movs	r0, #20
 8005e36:	f000 fb9d 	bl	8006574 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f002 fc68 	bl	8008714 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8005e44:	200a      	movs	r0, #10
 8005e46:	f000 fb95 	bl	8006574 <HAL_Delay>
}
 8005e4a:	b007      	add	sp, #28
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	58024400 	.word	0x58024400
 8005e54:	58021800 	.word	0x58021800

08005e58 <MX_DSIHOST_DSI_Init>:
{
 8005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005e5c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005e60:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8005e62:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8005e64:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005e68:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005e6a:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005e6e:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8005e72:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005e74:	60c6      	str	r6, [r0, #12]
{
 8005e76:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005e78:	4669      	mov	r1, sp
{
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4690      	mov	r8, r2
 8005e7e:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005e80:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8005e82:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005e86:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005e8a:	f001 ff85 	bl	8007d98 <HAL_DSI_Init>
 8005e8e:	b118      	cbz	r0, 8005e98 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005e90:	4630      	mov	r0, r6
}
 8005e92:	b01e      	add	sp, #120	; 0x78
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005e98:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <MX_DSIHOST_DSI_Init+0xd0>)
 8005e9e:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005ea0:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005ea2:	fb03 2207 	mla	r2, r3, r7, r2
 8005ea6:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005ea8:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005eaa:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005eac:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005eb0:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005eb4:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005eb8:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005ebc:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005ebe:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005ec0:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005ec2:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8005ec4:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005ec6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005eca:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005ece:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8005ed2:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005ed4:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005eda:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005edc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005ee0:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8005ee6:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005eea:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005eee:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005ef2:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8005ef4:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005ef8:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005efa:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005efe:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005f02:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005f06:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005f08:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005f0c:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005f10:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005f14:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005f18:	f002 f876 	bl	8008008 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005f1c:	3800      	subs	r0, #0
 8005f1e:	bf18      	it	ne
 8005f20:	2001      	movne	r0, #1
}
 8005f22:	b01e      	add	sp, #120	; 0x78
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	0042c1d8 	.word	0x0042c1d8
 8005f2c:	4c751ce3 	.word	0x4c751ce3

08005f30 <MX_LTDC_Init>:
{
 8005f30:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8005f32:	4d0e      	ldr	r5, [pc, #56]	; (8005f6c <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005f34:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005f38:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005f3a:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005f3c:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005f3e:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005f40:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005f42:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005f44:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005f46:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005f48:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005f4a:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005f4c:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005f4e:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005f50:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005f52:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8005f54:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8005f56:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005f5a:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005f5c:	6181      	str	r1, [r0, #24]
}
 8005f5e:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005f60:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005f64:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005f68:	f002 bc92 	b.w	8008890 <HAL_LTDC_Init>
 8005f6c:	50001000 	.word	0x50001000

08005f70 <MX_LTDC_ConfigLayer>:
{
 8005f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f72:	4613      	mov	r3, r2
 8005f74:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8005f76:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005f78:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005f7a:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005f7c:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005f7e:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005f80:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8005f84:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8005f86:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005f88:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005f8c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005f90:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8005f94:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005f96:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005f98:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005f9a:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005f9c:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005f9e:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005fa0:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8005fa2:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005fa4:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8005fa6:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005faa:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005fae:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005fb0:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005fb2:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005fb4:	f002 fd48 	bl	8008a48 <HAL_LTDC_ConfigLayer>
}
 8005fb8:	b00f      	add	sp, #60	; 0x3c
 8005fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fbc <MX_LTDC_ClockConfig>:
{
 8005fbc:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005fbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005fc2:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005fc4:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005fc6:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005fcc:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005fce:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005fd0:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005fd2:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005fd4:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005fd6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005fd8:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005fda:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005fde:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005fe2:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005fe6:	f003 fc11 	bl	800980c <HAL_RCCEx_PeriphCLKConfig>
}
 8005fea:	b031      	add	sp, #196	; 0xc4
 8005fec:	bd30      	pop	{r4, r5, pc}
 8005fee:	bf00      	nop

08005ff0 <BSP_LCD_InitEx>:
{
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005ff4:	2901      	cmp	r1, #1
{
 8005ff6:	b093      	sub	sp, #76	; 0x4c
 8005ff8:	461d      	mov	r5, r3
 8005ffa:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005ffe:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8006000:	f200 80f2 	bhi.w	80061e8 <BSP_LCD_InitEx+0x1f8>
 8006004:	1e03      	subs	r3, r0, #0
 8006006:	bf18      	it	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2800      	cmp	r0, #0
 800600c:	f040 80ec 	bne.w	80061e8 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8006010:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8006012:	2901      	cmp	r1, #1
 8006014:	f200 80e8 	bhi.w	80061e8 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8006018:	2a02      	cmp	r2, #2
 800601a:	f000 80ab 	beq.w	8006174 <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800601e:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8006020:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8006022:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006024:	4c72      	ldr	r4, [pc, #456]	; (80061f0 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8006026:	2000      	movs	r0, #0
 8006028:	4f72      	ldr	r7, [pc, #456]	; (80061f4 <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800602a:	2600      	movs	r6, #0
 800602c:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800602e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8006032:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006034:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8006038:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800603a:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 800603e:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8006040:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8006044:	f7ff fed6 	bl	8005df4 <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006048:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800604c:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800604e:	a90c      	add	r1, sp, #48	; 0x30
 8006050:	4869      	ldr	r0, [pc, #420]	; (80061f8 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006052:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8006056:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 800605a:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800605e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006062:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006066:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006068:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800606a:	f8cd c014 	str.w	ip, [sp, #20]
 800606e:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006072:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006076:	f002 fa2f 	bl	80084d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800607a:	2201      	movs	r2, #1
 800607c:	4649      	mov	r1, r9
 800607e:	485e      	ldr	r0, [pc, #376]	; (80061f8 <BSP_LCD_InitEx+0x208>)
 8006080:	f002 fb48 	bl	8008714 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8006084:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8006088:	a90c      	add	r1, sp, #48	; 0x30
 800608a:	485b      	ldr	r0, [pc, #364]	; (80061f8 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 800608c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8006090:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8006228 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8006094:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8006098:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800609c:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 800609e:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80060a2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80060a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 80060aa:	9406      	str	r4, [sp, #24]
 80060ac:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80060ae:	f002 fa13 	bl	80084d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 80060b2:	2201      	movs	r2, #1
 80060b4:	4651      	mov	r1, sl
 80060b6:	4850      	ldr	r0, [pc, #320]	; (80061f8 <BSP_LCD_InitEx+0x208>)
 80060b8:	f002 fb2c 	bl	8008714 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 80060bc:	4632      	mov	r2, r6
 80060be:	210f      	movs	r1, #15
 80060c0:	2058      	movs	r0, #88	; 0x58
 80060c2:	f001 f85f 	bl	8007184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80060c6:	2058      	movs	r0, #88	; 0x58
 80060c8:	f001 f896 	bl	80071f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 80060cc:	4632      	mov	r2, r6
 80060ce:	210f      	movs	r1, #15
 80060d0:	205a      	movs	r0, #90	; 0x5a
 80060d2:	f001 f857 	bl	8007184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80060d6:	205a      	movs	r0, #90	; 0x5a
 80060d8:	f001 f88e 	bl	80071f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 80060dc:	4632      	mov	r2, r6
 80060de:	210f      	movs	r1, #15
 80060e0:	207b      	movs	r0, #123	; 0x7b
 80060e2:	f001 f84f 	bl	8007184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80060e6:	207b      	movs	r0, #123	; 0x7b
 80060e8:	f001 f886 	bl	80071f8 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 80060ec:	4c43      	ldr	r4, [pc, #268]	; (80061fc <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 80060ee:	4844      	ldr	r0, [pc, #272]	; (8006200 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 80060f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060f4:	4943      	ldr	r1, [pc, #268]	; (8006204 <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 80060f6:	4e44      	ldr	r6, [pc, #272]	; (8006208 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 80060f8:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 80060fa:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 80060fc:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8006100:	f7ff fe04 	bl	8005d0c <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8006104:	f8d9 2000 	ldr.w	r2, [r9]
 8006108:	9b02      	ldr	r3, [sp, #8]
 800610a:	4282      	cmp	r2, r0
 800610c:	d03a      	beq.n	8006184 <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 800610e:	680a      	ldr	r2, [r1, #0]
 8006110:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006114:	d031      	beq.n	800617a <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8006116:	4642      	mov	r2, r8
 8006118:	4629      	mov	r1, r5
 800611a:	483a      	ldr	r0, [pc, #232]	; (8006204 <BSP_LCD_InitEx+0x214>)
 800611c:	f7ff fe9c 	bl	8005e58 <MX_DSIHOST_DSI_Init>
 8006120:	2800      	cmp	r0, #0
 8006122:	d15c      	bne.n	80061de <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8006124:	4835      	ldr	r0, [pc, #212]	; (80061fc <BSP_LCD_InitEx+0x20c>)
 8006126:	f7ff ff49 	bl	8005fbc <MX_LTDC_ClockConfig>
 800612a:	2800      	cmp	r0, #0
 800612c:	d157      	bne.n	80061de <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800612e:	4642      	mov	r2, r8
 8006130:	4629      	mov	r1, r5
 8006132:	4832      	ldr	r0, [pc, #200]	; (80061fc <BSP_LCD_InitEx+0x20c>)
 8006134:	f7ff fefc 	bl	8005f30 <MX_LTDC_Init>
 8006138:	2800      	cmp	r0, #0
 800613a:	d150      	bne.n	80061de <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800613c:	f000 f8b2 	bl	80062a4 <BSP_SDRAM_Init>
 8006140:	2800      	cmp	r0, #0
 8006142:	d14c      	bne.n	80061de <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8006144:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8006146:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800614a:	4601      	mov	r1, r0
      config.X0          = 0;
 800614c:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800614e:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8006150:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8006154:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8006158:	4828      	ldr	r0, [pc, #160]	; (80061fc <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 800615a:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800615e:	f7ff ff07 	bl	8005f70 <MX_LTDC_ConfigLayer>
 8006162:	4604      	mov	r4, r0
 8006164:	b190      	cbz	r0, 800618c <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006166:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800616a:	2301      	movs	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
}
 800616e:	b013      	add	sp, #76	; 0x4c
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8006174:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8006176:	9201      	str	r2, [sp, #4]
 8006178:	e754      	b.n	8006024 <BSP_LCD_InitEx+0x34>
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	f7ff fdfe 	bl	8005d7c <DSI_MspInit.part.0>
 8006180:	9b02      	ldr	r3, [sp, #8]
 8006182:	e7c8      	b.n	8006116 <BSP_LCD_InitEx+0x126>
 8006184:	f7ff fde0 	bl	8005d48 <DMA2D_MspInit.part.0>
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	e7c0      	b.n	800610e <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800618c:	481d      	ldr	r0, [pc, #116]	; (8006204 <BSP_LCD_InitEx+0x214>)
 800618e:	f002 f873 	bl	8008278 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8006192:	2104      	movs	r1, #4
 8006194:	481b      	ldr	r0, [pc, #108]	; (8006204 <BSP_LCD_InitEx+0x214>)
 8006196:	f002 f85b 	bl	8008250 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800619c:	4d1c      	ldr	r5, [pc, #112]	; (8006210 <BSP_LCD_InitEx+0x220>)
 800619e:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 80061a0:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 80061a2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80061a4:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 80061a6:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 80061a8:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 80061ac:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80061b0:	f7ff fb18 	bl	80057e4 <OTM8009A_RegisterBusIO>
 80061b4:	b980      	cbnz	r0, 80061d8 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 80061b6:	4c19      	ldr	r4, [pc, #100]	; (800621c <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80061b8:	4628      	mov	r0, r5
 80061ba:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 80061bc:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80061be:	f7ff fafd 	bl	80057bc <OTM8009A_ReadID>
 80061c2:	b948      	cbnz	r0, 80061d8 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <BSP_LCD_InitEx+0x230>)
 80061c6:	4d17      	ldr	r5, [pc, #92]	; (8006224 <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	9a03      	ldr	r2, [sp, #12]
 80061cc:	9901      	ldr	r1, [sp, #4]
 80061ce:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80061d0:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80061d2:	47a0      	blx	r4
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d0c8      	beq.n	800616a <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061d8:	f06f 0006 	mvn.w	r0, #6
 80061dc:	e7c5      	b.n	800616a <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061de:	f06f 0003 	mvn.w	r0, #3
}
 80061e2:	b013      	add	sp, #76	; 0x4c
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80061e8:	f06f 0001 	mvn.w	r0, #1
 80061ec:	e7bf      	b.n	800616e <BSP_LCD_InitEx+0x17e>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
 80061f4:	24011ae4 	.word	0x24011ae4
 80061f8:	58022400 	.word	0x58022400
 80061fc:	24011a3c 	.word	0x24011a3c
 8006200:	52001000 	.word	0x52001000
 8006204:	24011b00 	.word	0x24011b00
 8006208:	50001000 	.word	0x50001000
 800620c:	08005849 	.word	0x08005849
 8006210:	24001538 	.word	0x24001538
 8006214:	08005db9 	.word	0x08005db9
 8006218:	080059d9 	.word	0x080059d9
 800621c:	24001530 	.word	0x24001530
 8006220:	24001020 	.word	0x24001020
 8006224:	24001534 	.word	0x24001534
 8006228:	24011b1c 	.word	0x24011b1c

0800622c <BSP_LCD_Init>:
{
 800622c:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800622e:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8006232:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8006234:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006238:	2201      	movs	r2, #1
 800623a:	9400      	str	r4, [sp, #0]
 800623c:	f7ff fed8 	bl	8005ff0 <BSP_LCD_InitEx>
}
 8006240:	b002      	add	sp, #8
 8006242:	bd10      	pop	{r4, pc}

08006244 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8006246:	4915      	ldr	r1, [pc, #84]	; (800629c <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006248:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800624a:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800624c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006250:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8006254:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006258:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800625c:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800625e:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006260:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006262:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006264:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006266:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006268:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 800626a:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800626c:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 800626e:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006270:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006272:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006274:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8006276:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8006278:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 800627a:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800627c:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 800627e:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006280:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006284:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006288:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 800628a:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800628e:	f004 fc3b 	bl	800ab08 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8006292:	1b40      	subs	r0, r0, r5
 8006294:	bf18      	it	ne
 8006296:	2001      	movne	r0, #1
 8006298:	b009      	add	sp, #36	; 0x24
 800629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800629c:	52004140 	.word	0x52004140
 80062a0:	24011b84 	.word	0x24011b84

080062a4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f040 80e1 	bne.w	800646c <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80062aa:	4b73      	ldr	r3, [pc, #460]	; (8006478 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80062ac:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 80062ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80062b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 80062b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80062b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 80062bc:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 80062be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80062c2:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80062c4:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80062c6:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80062c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80062cc:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80062ce:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 80062d2:	9201      	str	r2, [sp, #4]
 80062d4:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80062d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80062da:	430a      	orrs	r2, r1
 80062dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80062e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80062e4:	400a      	ands	r2, r1
 80062e6:	9202      	str	r2, [sp, #8]
 80062e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80062ee:	f042 0208 	orr.w	r2, r2, #8
 80062f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80062f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80062fa:	f002 0208 	and.w	r2, r2, #8
 80062fe:	9203      	str	r2, [sp, #12]
 8006300:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006302:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006306:	f042 0210 	orr.w	r2, r2, #16
 800630a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800630e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006312:	f002 0210 	and.w	r2, r2, #16
 8006316:	9204      	str	r2, [sp, #16]
 8006318:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800631a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800631e:	f042 0220 	orr.w	r2, r2, #32
 8006322:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006326:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800632a:	f002 0220 	and.w	r2, r2, #32
 800632e:	9205      	str	r2, [sp, #20]
 8006330:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006332:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800633a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800633e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006342:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006346:	9206      	str	r2, [sp, #24]
 8006348:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800634a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800634e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006352:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006356:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800635a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800635e:	9207      	str	r2, [sp, #28]
 8006360:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006362:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800636a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800636e:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006376:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800637c:	483f      	ldr	r0, [pc, #252]	; (800647c <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800637e:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006380:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006382:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006384:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006386:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006388:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800638a:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800638c:	f002 f8a4 	bl	80084d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006390:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006394:	a909      	add	r1, sp, #36	; 0x24
 8006396:	483a      	ldr	r0, [pc, #232]	; (8006480 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006398:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800639a:	f002 f89d 	bl	80084d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800639e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80063a2:	a909      	add	r1, sp, #36	; 0x24
 80063a4:	4837      	ldr	r0, [pc, #220]	; (8006484 <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80063a8:	f002 f896 	bl	80084d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80063ac:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80063b0:	a909      	add	r1, sp, #36	; 0x24
 80063b2:	4835      	ldr	r0, [pc, #212]	; (8006488 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80063b4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80063b6:	f002 f88f 	bl	80084d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80063ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80063be:	a909      	add	r1, sp, #36	; 0x24
 80063c0:	4832      	ldr	r0, [pc, #200]	; (800648c <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80063c2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80063c4:	f002 f888 	bl	80084d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80063c8:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80063cc:	a909      	add	r1, sp, #36	; 0x24
 80063ce:	4830      	ldr	r0, [pc, #192]	; (8006490 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80063d0:	4c30      	ldr	r4, [pc, #192]	; (8006494 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80063d2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80063d4:	f002 f880 	bl	80084d8 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80063d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80063dc:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80063e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80063e4:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80063e6:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80063e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80063ec:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80063ee:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80063f0:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80063f2:	4a29      	ldr	r2, [pc, #164]	; (8006498 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80063f4:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80063f6:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 80063f8:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80063fa:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80063fc:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80063fe:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006400:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006404:	4e25      	ldr	r6, [pc, #148]	; (800649c <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006406:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006408:	6334      	str	r4, [r6, #48]	; 0x30
 800640a:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800640c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006414:	f002 fbc2 	bl	8008b9c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8006418:	4620      	mov	r0, r4
 800641a:	f002 fb45 	bl	8008aa8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800641e:	462a      	mov	r2, r5
 8006420:	210f      	movs	r1, #15
 8006422:	207a      	movs	r0, #122	; 0x7a
 8006424:	f000 feae 	bl	8007184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006428:	207a      	movs	r0, #122	; 0x7a
 800642a:	f000 fee5 	bl	80071f8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ff08 	bl	8006244 <MX_SDRAM_Init>
 8006434:	4603      	mov	r3, r0
 8006436:	b9e0      	cbnz	r0, 8006472 <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006438:	4919      	ldr	r1, [pc, #100]	; (80064a0 <BSP_SDRAM_Init+0x1fc>)
 800643a:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800643e:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006442:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006446:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006448:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800644a:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800644c:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800644e:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006450:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006452:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006456:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006458:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800645a:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800645c:	f7fe fc58 	bl	8004d10 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006460:	2800      	cmp	r0, #0
 8006462:	bf18      	it	ne
 8006464:	f06f 0004 	mvnne.w	r0, #4
}
 8006468:	b00f      	add	sp, #60	; 0x3c
 800646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800646c:	f06f 0001 	mvn.w	r0, #1
}
 8006470:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	e7f7      	b.n	8006468 <BSP_SDRAM_Init+0x1c4>
 8006478:	58024400 	.word	0x58024400
 800647c:	58020c00 	.word	0x58020c00
 8006480:	58021000 	.word	0x58021000
 8006484:	58021400 	.word	0x58021400
 8006488:	58021800 	.word	0x58021800
 800648c:	58021c00 	.word	0x58021c00
 8006490:	58022000 	.word	0x58022000
 8006494:	24001558 	.word	0x24001558
 8006498:	52000040 	.word	0x52000040
 800649c:	24011b84 	.word	0x24011b84
 80064a0:	240015c4 	.word	0x240015c4

080064a4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_InitTick+0x40>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b90b      	cbnz	r3, 80064ae <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80064aa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80064ac:	4770      	bx	lr
{
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80064b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064b6:	4a0c      	ldr	r2, [pc, #48]	; (80064e8 <HAL_InitTick+0x44>)
 80064b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064bc:	6810      	ldr	r0, [r2, #0]
 80064be:	fbb0 f0f3 	udiv	r0, r0, r3
 80064c2:	f000 fea7 	bl	8007214 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c6:	2c0f      	cmp	r4, #15
 80064c8:	d800      	bhi.n	80064cc <HAL_InitTick+0x28>
 80064ca:	b108      	cbz	r0, 80064d0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80064cc:	2001      	movs	r0, #1
}
 80064ce:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064d0:	2200      	movs	r2, #0
 80064d2:	4621      	mov	r1, r4
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	f000 fe54 	bl	8007184 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064dc:	4b03      	ldr	r3, [pc, #12]	; (80064ec <HAL_InitTick+0x48>)
 80064de:	2000      	movs	r0, #0
 80064e0:	601c      	str	r4, [r3, #0]
}
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	2400106c 	.word	0x2400106c
 80064e8:	24000000 	.word	0x24000000
 80064ec:	24001070 	.word	0x24001070

080064f0 <HAL_Init>:
{
 80064f0:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064f2:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064f4:	4c12      	ldr	r4, [pc, #72]	; (8006540 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064f6:	f000 fe31 	bl	800715c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064fa:	4d12      	ldr	r5, [pc, #72]	; (8006544 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064fc:	f002 fea2 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 8006500:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_Init+0x58>)
 8006502:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006504:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006506:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006508:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800650a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800650e:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006510:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006512:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006514:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8006518:	4c0c      	ldr	r4, [pc, #48]	; (800654c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800651a:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800651e:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006524:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006526:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006528:	f7ff ffbc 	bl	80064a4 <HAL_InitTick>
 800652c:	b110      	cbz	r0, 8006534 <HAL_Init+0x44>
    return HAL_ERROR;
 800652e:	2401      	movs	r4, #1
}
 8006530:	4620      	mov	r0, r4
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	4604      	mov	r4, r0
  HAL_MspInit();
 8006536:	f7fe fae5 	bl	8004b04 <HAL_MspInit>
}
 800653a:	4620      	mov	r0, r4
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	bf00      	nop
 8006540:	0800b0e8 	.word	0x0800b0e8
 8006544:	24000004 	.word	0x24000004
 8006548:	58024400 	.word	0x58024400
 800654c:	24000000 	.word	0x24000000

08006550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006550:	4a03      	ldr	r2, [pc, #12]	; (8006560 <HAL_IncTick+0x10>)
 8006552:	4b04      	ldr	r3, [pc, #16]	; (8006564 <HAL_IncTick+0x14>)
 8006554:	6811      	ldr	r1, [r2, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	440b      	add	r3, r1
 800655a:	6013      	str	r3, [r2, #0]
}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	24011bb8 	.word	0x24011bb8
 8006564:	2400106c 	.word	0x2400106c

08006568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <HAL_GetTick+0x8>)
 800656a:	6818      	ldr	r0, [r3, #0]
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	24011bb8 	.word	0x24011bb8

08006574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006578:	f7ff fff6 	bl	8006568 <HAL_GetTick>
 800657c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800657e:	1c63      	adds	r3, r4, #1
 8006580:	d002      	beq.n	8006588 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006582:	4b04      	ldr	r3, [pc, #16]	; (8006594 <HAL_Delay+0x20>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006588:	f7ff ffee 	bl	8006568 <HAL_GetTick>
 800658c:	1b43      	subs	r3, r0, r5
 800658e:	42a3      	cmp	r3, r4
 8006590:	d3fa      	bcc.n	8006588 <HAL_Delay+0x14>
  {
  }
}
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	2400106c 	.word	0x2400106c

08006598 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <HAL_GetREVID+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
}
 800659c:	0c00      	lsrs	r0, r0, #16
 800659e:	4770      	bx	lr
 80065a0:	5c001000 	.word	0x5c001000

080065a4 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80065a4:	4a03      	ldr	r2, [pc, #12]	; (80065b4 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80065a6:	6853      	ldr	r3, [r2, #4]
 80065a8:	ea23 0000 	bic.w	r0, r3, r0
 80065ac:	4301      	orrs	r1, r0
 80065ae:	6051      	str	r1, [r2, #4]
}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	58000400 	.word	0x58000400

080065b8 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80065b8:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <HAL_EnableCompensationCell+0xc>)
 80065ba:	6a13      	ldr	r3, [r2, #32]
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6213      	str	r3, [r2, #32]
}
 80065c2:	4770      	bx	lr
 80065c4:	58000400 	.word	0x58000400

080065c8 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065c8:	4a40      	ldr	r2, [pc, #256]	; (80066cc <HAL_ADC_PollForConversion+0x104>)
 80065ca:	6803      	ldr	r3, [r0, #0]
 80065cc:	4293      	cmp	r3, r2
{
 80065ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d2:	4606      	mov	r6, r0
 80065d4:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065d6:	d044      	beq.n	8006662 <HAL_ADC_PollForConversion+0x9a>
 80065d8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80065dc:	4293      	cmp	r3, r2
 80065de:	d040      	beq.n	8006662 <HAL_ADC_PollForConversion+0x9a>
 80065e0:	4a3b      	ldr	r2, [pc, #236]	; (80066d0 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80065e2:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80065e4:	6897      	ldr	r7, [r2, #8]
 80065e6:	2c08      	cmp	r4, #8
 80065e8:	f007 071f 	and.w	r7, r7, #31
 80065ec:	d00a      	beq.n	8006604 <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065ee:	2f09      	cmp	r7, #9
 80065f0:	d84d      	bhi.n	800668e <HAL_ADC_PollForConversion+0xc6>
 80065f2:	f240 2121 	movw	r1, #545	; 0x221
 80065f6:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80065f8:	07c9      	lsls	r1, r1, #31
 80065fa:	d548      	bpl.n	800668e <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	07da      	lsls	r2, r3, #31
 8006600:	d449      	bmi.n	8006696 <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006602:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006604:	f7ff ffb0 	bl	8006568 <HAL_GetTick>
 8006608:	6832      	ldr	r2, [r6, #0]
 800660a:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800660c:	e001      	b.n	8006612 <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	1c6b      	adds	r3, r5, #1
 8006610:	d129      	bne.n	8006666 <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	4223      	tst	r3, r4
 8006616:	d0fa      	beq.n	800660e <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006618:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800661a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800661e:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006620:	68d3      	ldr	r3, [r2, #12]
 8006622:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006626:	d10f      	bne.n	8006648 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006628:	7d73      	ldrb	r3, [r6, #21]
 800662a:	b96b      	cbnz	r3, 8006648 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	0718      	lsls	r0, r3, #28
 8006630:	d50a      	bpl.n	8006648 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006632:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006638:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800663a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800663c:	04d9      	lsls	r1, r3, #19
 800663e:	d403      	bmi.n	8006648 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006640:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006648:	4b22      	ldr	r3, [pc, #136]	; (80066d4 <HAL_ADC_PollForConversion+0x10c>)
 800664a:	429a      	cmp	r2, r3
 800664c:	d02e      	beq.n	80066ac <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800664e:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006650:	2c08      	cmp	r4, #8
 8006652:	d027      	beq.n	80066a4 <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006654:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8006658:	d134      	bne.n	80066c4 <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800665a:	230c      	movs	r3, #12
 800665c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006662:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_ADC_PollForConversion+0x110>)
 8006664:	e7bd      	b.n	80065e2 <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006666:	f7ff ff7f 	bl	8006568 <HAL_GetTick>
 800666a:	eba0 0008 	sub.w	r0, r0, r8
 800666e:	6832      	ldr	r2, [r6, #0]
 8006670:	42a8      	cmp	r0, r5
 8006672:	d801      	bhi.n	8006678 <HAL_ADC_PollForConversion+0xb0>
 8006674:	2d00      	cmp	r5, #0
 8006676:	d1cc      	bne.n	8006612 <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006678:	6813      	ldr	r3, [r2, #0]
 800667a:	4023      	ands	r3, r4
 800667c:	d1c9      	bne.n	8006612 <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800667e:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006680:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8006682:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006686:	f042 0204 	orr.w	r2, r2, #4
 800668a:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 800668c:	e7e7      	b.n	800665e <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800668e:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006690:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006694:	d0b5      	beq.n	8006602 <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006696:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 8006698:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800669a:	f043 0320 	orr.w	r3, r3, #32
 800669e:	6573      	str	r3, [r6, #84]	; 0x54
}
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80066a4:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80066a6:	6014      	str	r4, [r2, #0]
}
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066ac:	2f09      	cmp	r7, #9
 80066ae:	d902      	bls.n	80066b6 <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <HAL_ADC_PollForConversion+0x104>)
 80066b2:	68d8      	ldr	r0, [r3, #12]
 80066b4:	e7cc      	b.n	8006650 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066b6:	f240 2321 	movw	r3, #545	; 0x221
 80066ba:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066be:	07fb      	lsls	r3, r7, #31
 80066c0:	d4c5      	bmi.n	800664e <HAL_ADC_PollForConversion+0x86>
 80066c2:	e7f5      	b.n	80066b0 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 80066c4:	2000      	movs	r0, #0
}
 80066c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ca:	bf00      	nop
 80066cc:	40022000 	.word	0x40022000
 80066d0:	58026300 	.word	0x58026300
 80066d4:	40022100 	.word	0x40022100
 80066d8:	40022300 	.word	0x40022300

080066dc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80066dc:	6803      	ldr	r3, [r0, #0]
 80066de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80066e6:	2200      	movs	r2, #0
{
 80066e8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80066ea:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066ec:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80066f0:	2a01      	cmp	r2, #1
 80066f2:	f000 813a 	beq.w	800696a <HAL_ADC_ConfigChannel+0x286>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066fa:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80066fc:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006700:	6894      	ldr	r4, [r2, #8]
 8006702:	0766      	lsls	r6, r4, #29
 8006704:	f100 8099 	bmi.w	800683a <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006708:	680c      	ldr	r4, [r1, #0]
 800670a:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800670e:	2d00      	cmp	r5, #0
 8006710:	f040 809e 	bne.w	8006850 <HAL_ADC_ConfigChannel+0x16c>
 8006714:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006718:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800671c:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800671e:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006720:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006722:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8006724:	4034      	ands	r4, r6
 8006726:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006728:	f102 0530 	add.w	r5, r2, #48	; 0x30
 800672c:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8006730:	40a6      	lsls	r6, r4
 8006732:	61d0      	str	r0, [r2, #28]
 8006734:	fa0c f404 	lsl.w	r4, ip, r4
 8006738:	5978      	ldr	r0, [r7, r5]
 800673a:	ea20 0006 	bic.w	r0, r0, r6
 800673e:	4320      	orrs	r0, r4
 8006740:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006742:	6890      	ldr	r0, [r2, #8]
 8006744:	0745      	lsls	r5, r0, #29
 8006746:	f100 8081 	bmi.w	800684c <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800674a:	6895      	ldr	r5, [r2, #8]
 800674c:	f015 0508 	ands.w	r5, r5, #8
 8006750:	d157      	bne.n	8006802 <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006752:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006754:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006758:	2007      	movs	r0, #7
 800675a:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800675c:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006760:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006764:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8006768:	fa00 fe04 	lsl.w	lr, r0, r4
 800676c:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006770:	4fc3      	ldr	r7, [pc, #780]	; (8006a80 <HAL_ADC_ConfigChannel+0x39c>)
 8006772:	f85c 0006 	ldr.w	r0, [ip, r6]
 8006776:	ea20 000e 	bic.w	r0, r0, lr
 800677a:	4320      	orrs	r0, r4
 800677c:	f84c 0006 	str.w	r0, [ip, r6]
 8006780:	6838      	ldr	r0, [r7, #0]
 8006782:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006786:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800678a:	f000 8098 	beq.w	80068be <HAL_ADC_ConfigChannel+0x1da>
 800678e:	68d0      	ldr	r0, [r2, #12]
 8006790:	68d6      	ldr	r6, [r2, #12]
 8006792:	f010 0f10 	tst.w	r0, #16
 8006796:	6948      	ldr	r0, [r1, #20]
 8006798:	f040 8107 	bne.w	80069aa <HAL_ADC_ConfigChannel+0x2c6>
 800679c:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80067a0:	0076      	lsls	r6, r6, #1
 80067a2:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80067a6:	690f      	ldr	r7, [r1, #16]
 80067a8:	2f04      	cmp	r7, #4
 80067aa:	f000 80e1 	beq.w	8006970 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067ae:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80067b2:	6808      	ldr	r0, [r1, #0]
 80067b4:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80067b8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80067bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80067c0:	ea40 000c 	orr.w	r0, r0, ip
 80067c4:	4330      	orrs	r0, r6
 80067c6:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80067ca:	7e4f      	ldrb	r7, [r1, #25]
 80067cc:	690e      	ldr	r6, [r1, #16]
 80067ce:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80067d0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80067d4:	bf0c      	ite	eq
 80067d6:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80067da:	2700      	movne	r7, #0
 80067dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80067e0:	4338      	orrs	r0, r7
 80067e2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80067e6:	7e0c      	ldrb	r4, [r1, #24]
 80067e8:	6908      	ldr	r0, [r1, #16]
 80067ea:	2c01      	cmp	r4, #1
 80067ec:	d104      	bne.n	80067f8 <HAL_ADC_ConfigChannel+0x114>
 80067ee:	f000 001f 	and.w	r0, r0, #31
 80067f2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80067f6:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80067f8:	6910      	ldr	r0, [r2, #16]
 80067fa:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80067fe:	4305      	orrs	r5, r0
 8006800:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006802:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006804:	07c4      	lsls	r4, r0, #31
 8006806:	d416      	bmi.n	8006836 <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006808:	68ce      	ldr	r6, [r1, #12]
 800680a:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800680c:	f006 0718 	and.w	r7, r6, #24
 8006810:	4c9c      	ldr	r4, [pc, #624]	; (8006a84 <HAL_ADC_ConfigChannel+0x3a0>)
 8006812:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8006816:	40fc      	lsrs	r4, r7
 8006818:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800681c:	f8df c288 	ldr.w	ip, [pc, #648]	; 8006aa8 <HAL_ADC_ConfigChannel+0x3c4>
 8006820:	4004      	ands	r4, r0
 8006822:	ea25 0507 	bic.w	r5, r5, r7
 8006826:	4566      	cmp	r6, ip
 8006828:	ea44 0405 	orr.w	r4, r4, r5
 800682c:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8006830:	d04d      	beq.n	80068ce <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006832:	2800      	cmp	r0, #0
 8006834:	db15      	blt.n	8006862 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006836:	2000      	movs	r0, #0
 8006838:	e003      	b.n	8006842 <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800683a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683c:	f042 0220 	orr.w	r2, r2, #32
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006848:	b003      	add	sp, #12
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800684c:	6890      	ldr	r0, [r2, #8]
 800684e:	e7d8      	b.n	8006802 <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006854:	b115      	cbz	r5, 800685c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006856:	fab5 f585 	clz	r5, r5
 800685a:	40a8      	lsls	r0, r5
 800685c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006860:	e75c      	b.n	800671c <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006862:	4989      	ldr	r1, [pc, #548]	; (8006a88 <HAL_ADC_ConfigChannel+0x3a4>)
 8006864:	428a      	cmp	r2, r1
 8006866:	f000 80c6 	beq.w	80069f6 <HAL_ADC_ConfigChannel+0x312>
 800686a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800686e:	428a      	cmp	r2, r1
 8006870:	f000 80c1 	beq.w	80069f6 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006874:	4e85      	ldr	r6, [pc, #532]	; (8006a8c <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006876:	4d86      	ldr	r5, [pc, #536]	; (8006a90 <HAL_ADC_ConfigChannel+0x3ac>)
 8006878:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800687a:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800687c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006880:	43e4      	mvns	r4, r4
 8006882:	f004 0401 	and.w	r4, r4, #1
 8006886:	2c00      	cmp	r4, #0
 8006888:	f000 80c3 	beq.w	8006a12 <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800688c:	4c81      	ldr	r4, [pc, #516]	; (8006a94 <HAL_ADC_ConfigChannel+0x3b0>)
 800688e:	42a0      	cmp	r0, r4
 8006890:	f000 810c 	beq.w	8006aac <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006894:	4c80      	ldr	r4, [pc, #512]	; (8006a98 <HAL_ADC_ConfigChannel+0x3b4>)
 8006896:	42a0      	cmp	r0, r4
 8006898:	f000 812b 	beq.w	8006af2 <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800689c:	4c7f      	ldr	r4, [pc, #508]	; (8006a9c <HAL_ADC_ConfigChannel+0x3b8>)
 800689e:	42a0      	cmp	r0, r4
 80068a0:	d1c9      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80068a2:	0249      	lsls	r1, r1, #9
 80068a4:	d4c7      	bmi.n	8006836 <HAL_ADC_ConfigChannel+0x152>
 80068a6:	4979      	ldr	r1, [pc, #484]	; (8006a8c <HAL_ADC_ConfigChannel+0x3a8>)
 80068a8:	428a      	cmp	r2, r1
 80068aa:	d1c4      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80068ac:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ae:	2000      	movs	r0, #0
 80068b0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80068b4:	4332      	orrs	r2, r6
 80068b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80068ba:	60aa      	str	r2, [r5, #8]
}
 80068bc:	e7c1      	b.n	8006842 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068be:	68d6      	ldr	r6, [r2, #12]
 80068c0:	6948      	ldr	r0, [r1, #20]
 80068c2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80068c6:	0076      	lsls	r6, r6, #1
 80068c8:	fa00 f606 	lsl.w	r6, r0, r6
 80068cc:	e76b      	b.n	80067a6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	d071      	beq.n	80069b6 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d2:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	f000 80af 	beq.w	8006a3a <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80068dc:	fab4 f484 	clz	r4, r4
 80068e0:	3401      	adds	r4, #1
 80068e2:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e6:	2c09      	cmp	r4, #9
 80068e8:	f240 80a7 	bls.w	8006a3a <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ec:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	f000 8112 	beq.w	8006b1a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80068f6:	fab5 f585 	clz	r5, r5
 80068fa:	3501      	adds	r5, #1
 80068fc:	06ad      	lsls	r5, r5, #26
 80068fe:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006902:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006906:	2c00      	cmp	r4, #0
 8006908:	f000 8105 	beq.w	8006b16 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 800690c:	2601      	movs	r6, #1
 800690e:	fab4 f484 	clz	r4, r4
 8006912:	4434      	add	r4, r6
 8006914:	f004 041f 	and.w	r4, r4, #31
 8006918:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800691c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006922:	2800      	cmp	r0, #0
 8006924:	f000 80f5 	beq.w	8006b12 <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8006928:	fab0 f480 	clz	r4, r0
 800692c:	3401      	adds	r4, #1
 800692e:	f004 041f 	and.w	r4, r4, #31
 8006932:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006936:	f1a4 001e 	sub.w	r0, r4, #30
 800693a:	0500      	lsls	r0, r0, #20
 800693c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006940:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8006942:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006946:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800694a:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800694c:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 800694e:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006952:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8006956:	fa0c fc00 	lsl.w	ip, ip, r0
 800695a:	4086      	lsls	r6, r0
 800695c:	597c      	ldr	r4, [r7, r5]
 800695e:	ea24 000c 	bic.w	r0, r4, ip
 8006962:	4330      	orrs	r0, r6
 8006964:	5178      	str	r0, [r7, r5]
 8006966:	6808      	ldr	r0, [r1, #0]
}
 8006968:	e763      	b.n	8006832 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 800696a:	2002      	movs	r0, #2
}
 800696c:	b003      	add	sp, #12
 800696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006970:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006972:	680d      	ldr	r5, [r1, #0]
 8006974:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006978:	06ac      	lsls	r4, r5, #26
 800697a:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 800697e:	d030      	beq.n	80069e2 <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006980:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006982:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006986:	4284      	cmp	r4, r0
 8006988:	d026      	beq.n	80069d8 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800698a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800698c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006990:	4284      	cmp	r4, r0
 8006992:	d02b      	beq.n	80069ec <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006994:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006996:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800699a:	4284      	cmp	r4, r0
 800699c:	f47f af31 	bne.w	8006802 <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80069a0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80069a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069a6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80069a8:	e72b      	b.n	8006802 <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069aa:	0876      	lsrs	r6, r6, #1
 80069ac:	f006 0608 	and.w	r6, r6, #8
 80069b0:	fa00 f606 	lsl.w	r6, r0, r6
 80069b4:	e6f7      	b.n	80067a6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069b6:	0e80      	lsrs	r0, r0, #26
 80069b8:	1c44      	adds	r4, r0, #1
 80069ba:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069be:	2e09      	cmp	r6, #9
 80069c0:	d82d      	bhi.n	8006a1e <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069c2:	06a5      	lsls	r5, r4, #26
 80069c4:	2401      	movs	r4, #1
 80069c6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80069ca:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80069ce:	fa04 f606 	lsl.w	r6, r4, r6
 80069d2:	0500      	lsls	r0, r0, #20
 80069d4:	4335      	orrs	r5, r6
 80069d6:	e7b3      	b.n	8006940 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80069d8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80069da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069de:	6650      	str	r0, [r2, #100]	; 0x64
 80069e0:	e7d3      	b.n	800698a <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80069e2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80069e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069e8:	6610      	str	r0, [r2, #96]	; 0x60
 80069ea:	e7c9      	b.n	8006980 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80069ec:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80069ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069f2:	6690      	str	r0, [r2, #104]	; 0x68
 80069f4:	e7ce      	b.n	8006994 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80069f6:	492a      	ldr	r1, [pc, #168]	; (8006aa0 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069f8:	4e23      	ldr	r6, [pc, #140]	; (8006a88 <HAL_ADC_ConfigChannel+0x3a4>)
 80069fa:	4c2a      	ldr	r4, [pc, #168]	; (8006aa4 <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069fc:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80069fe:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a00:	68b7      	ldr	r7, [r6, #8]
 8006a02:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006a04:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a08:	433c      	orrs	r4, r7
 8006a0a:	43e4      	mvns	r4, r4
 8006a0c:	f004 0401 	and.w	r4, r4, #1
 8006a10:	e739      	b.n	8006886 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006a14:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a16:	f042 0220 	orr.w	r2, r2, #32
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006a1c:	e711      	b.n	8006842 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a1e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006a22:	2701      	movs	r7, #1
 8006a24:	06a5      	lsls	r5, r4, #26
 8006a26:	381e      	subs	r0, #30
 8006a28:	fa07 f606 	lsl.w	r6, r7, r6
 8006a2c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006a30:	0500      	lsls	r0, r0, #20
 8006a32:	4335      	orrs	r5, r6
 8006a34:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006a38:	e782      	b.n	8006940 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006a3e:	2c00      	cmp	r4, #0
 8006a40:	d073      	beq.n	8006b2a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006a42:	fab4 f484 	clz	r4, r4
 8006a46:	3401      	adds	r4, #1
 8006a48:	06a4      	lsls	r4, r4, #26
 8006a4a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a4e:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d067      	beq.n	8006b26 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8006a56:	2501      	movs	r5, #1
 8006a58:	fab6 f686 	clz	r6, r6
 8006a5c:	442e      	add	r6, r5
 8006a5e:	f006 061f 	and.w	r6, r6, #31
 8006a62:	40b5      	lsls	r5, r6
 8006a64:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d058      	beq.n	8006b20 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006a6e:	fab0 f480 	clz	r4, r0
 8006a72:	3401      	adds	r4, #1
 8006a74:	f004 041f 	and.w	r4, r4, #31
 8006a78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006a7c:	0520      	lsls	r0, r4, #20
 8006a7e:	e75f      	b.n	8006940 <HAL_ADC_ConfigChannel+0x25c>
 8006a80:	5c001000 	.word	0x5c001000
 8006a84:	000fffff 	.word	0x000fffff
 8006a88:	40022000 	.word	0x40022000
 8006a8c:	58026000 	.word	0x58026000
 8006a90:	58026300 	.word	0x58026300
 8006a94:	cb840000 	.word	0xcb840000
 8006a98:	c7520000 	.word	0xc7520000
 8006a9c:	cfb80000 	.word	0xcfb80000
 8006aa0:	40022300 	.word	0x40022300
 8006aa4:	40022100 	.word	0x40022100
 8006aa8:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006aac:	0208      	lsls	r0, r1, #8
 8006aae:	f53f aec2 	bmi.w	8006836 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ab2:	491f      	ldr	r1, [pc, #124]	; (8006b30 <HAL_ADC_ConfigChannel+0x44c>)
 8006ab4:	428a      	cmp	r2, r1
 8006ab6:	f47f aebe 	bne.w	8006836 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006aba:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <HAL_ADC_ConfigChannel+0x450>)
 8006abc:	481e      	ldr	r0, [pc, #120]	; (8006b38 <HAL_ADC_ConfigChannel+0x454>)
 8006abe:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006ac0:	68a9      	ldr	r1, [r5, #8]
 8006ac2:	0992      	lsrs	r2, r2, #6
 8006ac4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006ac8:	fba0 0202 	umull	r0, r2, r0, r2
 8006acc:	4331      	orrs	r1, r6
 8006ace:	0992      	lsrs	r2, r2, #6
 8006ad0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006ad4:	3201      	adds	r2, #1
 8006ad6:	60a9      	str	r1, [r5, #8]
 8006ad8:	0052      	lsls	r2, r2, #1
 8006ada:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006adc:	9a01      	ldr	r2, [sp, #4]
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	f43f aea9 	beq.w	8006836 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8006ae4:	9a01      	ldr	r2, [sp, #4]
 8006ae6:	3a01      	subs	r2, #1
 8006ae8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	2a00      	cmp	r2, #0
 8006aee:	d1f9      	bne.n	8006ae4 <HAL_ADC_ConfigChannel+0x400>
 8006af0:	e6a1      	b.n	8006836 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006af2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8006af6:	f47f ae9e 	bne.w	8006836 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006afa:	490d      	ldr	r1, [pc, #52]	; (8006b30 <HAL_ADC_ConfigChannel+0x44c>)
 8006afc:	428a      	cmp	r2, r1
 8006afe:	f47f ae9a 	bne.w	8006836 <HAL_ADC_ConfigChannel+0x152>
 8006b02:	68aa      	ldr	r2, [r5, #8]
 8006b04:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006b08:	4332      	orrs	r2, r6
 8006b0a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006b0e:	60aa      	str	r2, [r5, #8]
}
 8006b10:	e697      	b.n	8006842 <HAL_ADC_ConfigChannel+0x15e>
 8006b12:	480a      	ldr	r0, [pc, #40]	; (8006b3c <HAL_ADC_ConfigChannel+0x458>)
 8006b14:	e714      	b.n	8006940 <HAL_ADC_ConfigChannel+0x25c>
 8006b16:	2402      	movs	r4, #2
 8006b18:	e700      	b.n	800691c <HAL_ADC_ConfigChannel+0x238>
 8006b1a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006b1e:	e6f0      	b.n	8006902 <HAL_ADC_ConfigChannel+0x21e>
 8006b20:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006b24:	e70c      	b.n	8006940 <HAL_ADC_ConfigChannel+0x25c>
 8006b26:	2502      	movs	r5, #2
 8006b28:	e79c      	b.n	8006a64 <HAL_ADC_ConfigChannel+0x380>
 8006b2a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006b2e:	e78e      	b.n	8006a4e <HAL_ADC_ConfigChannel+0x36a>
 8006b30:	58026000 	.word	0x58026000
 8006b34:	24000000 	.word	0x24000000
 8006b38:	053e2d63 	.word	0x053e2d63
 8006b3c:	fe500000 	.word	0xfe500000

08006b40 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b40:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	07d1      	lsls	r1, r2, #31
 8006b46:	d501      	bpl.n	8006b4c <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b48:	2000      	movs	r0, #0
}
 8006b4a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b4c:	6899      	ldr	r1, [r3, #8]
 8006b4e:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <ADC_Enable+0x94>)
 8006b50:	4211      	tst	r1, r2
{
 8006b52:	b570      	push	{r4, r5, r6, lr}
 8006b54:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b56:	d008      	beq.n	8006b6a <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8006b5a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b5c:	f043 0310 	orr.w	r3, r3, #16
 8006b60:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b64:	4303      	orrs	r3, r0
 8006b66:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <ADC_Enable+0x98>)
 8006b6e:	400a      	ands	r2, r1
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006b76:	f7ff fcf7 	bl	8006568 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006b7e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d01f      	beq.n	8006bc4 <ADC_Enable+0x84>
 8006b84:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d01b      	beq.n	8006bc4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <ADC_Enable+0xa0>)
 8006b8e:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	07d6      	lsls	r6, r2, #31
 8006b94:	d414      	bmi.n	8006bc0 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8006b96:	4e10      	ldr	r6, [pc, #64]	; (8006bd8 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b98:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b9a:	07d0      	lsls	r0, r2, #31
 8006b9c:	d404      	bmi.n	8006ba8 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	4032      	ands	r2, r6
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ba8:	f7ff fcde 	bl	8006568 <HAL_GetTick>
 8006bac:	1b43      	subs	r3, r0, r5
 8006bae:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bb0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006bb2:	d902      	bls.n	8006bba <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	07d1      	lsls	r1, r2, #31
 8006bb8:	d5ce      	bpl.n	8006b58 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	07d2      	lsls	r2, r2, #31
 8006bbe:	d5eb      	bpl.n	8006b98 <ADC_Enable+0x58>
  return HAL_OK;
 8006bc0:	2000      	movs	r0, #0
}
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006bc4:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <ADC_Enable+0xa4>)
 8006bc6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bc8:	06d2      	lsls	r2, r2, #27
 8006bca:	d0e1      	beq.n	8006b90 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bcc:	4a06      	ldr	r2, [pc, #24]	; (8006be8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d1de      	bne.n	8006b90 <ADC_Enable+0x50>
 8006bd2:	e7f5      	b.n	8006bc0 <ADC_Enable+0x80>
 8006bd4:	8000003f 	.word	0x8000003f
 8006bd8:	7fffffc0 	.word	0x7fffffc0
 8006bdc:	40022000 	.word	0x40022000
 8006be0:	58026300 	.word	0x58026300
 8006be4:	40022300 	.word	0x40022300
 8006be8:	40022100 	.word	0x40022100

08006bec <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bec:	4a39      	ldr	r2, [pc, #228]	; (8006cd4 <HAL_ADC_Start+0xe8>)
 8006bee:	6803      	ldr	r3, [r0, #0]
 8006bf0:	4293      	cmp	r3, r2
{
 8006bf2:	b570      	push	{r4, r5, r6, lr}
 8006bf4:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bf6:	d045      	beq.n	8006c84 <HAL_ADC_Start+0x98>
 8006bf8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d041      	beq.n	8006c84 <HAL_ADC_Start+0x98>
 8006c00:	4a35      	ldr	r2, [pc, #212]	; (8006cd8 <HAL_ADC_Start+0xec>)
 8006c02:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c04:	689d      	ldr	r5, [r3, #8]
 8006c06:	f015 0504 	ands.w	r5, r5, #4
 8006c0a:	d141      	bne.n	8006c90 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8006c0c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d03d      	beq.n	8006c90 <HAL_ADC_Start+0xa4>
 8006c14:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8006c16:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006c18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006c1c:	f7ff ff90 	bl	8006b40 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d137      	bne.n	8006c94 <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 8006c24:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006c26:	f006 061f 	and.w	r6, r6, #31
 8006c2a:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c2c:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8006c2e:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c30:	492b      	ldr	r1, [pc, #172]	; (8006ce0 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 8006c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c36:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 8006c38:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c3a:	d044      	beq.n	8006cc6 <HAL_ADC_Start+0xda>
 8006c3c:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c40:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006c44:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c4c:	d03f      	beq.n	8006cce <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c4e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006c50:	f022 0206 	bic.w	r2, r2, #6
 8006c54:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c56:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8006c58:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c5a:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c5c:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006c5e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c62:	d020      	beq.n	8006ca6 <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c64:	2e09      	cmp	r6, #9
 8006c66:	d918      	bls.n	8006c9a <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c6e:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006c70:	68cb      	ldr	r3, [r1, #12]
 8006c72:	019b      	lsls	r3, r3, #6
 8006c74:	d505      	bpl.n	8006c82 <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c80:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c84:	4a17      	ldr	r2, [pc, #92]	; (8006ce4 <HAL_ADC_Start+0xf8>)
 8006c86:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c88:	689d      	ldr	r5, [r3, #8]
 8006c8a:	f015 0504 	ands.w	r5, r5, #4
 8006c8e:	d0bd      	beq.n	8006c0c <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8006c90:	2002      	movs	r0, #2
}
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8006c94:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c9a:	f240 2221 	movw	r2, #545	; 0x221
 8006c9e:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ca2:	07f5      	lsls	r5, r6, #31
 8006ca4:	d5e0      	bpl.n	8006c68 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	0192      	lsls	r2, r2, #6
 8006caa:	d505      	bpl.n	8006cb8 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006cac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006cae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cb6:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006cb8:	6899      	ldr	r1, [r3, #8]
 8006cba:	4a0b      	ldr	r2, [pc, #44]	; (8006ce8 <HAL_ADC_Start+0xfc>)
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	f042 0204 	orr.w	r2, r2, #4
 8006cc2:	609a      	str	r2, [r3, #8]
}
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006cc6:	4903      	ldr	r1, [pc, #12]	; (8006cd4 <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	d0b8      	beq.n	8006c3e <HAL_ADC_Start+0x52>
 8006ccc:	e7bb      	b.n	8006c46 <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006cce:	65a2      	str	r2, [r4, #88]	; 0x58
 8006cd0:	e7c1      	b.n	8006c56 <HAL_ADC_Start+0x6a>
 8006cd2:	bf00      	nop
 8006cd4:	40022000 	.word	0x40022000
 8006cd8:	58026300 	.word	0x58026300
 8006cdc:	fffff0fe 	.word	0xfffff0fe
 8006ce0:	40022100 	.word	0x40022100
 8006ce4:	40022300 	.word	0x40022300
 8006ce8:	7fffffc0 	.word	0x7fffffc0

08006cec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006cec:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006cee:	4a5a      	ldr	r2, [pc, #360]	; (8006e58 <ADC_ConfigureBoostMode+0x16c>)
{
 8006cf0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d029      	beq.n	8006d4c <ADC_ConfigureBoostMode+0x60>
 8006cf8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d025      	beq.n	8006d4c <ADC_ConfigureBoostMode+0x60>
 8006d00:	4b56      	ldr	r3, [pc, #344]	; (8006e5c <ADC_ConfigureBoostMode+0x170>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b333      	cbz	r3, 8006d5e <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d10:	f002 fc62 	bl	80095d8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006d14:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006d16:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d1c:	f000 808b 	beq.w	8006e36 <ADC_ConfigureBoostMode+0x14a>
 8006d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d24:	d06f      	beq.n	8006e06 <ADC_ConfigureBoostMode+0x11a>
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2a:	f000 8084 	beq.w	8006e36 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006d2e:	f7ff fc33 	bl	8006598 <HAL_GetREVID>
 8006d32:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d36:	4298      	cmp	r0, r3
 8006d38:	d84e      	bhi.n	8006dd8 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8006d3a:	4b49      	ldr	r3, [pc, #292]	; (8006e60 <ADC_ConfigureBoostMode+0x174>)
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	d92d      	bls.n	8006d9c <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d40:	6822      	ldr	r2, [r4, #0]
 8006d42:	6893      	ldr	r3, [r2, #8]
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006d4c:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <ADC_ConfigureBoostMode+0x178>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006d54:	bf14      	ite	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	2300      	moveq	r3, #0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1d8      	bne.n	8006d10 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006d5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006d62:	f003 fd4d 	bl	800a800 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006d66:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006d68:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006d6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006d6e:	d06c      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x15e>
 8006d70:	d808      	bhi.n	8006d84 <ADC_ConfigureBoostMode+0x98>
 8006d72:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006d76:	d050      	beq.n	8006e1a <ADC_ConfigureBoostMode+0x12e>
 8006d78:	d916      	bls.n	8006da8 <ADC_ConfigureBoostMode+0xbc>
 8006d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d7e:	d1d6      	bne.n	8006d2e <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8006d80:	0945      	lsrs	r5, r0, #5
        break;
 8006d82:	e7d4      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006d84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006d88:	d045      	beq.n	8006e16 <ADC_ConfigureBoostMode+0x12a>
 8006d8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006d8e:	d1ce      	bne.n	8006d2e <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006d90:	f7ff fc02 	bl	8006598 <HAL_GetREVID>
 8006d94:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d98:	4298      	cmp	r0, r3
 8006d9a:	d840      	bhi.n	8006e1e <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	6893      	ldr	r3, [r2, #8]
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	6093      	str	r3, [r2, #8]
}
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8006da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dac:	d006      	beq.n	8006dbc <ADC_ConfigureBoostMode+0xd0>
 8006dae:	d90a      	bls.n	8006dc6 <ADC_ConfigureBoostMode+0xda>
 8006db0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006db4:	d002      	beq.n	8006dbc <ADC_ConfigureBoostMode+0xd0>
 8006db6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006dba:	d1b8      	bne.n	8006d2e <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006dbc:	0c9b      	lsrs	r3, r3, #18
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006dc4:	e7b3      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006dc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dca:	d0f7      	beq.n	8006dbc <ADC_ConfigureBoostMode+0xd0>
 8006dcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dd0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006dd4:	d0f2      	beq.n	8006dbc <ADC_ConfigureBoostMode+0xd0>
 8006dd6:	e7aa      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006dd8:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <ADC_ConfigureBoostMode+0x17c>)
 8006dda:	429d      	cmp	r5, r3
 8006ddc:	d805      	bhi.n	8006dea <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	6893      	ldr	r3, [r2, #8]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	6093      	str	r3, [r2, #8]
}
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006dea:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <ADC_ConfigureBoostMode+0x180>)
 8006dec:	429d      	cmp	r5, r3
 8006dee:	d91a      	bls.n	8006e26 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006df0:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006df2:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006df4:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006df6:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006df8:	d829      	bhi.n	8006e4e <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e02:	6093      	str	r3, [r2, #8]
}
 8006e04:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8006e06:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006e08:	f7ff fbc6 	bl	8006598 <HAL_GetREVID>
 8006e0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e10:	4298      	cmp	r0, r3
 8006e12:	d8e1      	bhi.n	8006dd8 <ADC_ConfigureBoostMode+0xec>
 8006e14:	e791      	b.n	8006d3a <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8006e16:	09c5      	lsrs	r5, r0, #7
        break;
 8006e18:	e789      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8006e1a:	0905      	lsrs	r5, r0, #4
        break;
 8006e1c:	e787      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <ADC_ConfigureBoostMode+0x17c>)
 8006e20:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006e24:	d2db      	bcs.n	8006dde <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e32:	6093      	str	r3, [r2, #8]
}
 8006e34:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006e3c:	f7ff fbac 	bl	8006598 <HAL_GetREVID>
 8006e40:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e44:	4298      	cmp	r0, r3
 8006e46:	d8c7      	bhi.n	8006dd8 <ADC_ConfigureBoostMode+0xec>
 8006e48:	e777      	b.n	8006d3a <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8006e4a:	0985      	lsrs	r5, r0, #6
        break;
 8006e4c:	e76f      	b.n	8006d2e <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006e4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006e52:	6093      	str	r3, [r2, #8]
}
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop
 8006e58:	40022000 	.word	0x40022000
 8006e5c:	58026300 	.word	0x58026300
 8006e60:	01312d00 	.word	0x01312d00
 8006e64:	40022300 	.word	0x40022300
 8006e68:	00bebc21 	.word	0x00bebc21
 8006e6c:	017d7841 	.word	0x017d7841
 8006e70:	02faf081 	.word	0x02faf081

08006e74 <HAL_ADC_Init>:
{
 8006e74:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006e76:	2300      	movs	r3, #0
{
 8006e78:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006e7a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f000 80d0 	beq.w	8007022 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e82:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006e84:	4604      	mov	r4, r0
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	f000 80ba 	beq.w	8007000 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e8c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e8e:	6893      	ldr	r3, [r2, #8]
 8006e90:	009d      	lsls	r5, r3, #2
 8006e92:	d503      	bpl.n	8006e9c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e94:	6891      	ldr	r1, [r2, #8]
 8006e96:	4b71      	ldr	r3, [pc, #452]	; (800705c <HAL_ADC_Init+0x1e8>)
 8006e98:	400b      	ands	r3, r1
 8006e9a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e9c:	6893      	ldr	r3, [r2, #8]
 8006e9e:	00d8      	lsls	r0, r3, #3
 8006ea0:	d416      	bmi.n	8006ed0 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ea2:	4b6f      	ldr	r3, [pc, #444]	; (8007060 <HAL_ADC_Init+0x1ec>)
 8006ea4:	4d6f      	ldr	r5, [pc, #444]	; (8007064 <HAL_ADC_Init+0x1f0>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006ea8:	6890      	ldr	r0, [r2, #8]
 8006eaa:	099b      	lsrs	r3, r3, #6
 8006eac:	496e      	ldr	r1, [pc, #440]	; (8007068 <HAL_ADC_Init+0x1f4>)
 8006eae:	fba5 5303 	umull	r5, r3, r5, r3
 8006eb2:	4001      	ands	r1, r0
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006eba:	3301      	adds	r3, #1
 8006ebc:	6091      	str	r1, [r2, #8]
 8006ebe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	b12b      	cbz	r3, 8006ed0 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006eca:	9b01      	ldr	r3, [sp, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1f9      	bne.n	8006ec4 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ed0:	6893      	ldr	r3, [r2, #8]
 8006ed2:	00d9      	lsls	r1, r3, #3
 8006ed4:	d424      	bmi.n	8006f20 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ed6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006ed8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eda:	f043 0310 	orr.w	r3, r3, #16
 8006ede:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee2:	432b      	orrs	r3, r5
 8006ee4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ee6:	6893      	ldr	r3, [r2, #8]
 8006ee8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006eec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006eee:	d11d      	bne.n	8006f2c <HAL_ADC_Init+0xb8>
 8006ef0:	06db      	lsls	r3, r3, #27
 8006ef2:	d41b      	bmi.n	8006f2c <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ef6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006efa:	f043 0302 	orr.w	r3, r3, #2
 8006efe:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f00:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f02:	07de      	lsls	r6, r3, #31
 8006f04:	d428      	bmi.n	8006f58 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f06:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_ADC_Init+0x1f8>)
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d017      	beq.n	8006f3c <HAL_ADC_Init+0xc8>
 8006f0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d013      	beq.n	8006f3c <HAL_ADC_Init+0xc8>
 8006f14:	4b56      	ldr	r3, [pc, #344]	; (8007070 <HAL_ADC_Init+0x1fc>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	07d9      	lsls	r1, r3, #31
 8006f1a:	d41d      	bmi.n	8006f58 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f1c:	4a55      	ldr	r2, [pc, #340]	; (8007074 <HAL_ADC_Init+0x200>)
 8006f1e:	e015      	b.n	8006f4c <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f20:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f22:	2500      	movs	r5, #0
 8006f24:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f2a:	d0e1      	beq.n	8006ef0 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006f2e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f30:	f043 0310 	orr.w	r3, r3, #16
}
 8006f34:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f36:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f3c:	4a4b      	ldr	r2, [pc, #300]	; (800706c <HAL_ADC_Init+0x1f8>)
 8006f3e:	4b4e      	ldr	r3, [pc, #312]	; (8007078 <HAL_ADC_Init+0x204>)
 8006f40:	6892      	ldr	r2, [r2, #8]
 8006f42:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	07d8      	lsls	r0, r3, #31
 8006f48:	d406      	bmi.n	8006f58 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	; (800707c <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006f4c:	6893      	ldr	r3, [r2, #8]
 8006f4e:	6861      	ldr	r1, [r4, #4]
 8006f50:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006f58:	f7ff fb1e 	bl	8006598 <HAL_GetREVID>
 8006f5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f60:	68a1      	ldr	r1, [r4, #8]
 8006f62:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006f64:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006f66:	d851      	bhi.n	800700c <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006f68:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006f6a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006f6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006f6e:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006f72:	4302      	orrs	r2, r0
 8006f74:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d103      	bne.n	8006f82 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006f7a:	6a23      	ldr	r3, [r4, #32]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f84:	b123      	cbz	r3, 8006f90 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f86:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006f8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f8c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f8e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	493b      	ldr	r1, [pc, #236]	; (8007080 <HAL_ADC_Init+0x20c>)
 8006f94:	68d8      	ldr	r0, [r3, #12]
 8006f96:	4001      	ands	r1, r0
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006fa2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fa4:	d11c      	bne.n	8006fe0 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006fa6:	0712      	lsls	r2, r2, #28
 8006fa8:	d41a      	bmi.n	8006fe0 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006faa:	68d9      	ldr	r1, [r3, #12]
 8006fac:	4a35      	ldr	r2, [pc, #212]	; (8007084 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006fae:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006fb4:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006fbc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006fc0:	2a01      	cmp	r2, #1
 8006fc2:	d03a      	beq.n	800703a <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006fcc:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006fce:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006fda:	f7ff fe87 	bl	8006cec <ADC_ConfigureBoostMode>
 8006fde:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fe0:	68e2      	ldr	r2, [r4, #12]
 8006fe2:	2a01      	cmp	r2, #1
 8006fe4:	d021      	beq.n	800702a <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe8:	f022 020f 	bic.w	r2, r2, #15
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006fee:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006ff0:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006ffc:	b002      	add	sp, #8
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007000:	f7fd fd92 	bl	8004b28 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007004:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8007006:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800700a:	e73f      	b.n	8006e8c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800700c:	2910      	cmp	r1, #16
 800700e:	d1ab      	bne.n	8006f68 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007010:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007012:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007014:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007016:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800701a:	430a      	orrs	r2, r1
 800701c:	f042 021c 	orr.w	r2, r2, #28
 8007020:	e7a9      	b.n	8006f76 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8007022:	2501      	movs	r5, #1
}
 8007024:	4628      	mov	r0, r5
 8007026:	b002      	add	sp, #8
 8007028:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800702a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800702c:	69a2      	ldr	r2, [r4, #24]
 800702e:	f021 010f 	bic.w	r1, r1, #15
 8007032:	3a01      	subs	r2, #1
 8007034:	430a      	orrs	r2, r1
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
 8007038:	e7d9      	b.n	8006fee <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800703a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800703e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8007040:	3901      	subs	r1, #1
 8007042:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007044:	4332      	orrs	r2, r6
 8007046:	691e      	ldr	r6, [r3, #16]
 8007048:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800704c:	490e      	ldr	r1, [pc, #56]	; (8007088 <HAL_ADC_Init+0x214>)
 800704e:	4302      	orrs	r2, r0
 8007050:	4031      	ands	r1, r6
 8007052:	430a      	orrs	r2, r1
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	611a      	str	r2, [r3, #16]
 800705a:	e7b7      	b.n	8006fcc <HAL_ADC_Init+0x158>
 800705c:	5fffffc0 	.word	0x5fffffc0
 8007060:	24000000 	.word	0x24000000
 8007064:	053e2d63 	.word	0x053e2d63
 8007068:	6fffffc0 	.word	0x6fffffc0
 800706c:	40022000 	.word	0x40022000
 8007070:	58026000 	.word	0x58026000
 8007074:	58026300 	.word	0x58026300
 8007078:	40022100 	.word	0x40022100
 800707c:	40022300 	.word	0x40022300
 8007080:	fff0c003 	.word	0xfff0c003
 8007084:	ffffbffc 	.word	0xffffbffc
 8007088:	fc00f81e 	.word	0xfc00f81e

0800708c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800708c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800708e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007092:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007094:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8007096:	2a01      	cmp	r2, #1
 8007098:	d04d      	beq.n	8007136 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800709a:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800709c:	4c2b      	ldr	r4, [pc, #172]	; (800714c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800709e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80070a0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80070a2:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80070a4:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80070a6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80070a8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80070ac:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80070ae:	d008      	beq.n	80070c2 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b0:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b6:	f041 0120 	orr.w	r1, r1, #32
 80070ba:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80070bc:	b01a      	add	sp, #104	; 0x68
 80070be:	bcf0      	pop	{r4, r5, r6, r7}
 80070c0:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80070c2:	4c23      	ldr	r4, [pc, #140]	; (8007150 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80070c4:	68a2      	ldr	r2, [r4, #8]
 80070c6:	0752      	lsls	r2, r2, #29
 80070c8:	d50b      	bpl.n	80070e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80070ca:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80070ce:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070d0:	f042 0220 	orr.w	r2, r2, #32
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80070dc:	b01a      	add	sp, #104	; 0x68
 80070de:	bcf0      	pop	{r4, r5, r6, r7}
 80070e0:	4770      	bx	lr
 80070e2:	68a8      	ldr	r0, [r5, #8]
 80070e4:	f010 0004 	ands.w	r0, r0, #4
 80070e8:	d1f0      	bne.n	80070cc <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070ea:	b1c6      	cbz	r6, 800711e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80070ec:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007158 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80070f0:	684f      	ldr	r7, [r1, #4]
 80070f2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80070f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80070fa:	433a      	orrs	r2, r7
 80070fc:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007100:	68ad      	ldr	r5, [r5, #8]
 8007102:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007104:	432a      	orrs	r2, r5
 8007106:	07d4      	lsls	r4, r2, #31
 8007108:	d413      	bmi.n	8007132 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800710a:	688a      	ldr	r2, [r1, #8]
 800710c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007110:	4910      	ldr	r1, [pc, #64]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8007112:	4316      	orrs	r6, r2
 8007114:	4021      	ands	r1, r4
 8007116:	430e      	orrs	r6, r1
 8007118:	f8cc 6008 	str.w	r6, [ip, #8]
 800711c:	e7db      	b.n	80070d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800711e:	490e      	ldr	r1, [pc, #56]	; (8007158 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8007120:	688a      	ldr	r2, [r1, #8]
 8007122:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007126:	608a      	str	r2, [r1, #8]
 8007128:	68a8      	ldr	r0, [r5, #8]
 800712a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800712c:	4302      	orrs	r2, r0
 800712e:	07d0      	lsls	r0, r2, #31
 8007130:	d505      	bpl.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007132:	2000      	movs	r0, #0
 8007134:	e7cf      	b.n	80070d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8007136:	2002      	movs	r0, #2
}
 8007138:	b01a      	add	sp, #104	; 0x68
 800713a:	bcf0      	pop	{r4, r5, r6, r7}
 800713c:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800713e:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007140:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8007144:	4022      	ands	r2, r4
 8007146:	608a      	str	r2, [r1, #8]
 8007148:	e7c5      	b.n	80070d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800714a:	bf00      	nop
 800714c:	40022000 	.word	0x40022000
 8007150:	40022100 	.word	0x40022100
 8007154:	fffff0e0 	.word	0xfffff0e0
 8007158:	40022300 	.word	0x40022300

0800715c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800715c:	4907      	ldr	r1, [pc, #28]	; (800717c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800715e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007162:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007164:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007168:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800716a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800716e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007174:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8007176:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007178:	60cb      	str	r3, [r1, #12]
 800717a:	4770      	bx	lr
 800717c:	e000ed00 	.word	0xe000ed00
 8007180:	05fa0000 	.word	0x05fa0000

08007184 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007184:	4b19      	ldr	r3, [pc, #100]	; (80071ec <HAL_NVIC_SetPriority+0x68>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800718c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800718e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007192:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007194:	2d04      	cmp	r5, #4
 8007196:	bf28      	it	cs
 8007198:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800719a:	2c06      	cmp	r4, #6
 800719c:	d919      	bls.n	80071d2 <HAL_NVIC_SetPriority+0x4e>
 800719e:	3b03      	subs	r3, #3
 80071a0:	f04f 34ff 	mov.w	r4, #4294967295
 80071a4:	409c      	lsls	r4, r3
 80071a6:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071aa:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80071ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b0:	fa04 f405 	lsl.w	r4, r4, r5
 80071b4:	ea21 0104 	bic.w	r1, r1, r4
 80071b8:	fa01 f103 	lsl.w	r1, r1, r3
 80071bc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80071c0:	db0a      	blt.n	80071d8 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c2:	0109      	lsls	r1, r1, #4
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <HAL_NVIC_SetPriority+0x6c>)
 80071c6:	b2c9      	uxtb	r1, r1
 80071c8:	4403      	add	r3, r0
 80071ca:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80071ce:	bc30      	pop	{r4, r5}
 80071d0:	4770      	bx	lr
 80071d2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071d4:	4613      	mov	r3, r2
 80071d6:	e7e8      	b.n	80071aa <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d8:	f000 000f 	and.w	r0, r0, #15
 80071dc:	0109      	lsls	r1, r1, #4
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_NVIC_SetPriority+0x70>)
 80071e0:	b2c9      	uxtb	r1, r1
 80071e2:	4403      	add	r3, r0
 80071e4:	7619      	strb	r1, [r3, #24]
 80071e6:	bc30      	pop	{r4, r5}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	e000ed00 	.word	0xe000ed00
 80071f0:	e000e100 	.word	0xe000e100
 80071f4:	e000ecfc 	.word	0xe000ecfc

080071f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80071f8:	2800      	cmp	r0, #0
 80071fa:	db07      	blt.n	800720c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071fc:	2301      	movs	r3, #1
 80071fe:	f000 011f 	and.w	r1, r0, #31
 8007202:	4a03      	ldr	r2, [pc, #12]	; (8007210 <HAL_NVIC_EnableIRQ+0x18>)
 8007204:	0940      	lsrs	r0, r0, #5
 8007206:	408b      	lsls	r3, r1
 8007208:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	e000e100 	.word	0xe000e100

08007214 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007214:	3801      	subs	r0, #1
 8007216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800721a:	d20d      	bcs.n	8007238 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800721c:	4b07      	ldr	r3, [pc, #28]	; (800723c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800721e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007220:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007222:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007224:	25f0      	movs	r5, #240	; 0xf0
 8007226:	4c06      	ldr	r4, [pc, #24]	; (8007240 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007228:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800722a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007232:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8007234:	bc30      	pop	{r4, r5}
 8007236:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007238:	2001      	movs	r0, #1
 800723a:	4770      	bx	lr
 800723c:	e000e010 	.word	0xe000e010
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007244:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800724a:	2000      	movs	r0, #0
 800724c:	4904      	ldr	r1, [pc, #16]	; (8007260 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800724e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007254:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8007256:	6048      	str	r0, [r1, #4]
}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000ed00 	.word	0xe000ed00
 8007260:	e000ed90 	.word	0xe000ed90

08007264 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007264:	4a06      	ldr	r2, [pc, #24]	; (8007280 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007266:	f040 0001 	orr.w	r0, r0, #1
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <HAL_MPU_Enable+0x20>)
 800726c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800726e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007274:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007276:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800727a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800727e:	4770      	bx	lr
 8007280:	e000ed00 	.word	0xe000ed00
 8007284:	e000ed90 	.word	0xe000ed90

08007288 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007288:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <HAL_MPU_ConfigRegion+0x4c>)
 800728a:	7843      	ldrb	r3, [r0, #1]
 800728c:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800728e:	7801      	ldrb	r1, [r0, #0]
 8007290:	b1e9      	cbz	r1, 80072ce <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8007292:	6843      	ldr	r3, [r0, #4]
{
 8007294:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8007296:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007298:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800729a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800729c:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800729e:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80072a0:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072a2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80072a6:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072a8:	430b      	orrs	r3, r1
 80072aa:	7a01      	ldrb	r1, [r0, #8]
 80072ac:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80072b0:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072b2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80072b6:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80072b8:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80072bc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80072c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80072c4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80072c8:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80072ca:	6113      	str	r3, [r2, #16]
}
 80072cc:	4770      	bx	lr
    MPU->RBAR = 0x00;
 80072ce:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80072d0:	6111      	str	r1, [r2, #16]
 80072d2:	4770      	bx	lr
 80072d4:	e000ed90 	.word	0xe000ed90

080072d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr_dma  = regs_dma->ISR;
  tmpisr_bdma = regs_bdma->ISR;

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072dc:	4a9f      	ldr	r2, [pc, #636]	; (800755c <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 80072de:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072e0:	4e9f      	ldr	r6, [pc, #636]	; (8007560 <HAL_DMA_IRQHandler+0x288>)
{
 80072e2:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072e4:	6803      	ldr	r3, [r0, #0]
{
 80072e6:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80072e8:	499e      	ldr	r1, [pc, #632]	; (8007564 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ea:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bf18      	it	ne
 80072f0:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80072f2:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072f4:	bf08      	it	eq
 80072f6:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80072f8:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 80072fa:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072fc:	bf18      	it	ne
 80072fe:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8007300:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0xc2>
 8007304:	3230      	adds	r2, #48	; 0x30
 8007306:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8007574 <HAL_DMA_IRQHandler+0x29c>
 800730a:	4897      	ldr	r0, [pc, #604]	; (8007568 <HAL_DMA_IRQHandler+0x290>)
 800730c:	4573      	cmp	r3, lr
 800730e:	bf18      	it	ne
 8007310:	4293      	cmpne	r3, r2
 8007312:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 8007316:	bf0c      	ite	eq
 8007318:	2201      	moveq	r2, #1
 800731a:	2200      	movne	r2, #0
 800731c:	4283      	cmp	r3, r0
 800731e:	bf08      	it	eq
 8007320:	f042 0201 	orreq.w	r2, r2, #1
 8007324:	3030      	adds	r0, #48	; 0x30
 8007326:	4573      	cmp	r3, lr
 8007328:	bf08      	it	eq
 800732a:	f042 0201 	orreq.w	r2, r2, #1
 800732e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007332:	4283      	cmp	r3, r0
 8007334:	bf08      	it	eq
 8007336:	f042 0201 	orreq.w	r2, r2, #1
 800733a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800733e:	4573      	cmp	r3, lr
 8007340:	bf08      	it	eq
 8007342:	f042 0201 	orreq.w	r2, r2, #1
 8007346:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800734a:	4283      	cmp	r3, r0
 800734c:	bf08      	it	eq
 800734e:	f042 0201 	orreq.w	r2, r2, #1
 8007352:	3030      	adds	r0, #48	; 0x30
 8007354:	4573      	cmp	r3, lr
 8007356:	bf08      	it	eq
 8007358:	f042 0201 	orreq.w	r2, r2, #1
 800735c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007360:	4283      	cmp	r3, r0
 8007362:	bf08      	it	eq
 8007364:	f042 0201 	orreq.w	r2, r2, #1
 8007368:	3030      	adds	r0, #48	; 0x30
 800736a:	4573      	cmp	r3, lr
 800736c:	bf08      	it	eq
 800736e:	f042 0201 	orreq.w	r2, r2, #1
 8007372:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007376:	4283      	cmp	r3, r0
 8007378:	bf08      	it	eq
 800737a:	f042 0201 	orreq.w	r2, r2, #1
 800737e:	3030      	adds	r0, #48	; 0x30
 8007380:	4573      	cmp	r3, lr
 8007382:	bf08      	it	eq
 8007384:	f042 0201 	orreq.w	r2, r2, #1
 8007388:	4283      	cmp	r3, r0
 800738a:	bf08      	it	eq
 800738c:	f042 0201 	orreq.w	r2, r2, #1
 8007390:	b91a      	cbnz	r2, 800739a <HAL_DMA_IRQHandler+0xc2>
 8007392:	4a76      	ldr	r2, [pc, #472]	; (800756c <HAL_DMA_IRQHandler+0x294>)
 8007394:	4293      	cmp	r3, r2
 8007396:	f040 820b 	bne.w	80077b0 <HAL_DMA_IRQHandler+0x4d8>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800739a:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800739e:	2208      	movs	r2, #8
 80073a0:	f001 0c1f 	and.w	ip, r1, #31
 80073a4:	fa02 f20c 	lsl.w	r2, r2, ip
 80073a8:	4217      	tst	r7, r2
 80073aa:	f040 818d 	bne.w	80076c8 <HAL_DMA_IRQHandler+0x3f0>
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ae:	fa27 f20c 	lsr.w	r2, r7, ip
 80073b2:	07d2      	lsls	r2, r2, #31
 80073b4:	d50c      	bpl.n	80073d0 <HAL_DMA_IRQHandler+0xf8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	0610      	lsls	r0, r2, #24
 80073ba:	d509      	bpl.n	80073d0 <HAL_DMA_IRQHandler+0xf8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073bc:	2201      	movs	r2, #1
 80073be:	fa02 f20c 	lsl.w	r2, r2, ip
 80073c2:	60a2      	str	r2, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073c4:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80073c8:	f042 0202 	orr.w	r2, r2, #2
 80073cc:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073d0:	f04f 0e04 	mov.w	lr, #4
 80073d4:	fa0e f00c 	lsl.w	r0, lr, ip
 80073d8:	4238      	tst	r0, r7
 80073da:	d05b      	beq.n	8007494 <HAL_DMA_IRQHandler+0x1bc>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073dc:	2e00      	cmp	r6, #0
 80073de:	d14f      	bne.n	8007480 <HAL_DMA_IRQHandler+0x1a8>
 80073e0:	4a63      	ldr	r2, [pc, #396]	; (8007570 <HAL_DMA_IRQHandler+0x298>)
 80073e2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8007574 <HAL_DMA_IRQHandler+0x29c>
 80073e6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8007568 <HAL_DMA_IRQHandler+0x290>
 80073ea:	454b      	cmp	r3, r9
 80073ec:	bf18      	it	ne
 80073ee:	4293      	cmpne	r3, r2
 80073f0:	f109 0948 	add.w	r9, r9, #72	; 0x48
 80073f4:	bf0c      	ite	eq
 80073f6:	2201      	moveq	r2, #1
 80073f8:	2200      	movne	r2, #0
 80073fa:	4543      	cmp	r3, r8
 80073fc:	bf08      	it	eq
 80073fe:	f042 0201 	orreq.w	r2, r2, #1
 8007402:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007406:	454b      	cmp	r3, r9
 8007408:	bf08      	it	eq
 800740a:	f042 0201 	orreq.w	r2, r2, #1
 800740e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007412:	4543      	cmp	r3, r8
 8007414:	bf08      	it	eq
 8007416:	f042 0201 	orreq.w	r2, r2, #1
 800741a:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800741e:	454b      	cmp	r3, r9
 8007420:	bf08      	it	eq
 8007422:	f042 0201 	orreq.w	r2, r2, #1
 8007426:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800742a:	4543      	cmp	r3, r8
 800742c:	bf08      	it	eq
 800742e:	f042 0201 	orreq.w	r2, r2, #1
 8007432:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007436:	454b      	cmp	r3, r9
 8007438:	bf08      	it	eq
 800743a:	f042 0201 	orreq.w	r2, r2, #1
 800743e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007442:	4543      	cmp	r3, r8
 8007444:	bf08      	it	eq
 8007446:	f042 0201 	orreq.w	r2, r2, #1
 800744a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800744e:	454b      	cmp	r3, r9
 8007450:	bf08      	it	eq
 8007452:	f042 0201 	orreq.w	r2, r2, #1
 8007456:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800745a:	4543      	cmp	r3, r8
 800745c:	bf08      	it	eq
 800745e:	f042 0201 	orreq.w	r2, r2, #1
 8007462:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007466:	454b      	cmp	r3, r9
 8007468:	bf08      	it	eq
 800746a:	f042 0201 	orreq.w	r2, r2, #1
 800746e:	4543      	cmp	r3, r8
 8007470:	bf08      	it	eq
 8007472:	f042 0201 	orreq.w	r2, r2, #1
 8007476:	b91a      	cbnz	r2, 8007480 <HAL_DMA_IRQHandler+0x1a8>
 8007478:	4a3c      	ldr	r2, [pc, #240]	; (800756c <HAL_DMA_IRQHandler+0x294>)
 800747a:	4293      	cmp	r3, r2
 800747c:	f040 822f 	bne.w	80078de <HAL_DMA_IRQHandler+0x606>
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	0792      	lsls	r2, r2, #30
 8007484:	d506      	bpl.n	8007494 <HAL_DMA_IRQHandler+0x1bc>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007486:	60a0      	str	r0, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007488:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800748c:	f042 0204 	orr.w	r2, r2, #4
 8007490:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007494:	2210      	movs	r2, #16
 8007496:	fa02 fc0c 	lsl.w	ip, r2, ip
 800749a:	ea1c 0f07 	tst.w	ip, r7
 800749e:	d06f      	beq.n	8007580 <HAL_DMA_IRQHandler+0x2a8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	d146      	bne.n	8007532 <HAL_DMA_IRQHandler+0x25a>
 80074a4:	4a32      	ldr	r2, [pc, #200]	; (8007570 <HAL_DMA_IRQHandler+0x298>)
 80074a6:	4833      	ldr	r0, [pc, #204]	; (8007574 <HAL_DMA_IRQHandler+0x29c>)
 80074a8:	4e2f      	ldr	r6, [pc, #188]	; (8007568 <HAL_DMA_IRQHandler+0x290>)
 80074aa:	4283      	cmp	r3, r0
 80074ac:	bf18      	it	ne
 80074ae:	4293      	cmpne	r3, r2
 80074b0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80074b4:	bf0c      	ite	eq
 80074b6:	2201      	moveq	r2, #1
 80074b8:	2200      	movne	r2, #0
 80074ba:	42b3      	cmp	r3, r6
 80074bc:	bf08      	it	eq
 80074be:	f042 0201 	orreq.w	r2, r2, #1
 80074c2:	3630      	adds	r6, #48	; 0x30
 80074c4:	4283      	cmp	r3, r0
 80074c6:	bf08      	it	eq
 80074c8:	f042 0201 	orreq.w	r2, r2, #1
 80074cc:	3030      	adds	r0, #48	; 0x30
 80074ce:	42b3      	cmp	r3, r6
 80074d0:	bf08      	it	eq
 80074d2:	f042 0201 	orreq.w	r2, r2, #1
 80074d6:	f506 765c 	add.w	r6, r6, #880	; 0x370
 80074da:	4283      	cmp	r3, r0
 80074dc:	bf08      	it	eq
 80074de:	f042 0201 	orreq.w	r2, r2, #1
 80074e2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80074e6:	42b3      	cmp	r3, r6
 80074e8:	bf08      	it	eq
 80074ea:	f042 0201 	orreq.w	r2, r2, #1
 80074ee:	3630      	adds	r6, #48	; 0x30
 80074f0:	4283      	cmp	r3, r0
 80074f2:	bf08      	it	eq
 80074f4:	f042 0201 	orreq.w	r2, r2, #1
 80074f8:	3030      	adds	r0, #48	; 0x30
 80074fa:	42b3      	cmp	r3, r6
 80074fc:	bf08      	it	eq
 80074fe:	f042 0201 	orreq.w	r2, r2, #1
 8007502:	3630      	adds	r6, #48	; 0x30
 8007504:	4283      	cmp	r3, r0
 8007506:	bf08      	it	eq
 8007508:	f042 0201 	orreq.w	r2, r2, #1
 800750c:	3030      	adds	r0, #48	; 0x30
 800750e:	42b3      	cmp	r3, r6
 8007510:	bf08      	it	eq
 8007512:	f042 0201 	orreq.w	r2, r2, #1
 8007516:	3630      	adds	r6, #48	; 0x30
 8007518:	4283      	cmp	r3, r0
 800751a:	bf08      	it	eq
 800751c:	f042 0201 	orreq.w	r2, r2, #1
 8007520:	42b3      	cmp	r3, r6
 8007522:	bf08      	it	eq
 8007524:	f042 0201 	orreq.w	r2, r2, #1
 8007528:	b91a      	cbnz	r2, 8007532 <HAL_DMA_IRQHandler+0x25a>
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <HAL_DMA_IRQHandler+0x294>)
 800752c:	4293      	cmp	r3, r2
 800752e:	f040 81de 	bne.w	80078ee <HAL_DMA_IRQHandler+0x616>
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8007538:	b312      	cbz	r2, 8007580 <HAL_DMA_IRQHandler+0x2a8>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800753a:	f8c4 c008 	str.w	ip, [r4, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	0352      	lsls	r2, r2, #13
 8007542:	f100 818b 	bmi.w	800785c <HAL_DMA_IRQHandler+0x584>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	05d6      	lsls	r6, r2, #23
 800754a:	d403      	bmi.n	8007554 <HAL_DMA_IRQHandler+0x27c>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	f022 0208 	bic.w	r2, r2, #8
 8007552:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007554:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007558:	b193      	cbz	r3, 8007580 <HAL_DMA_IRQHandler+0x2a8>
 800755a:	e00d      	b.n	8007578 <HAL_DMA_IRQHandler+0x2a0>
 800755c:	40020028 	.word	0x40020028
 8007560:	40020010 	.word	0x40020010
 8007564:	24000000 	.word	0x24000000
 8007568:	40020070 	.word	0x40020070
 800756c:	400204b8 	.word	0x400204b8
 8007570:	40020058 	.word	0x40020058
 8007574:	40020040 	.word	0x40020040
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007578:	4650      	mov	r0, sl
 800757a:	4798      	blx	r3
 800757c:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007580:	f001 011f 	and.w	r1, r1, #31
 8007584:	2620      	movs	r6, #32
 8007586:	408e      	lsls	r6, r1
 8007588:	423e      	tst	r6, r7
 800758a:	d06a      	beq.n	8007662 <HAL_DMA_IRQHandler+0x38a>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800758c:	f8da 2000 	ldr.w	r2, [sl]
 8007590:	4ba7      	ldr	r3, [pc, #668]	; (8007830 <HAL_DMA_IRQHandler+0x558>)
 8007592:	48a8      	ldr	r0, [pc, #672]	; (8007834 <HAL_DMA_IRQHandler+0x55c>)
 8007594:	4fa8      	ldr	r7, [pc, #672]	; (8007838 <HAL_DMA_IRQHandler+0x560>)
 8007596:	4282      	cmp	r2, r0
 8007598:	bf18      	it	ne
 800759a:	429a      	cmpne	r2, r3
 800759c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80075a0:	bf0c      	ite	eq
 80075a2:	2301      	moveq	r3, #1
 80075a4:	2300      	movne	r3, #0
 80075a6:	42ba      	cmp	r2, r7
 80075a8:	bf08      	it	eq
 80075aa:	f043 0301 	orreq.w	r3, r3, #1
 80075ae:	3730      	adds	r7, #48	; 0x30
 80075b0:	4282      	cmp	r2, r0
 80075b2:	bf08      	it	eq
 80075b4:	f043 0301 	orreq.w	r3, r3, #1
 80075b8:	3030      	adds	r0, #48	; 0x30
 80075ba:	42ba      	cmp	r2, r7
 80075bc:	bf08      	it	eq
 80075be:	f043 0301 	orreq.w	r3, r3, #1
 80075c2:	3730      	adds	r7, #48	; 0x30
 80075c4:	4282      	cmp	r2, r0
 80075c6:	bf08      	it	eq
 80075c8:	f043 0301 	orreq.w	r3, r3, #1
 80075cc:	3030      	adds	r0, #48	; 0x30
 80075ce:	42ba      	cmp	r2, r7
 80075d0:	bf08      	it	eq
 80075d2:	f043 0301 	orreq.w	r3, r3, #1
 80075d6:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80075da:	4282      	cmp	r2, r0
 80075dc:	bf08      	it	eq
 80075de:	f043 0301 	orreq.w	r3, r3, #1
 80075e2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80075e6:	42ba      	cmp	r2, r7
 80075e8:	bf08      	it	eq
 80075ea:	f043 0301 	orreq.w	r3, r3, #1
 80075ee:	3730      	adds	r7, #48	; 0x30
 80075f0:	4282      	cmp	r2, r0
 80075f2:	bf08      	it	eq
 80075f4:	f043 0301 	orreq.w	r3, r3, #1
 80075f8:	3030      	adds	r0, #48	; 0x30
 80075fa:	42ba      	cmp	r2, r7
 80075fc:	bf08      	it	eq
 80075fe:	f043 0301 	orreq.w	r3, r3, #1
 8007602:	3730      	adds	r7, #48	; 0x30
 8007604:	4282      	cmp	r2, r0
 8007606:	bf08      	it	eq
 8007608:	f043 0301 	orreq.w	r3, r3, #1
 800760c:	3030      	adds	r0, #48	; 0x30
 800760e:	42ba      	cmp	r2, r7
 8007610:	bf08      	it	eq
 8007612:	f043 0301 	orreq.w	r3, r3, #1
 8007616:	3730      	adds	r7, #48	; 0x30
 8007618:	4282      	cmp	r2, r0
 800761a:	bf08      	it	eq
 800761c:	f043 0301 	orreq.w	r3, r3, #1
 8007620:	42ba      	cmp	r2, r7
 8007622:	bf08      	it	eq
 8007624:	f043 0301 	orreq.w	r3, r3, #1
 8007628:	b91b      	cbnz	r3, 8007632 <HAL_DMA_IRQHandler+0x35a>
 800762a:	4b84      	ldr	r3, [pc, #528]	; (800783c <HAL_DMA_IRQHandler+0x564>)
 800762c:	429a      	cmp	r2, r3
 800762e:	f040 8173 	bne.w	8007918 <HAL_DMA_IRQHandler+0x640>
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007638:	b19b      	cbz	r3, 8007662 <HAL_DMA_IRQHandler+0x38a>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800763a:	60a6      	str	r6, [r4, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800763c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8007640:	2b04      	cmp	r3, #4
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007642:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007644:	f000 8114 	beq.w	8007870 <HAL_DMA_IRQHandler+0x598>
            hdma->XferAbortCallback(hdma);
          }
          return;
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007648:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800764c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800764e:	f000 812d 	beq.w	80078ac <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007652:	031c      	lsls	r4, r3, #12
 8007654:	f140 8138 	bpl.w	80078c8 <HAL_DMA_IRQHandler+0x5f0>

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
          }

          if(hdma->XferCpltCallback != NULL)
 8007658:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800765c:	b10b      	cbz	r3, 8007662 <HAL_DMA_IRQHandler+0x38a>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800765e:	4650      	mov	r0, sl
 8007660:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007662:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80df 	beq.w	800782a <HAL_DMA_IRQHandler+0x552>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800766c:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8007670:	07d8      	lsls	r0, r3, #31
 8007672:	d51f      	bpl.n	80076b4 <HAL_DMA_IRQHandler+0x3dc>
      {
        hdma->State = HAL_DMA_STATE_ABORT;

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007674:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8007678:	2404      	movs	r4, #4
 800767a:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007686:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <HAL_DMA_IRQHandler+0x568>)
 8007688:	fba3 3505 	umull	r3, r5, r3, r5
 800768c:	0aad      	lsrs	r5, r5, #10
 800768e:	e002      	b.n	8007696 <HAL_DMA_IRQHandler+0x3be>
          if (++count > timeout)
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007690:	6813      	ldr	r3, [r2, #0]
 8007692:	07d9      	lsls	r1, r3, #31
 8007694:	d504      	bpl.n	80076a0 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	3301      	adds	r3, #1
 800769a:	42ab      	cmp	r3, r5
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	d9f7      	bls.n	8007690 <HAL_DMA_IRQHandler+0x3b8>

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076a0:	2300      	movs	r3, #0
 80076a2:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80076a6:	6813      	ldr	r3, [r2, #0]
 80076a8:	07db      	lsls	r3, r3, #31
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80076aa:	bf4c      	ite	mi
 80076ac:	2303      	movmi	r3, #3
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80076ae:	2301      	movpl	r3, #1
 80076b0:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80076b4:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80b6 	beq.w	800782a <HAL_DMA_IRQHandler+0x552>
      hdma->State = HAL_DMA_STATE_READY;

      if (hdma->XferErrorCallback != NULL)
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076be:	4650      	mov	r0, sl
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076c0:	b002      	add	sp, #8
 80076c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 80076c6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	0740      	lsls	r0, r0, #29
 80076cc:	d50a      	bpl.n	80076e4 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	f020 0004 	bic.w	r0, r0, #4
 80076d4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076d6:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076d8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80076dc:	f042 0201 	orr.w	r2, r2, #1
 80076e0:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076e4:	fa27 f20c 	lsr.w	r2, r7, ip
 80076e8:	07d2      	lsls	r2, r2, #31
 80076ea:	f57f ae71 	bpl.w	80073d0 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80076ee:	4a55      	ldr	r2, [pc, #340]	; (8007844 <HAL_DMA_IRQHandler+0x56c>)
 80076f0:	4851      	ldr	r0, [pc, #324]	; (8007838 <HAL_DMA_IRQHandler+0x560>)
 80076f2:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8007858 <HAL_DMA_IRQHandler+0x580>
 80076f6:	4283      	cmp	r3, r0
 80076f8:	bf18      	it	ne
 80076fa:	4293      	cmpne	r3, r2
 80076fc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007700:	bf0c      	ite	eq
 8007702:	2201      	moveq	r2, #1
 8007704:	2200      	movne	r2, #0
 8007706:	4543      	cmp	r3, r8
 8007708:	bf08      	it	eq
 800770a:	f042 0201 	orreq.w	r2, r2, #1
 800770e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007712:	4283      	cmp	r3, r0
 8007714:	bf08      	it	eq
 8007716:	f042 0201 	orreq.w	r2, r2, #1
 800771a:	3030      	adds	r0, #48	; 0x30
 800771c:	4543      	cmp	r3, r8
 800771e:	bf08      	it	eq
 8007720:	f042 0201 	orreq.w	r2, r2, #1
 8007724:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8007728:	4283      	cmp	r3, r0
 800772a:	bf08      	it	eq
 800772c:	f042 0201 	orreq.w	r2, r2, #1
 8007730:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007734:	4543      	cmp	r3, r8
 8007736:	bf08      	it	eq
 8007738:	f042 0201 	orreq.w	r2, r2, #1
 800773c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007740:	4283      	cmp	r3, r0
 8007742:	bf08      	it	eq
 8007744:	f042 0201 	orreq.w	r2, r2, #1
 8007748:	3030      	adds	r0, #48	; 0x30
 800774a:	4543      	cmp	r3, r8
 800774c:	bf08      	it	eq
 800774e:	f042 0201 	orreq.w	r2, r2, #1
 8007752:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007756:	4283      	cmp	r3, r0
 8007758:	bf08      	it	eq
 800775a:	f042 0201 	orreq.w	r2, r2, #1
 800775e:	3030      	adds	r0, #48	; 0x30
 8007760:	4543      	cmp	r3, r8
 8007762:	bf08      	it	eq
 8007764:	f042 0201 	orreq.w	r2, r2, #1
 8007768:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800776c:	4283      	cmp	r3, r0
 800776e:	bf08      	it	eq
 8007770:	f042 0201 	orreq.w	r2, r2, #1
 8007774:	3030      	adds	r0, #48	; 0x30
 8007776:	4543      	cmp	r3, r8
 8007778:	bf08      	it	eq
 800777a:	f042 0201 	orreq.w	r2, r2, #1
 800777e:	4283      	cmp	r3, r0
 8007780:	bf08      	it	eq
 8007782:	f042 0201 	orreq.w	r2, r2, #1
 8007786:	2a00      	cmp	r2, #0
 8007788:	f47f ae15 	bne.w	80073b6 <HAL_DMA_IRQHandler+0xde>
 800778c:	2e00      	cmp	r6, #0
 800778e:	f47f ae12 	bne.w	80073b6 <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007792:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007794:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007796:	fa02 f20c 	lsl.w	r2, r2, ip
 800779a:	423a      	tst	r2, r7
 800779c:	f040 809f 	bne.w	80078de <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077a0:	2210      	movs	r2, #16
 80077a2:	fa02 fc0c 	lsl.w	ip, r2, ip
 80077a6:	ea17 0f0c 	tst.w	r7, ip
 80077aa:	f43f aee9 	beq.w	8007580 <HAL_DMA_IRQHandler+0x2a8>
 80077ae:	e679      	b.n	80074a4 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077b0:	4a25      	ldr	r2, [pc, #148]	; (8007848 <HAL_DMA_IRQHandler+0x570>)
 80077b2:	4e26      	ldr	r6, [pc, #152]	; (800784c <HAL_DMA_IRQHandler+0x574>)
 80077b4:	4d26      	ldr	r5, [pc, #152]	; (8007850 <HAL_DMA_IRQHandler+0x578>)
 80077b6:	42b3      	cmp	r3, r6
 80077b8:	bf18      	it	ne
 80077ba:	4293      	cmpne	r3, r2
 80077bc:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80077c0:	bf0c      	ite	eq
 80077c2:	2201      	moveq	r2, #1
 80077c4:	2200      	movne	r2, #0
 80077c6:	42ab      	cmp	r3, r5
 80077c8:	bf08      	it	eq
 80077ca:	f042 0201 	orreq.w	r2, r2, #1
 80077ce:	3528      	adds	r5, #40	; 0x28
 80077d0:	42b3      	cmp	r3, r6
 80077d2:	bf08      	it	eq
 80077d4:	f042 0201 	orreq.w	r2, r2, #1
 80077d8:	3628      	adds	r6, #40	; 0x28
 80077da:	42ab      	cmp	r3, r5
 80077dc:	bf08      	it	eq
 80077de:	f042 0201 	orreq.w	r2, r2, #1
 80077e2:	3528      	adds	r5, #40	; 0x28
 80077e4:	42b3      	cmp	r3, r6
 80077e6:	bf08      	it	eq
 80077e8:	f042 0201 	orreq.w	r2, r2, #1
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	bf08      	it	eq
 80077f0:	f042 0201 	orreq.w	r2, r2, #1
 80077f4:	b912      	cbnz	r2, 80077fc <HAL_DMA_IRQHandler+0x524>
 80077f6:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_DMA_IRQHandler+0x57c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d116      	bne.n	800782a <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077fc:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8007800:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007802:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007804:	f005 051f 	and.w	r5, r5, #31
 8007808:	40ae      	lsls	r6, r5
 800780a:	420e      	tst	r6, r1
 800780c:	d073      	beq.n	80078f6 <HAL_DMA_IRQHandler+0x61e>
 800780e:	0757      	lsls	r7, r2, #29
 8007810:	d571      	bpl.n	80078f6 <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007812:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007814:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007816:	f140 809f 	bpl.w	8007958 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800781a:	03d1      	lsls	r1, r2, #15
 800781c:	f100 80a2 	bmi.w	8007964 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007820:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f af4a 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
}
 800782a:	b002      	add	sp, #8
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	40020010 	.word	0x40020010
 8007834:	40020028 	.word	0x40020028
 8007838:	40020040 	.word	0x40020040
 800783c:	400204b8 	.word	0x400204b8
 8007840:	1b4e81b5 	.word	0x1b4e81b5
 8007844:	40020058 	.word	0x40020058
 8007848:	58025408 	.word	0x58025408
 800784c:	5802541c 	.word	0x5802541c
 8007850:	58025430 	.word	0x58025430
 8007854:	58025494 	.word	0x58025494
 8007858:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	031b      	lsls	r3, r3, #12
 8007860:	f57f ae78 	bpl.w	8007554 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007864:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f ae85 	bne.w	8007578 <HAL_DMA_IRQHandler+0x2a0>
 800786e:	e687      	b.n	8007580 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007870:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007874:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007878:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800787a:	6953      	ldr	r3, [r2, #20]
 800787c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007880:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007882:	b33d      	cbz	r5, 80078d4 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	f023 0308 	bic.w	r3, r3, #8
 800788a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800788c:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800788e:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8007890:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007892:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8007896:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800789a:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800789c:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80078a0:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f47f af0a 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
 80078aa:	e7be      	b.n	800782a <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078ac:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80078b0:	f47f aed2 	bne.w	8007658 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078b4:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80078b6:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078b8:	f021 0110 	bic.w	r1, r1, #16
 80078bc:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 80078be:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80078c2:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 80078c6:	e6c7      	b.n	8007658 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 80078c8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f47f aec6 	bne.w	800765e <HAL_DMA_IRQHandler+0x386>
 80078d2:	e6c6      	b.n	8007662 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078d4:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1d3      	bne.n	8007884 <HAL_DMA_IRQHandler+0x5ac>
 80078dc:	e7d6      	b.n	800788c <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078de:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078e0:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078e2:	fa02 fc0c 	lsl.w	ip, r2, ip
 80078e6:	ea17 0f0c 	tst.w	r7, ip
 80078ea:	f43f ae49 	beq.w	8007580 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80078f4:	e620      	b.n	8007538 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80078f6:	2602      	movs	r6, #2
 80078f8:	40ae      	lsls	r6, r5
 80078fa:	420e      	tst	r6, r1
 80078fc:	d010      	beq.n	8007920 <HAL_DMA_IRQHandler+0x648>
 80078fe:	0797      	lsls	r7, r2, #30
 8007900:	d50e      	bpl.n	8007920 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007902:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007904:	0414      	lsls	r4, r2, #16
 8007906:	d533      	bpl.n	8007970 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007908:	03d0      	lsls	r0, r2, #15
 800790a:	d43d      	bmi.n	8007988 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 800790c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8007910:	2b00      	cmp	r3, #0
 8007912:	f47f aed4 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
 8007916:	e788      	b.n	800782a <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007918:	6813      	ldr	r3, [r2, #0]
 800791a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800791e:	e68b      	b.n	8007638 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007920:	2608      	movs	r6, #8
 8007922:	40ae      	lsls	r6, r5
 8007924:	420e      	tst	r6, r1
 8007926:	d080      	beq.n	800782a <HAL_DMA_IRQHandler+0x552>
 8007928:	0711      	lsls	r1, r2, #28
 800792a:	f57f af7e 	bpl.w	800782a <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800792e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007930:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8007932:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007934:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007938:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800793c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800793e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007942:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007944:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007948:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800794c:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007950:	2b00      	cmp	r3, #0
 8007952:	f47f aeb4 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
 8007956:	e768      	b.n	800782a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007958:	0692      	lsls	r2, r2, #26
 800795a:	d403      	bmi.n	8007964 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	f022 0204 	bic.w	r2, r2, #4
 8007962:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007964:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f aea8 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
 800796e:	e75c      	b.n	800782a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007970:	f012 0220 	ands.w	r2, r2, #32
 8007974:	d108      	bne.n	8007988 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007976:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007978:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800797a:	f021 010a 	bic.w	r1, r1, #10
 800797e:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8007980:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007984:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007988:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	f47f ae96 	bne.w	80076be <HAL_DMA_IRQHandler+0x3e6>
 8007992:	e74a      	b.n	800782a <HAL_DMA_IRQHandler+0x552>

08007994 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007994:	b470      	push	{r4, r5, r6}
 8007996:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007998:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800799c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80079a0:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80079a2:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80079a6:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80079aa:	ea43 0304 	orr.w	r3, r3, r4
 80079ae:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80079b0:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80079b2:	d008      	beq.n	80079c6 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80079b4:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80079b8:	d002      	beq.n	80079c0 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80079ba:	60e9      	str	r1, [r5, #12]
  }
}
 80079bc:	bc70      	pop	{r4, r5, r6}
 80079be:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80079c0:	6169      	str	r1, [r5, #20]
}
 80079c2:	bc70      	pop	{r4, r5, r6}
 80079c4:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80079c6:	6883      	ldr	r3, [r0, #8]
 80079c8:	b1b3      	cbz	r3, 80079f8 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d017      	beq.n	80079fe <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80079ce:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80079d0:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80079d4:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80079d8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80079da:	d01e      	beq.n	8007a1a <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80079dc:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80079de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80079e2:	d00f      	beq.n	8007a04 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80079e4:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80079e6:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80079e8:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80079ea:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80079ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80079f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80079f4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80079f8:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80079fa:	bc70      	pop	{r4, r5, r6}
 80079fc:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 80079fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007a02:	e7f9      	b.n	80079f8 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8007a04:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8007a06:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007a08:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8007a0a:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007a0c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8007a10:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8007a14:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8007a18:	e7ee      	b.n	80079f8 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8007a1a:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8007a1c:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007a1e:	02c9      	lsls	r1, r1, #11
 8007a20:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8007a24:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8007a28:	e7e6      	b.n	80079f8 <DMA2D_SetConfig+0x64>
 8007a2a:	bf00      	nop

08007a2c <HAL_DMA2D_MspInit>:
}
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d036      	beq.n	8007aa2 <HAL_DMA2D_Init+0x72>
{
 8007a34:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a36:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007a40:	b353      	cbz	r3, 8007a98 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a42:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a44:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a46:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a48:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a4a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a4e:	4916      	ldr	r1, [pc, #88]	; (8007aa8 <HAL_DMA2D_Init+0x78>)
 8007a50:	681e      	ldr	r6, [r3, #0]
 8007a52:	6862      	ldr	r2, [r4, #4]
 8007a54:	4031      	ands	r1, r6
 8007a56:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a58:	4814      	ldr	r0, [pc, #80]	; (8007aac <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a5a:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a5c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a5e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a60:	69a1      	ldr	r1, [r4, #24]
 8007a62:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007a64:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a66:	4912      	ldr	r1, [pc, #72]	; (8007ab0 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a68:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a6a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a6c:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a70:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a74:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a76:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a78:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a7a:	0552      	lsls	r2, r2, #21
 8007a7c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a7e:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a82:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8007a86:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a88:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a90:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a92:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8007a98:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8007a9c:	f7ff ffc6 	bl	8007a2c <HAL_DMA2D_MspInit>
 8007aa0:	e7cf      	b.n	8007a42 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8007aa2:	2001      	movs	r0, #1
}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	fff8ffbf 	.word	0xfff8ffbf
 8007aac:	fffffef8 	.word	0xfffffef8
 8007ab0:	ffff0000 	.word	0xffff0000

08007ab4 <HAL_DMA2D_Start>:
{
 8007ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8007ab6:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8007aba:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8007abc:	2d01      	cmp	r5, #1
 8007abe:	d011      	beq.n	8007ae4 <HAL_DMA2D_Start+0x30>
 8007ac0:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007ac2:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ac4:	2502      	movs	r5, #2
 8007ac6:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007ac8:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8007aca:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ace:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007ad2:	f7ff ff5f 	bl	8007994 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8007ad6:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8007ad8:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	4333      	orrs	r3, r6
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	b003      	add	sp, #12
 8007ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8007ae4:	2002      	movs	r0, #2
}
 8007ae6:	b003      	add	sp, #12
 8007ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aea:	bf00      	nop

08007aec <HAL_DMA2D_CLUTLoad>:
{
 8007aec:	b430      	push	{r4, r5}
 8007aee:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 8007af0:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8007af4:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 8007af6:	2c01      	cmp	r4, #1
{
 8007af8:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8007afc:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8007b00:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 8007b02:	d02b      	beq.n	8007b5c <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b04:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8007b06:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b08:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b0c:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 8007b0e:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b12:	b18a      	cbz	r2, 8007b38 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007b14:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	4c12      	ldr	r4, [pc, #72]	; (8007b64 <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 8007b1a:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007b1c:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8007b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b22:	69d1      	ldr	r1, [r2, #28]
 8007b24:	400c      	ands	r4, r1
 8007b26:	4323      	orrs	r3, r4
 8007b28:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 8007b2a:	69d3      	ldr	r3, [r2, #28]
 8007b2c:	f043 0320 	orr.w	r3, r3, #32
 8007b30:	61d3      	str	r3, [r2, #28]
}
 8007b32:	b004      	add	sp, #16
 8007b34:	bc30      	pop	{r4, r5}
 8007b36:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007b38:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	4c09      	ldr	r4, [pc, #36]	; (8007b64 <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007b3e:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007b40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b44:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 8007b46:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007b48:	400c      	ands	r4, r1
 8007b4a:	4323      	orrs	r3, r4
 8007b4c:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 8007b4e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007b50:	f043 0320 	orr.w	r3, r3, #32
 8007b54:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007b56:	b004      	add	sp, #16
 8007b58:	bc30      	pop	{r4, r5}
 8007b5a:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8007b5c:	2002      	movs	r0, #2
}
 8007b5e:	b004      	add	sp, #16
 8007b60:	bc30      	pop	{r4, r5}
 8007b62:	4770      	bx	lr
 8007b64:	ffff00ef 	.word	0xffff00ef

08007b68 <HAL_DMA2D_PollForTransfer>:
{
 8007b68:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8007b6a:	2300      	movs	r3, #0
{
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	4605      	mov	r5, r0
 8007b70:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8007b72:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b74:	6803      	ldr	r3, [r0, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	07d2      	lsls	r2, r2, #31
 8007b7a:	d40f      	bmi.n	8007b9c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007b7c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007b7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b80:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8007b82:	0692      	lsls	r2, r2, #26
 8007b84:	d433      	bmi.n	8007bee <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8007b86:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007b88:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b8a:	2101      	movs	r1, #1
  return HAL_OK;
 8007b8c:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007b8e:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8007b90:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b94:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8007b9c:	f7fe fce4 	bl	8006568 <HAL_GetTick>
 8007ba0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	e001      	b.n	8007baa <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8007ba6:	1c60      	adds	r0, r4, #1
 8007ba8:	d148      	bne.n	8007c3c <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	0791      	lsls	r1, r2, #30
 8007bae:	d4e5      	bmi.n	8007b7c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007bb4:	9a01      	ldr	r2, [sp, #4]
 8007bb6:	f012 0f21 	tst.w	r2, #33	; 0x21
 8007bba:	d0f4      	beq.n	8007ba6 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007bbc:	9a01      	ldr	r2, [sp, #4]
 8007bbe:	0696      	lsls	r6, r2, #26
 8007bc0:	d503      	bpl.n	8007bca <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007bc2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007bc4:	f042 0202 	orr.w	r2, r2, #2
 8007bc8:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	07d4      	lsls	r4, r2, #31
 8007bce:	d503      	bpl.n	8007bd8 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007bd0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007bd8:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007bda:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8007bdc:	2200      	movs	r2, #0
        return HAL_ERROR;
 8007bde:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007be0:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007be2:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8007be6:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8007bea:	b002      	add	sp, #8
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8007bee:	f7fe fcbb 	bl	8006568 <HAL_GetTick>
 8007bf2:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	e001      	b.n	8007bfc <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8007bf8:	1c61      	adds	r1, r4, #1
 8007bfa:	d132      	bne.n	8007c62 <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	06d2      	lsls	r2, r2, #27
 8007c00:	d4c1      	bmi.n	8007b86 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	f012 0f29 	tst.w	r2, #41	; 0x29
 8007c0c:	d0f4      	beq.n	8007bf8 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c0e:	9a01      	ldr	r2, [sp, #4]
 8007c10:	0716      	lsls	r6, r2, #28
 8007c12:	d503      	bpl.n	8007c1c <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c14:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007c16:	f042 0204 	orr.w	r2, r2, #4
 8007c1a:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c1c:	9a01      	ldr	r2, [sp, #4]
 8007c1e:	0694      	lsls	r4, r2, #26
 8007c20:	d503      	bpl.n	8007c2a <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c22:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007c24:	f042 0202 	orr.w	r2, r2, #2
 8007c28:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c2a:	9a01      	ldr	r2, [sp, #4]
 8007c2c:	07d0      	lsls	r0, r2, #31
 8007c2e:	d503      	bpl.n	8007c38 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c30:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c38:	2429      	movs	r4, #41	; 0x29
 8007c3a:	e7ce      	b.n	8007bda <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c3c:	f7fe fc94 	bl	8006568 <HAL_GetTick>
 8007c40:	1b80      	subs	r0, r0, r6
 8007c42:	42a0      	cmp	r0, r4
 8007c44:	d801      	bhi.n	8007c4a <HAL_DMA2D_PollForTransfer+0xe2>
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	d1ab      	bne.n	8007ba2 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007c4c:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8007c4e:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c50:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8007c54:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8007c56:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c5a:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007c5c:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8007c60:	e79a      	b.n	8007b98 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c62:	f7fe fc81 	bl	8006568 <HAL_GetTick>
 8007c66:	1b80      	subs	r0, r0, r6
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d8ee      	bhi.n	8007c4a <HAL_DMA2D_PollForTransfer+0xe2>
 8007c6c:	2c00      	cmp	r4, #0
 8007c6e:	d1c1      	bne.n	8007bf4 <HAL_DMA2D_PollForTransfer+0x8c>
 8007c70:	e7eb      	b.n	8007c4a <HAL_DMA2D_PollForTransfer+0xe2>
 8007c72:	bf00      	nop

08007c74 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8007c74:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8007c78:	2a01      	cmp	r2, #1
 8007c7a:	d063      	beq.n	8007d44 <HAL_DMA2D_ConfigLayer+0xd0>
 8007c7c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c7e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c82:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007c88:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007c8a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8007c90:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007c94:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c96:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8007c98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007c9a:	0512      	lsls	r2, r2, #20
 8007c9c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ca2:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007ca6:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ca8:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007caa:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cae:	d922      	bls.n	8007cf6 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007cb0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007cb2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007cb6:	b981      	cbnz	r1, 8007cda <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	4923      	ldr	r1, [pc, #140]	; (8007d48 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007cbc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007cbe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007cc0:	4029      	ands	r1, r5
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007cc6:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8007cc8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cca:	2101      	movs	r1, #1
  return HAL_OK;
 8007ccc:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cce:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 8007cd2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8007cd6:	bc70      	pop	{r4, r5, r6}
 8007cd8:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007cda:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007cdc:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007cde:	d129      	bne.n	8007d34 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ce0:	69e6      	ldr	r6, [r4, #28]
 8007ce2:	491a      	ldr	r1, [pc, #104]	; (8007d4c <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ce4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ce6:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007ce8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007cea:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007cf2:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cf4:	e7e8      	b.n	8007cc8 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007cf6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007cf8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8007cfc:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007cfe:	b161      	cbz	r1, 8007d1a <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	4c11      	ldr	r4, [pc, #68]	; (8007d48 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007d04:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007d06:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007d08:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007d0a:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007d0c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007d10:	4322      	orrs	r2, r4
 8007d12:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007d14:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007d16:	620d      	str	r5, [r1, #32]
 8007d18:	e7d6      	b.n	8007cc8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d1a:	6819      	ldr	r1, [r3, #0]
 8007d1c:	4c0a      	ldr	r4, [pc, #40]	; (8007d48 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007d1e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007d20:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d22:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007d24:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d2a:	4322      	orrs	r2, r4
 8007d2c:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007d2e:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007d30:	6288      	str	r0, [r1, #40]	; 0x28
 8007d32:	e7c9      	b.n	8007cc8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007d34:	69e5      	ldr	r5, [r4, #28]
 8007d36:	4904      	ldr	r1, [pc, #16]	; (8007d48 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007d38:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007d3a:	4029      	ands	r1, r5
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007d40:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d42:	e7c1      	b.n	8007cc8 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8007d44:	2002      	movs	r0, #2
}
 8007d46:	4770      	bx	lr
 8007d48:	00ccfff0 	.word	0x00ccfff0
 8007d4c:	00c0fff0 	.word	0x00c0fff0

08007d50 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d54:	4605      	mov	r5, r0
 8007d56:	4688      	mov	r8, r1
 8007d58:	4617      	mov	r7, r2
 8007d5a:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d5c:	f7fe fc04 	bl	8006568 <HAL_GetTick>
 8007d60:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007d62:	e005      	b.n	8007d70 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007d64:	f7fe fc00 	bl	8006568 <HAL_GetTick>
 8007d68:	1b84      	subs	r4, r0, r6
 8007d6a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8007d6e:	d80e      	bhi.n	8007d8e <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007d70:	682c      	ldr	r4, [r5, #0]
 8007d72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007d74:	07db      	lsls	r3, r3, #31
 8007d76:	d5f5      	bpl.n	8007d64 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007d78:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8007d7c:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8007d7e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d84:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007d88:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8007d8e:	2003      	movs	r0, #3
}
 8007d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007d94 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop

08007d98 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f000 80b3 	beq.w	8007f04 <HAL_DSI_Init+0x16c>
{
 8007d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007da0:	7c43      	ldrb	r3, [r0, #17]
{
 8007da2:	b083      	sub	sp, #12
 8007da4:	460d      	mov	r5, r1
 8007da6:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80a8 	beq.w	8007efe <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8007dae:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007db0:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8007db2:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007db4:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007db6:	9200      	str	r2, [sp, #0]
 8007db8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007dbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007dc0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007dc4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007dd0:	f7fe fbca 	bl	8006568 <HAL_GetTick>
 8007dd4:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007dd6:	e006      	b.n	8007de6 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007dd8:	f7fe fbc6 	bl	8006568 <HAL_GetTick>
 8007ddc:	1b83      	subs	r3, r0, r6
 8007dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007de2:	f200 8089 	bhi.w	8007ef8 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007dec:	04d1      	lsls	r1, r2, #19
 8007dee:	d5f3      	bpl.n	8007dd8 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007df0:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007df2:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007df4:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007df8:	682e      	ldr	r6, [r5, #0]
 8007dfa:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007dfc:	4942      	ldr	r1, [pc, #264]	; (8007f08 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007dfe:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8007e02:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007e04:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007e06:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007e0a:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007e0e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8007e12:	430a      	orrs	r2, r1
 8007e14:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007e18:	9001      	str	r0, [sp, #4]
 8007e1a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007e26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8007e32:	f7fe fb99 	bl	8006568 <HAL_GetTick>
 8007e36:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007e38:	e005      	b.n	8007e46 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007e3a:	f7fe fb95 	bl	8006568 <HAL_GetTick>
 8007e3e:	1b80      	subs	r0, r0, r6
 8007e40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e44:	d858      	bhi.n	8007ef8 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007e4c:	05d2      	lsls	r2, r2, #23
 8007e4e:	d5f4      	bpl.n	8007e3a <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007e50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e54:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007e58:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8007e5a:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007e5c:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007e60:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007e62:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007e66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007e6a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007e6e:	f022 0203 	bic.w	r2, r2, #3
 8007e72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007e76:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e7a:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007e7c:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e7e:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007e80:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e84:	bf38      	it	cc
 8007e86:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007e88:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007e8c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e90:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007e92:	f020 0003 	bic.w	r0, r0, #3
 8007e96:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007e9a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007e9e:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007ea0:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007ea2:	682d      	ldr	r5, [r5, #0]
 8007ea4:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007ea8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007eac:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007eae:	fb0c f505 	mul.w	r5, ip, r5
 8007eb2:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007eb4:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007eb8:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007ebc:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007ebe:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007ec0:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007ec2:	ea46 060e 	orr.w	r6, r6, lr
 8007ec6:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8007ec8:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007eca:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007ece:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007ed2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8007ed6:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8007eda:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007edc:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8007ee0:	432a      	orrs	r2, r5
 8007ee2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007ee6:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007eea:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007eee:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007ef0:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007ef2:	7466      	strb	r6, [r4, #17]
}
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007ef8:	2003      	movs	r0, #3
}
 8007efa:	b003      	add	sp, #12
 8007efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8007efe:	f7ff ff49 	bl	8007d94 <HAL_DSI_MspInit>
 8007f02:	e754      	b.n	8007dae <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8007f04:	2001      	movs	r0, #1
}
 8007f06:	4770      	bx	lr
 8007f08:	fffc8603 	.word	0xfffc8603
 8007f0c:	003d0900 	.word	0x003d0900

08007f10 <HAL_DSI_TearingEffectCallback>:
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop

08007f14 <HAL_DSI_EndOfRefreshCallback>:
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop

08007f18 <HAL_DSI_ErrorCallback>:
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007f1c:	6803      	ldr	r3, [r0, #0]
 8007f1e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007f22:	07d1      	lsls	r1, r2, #31
{
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007f28:	d503      	bpl.n	8007f32 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007f2a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007f2e:	07d2      	lsls	r2, r2, #31
 8007f30:	d462      	bmi.n	8007ff8 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007f32:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007f36:	0791      	lsls	r1, r2, #30
 8007f38:	d503      	bpl.n	8007f42 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007f3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007f3e:	0792      	lsls	r2, r2, #30
 8007f40:	d44f      	bmi.n	8007fe2 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007f42:	69a3      	ldr	r3, [r4, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d04b      	beq.n	8007fe0 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007f48:	6821      	ldr	r1, [r4, #0]
 8007f4a:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007f4e:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007f52:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007f56:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007f58:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007f5c:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007f5e:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007f60:	b119      	cbz	r1, 8007f6a <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007f62:	6961      	ldr	r1, [r4, #20]
 8007f64:	f041 0101 	orr.w	r1, r1, #1
 8007f68:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007f6a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007f6e:	d003      	beq.n	8007f78 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007f70:	6962      	ldr	r2, [r4, #20]
 8007f72:	f042 0202 	orr.w	r2, r2, #2
 8007f76:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007f78:	07d8      	lsls	r0, r3, #31
 8007f7a:	d503      	bpl.n	8007f84 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007f7c:	6962      	ldr	r2, [r4, #20]
 8007f7e:	f042 0204 	orr.w	r2, r2, #4
 8007f82:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007f84:	0799      	lsls	r1, r3, #30
 8007f86:	d503      	bpl.n	8007f90 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007f88:	6962      	ldr	r2, [r4, #20]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007f90:	f013 0f0c 	tst.w	r3, #12
 8007f94:	d003      	beq.n	8007f9e <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007f96:	6962      	ldr	r2, [r4, #20]
 8007f98:	f042 0210 	orr.w	r2, r2, #16
 8007f9c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007f9e:	06da      	lsls	r2, r3, #27
 8007fa0:	d503      	bpl.n	8007faa <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007fa2:	6962      	ldr	r2, [r4, #20]
 8007fa4:	f042 0220 	orr.w	r2, r2, #32
 8007fa8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007faa:	0698      	lsls	r0, r3, #26
 8007fac:	d503      	bpl.n	8007fb6 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007fae:	6962      	ldr	r2, [r4, #20]
 8007fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007fb6:	0659      	lsls	r1, r3, #25
 8007fb8:	d503      	bpl.n	8007fc2 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007fba:	6962      	ldr	r2, [r4, #20]
 8007fbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fc0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007fc2:	061a      	lsls	r2, r3, #24
 8007fc4:	d503      	bpl.n	8007fce <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007fc6:	6962      	ldr	r2, [r4, #20]
 8007fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fcc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007fce:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007fd2:	d003      	beq.n	8007fdc <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007fd4:	6963      	ldr	r3, [r4, #20]
 8007fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fda:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007fdc:	6963      	ldr	r3, [r4, #20]
 8007fde:	b93b      	cbnz	r3, 8007ff0 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007fe0:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007fe2:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007fe4:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007fe6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007fea:	f7ff ff93 	bl	8007f14 <HAL_DSI_EndOfRefreshCallback>
 8007fee:	e7a8      	b.n	8007f42 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f7ff ff91 	bl	8007f18 <HAL_DSI_ErrorCallback>
}
 8007ff6:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007ffe:	f7ff ff87 	bl	8007f10 <HAL_DSI_TearingEffectCallback>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	e795      	b.n	8007f32 <HAL_DSI_IRQHandler+0x16>
 8008006:	bf00      	nop

08008008 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008008:	7c03      	ldrb	r3, [r0, #16]
 800800a:	2b01      	cmp	r3, #1
 800800c:	f000 8113 	beq.w	8008236 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008010:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8008012:	2201      	movs	r2, #1
{
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8008018:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800801a:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800801c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800801e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008020:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008024:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008028:	4e84      	ldr	r6, [pc, #528]	; (800823c <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800802a:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800802c:	4d84      	ldr	r5, [pc, #528]	; (8008240 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800802e:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008032:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008034:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008038:	f022 0201 	bic.w	r2, r2, #1
 800803c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008042:	f022 0203 	bic.w	r2, r2, #3
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008048:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800804a:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800804e:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008052:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008056:	ea06 0602 	and.w	r6, r6, r2
 800805a:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800805c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008062:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800806a:	ea02 0205 	and.w	r2, r2, r5
 800806e:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008070:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8008072:	ea47 0708 	orr.w	r7, r7, r8
 8008076:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008078:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800807a:	ea06 0605 	and.w	r6, r6, r5
 800807e:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008080:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8008082:	ea45 050e 	orr.w	r5, r5, lr
 8008086:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008088:	68dd      	ldr	r5, [r3, #12]
 800808a:	f025 0503 	bic.w	r5, r5, #3
 800808e:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	ea42 020c 	orr.w	r2, r2, ip
 8008096:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008098:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800809a:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800809c:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80080a0:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80080a4:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80080a6:	ea42 0206 	orr.w	r2, r2, r6
 80080aa:	695d      	ldr	r5, [r3, #20]
 80080ac:	ea42 0207 	orr.w	r2, r2, r7
 80080b0:	ea42 0205 	orr.w	r2, r2, r5
 80080b4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	f022 020f 	bic.w	r2, r2, #15
 80080bc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	ea42 0200 	orr.w	r2, r2, r0
 80080c4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80080c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80080ca:	f022 020e 	bic.w	r2, r2, #14
 80080ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80080d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80080d6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80080da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 80080de:	d107      	bne.n	80080f0 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80080e0:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80080e2:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80080e4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80080e8:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	432a      	orrs	r2, r5
 80080ee:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80080f0:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080f2:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80080f4:	4a53      	ldr	r2, [pc, #332]	; (8008244 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80080f6:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80080f8:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80080fa:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80080fe:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008102:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008104:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008106:	4f50      	ldr	r7, [pc, #320]	; (8008248 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008108:	4305      	orrs	r5, r0
 800810a:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800810c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800810e:	4010      	ands	r0, r2
 8008110:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008114:	484d      	ldr	r0, [pc, #308]	; (800824c <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008116:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800811a:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800811e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008122:	4017      	ands	r7, r2
 8008124:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008126:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8008128:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800812c:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008130:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008132:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8008134:	4005      	ands	r5, r0
 8008136:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800813a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800813e:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008142:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008144:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008146:	4002      	ands	r2, r0
 8008148:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800814a:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800814c:	4a3b      	ldr	r2, [pc, #236]	; (800823c <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800814e:	ea47 070e 	orr.w	r7, r7, lr
 8008152:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008154:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8008156:	4007      	ands	r7, r0

  return HAL_OK;
 8008158:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800815a:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800815c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800815e:	ea45 050c 	orr.w	r5, r5, ip
 8008162:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008164:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8008166:	402a      	ands	r2, r5
 8008168:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800816a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800816c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800816e:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008172:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008174:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008178:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800817a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800817c:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8008180:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008188:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800818c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800818e:	699f      	ldr	r7, [r3, #24]
 8008190:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8008194:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008196:	699d      	ldr	r5, [r3, #24]
 8008198:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800819c:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80081a0:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80081a2:	699d      	ldr	r5, [r3, #24]
 80081a4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80081a8:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80081aa:	699a      	ldr	r2, [r3, #24]
 80081ac:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80081b0:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80081b4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80081b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80081be:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80081c0:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80081c4:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80081c8:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80081ca:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80081cc:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80081d0:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80081d2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80081d4:	ea45 050e 	orr.w	r5, r5, lr
 80081d8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80081da:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80081dc:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80081e0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80081e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e4:	ea42 020c 	orr.w	r2, r2, ip
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80081ea:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80081ec:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80081ee:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80081f2:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80081f6:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80081f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fa:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80081fc:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008200:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008204:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008208:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800820a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800820c:	ea45 050e 	orr.w	r5, r5, lr
 8008210:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008212:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8008214:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8008218:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800821a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800821c:	ea41 010c 	orr.w	r1, r1, ip
 8008220:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008222:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008224:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008228:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800822a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822c:	433a      	orrs	r2, r7
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8008230:	7426      	strb	r6, [r4, #16]
}
 8008232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8008236:	2002      	movs	r0, #2
}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	ffffc000 	.word	0xffffc000
 8008240:	ffffe000 	.word	0xffffe000
 8008244:	fffff000 	.word	0xfffff000
 8008248:	ffff8000 	.word	0xffff8000
 800824c:	fffffc00 	.word	0xfffffc00

08008250 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008250:	7c02      	ldrb	r2, [r0, #16]
 8008252:	2a01      	cmp	r2, #1
 8008254:	d00e      	beq.n	8008274 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008256:	6802      	ldr	r2, [r0, #0]
 8008258:	4603      	mov	r3, r0
{
 800825a:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800825c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800825e:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008260:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8008264:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008266:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008268:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800826a:	4321      	orrs	r1, r4
 800826c:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800826e:	741d      	strb	r5, [r3, #16]
}
 8008270:	bc30      	pop	{r4, r5}
 8008272:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008274:	2002      	movs	r0, #2
}
 8008276:	4770      	bx	lr

08008278 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008278:	7c03      	ldrb	r3, [r0, #16]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d021      	beq.n	80082c2 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800827e:	6803      	ldr	r3, [r0, #0]
 8008280:	2100      	movs	r1, #0
 8008282:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8008284:	4608      	mov	r0, r1
{
 8008286:	b410      	push	{r4}
 8008288:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800828a:	9100      	str	r1, [sp, #0]
 800828c:	685c      	ldr	r4, [r3, #4]
 800828e:	f044 0401 	orr.w	r4, r4, #1
 8008292:	605c      	str	r4, [r3, #4]
 8008294:	685c      	ldr	r4, [r3, #4]
 8008296:	f004 0401 	and.w	r4, r4, #1
 800829a:	9400      	str	r4, [sp, #0]
 800829c:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800829e:	9101      	str	r1, [sp, #4]
 80082a0:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80082a4:	f044 0408 	orr.w	r4, r4, #8
 80082a8:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 80082ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 80082b0:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	9b01      	ldr	r3, [sp, #4]
}
 80082ba:	b003      	add	sp, #12
 80082bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80082c2:	2002      	movs	r0, #2
}
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop

080082c8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80082c8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80082ca:	7c05      	ldrb	r5, [r0, #16]
{
 80082cc:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80082ce:	2d01      	cmp	r5, #1
 80082d0:	d00a      	beq.n	80082e8 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80082d2:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 80082d4:	2501      	movs	r5, #1
 80082d6:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80082d8:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 80082da:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80082dc:	f7ff fd38 	bl	8007d50 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80082e0:	2300      	movs	r3, #0
 80082e2:	7423      	strb	r3, [r4, #16]

  return status;
}
 80082e4:	b002      	add	sp, #8
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 80082e8:	2002      	movs	r0, #2
}
 80082ea:	b002      	add	sp, #8
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	bf00      	nop

080082f0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80082f6:	7c03      	ldrb	r3, [r0, #16]
{
 80082f8:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d05e      	beq.n	80083bc <HAL_DSI_LongWrite+0xcc>
 80082fe:	2301      	movs	r3, #1
 8008300:	4607      	mov	r7, r0
 8008302:	4689      	mov	r9, r1
 8008304:	4692      	mov	sl, r2
 8008306:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8008308:	f7fe f92e 	bl	8006568 <HAL_GetTick>
 800830c:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800830e:	e005      	b.n	800831c <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008310:	f7fe f92a 	bl	8006568 <HAL_GetTick>
 8008314:	1b40      	subs	r0, r0, r5
 8008316:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800831a:	d84b      	bhi.n	80083b4 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8008320:	f014 0401 	ands.w	r4, r4, #1
 8008324:	d0f4      	beq.n	8008310 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8008326:	4640      	mov	r0, r8
 8008328:	2803      	cmp	r0, #3
 800832a:	bf28      	it	cs
 800832c:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 800832e:	f1b8 0f00 	cmp.w	r8, #0
 8008332:	d046      	beq.n	80083c2 <HAL_DSI_LongWrite+0xd2>
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	1e5c      	subs	r4, r3, #1
 8008338:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800833a:	3301      	adds	r3, #1
 800833c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8008340:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8008342:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8008344:	fa02 f205 	lsl.w	r2, r2, r5
 8008348:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 800834c:	d3f5      	bcc.n	800833a <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8008350:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8008352:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8008354:	ebb8 0000 	subs.w	r0, r8, r0
 8008358:	d017      	beq.n	800838a <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800835a:	2804      	cmp	r0, #4
 800835c:	4684      	mov	ip, r0
 800835e:	f04f 0500 	mov.w	r5, #0
 8008362:	bf28      	it	cs
 8008364:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8008368:	462b      	mov	r3, r5
 800836a:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800836e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008372:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8008374:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008376:	f105 0508 	add.w	r5, r5, #8
 800837a:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 800837e:	d1f6      	bne.n	800836e <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8008380:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8008384:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8008386:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8008388:	d1e7      	bne.n	800835a <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800838a:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800838e:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008392:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008394:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8008398:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800839a:	46c8      	mov	r8, r9
 800839c:	fa1f f989 	uxth.w	r9, r9
 80083a0:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 80083a4:	ea43 0309 	orr.w	r3, r3, r9
 80083a8:	ea43 0308 	orr.w	r3, r3, r8
 80083ac:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80083ae:	743a      	strb	r2, [r7, #16]
}
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 80083b4:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80083b6:	743c      	strb	r4, [r7, #16]
}
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 80083bc:	2002      	movs	r0, #2
}
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 80083c2:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80083c4:	e7e1      	b.n	800838a <HAL_DSI_LongWrite+0x9a>
 80083c6:	bf00      	nop

080083c8 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80083ce:	7c02      	ldrb	r2, [r0, #16]
{
 80083d0:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80083d2:	2a01      	cmp	r2, #1
{
 80083d4:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 80083d6:	d070      	beq.n	80084ba <HAL_DSI_Read+0xf2>
 80083d8:	461e      	mov	r6, r3
 80083da:	2301      	movs	r3, #1
 80083dc:	4607      	mov	r7, r0
 80083de:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80083e0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80083e2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80083e4:	d80d      	bhi.n	8008402 <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80083e6:	2c06      	cmp	r4, #6
 80083e8:	d017      	beq.n	800841a <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80083ea:	2c04      	cmp	r4, #4
 80083ec:	d04f      	beq.n	800848e <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80083ee:	2c14      	cmp	r4, #20
 80083f0:	d067      	beq.n	80084c2 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80083f2:	2c24      	cmp	r4, #36	; 0x24
 80083f4:	d052      	beq.n	800849c <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 80083f6:	2300      	movs	r3, #0
      return HAL_ERROR;
 80083f8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80083fa:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80083fc:	b002      	add	sp, #8
 80083fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8008402:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008406:	b2f3      	uxtb	r3, r6
 8008408:	2237      	movs	r2, #55	; 0x37
 800840a:	f8cd c000 	str.w	ip, [sp]
 800840e:	f7ff fc9f 	bl	8007d50 <DSI_ShortWrite>
 8008412:	2800      	cmp	r0, #0
 8008414:	d1ef      	bne.n	80083f6 <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8008416:	2c06      	cmp	r4, #6
 8008418:	d1e7      	bne.n	80083ea <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800841c:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800841e:	021a      	lsls	r2, r3, #8
 8008420:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8008424:	f043 0306 	orr.w	r3, r3, #6
 8008428:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800842a:	f7fe f89d 	bl	8006568 <HAL_GetTick>
 800842e:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8008430:	e006      	b.n	8008440 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008432:	f7fe f899 	bl	8006568 <HAL_GetTick>
 8008436:	eba0 0008 	sub.w	r0, r0, r8
 800843a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800843e:	d81b      	bhi.n	8008478 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8008440:	2e00      	cmp	r6, #0
 8008442:	dd1f      	ble.n	8008484 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008448:	f011 0110 	ands.w	r1, r1, #16
 800844c:	d1f1      	bne.n	8008432 <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800844e:	2e04      	cmp	r6, #4
 8008450:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8008452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8008454:	bf28      	it	cs
 8008456:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8008458:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800845a:	fa22 f401 	lsr.w	r4, r2, r1
 800845e:	3108      	adds	r1, #8
 8008460:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8008464:	429d      	cmp	r5, r3
 8008466:	d1f8      	bne.n	800845a <HAL_DSI_Read+0x92>
 8008468:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800846a:	f7fe f87d 	bl	8006568 <HAL_GetTick>
 800846e:	eba0 0008 	sub.w	r0, r0, r8
 8008472:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008476:	d9e3      	bls.n	8008440 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8008478:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800847a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800847c:	743b      	strb	r3, [r7, #16]
}
 800847e:	b002      	add	sp, #8
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8008484:	2000      	movs	r0, #0
 8008486:	7438      	strb	r0, [r7, #16]
}
 8008488:	b002      	add	sp, #8
 800848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800848e:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8008492:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800849a:	e7c6      	b.n	800842a <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800849c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800849e:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80084a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084a4:	7852      	ldrb	r2, [r2, #1]
 80084a6:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80084ac:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084b2:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80084b6:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80084b8:	e7b7      	b.n	800842a <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 80084ba:	2002      	movs	r0, #2
}
 80084bc:	b002      	add	sp, #8
 80084be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80084c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084c4:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80084c8:	7811      	ldrb	r1, [r2, #0]
 80084ca:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80084cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084d0:	f043 0314 	orr.w	r3, r3, #20
 80084d4:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80084d6:	e7a8      	b.n	800842a <HAL_DSI_Read+0x62>

080084d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084dc:	680e      	ldr	r6, [r1, #0]
{
 80084de:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	f000 80d3 	beq.w	800868c <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80084e6:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084e8:	f8df a220 	ldr.w	sl, [pc, #544]	; 800870c <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084ec:	f8df b220 	ldr.w	fp, [pc, #544]	; 8008710 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084f0:	46b1      	mov	r9, r6
 80084f2:	e020      	b.n	8008536 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80084f4:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084f6:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084fa:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084fe:	f04f 0e0f 	mov.w	lr, #15
 8008502:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008506:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008508:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800850c:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8008510:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008512:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008516:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800851a:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800851e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8008522:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8008524:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008526:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008528:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800852a:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800852c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800852e:	fa39 f203 	lsrs.w	r2, r9, r3
 8008532:	f000 80ab 	beq.w	800868c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008536:	2201      	movs	r2, #1
 8008538:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800853a:	ea12 0809 	ands.w	r8, r2, r9
 800853e:	d0f5      	beq.n	800852c <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008540:	684c      	ldr	r4, [r1, #4]
 8008542:	005f      	lsls	r7, r3, #1
 8008544:	f024 0c10 	bic.w	ip, r4, #16
 8008548:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800854c:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800854e:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008552:	f200 809e 	bhi.w	8008692 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008556:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800855a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800855e:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008560:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008562:	ea2e 0e05 	bic.w	lr, lr, r5
 8008566:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008568:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800856a:	68ce      	ldr	r6, [r1, #12]
 800856c:	40be      	lsls	r6, r7
 800856e:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008572:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8008574:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8008578:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800857c:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008580:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8008582:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8008584:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008586:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800858a:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800858c:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008590:	fa02 f207 	lsl.w	r2, r2, r7
 8008594:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8008598:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800859a:	d0ab      	beq.n	80084f4 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800859c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800859e:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085a2:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085a4:	fa02 f707 	lsl.w	r7, r2, r7
 80085a8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80085aa:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085ac:	00e6      	lsls	r6, r4, #3
 80085ae:	d5bd      	bpl.n	800852c <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80085b4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085b8:	f003 0203 	and.w	r2, r3, #3
 80085bc:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085be:	f046 0602 	orr.w	r6, r6, #2
 80085c2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085c6:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c8:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80085cc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80085d0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085d4:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085d8:	f006 0602 	and.w	r6, r6, #2
 80085dc:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085de:	4e42      	ldr	r6, [pc, #264]	; (80086e8 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085e0:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085e2:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80085e4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085e6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085ea:	d020      	beq.n	800862e <HAL_GPIO_Init+0x156>
 80085ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80085f0:	42b0      	cmp	r0, r6
 80085f2:	d056      	beq.n	80086a2 <HAL_GPIO_Init+0x1ca>
 80085f4:	4e3d      	ldr	r6, [pc, #244]	; (80086ec <HAL_GPIO_Init+0x214>)
 80085f6:	42b0      	cmp	r0, r6
 80085f8:	d058      	beq.n	80086ac <HAL_GPIO_Init+0x1d4>
 80085fa:	4e3d      	ldr	r6, [pc, #244]	; (80086f0 <HAL_GPIO_Init+0x218>)
 80085fc:	42b0      	cmp	r0, r6
 80085fe:	d04b      	beq.n	8008698 <HAL_GPIO_Init+0x1c0>
 8008600:	4e3c      	ldr	r6, [pc, #240]	; (80086f4 <HAL_GPIO_Init+0x21c>)
 8008602:	42b0      	cmp	r0, r6
 8008604:	d05c      	beq.n	80086c0 <HAL_GPIO_Init+0x1e8>
 8008606:	4e3c      	ldr	r6, [pc, #240]	; (80086f8 <HAL_GPIO_Init+0x220>)
 8008608:	42b0      	cmp	r0, r6
 800860a:	d05e      	beq.n	80086ca <HAL_GPIO_Init+0x1f2>
 800860c:	4e3b      	ldr	r6, [pc, #236]	; (80086fc <HAL_GPIO_Init+0x224>)
 800860e:	42b0      	cmp	r0, r6
 8008610:	d051      	beq.n	80086b6 <HAL_GPIO_Init+0x1de>
 8008612:	4e3b      	ldr	r6, [pc, #236]	; (8008700 <HAL_GPIO_Init+0x228>)
 8008614:	42b0      	cmp	r0, r6
 8008616:	d05d      	beq.n	80086d4 <HAL_GPIO_Init+0x1fc>
 8008618:	4e3a      	ldr	r6, [pc, #232]	; (8008704 <HAL_GPIO_Init+0x22c>)
 800861a:	42b0      	cmp	r0, r6
 800861c:	d05f      	beq.n	80086de <HAL_GPIO_Init+0x206>
 800861e:	4e3a      	ldr	r6, [pc, #232]	; (8008708 <HAL_GPIO_Init+0x230>)
 8008620:	42b0      	cmp	r0, r6
 8008622:	bf0c      	ite	eq
 8008624:	2609      	moveq	r6, #9
 8008626:	260a      	movne	r6, #10
 8008628:	fa06 f202 	lsl.w	r2, r6, r2
 800862c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800862e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8008630:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8008634:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008638:	03e5      	lsls	r5, r4, #15
    position++;
 800863a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800863e:	bf54      	ite	pl
 8008640:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8008642:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008646:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800864a:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800864c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8008650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008654:	bf54      	ite	pl
 8008656:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008658:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800865c:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800865e:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8008662:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8008664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008668:	bf54      	ite	pl
 800866a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800866c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008670:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8008672:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8008676:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8008678:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800867a:	bf54      	ite	pl
 800867c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800867e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8008682:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008684:	fa39 f203 	lsrs.w	r2, r9, r3
 8008688:	f47f af55 	bne.w	8008536 <HAL_GPIO_Init+0x5e>
  }
}
 800868c:	b005      	add	sp, #20
 800868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	40bd      	lsls	r5, r7
 8008694:	43ed      	mvns	r5, r5
 8008696:	e775      	b.n	8008584 <HAL_GPIO_Init+0xac>
 8008698:	2603      	movs	r6, #3
 800869a:	fa06 f202 	lsl.w	r2, r6, r2
 800869e:	4315      	orrs	r5, r2
 80086a0:	e7c5      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086a2:	2601      	movs	r6, #1
 80086a4:	fa06 f202 	lsl.w	r2, r6, r2
 80086a8:	4315      	orrs	r5, r2
 80086aa:	e7c0      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086ac:	2602      	movs	r6, #2
 80086ae:	fa06 f202 	lsl.w	r2, r6, r2
 80086b2:	4315      	orrs	r5, r2
 80086b4:	e7bb      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086b6:	2606      	movs	r6, #6
 80086b8:	fa06 f202 	lsl.w	r2, r6, r2
 80086bc:	4315      	orrs	r5, r2
 80086be:	e7b6      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086c0:	2604      	movs	r6, #4
 80086c2:	fa06 f202 	lsl.w	r2, r6, r2
 80086c6:	4315      	orrs	r5, r2
 80086c8:	e7b1      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086ca:	2605      	movs	r6, #5
 80086cc:	fa06 f202 	lsl.w	r2, r6, r2
 80086d0:	4315      	orrs	r5, r2
 80086d2:	e7ac      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086d4:	2607      	movs	r6, #7
 80086d6:	fa06 f202 	lsl.w	r2, r6, r2
 80086da:	4315      	orrs	r5, r2
 80086dc:	e7a7      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086de:	2608      	movs	r6, #8
 80086e0:	fa06 f202 	lsl.w	r2, r6, r2
 80086e4:	4315      	orrs	r5, r2
 80086e6:	e7a2      	b.n	800862e <HAL_GPIO_Init+0x156>
 80086e8:	58020000 	.word	0x58020000
 80086ec:	58020800 	.word	0x58020800
 80086f0:	58020c00 	.word	0x58020c00
 80086f4:	58021000 	.word	0x58021000
 80086f8:	58021400 	.word	0x58021400
 80086fc:	58021800 	.word	0x58021800
 8008700:	58021c00 	.word	0x58021c00
 8008704:	58022000 	.word	0x58022000
 8008708:	58022400 	.word	0x58022400
 800870c:	58024400 	.word	0x58024400
 8008710:	58000080 	.word	0x58000080

08008714 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008714:	b902      	cbnz	r2, 8008718 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008716:	0409      	lsls	r1, r1, #16
 8008718:	6181      	str	r1, [r0, #24]
  }
}
 800871a:	4770      	bx	lr

0800871c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800871c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800871e:	ea01 0203 	and.w	r2, r1, r3
 8008722:	ea21 0103 	bic.w	r1, r1, r3
 8008726:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800872a:	6181      	str	r1, [r0, #24]
}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop

08008730 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008730:	4a04      	ldr	r2, [pc, #16]	; (8008744 <HAL_HSEM_FastTake+0x14>)
 8008732:	3020      	adds	r0, #32
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <HAL_HSEM_FastTake+0x18>)
 8008736:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800873a:	1ac0      	subs	r0, r0, r3
 800873c:	bf18      	it	ne
 800873e:	2001      	movne	r0, #1
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	58026400 	.word	0x58026400
 8008748:	80000300 	.word	0x80000300

0800874c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <HAL_HSEM_Release+0xc>)
 800874e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8008752:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8008756:	4770      	bx	lr
 8008758:	58026400 	.word	0x58026400

0800875c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800875c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800875e:	f04f 0c00 	mov.w	ip, #0
{
 8008762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008766:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008768:	6804      	ldr	r4, [r0, #0]
 800876a:	6848      	ldr	r0, [r1, #4]
{
 800876c:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800876e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008770:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008772:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008776:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800877a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800877e:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008780:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008784:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008788:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800878a:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800878e:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008790:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008792:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008794:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008798:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800879c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80087a0:	4f38      	ldr	r7, [pc, #224]	; (8008884 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80087a2:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80087a4:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80087a8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80087ac:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087ae:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80087b2:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087b4:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80087b8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087bc:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80087be:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80087c2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80087c4:	68e5      	ldr	r5, [r4, #12]
 80087c6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80087ca:	444d      	add	r5, r9
 80087cc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80087d0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80087d2:	691d      	ldr	r5, [r3, #16]
 80087d4:	f025 0507 	bic.w	r5, r5, #7
 80087d8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80087da:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80087de:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80087e0:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80087e4:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80087e8:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80087ec:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80087f0:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80087f4:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 80087f8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80087fc:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80087fe:	695d      	ldr	r5, [r3, #20]
 8008800:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008804:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008806:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800880a:	69dd      	ldr	r5, [r3, #28]
 800880c:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800880e:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008810:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008812:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8008816:	4305      	orrs	r5, r0
 8008818:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800881a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800881c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008820:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008822:	f1be 0f00 	cmp.w	lr, #0
 8008826:	d00b      	beq.n	8008840 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008828:	f1be 0f01 	cmp.w	lr, #1
 800882c:	d026      	beq.n	800887c <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800882e:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008832:	2d02      	cmp	r5, #2
 8008834:	d902      	bls.n	800883c <LTDC_SetConfig+0xe0>
 8008836:	f1be 0f07 	cmp.w	lr, #7
 800883a:	d121      	bne.n	8008880 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800883c:	2702      	movs	r7, #2
 800883e:	e000      	b.n	8008842 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8008840:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008842:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008844:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008846:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008848:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800884c:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008850:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008854:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008856:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008858:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800885c:	490a      	ldr	r1, [pc, #40]	; (8008888 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800885e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008862:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008866:	4001      	ands	r1, r0
 8008868:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800886a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800886e:	58a3      	ldr	r3, [r4, r2]
 8008870:	f043 0301 	orr.w	r3, r3, #1
 8008874:	50a3      	str	r3, [r4, r2]
}
 8008876:	b003      	add	sp, #12
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 800887c:	2703      	movs	r7, #3
 800887e:	e7e0      	b.n	8008842 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8008880:	2701      	movs	r7, #1
 8008882:	e7de      	b.n	8008842 <LTDC_SetConfig+0xe6>
 8008884:	fffff8f8 	.word	0xfffff8f8
 8008888:	fffff800 	.word	0xfffff800

0800888c <HAL_LTDC_MspInit>:
}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8008890:	2800      	cmp	r0, #0
 8008892:	d06d      	beq.n	8008970 <HAL_LTDC_Init+0xe0>
{
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008896:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800889a:	4604      	mov	r4, r0
 800889c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d060      	beq.n	8008966 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088a6:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a8:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80088aa:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088ac:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088b0:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088b2:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088b4:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088bc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80088be:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088c0:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80088c2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088c6:	4e2b      	ldr	r6, [pc, #172]	; (8008974 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80088c8:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088ca:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088cc:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80088ce:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088d0:	4302      	orrs	r2, r0
 80088d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	4032      	ands	r2, r6
 80088d8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088da:	6898      	ldr	r0, [r3, #8]
 80088dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80088e0:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088e2:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088e6:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088ea:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80088ec:	68d8      	ldr	r0, [r3, #12]
 80088ee:	4030      	ands	r0, r6
 80088f0:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80088f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088fa:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80088fe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008902:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	4032      	ands	r2, r6
 8008908:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800890a:	6918      	ldr	r0, [r3, #16]
 800890c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008910:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008912:	ea40 000c 	orr.w	r0, r0, ip
 8008916:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008918:	6958      	ldr	r0, [r3, #20]
 800891a:	4006      	ands	r6, r0
 800891c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008922:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008926:	4302      	orrs	r2, r0
 8008928:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800892a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800892c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008930:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008934:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008938:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800893a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800893c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008940:	4302      	orrs	r2, r0
  return HAL_OK;
 8008942:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008944:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8008948:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800894c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800894e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008950:	f042 0206 	orr.w	r2, r2, #6
 8008954:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	432a      	orrs	r2, r5
 800895a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800895c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008960:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8008964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8008966:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800896a:	f7ff ff8f 	bl	800888c <HAL_LTDC_MspInit>
 800896e:	e799      	b.n	80088a4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8008970:	2001      	movs	r0, #1
}
 8008972:	4770      	bx	lr
 8008974:	f000f800 	.word	0xf000f800

08008978 <HAL_LTDC_ErrorCallback>:
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <HAL_LTDC_LineEventCallback>:
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <HAL_LTDC_ReloadEventCallback>:
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <HAL_LTDC_IRQHandler>:
{
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008986:	6803      	ldr	r3, [r0, #0]
{
 8008988:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800898a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800898c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800898e:	0769      	lsls	r1, r5, #29
 8008990:	d501      	bpl.n	8008996 <HAL_LTDC_IRQHandler+0x12>
 8008992:	0772      	lsls	r2, r6, #29
 8008994:	d41d      	bmi.n	80089d2 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008996:	07ab      	lsls	r3, r5, #30
 8008998:	d501      	bpl.n	800899e <HAL_LTDC_IRQHandler+0x1a>
 800899a:	07b7      	lsls	r7, r6, #30
 800899c:	d42d      	bmi.n	80089fa <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800899e:	07e8      	lsls	r0, r5, #31
 80089a0:	d501      	bpl.n	80089a6 <HAL_LTDC_IRQHandler+0x22>
 80089a2:	07f1      	lsls	r1, r6, #31
 80089a4:	d440      	bmi.n	8008a28 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80089a6:	072a      	lsls	r2, r5, #28
 80089a8:	d501      	bpl.n	80089ae <HAL_LTDC_IRQHandler+0x2a>
 80089aa:	0733      	lsls	r3, r6, #28
 80089ac:	d400      	bmi.n	80089b0 <HAL_LTDC_IRQHandler+0x2c>
}
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089b0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089b2:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 80089b4:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 80089b6:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089ba:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089bc:	f022 0208 	bic.w	r2, r2, #8
 80089c0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089c2:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80089c4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80089c8:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089cc:	f7ff ffd8 	bl	8008980 <HAL_LTDC_ReloadEventCallback>
}
 80089d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80089d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80089d4:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 80089d6:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80089d8:	f022 0204 	bic.w	r2, r2, #4
 80089dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80089de:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80089e0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80089e4:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089f0:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80089f4:	f7ff ffc0 	bl	8008978 <HAL_LTDC_ErrorCallback>
 80089f8:	e7cd      	b.n	8008996 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089fa:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089fc:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089fe:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a02:	f022 0202 	bic.w	r2, r2, #2
 8008a06:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8008a08:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008a0a:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8008a0c:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a0e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8008a12:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a16:	f043 0302 	orr.w	r3, r3, #2
 8008a1a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a1e:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8008a22:	f7ff ffa9 	bl	8008978 <HAL_LTDC_ErrorCallback>
 8008a26:	e7ba      	b.n	800899e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a28:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a2a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8008a2c:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8008a2e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a38:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a3a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008a3e:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008a42:	f7ff ff9b 	bl	800897c <HAL_LTDC_LineEventCallback>
 8008a46:	e7ae      	b.n	80089a6 <HAL_LTDC_IRQHandler+0x22>

08008a48 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8008a48:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d028      	beq.n	8008aa2 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a50:	2302      	movs	r3, #2
 8008a52:	4694      	mov	ip, r2
{
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a58:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8008a5a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a5e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a60:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a64:	fb04 0402 	mla	r4, r4, r2, r0
 8008a68:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8008a6a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a6e:	460f      	mov	r7, r1
 8008a70:	3438      	adds	r4, #56	; 0x38
 8008a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a7e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a80:	4662      	mov	r2, ip
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a86:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a88:	f7ff fe68 	bl	800875c <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8008a8c:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a8e:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8008a90:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a92:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a96:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008a9a:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8008a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8008aa2:	2002      	movs	r0, #2
}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop

08008aa8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008aac:	f7fd fd5c 	bl	8006568 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	d05a      	beq.n	8008b6a <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008ab4:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008ab6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008abc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8008ac0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008acc:	e005      	b.n	8008ada <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008ace:	f7fd fd4b 	bl	8006568 <HAL_GetTick>
 8008ad2:	1b43      	subs	r3, r0, r5
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d841      	bhi.n	8008b5c <HAL_MDMA_Init+0xb4>
 8008ad8:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	07d2      	lsls	r2, r2, #31
 8008ade:	d4f6      	bmi.n	8008ace <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008ae0:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8008ae4:	69e1      	ldr	r1, [r4, #28]
 8008ae6:	4302      	orrs	r2, r0
 8008ae8:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008af0:	432a      	orrs	r2, r5
 8008af2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008af4:	4302      	orrs	r2, r0
 8008af6:	68a0      	ldr	r0, [r4, #8]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008afc:	432a      	orrs	r2, r5
 8008afe:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008b00:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008b02:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008b04:	6920      	ldr	r0, [r4, #16]
 8008b06:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b08:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008b0a:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b0e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008b12:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b14:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b16:	d103      	bne.n	8008b20 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008b1e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008b20:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008b22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008b24:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8008b26:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008b28:	db30      	blt.n	8008b8c <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	db1c      	blt.n	8008b6e <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b34:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b36:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b3a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008b3e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b40:	d021      	beq.n	8008b86 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008b42:	b2c9      	uxtb	r1, r1
 8008b44:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008b46:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b48:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8008b4a:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008b4c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008b4e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008b50:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b52:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008b56:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008b5c:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b5e:	2303      	movs	r3, #3
      return HAL_ERROR;
 8008b60:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008b62:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008b6a:	2001      	movs	r0, #1
}
 8008b6c:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b6e:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008b70:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b72:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b76:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8008b7a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b7c:	6a18      	ldr	r0, [r3, #32]
 8008b7e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008b82:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b84:	d1dd      	bne.n	8008b42 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8008b86:	2200      	movs	r2, #0
 8008b88:	629a      	str	r2, [r3, #40]	; 0x28
 8008b8a:	e7dc      	b.n	8008b46 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b8c:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008b8e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b90:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008b94:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b96:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008b98:	621a      	str	r2, [r3, #32]
 8008b9a:	e7c8      	b.n	8008b2e <HAL_MDMA_Init+0x86>

08008b9c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008b9c:	b1f0      	cbz	r0, 8008bdc <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8008b9e:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4601      	mov	r1, r0
  return HAL_OK;
 8008ba4:	4618      	mov	r0, r3
{
 8008ba6:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8008ba8:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008baa:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008bac:	f024 0401 	bic.w	r4, r4, #1
 8008bb0:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008bb2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008bb4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008bb6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008bb8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008bba:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008bbc:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008bbe:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8008bc0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8008bc2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8008bc4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008bc6:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008bc8:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8008bca:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008bce:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8008bd2:	664b      	str	r3, [r1, #100]	; 0x64
}
 8008bd4:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8008bd6:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8008bda:	4770      	bx	lr
    return HAL_ERROR;
 8008bdc:	2001      	movs	r0, #1
}
 8008bde:	4770      	bx	lr

08008be0 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008be0:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <HAL_PWREx_ConfigSupply+0x74>)
 8008be2:	68d3      	ldr	r3, [r2, #12]
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bea:	68d3      	ldr	r3, [r2, #12]
{
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008bf0:	d005      	beq.n	8008bfe <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bf6:	1a18      	subs	r0, r3, r0
 8008bf8:	bf18      	it	ne
 8008bfa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c02:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c04:	4303      	orrs	r3, r0
 8008c06:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8008c08:	f7fd fcae 	bl	8006568 <HAL_GetTick>
 8008c0c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c0e:	e005      	b.n	8008c1c <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c10:	f7fd fcaa 	bl	8006568 <HAL_GetTick>
 8008c14:	1b43      	subs	r3, r0, r5
 8008c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c1a:	d819      	bhi.n	8008c50 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c1c:	6873      	ldr	r3, [r6, #4]
 8008c1e:	049a      	lsls	r2, r3, #18
 8008c20:	d5f6      	bpl.n	8008c10 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c22:	f1a4 031d 	sub.w	r3, r4, #29
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d905      	bls.n	8008c36 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8008c2a:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c2e:	2801      	cmp	r0, #1
 8008c30:	d901      	bls.n	8008c36 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8008c32:	2000      	movs	r0, #0
}
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8008c36:	f7fd fc97 	bl	8006568 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c3a:	4d06      	ldr	r5, [pc, #24]	; (8008c54 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008c3c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c3e:	68eb      	ldr	r3, [r5, #12]
 8008c40:	03db      	lsls	r3, r3, #15
 8008c42:	d4f6      	bmi.n	8008c32 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c44:	f7fd fc90 	bl	8006568 <HAL_GetTick>
 8008c48:	1b00      	subs	r0, r0, r4
 8008c4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008c4e:	d9f6      	bls.n	8008c3e <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008c50:	2001      	movs	r0, #1
}
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	58024800 	.word	0x58024800

08008c58 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f000 81f7 	beq.w	800904c <HAL_RCC_OscConfig+0x3f4>
{
 8008c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c60:	6803      	ldr	r3, [r0, #0]
 8008c62:	4604      	mov	r4, r0
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	d52e      	bpl.n	8008cc6 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c68:	49b4      	ldr	r1, [pc, #720]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008c6a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c6c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c6e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c72:	2a10      	cmp	r2, #16
 8008c74:	f000 812c 	beq.w	8008ed0 <HAL_RCC_OscConfig+0x278>
 8008c78:	2a18      	cmp	r2, #24
 8008c7a:	f000 8124 	beq.w	8008ec6 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c84:	f000 8167 	beq.w	8008f56 <HAL_RCC_OscConfig+0x2fe>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 817f 	beq.w	8008f8c <HAL_RCC_OscConfig+0x334>
 8008c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c92:	4baa      	ldr	r3, [pc, #680]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	f000 8278 	beq.w	800918a <HAL_RCC_OscConfig+0x532>
 8008c9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ca6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca8:	f7fd fc5e 	bl	8006568 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cac:	4ea3      	ldr	r6, [pc, #652]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8008cae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cb0:	e005      	b.n	8008cbe <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cb2:	f7fd fc59 	bl	8006568 <HAL_GetTick>
 8008cb6:	1b40      	subs	r0, r0, r5
 8008cb8:	2864      	cmp	r0, #100	; 0x64
 8008cba:	f200 8165 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cbe:	6833      	ldr	r3, [r6, #0]
 8008cc0:	039f      	lsls	r7, r3, #14
 8008cc2:	d5f6      	bpl.n	8008cb2 <HAL_RCC_OscConfig+0x5a>
 8008cc4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cc6:	0799      	lsls	r1, r3, #30
 8008cc8:	d521      	bpl.n	8008d0e <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cca:	4a9c      	ldr	r2, [pc, #624]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008ccc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cce:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cd0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008cd4:	f040 80a8 	bne.w	8008e28 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd8:	4b98      	ldr	r3, [pc, #608]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	075b      	lsls	r3, r3, #29
 8008cde:	d503      	bpl.n	8008ce8 <HAL_RCC_OscConfig+0x90>
 8008ce0:	68e3      	ldr	r3, [r4, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80ed 	beq.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce8:	f7fd fc56 	bl	8006598 <HAL_GetREVID>
 8008cec:	f241 0303 	movw	r3, #4099	; 0x1003
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	f200 8189 	bhi.w	8009008 <HAL_RCC_OscConfig+0x3b0>
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	2a40      	cmp	r2, #64	; 0x40
 8008cfa:	f000 824e 	beq.w	800919a <HAL_RCC_OscConfig+0x542>
 8008cfe:	498f      	ldr	r1, [pc, #572]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008d00:	684b      	ldr	r3, [r1, #4]
 8008d02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d06:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008d0a:	604b      	str	r3, [r1, #4]
 8008d0c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d0e:	06d9      	lsls	r1, r3, #27
 8008d10:	d456      	bmi.n	8008dc0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d12:	071d      	lsls	r5, r3, #28
 8008d14:	d517      	bpl.n	8008d46 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d16:	6963      	ldr	r3, [r4, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 80b4 	beq.w	8008e86 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d1e:	4b87      	ldr	r3, [pc, #540]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008d20:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d22:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8008d24:	f042 0201 	orr.w	r2, r2, #1
 8008d28:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008d2a:	f7fd fc1d 	bl	8006568 <HAL_GetTick>
 8008d2e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d30:	e005      	b.n	8008d3e <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d32:	f7fd fc19 	bl	8006568 <HAL_GetTick>
 8008d36:	1b40      	subs	r0, r0, r5
 8008d38:	2802      	cmp	r0, #2
 8008d3a:	f200 8125 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008d40:	0798      	lsls	r0, r3, #30
 8008d42:	d5f6      	bpl.n	8008d32 <HAL_RCC_OscConfig+0xda>
 8008d44:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d46:	069a      	lsls	r2, r3, #26
 8008d48:	d517      	bpl.n	8008d7a <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d4a:	69a3      	ldr	r3, [r4, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8134 	beq.w	8008fba <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d52:	4b7a      	ldr	r3, [pc, #488]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008d54:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d56:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008d5e:	f7fd fc03 	bl	8006568 <HAL_GetTick>
 8008d62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d64:	e005      	b.n	8008d72 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d66:	f7fd fbff 	bl	8006568 <HAL_GetTick>
 8008d6a:	1b40      	subs	r0, r0, r5
 8008d6c:	2802      	cmp	r0, #2
 8008d6e:	f200 810b 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d72:	6833      	ldr	r3, [r6, #0]
 8008d74:	049f      	lsls	r7, r3, #18
 8008d76:	d5f6      	bpl.n	8008d66 <HAL_RCC_OscConfig+0x10e>
 8008d78:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d7a:	0759      	lsls	r1, r3, #29
 8008d7c:	f100 80b2 	bmi.w	8008ee4 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d82:	b1d8      	cbz	r0, 8008dbc <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d84:	4b6d      	ldr	r3, [pc, #436]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008d86:	691a      	ldr	r2, [r3, #16]
 8008d88:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008d8c:	2a18      	cmp	r2, #24
 8008d8e:	f000 81ce 	beq.w	800912e <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d92:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d94:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d96:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008d98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008d9c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d9e:	f000 8161 	beq.w	8009064 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da2:	f7fd fbe1 	bl	8006568 <HAL_GetTick>
 8008da6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008da8:	e005      	b.n	8008db6 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008daa:	f7fd fbdd 	bl	8006568 <HAL_GetTick>
 8008dae:	1b00      	subs	r0, r0, r4
 8008db0:	2802      	cmp	r0, #2
 8008db2:	f200 80e9 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	019b      	lsls	r3, r3, #6
 8008dba:	d4f6      	bmi.n	8008daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008dbc:	2000      	movs	r0, #0
}
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc0:	4a5e      	ldr	r2, [pc, #376]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008dc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d072      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x25c>
 8008dce:	2b18      	cmp	r3, #24
 8008dd0:	d06c      	beq.n	8008eac <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008dd2:	69e3      	ldr	r3, [r4, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8103 	beq.w	8008fe0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8008dda:	4b58      	ldr	r3, [pc, #352]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dde:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8008de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008de6:	f7fd fbbf 	bl	8006568 <HAL_GetTick>
 8008dea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dec:	e005      	b.n	8008dfa <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008dee:	f7fd fbbb 	bl	8006568 <HAL_GetTick>
 8008df2:	1b40      	subs	r0, r0, r5
 8008df4:	2802      	cmp	r0, #2
 8008df6:	f200 80c7 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dfa:	6833      	ldr	r3, [r6, #0]
 8008dfc:	05db      	lsls	r3, r3, #23
 8008dfe:	d5f6      	bpl.n	8008dee <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e00:	f7fd fbca 	bl	8006598 <HAL_GetREVID>
 8008e04:	f241 0303 	movw	r3, #4099	; 0x1003
 8008e08:	4298      	cmp	r0, r3
 8008e0a:	f200 81e9 	bhi.w	80091e0 <HAL_RCC_OscConfig+0x588>
 8008e0e:	6a22      	ldr	r2, [r4, #32]
 8008e10:	6873      	ldr	r3, [r6, #4]
 8008e12:	2a20      	cmp	r2, #32
 8008e14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e18:	bf0c      	ite	eq
 8008e1a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008e1e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008e22:	6073      	str	r3, [r6, #4]
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	e774      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e28:	2b18      	cmp	r3, #24
 8008e2a:	f000 810b 	beq.w	8009044 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e2e:	68e2      	ldr	r2, [r4, #12]
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	f000 80f3 	beq.w	800901c <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e36:	4941      	ldr	r1, [pc, #260]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008e38:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e3c:	f023 0319 	bic.w	r3, r3, #25
 8008e40:	4313      	orrs	r3, r2
 8008e42:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008e44:	f7fd fb90 	bl	8006568 <HAL_GetTick>
 8008e48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e4a:	e005      	b.n	8008e58 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e4c:	f7fd fb8c 	bl	8006568 <HAL_GetTick>
 8008e50:	1b40      	subs	r0, r0, r5
 8008e52:	2802      	cmp	r0, #2
 8008e54:	f200 8098 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	075f      	lsls	r7, r3, #29
 8008e5c:	d5f6      	bpl.n	8008e4c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e5e:	f7fd fb9b 	bl	8006598 <HAL_GetREVID>
 8008e62:	f241 0303 	movw	r3, #4099	; 0x1003
 8008e66:	4298      	cmp	r0, r3
 8008e68:	f200 81c3 	bhi.w	80091f2 <HAL_RCC_OscConfig+0x59a>
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	6873      	ldr	r3, [r6, #4]
 8008e70:	2a40      	cmp	r2, #64	; 0x40
 8008e72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e76:	bf0c      	ite	eq
 8008e78:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008e7c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008e80:	6073      	str	r3, [r6, #4]
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	e743      	b.n	8008d0e <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8008e86:	4b2d      	ldr	r3, [pc, #180]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008e88:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e8a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008e8c:	f022 0201 	bic.w	r2, r2, #1
 8008e90:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008e92:	f7fd fb69 	bl	8006568 <HAL_GetTick>
 8008e96:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e98:	e004      	b.n	8008ea4 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e9a:	f7fd fb65 	bl	8006568 <HAL_GetTick>
 8008e9e:	1b40      	subs	r0, r0, r5
 8008ea0:	2802      	cmp	r0, #2
 8008ea2:	d871      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ea4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008ea6:	0799      	lsls	r1, r3, #30
 8008ea8:	d4f7      	bmi.n	8008e9a <HAL_RCC_OscConfig+0x242>
 8008eaa:	e74b      	b.n	8008d44 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008eac:	f002 0203 	and.w	r2, r2, #3
 8008eb0:	2a01      	cmp	r2, #1
 8008eb2:	d18e      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eb4:	4b21      	ldr	r3, [pc, #132]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	05da      	lsls	r2, r3, #23
 8008eba:	d552      	bpl.n	8008f62 <HAL_RCC_OscConfig+0x30a>
 8008ebc:	69e3      	ldr	r3, [r4, #28]
 8008ebe:	2b80      	cmp	r3, #128	; 0x80
 8008ec0:	d04f      	beq.n	8008f62 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8008ec2:	2001      	movs	r0, #1
}
 8008ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ec6:	f001 0103 	and.w	r1, r1, #3
 8008eca:	2902      	cmp	r1, #2
 8008ecc:	f47f aed7 	bne.w	8008c7e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed0:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008ed2:	6812      	ldr	r2, [r2, #0]
 8008ed4:	0392      	lsls	r2, r2, #14
 8008ed6:	f57f aef6 	bpl.w	8008cc6 <HAL_RCC_OscConfig+0x6e>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	f47f aef2 	bne.w	8008cc6 <HAL_RCC_OscConfig+0x6e>
 8008ee2:	e7ee      	b.n	8008ec2 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <HAL_RCC_OscConfig+0x2e8>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ee8:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8008eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008ef0:	f7fd fb3a 	bl	8006568 <HAL_GetTick>
 8008ef4:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ef6:	e004      	b.n	8008f02 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ef8:	f7fd fb36 	bl	8006568 <HAL_GetTick>
 8008efc:	1b40      	subs	r0, r0, r5
 8008efe:	2864      	cmp	r0, #100	; 0x64
 8008f00:	d842      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f02:	6833      	ldr	r3, [r6, #0]
 8008f04:	05da      	lsls	r2, r3, #23
 8008f06:	d5f7      	bpl.n	8008ef8 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	f000 817a 	beq.w	8009204 <HAL_RCC_OscConfig+0x5ac>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 814b 	beq.w	80091ac <HAL_RCC_OscConfig+0x554>
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
 8008f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f1c:	f000 8187 	beq.w	800922e <HAL_RCC_OscConfig+0x5d6>
 8008f20:	f022 0201 	bic.w	r2, r2, #1
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70
 8008f26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f28:	f022 0204 	bic.w	r2, r2, #4
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008f2e:	f7fd fb1b 	bl	8006568 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f32:	4e02      	ldr	r6, [pc, #8]	; (8008f3c <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f34:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008f38:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x2f6>
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f44:	f7fd fb10 	bl	8006568 <HAL_GetTick>
 8008f48:	1b40      	subs	r0, r0, r5
 8008f4a:	42b8      	cmp	r0, r7
 8008f4c:	d81c      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f4e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008f50:	079b      	lsls	r3, r3, #30
 8008f52:	d5f7      	bpl.n	8008f44 <HAL_RCC_OscConfig+0x2ec>
 8008f54:	e714      	b.n	8008d80 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f56:	4aae      	ldr	r2, [pc, #696]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f5e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f60:	e6a2      	b.n	8008ca8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f62:	f7fd fb19 	bl	8006598 <HAL_GetREVID>
 8008f66:	f241 0303 	movw	r3, #4099	; 0x1003
 8008f6a:	4298      	cmp	r0, r3
 8008f6c:	d870      	bhi.n	8009050 <HAL_RCC_OscConfig+0x3f8>
 8008f6e:	6a22      	ldr	r2, [r4, #32]
 8008f70:	2a20      	cmp	r2, #32
 8008f72:	f000 8153 	beq.w	800921c <HAL_RCC_OscConfig+0x5c4>
 8008f76:	49a6      	ldr	r1, [pc, #664]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8008f78:	684b      	ldr	r3, [r1, #4]
 8008f7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f7e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008f82:	604b      	str	r3, [r1, #4]
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	e6c4      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8008f88:	2003      	movs	r0, #3
}
 8008f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f8c:	4ba0      	ldr	r3, [pc, #640]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f90:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008fa0:	f7fd fae2 	bl	8006568 <HAL_GetTick>
 8008fa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fa6:	e004      	b.n	8008fb2 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fa8:	f7fd fade 	bl	8006568 <HAL_GetTick>
 8008fac:	1b40      	subs	r0, r0, r5
 8008fae:	2864      	cmp	r0, #100	; 0x64
 8008fb0:	d8ea      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fb2:	6833      	ldr	r3, [r6, #0]
 8008fb4:	0398      	lsls	r0, r3, #14
 8008fb6:	d4f7      	bmi.n	8008fa8 <HAL_RCC_OscConfig+0x350>
 8008fb8:	e684      	b.n	8008cc4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8008fba:	4b95      	ldr	r3, [pc, #596]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fbe:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8008fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008fc6:	f7fd facf 	bl	8006568 <HAL_GetTick>
 8008fca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fcc:	e004      	b.n	8008fd8 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fce:	f7fd facb 	bl	8006568 <HAL_GetTick>
 8008fd2:	1b40      	subs	r0, r0, r5
 8008fd4:	2802      	cmp	r0, #2
 8008fd6:	d8d7      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fd8:	6833      	ldr	r3, [r6, #0]
 8008fda:	0498      	lsls	r0, r3, #18
 8008fdc:	d4f7      	bmi.n	8008fce <HAL_RCC_OscConfig+0x376>
 8008fde:	e6cb      	b.n	8008d78 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8008fe0:	4b8b      	ldr	r3, [pc, #556]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fe4:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8008fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008fec:	f7fd fabc 	bl	8006568 <HAL_GetTick>
 8008ff0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ff2:	e004      	b.n	8008ffe <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ff4:	f7fd fab8 	bl	8006568 <HAL_GetTick>
 8008ff8:	1b40      	subs	r0, r0, r5
 8008ffa:	2802      	cmp	r0, #2
 8008ffc:	d8c4      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	05df      	lsls	r7, r3, #23
 8009002:	d4f7      	bmi.n	8008ff4 <HAL_RCC_OscConfig+0x39c>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	e684      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009008:	4a81      	ldr	r2, [pc, #516]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 800900a:	6921      	ldr	r1, [r4, #16]
 800900c:	6853      	ldr	r3, [r2, #4]
 800900e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009012:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009016:	6053      	str	r3, [r2, #4]
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	e678      	b.n	8008d0e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 800901c:	4b7c      	ldr	r3, [pc, #496]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 800901e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009020:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009028:	f7fd fa9e 	bl	8006568 <HAL_GetTick>
 800902c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800902e:	e004      	b.n	800903a <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009030:	f7fd fa9a 	bl	8006568 <HAL_GetTick>
 8009034:	1b40      	subs	r0, r0, r5
 8009036:	2802      	cmp	r0, #2
 8009038:	d8a6      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800903a:	6833      	ldr	r3, [r6, #0]
 800903c:	0758      	lsls	r0, r3, #29
 800903e:	d4f7      	bmi.n	8009030 <HAL_RCC_OscConfig+0x3d8>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	e664      	b.n	8008d0e <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009044:	0792      	lsls	r2, r2, #30
 8009046:	f47f aef2 	bne.w	8008e2e <HAL_RCC_OscConfig+0x1d6>
 800904a:	e645      	b.n	8008cd8 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 800904c:	2001      	movs	r0, #1
}
 800904e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009050:	4a6f      	ldr	r2, [pc, #444]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8009052:	6a21      	ldr	r1, [r4, #32]
 8009054:	68d3      	ldr	r3, [r2, #12]
 8009056:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800905a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800905e:	60d3      	str	r3, [r2, #12]
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	e656      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8009064:	f7fd fa80 	bl	8006568 <HAL_GetTick>
 8009068:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800906a:	e004      	b.n	8009076 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800906c:	f7fd fa7c 	bl	8006568 <HAL_GetTick>
 8009070:	1b80      	subs	r0, r0, r6
 8009072:	2802      	cmp	r0, #2
 8009074:	d888      	bhi.n	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	0199      	lsls	r1, r3, #6
 800907a:	d4f7      	bmi.n	800906c <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800907c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800907e:	4b65      	ldr	r3, [pc, #404]	; (8009214 <HAL_RCC_OscConfig+0x5bc>)
 8009080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009082:	4013      	ands	r3, r2
 8009084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009086:	4964      	ldr	r1, [pc, #400]	; (8009218 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009088:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800908a:	4e61      	ldr	r6, [pc, #388]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800908c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009090:	62ab      	str	r3, [r5, #40]	; 0x28
 8009092:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009094:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8009098:	3f01      	subs	r7, #1
 800909a:	1e50      	subs	r0, r2, #1
 800909c:	3b01      	subs	r3, #1
 800909e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80090a0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80090a4:	025b      	lsls	r3, r3, #9
 80090a6:	0400      	lsls	r0, r0, #16
 80090a8:	3a01      	subs	r2, #1
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80090b0:	0612      	lsls	r2, r2, #24
 80090b2:	4303      	orrs	r3, r0
 80090b4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80090b8:	433b      	orrs	r3, r7
 80090ba:	4313      	orrs	r3, r2
 80090bc:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80090be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80090c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80090ca:	4011      	ands	r1, r2
 80090cc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80090d0:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80090d6:	f023 030c 	bic.w	r3, r3, #12
 80090da:	4313      	orrs	r3, r2
 80090dc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80090e2:	f023 0302 	bic.w	r3, r3, #2
 80090e6:	4313      	orrs	r3, r2
 80090e8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090f0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80090fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009100:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8009102:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009110:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009112:	f7fd fa29 	bl	8006568 <HAL_GetTick>
 8009116:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009118:	e005      	b.n	8009126 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800911a:	f7fd fa25 	bl	8006568 <HAL_GetTick>
 800911e:	1b00      	subs	r0, r0, r4
 8009120:	2802      	cmp	r0, #2
 8009122:	f63f af31 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009126:	6833      	ldr	r3, [r6, #0]
 8009128:	019a      	lsls	r2, r3, #6
 800912a:	d5f6      	bpl.n	800911a <HAL_RCC_OscConfig+0x4c2>
 800912c:	e646      	b.n	8008dbc <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800912e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009132:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009134:	f43f ae43 	beq.w	8008dbe <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009138:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800913c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800913e:	428b      	cmp	r3, r1
 8009140:	f47f aebf 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009144:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800914a:	429a      	cmp	r2, r3
 800914c:	f47f aeb9 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009152:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8009156:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009158:	429a      	cmp	r2, r3
 800915a:	f47f aeb2 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800915e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009160:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8009164:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009166:	429a      	cmp	r2, r3
 8009168:	f47f aeab 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800916c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800916e:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8009172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009174:	429a      	cmp	r2, r3
 8009176:	f47f aea4 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800917a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800917c:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8009180:	3801      	subs	r0, #1
  return HAL_OK;
 8009182:	1a28      	subs	r0, r5, r0
 8009184:	bf18      	it	ne
 8009186:	2001      	movne	r0, #1
}
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800918a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e586      	b.n	8008ca8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800919a:	4a1d      	ldr	r2, [pc, #116]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 800919c:	6853      	ldr	r3, [r2, #4]
 800919e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80091a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091a6:	6053      	str	r3, [r2, #4]
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	e5b0      	b.n	8008d0e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ac:	4b18      	ldr	r3, [pc, #96]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091ae:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091b4:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	671a      	str	r2, [r3, #112]	; 0x70
 80091bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091be:	f022 0204 	bic.w	r2, r2, #4
 80091c2:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80091c4:	f7fd f9d0 	bl	8006568 <HAL_GetTick>
 80091c8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091ca:	e005      	b.n	80091d8 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091cc:	f7fd f9cc 	bl	8006568 <HAL_GetTick>
 80091d0:	1b40      	subs	r0, r0, r5
 80091d2:	42b8      	cmp	r0, r7
 80091d4:	f63f aed8 	bhi.w	8008f88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091d8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80091da:	0798      	lsls	r0, r3, #30
 80091dc:	d4f6      	bmi.n	80091cc <HAL_RCC_OscConfig+0x574>
 80091de:	e5cf      	b.n	8008d80 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091e0:	68f3      	ldr	r3, [r6, #12]
 80091e2:	6a22      	ldr	r2, [r4, #32]
 80091e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80091e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091ec:	60f3      	str	r3, [r6, #12]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	e58f      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091f2:	6873      	ldr	r3, [r6, #4]
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80091fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091fe:	6073      	str	r3, [r6, #4]
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	e584      	b.n	8008d0e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009204:	4a02      	ldr	r2, [pc, #8]	; (8009210 <HAL_RCC_OscConfig+0x5b8>)
 8009206:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009208:	f043 0301 	orr.w	r3, r3, #1
 800920c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800920e:	e68e      	b.n	8008f2e <HAL_RCC_OscConfig+0x2d6>
 8009210:	58024400 	.word	0x58024400
 8009214:	fffffc0c 	.word	0xfffffc0c
 8009218:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800921c:	4a08      	ldr	r2, [pc, #32]	; (8009240 <HAL_RCC_OscConfig+0x5e8>)
 800921e:	6853      	ldr	r3, [r2, #4]
 8009220:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009228:	6053      	str	r3, [r2, #4]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	e571      	b.n	8008d12 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800922e:	f042 0204 	orr.w	r2, r2, #4
 8009232:	671a      	str	r2, [r3, #112]	; 0x70
 8009234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	671a      	str	r2, [r3, #112]	; 0x70
 800923c:	e677      	b.n	8008f2e <HAL_RCC_OscConfig+0x2d6>
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400

08009244 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009244:	4a47      	ldr	r2, [pc, #284]	; (8009364 <HAL_RCC_GetSysClockFreq+0x120>)
 8009246:	6913      	ldr	r3, [r2, #16]
 8009248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800924c:	2b10      	cmp	r3, #16
 800924e:	d004      	beq.n	800925a <HAL_RCC_GetSysClockFreq+0x16>
 8009250:	2b18      	cmp	r3, #24
 8009252:	d00d      	beq.n	8009270 <HAL_RCC_GetSysClockFreq+0x2c>
 8009254:	b11b      	cbz	r3, 800925e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009256:	4844      	ldr	r0, [pc, #272]	; (8009368 <HAL_RCC_GetSysClockFreq+0x124>)
 8009258:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800925a:	4844      	ldr	r0, [pc, #272]	; (800936c <HAL_RCC_GetSysClockFreq+0x128>)
 800925c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	0699      	lsls	r1, r3, #26
 8009262:	d54a      	bpl.n	80092fa <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	4842      	ldr	r0, [pc, #264]	; (8009370 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009268:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800926c:	40d8      	lsrs	r0, r3
 800926e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009270:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8009272:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009274:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8009278:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800927c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009280:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8009282:	d038      	beq.n	80092f6 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009284:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009288:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800928c:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009290:	fb01 f105 	mul.w	r1, r1, r5
 8009294:	2b01      	cmp	r3, #1
 8009296:	ee07 1a90 	vmov	s15, r1
 800929a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800929e:	d002      	beq.n	80092a6 <HAL_RCC_GetSysClockFreq+0x62>
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d02c      	beq.n	80092fe <HAL_RCC_GetSysClockFreq+0xba>
 80092a4:	b393      	cbz	r3, 800930c <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092a6:	ee07 0a90 	vmov	s15, r0
 80092aa:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8009374 <HAL_RCC_GetSysClockFreq+0x130>
 80092ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80092b4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80092b8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009378 <HAL_RCC_GetSysClockFreq+0x134>
 80092bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80092c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092cc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80092d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80092d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80092d8:	4b22      	ldr	r3, [pc, #136]	; (8009364 <HAL_RCC_GetSysClockFreq+0x120>)
 80092da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80092e0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80092f6:	bc30      	pop	{r4, r5}
 80092f8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092fa:	481d      	ldr	r0, [pc, #116]	; (8009370 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80092fc:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092fe:	ee07 0a90 	vmov	s15, r0
 8009302:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 800937c <HAL_RCC_GetSysClockFreq+0x138>
 8009306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800930a:	e7d2      	b.n	80092b2 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800930c:	6813      	ldr	r3, [r2, #0]
 800930e:	069b      	lsls	r3, r3, #26
 8009310:	d520      	bpl.n	8009354 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009312:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009314:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009318:	4915      	ldr	r1, [pc, #84]	; (8009370 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800931a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800931e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009326:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009328:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800932a:	eddf 4a13 	vldr	s9, [pc, #76]	; 8009378 <HAL_RCC_GetSysClockFreq+0x134>
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee06 1a10 	vmov	s12, r1
 8009336:	ee06 3a90 	vmov	s13, r3
 800933a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800933e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009342:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009346:	eee7 6a24 	vfma.f32	s13, s14, s9
 800934a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800934e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009352:	e7c1      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009354:	ee07 0a90 	vmov	s15, r0
 8009358:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8009380 <HAL_RCC_GetSysClockFreq+0x13c>
 800935c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009360:	e7a7      	b.n	80092b2 <HAL_RCC_GetSysClockFreq+0x6e>
 8009362:	bf00      	nop
 8009364:	58024400 	.word	0x58024400
 8009368:	003d0900 	.word	0x003d0900
 800936c:	017d7840 	.word	0x017d7840
 8009370:	03d09000 	.word	0x03d09000
 8009374:	4a742400 	.word	0x4a742400
 8009378:	39000000 	.word	0x39000000
 800937c:	4bbebc20 	.word	0x4bbebc20
 8009380:	4c742400 	.word	0x4c742400

08009384 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009384:	2800      	cmp	r0, #0
 8009386:	f000 810e 	beq.w	80095a6 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800938a:	4a8d      	ldr	r2, [pc, #564]	; (80095c0 <HAL_RCC_ClockConfig+0x23c>)
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	428b      	cmp	r3, r1
{
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800939c:	d20c      	bcs.n	80093b8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	f023 030f 	bic.w	r3, r3, #15
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093a8:	6813      	ldr	r3, [r2, #0]
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	428b      	cmp	r3, r1
 80093b0:	d002      	beq.n	80093b8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80093b2:	2001      	movs	r0, #1
}
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	075f      	lsls	r7, r3, #29
 80093bc:	d50b      	bpl.n	80093d6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093be:	4981      	ldr	r1, [pc, #516]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 80093c0:	6920      	ldr	r0, [r4, #16]
 80093c2:	698a      	ldr	r2, [r1, #24]
 80093c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80093c8:	4290      	cmp	r0, r2
 80093ca:	d904      	bls.n	80093d6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093cc:	698a      	ldr	r2, [r1, #24]
 80093ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093d2:	4302      	orrs	r2, r0
 80093d4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093d6:	071e      	lsls	r6, r3, #28
 80093d8:	d50b      	bpl.n	80093f2 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093da:	497a      	ldr	r1, [pc, #488]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 80093dc:	6960      	ldr	r0, [r4, #20]
 80093de:	69ca      	ldr	r2, [r1, #28]
 80093e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80093e4:	4290      	cmp	r0, r2
 80093e6:	d904      	bls.n	80093f2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093e8:	69ca      	ldr	r2, [r1, #28]
 80093ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093ee:	4302      	orrs	r2, r0
 80093f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093f2:	06d8      	lsls	r0, r3, #27
 80093f4:	d50b      	bpl.n	800940e <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093f6:	4973      	ldr	r1, [pc, #460]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 80093f8:	69a0      	ldr	r0, [r4, #24]
 80093fa:	69ca      	ldr	r2, [r1, #28]
 80093fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009400:	4290      	cmp	r0, r2
 8009402:	d904      	bls.n	800940e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009404:	69ca      	ldr	r2, [r1, #28]
 8009406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800940a:	4302      	orrs	r2, r0
 800940c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800940e:	0699      	lsls	r1, r3, #26
 8009410:	d50b      	bpl.n	800942a <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009412:	496c      	ldr	r1, [pc, #432]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 8009414:	69e0      	ldr	r0, [r4, #28]
 8009416:	6a0a      	ldr	r2, [r1, #32]
 8009418:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800941c:	4290      	cmp	r0, r2
 800941e:	d904      	bls.n	800942a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009420:	6a0a      	ldr	r2, [r1, #32]
 8009422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009426:	4302      	orrs	r2, r0
 8009428:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800942a:	079a      	lsls	r2, r3, #30
 800942c:	f140 80ad 	bpl.w	800958a <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009430:	4864      	ldr	r0, [pc, #400]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 8009432:	68e1      	ldr	r1, [r4, #12]
 8009434:	6982      	ldr	r2, [r0, #24]
 8009436:	f002 020f 	and.w	r2, r2, #15
 800943a:	4291      	cmp	r1, r2
 800943c:	d904      	bls.n	8009448 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800943e:	6982      	ldr	r2, [r0, #24]
 8009440:	f022 020f 	bic.w	r2, r2, #15
 8009444:	430a      	orrs	r2, r1
 8009446:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009448:	07d8      	lsls	r0, r3, #31
 800944a:	d531      	bpl.n	80094b0 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800944c:	4a5d      	ldr	r2, [pc, #372]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 800944e:	68a1      	ldr	r1, [r4, #8]
 8009450:	6993      	ldr	r3, [r2, #24]
 8009452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009456:	430b      	orrs	r3, r1
 8009458:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800945a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800945c:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800945e:	2902      	cmp	r1, #2
 8009460:	f000 80a3 	beq.w	80095aa <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009464:	2903      	cmp	r1, #3
 8009466:	f000 809a 	beq.w	800959e <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800946a:	2901      	cmp	r1, #1
 800946c:	f000 80a3 	beq.w	80095b6 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009470:	0758      	lsls	r0, r3, #29
 8009472:	d59e      	bpl.n	80093b2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009474:	4a53      	ldr	r2, [pc, #332]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009476:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800947a:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800947c:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800947e:	f023 0307 	bic.w	r3, r3, #7
 8009482:	430b      	orrs	r3, r1
 8009484:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8009486:	f7fd f86f 	bl	8006568 <HAL_GetTick>
 800948a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800948c:	e005      	b.n	800949a <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800948e:	f7fd f86b 	bl	8006568 <HAL_GetTick>
 8009492:	1b80      	subs	r0, r0, r6
 8009494:	4540      	cmp	r0, r8
 8009496:	f200 808c 	bhi.w	80095b2 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6862      	ldr	r2, [r4, #4]
 800949e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094a2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80094a6:	d1f2      	bne.n	800948e <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	0799      	lsls	r1, r3, #30
 80094ac:	d506      	bpl.n	80094bc <HAL_RCC_ClockConfig+0x138>
 80094ae:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094b0:	4844      	ldr	r0, [pc, #272]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 80094b2:	6982      	ldr	r2, [r0, #24]
 80094b4:	f002 020f 	and.w	r2, r2, #15
 80094b8:	428a      	cmp	r2, r1
 80094ba:	d86a      	bhi.n	8009592 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094bc:	4940      	ldr	r1, [pc, #256]	; (80095c0 <HAL_RCC_ClockConfig+0x23c>)
 80094be:	680a      	ldr	r2, [r1, #0]
 80094c0:	f002 020f 	and.w	r2, r2, #15
 80094c4:	42aa      	cmp	r2, r5
 80094c6:	d90a      	bls.n	80094de <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094c8:	680a      	ldr	r2, [r1, #0]
 80094ca:	f022 020f 	bic.w	r2, r2, #15
 80094ce:	432a      	orrs	r2, r5
 80094d0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094d2:	680a      	ldr	r2, [r1, #0]
 80094d4:	f002 020f 	and.w	r2, r2, #15
 80094d8:	42aa      	cmp	r2, r5
 80094da:	f47f af6a 	bne.w	80093b2 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094de:	075a      	lsls	r2, r3, #29
 80094e0:	d50b      	bpl.n	80094fa <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094e2:	4938      	ldr	r1, [pc, #224]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 80094e4:	6920      	ldr	r0, [r4, #16]
 80094e6:	698a      	ldr	r2, [r1, #24]
 80094e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80094ec:	4290      	cmp	r0, r2
 80094ee:	d204      	bcs.n	80094fa <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094f0:	698a      	ldr	r2, [r1, #24]
 80094f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80094f6:	4302      	orrs	r2, r0
 80094f8:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094fa:	071f      	lsls	r7, r3, #28
 80094fc:	d50b      	bpl.n	8009516 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094fe:	4931      	ldr	r1, [pc, #196]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 8009500:	6960      	ldr	r0, [r4, #20]
 8009502:	69ca      	ldr	r2, [r1, #28]
 8009504:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009508:	4290      	cmp	r0, r2
 800950a:	d204      	bcs.n	8009516 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800950c:	69ca      	ldr	r2, [r1, #28]
 800950e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009512:	4302      	orrs	r2, r0
 8009514:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009516:	06de      	lsls	r6, r3, #27
 8009518:	d50b      	bpl.n	8009532 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800951a:	492a      	ldr	r1, [pc, #168]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 800951c:	69a0      	ldr	r0, [r4, #24]
 800951e:	69ca      	ldr	r2, [r1, #28]
 8009520:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009524:	4290      	cmp	r0, r2
 8009526:	d204      	bcs.n	8009532 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009528:	69ca      	ldr	r2, [r1, #28]
 800952a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800952e:	4302      	orrs	r2, r0
 8009530:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009532:	069d      	lsls	r5, r3, #26
 8009534:	d50b      	bpl.n	800954e <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009536:	4a23      	ldr	r2, [pc, #140]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 8009538:	69e1      	ldr	r1, [r4, #28]
 800953a:	6a13      	ldr	r3, [r2, #32]
 800953c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009540:	4299      	cmp	r1, r3
 8009542:	d204      	bcs.n	800954e <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009544:	6a13      	ldr	r3, [r2, #32]
 8009546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954a:	430b      	orrs	r3, r1
 800954c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800954e:	f7ff fe79 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 8009552:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <HAL_RCC_ClockConfig+0x240>)
 8009554:	4602      	mov	r2, r0
 8009556:	481c      	ldr	r0, [pc, #112]	; (80095c8 <HAL_RCC_ClockConfig+0x244>)
 8009558:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800955a:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800955c:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8009560:	4d1a      	ldr	r5, [pc, #104]	; (80095cc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	4c1a      	ldr	r4, [pc, #104]	; (80095d0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009568:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800956a:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800956c:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8009570:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009572:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8009576:	4d17      	ldr	r5, [pc, #92]	; (80095d4 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009578:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800957e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009580:	6023      	str	r3, [r4, #0]
}
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8009586:	f7fc bf8d 	b.w	80064a4 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800958a:	07da      	lsls	r2, r3, #31
 800958c:	f53f af5e 	bmi.w	800944c <HAL_RCC_ClockConfig+0xc8>
 8009590:	e794      	b.n	80094bc <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009592:	6982      	ldr	r2, [r0, #24]
 8009594:	f022 020f 	bic.w	r2, r2, #15
 8009598:	4311      	orrs	r1, r2
 800959a:	6181      	str	r1, [r0, #24]
 800959c:	e78e      	b.n	80094bc <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800959e:	019f      	lsls	r7, r3, #6
 80095a0:	f53f af68 	bmi.w	8009474 <HAL_RCC_ClockConfig+0xf0>
 80095a4:	e705      	b.n	80093b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80095a6:	2001      	movs	r0, #1
}
 80095a8:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095aa:	039b      	lsls	r3, r3, #14
 80095ac:	f53f af62 	bmi.w	8009474 <HAL_RCC_ClockConfig+0xf0>
 80095b0:	e6ff      	b.n	80093b2 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80095b2:	2003      	movs	r0, #3
 80095b4:	e6fe      	b.n	80093b4 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095b6:	05de      	lsls	r6, r3, #23
 80095b8:	f53f af5c 	bmi.w	8009474 <HAL_RCC_ClockConfig+0xf0>
 80095bc:	e6f9      	b.n	80093b2 <HAL_RCC_ClockConfig+0x2e>
 80095be:	bf00      	nop
 80095c0:	52002000 	.word	0x52002000
 80095c4:	58024400 	.word	0x58024400
 80095c8:	0800b0e8 	.word	0x0800b0e8
 80095cc:	24001070 	.word	0x24001070
 80095d0:	24000004 	.word	0x24000004
 80095d4:	24000000 	.word	0x24000000

080095d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095d8:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095da:	f7ff fe33 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 80095de:	4b0b      	ldr	r3, [pc, #44]	; (800960c <HAL_RCC_GetHCLKFreq+0x34>)
 80095e0:	490b      	ldr	r1, [pc, #44]	; (8009610 <HAL_RCC_GetHCLKFreq+0x38>)
 80095e2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095e4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095e6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095ea:	4c0a      	ldr	r4, [pc, #40]	; (8009614 <HAL_RCC_GetHCLKFreq+0x3c>)
 80095ec:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095f0:	4d09      	ldr	r5, [pc, #36]	; (8009618 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095f2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095f4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095f6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095fa:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095fe:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009602:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8009606:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009608:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	58024400 	.word	0x58024400
 8009610:	0800b0e8 	.word	0x0800b0e8
 8009614:	24000004 	.word	0x24000004
 8009618:	24000000 	.word	0x24000000

0800961c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800961c:	4a3b      	ldr	r2, [pc, #236]	; (800970c <RCCEx_PLL2_Config+0xf0>)
{
 800961e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009620:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	2b03      	cmp	r3, #3
 8009628:	d069      	beq.n	80096fe <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009630:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8009632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009636:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009638:	f7fc ff96 	bl	8006568 <HAL_GetTick>
 800963c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800963e:	e004      	b.n	800964a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009640:	f7fc ff92 	bl	8006568 <HAL_GetTick>
 8009644:	1b43      	subs	r3, r0, r5
 8009646:	2b02      	cmp	r3, #2
 8009648:	d857      	bhi.n	80096fa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	011a      	lsls	r2, r3, #4
 800964e:	d4f7      	bmi.n	8009640 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009652:	6832      	ldr	r2, [r6, #0]
 8009654:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009658:	492d      	ldr	r1, [pc, #180]	; (8009710 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800965a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800965e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009660:	6875      	ldr	r5, [r6, #4]
 8009662:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009666:	3d01      	subs	r5, #1
 8009668:	1e50      	subs	r0, r2, #1
 800966a:	3b01      	subs	r3, #1
 800966c:	6932      	ldr	r2, [r6, #16]
 800966e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009672:	025b      	lsls	r3, r3, #9
 8009674:	0400      	lsls	r0, r0, #16
 8009676:	3a01      	subs	r2, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800967e:	0612      	lsls	r2, r2, #24
 8009680:	4303      	orrs	r3, r0
 8009682:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009686:	432b      	orrs	r3, r5
 8009688:	4313      	orrs	r3, r2
 800968a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800968c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800968e:	6972      	ldr	r2, [r6, #20]
 8009690:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009694:	4313      	orrs	r3, r2
 8009696:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800969a:	69b2      	ldr	r2, [r6, #24]
 800969c:	f023 0320 	bic.w	r3, r3, #32
 80096a0:	4313      	orrs	r3, r2
 80096a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096a6:	f023 0310 	bic.w	r3, r3, #16
 80096aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80096ae:	69f3      	ldr	r3, [r6, #28]
 80096b0:	4011      	ands	r1, r2
 80096b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80096b6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096ba:	f043 0310 	orr.w	r3, r3, #16
 80096be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80096c2:	b1f7      	cbz	r7, 8009702 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096c4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096c6:	bf0c      	ite	eq
 80096c8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096cc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80096d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096d2:	4b0e      	ldr	r3, [pc, #56]	; (800970c <RCCEx_PLL2_Config+0xf0>)
 80096d4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096d6:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80096d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80096dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80096de:	f7fc ff43 	bl	8006568 <HAL_GetTick>
 80096e2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096e4:	e004      	b.n	80096f0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096e6:	f7fc ff3f 	bl	8006568 <HAL_GetTick>
 80096ea:	1b00      	subs	r0, r0, r4
 80096ec:	2802      	cmp	r0, #2
 80096ee:	d804      	bhi.n	80096fa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	d5f7      	bpl.n	80096e6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80096f6:	2000      	movs	r0, #0
}
 80096f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80096fa:	2003      	movs	r0, #3
}
 80096fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80096fe:	2001      	movs	r0, #1
}
 8009700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009708:	e7e3      	b.n	80096d2 <RCCEx_PLL2_Config+0xb6>
 800970a:	bf00      	nop
 800970c:	58024400 	.word	0x58024400
 8009710:	ffff0007 	.word	0xffff0007

08009714 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009714:	4a3b      	ldr	r2, [pc, #236]	; (8009804 <RCCEx_PLL3_Config+0xf0>)
{
 8009716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009718:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d069      	beq.n	80097f6 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009722:	6813      	ldr	r3, [r2, #0]
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009728:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800972a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800972e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009730:	f7fc ff1a 	bl	8006568 <HAL_GetTick>
 8009734:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009736:	e004      	b.n	8009742 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009738:	f7fc ff16 	bl	8006568 <HAL_GetTick>
 800973c:	1b43      	subs	r3, r0, r5
 800973e:	2b02      	cmp	r3, #2
 8009740:	d857      	bhi.n	80097f2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	009a      	lsls	r2, r3, #2
 8009746:	d4f7      	bmi.n	8009738 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800974a:	6832      	ldr	r2, [r6, #0]
 800974c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009750:	492d      	ldr	r1, [pc, #180]	; (8009808 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009752:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009756:	62a3      	str	r3, [r4, #40]	; 0x28
 8009758:	6875      	ldr	r5, [r6, #4]
 800975a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800975e:	3d01      	subs	r5, #1
 8009760:	1e50      	subs	r0, r2, #1
 8009762:	3b01      	subs	r3, #1
 8009764:	6932      	ldr	r2, [r6, #16]
 8009766:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800976a:	025b      	lsls	r3, r3, #9
 800976c:	0400      	lsls	r0, r0, #16
 800976e:	3a01      	subs	r2, #1
 8009770:	b29b      	uxth	r3, r3
 8009772:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009776:	0612      	lsls	r2, r2, #24
 8009778:	4303      	orrs	r3, r0
 800977a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800977e:	432b      	orrs	r3, r5
 8009780:	4313      	orrs	r3, r2
 8009782:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009786:	6972      	ldr	r2, [r6, #20]
 8009788:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800978c:	4313      	orrs	r3, r2
 800978e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009792:	69b2      	ldr	r2, [r6, #24]
 8009794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009798:	4313      	orrs	r3, r2
 800979a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800979c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800979e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80097a6:	69f3      	ldr	r3, [r6, #28]
 80097a8:	4011      	ands	r1, r2
 80097aa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80097ae:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80097ba:	b1f7      	cbz	r7, 80097fa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80097bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097be:	bf0c      	ite	eq
 80097c0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097c4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80097c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097ca:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <RCCEx_PLL3_Config+0xf0>)
 80097cc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097ce:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80097d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80097d6:	f7fc fec7 	bl	8006568 <HAL_GetTick>
 80097da:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097dc:	e004      	b.n	80097e8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80097de:	f7fc fec3 	bl	8006568 <HAL_GetTick>
 80097e2:	1b00      	subs	r0, r0, r4
 80097e4:	2802      	cmp	r0, #2
 80097e6:	d804      	bhi.n	80097f2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	d5f7      	bpl.n	80097de <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80097ee:	2000      	movs	r0, #0
}
 80097f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80097f2:	2003      	movs	r0, #3
}
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80097f6:	2001      	movs	r0, #1
}
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009800:	e7e3      	b.n	80097ca <RCCEx_PLL3_Config+0xb6>
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
 8009808:	ffff0007 	.word	0xffff0007

0800980c <HAL_RCCEx_PeriphCLKConfig>:
{
 800980c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009810:	6803      	ldr	r3, [r0, #0]
{
 8009812:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009814:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8009818:	d01c      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800981a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800981c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009820:	f000 84c7 	beq.w	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8009824:	d823      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009826:	2a00      	cmp	r2, #0
 8009828:	f000 842c 	beq.w	800a084 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800982c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009830:	d120      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009832:	2102      	movs	r1, #2
 8009834:	3004      	adds	r0, #4
 8009836:	f7ff fef1 	bl	800961c <RCCEx_PLL2_Config>
 800983a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800983c:	2e00      	cmp	r6, #0
 800983e:	f040 84c0 	bne.w	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8009842:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009844:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009846:	48b0      	ldr	r0, [pc, #704]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009848:	2600      	movs	r6, #0
 800984a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800984c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8009850:	430a      	orrs	r2, r1
 8009852:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009854:	05da      	lsls	r2, r3, #23
 8009856:	d511      	bpl.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009858:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800985a:	2a04      	cmp	r2, #4
 800985c:	f200 8580 	bhi.w	800a360 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8009860:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009864:	04c104ba 	.word	0x04c104ba
 8009868:	033b04b2 	.word	0x033b04b2
 800986c:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 800986e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009872:	d0e8      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009874:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009876:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800987a:	d4ed      	bmi.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800987c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800987e:	059f      	lsls	r7, r3, #22
 8009880:	d51b      	bpl.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009882:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009884:	2a80      	cmp	r2, #128	; 0x80
 8009886:	f000 84b7 	beq.w	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800988a:	f200 8127 	bhi.w	8009adc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800988e:	2a00      	cmp	r2, #0
 8009890:	f000 83e6 	beq.w	800a060 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8009894:	2a40      	cmp	r2, #64	; 0x40
 8009896:	f040 8128 	bne.w	8009aea <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800989a:	2100      	movs	r1, #0
 800989c:	1d20      	adds	r0, r4, #4
 800989e:	f7ff febd 	bl	800961c <RCCEx_PLL2_Config>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	f040 83cc 	bne.w	800a044 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80098ac:	4996      	ldr	r1, [pc, #600]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80098ae:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80098b0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80098b2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80098b6:	4302      	orrs	r2, r0
 80098b8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098ba:	0558      	lsls	r0, r3, #21
 80098bc:	d51f      	bpl.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80098be:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80098c2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80098c6:	f000 8462 	beq.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0x982>
 80098ca:	f200 8111 	bhi.w	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	f000 83c0 	beq.w	800a054 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80098d4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80098d8:	f040 8112 	bne.w	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098dc:	2100      	movs	r1, #0
 80098de:	1d20      	adds	r0, r4, #4
 80098e0:	f7ff fe9c 	bl	800961c <RCCEx_PLL2_Config>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	f040 83b1 	bne.w	800a050 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098ee:	4986      	ldr	r1, [pc, #536]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80098f0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80098f4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80098f6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80098fa:	4302      	orrs	r2, r0
 80098fc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098fe:	0519      	lsls	r1, r3, #20
 8009900:	d51f      	bpl.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009902:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8009906:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800990a:	f000 8437 	beq.w	800a17c <HAL_RCCEx_PeriphCLKConfig+0x970>
 800990e:	f200 80fd 	bhi.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009912:	2a00      	cmp	r2, #0
 8009914:	f000 83aa 	beq.w	800a06c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009918:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800991c:	f040 80fe 	bne.w	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009920:	2100      	movs	r1, #0
 8009922:	1d20      	adds	r0, r4, #4
 8009924:	f7ff fe7a 	bl	800961c <RCCEx_PLL2_Config>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800992c:	2d00      	cmp	r5, #0
 800992e:	f040 8387 	bne.w	800a040 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009932:	4975      	ldr	r1, [pc, #468]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009934:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8009938:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800993a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800993e:	4302      	orrs	r2, r0
 8009940:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009942:	019a      	lsls	r2, r3, #6
 8009944:	d518      	bpl.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8009946:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009948:	2a20      	cmp	r2, #32
 800994a:	f000 840d 	beq.w	800a168 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800994e:	f200 80e8 	bhi.w	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8009952:	b13a      	cbz	r2, 8009964 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8009954:	2a10      	cmp	r2, #16
 8009956:	f040 80e7 	bne.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995a:	496b      	ldr	r1, [pc, #428]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800995c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800995e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009962:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009964:	2d00      	cmp	r5, #0
 8009966:	f040 83ba 	bne.w	800a0de <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800996a:	4967      	ldr	r1, [pc, #412]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800996c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800996e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009970:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009974:	4302      	orrs	r2, r0
 8009976:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009978:	04df      	lsls	r7, r3, #19
 800997a:	d51d      	bpl.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800997c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800997e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009982:	f000 840d 	beq.w	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8009986:	f200 80d2 	bhi.w	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800998a:	2a00      	cmp	r2, #0
 800998c:	f000 8374 	beq.w	800a078 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8009990:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009994:	f040 80d3 	bne.w	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009998:	2100      	movs	r1, #0
 800999a:	1d20      	adds	r0, r4, #4
 800999c:	f7ff fe3e 	bl	800961c <RCCEx_PLL2_Config>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	f040 834f 	bne.w	800a048 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099aa:	4957      	ldr	r1, [pc, #348]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80099ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80099ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80099b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80099b4:	4302      	orrs	r2, r0
 80099b6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099b8:	0498      	lsls	r0, r3, #18
 80099ba:	d51b      	bpl.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 80099bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099be:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80099c2:	f000 83bd 	beq.w	800a140 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80099c6:	f200 80bd 	bhi.w	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80099ca:	b14a      	cbz	r2, 80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80099cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80099d0:	f040 80c2 	bne.w	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099d4:	2101      	movs	r1, #1
 80099d6:	1d20      	adds	r0, r4, #4
 80099d8:	f7ff fe20 	bl	800961c <RCCEx_PLL2_Config>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099e0:	2d00      	cmp	r5, #0
 80099e2:	f040 837e 	bne.w	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80099e6:	4948      	ldr	r1, [pc, #288]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80099e8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80099ea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80099ec:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80099f0:	4302      	orrs	r2, r0
 80099f2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099f4:	0459      	lsls	r1, r3, #17
 80099f6:	d51d      	bpl.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 80099f8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80099fc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009a00:	f000 83a8 	beq.w	800a154 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8009a04:	f200 80ab 	bhi.w	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009a08:	b14a      	cbz	r2, 8009a1e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009a0a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009a0e:	f040 80b0 	bne.w	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a12:	2101      	movs	r1, #1
 8009a14:	1d20      	adds	r0, r4, #4
 8009a16:	f7ff fe01 	bl	800961c <RCCEx_PLL2_Config>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	f040 8363 	bne.w	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a24:	4938      	ldr	r1, [pc, #224]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009a26:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009a2a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009a2c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009a30:	4302      	orrs	r2, r0
 8009a32:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	d509      	bpl.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8009a38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009a3a:	2a00      	cmp	r2, #0
 8009a3c:	f000 8264 	beq.w	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8009a40:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009a44:	f000 825a 	beq.w	8009efc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8009a48:	2601      	movs	r6, #1
 8009a4a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a4c:	041f      	lsls	r7, r3, #16
 8009a4e:	d50d      	bpl.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8009a50:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009a52:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009a56:	f000 8420 	beq.w	800a29a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8009a5a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009a5e:	f000 82ce 	beq.w	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	f000 82d1 	beq.w	800a00a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009a68:	2601      	movs	r6, #1
 8009a6a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a6c:	01d8      	lsls	r0, r3, #7
 8009a6e:	f100 81cf 	bmi.w	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a72:	0259      	lsls	r1, r3, #9
 8009a74:	f100 81ef 	bmi.w	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a78:	07df      	lsls	r7, r3, #31
 8009a7a:	f140 8088 	bpl.w	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a7e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009a80:	2a28      	cmp	r2, #40	; 0x28
 8009a82:	f200 81cf 	bhi.w	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8009a86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009a8a:	007e      	.short	0x007e
 8009a8c:	01cd01cd 	.word	0x01cd01cd
 8009a90:	01cd01cd 	.word	0x01cd01cd
 8009a94:	01cd01cd 	.word	0x01cd01cd
 8009a98:	03d401cd 	.word	0x03d401cd
 8009a9c:	01cd01cd 	.word	0x01cd01cd
 8009aa0:	01cd01cd 	.word	0x01cd01cd
 8009aa4:	01cd01cd 	.word	0x01cd01cd
 8009aa8:	007701cd 	.word	0x007701cd
 8009aac:	01cd01cd 	.word	0x01cd01cd
 8009ab0:	01cd01cd 	.word	0x01cd01cd
 8009ab4:	01cd01cd 	.word	0x01cd01cd
 8009ab8:	007e01cd 	.word	0x007e01cd
 8009abc:	01cd01cd 	.word	0x01cd01cd
 8009ac0:	01cd01cd 	.word	0x01cd01cd
 8009ac4:	01cd01cd 	.word	0x01cd01cd
 8009ac8:	007e01cd 	.word	0x007e01cd
 8009acc:	01cd01cd 	.word	0x01cd01cd
 8009ad0:	01cd01cd 	.word	0x01cd01cd
 8009ad4:	01cd01cd 	.word	0x01cd01cd
 8009ad8:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8009adc:	2ac0      	cmp	r2, #192	; 0xc0
 8009ade:	f43f aee2 	beq.w	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8009ae2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009ae6:	f43f aede 	beq.w	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8009aea:	2601      	movs	r6, #1
 8009aec:	4635      	mov	r5, r6
 8009aee:	e6e4      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009af0:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8009af4:	f43f aef8 	beq.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009af8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009afc:	f43f aef4 	beq.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009b00:	2601      	movs	r6, #1
 8009b02:	4635      	mov	r5, r6
 8009b04:	e6fb      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b0c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009b10:	f43f af0c 	beq.w	800992c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009b14:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009b18:	f43f af08 	beq.w	800992c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009b1c:	2601      	movs	r6, #1
 8009b1e:	4635      	mov	r5, r6
 8009b20:	e70f      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8009b22:	2a30      	cmp	r2, #48	; 0x30
 8009b24:	f43f af1e 	beq.w	8009964 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8009b28:	2601      	movs	r6, #1
 8009b2a:	4635      	mov	r5, r6
 8009b2c:	e724      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009b2e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009b32:	f43f af37 	beq.w	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009b36:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009b3a:	f43f af33 	beq.w	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009b3e:	2601      	movs	r6, #1
 8009b40:	4635      	mov	r5, r6
 8009b42:	e739      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009b44:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8009b48:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009b4c:	f43f af48 	beq.w	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009b50:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8009b54:	f43f af44 	beq.w	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009b58:	2601      	movs	r6, #1
 8009b5a:	4635      	mov	r5, r6
 8009b5c:	e74a      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b5e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009b62:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009b66:	f43f af5a 	beq.w	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009b6a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009b6e:	f43f af56 	beq.w	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009b72:	2601      	movs	r6, #1
 8009b74:	4635      	mov	r5, r6
 8009b76:	e75d      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b78:	2101      	movs	r1, #1
 8009b7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b7e:	f7ff fdc9 	bl	8009714 <RCCEx_PLL3_Config>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	f000 82c0 	beq.w	800a10c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8009b8c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b8e:	0798      	lsls	r0, r3, #30
 8009b90:	d516      	bpl.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b92:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009b94:	2a05      	cmp	r2, #5
 8009b96:	f200 83e6 	bhi.w	800a366 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8009b9a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009b9e:	000d      	.short	0x000d
 8009ba0:	00060336 	.word	0x00060336
 8009ba4:	000d000d 	.word	0x000d000d
 8009ba8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009baa:	2101      	movs	r1, #1
 8009bac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bb0:	f7ff fdb0 	bl	8009714 <RCCEx_PLL3_Config>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	f000 8279 	beq.w	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009bbe:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bc0:	0759      	lsls	r1, r3, #29
 8009bc2:	d517      	bpl.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bc4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009bc8:	2a05      	cmp	r2, #5
 8009bca:	f200 83c6 	bhi.w	800a35a <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8009bce:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009bd2:	000d      	.short	0x000d
 8009bd4:	00060326 	.word	0x00060326
 8009bd8:	000d000d 	.word	0x000d000d
 8009bdc:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bde:	2101      	movs	r1, #1
 8009be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009be4:	f7ff fd96 	bl	8009714 <RCCEx_PLL3_Config>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	f000 826a 	beq.w	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8009bf2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bf4:	069a      	lsls	r2, r3, #26
 8009bf6:	d51d      	bpl.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009bf8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009bfc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009c00:	f000 8340 	beq.w	800a284 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8009c04:	f200 81af 	bhi.w	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8009c08:	b14a      	cbz	r2, 8009c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009c0a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009c0e:	f040 81b4 	bne.w	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c12:	2100      	movs	r1, #0
 8009c14:	1d20      	adds	r0, r4, #4
 8009c16:	f7ff fd01 	bl	800961c <RCCEx_PLL2_Config>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c1e:	2d00      	cmp	r5, #0
 8009c20:	f040 823c 	bne.w	800a09c <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c24:	49b3      	ldr	r1, [pc, #716]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009c26:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8009c2a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009c2c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009c30:	4302      	orrs	r2, r0
 8009c32:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c34:	065f      	lsls	r7, r3, #25
 8009c36:	d51d      	bpl.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c38:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009c3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009c40:	f000 8334 	beq.w	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8009c44:	f200 817f 	bhi.w	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009c48:	b14a      	cbz	r2, 8009c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c4a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009c4e:	f040 8184 	bne.w	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c52:	2100      	movs	r1, #0
 8009c54:	1d20      	adds	r0, r4, #4
 8009c56:	f7ff fce1 	bl	800961c <RCCEx_PLL2_Config>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c5e:	2d00      	cmp	r5, #0
 8009c60:	f040 8221 	bne.w	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c64:	49a3      	ldr	r1, [pc, #652]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009c66:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009c6a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009c6c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009c70:	4302      	orrs	r2, r0
 8009c72:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c74:	0618      	lsls	r0, r3, #24
 8009c76:	d51d      	bpl.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c78:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009c7c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009c80:	f000 831f 	beq.w	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009c84:	f200 814f 	bhi.w	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8009c88:	b14a      	cbz	r2, 8009c9e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009c8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009c8e:	f040 8154 	bne.w	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c92:	2100      	movs	r1, #0
 8009c94:	1d20      	adds	r0, r4, #4
 8009c96:	f7ff fcc1 	bl	800961c <RCCEx_PLL2_Config>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	f040 81f7 	bne.w	800a092 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca4:	4993      	ldr	r1, [pc, #588]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ca6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8009caa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009cac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009cb0:	4302      	orrs	r2, r0
 8009cb2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cb4:	0719      	lsls	r1, r3, #28
 8009cb6:	d50b      	bpl.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009cb8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009cbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009cc0:	f000 831e 	beq.w	800a300 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cc4:	488b      	ldr	r0, [pc, #556]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009cc6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009cc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cd0:	06da      	lsls	r2, r3, #27
 8009cd2:	d50b      	bpl.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009cd4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009cd8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009cdc:	f000 8305 	beq.w	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ce0:	4884      	ldr	r0, [pc, #528]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ce2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009ce4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cec:	031f      	lsls	r7, r3, #12
 8009cee:	d50e      	bpl.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8009cf0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8009cf4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009cf8:	f000 816b 	beq.w	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8009cfc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009d00:	f000 816e 	beq.w	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8009d04:	2900      	cmp	r1, #0
 8009d06:	f000 82e7 	beq.w	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d0a:	2601      	movs	r6, #1
 8009d0c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d0e:	0358      	lsls	r0, r3, #13
 8009d10:	d50f      	bpl.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8009d12:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009d16:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009d1a:	f000 8144 	beq.w	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8009d1e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009d22:	f000 8147 	beq.w	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8009d26:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009d2a:	f000 82a2 	beq.w	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009d2e:	2601      	movs	r6, #1
 8009d30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d32:	03d9      	lsls	r1, r3, #15
 8009d34:	d517      	bpl.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009d36:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	f000 8288 	beq.w	800a24e <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8009d3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009d42:	f040 817a 	bne.w	800a03a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d46:	2102      	movs	r1, #2
 8009d48:	1d20      	adds	r0, r4, #4
 8009d4a:	f7ff fc67 	bl	800961c <RCCEx_PLL2_Config>
 8009d4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	2d00      	cmp	r5, #0
 8009d54:	f040 81e5 	bne.w	800a122 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d58:	4966      	ldr	r1, [pc, #408]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009d5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d5c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d62:	4302      	orrs	r2, r0
 8009d64:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d66:	009a      	lsls	r2, r3, #2
 8009d68:	f100 815c 	bmi.w	800a024 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d6c:	039f      	lsls	r7, r3, #14
 8009d6e:	d43f      	bmi.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009d70:	1e30      	subs	r0, r6, #0
 8009d72:	bf18      	it	ne
 8009d74:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d76:	02de      	lsls	r6, r3, #11
 8009d78:	d506      	bpl.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d7a:	495e      	ldr	r1, [pc, #376]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009d7c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009d7e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009d80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009d84:	432a      	orrs	r2, r5
 8009d86:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d88:	00dd      	lsls	r5, r3, #3
 8009d8a:	d507      	bpl.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009d8c:	4959      	ldr	r1, [pc, #356]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009d8e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009d92:	690a      	ldr	r2, [r1, #16]
 8009d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d98:	432a      	orrs	r2, r5
 8009d9a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d9c:	0299      	lsls	r1, r3, #10
 8009d9e:	d506      	bpl.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009da0:	4954      	ldr	r1, [pc, #336]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009da2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009da4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009da6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009daa:	432a      	orrs	r2, r5
 8009dac:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dae:	005a      	lsls	r2, r3, #1
 8009db0:	d509      	bpl.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009db2:	4a50      	ldr	r2, [pc, #320]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009db4:	6911      	ldr	r1, [r2, #16]
 8009db6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009dba:	6111      	str	r1, [r2, #16]
 8009dbc:	6911      	ldr	r1, [r2, #16]
 8009dbe:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8009dc2:	4329      	orrs	r1, r5
 8009dc4:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da06      	bge.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009dca:	494a      	ldr	r1, [pc, #296]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009dcc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009dce:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009dd4:	432a      	orrs	r2, r5
 8009dd6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009dd8:	021b      	lsls	r3, r3, #8
 8009dda:	d507      	bpl.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ddc:	4a45      	ldr	r2, [pc, #276]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009dde:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009de2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009de4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009de8:	430b      	orrs	r3, r1
 8009dea:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009df0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009df4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009df8:	f000 8232 	beq.w	800a260 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8009dfc:	f240 80c3 	bls.w	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8009e00:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009e04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e08:	f000 80c0 	beq.w	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	e7b2      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8009e10:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009e12:	2a03      	cmp	r2, #3
 8009e14:	f200 82aa 	bhi.w	800a36c <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8009e18:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009e1c:	018a0010 	.word	0x018a0010
 8009e20:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e24:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e26:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e28:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e2a:	f57f aec9 	bpl.w	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009e2e:	e6b0      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e30:	2102      	movs	r1, #2
 8009e32:	1d20      	adds	r0, r4, #4
 8009e34:	f7ff fbf2 	bl	800961c <RCCEx_PLL2_Config>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	f040 8152 	bne.w	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e42:	492c      	ldr	r1, [pc, #176]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009e44:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009e46:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009e48:	f022 0203 	bic.w	r2, r2, #3
 8009e4c:	4302      	orrs	r2, r0
 8009e4e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e50:	0259      	lsls	r1, r3, #9
 8009e52:	f57f ae11 	bpl.w	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e56:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8009e58:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e5a:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e60:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009e62:	f7fc fb81 	bl	8006568 <HAL_GetTick>
 8009e66:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e68:	e005      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e6a:	f7fc fb7d 	bl	8006568 <HAL_GetTick>
 8009e6e:	1bc0      	subs	r0, r0, r7
 8009e70:	2864      	cmp	r0, #100	; 0x64
 8009e72:	f200 81e8 	bhi.w	800a246 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e76:	f8d8 3000 	ldr.w	r3, [r8]
 8009e7a:	05da      	lsls	r2, r3, #23
 8009e7c:	d5f5      	bpl.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	f040 8267 	bne.w	800a352 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e84:	4a1b      	ldr	r2, [pc, #108]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009e86:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009e8a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009e8c:	4059      	eors	r1, r3
 8009e8e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009e92:	d00b      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e94:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e96:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e98:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e9c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009ea0:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ea2:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009ea4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009ea8:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009eaa:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb0:	f000 8231 	beq.w	800a316 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009eb4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009eb8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009ebc:	f000 823f 	beq.w	800a33e <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8009ec0:	490c      	ldr	r1, [pc, #48]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ec2:	690a      	ldr	r2, [r1, #16]
 8009ec4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009ec8:	610a      	str	r2, [r1, #16]
 8009eca:	4a0a      	ldr	r2, [pc, #40]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ed0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	e5ce      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009eda:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	f040 80b5 	bne.w	800a04c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ee2:	4904      	ldr	r1, [pc, #16]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009ee8:	f022 0207 	bic.w	r2, r2, #7
 8009eec:	4302      	orrs	r2, r0
 8009eee:	650a      	str	r2, [r1, #80]	; 0x50
 8009ef0:	e4c5      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009ef2:	bf00      	nop
 8009ef4:	58024400 	.word	0x58024400
 8009ef8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009efc:	2101      	movs	r1, #1
 8009efe:	1d20      	adds	r0, r4, #4
 8009f00:	f7ff fb8c 	bl	800961c <RCCEx_PLL2_Config>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	f040 810c 	bne.w	800a126 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009f0e:	49b9      	ldr	r1, [pc, #740]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f10:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009f12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009f14:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f1a:	ea42 0200 	orr.w	r2, r2, r0
 8009f1e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f20:	f57f ada4 	bpl.w	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009f24:	e594      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009f26:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009f2a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009f2e:	f43f aeb6 	beq.w	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009f32:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009f36:	f43f aeb2 	beq.w	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009f3a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f3c:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009f3e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f40:	f57f aec6 	bpl.w	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009f44:	e6b8      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f46:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009f4a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009f4e:	f43f ae86 	beq.w	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009f52:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009f56:	f43f ae82 	beq.w	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009f5a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f5c:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f5e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f60:	f57f aea8 	bpl.w	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f64:	e688      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f66:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009f6a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009f6e:	f43f ae56 	beq.w	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009f72:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009f76:	f43f ae52 	beq.w	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009f7a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f7c:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f7e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f80:	f57f ae78 	bpl.w	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009f84:	e658      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	f47f af40 	bne.w	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	f47f af3d 	bne.w	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f92:	4d98      	ldr	r5, [pc, #608]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009f94:	1e30      	subs	r0, r6, #0
 8009f96:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009f98:	bf18      	it	ne
 8009f9a:	2001      	movne	r0, #1
 8009f9c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	656a      	str	r2, [r5, #84]	; 0x54
 8009fa4:	e6e7      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fac:	f7ff fbb2 	bl	8009714 <RCCEx_PLL3_Config>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	f040 80a4 	bne.w	800a102 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fba:	498e      	ldr	r1, [pc, #568]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009fbc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009fc0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009fc2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009fc6:	4302      	orrs	r2, r0
 8009fc8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fca:	03d9      	lsls	r1, r3, #15
 8009fcc:	f57f aecb 	bpl.w	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009fd0:	e6b1      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fd8:	f7ff fb9c 	bl	8009714 <RCCEx_PLL3_Config>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	f040 8089 	bne.w	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe6:	4983      	ldr	r1, [pc, #524]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009fe8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8009fec:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009fee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009ff2:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ff4:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ff6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ff8:	f57f ae9b 	bpl.w	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009ffc:	e689      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ffe:	2101      	movs	r1, #1
 800a000:	1d20      	adds	r0, r4, #4
 800a002:	f7ff fb0b 	bl	800961c <RCCEx_PLL2_Config>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a00a:	2d00      	cmp	r5, #0
 800a00c:	d16f      	bne.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a00e:	4979      	ldr	r1, [pc, #484]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a010:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a012:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a018:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a01a:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a01c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a01e:	f57f ad28 	bpl.w	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a022:	e6f5      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a024:	2102      	movs	r1, #2
 800a026:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a02a:	f7ff fb73 	bl	8009714 <RCCEx_PLL3_Config>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	2800      	cmp	r0, #0
 800a032:	f43f ae9b 	beq.w	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 800a036:	2601      	movs	r6, #1
 800a038:	e698      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a03a:	2601      	movs	r6, #1
 800a03c:	4635      	mov	r5, r6
 800a03e:	e692      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a040:	462e      	mov	r6, r5
 800a042:	e47e      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a044:	462e      	mov	r6, r5
 800a046:	e438      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xae>
 800a048:	462e      	mov	r6, r5
 800a04a:	e4b5      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800a04c:	462e      	mov	r6, r5
 800a04e:	e416      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a050:	462e      	mov	r6, r5
 800a052:	e454      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a054:	4967      	ldr	r1, [pc, #412]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a056:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a05c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a05e:	e443      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a060:	4964      	ldr	r1, [pc, #400]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a062:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a064:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a068:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a06a:	e41c      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a06c:	4961      	ldr	r1, [pc, #388]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a06e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a070:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a074:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a076:	e459      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a078:	495e      	ldr	r1, [pc, #376]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a07a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a07c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a080:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a082:	e48f      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a084:	485b      	ldr	r0, [pc, #364]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a086:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a088:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800a08c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800a08e:	f7ff bbda 	b.w	8009846 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a092:	0719      	lsls	r1, r3, #28
 800a094:	462e      	mov	r6, r5
 800a096:	f57f ae1b 	bpl.w	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800a09a:	e60d      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a09c:	065f      	lsls	r7, r3, #25
 800a09e:	462e      	mov	r6, r5
 800a0a0:	f57f ade8 	bpl.w	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800a0a4:	e5c8      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0a6:	0618      	lsls	r0, r3, #24
 800a0a8:	462e      	mov	r6, r5
 800a0aa:	f57f ae03 	bpl.w	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0ae:	e5e3      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a0b0:	4950      	ldr	r1, [pc, #320]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a0b2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a0b4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a0b6:	f022 0207 	bic.w	r2, r2, #7
 800a0ba:	4302      	orrs	r2, r0
 800a0bc:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0be:	0759      	lsls	r1, r3, #29
 800a0c0:	f57f ad98 	bpl.w	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a0c4:	e57e      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0c6:	494b      	ldr	r1, [pc, #300]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a0c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800a0cc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a0ce:	f022 0207 	bic.w	r2, r2, #7
 800a0d2:	4302      	orrs	r2, r0
 800a0d4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0d6:	069a      	lsls	r2, r3, #26
 800a0d8:	f57f adac 	bpl.w	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a0dc:	e58c      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a0de:	462e      	mov	r6, r5
 800a0e0:	e44a      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a0e2:	462e      	mov	r6, r5
 800a0e4:	e486      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a0e6:	462e      	mov	r6, r5
 800a0e8:	e4c3      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a0ea:	462e      	mov	r6, r5
 800a0ec:	e4a2      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a0ee:	01d8      	lsls	r0, r3, #7
 800a0f0:	462e      	mov	r6, r5
 800a0f2:	f57f acbe 	bpl.w	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a0f6:	e68b      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a0f8:	0358      	lsls	r0, r3, #13
 800a0fa:	462e      	mov	r6, r5
 800a0fc:	f57f ae19 	bpl.w	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a100:	e607      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a102:	03d9      	lsls	r1, r3, #15
 800a104:	462e      	mov	r6, r5
 800a106:	f57f ae2e 	bpl.w	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a10a:	e614      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a10c:	4939      	ldr	r1, [pc, #228]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a10e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a110:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a112:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800a116:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a118:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a11a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a11c:	f57f ad50 	bpl.w	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800a120:	e537      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800a122:	462e      	mov	r6, r5
 800a124:	e61f      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a126:	041f      	lsls	r7, r3, #16
 800a128:	462e      	mov	r6, r5
 800a12a:	f57f ac9f 	bpl.w	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x260>
 800a12e:	e48f      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a130:	4930      	ldr	r1, [pc, #192]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800a132:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a134:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a138:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	d1d3      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800a13e:	e680      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a140:	2101      	movs	r1, #1
 800a142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a146:	f7ff fae5 	bl	8009714 <RCCEx_PLL3_Config>
 800a14a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	2d00      	cmp	r5, #0
 800a150:	d1c7      	bne.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800a152:	e448      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a154:	2101      	movs	r1, #1
 800a156:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a15a:	f7ff fadb 	bl	8009714 <RCCEx_PLL3_Config>
 800a15e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	2d00      	cmp	r5, #0
 800a164:	d1c1      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800a166:	e45d      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a168:	2102      	movs	r1, #2
 800a16a:	1d20      	adds	r0, r4, #4
 800a16c:	f7ff fa56 	bl	800961c <RCCEx_PLL2_Config>
 800a170:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	2d00      	cmp	r5, #0
 800a176:	d1b2      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800a178:	f7ff bbf7 	b.w	800996a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a17c:	2100      	movs	r1, #0
 800a17e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a182:	f7ff fac7 	bl	8009714 <RCCEx_PLL3_Config>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	4605      	mov	r5, r0
      break;
 800a18a:	f7ff bbcf 	b.w	800992c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a18e:	2100      	movs	r1, #0
 800a190:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a194:	f7ff fabe 	bl	8009714 <RCCEx_PLL3_Config>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	4605      	mov	r5, r0
      break;
 800a19c:	f7ff bba4 	b.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1a6:	f7ff fab5 	bl	8009714 <RCCEx_PLL3_Config>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	4605      	mov	r5, r0
      break;
 800a1ae:	f7ff bbf9 	b.w	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1b2:	2102      	movs	r1, #2
 800a1b4:	3024      	adds	r0, #36	; 0x24
 800a1b6:	f7ff faad 	bl	8009714 <RCCEx_PLL3_Config>
 800a1ba:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	f43f ab40 	beq.w	8009842 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	f7ff bb46 	b.w	8009854 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1ce:	f7ff faa1 	bl	8009714 <RCCEx_PLL3_Config>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	4605      	mov	r5, r0
      break;
 800a1d6:	e681      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d8:	4906      	ldr	r1, [pc, #24]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 800a1da:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a1de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a1e2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a1e4:	e67a      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	1d20      	adds	r0, r4, #4
 800a1ea:	f7ff fa17 	bl	800961c <RCCEx_PLL2_Config>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	4605      	mov	r5, r0
      break;
 800a1f2:	e673      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800a1f4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1fe:	f7ff fa89 	bl	8009714 <RCCEx_PLL3_Config>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	4605      	mov	r5, r0
      break;
 800a206:	f7ff bb4e 	b.w	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a20a:	2101      	movs	r1, #1
 800a20c:	1d20      	adds	r0, r4, #4
 800a20e:	f7ff fa05 	bl	800961c <RCCEx_PLL2_Config>
 800a212:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	2d00      	cmp	r5, #0
 800a218:	f47f acd1 	bne.w	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800a21c:	e748      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a21e:	2101      	movs	r1, #1
 800a220:	1d20      	adds	r0, r4, #4
 800a222:	f7ff f9fb 	bl	800961c <RCCEx_PLL2_Config>
 800a226:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	2d00      	cmp	r5, #0
 800a22c:	f47f ace1 	bne.w	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a230:	e749      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a232:	2101      	movs	r1, #1
 800a234:	1d20      	adds	r0, r4, #4
 800a236:	f7ff f9f1 	bl	800961c <RCCEx_PLL2_Config>
 800a23a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	2d00      	cmp	r5, #0
 800a240:	f47f aca4 	bne.w	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x380>
 800a244:	e762      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 800a246:	2603      	movs	r6, #3
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	4635      	mov	r5, r6
 800a24c:	e414      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a24e:	4949      	ldr	r1, [pc, #292]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a250:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a252:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a256:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a258:	2d00      	cmp	r5, #0
 800a25a:	f47f af62 	bne.w	800a122 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800a25e:	e57b      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a260:	4844      	ldr	r0, [pc, #272]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a262:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a264:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800a268:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	f47f adce 	bne.w	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x600>
 800a270:	e68f      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a272:	4940      	ldr	r1, [pc, #256]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a274:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a276:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a27a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	f47f af40 	bne.w	800a102 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800a282:	e69a      	b.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a284:	2102      	movs	r1, #2
 800a286:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a28a:	f7ff fa43 	bl	8009714 <RCCEx_PLL3_Config>
 800a28e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	2d00      	cmp	r5, #0
 800a294:	f47f af02 	bne.w	800a09c <HAL_RCCEx_PeriphCLKConfig+0x890>
 800a298:	e4c4      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a29a:	4936      	ldr	r1, [pc, #216]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a29c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a29e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a2a2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a2a4:	2d00      	cmp	r5, #0
 800a2a6:	f47f af22 	bne.w	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a2aa:	e6b0      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2b2:	f7ff fa2f 	bl	8009714 <RCCEx_PLL3_Config>
 800a2b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	f47f aef3 	bne.w	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800a2c0:	e4d0      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2c8:	f7ff fa24 	bl	8009714 <RCCEx_PLL3_Config>
 800a2cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	f47f aede 	bne.w	800a092 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800a2d6:	e4e5      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2d8:	1d20      	adds	r0, r4, #4
 800a2da:	f7ff f99f 	bl	800961c <RCCEx_PLL2_Config>
 800a2de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	f47f af08 	bne.w	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a2e8:	e67d      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2ea:	2102      	movs	r1, #2
 800a2ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2f0:	f7ff fa10 	bl	8009714 <RCCEx_PLL3_Config>
 800a2f4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a2f8:	b100      	cbz	r0, 800a2fc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 800a2fa:	2601      	movs	r6, #1
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	e4ef      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a300:	2102      	movs	r1, #2
 800a302:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a306:	f7ff fa05 	bl	8009714 <RCCEx_PLL3_Config>
 800a30a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a30e:	b100      	cbz	r0, 800a312 <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 800a310:	2601      	movs	r6, #1
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	e4d6      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800a316:	f7fc f927 	bl	8006568 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a31a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a31e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a322:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a324:	e004      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a326:	f7fc f91f 	bl	8006568 <HAL_GetTick>
 800a32a:	1bc0      	subs	r0, r0, r7
 800a32c:	4548      	cmp	r0, r9
 800a32e:	d88a      	bhi.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a330:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a334:	079b      	lsls	r3, r3, #30
 800a336:	d5f6      	bpl.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a338:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800a33c:	e5ba      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a33e:	480d      	ldr	r0, [pc, #52]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a340:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800a342:	6901      	ldr	r1, [r0, #16]
 800a344:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a348:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800a34c:	430a      	orrs	r2, r1
 800a34e:	6102      	str	r2, [r0, #16]
 800a350:	e5bb      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800a352:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a354:	462e      	mov	r6, r5
 800a356:	f7ff bb8f 	b.w	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a35a:	2601      	movs	r6, #1
 800a35c:	4635      	mov	r5, r6
 800a35e:	e449      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a360:	2601      	movs	r6, #1
 800a362:	f7ff ba8b 	b.w	800987c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a366:	2601      	movs	r6, #1
 800a368:	4635      	mov	r5, r6
 800a36a:	e429      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800a36c:	2601      	movs	r6, #1
 800a36e:	4635      	mov	r5, r6
 800a370:	f7ff bb7f 	b.w	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a374:	58024400 	.word	0x58024400
 800a378:	00ffffcf 	.word	0x00ffffcf

0800a37c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a37c:	4b58      	ldr	r3, [pc, #352]	; (800a4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 800a37e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a380:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a382:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a384:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800a386:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a38a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a38e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800a390:	d05c      	beq.n	800a44c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a392:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a396:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a39a:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a39e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a3a2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a3a4:	ee07 4a90 	vmov	s15, r4
 800a3a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a3ac:	d003      	beq.n	800a3b6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800a3ae:	2902      	cmp	r1, #2
 800a3b0:	d075      	beq.n	800a49e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	d04f      	beq.n	800a456 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3b6:	ee07 2a90 	vmov	s15, r2
 800a3ba:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800a3be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a3c8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d0:	ee06 3a90 	vmov	s13, r3
 800a3d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a3d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a3dc:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a3e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a3e4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3e8:	4a3d      	ldr	r2, [pc, #244]	; (800a4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 800a3ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a3f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a3f4:	ee07 3a10 	vmov	s14, r3
 800a3f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a3fc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a40a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a40e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a410:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a414:	ee07 3a10 	vmov	s14, r3
 800a418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a41c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a428:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a42c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a42e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a43a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a442:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a446:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a44a:	4770      	bx	lr
 800a44c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a44e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a452:	6082      	str	r2, [r0, #8]
}
 800a454:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	0689      	lsls	r1, r1, #26
 800a45a:	d527      	bpl.n	800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a45c:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a45e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a462:	4a22      	ldr	r2, [pc, #136]	; (800a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a464:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a468:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a46c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a472:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a474:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47c:	ee06 2a10 	vmov	s12, r2
 800a480:	ee06 3a90 	vmov	s13, r3
 800a484:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a488:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a48c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a490:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a494:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a498:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a49c:	e7a4      	b.n	800a3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a49e:	ee07 2a90 	vmov	s15, r2
 800a4a2:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800a4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4aa:	e78a      	b.n	800a3c2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4ac:	ee07 2a90 	vmov	s15, r2
 800a4b0:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4be:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c6:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a4de:	e783      	b.n	800a3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4e0:	58024400 	.word	0x58024400
 800a4e4:	4a742400 	.word	0x4a742400
 800a4e8:	39000000 	.word	0x39000000
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	4bbebc20 	.word	0x4bbebc20
 800a4f4:	4c742400 	.word	0x4c742400

0800a4f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4f8:	4b58      	ldr	r3, [pc, #352]	; (800a65c <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 800a4fa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a4fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a500:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800a502:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a506:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a50a:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800a50c:	d05c      	beq.n	800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a50e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a512:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a516:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a51a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a51e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a520:	ee07 4a90 	vmov	s15, r4
 800a524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a528:	d003      	beq.n	800a532 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800a52a:	2902      	cmp	r1, #2
 800a52c:	d075      	beq.n	800a61a <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800a52e:	2900      	cmp	r1, #0
 800a530:	d04f      	beq.n	800a5d2 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a532:	ee07 2a90 	vmov	s15, r2
 800a536:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800a53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a544:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a664 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54c:	ee06 3a90 	vmov	s13, r3
 800a550:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a554:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a558:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a55c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a560:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a564:	4a3d      	ldr	r2, [pc, #244]	; (800a65c <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800a566:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a56a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a56c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a570:	ee07 3a10 	vmov	s14, r3
 800a574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a578:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a57a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a586:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a58a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a58c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a590:	ee07 3a10 	vmov	s14, r3
 800a594:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a598:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a5a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a5aa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5be:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a5c2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a5c6:	4770      	bx	lr
 800a5c8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5ca:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5ce:	6082      	str	r2, [r0, #8]
}
 800a5d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	0689      	lsls	r1, r1, #26
 800a5d6:	d527      	bpl.n	800a628 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5d8:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5da:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5de:	4a22      	ldr	r2, [pc, #136]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5e0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5e4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5ee:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5f0:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a664 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f8:	ee06 2a10 	vmov	s12, r2
 800a5fc:	ee06 3a90 	vmov	s13, r3
 800a600:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a604:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a608:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a60c:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a610:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a614:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a618:	e7a4      	b.n	800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a61a:	ee07 2a90 	vmov	s15, r2
 800a61e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 800a622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a626:	e78a      	b.n	800a53e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a628:	ee07 2a90 	vmov	s15, r2
 800a62c:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a63a:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a664 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a642:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a64e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a652:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a656:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a65a:	e783      	b.n	800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a65c:	58024400 	.word	0x58024400
 800a660:	4a742400 	.word	0x4a742400
 800a664:	39000000 	.word	0x39000000
 800a668:	03d09000 	.word	0x03d09000
 800a66c:	4bbebc20 	.word	0x4bbebc20
 800a670:	4c742400 	.word	0x4c742400

0800a674 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a674:	4b5c      	ldr	r3, [pc, #368]	; (800a7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 800a676:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a678:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a67a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a67c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800a67e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a682:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a686:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800a688:	d05c      	beq.n	800a744 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a68a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a68e:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a692:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a696:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a69a:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a69c:	ee07 4a90 	vmov	s15, r4
 800a6a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a6a4:	d07e      	beq.n	800a7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800a6a6:	2902      	cmp	r1, #2
 800a6a8:	d075      	beq.n	800a796 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	d04f      	beq.n	800a74e <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6ae:	ee07 2a90 	vmov	s15, r2
 800a6b2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a7ec <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a6c0:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800a7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c8:	ee06 3a90 	vmov	s13, r3
 800a6cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a6d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a6d4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a6d8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a6dc:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a6e0:	4a41      	ldr	r2, [pc, #260]	; (800a7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800a6e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a6e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a6ec:	ee07 3a10 	vmov	s14, r3
 800a6f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a6f4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a6f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a6fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a702:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a706:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a708:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a70c:	ee07 3a10 	vmov	s14, r3
 800a710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a714:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a71c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a720:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a724:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a726:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a732:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a73a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a73e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a742:	4770      	bx	lr
 800a744:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a746:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a74a:	6082      	str	r2, [r0, #8]
}
 800a74c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a74e:	6819      	ldr	r1, [r3, #0]
 800a750:	0689      	lsls	r1, r1, #26
 800a752:	d52e      	bpl.n	800a7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a754:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a756:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a75a:	4a26      	ldr	r2, [pc, #152]	; (800a7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a75c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a760:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a76a:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a76c:	eddf 4a20 	vldr	s9, [pc, #128]	; 800a7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	ee06 2a10 	vmov	s12, r2
 800a778:	ee06 3a90 	vmov	s13, r3
 800a77c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a780:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a784:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a788:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a78c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a790:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a794:	e7a4      	b.n	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a796:	ee07 2a90 	vmov	s15, r2
 800a79a:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a7f8 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 800a79e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7a2:	e78a      	b.n	800a6ba <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7a4:	ee07 2a90 	vmov	s15, r2
 800a7a8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a7fc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7b0:	e783      	b.n	800a6ba <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7b2:	ee07 2a90 	vmov	s15, r2
 800a7b6:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 800a7ec <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7c4:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7d8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a7dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a7e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a7e4:	e77c      	b.n	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 800a7e6:	bf00      	nop
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	4c742400 	.word	0x4c742400
 800a7f0:	39000000 	.word	0x39000000
 800a7f4:	03d09000 	.word	0x03d09000
 800a7f8:	4bbebc20 	.word	0x4bbebc20
 800a7fc:	4a742400 	.word	0x4a742400

0800a800 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a800:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a804:	b500      	push	{lr}
 800a806:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a808:	d077      	beq.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a80a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a80e:	d02e      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a810:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a814:	f000 80cf 	beq.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a818:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a81c:	f000 8080 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a820:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a824:	d05a      	beq.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a826:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a82a:	f000 8105 	beq.w	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a82e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a832:	f000 8110 	beq.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a836:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a83a:	f000 80e2 	beq.w	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a83e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a842:	d13a      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a844:	4ba9      	ldr	r3, [pc, #676]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800a84c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a850:	f000 808e 	beq.w	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800a854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a858:	f000 812e 	beq.w	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800a85c:	bb6b      	cbnz	r3, 800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a85e:	4aa3      	ldr	r2, [pc, #652]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 800a860:	4ba3      	ldr	r3, [pc, #652]	; (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a862:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 800a864:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a868:	bf18      	it	ne
 800a86a:	4618      	movne	r0, r3
 800a86c:	e042      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a86e:	4a9f      	ldr	r2, [pc, #636]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a870:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a872:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a876:	2b80      	cmp	r3, #128	; 0x80
 800a878:	f000 8098 	beq.w	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a87c:	d921      	bls.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800a87e:	2bc0      	cmp	r3, #192	; 0xc0
 800a880:	d037      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a886:	d118      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a888:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a88c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a890:	0749      	lsls	r1, r1, #29
 800a892:	d502      	bpl.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 80ae 	beq.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a89a:	4a94      	ldr	r2, [pc, #592]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a89c:	6812      	ldr	r2, [r2, #0]
 800a89e:	05d0      	lsls	r0, r2, #23
 800a8a0:	d503      	bpl.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a6:	f000 80fb 	beq.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8aa:	4a90      	ldr	r2, [pc, #576]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	0391      	lsls	r1, r2, #14
 800a8b0:	d503      	bpl.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a8b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b6:	f000 80bd 	beq.w	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 800a8ba:	2000      	movs	r0, #0
}
 800a8bc:	b005      	add	sp, #20
 800a8be:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d04b      	beq.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a8c6:	2b40      	cmp	r3, #64	; 0x40
 800a8c8:	d1f7      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ca:	6810      	ldr	r0, [r2, #0]
 800a8cc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a8d0:	d010      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	a801      	add	r0, sp, #4
 800a8d4:	f7ff fd52 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d8:	9801      	ldr	r0, [sp, #4]
 800a8da:	e00b      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a8dc:	4a83      	ldr	r2, [pc, #524]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a8de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a8e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a8e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e8:	d060      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a8ea:	d936      	bls.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800a8ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8f0:	d178      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8f2:	4880      	ldr	r0, [pc, #512]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 800a8f4:	b005      	add	sp, #20
 800a8f6:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a8fa:	4b7c      	ldr	r3, [pc, #496]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	2b04      	cmp	r3, #4
 800a904:	d8d9      	bhi.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800a995 	.word	0x0800a995
 800a914:	0800a981 	.word	0x0800a981
 800a918:	0800a8f3 	.word	0x0800a8f3
 800a91c:	0800a97d 	.word	0x0800a97d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a920:	4a72      	ldr	r2, [pc, #456]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a922:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a924:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a92c:	d03e      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a92e:	d937      	bls.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800a930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a934:	d0dd      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a93a:	d1be      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a93c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a93e:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a944:	0752      	lsls	r2, r2, #29
 800a946:	d5a8      	bpl.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1a6      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a94c:	4b67      	ldr	r3, [pc, #412]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a94e:	486a      	ldr	r0, [pc, #424]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a956:	40d8      	lsrs	r0, r3
 800a958:	e7cc      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d146      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a95e:	6810      	ldr	r0, [r2, #0]
 800a960:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a964:	d0c6      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a966:	a801      	add	r0, sp, #4
 800a968:	f7ff fe84 	bl	800a674 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a96c:	9802      	ldr	r0, [sp, #8]
 800a96e:	e7c1      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a970:	4b5e      	ldr	r3, [pc, #376]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a978:	d0bc      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a97a:	e7f4      	b.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a97c:	4a5b      	ldr	r2, [pc, #364]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a97e:	e783      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a980:	4b5a      	ldr	r3, [pc, #360]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a988:	d0b4      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a98a:	a801      	add	r0, sp, #4
 800a98c:	f7ff fdb4 	bl	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a990:	9801      	ldr	r0, [sp, #4]
 800a992:	e7af      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a994:	4b55      	ldr	r3, [pc, #340]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a99c:	d0aa      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a99e:	e798      	b.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0dc      	beq.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a9a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9a8:	d08f      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a9aa:	e786      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ac:	6810      	ldr	r0, [r2, #0]
 800a9ae:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a9b2:	d09f      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a9b4:	e7e9      	b.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a9b6:	4a4d      	ldr	r2, [pc, #308]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a9b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a9ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a9be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9c2:	d0f3      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a9c4:	d806      	bhi.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0c9      	beq.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ce:	f43f af7c 	beq.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a9d2:	e772      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a9d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9d8:	d08b      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a9da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9de:	f43f af53 	beq.w	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800a9e2:	e76a      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 800a9e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9e8:	d0a8      	beq.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a9ea:	e766      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f0:	f43f af6b 	beq.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a9f4:	e761      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9f6:	6813      	ldr	r3, [r2, #0]
 800a9f8:	483f      	ldr	r0, [pc, #252]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a9fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9fe:	40d8      	lsrs	r0, r3
 800aa00:	e778      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aa02:	4a3a      	ldr	r2, [pc, #232]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aa04:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800aa06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800aa0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa0e:	d066      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800aa10:	d82f      	bhi.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800aa12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa16:	d04f      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800aa18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa1c:	d131      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa1e:	4b33      	ldr	r3, [pc, #204]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800aa26:	f43f af65 	beq.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa2a:	a801      	add	r0, sp, #4
 800aa2c:	f7ff fd64 	bl	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa30:	9802      	ldr	r0, [sp, #8]
 800aa32:	e75f      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 800aa34:	482e      	ldr	r0, [pc, #184]	; (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800aa36:	e75d      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aa38:	4a2c      	ldr	r2, [pc, #176]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aa3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800aa3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800aa40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa44:	d02e      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800aa46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa4a:	f43f af77 	beq.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f47f af33 	bne.w	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800aa54:	e739      	b.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aa56:	4b25      	ldr	r3, [pc, #148]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aa58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800aa5a:	03d2      	lsls	r2, r2, #15
 800aa5c:	d589      	bpl.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800aa64:	f43f af46 	beq.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa68:	a801      	add	r0, sp, #4
 800aa6a:	f7ff fc87 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa6e:	9803      	ldr	r0, [sp, #12]
 800aa70:	e740      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800aa72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa76:	d02a      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800aa78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa7c:	f43f aeef 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800aa80:	e71b      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f47f af19 	bne.w	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa88:	f7fe fda6 	bl	80095d8 <HAL_RCC_GetHCLKFreq>
 800aa8c:	4b17      	ldr	r3, [pc, #92]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aa8e:	4a1b      	ldr	r2, [pc, #108]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800aa96:	5cd3      	ldrb	r3, [r2, r3]
 800aa98:	f003 031f 	and.w	r3, r3, #31
 800aa9c:	40d8      	lsrs	r0, r3
          break;
 800aa9e:	e729      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800aaa0:	4817      	ldr	r0, [pc, #92]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800aaa2:	e727      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaa4:	6810      	ldr	r0, [r2, #0]
 800aaa6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800aaaa:	f43f af23 	beq.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaae:	a801      	add	r0, sp, #4
 800aab0:	f7ff fd22 	bl	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aab4:	9803      	ldr	r0, [sp, #12]
 800aab6:	e71d      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab8:	4b0c      	ldr	r3, [pc, #48]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800aac0:	f43f af18 	beq.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac4:	a801      	add	r0, sp, #4
 800aac6:	f7ff fc59 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaca:	9802      	ldr	r0, [sp, #8]
 800aacc:	e712      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aace:	4a07      	ldr	r2, [pc, #28]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aad2:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800aad4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800aad8:	bf18      	it	ne
 800aada:	4618      	movne	r0, r3
 800aadc:	e70a      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aade:	6810      	ldr	r0, [r2, #0]
 800aae0:	f010 0004 	ands.w	r0, r0, #4
 800aae4:	f43f af06 	beq.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800aae8:	e730      	b.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800aaea:	bf00      	nop
 800aaec:	58024400 	.word	0x58024400
 800aaf0:	017d7840 	.word	0x017d7840
 800aaf4:	00bb8000 	.word	0x00bb8000
 800aaf8:	03d09000 	.word	0x03d09000
 800aafc:	0800b0e8 	.word	0x0800b0e8
 800ab00:	003d0900 	.word	0x003d0900

0800ab04 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop

0800ab08 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800ab08:	b318      	cbz	r0, 800ab52 <HAL_SDRAM_Init+0x4a>
{
 800ab0a:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ab0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ab10:	460d      	mov	r5, r1
 800ab12:	4604      	mov	r4, r0
 800ab14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab18:	b1b3      	cbz	r3, 800ab48 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab1a:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ab1c:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ab22:	f851 0b04 	ldr.w	r0, [r1], #4
 800ab26:	f000 f851 	bl	800abcc <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	e9d4 0200 	ldrd	r0, r2, [r4]
 800ab30:	f000 f888 	bl	800ac44 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800ab34:	4a08      	ldr	r2, [pc, #32]	; (800ab58 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ab36:	2101      	movs	r1, #1
  return HAL_OK;
 800ab38:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800ab3a:	6813      	ldr	r3, [r2, #0]
 800ab3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab40:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ab42:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800ab48:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800ab4c:	f7ff ffda 	bl	800ab04 <HAL_SDRAM_MspInit>
 800ab50:	e7e3      	b.n	800ab1a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800ab52:	2001      	movs	r0, #1
}
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	52004000 	.word	0x52004000

0800ab5c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ab5c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800ab62:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab64:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab66:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab68:	d004      	beq.n	800ab74 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ab6a:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800ab6e:	2c01      	cmp	r4, #1
 800ab70:	d001      	beq.n	800ab76 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800ab72:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab76:	2302      	movs	r3, #2
 800ab78:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab7a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab7c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab80:	f000 f8ac 	bl	800acdc <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ab84:	6833      	ldr	r3, [r6, #0]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d003      	beq.n	800ab92 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800ab8a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ab8c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab92:	2305      	movs	r3, #5
  return HAL_OK;
 800ab94:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab96:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}

0800ab9c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ab9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800aba2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	b2d8      	uxtb	r0, r3
 800aba8:	d005      	beq.n	800abb6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800abaa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800abae:	2b01      	cmp	r3, #1
 800abb0:	b2dd      	uxtb	r5, r3
 800abb2:	d001      	beq.n	800abb8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800abb4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abb8:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800abba:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abbc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800abc0:	f000 f8a2 	bl	800ad08 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800abc4:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800abc6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800abca:	bd38      	pop	{r3, r4, r5, pc}

0800abcc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800abcc:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800abce:	6802      	ldr	r2, [r0, #0]
{
 800abd0:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800abd2:	b9c3      	cbnz	r3, 800ac06 <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800abd4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800abd8:	684c      	ldr	r4, [r1, #4]
 800abda:	698e      	ldr	r6, [r1, #24]
 800abdc:	4013      	ands	r3, r2
 800abde:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800abe2:	4323      	orrs	r3, r4
 800abe4:	690c      	ldr	r4, [r1, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	694a      	ldr	r2, [r1, #20]
 800abea:	432b      	orrs	r3, r5
 800abec:	69cd      	ldr	r5, [r1, #28]
 800abee:	4323      	orrs	r3, r4
 800abf0:	4313      	orrs	r3, r2
 800abf2:	4333      	orrs	r3, r6
 800abf4:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800abf8:	432b      	orrs	r3, r5
 800abfa:	4323      	orrs	r3, r4
 800abfc:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800abfe:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac00:	6003      	str	r3, [r0, #0]
}
 800ac02:	2000      	movs	r0, #0
 800ac04:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac06:	69cb      	ldr	r3, [r1, #28]
 800ac08:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac0c:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac0e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac12:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800ac16:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac18:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac1a:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac1c:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac1e:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac20:	6842      	ldr	r2, [r0, #4]
 800ac22:	4013      	ands	r3, r2
 800ac24:	432b      	orrs	r3, r5
 800ac26:	690d      	ldr	r5, [r1, #16]
 800ac28:	4323      	orrs	r3, r4
 800ac2a:	4333      	orrs	r3, r6
 800ac2c:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800ac30:	432b      	orrs	r3, r5
 800ac32:	4323      	orrs	r3, r4
 800ac34:	4313      	orrs	r3, r2
}
 800ac36:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac38:	6043      	str	r3, [r0, #4]
}
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	ffff8000 	.word	0xffff8000

0800ac44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac44:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ac46:	bb0a      	cbnz	r2, 800ac8c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac48:	684c      	ldr	r4, [r1, #4]
 800ac4a:	6882      	ldr	r2, [r0, #8]
 800ac4c:	680d      	ldr	r5, [r1, #0]
 800ac4e:	1e63      	subs	r3, r4, #1
 800ac50:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ac54:	688c      	ldr	r4, [r1, #8]
 800ac56:	1e6e      	subs	r6, r5, #1
 800ac58:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800ac5c:	1e65      	subs	r5, r4, #1
 800ac5e:	68cc      	ldr	r4, [r1, #12]
 800ac60:	4333      	orrs	r3, r6
 800ac62:	690a      	ldr	r2, [r1, #16]
 800ac64:	1e66      	subs	r6, r4, #1
 800ac66:	694c      	ldr	r4, [r1, #20]
 800ac68:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ac6c:	1e55      	subs	r5, r2, #1
 800ac6e:	698a      	ldr	r2, [r1, #24]
 800ac70:	1e61      	subs	r1, r4, #1
 800ac72:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800ac76:	3a01      	subs	r2, #1
 800ac78:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800ac7c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800ac80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ac84:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac86:	6083      	str	r3, [r0, #8]
}
 800ac88:	2000      	movs	r0, #0
 800ac8a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac8c:	6882      	ldr	r2, [r0, #8]
 800ac8e:	68cb      	ldr	r3, [r1, #12]
 800ac90:	4c11      	ldr	r4, [pc, #68]	; (800acd8 <FMC_SDRAM_Timing_Init+0x94>)
 800ac92:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac94:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac96:	4014      	ands	r4, r2
 800ac98:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac9a:	1e5e      	subs	r6, r3, #1
 800ac9c:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aca4:	688d      	ldr	r5, [r1, #8]
 800aca6:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aca8:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800acac:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800acae:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800acb0:	68c2      	ldr	r2, [r0, #12]
 800acb2:	690c      	ldr	r4, [r1, #16]
 800acb4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800acb8:	6989      	ldr	r1, [r1, #24]
 800acba:	3c01      	subs	r4, #1
 800acbc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800acc0:	3901      	subs	r1, #1
 800acc2:	4313      	orrs	r3, r2
 800acc4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800acc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800accc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800acd0:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800acd2:	60c3      	str	r3, [r0, #12]
}
 800acd4:	2000      	movs	r0, #0
 800acd6:	4770      	bx	lr
 800acd8:	ff0f0fff 	.word	0xff0f0fff

0800acdc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800acdc:	b470      	push	{r4, r5, r6}
 800acde:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800ace0:	68ce      	ldr	r6, [r1, #12]
 800ace2:	4c08      	ldr	r4, [pc, #32]	; (800ad04 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ace4:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800ace6:	e9d1 3500 	ldrd	r3, r5, [r1]
 800acea:	6889      	ldr	r1, [r1, #8]
 800acec:	432b      	orrs	r3, r5
 800acee:	6915      	ldr	r5, [r2, #16]
 800acf0:	3901      	subs	r1, #1
 800acf2:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800acf6:	402c      	ands	r4, r5
 800acf8:	4323      	orrs	r3, r4
 800acfa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800acfe:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800ad00:	6113      	str	r3, [r2, #16]
}
 800ad02:	4770      	bx	lr
 800ad04:	ffc00000 	.word	0xffc00000

0800ad08 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ad08:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ad0a:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800ad0c:	2000      	movs	r0, #0
{
 800ad0e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ad10:	6954      	ldr	r4, [r2, #20]
 800ad12:	4023      	ands	r3, r4
}
 800ad14:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ad18:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ad1c:	6151      	str	r1, [r2, #20]
}
 800ad1e:	4770      	bx	lr
 800ad20:	ffffc001 	.word	0xffffc001

0800ad24 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800ad24:	4603      	mov	r3, r0
 800ad26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800ad2a:	4c15      	ldr	r4, [pc, #84]	; (800ad80 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	4e15      	ldr	r6, [pc, #84]	; (800ad84 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800ad30:	4628      	mov	r0, r5
 800ad32:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800ad36:	e9d3 7200 	ldrd	r7, r2, [r3]
 800ad3a:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800ad3e:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800ad42:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800ad44:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800ad48:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800ad4a:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800ad4c:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800ad4e:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800ad52:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800ad56:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800ad5a:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800ad5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800ad60:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800ad62:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800ad64:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800ad66:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800ad68:	6a23      	ldr	r3, [r4, #32]
 800ad6a:	f106 0118 	add.w	r1, r6, #24
 800ad6e:	4628      	mov	r0, r5
 800ad70:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800ad72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad74:	f106 011c 	add.w	r1, r6, #28
 800ad78:	4628      	mov	r0, r5
}
 800ad7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800ad7e:	4718      	bx	r3
 800ad80:	24001624 	.word	0x24001624
 800ad84:	240015e4 	.word	0x240015e4

0800ad88 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800ad88:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <UTIL_LCD_SetLayer+0x18>)
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	b133      	cbz	r3, 800ad9e <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800ad90:	4d04      	ldr	r5, [pc, #16]	; (800ada4 <UTIL_LCD_SetLayer+0x1c>)
 800ad92:	4604      	mov	r4, r0
 800ad94:	4601      	mov	r1, r0
 800ad96:	6928      	ldr	r0, [r5, #16]
 800ad98:	4798      	blx	r3
 800ad9a:	b900      	cbnz	r0, 800ad9e <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800ad9c:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	24001624 	.word	0x24001624
 800ada4:	240015e4 	.word	0x240015e4

0800ada8 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800ada8:	4a02      	ldr	r2, [pc, #8]	; (800adb4 <UTIL_LCD_SetTextColor+0xc>)
 800adaa:	68d3      	ldr	r3, [r2, #12]
 800adac:	015b      	lsls	r3, r3, #5
 800adae:	50d0      	str	r0, [r2, r3]
}
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	240015e4 	.word	0x240015e4

0800adb8 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <UTIL_LCD_SetBackColor+0xc>)
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800adc0:	6058      	str	r0, [r3, #4]
}
 800adc2:	4770      	bx	lr
 800adc4:	240015e4 	.word	0x240015e4

0800adc8 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800adc8:	4b02      	ldr	r3, [pc, #8]	; (800add4 <UTIL_LCD_SetFont+0xc>)
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800add0:	6098      	str	r0, [r3, #8]
}
 800add2:	4770      	bx	lr
 800add4:	240015e4 	.word	0x240015e4

0800add8 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 800add8:	4b02      	ldr	r3, [pc, #8]	; (800ade4 <UTIL_LCD_GetFont+0xc>)
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 800ade0:	6898      	ldr	r0, [r3, #8]
 800ade2:	4770      	bx	lr
 800ade4:	240015e4 	.word	0x240015e4

0800ade8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800adec:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800af3c <UTIL_LCD_DisplayChar+0x154>
{
 800adf0:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800adf2:	3a20      	subs	r2, #32
{
 800adf4:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800adf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adfa:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 800adfe:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 800ae02:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800ae04:	8886      	ldrh	r6, [r0, #4]
 800ae06:	88c5      	ldrh	r5, [r0, #6]
 800ae08:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800ae0a:	6804      	ldr	r4, [r0, #0]
 800ae0c:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800ae10:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800ae12:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800ae16:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 800ae1a:	9303      	str	r3, [sp, #12]

  for(i = 0; i < height; i++)
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	f000 8085 	beq.w	800af2c <UTIL_LCD_DisplayChar+0x144>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800ae22:	08fb      	lsrs	r3, r7, #3
 800ae24:	4414      	add	r4, r2
 800ae26:	f8df a118 	ldr.w	sl, [pc, #280]	; 800af40 <UTIL_LCD_DisplayChar+0x158>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 800ae2a:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	194b      	adds	r3, r1, r5
 800ae32:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 800ae34:	9904      	ldr	r1, [sp, #16]
 800ae36:	9307      	str	r3, [sp, #28]
 800ae38:	ab14      	add	r3, sp, #80	; 0x50
 800ae3a:	2901      	cmp	r1, #1
 800ae3c:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae40:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ae44:	9305      	str	r3, [sp, #20]
 800ae46:	ab08      	add	r3, sp, #32
 800ae48:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800ae4c:	9306      	str	r3, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 800ae4e:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 800ae50:	d038      	beq.n	800aec4 <UTIL_LCD_DisplayChar+0xdc>
 800ae52:	2902      	cmp	r1, #2
 800ae54:	d06d      	beq.n	800af32 <UTIL_LCD_DisplayChar+0x14a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800ae56:	7861      	ldrb	r1, [r4, #1]
 800ae58:	7827      	ldrb	r7, [r4, #0]
 800ae5a:	0209      	lsls	r1, r1, #8
 800ae5c:	78a0      	ldrb	r0, [r4, #2]
 800ae5e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ae62:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800ae64:	4443      	add	r3, r8
 800ae66:	69d8      	ldr	r0, [r3, #28]
 800ae68:	2802      	cmp	r0, #2
 800ae6a:	d030      	beq.n	800aece <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 800ae6c:	b196      	cbz	r6, 800ae94 <UTIL_LCD_DisplayChar+0xac>
 800ae6e:	9803      	ldr	r0, [sp, #12]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 800ae70:	f8d3 e000 	ldr.w	lr, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800ae74:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ae78:	3801      	subs	r0, #1
 800ae7a:	ab14      	add	r3, sp, #80	; 0x50
        if(line & (1 << (width- j + offset- 1)))
 800ae7c:	fa09 f700 	lsl.w	r7, r9, r0
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800ae80:	3801      	subs	r0, #1
 800ae82:	420f      	tst	r7, r1
 800ae84:	bf14      	ite	ne
 800ae86:	4677      	movne	r7, lr
 800ae88:	4667      	moveq	r7, ip
 800ae8a:	f843 7b04 	str.w	r7, [r3], #4
      for (j = 0; j < width; j++)
 800ae8e:	9f05      	ldr	r7, [sp, #20]
 800ae90:	429f      	cmp	r7, r3
 800ae92:	d1f3      	bne.n	800ae7c <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800ae94:	ab14      	add	r3, sp, #80	; 0x50
 800ae96:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800aea0:	e9cd 6900 	strd	r6, r9, [sp]
 800aea4:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 800aea6:	9b04      	ldr	r3, [sp, #16]
 800aea8:	441c      	add	r4, r3
 800aeaa:	9b07      	ldr	r3, [sp, #28]
 800aeac:	429d      	cmp	r5, r3
 800aeae:	d03d      	beq.n	800af2c <UTIL_LCD_DisplayChar+0x144>
    switch(((width + 7)/8))
 800aeb0:	9904      	ldr	r1, [sp, #16]
 800aeb2:	3501      	adds	r5, #1
 800aeb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeb8:	2901      	cmp	r1, #1
 800aeba:	f105 32ff 	add.w	r2, r5, #4294967295
 800aebe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800aec2:	d1c6      	bne.n	800ae52 <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aec4:	4443      	add	r3, r8
      line =  pchar[0];
 800aec6:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aec8:	69d8      	ldr	r0, [r3, #28]
 800aeca:	2802      	cmp	r0, #2
 800aecc:	d1ce      	bne.n	800ae6c <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 800aece:	b1fe      	cbz	r6, 800af10 <UTIL_LCD_DisplayChar+0x128>
 800aed0:	9803      	ldr	r0, [sp, #12]
 800aed2:	f10d 0c20 	add.w	ip, sp, #32
 800aed6:	ee07 2a90 	vmov	s15, r2
 800aeda:	f100 3eff 	add.w	lr, r0, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 800aede:	fa09 f00e 	lsl.w	r0, r9, lr
 800aee2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800aee6:	4208      	tst	r0, r1
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800aee8:	bf14      	ite	ne
 800aeea:	681f      	ldrne	r7, [r3, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800aeec:	685f      	ldreq	r7, [r3, #4]
 800aeee:	0cfa      	lsrs	r2, r7, #19
 800aef0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 800aef4:	097f      	lsrs	r7, r7, #5
 800aef6:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
      for (j = 0; j < width; j++)
 800aefa:	9a06      	ldr	r2, [sp, #24]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800aefc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 800af00:	4338      	orrs	r0, r7
 800af02:	b280      	uxth	r0, r0
 800af04:	f82c 0b02 	strh.w	r0, [ip], #2
      for (j = 0; j < width; j++)
 800af08:	4594      	cmp	ip, r2
 800af0a:	d1e8      	bne.n	800aede <UTIL_LCD_DisplayChar+0xf6>
 800af0c:	ee17 2a90 	vmov	r2, s15
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800af10:	ab08      	add	r3, sp, #32
 800af12:	f8da 7004 	ldr.w	r7, [sl, #4]
 800af16:	4659      	mov	r1, fp
 800af18:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800af1c:	e9cd 6900 	strd	r6, r9, [sp]
 800af20:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 800af22:	9b04      	ldr	r3, [sp, #16]
 800af24:	441c      	add	r4, r3
 800af26:	9b07      	ldr	r3, [sp, #28]
 800af28:	429d      	cmp	r5, r3
 800af2a:	d1c1      	bne.n	800aeb0 <UTIL_LCD_DisplayChar+0xc8>
}
 800af2c:	b02d      	add	sp, #180	; 0xb4
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 800af32:	8821      	ldrh	r1, [r4, #0]
 800af34:	ba49      	rev16	r1, r1
 800af36:	b289      	uxth	r1, r1
      break;
 800af38:	e794      	b.n	800ae64 <UTIL_LCD_DisplayChar+0x7c>
 800af3a:	bf00      	nop
 800af3c:	240015e4 	.word	0x240015e4
 800af40:	24001624 	.word	0x24001624

0800af44 <UTIL_LCD_DisplayStringAt>:
{
 800af44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af48:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 800af4a:	4611      	mov	r1, r2
{
 800af4c:	4616      	mov	r6, r2
 800af4e:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 800af50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af54:	2a00      	cmp	r2, #0
 800af56:	d041      	beq.n	800afdc <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 800af58:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 800af5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af5e:	3001      	adds	r0, #1
 800af60:	2c00      	cmp	r4, #0
 800af62:	d1fa      	bne.n	800af5a <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800af64:	4f1e      	ldr	r7, [pc, #120]	; (800afe0 <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 800af66:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800af68:	68fc      	ldr	r4, [r7, #12]
 800af6a:	6979      	ldr	r1, [r7, #20]
 800af6c:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 800af70:	68a4      	ldr	r4, [r4, #8]
 800af72:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800af76:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 800af7a:	d029      	beq.n	800afd0 <UTIL_LCD_DisplayStringAt+0x8c>
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d103      	bne.n	800af88 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800af80:	1a20      	subs	r0, r4, r0
 800af82:	fb0c f000 	mul.w	r0, ip, r0
 800af86:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800af88:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800af8a:	1e68      	subs	r0, r5, #1
 800af8c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 800af90:	4298      	cmp	r0, r3
 800af92:	bf88      	it	hi
 800af94:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800af96:	458c      	cmp	ip, r1
 800af98:	d818      	bhi.n	800afcc <UTIL_LCD_DisplayStringAt+0x88>
 800af9a:	b1ba      	cbz	r2, 800afcc <UTIL_LCD_DisplayStringAt+0x88>
 800af9c:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800afa0:	4628      	mov	r0, r5
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7ff ff20 	bl	800ade8 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800afae:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800afb0:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800afb4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800afb8:	6880      	ldr	r0, [r0, #8]
 800afba:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800afbc:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800afc0:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	429c      	cmp	r4, r3
 800afc6:	d801      	bhi.n	800afcc <UTIL_LCD_DisplayStringAt+0x88>
 800afc8:	2a00      	cmp	r2, #0
 800afca:	d1e9      	bne.n	800afa0 <UTIL_LCD_DisplayStringAt+0x5c>
}
 800afcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800afd0:	1a20      	subs	r0, r4, r0
 800afd2:	fb0c f000 	mul.w	r0, ip, r0
 800afd6:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 800afda:	e7d5      	b.n	800af88 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 800afdc:	4610      	mov	r0, r2
 800afde:	e7c1      	b.n	800af64 <UTIL_LCD_DisplayStringAt+0x20>
 800afe0:	240015e4 	.word	0x240015e4

0800afe4 <UTIL_LCD_FillRect>:
{
 800afe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800afe6:	4e13      	ldr	r6, [pc, #76]	; (800b034 <UTIL_LCD_FillRect+0x50>)
{
 800afe8:	4615      	mov	r5, r2
 800afea:	b083      	sub	sp, #12
 800afec:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800afee:	69f7      	ldr	r7, [r6, #28]
{
 800aff0:	462b      	mov	r3, r5
 800aff2:	460a      	mov	r2, r1
 800aff4:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aff6:	2f02      	cmp	r7, #2
 800aff8:	d008      	beq.n	800b00c <UTIL_LCD_FillRect+0x28>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800affa:	4f0f      	ldr	r7, [pc, #60]	; (800b038 <UTIL_LCD_FillRect+0x54>)
 800affc:	4601      	mov	r1, r0
 800affe:	e9cd 4500 	strd	r4, r5, [sp]
 800b002:	693c      	ldr	r4, [r7, #16]
 800b004:	6930      	ldr	r0, [r6, #16]
 800b006:	47a0      	blx	r4
}
 800b008:	b003      	add	sp, #12
 800b00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800b00c:	096f      	lsrs	r7, r5, #5
 800b00e:	9400      	str	r4, [sp, #0]
 800b010:	0a29      	lsrs	r1, r5, #8
 800b012:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800b016:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800b01a:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800b01e:	4601      	mov	r1, r0
 800b020:	6930      	ldr	r0, [r6, #16]
 800b022:	433c      	orrs	r4, r7
 800b024:	4e04      	ldr	r6, [pc, #16]	; (800b038 <UTIL_LCD_FillRect+0x54>)
 800b026:	4325      	orrs	r5, r4
 800b028:	6934      	ldr	r4, [r6, #16]
 800b02a:	9501      	str	r5, [sp, #4]
 800b02c:	47a0      	blx	r4
}
 800b02e:	b003      	add	sp, #12
 800b030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b032:	bf00      	nop
 800b034:	240015e4 	.word	0x240015e4
 800b038:	24001624 	.word	0x24001624

0800b03c <UTIL_LCD_Clear>:
{
 800b03c:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800b03e:	2100      	movs	r1, #0
{
 800b040:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <UTIL_LCD_Clear+0x1c>)
 800b044:	9000      	str	r0, [sp, #0]
 800b046:	4608      	mov	r0, r1
 800b048:	6993      	ldr	r3, [r2, #24]
 800b04a:	6952      	ldr	r2, [r2, #20]
 800b04c:	f7ff ffca 	bl	800afe4 <UTIL_LCD_FillRect>
}
 800b050:	b003      	add	sp, #12
 800b052:	f85d fb04 	ldr.w	pc, [sp], #4
 800b056:	bf00      	nop
 800b058:	240015e4 	.word	0x240015e4

0800b05c <__libc_init_array>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	4d0d      	ldr	r5, [pc, #52]	; (800b094 <__libc_init_array+0x38>)
 800b060:	4c0d      	ldr	r4, [pc, #52]	; (800b098 <__libc_init_array+0x3c>)
 800b062:	1b64      	subs	r4, r4, r5
 800b064:	10a4      	asrs	r4, r4, #2
 800b066:	2600      	movs	r6, #0
 800b068:	42a6      	cmp	r6, r4
 800b06a:	d109      	bne.n	800b080 <__libc_init_array+0x24>
 800b06c:	4d0b      	ldr	r5, [pc, #44]	; (800b09c <__libc_init_array+0x40>)
 800b06e:	4c0c      	ldr	r4, [pc, #48]	; (800b0a0 <__libc_init_array+0x44>)
 800b070:	f000 f82e 	bl	800b0d0 <_init>
 800b074:	1b64      	subs	r4, r4, r5
 800b076:	10a4      	asrs	r4, r4, #2
 800b078:	2600      	movs	r6, #0
 800b07a:	42a6      	cmp	r6, r4
 800b07c:	d105      	bne.n	800b08a <__libc_init_array+0x2e>
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	f855 3b04 	ldr.w	r3, [r5], #4
 800b084:	4798      	blx	r3
 800b086:	3601      	adds	r6, #1
 800b088:	e7ee      	b.n	800b068 <__libc_init_array+0xc>
 800b08a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b08e:	4798      	blx	r3
 800b090:	3601      	adds	r6, #1
 800b092:	e7f2      	b.n	800b07a <__libc_init_array+0x1e>
 800b094:	08064e78 	.word	0x08064e78
 800b098:	08064e78 	.word	0x08064e78
 800b09c:	08064e78 	.word	0x08064e78
 800b0a0:	08064e7c 	.word	0x08064e7c

0800b0a4 <memcpy>:
 800b0a4:	440a      	add	r2, r1
 800b0a6:	4291      	cmp	r1, r2
 800b0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0ac:	d100      	bne.n	800b0b0 <memcpy+0xc>
 800b0ae:	4770      	bx	lr
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	d1f9      	bne.n	800b0b2 <memcpy+0xe>
 800b0be:	bd10      	pop	{r4, pc}

0800b0c0 <memset>:
 800b0c0:	4402      	add	r2, r0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d100      	bne.n	800b0ca <memset+0xa>
 800b0c8:	4770      	bx	lr
 800b0ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ce:	e7f9      	b.n	800b0c4 <memset+0x4>

0800b0d0 <_init>:
 800b0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d2:	bf00      	nop
 800b0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d6:	bc08      	pop	{r3}
 800b0d8:	469e      	mov	lr, r3
 800b0da:	4770      	bx	lr

0800b0dc <_fini>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr
