
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a94c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d60  0800abe4  0800abe4  0001abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014944  08014944  00031078  2**0
                  CONTENTS
  4 .ARM          00000000  08014944  08014944  00031078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014944  08014944  00031078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014944  08014944  00024944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014948  08014948  00024948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001078  24000000  0801494c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b44  24001078  080159c4  00031078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24011bbc  080159c4  00031bbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ca2d3  00000000  00000000  000310a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d0d  00000000  00000000  000fb379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e670  00000000  00000000  00103086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002850  00000000  00000000  001216f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004e88  00000000  00000000  00123f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000491c8  00000000  00000000  00128dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036fe2  00000000  00000000  00171f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c9d6a  00000000  00000000  001a8f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00372ce4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007930  00000000  00000000  00372d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001078 	.word	0x24001078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800abcc 	.word	0x0800abcc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400107c 	.word	0x2400107c
 80002d4:	0800abcc 	.word	0x0800abcc

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vGBMBCsetControllerType>:
 * @brief sets the cartridge type for use in this file corresponding to data stored at the memory location 0x147
 * @param code data stored at memory location 0x147
 * @returns Nothing
 */
void vGBMBCsetControllerType(uint8_t code){
	ucgbMBCcontrollerCode = code;
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <vGBMBCsetControllerType+0x8>)
 80003c2:	7018      	strb	r0, [r3, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	24001095 	.word	0x24001095

080003cc <ucGBMBCreadBankX>:
	if(address < CARTROM_BANKX){
		return (uint8_t) rom[address];
	}else if(ucgbMBCcontrollerCode == 0){
		return (uint8_t) rom[address];
	}else{
	    return (uint8_t) rom[address];
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <ucGBMBCreadBankX+0x8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	5c18      	ldrb	r0, [r3, r0]
		//return (uint8_t) rom[((ucgbMBCoffsetHigh + ucgbMBCoffsetLow - 1) * 0x4000) + (address)];
	}
}
 80003d2:	4770      	bx	lr
 80003d4:	24001018 	.word	0x24001018

080003d8 <vGBMBCwrite>:
 * @param address memory map address
 * @param data byte to be written to MBC register
 * @returns Nothing
 */
void vGBMBCwrite(uint16_t address, uint8_t data){
	if(ucgbMBCcontrollerCode > 0){
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <vGBMBCwrite+0x50>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b163      	cbz	r3, 80003f8 <vGBMBCwrite+0x20>
		if(address < 0x2000){
 80003de:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80003e2:	d20a      	bcs.n	80003fa <vGBMBCwrite+0x22>
			if(data  == 0x0A){
 80003e4:	290a      	cmp	r1, #10
				ucgbMBCramEN = 1;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <vGBMBCwrite+0x54>)
			if(data  == 0x0A){
 80003e8:	d01b      	beq.n	8000422 <vGBMBCwrite+0x4a>
			}else{
				ucgbMBCramEN = 0;
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	4770      	bx	lr
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
			}else{

			}
		}else{
			ucgbMBCbankMode = (data & 0x01);
 80003f0:	f001 0101 	and.w	r1, r1, #1
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <vGBMBCwrite+0x58>)
 80003f6:	7019      	strb	r1, [r3, #0]
		}
	}
}
 80003f8:	4770      	bx	lr
		}else if(address < 0x4000){
 80003fa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80003fe:	d30c      	bcc.n	800041a <vGBMBCwrite+0x42>
		}else if(address < 0x6000){
 8000400:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 8000404:	d2f4      	bcs.n	80003f0 <vGBMBCwrite+0x18>
			if(ucgbMBCbankMode == 0){
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <vGBMBCwrite+0x58>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f4      	bne.n	80003f8 <vGBMBCwrite+0x20>
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
 800040e:	0149      	lsls	r1, r1, #5
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <vGBMBCwrite+0x5c>)
 8000412:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8000416:	7019      	strb	r1, [r3, #0]
 8000418:	4770      	bx	lr
			if(ucgbMBCoffsetLow == 0){
 800041a:	f011 011f 	ands.w	r1, r1, #31
				ucgbMBCoffsetLow = 1;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <vGBMBCwrite+0x60>)
			if(ucgbMBCoffsetLow == 0){
 8000420:	d1e9      	bne.n	80003f6 <vGBMBCwrite+0x1e>
				ucgbMBCoffsetLow = 1;
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	4770      	bx	lr
 8000428:	24001095 	.word	0x24001095
 800042c:	24001097 	.word	0x24001097
 8000430:	24001094 	.word	0x24001094
 8000434:	24001096 	.word	0x24001096
 8000438:	24000008 	.word	0x24000008

0800043c <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vINCs_BC+0xc>)
 8000442:	8853      	ldrh	r3, [r2, #2]
 8000444:	3301      	adds	r3, #1
 8000446:	8053      	strh	r3, [r2, #2]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24001650 	.word	0x24001650

08000450 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 8000450:	4a02      	ldr	r2, [pc, #8]	; (800045c <vDECs_BC+0xc>)
 8000452:	8853      	ldrh	r3, [r2, #2]
 8000454:	3b01      	subs	r3, #1
 8000456:	8053      	strh	r3, [r2, #2]
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	24001650 	.word	0x24001650

08000460 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 8000460:	4b01      	ldr	r3, [pc, #4]	; (8000468 <vSTOP+0x8>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	4770      	bx	lr
 8000468:	240010a1 	.word	0x240010a1

0800046c <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 800046c:	4a02      	ldr	r2, [pc, #8]	; (8000478 <vINCs_DE+0xc>)
 800046e:	8893      	ldrh	r3, [r2, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	8093      	strh	r3, [r2, #4]
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	24001650 	.word	0x24001650

0800047c <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 800047c:	4a02      	ldr	r2, [pc, #8]	; (8000488 <vDECs_DE+0xc>)
 800047e:	8893      	ldrh	r3, [r2, #4]
 8000480:	3b01      	subs	r3, #1
 8000482:	8093      	strh	r3, [r2, #4]
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	24001650 	.word	0x24001650

0800048c <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 800048c:	4a02      	ldr	r2, [pc, #8]	; (8000498 <vINCs_HL+0xc>)
 800048e:	88d3      	ldrh	r3, [r2, #6]
 8000490:	3301      	adds	r3, #1
 8000492:	80d3      	strh	r3, [r2, #6]
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	24001650 	.word	0x24001650

0800049c <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 800049c:	4a02      	ldr	r2, [pc, #8]	; (80004a8 <vDECs_HL+0xc>)
 800049e:	88d3      	ldrh	r3, [r2, #6]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	80d3      	strh	r3, [r2, #6]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	24001650 	.word	0x24001650

080004ac <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004ac:	4a02      	ldr	r2, [pc, #8]	; (80004b8 <vINCs_SP+0xc>)
 80004ae:	8913      	ldrh	r3, [r2, #8]
 80004b0:	3301      	adds	r3, #1
 80004b2:	8113      	strh	r3, [r2, #8]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24001650 	.word	0x24001650

080004bc <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004bc:	4a02      	ldr	r2, [pc, #8]	; (80004c8 <vDECs_SP+0xc>)
 80004be:	8913      	ldrh	r3, [r2, #8]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	8113      	strh	r3, [r2, #8]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	24001650 	.word	0x24001650

080004cc <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 80004cc:	4b01      	ldr	r3, [pc, #4]	; (80004d4 <vLD_B_C+0x8>)
 80004ce:	789a      	ldrb	r2, [r3, #2]
 80004d0:	70da      	strb	r2, [r3, #3]
 80004d2:	4770      	bx	lr
 80004d4:	24001650 	.word	0x24001650

080004d8 <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 80004d8:	4b01      	ldr	r3, [pc, #4]	; (80004e0 <vLD_B_D+0x8>)
 80004da:	795a      	ldrb	r2, [r3, #5]
 80004dc:	70da      	strb	r2, [r3, #3]
 80004de:	4770      	bx	lr
 80004e0:	24001650 	.word	0x24001650

080004e4 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <vLD_B_E+0x8>)
 80004e6:	791a      	ldrb	r2, [r3, #4]
 80004e8:	70da      	strb	r2, [r3, #3]
 80004ea:	4770      	bx	lr
 80004ec:	24001650 	.word	0x24001650

080004f0 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 80004f0:	4b01      	ldr	r3, [pc, #4]	; (80004f8 <vLD_B_H+0x8>)
 80004f2:	79da      	ldrb	r2, [r3, #7]
 80004f4:	70da      	strb	r2, [r3, #3]
 80004f6:	4770      	bx	lr
 80004f8:	24001650 	.word	0x24001650

080004fc <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <vLD_B_L+0x8>)
 80004fe:	799a      	ldrb	r2, [r3, #6]
 8000500:	70da      	strb	r2, [r3, #3]
 8000502:	4770      	bx	lr
 8000504:	24001650 	.word	0x24001650

08000508 <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <vLD_B_A+0x8>)
 800050a:	785a      	ldrb	r2, [r3, #1]
 800050c:	70da      	strb	r2, [r3, #3]
 800050e:	4770      	bx	lr
 8000510:	24001650 	.word	0x24001650

08000514 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000514:	4b01      	ldr	r3, [pc, #4]	; (800051c <vLD_C_B+0x8>)
 8000516:	78da      	ldrb	r2, [r3, #3]
 8000518:	709a      	strb	r2, [r3, #2]
 800051a:	4770      	bx	lr
 800051c:	24001650 	.word	0x24001650

08000520 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <vLD_C_D+0x8>)
 8000522:	795a      	ldrb	r2, [r3, #5]
 8000524:	709a      	strb	r2, [r3, #2]
 8000526:	4770      	bx	lr
 8000528:	24001650 	.word	0x24001650

0800052c <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <vLD_C_E+0x8>)
 800052e:	791a      	ldrb	r2, [r3, #4]
 8000530:	709a      	strb	r2, [r3, #2]
 8000532:	4770      	bx	lr
 8000534:	24001650 	.word	0x24001650

08000538 <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <vLD_C_H+0x8>)
 800053a:	79da      	ldrb	r2, [r3, #7]
 800053c:	709a      	strb	r2, [r3, #2]
 800053e:	4770      	bx	lr
 8000540:	24001650 	.word	0x24001650

08000544 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <vLD_C_L+0x8>)
 8000546:	799a      	ldrb	r2, [r3, #6]
 8000548:	709a      	strb	r2, [r3, #2]
 800054a:	4770      	bx	lr
 800054c:	24001650 	.word	0x24001650

08000550 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <vLD_C_A+0x8>)
 8000552:	785a      	ldrb	r2, [r3, #1]
 8000554:	709a      	strb	r2, [r3, #2]
 8000556:	4770      	bx	lr
 8000558:	24001650 	.word	0x24001650

0800055c <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <vLD_D_B+0x8>)
 800055e:	78da      	ldrb	r2, [r3, #3]
 8000560:	715a      	strb	r2, [r3, #5]
 8000562:	4770      	bx	lr
 8000564:	24001650 	.word	0x24001650

08000568 <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <vLD_D_C+0x8>)
 800056a:	789a      	ldrb	r2, [r3, #2]
 800056c:	715a      	strb	r2, [r3, #5]
 800056e:	4770      	bx	lr
 8000570:	24001650 	.word	0x24001650

08000574 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <vLD_D_E+0x8>)
 8000576:	791a      	ldrb	r2, [r3, #4]
 8000578:	715a      	strb	r2, [r3, #5]
 800057a:	4770      	bx	lr
 800057c:	24001650 	.word	0x24001650

08000580 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <vLD_D_H+0x8>)
 8000582:	79da      	ldrb	r2, [r3, #7]
 8000584:	715a      	strb	r2, [r3, #5]
 8000586:	4770      	bx	lr
 8000588:	24001650 	.word	0x24001650

0800058c <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <vLD_D_L+0x8>)
 800058e:	799a      	ldrb	r2, [r3, #6]
 8000590:	715a      	strb	r2, [r3, #5]
 8000592:	4770      	bx	lr
 8000594:	24001650 	.word	0x24001650

08000598 <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <vLD_D_A+0x8>)
 800059a:	785a      	ldrb	r2, [r3, #1]
 800059c:	715a      	strb	r2, [r3, #5]
 800059e:	4770      	bx	lr
 80005a0:	24001650 	.word	0x24001650

080005a4 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 80005a4:	4b01      	ldr	r3, [pc, #4]	; (80005ac <vLD_E_B+0x8>)
 80005a6:	78da      	ldrb	r2, [r3, #3]
 80005a8:	711a      	strb	r2, [r3, #4]
 80005aa:	4770      	bx	lr
 80005ac:	24001650 	.word	0x24001650

080005b0 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <vLD_E_C+0x8>)
 80005b2:	789a      	ldrb	r2, [r3, #2]
 80005b4:	711a      	strb	r2, [r3, #4]
 80005b6:	4770      	bx	lr
 80005b8:	24001650 	.word	0x24001650

080005bc <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <vLD_E_D+0x8>)
 80005be:	795a      	ldrb	r2, [r3, #5]
 80005c0:	711a      	strb	r2, [r3, #4]
 80005c2:	4770      	bx	lr
 80005c4:	24001650 	.word	0x24001650

080005c8 <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <vLD_E_H+0x8>)
 80005ca:	79da      	ldrb	r2, [r3, #7]
 80005cc:	711a      	strb	r2, [r3, #4]
 80005ce:	4770      	bx	lr
 80005d0:	24001650 	.word	0x24001650

080005d4 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <vLD_E_L+0x8>)
 80005d6:	799a      	ldrb	r2, [r3, #6]
 80005d8:	711a      	strb	r2, [r3, #4]
 80005da:	4770      	bx	lr
 80005dc:	24001650 	.word	0x24001650

080005e0 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <vLD_E_A+0x8>)
 80005e2:	785a      	ldrb	r2, [r3, #1]
 80005e4:	711a      	strb	r2, [r3, #4]
 80005e6:	4770      	bx	lr
 80005e8:	24001650 	.word	0x24001650

080005ec <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <vLD_H_B+0x8>)
 80005ee:	78da      	ldrb	r2, [r3, #3]
 80005f0:	71da      	strb	r2, [r3, #7]
 80005f2:	4770      	bx	lr
 80005f4:	24001650 	.word	0x24001650

080005f8 <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <vLD_H_C+0x8>)
 80005fa:	789a      	ldrb	r2, [r3, #2]
 80005fc:	71da      	strb	r2, [r3, #7]
 80005fe:	4770      	bx	lr
 8000600:	24001650 	.word	0x24001650

08000604 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <vLD_H_D+0x8>)
 8000606:	795a      	ldrb	r2, [r3, #5]
 8000608:	71da      	strb	r2, [r3, #7]
 800060a:	4770      	bx	lr
 800060c:	24001650 	.word	0x24001650

08000610 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <vLD_H_E+0x8>)
 8000612:	791a      	ldrb	r2, [r3, #4]
 8000614:	71da      	strb	r2, [r3, #7]
 8000616:	4770      	bx	lr
 8000618:	24001650 	.word	0x24001650

0800061c <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <vLD_H_L+0x8>)
 800061e:	799a      	ldrb	r2, [r3, #6]
 8000620:	71da      	strb	r2, [r3, #7]
 8000622:	4770      	bx	lr
 8000624:	24001650 	.word	0x24001650

08000628 <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <vLD_H_A+0x8>)
 800062a:	785a      	ldrb	r2, [r3, #1]
 800062c:	71da      	strb	r2, [r3, #7]
 800062e:	4770      	bx	lr
 8000630:	24001650 	.word	0x24001650

08000634 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <vLD_L_B+0x8>)
 8000636:	78da      	ldrb	r2, [r3, #3]
 8000638:	719a      	strb	r2, [r3, #6]
 800063a:	4770      	bx	lr
 800063c:	24001650 	.word	0x24001650

08000640 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <vLD_L_C+0x8>)
 8000642:	789a      	ldrb	r2, [r3, #2]
 8000644:	719a      	strb	r2, [r3, #6]
 8000646:	4770      	bx	lr
 8000648:	24001650 	.word	0x24001650

0800064c <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <vLD_L_D+0x8>)
 800064e:	795a      	ldrb	r2, [r3, #5]
 8000650:	719a      	strb	r2, [r3, #6]
 8000652:	4770      	bx	lr
 8000654:	24001650 	.word	0x24001650

08000658 <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <vLD_L_E+0x8>)
 800065a:	791a      	ldrb	r2, [r3, #4]
 800065c:	719a      	strb	r2, [r3, #6]
 800065e:	4770      	bx	lr
 8000660:	24001650 	.word	0x24001650

08000664 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <vLD_L_H+0x8>)
 8000666:	79da      	ldrb	r2, [r3, #7]
 8000668:	719a      	strb	r2, [r3, #6]
 800066a:	4770      	bx	lr
 800066c:	24001650 	.word	0x24001650

08000670 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <vLD_L_A+0x8>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	719a      	strb	r2, [r3, #6]
 8000676:	4770      	bx	lr
 8000678:	24001650 	.word	0x24001650

0800067c <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <vHALT+0x8>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	2400109d 	.word	0x2400109d

08000688 <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <vLD_A_B+0x8>)
 800068a:	78da      	ldrb	r2, [r3, #3]
 800068c:	705a      	strb	r2, [r3, #1]
 800068e:	4770      	bx	lr
 8000690:	24001650 	.word	0x24001650

08000694 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <vLD_A_C+0x8>)
 8000696:	789a      	ldrb	r2, [r3, #2]
 8000698:	705a      	strb	r2, [r3, #1]
 800069a:	4770      	bx	lr
 800069c:	24001650 	.word	0x24001650

080006a0 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <vLD_A_D+0x8>)
 80006a2:	795a      	ldrb	r2, [r3, #5]
 80006a4:	705a      	strb	r2, [r3, #1]
 80006a6:	4770      	bx	lr
 80006a8:	24001650 	.word	0x24001650

080006ac <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <vLD_A_E+0x8>)
 80006ae:	791a      	ldrb	r2, [r3, #4]
 80006b0:	705a      	strb	r2, [r3, #1]
 80006b2:	4770      	bx	lr
 80006b4:	24001650 	.word	0x24001650

080006b8 <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <vLD_A_H+0x8>)
 80006ba:	79da      	ldrb	r2, [r3, #7]
 80006bc:	705a      	strb	r2, [r3, #1]
 80006be:	4770      	bx	lr
 80006c0:	24001650 	.word	0x24001650

080006c4 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <vLD_A_L+0x8>)
 80006c6:	799a      	ldrb	r2, [r3, #6]
 80006c8:	705a      	strb	r2, [r3, #1]
 80006ca:	4770      	bx	lr
 80006cc:	24001650 	.word	0x24001650

080006d0 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <vAND_B+0x18>)
 80006d2:	785a      	ldrb	r2, [r3, #1]
 80006d4:	78d9      	ldrb	r1, [r3, #3]
 80006d6:	400a      	ands	r2, r1
 80006d8:	2a00      	cmp	r2, #0
 80006da:	705a      	strb	r2, [r3, #1]
 80006dc:	bf0c      	ite	eq
 80006de:	22a0      	moveq	r2, #160	; 0xa0
 80006e0:	2220      	movne	r2, #32
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	24001650 	.word	0x24001650

080006ec <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <vAND_C+0x18>)
 80006ee:	785a      	ldrb	r2, [r3, #1]
 80006f0:	7899      	ldrb	r1, [r3, #2]
 80006f2:	400a      	ands	r2, r1
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	705a      	strb	r2, [r3, #1]
 80006f8:	bf0c      	ite	eq
 80006fa:	22a0      	moveq	r2, #160	; 0xa0
 80006fc:	2220      	movne	r2, #32
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	24001650 	.word	0x24001650

08000708 <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <vAND_D+0x18>)
 800070a:	785a      	ldrb	r2, [r3, #1]
 800070c:	7959      	ldrb	r1, [r3, #5]
 800070e:	400a      	ands	r2, r1
 8000710:	2a00      	cmp	r2, #0
 8000712:	705a      	strb	r2, [r3, #1]
 8000714:	bf0c      	ite	eq
 8000716:	22a0      	moveq	r2, #160	; 0xa0
 8000718:	2220      	movne	r2, #32
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	24001650 	.word	0x24001650

08000724 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <vAND_E+0x18>)
 8000726:	785a      	ldrb	r2, [r3, #1]
 8000728:	7919      	ldrb	r1, [r3, #4]
 800072a:	400a      	ands	r2, r1
 800072c:	2a00      	cmp	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
 8000730:	bf0c      	ite	eq
 8000732:	22a0      	moveq	r2, #160	; 0xa0
 8000734:	2220      	movne	r2, #32
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	24001650 	.word	0x24001650

08000740 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <vAND_H+0x18>)
 8000742:	785a      	ldrb	r2, [r3, #1]
 8000744:	79d9      	ldrb	r1, [r3, #7]
 8000746:	400a      	ands	r2, r1
 8000748:	2a00      	cmp	r2, #0
 800074a:	705a      	strb	r2, [r3, #1]
 800074c:	bf0c      	ite	eq
 800074e:	22a0      	moveq	r2, #160	; 0xa0
 8000750:	2220      	movne	r2, #32
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	24001650 	.word	0x24001650

0800075c <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <vAND_L+0x18>)
 800075e:	785a      	ldrb	r2, [r3, #1]
 8000760:	7999      	ldrb	r1, [r3, #6]
 8000762:	400a      	ands	r2, r1
 8000764:	2a00      	cmp	r2, #0
 8000766:	705a      	strb	r2, [r3, #1]
 8000768:	bf0c      	ite	eq
 800076a:	22a0      	moveq	r2, #160	; 0xa0
 800076c:	2220      	movne	r2, #32
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	24001650 	.word	0x24001650

08000778 <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <vAND_A+0x10>)
 800077a:	785a      	ldrb	r2, [r3, #1]
 800077c:	2a00      	cmp	r2, #0
 800077e:	bf0c      	ite	eq
 8000780:	22a0      	moveq	r2, #160	; 0xa0
 8000782:	2220      	movne	r2, #32
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	4770      	bx	lr
 8000788:	24001650 	.word	0x24001650

0800078c <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <vXOR_B+0x18>)
 800078e:	785a      	ldrb	r2, [r3, #1]
 8000790:	78d9      	ldrb	r1, [r3, #3]
 8000792:	ea82 0001 	eor.w	r0, r2, r1
 8000796:	428a      	cmp	r2, r1
 8000798:	bf0c      	ite	eq
 800079a:	2280      	moveq	r2, #128	; 0x80
 800079c:	2200      	movne	r2, #0
 800079e:	7058      	strb	r0, [r3, #1]
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	4770      	bx	lr
 80007a4:	24001650 	.word	0x24001650

080007a8 <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <vXOR_C+0x18>)
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	7899      	ldrb	r1, [r3, #2]
 80007ae:	ea82 0001 	eor.w	r0, r2, r1
 80007b2:	428a      	cmp	r2, r1
 80007b4:	bf0c      	ite	eq
 80007b6:	2280      	moveq	r2, #128	; 0x80
 80007b8:	2200      	movne	r2, #0
 80007ba:	7058      	strb	r0, [r3, #1]
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	24001650 	.word	0x24001650

080007c4 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vXOR_D+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	7959      	ldrb	r1, [r3, #5]
 80007ca:	ea82 0001 	eor.w	r0, r2, r1
 80007ce:	428a      	cmp	r2, r1
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	7058      	strb	r0, [r3, #1]
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	4770      	bx	lr
 80007dc:	24001650 	.word	0x24001650

080007e0 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vXOR_E+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7919      	ldrb	r1, [r3, #4]
 80007e6:	ea82 0001 	eor.w	r0, r2, r1
 80007ea:	428a      	cmp	r2, r1
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	7058      	strb	r0, [r3, #1]
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	4770      	bx	lr
 80007f8:	24001650 	.word	0x24001650

080007fc <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vXOR_H+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	79d9      	ldrb	r1, [r3, #7]
 8000802:	ea82 0001 	eor.w	r0, r2, r1
 8000806:	428a      	cmp	r2, r1
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	7058      	strb	r0, [r3, #1]
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	4770      	bx	lr
 8000814:	24001650 	.word	0x24001650

08000818 <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vXOR_L+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7999      	ldrb	r1, [r3, #6]
 800081e:	ea82 0001 	eor.w	r0, r2, r1
 8000822:	428a      	cmp	r2, r1
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	7058      	strb	r0, [r3, #1]
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	4770      	bx	lr
 8000830:	24001650 	.word	0x24001650

08000834 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <vXOR_A+0x8>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	801a      	strh	r2, [r3, #0]
 800083a:	4770      	bx	lr
 800083c:	24001650 	.word	0x24001650

08000840 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <vOR_B+0x18>)
 8000842:	785a      	ldrb	r2, [r3, #1]
 8000844:	78d9      	ldrb	r1, [r3, #3]
 8000846:	430a      	orrs	r2, r1
 8000848:	2a00      	cmp	r2, #0
 800084a:	705a      	strb	r2, [r3, #1]
 800084c:	bf0c      	ite	eq
 800084e:	2280      	moveq	r2, #128	; 0x80
 8000850:	2200      	movne	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	24001650 	.word	0x24001650

0800085c <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <vOR_C+0x18>)
 800085e:	785a      	ldrb	r2, [r3, #1]
 8000860:	7899      	ldrb	r1, [r3, #2]
 8000862:	430a      	orrs	r2, r1
 8000864:	2a00      	cmp	r2, #0
 8000866:	705a      	strb	r2, [r3, #1]
 8000868:	bf0c      	ite	eq
 800086a:	2280      	moveq	r2, #128	; 0x80
 800086c:	2200      	movne	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	24001650 	.word	0x24001650

08000878 <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <vOR_D+0x18>)
 800087a:	785a      	ldrb	r2, [r3, #1]
 800087c:	7959      	ldrb	r1, [r3, #5]
 800087e:	430a      	orrs	r2, r1
 8000880:	2a00      	cmp	r2, #0
 8000882:	705a      	strb	r2, [r3, #1]
 8000884:	bf0c      	ite	eq
 8000886:	2280      	moveq	r2, #128	; 0x80
 8000888:	2200      	movne	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24001650 	.word	0x24001650

08000894 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <vOR_E+0x18>)
 8000896:	785a      	ldrb	r2, [r3, #1]
 8000898:	7919      	ldrb	r1, [r3, #4]
 800089a:	430a      	orrs	r2, r1
 800089c:	2a00      	cmp	r2, #0
 800089e:	705a      	strb	r2, [r3, #1]
 80008a0:	bf0c      	ite	eq
 80008a2:	2280      	moveq	r2, #128	; 0x80
 80008a4:	2200      	movne	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	24001650 	.word	0x24001650

080008b0 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <vOR_H+0x18>)
 80008b2:	785a      	ldrb	r2, [r3, #1]
 80008b4:	79d9      	ldrb	r1, [r3, #7]
 80008b6:	430a      	orrs	r2, r1
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	705a      	strb	r2, [r3, #1]
 80008bc:	bf0c      	ite	eq
 80008be:	2280      	moveq	r2, #128	; 0x80
 80008c0:	2200      	movne	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	24001650 	.word	0x24001650

080008cc <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <vOR_L+0x18>)
 80008ce:	785a      	ldrb	r2, [r3, #1]
 80008d0:	7999      	ldrb	r1, [r3, #6]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	705a      	strb	r2, [r3, #1]
 80008d8:	bf0c      	ite	eq
 80008da:	2280      	moveq	r2, #128	; 0x80
 80008dc:	2200      	movne	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	24001650 	.word	0x24001650

080008e8 <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <vOR_A+0x10>)
 80008ea:	785a      	ldrb	r2, [r3, #1]
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2280      	moveq	r2, #128	; 0x80
 80008f2:	2200      	movne	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	4770      	bx	lr
 80008f8:	24001650 	.word	0x24001650

080008fc <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 80008fc:	4b01      	ldr	r3, [pc, #4]	; (8000904 <vJP_HL+0x8>)
 80008fe:	88da      	ldrh	r2, [r3, #6]
 8000900:	815a      	strh	r2, [r3, #10]
 8000902:	4770      	bx	lr
 8000904:	24001650 	.word	0x24001650

08000908 <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 8000908:	4b01      	ldr	r3, [pc, #4]	; (8000910 <vDI+0x8>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	4770      	bx	lr
 8000910:	2400109e 	.word	0x2400109e

08000914 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <vLDs_SP_HL+0x8>)
 8000916:	88da      	ldrh	r2, [r3, #6]
 8000918:	811a      	strh	r2, [r3, #8]
 800091a:	4770      	bx	lr
 800091c:	24001650 	.word	0x24001650

08000920 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <vEI+0x8>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	4770      	bx	lr
 8000928:	2400109e 	.word	0x2400109e

0800092c <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 800092c:	b510      	push	{r4, lr}
 800092e:	4c04      	ldr	r4, [pc, #16]	; (8000940 <vLD_B_d8+0x14>)
 8000930:	8960      	ldrh	r0, [r4, #10]
 8000932:	3801      	subs	r0, #1
 8000934:	b280      	uxth	r0, r0
 8000936:	f002 fe9d 	bl	8003674 <ucGBMemoryRead>
 800093a:	70e0      	strb	r0, [r4, #3]
 800093c:	bd10      	pop	{r4, pc}
 800093e:	bf00      	nop
 8000940:	24001650 	.word	0x24001650

08000944 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000944:	b510      	push	{r4, lr}
 8000946:	4c03      	ldr	r4, [pc, #12]	; (8000954 <vLD_A_BC+0x10>)
 8000948:	8860      	ldrh	r0, [r4, #2]
 800094a:	f002 fe93 	bl	8003674 <ucGBMemoryRead>
 800094e:	7060      	strb	r0, [r4, #1]
 8000950:	bd10      	pop	{r4, pc}
 8000952:	bf00      	nop
 8000954:	24001650 	.word	0x24001650

08000958 <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 8000958:	b510      	push	{r4, lr}
 800095a:	4c04      	ldr	r4, [pc, #16]	; (800096c <vLD_C_d8+0x14>)
 800095c:	8960      	ldrh	r0, [r4, #10]
 800095e:	3801      	subs	r0, #1
 8000960:	b280      	uxth	r0, r0
 8000962:	f002 fe87 	bl	8003674 <ucGBMemoryRead>
 8000966:	70a0      	strb	r0, [r4, #2]
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	24001650 	.word	0x24001650

08000970 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 8000970:	b510      	push	{r4, lr}
 8000972:	4c04      	ldr	r4, [pc, #16]	; (8000984 <vLD_D_d8+0x14>)
 8000974:	8960      	ldrh	r0, [r4, #10]
 8000976:	3801      	subs	r0, #1
 8000978:	b280      	uxth	r0, r0
 800097a:	f002 fe7b 	bl	8003674 <ucGBMemoryRead>
 800097e:	7160      	strb	r0, [r4, #5]
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	24001650 	.word	0x24001650

08000988 <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 8000988:	b510      	push	{r4, lr}
 800098a:	4c05      	ldr	r4, [pc, #20]	; (80009a0 <vJR_r8+0x18>)
 800098c:	8960      	ldrh	r0, [r4, #10]
 800098e:	3801      	subs	r0, #1
 8000990:	b280      	uxth	r0, r0
 8000992:	f002 fe6f 	bl	8003674 <ucGBMemoryRead>
 8000996:	8963      	ldrh	r3, [r4, #10]
 8000998:	fa43 f080 	sxtab	r0, r3, r0
 800099c:	8160      	strh	r0, [r4, #10]
 800099e:	bd10      	pop	{r4, pc}
 80009a0:	24001650 	.word	0x24001650

080009a4 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 80009a4:	b510      	push	{r4, lr}
 80009a6:	4c03      	ldr	r4, [pc, #12]	; (80009b4 <vLD_A_DE+0x10>)
 80009a8:	88a0      	ldrh	r0, [r4, #4]
 80009aa:	f002 fe63 	bl	8003674 <ucGBMemoryRead>
 80009ae:	7060      	strb	r0, [r4, #1]
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	24001650 	.word	0x24001650

080009b8 <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 80009b8:	b510      	push	{r4, lr}
 80009ba:	4c04      	ldr	r4, [pc, #16]	; (80009cc <vLD_E_d8+0x14>)
 80009bc:	8960      	ldrh	r0, [r4, #10]
 80009be:	3801      	subs	r0, #1
 80009c0:	b280      	uxth	r0, r0
 80009c2:	f002 fe57 	bl	8003674 <ucGBMemoryRead>
 80009c6:	7120      	strb	r0, [r4, #4]
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	24001650 	.word	0x24001650

080009d0 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 80009d0:	b510      	push	{r4, lr}
 80009d2:	4c04      	ldr	r4, [pc, #16]	; (80009e4 <vLD_H_d8+0x14>)
 80009d4:	8960      	ldrh	r0, [r4, #10]
 80009d6:	3801      	subs	r0, #1
 80009d8:	b280      	uxth	r0, r0
 80009da:	f002 fe4b 	bl	8003674 <ucGBMemoryRead>
 80009de:	71e0      	strb	r0, [r4, #7]
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	bf00      	nop
 80009e4:	24001650 	.word	0x24001650

080009e8 <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 80009e8:	b510      	push	{r4, lr}
 80009ea:	4c04      	ldr	r4, [pc, #16]	; (80009fc <vLD_A_HLI+0x14>)
 80009ec:	88e0      	ldrh	r0, [r4, #6]
 80009ee:	f002 fe41 	bl	8003674 <ucGBMemoryRead>
 80009f2:	88e3      	ldrh	r3, [r4, #6]
 80009f4:	7060      	strb	r0, [r4, #1]
 80009f6:	3301      	adds	r3, #1
 80009f8:	80e3      	strh	r3, [r4, #6]
 80009fa:	bd10      	pop	{r4, pc}
 80009fc:	24001650 	.word	0x24001650

08000a00 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4c04      	ldr	r4, [pc, #16]	; (8000a14 <vLD_L_d8+0x14>)
 8000a04:	8960      	ldrh	r0, [r4, #10]
 8000a06:	3801      	subs	r0, #1
 8000a08:	b280      	uxth	r0, r0
 8000a0a:	f002 fe33 	bl	8003674 <ucGBMemoryRead>
 8000a0e:	71a0      	strb	r0, [r4, #6]
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	24001650 	.word	0x24001650

08000a18 <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <vLD_A_HLD+0x14>)
 8000a1c:	88e0      	ldrh	r0, [r4, #6]
 8000a1e:	f002 fe29 	bl	8003674 <ucGBMemoryRead>
 8000a22:	88e3      	ldrh	r3, [r4, #6]
 8000a24:	7060      	strb	r0, [r4, #1]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	80e3      	strh	r3, [r4, #6]
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	24001650 	.word	0x24001650

08000a30 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c04      	ldr	r4, [pc, #16]	; (8000a44 <vLD_A_d8+0x14>)
 8000a34:	8960      	ldrh	r0, [r4, #10]
 8000a36:	3801      	subs	r0, #1
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	f002 fe1b 	bl	8003674 <ucGBMemoryRead>
 8000a3e:	7060      	strb	r0, [r4, #1]
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	24001650 	.word	0x24001650

08000a48 <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 8000a48:	b510      	push	{r4, lr}
 8000a4a:	4c03      	ldr	r4, [pc, #12]	; (8000a58 <vLD_B_HL+0x10>)
 8000a4c:	88e0      	ldrh	r0, [r4, #6]
 8000a4e:	f002 fe11 	bl	8003674 <ucGBMemoryRead>
 8000a52:	70e0      	strb	r0, [r4, #3]
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	bf00      	nop
 8000a58:	24001650 	.word	0x24001650

08000a5c <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4c03      	ldr	r4, [pc, #12]	; (8000a6c <vLD_C_HL+0x10>)
 8000a60:	88e0      	ldrh	r0, [r4, #6]
 8000a62:	f002 fe07 	bl	8003674 <ucGBMemoryRead>
 8000a66:	70a0      	strb	r0, [r4, #2]
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24001650 	.word	0x24001650

08000a70 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 8000a70:	b510      	push	{r4, lr}
 8000a72:	4c03      	ldr	r4, [pc, #12]	; (8000a80 <vLD_D_HL+0x10>)
 8000a74:	88e0      	ldrh	r0, [r4, #6]
 8000a76:	f002 fdfd 	bl	8003674 <ucGBMemoryRead>
 8000a7a:	7160      	strb	r0, [r4, #5]
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	bf00      	nop
 8000a80:	24001650 	.word	0x24001650

08000a84 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a84:	b510      	push	{r4, lr}
 8000a86:	4c03      	ldr	r4, [pc, #12]	; (8000a94 <vLD_E_HL+0x10>)
 8000a88:	88e0      	ldrh	r0, [r4, #6]
 8000a8a:	f002 fdf3 	bl	8003674 <ucGBMemoryRead>
 8000a8e:	7120      	strb	r0, [r4, #4]
 8000a90:	bd10      	pop	{r4, pc}
 8000a92:	bf00      	nop
 8000a94:	24001650 	.word	0x24001650

08000a98 <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4c03      	ldr	r4, [pc, #12]	; (8000aa8 <vLD_H_HL+0x10>)
 8000a9c:	88e0      	ldrh	r0, [r4, #6]
 8000a9e:	f002 fde9 	bl	8003674 <ucGBMemoryRead>
 8000aa2:	71e0      	strb	r0, [r4, #7]
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	24001650 	.word	0x24001650

08000aac <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000aac:	b510      	push	{r4, lr}
 8000aae:	4c03      	ldr	r4, [pc, #12]	; (8000abc <vLD_L_HL+0x10>)
 8000ab0:	88e0      	ldrh	r0, [r4, #6]
 8000ab2:	f002 fddf 	bl	8003674 <ucGBMemoryRead>
 8000ab6:	71a0      	strb	r0, [r4, #6]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	24001650 	.word	0x24001650

08000ac0 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4c03      	ldr	r4, [pc, #12]	; (8000ad0 <vLD_A_HL+0x10>)
 8000ac4:	88e0      	ldrh	r0, [r4, #6]
 8000ac6:	f002 fdd5 	bl	8003674 <ucGBMemoryRead>
 8000aca:	7060      	strb	r0, [r4, #1]
 8000acc:	bd10      	pop	{r4, pc}
 8000ace:	bf00      	nop
 8000ad0:	24001650 	.word	0x24001650

08000ad4 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	4c06      	ldr	r4, [pc, #24]	; (8000af0 <vAND_HL+0x1c>)
 8000ad8:	88e0      	ldrh	r0, [r4, #6]
 8000ada:	f002 fdcb 	bl	8003674 <ucGBMemoryRead>
 8000ade:	7863      	ldrb	r3, [r4, #1]
 8000ae0:	4018      	ands	r0, r3
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	7060      	strb	r0, [r4, #1]
 8000ae6:	bf0c      	ite	eq
 8000ae8:	23a0      	moveq	r3, #160	; 0xa0
 8000aea:	2320      	movne	r3, #32
 8000aec:	7023      	strb	r3, [r4, #0]
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	24001650 	.word	0x24001650

08000af4 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4c07      	ldr	r4, [pc, #28]	; (8000b14 <vXOR_HL+0x20>)
 8000af8:	88e0      	ldrh	r0, [r4, #6]
 8000afa:	f002 fdbb 	bl	8003674 <ucGBMemoryRead>
 8000afe:	7863      	ldrb	r3, [r4, #1]
 8000b00:	ea83 0200 	eor.w	r2, r3, r0
 8000b04:	4283      	cmp	r3, r0
 8000b06:	bf0c      	ite	eq
 8000b08:	2080      	moveq	r0, #128	; 0x80
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	7062      	strb	r2, [r4, #1]
 8000b0e:	7020      	strb	r0, [r4, #0]
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop
 8000b14:	24001650 	.word	0x24001650

08000b18 <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4c07      	ldr	r4, [pc, #28]	; (8000b38 <vOR_HL+0x20>)
 8000b1c:	88e0      	ldrh	r0, [r4, #6]
 8000b1e:	f002 fda9 	bl	8003674 <ucGBMemoryRead>
 8000b22:	7863      	ldrb	r3, [r4, #1]
 8000b24:	4318      	orrs	r0, r3
 8000b26:	b2c0      	uxtb	r0, r0
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	7060      	strb	r0, [r4, #1]
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2380      	moveq	r3, #128	; 0x80
 8000b30:	2300      	movne	r3, #0
 8000b32:	7023      	strb	r3, [r4, #0]
 8000b34:	bd10      	pop	{r4, pc}
 8000b36:	bf00      	nop
 8000b38:	24001650 	.word	0x24001650

08000b3c <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <vPREFIX+0x1c>)
 8000b3e:	8958      	ldrh	r0, [r3, #10]
 8000b40:	3801      	subs	r0, #1
 8000b42:	b510      	push	{r4, lr}
 8000b44:	b280      	uxth	r0, r0
 8000b46:	f002 fd95 	bl	8003674 <ucGBMemoryRead>
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <vPREFIX+0x20>)
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b50:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b54:	4718      	bx	r3
 8000b56:	bf00      	nop
 8000b58:	24001650 	.word	0x24001650
 8000b5c:	2400080c 	.word	0x2400080c

08000b60 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b60:	b510      	push	{r4, lr}
 8000b62:	4c07      	ldr	r4, [pc, #28]	; (8000b80 <vAND_d8+0x20>)
 8000b64:	8960      	ldrh	r0, [r4, #10]
 8000b66:	3801      	subs	r0, #1
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	f002 fd83 	bl	8003674 <ucGBMemoryRead>
 8000b6e:	7863      	ldrb	r3, [r4, #1]
 8000b70:	4018      	ands	r0, r3
 8000b72:	2800      	cmp	r0, #0
 8000b74:	7060      	strb	r0, [r4, #1]
 8000b76:	bf0c      	ite	eq
 8000b78:	23a0      	moveq	r3, #160	; 0xa0
 8000b7a:	2320      	movne	r3, #32
 8000b7c:	7023      	strb	r3, [r4, #0]
 8000b7e:	bd10      	pop	{r4, pc}
 8000b80:	24001650 	.word	0x24001650

08000b84 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b84:	b510      	push	{r4, lr}
 8000b86:	4c08      	ldr	r4, [pc, #32]	; (8000ba8 <vXOR_d8+0x24>)
 8000b88:	8960      	ldrh	r0, [r4, #10]
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	b280      	uxth	r0, r0
 8000b8e:	f002 fd71 	bl	8003674 <ucGBMemoryRead>
 8000b92:	7863      	ldrb	r3, [r4, #1]
 8000b94:	ea83 0200 	eor.w	r2, r3, r0
 8000b98:	4283      	cmp	r3, r0
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2080      	moveq	r0, #128	; 0x80
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	7062      	strb	r2, [r4, #1]
 8000ba2:	7020      	strb	r0, [r4, #0]
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24001650 	.word	0x24001650

08000bac <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000bac:	b510      	push	{r4, lr}
 8000bae:	4c06      	ldr	r4, [pc, #24]	; (8000bc8 <vLDH_A_a8+0x1c>)
 8000bb0:	8960      	ldrh	r0, [r4, #10]
 8000bb2:	3801      	subs	r0, #1
 8000bb4:	b280      	uxth	r0, r0
 8000bb6:	f002 fd5d 	bl	8003674 <ucGBMemoryRead>
 8000bba:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bbe:	b280      	uxth	r0, r0
 8000bc0:	f002 fd58 	bl	8003674 <ucGBMemoryRead>
 8000bc4:	7060      	strb	r0, [r4, #1]
 8000bc6:	bd10      	pop	{r4, pc}
 8000bc8:	24001650 	.word	0x24001650

08000bcc <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	4c04      	ldr	r4, [pc, #16]	; (8000be0 <vLD_A_fC+0x14>)
 8000bd0:	78a0      	ldrb	r0, [r4, #2]
 8000bd2:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bd6:	b280      	uxth	r0, r0
 8000bd8:	f002 fd4c 	bl	8003674 <ucGBMemoryRead>
 8000bdc:	7060      	strb	r0, [r4, #1]
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	24001650 	.word	0x24001650

08000be4 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000be4:	b510      	push	{r4, lr}
 8000be6:	4c08      	ldr	r4, [pc, #32]	; (8000c08 <vOR_d8+0x24>)
 8000be8:	8960      	ldrh	r0, [r4, #10]
 8000bea:	3801      	subs	r0, #1
 8000bec:	b280      	uxth	r0, r0
 8000bee:	f002 fd41 	bl	8003674 <ucGBMemoryRead>
 8000bf2:	7863      	ldrb	r3, [r4, #1]
 8000bf4:	4318      	orrs	r0, r3
 8000bf6:	b2c0      	uxtb	r0, r0
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	7060      	strb	r0, [r4, #1]
 8000bfc:	bf0c      	ite	eq
 8000bfe:	2380      	moveq	r3, #128	; 0x80
 8000c00:	2300      	movne	r3, #0
 8000c02:	7023      	strb	r3, [r4, #0]
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	bf00      	nop
 8000c08:	24001650 	.word	0x24001650

08000c0c <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	4c09      	ldr	r4, [pc, #36]	; (8000c34 <vLDs_BC_d16+0x28>)
 8000c10:	8960      	ldrh	r0, [r4, #10]
 8000c12:	3802      	subs	r0, #2
 8000c14:	b280      	uxth	r0, r0
 8000c16:	f002 fd2d 	bl	8003674 <ucGBMemoryRead>
 8000c1a:	8963      	ldrh	r3, [r4, #10]
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	1e58      	subs	r0, r3, #1
 8000c20:	b280      	uxth	r0, r0
 8000c22:	f002 fd27 	bl	8003674 <ucGBMemoryRead>
 8000c26:	4601      	mov	r1, r0
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f002 f813 	bl	8002c54 <usConcat16BitBigEndian>
 8000c2e:	8060      	strh	r0, [r4, #2]
 8000c30:	bd38      	pop	{r3, r4, r5, pc}
 8000c32:	bf00      	nop
 8000c34:	24001650 	.word	0x24001650

08000c38 <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4c09      	ldr	r4, [pc, #36]	; (8000c60 <vLDs_DE_d16+0x28>)
 8000c3c:	8960      	ldrh	r0, [r4, #10]
 8000c3e:	3802      	subs	r0, #2
 8000c40:	b280      	uxth	r0, r0
 8000c42:	f002 fd17 	bl	8003674 <ucGBMemoryRead>
 8000c46:	8963      	ldrh	r3, [r4, #10]
 8000c48:	4605      	mov	r5, r0
 8000c4a:	1e58      	subs	r0, r3, #1
 8000c4c:	b280      	uxth	r0, r0
 8000c4e:	f002 fd11 	bl	8003674 <ucGBMemoryRead>
 8000c52:	4601      	mov	r1, r0
 8000c54:	4628      	mov	r0, r5
 8000c56:	f001 fffd 	bl	8002c54 <usConcat16BitBigEndian>
 8000c5a:	80a0      	strh	r0, [r4, #4]
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	bf00      	nop
 8000c60:	24001650 	.word	0x24001650

08000c64 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	4c09      	ldr	r4, [pc, #36]	; (8000c8c <vLDs_HL_d16+0x28>)
 8000c68:	8960      	ldrh	r0, [r4, #10]
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	b280      	uxth	r0, r0
 8000c6e:	f002 fd01 	bl	8003674 <ucGBMemoryRead>
 8000c72:	8963      	ldrh	r3, [r4, #10]
 8000c74:	4605      	mov	r5, r0
 8000c76:	1e58      	subs	r0, r3, #1
 8000c78:	b280      	uxth	r0, r0
 8000c7a:	f002 fcfb 	bl	8003674 <ucGBMemoryRead>
 8000c7e:	4601      	mov	r1, r0
 8000c80:	4628      	mov	r0, r5
 8000c82:	f001 ffe7 	bl	8002c54 <usConcat16BitBigEndian>
 8000c86:	80e0      	strh	r0, [r4, #6]
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24001650 	.word	0x24001650

08000c90 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4c09      	ldr	r4, [pc, #36]	; (8000cb8 <vLDs_SP_d16+0x28>)
 8000c94:	8960      	ldrh	r0, [r4, #10]
 8000c96:	3802      	subs	r0, #2
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	f002 fceb 	bl	8003674 <ucGBMemoryRead>
 8000c9e:	8963      	ldrh	r3, [r4, #10]
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	1e58      	subs	r0, r3, #1
 8000ca4:	b280      	uxth	r0, r0
 8000ca6:	f002 fce5 	bl	8003674 <ucGBMemoryRead>
 8000caa:	4601      	mov	r1, r0
 8000cac:	4628      	mov	r0, r5
 8000cae:	f001 ffd1 	bl	8002c54 <usConcat16BitBigEndian>
 8000cb2:	8120      	strh	r0, [r4, #8]
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24001650 	.word	0x24001650

08000cbc <vJP_a16>:
void vJP_a16(){       reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4c09      	ldr	r4, [pc, #36]	; (8000ce4 <vJP_a16+0x28>)
 8000cc0:	8960      	ldrh	r0, [r4, #10]
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	f002 fcd5 	bl	8003674 <ucGBMemoryRead>
 8000cca:	8963      	ldrh	r3, [r4, #10]
 8000ccc:	4605      	mov	r5, r0
 8000cce:	1e58      	subs	r0, r3, #1
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	f002 fccf 	bl	8003674 <ucGBMemoryRead>
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f001 ffbb 	bl	8002c54 <usConcat16BitBigEndian>
 8000cde:	8160      	strh	r0, [r4, #10]
 8000ce0:	bd38      	pop	{r3, r4, r5, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24001650 	.word	0x24001650

08000ce8 <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <vLD_A_a16+0x2c>)
 8000cec:	8960      	ldrh	r0, [r4, #10]
 8000cee:	3802      	subs	r0, #2
 8000cf0:	b280      	uxth	r0, r0
 8000cf2:	f002 fcbf 	bl	8003674 <ucGBMemoryRead>
 8000cf6:	8963      	ldrh	r3, [r4, #10]
 8000cf8:	4605      	mov	r5, r0
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	f002 fcb9 	bl	8003674 <ucGBMemoryRead>
 8000d02:	4601      	mov	r1, r0
 8000d04:	4628      	mov	r0, r5
 8000d06:	f001 ffa5 	bl	8002c54 <usConcat16BitBigEndian>
 8000d0a:	f002 fcb3 	bl	8003674 <ucGBMemoryRead>
 8000d0e:	7060      	strb	r0, [r4, #1]
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	bf00      	nop
 8000d14:	24001650 	.word	0x24001650

08000d18 <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <vLD_BC_A+0xc>)
 8000d1a:	7859      	ldrb	r1, [r3, #1]
 8000d1c:	8858      	ldrh	r0, [r3, #2]
 8000d1e:	f002 bcd1 	b.w	80036c4 <vGBMemoryWrite>
 8000d22:	bf00      	nop
 8000d24:	24001650 	.word	0x24001650

08000d28 <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <vLD_DE_A+0xc>)
 8000d2a:	7859      	ldrb	r1, [r3, #1]
 8000d2c:	8898      	ldrh	r0, [r3, #4]
 8000d2e:	f002 bcc9 	b.w	80036c4 <vGBMemoryWrite>
 8000d32:	bf00      	nop
 8000d34:	24001650 	.word	0x24001650

08000d38 <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	4c04      	ldr	r4, [pc, #16]	; (8000d4c <vLD_HLI_A+0x14>)
 8000d3c:	7861      	ldrb	r1, [r4, #1]
 8000d3e:	88e0      	ldrh	r0, [r4, #6]
 8000d40:	f002 fcc0 	bl	80036c4 <vGBMemoryWrite>
 8000d44:	88e3      	ldrh	r3, [r4, #6]
 8000d46:	3301      	adds	r3, #1
 8000d48:	80e3      	strh	r3, [r4, #6]
 8000d4a:	bd10      	pop	{r4, pc}
 8000d4c:	24001650 	.word	0x24001650

08000d50 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d50:	b510      	push	{r4, lr}
 8000d52:	4c04      	ldr	r4, [pc, #16]	; (8000d64 <vLD_HLD_A+0x14>)
 8000d54:	7861      	ldrb	r1, [r4, #1]
 8000d56:	88e0      	ldrh	r0, [r4, #6]
 8000d58:	f002 fcb4 	bl	80036c4 <vGBMemoryWrite>
 8000d5c:	88e3      	ldrh	r3, [r4, #6]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	80e3      	strh	r3, [r4, #6]
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	24001650 	.word	0x24001650

08000d68 <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <vLD_HL_d8+0x1c>)
 8000d6a:	8958      	ldrh	r0, [r3, #10]
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	b510      	push	{r4, lr}
 8000d70:	88dc      	ldrh	r4, [r3, #6]
 8000d72:	b280      	uxth	r0, r0
 8000d74:	f002 fc7e 	bl	8003674 <ucGBMemoryRead>
 8000d78:	4601      	mov	r1, r0
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d80:	f002 bca0 	b.w	80036c4 <vGBMemoryWrite>
 8000d84:	24001650 	.word	0x24001650

08000d88 <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <vLD_HL_B+0xc>)
 8000d8a:	78d9      	ldrb	r1, [r3, #3]
 8000d8c:	88d8      	ldrh	r0, [r3, #6]
 8000d8e:	f002 bc99 	b.w	80036c4 <vGBMemoryWrite>
 8000d92:	bf00      	nop
 8000d94:	24001650 	.word	0x24001650

08000d98 <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <vLD_HL_C+0xc>)
 8000d9a:	7899      	ldrb	r1, [r3, #2]
 8000d9c:	88d8      	ldrh	r0, [r3, #6]
 8000d9e:	f002 bc91 	b.w	80036c4 <vGBMemoryWrite>
 8000da2:	bf00      	nop
 8000da4:	24001650 	.word	0x24001650

08000da8 <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <vLD_HL_D+0xc>)
 8000daa:	7959      	ldrb	r1, [r3, #5]
 8000dac:	88d8      	ldrh	r0, [r3, #6]
 8000dae:	f002 bc89 	b.w	80036c4 <vGBMemoryWrite>
 8000db2:	bf00      	nop
 8000db4:	24001650 	.word	0x24001650

08000db8 <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <vLD_HL_E+0xc>)
 8000dba:	7919      	ldrb	r1, [r3, #4]
 8000dbc:	88d8      	ldrh	r0, [r3, #6]
 8000dbe:	f002 bc81 	b.w	80036c4 <vGBMemoryWrite>
 8000dc2:	bf00      	nop
 8000dc4:	24001650 	.word	0x24001650

08000dc8 <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <vLD_HL_H+0xc>)
 8000dca:	79d9      	ldrb	r1, [r3, #7]
 8000dcc:	88d8      	ldrh	r0, [r3, #6]
 8000dce:	f002 bc79 	b.w	80036c4 <vGBMemoryWrite>
 8000dd2:	bf00      	nop
 8000dd4:	24001650 	.word	0x24001650

08000dd8 <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <vLD_HL_L+0xc>)
 8000dda:	7999      	ldrb	r1, [r3, #6]
 8000ddc:	88d8      	ldrh	r0, [r3, #6]
 8000dde:	f002 bc71 	b.w	80036c4 <vGBMemoryWrite>
 8000de2:	bf00      	nop
 8000de4:	24001650 	.word	0x24001650

08000de8 <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <vLD_HL_A+0xc>)
 8000dea:	7859      	ldrb	r1, [r3, #1]
 8000dec:	88d8      	ldrh	r0, [r3, #6]
 8000dee:	f002 bc69 	b.w	80036c4 <vGBMemoryWrite>
 8000df2:	bf00      	nop
 8000df4:	24001650 	.word	0x24001650

08000df8 <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	4c07      	ldr	r4, [pc, #28]	; (8000e18 <vLDH_a8_A+0x20>)
 8000dfc:	8960      	ldrh	r0, [r4, #10]
 8000dfe:	3801      	subs	r0, #1
 8000e00:	b280      	uxth	r0, r0
 8000e02:	f002 fc37 	bl	8003674 <ucGBMemoryRead>
 8000e06:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e0a:	7861      	ldrb	r1, [r4, #1]
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e12:	f002 bc57 	b.w	80036c4 <vGBMemoryWrite>
 8000e16:	bf00      	nop
 8000e18:	24001650 	.word	0x24001650

08000e1c <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <vLD_fC_A+0x10>)
 8000e1e:	7898      	ldrb	r0, [r3, #2]
 8000e20:	7859      	ldrb	r1, [r3, #1]
 8000e22:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e26:	b280      	uxth	r0, r0
 8000e28:	f002 bc4c 	b.w	80036c4 <vGBMemoryWrite>
 8000e2c:	24001650 	.word	0x24001650

08000e30 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <vLD_a16_A+0x2c>)
 8000e34:	8960      	ldrh	r0, [r4, #10]
 8000e36:	3802      	subs	r0, #2
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	f002 fc1b 	bl	8003674 <ucGBMemoryRead>
 8000e3e:	8963      	ldrh	r3, [r4, #10]
 8000e40:	4605      	mov	r5, r0
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	b280      	uxth	r0, r0
 8000e46:	f002 fc15 	bl	8003674 <ucGBMemoryRead>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	f001 ff01 	bl	8002c54 <usConcat16BitBigEndian>
 8000e52:	7861      	ldrb	r1, [r4, #1]
 8000e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e58:	f002 bc34 	b.w	80036c4 <vGBMemoryWrite>
 8000e5c:	24001650 	.word	0x24001650

08000e60 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e60:	4901      	ldr	r1, [pc, #4]	; (8000e68 <vINC_B+0x8>)
 8000e62:	1cc8      	adds	r0, r1, #3
 8000e64:	f001 bf0e 	b.w	8002c84 <v8bitRegisterINC>
 8000e68:	24001650 	.word	0x24001650

08000e6c <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e6c:	4901      	ldr	r1, [pc, #4]	; (8000e74 <vINC_C+0x8>)
 8000e6e:	1c88      	adds	r0, r1, #2
 8000e70:	f001 bf08 	b.w	8002c84 <v8bitRegisterINC>
 8000e74:	24001650 	.word	0x24001650

08000e78 <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000e78:	4901      	ldr	r1, [pc, #4]	; (8000e80 <vINC_D+0x8>)
 8000e7a:	1d48      	adds	r0, r1, #5
 8000e7c:	f001 bf02 	b.w	8002c84 <v8bitRegisterINC>
 8000e80:	24001650 	.word	0x24001650

08000e84 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e84:	4901      	ldr	r1, [pc, #4]	; (8000e8c <vINC_E+0x8>)
 8000e86:	1d08      	adds	r0, r1, #4
 8000e88:	f001 befc 	b.w	8002c84 <v8bitRegisterINC>
 8000e8c:	24001650 	.word	0x24001650

08000e90 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e90:	4901      	ldr	r1, [pc, #4]	; (8000e98 <vINC_H+0x8>)
 8000e92:	1dc8      	adds	r0, r1, #7
 8000e94:	f001 bef6 	b.w	8002c84 <v8bitRegisterINC>
 8000e98:	24001650 	.word	0x24001650

08000e9c <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e9c:	4901      	ldr	r1, [pc, #4]	; (8000ea4 <vINC_L+0x8>)
 8000e9e:	1d88      	adds	r0, r1, #6
 8000ea0:	f001 bef0 	b.w	8002c84 <v8bitRegisterINC>
 8000ea4:	24001650 	.word	0x24001650

08000ea8 <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000ea8:	4901      	ldr	r1, [pc, #4]	; (8000eb0 <vINC_A+0x8>)
 8000eaa:	1c48      	adds	r0, r1, #1
 8000eac:	f001 beea 	b.w	8002c84 <v8bitRegisterINC>
 8000eb0:	24001650 	.word	0x24001650

08000eb4 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000eb4:	4901      	ldr	r1, [pc, #4]	; (8000ebc <vDEC_B+0x8>)
 8000eb6:	1cc8      	adds	r0, r1, #3
 8000eb8:	f001 bf02 	b.w	8002cc0 <v8bitRegisterDEC>
 8000ebc:	24001650 	.word	0x24001650

08000ec0 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000ec0:	4901      	ldr	r1, [pc, #4]	; (8000ec8 <vDEC_C+0x8>)
 8000ec2:	1c88      	adds	r0, r1, #2
 8000ec4:	f001 befc 	b.w	8002cc0 <v8bitRegisterDEC>
 8000ec8:	24001650 	.word	0x24001650

08000ecc <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000ecc:	4901      	ldr	r1, [pc, #4]	; (8000ed4 <vDEC_D+0x8>)
 8000ece:	1d48      	adds	r0, r1, #5
 8000ed0:	f001 bef6 	b.w	8002cc0 <v8bitRegisterDEC>
 8000ed4:	24001650 	.word	0x24001650

08000ed8 <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000ed8:	4901      	ldr	r1, [pc, #4]	; (8000ee0 <vDEC_E+0x8>)
 8000eda:	1d08      	adds	r0, r1, #4
 8000edc:	f001 bef0 	b.w	8002cc0 <v8bitRegisterDEC>
 8000ee0:	24001650 	.word	0x24001650

08000ee4 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000ee4:	4901      	ldr	r1, [pc, #4]	; (8000eec <vDEC_H+0x8>)
 8000ee6:	1dc8      	adds	r0, r1, #7
 8000ee8:	f001 beea 	b.w	8002cc0 <v8bitRegisterDEC>
 8000eec:	24001650 	.word	0x24001650

08000ef0 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000ef0:	4901      	ldr	r1, [pc, #4]	; (8000ef8 <vDEC_L+0x8>)
 8000ef2:	1d88      	adds	r0, r1, #6
 8000ef4:	f001 bee4 	b.w	8002cc0 <v8bitRegisterDEC>
 8000ef8:	24001650 	.word	0x24001650

08000efc <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000efc:	4901      	ldr	r1, [pc, #4]	; (8000f04 <vDEC_A+0x8>)
 8000efe:	1c48      	adds	r0, r1, #1
 8000f00:	f001 bede 	b.w	8002cc0 <v8bitRegisterDEC>
 8000f04:	24001650 	.word	0x24001650

08000f08 <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRLCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 bef8 	b.w	8002d00 <vGBFunctionRLCA>
 8000f10:	24001650 	.word	0x24001650

08000f14 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(usConcat16BitBigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <vLDs_a16_SP+0x2c>)
 8000f18:	8960      	ldrh	r0, [r4, #10]
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	b280      	uxth	r0, r0
 8000f1e:	f002 fba9 	bl	8003674 <ucGBMemoryRead>
 8000f22:	8963      	ldrh	r3, [r4, #10]
 8000f24:	4605      	mov	r5, r0
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	b280      	uxth	r0, r0
 8000f2a:	f002 fba3 	bl	8003674 <ucGBMemoryRead>
 8000f2e:	4601      	mov	r1, r0
 8000f30:	4628      	mov	r0, r5
 8000f32:	f001 fe8f 	bl	8002c54 <usConcat16BitBigEndian>
 8000f36:	8921      	ldrh	r1, [r4, #8]
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f002 bc3e 	b.w	80037bc <vGBMemoryWriteShort>
 8000f40:	24001650 	.word	0x24001650

08000f44 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000f44:	4a02      	ldr	r2, [pc, #8]	; (8000f50 <vADDs_HL_BC+0xc>)
 8000f46:	8851      	ldrh	r1, [r2, #2]
 8000f48:	1d90      	adds	r0, r2, #6
 8000f4a:	f001 bef7 	b.w	8002d3c <vGBFunction16bitADD>
 8000f4e:	bf00      	nop
 8000f50:	24001650 	.word	0x24001650

08000f54 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000f54:	4a02      	ldr	r2, [pc, #8]	; (8000f60 <vADDs_HL_DE+0xc>)
 8000f56:	8891      	ldrh	r1, [r2, #4]
 8000f58:	1d90      	adds	r0, r2, #6
 8000f5a:	f001 beef 	b.w	8002d3c <vGBFunction16bitADD>
 8000f5e:	bf00      	nop
 8000f60:	24001650 	.word	0x24001650

08000f64 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <vADDs_HL_HL+0xc>)
 8000f66:	4602      	mov	r2, r0
 8000f68:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000f6c:	f001 bee6 	b.w	8002d3c <vGBFunction16bitADD>
 8000f70:	24001650 	.word	0x24001650

08000f74 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000f74:	4a02      	ldr	r2, [pc, #8]	; (8000f80 <vADDs_HL_SP+0xc>)
 8000f76:	8911      	ldrh	r1, [r2, #8]
 8000f78:	1d90      	adds	r0, r2, #6
 8000f7a:	f001 bedf 	b.w	8002d3c <vGBFunction16bitADD>
 8000f7e:	bf00      	nop
 8000f80:	24001650 	.word	0x24001650

08000f84 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f84:	4901      	ldr	r1, [pc, #4]	; (8000f8c <vRRCA+0x8>)
 8000f86:	1c48      	adds	r0, r1, #1
 8000f88:	f001 bec6 	b.w	8002d18 <vGBFunctionRRCA>
 8000f8c:	24001650 	.word	0x24001650

08000f90 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f90:	4901      	ldr	r1, [pc, #4]	; (8000f98 <vRLA+0x8>)
 8000f92:	1c48      	adds	r0, r1, #1
 8000f94:	f001 befa 	b.w	8002d8c <vGBFunctionRLA>
 8000f98:	24001650 	.word	0x24001650

08000f9c <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f9c:	4901      	ldr	r1, [pc, #4]	; (8000fa4 <vRRA+0x8>)
 8000f9e:	1c48      	adds	r0, r1, #1
 8000fa0:	f001 bf02 	b.w	8002da8 <vGBFunctionRRA>
 8000fa4:	24001650 	.word	0x24001650

08000fa8 <vJR_NZ_r8>:
void vJR_NZ_r8(){     ucCustomDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4d08      	ldr	r5, [pc, #32]	; (8000fcc <vJR_NZ_r8+0x24>)
 8000fac:	462c      	mov	r4, r5
 8000fae:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fb2:	3801      	subs	r0, #1
 8000fb4:	b280      	uxth	r0, r0
 8000fb6:	f002 fb5d 	bl	8003674 <ucGBMemoryRead>
 8000fba:	4629      	mov	r1, r5
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f001 ff00 	bl	8002dc4 <vGBFunctionJR_NZ>
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <vJR_NZ_r8+0x28>)
 8000fc6:	7018      	strb	r0, [r3, #0]
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	24001650 	.word	0x24001650
 8000fd0:	2400109c 	.word	0x2400109c

08000fd4 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000fd4:	4901      	ldr	r1, [pc, #4]	; (8000fdc <vDAA+0x8>)
 8000fd6:	1c48      	adds	r0, r1, #1
 8000fd8:	f001 bf00 	b.w	8002ddc <vGBFunctionDAA>
 8000fdc:	24001650 	.word	0x24001650

08000fe0 <vJR_Z_r8>:
void vJR_Z_r8(){      ucCustomDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d08      	ldr	r5, [pc, #32]	; (8001004 <vJR_Z_r8+0x24>)
 8000fe4:	462c      	mov	r4, r5
 8000fe6:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fea:	3801      	subs	r0, #1
 8000fec:	b280      	uxth	r0, r0
 8000fee:	f002 fb41 	bl	8003674 <ucGBMemoryRead>
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f001 ff2e 	bl	8002e58 <vGBFunctionJR_Z>
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <vJR_Z_r8+0x28>)
 8000ffe:	7018      	strb	r0, [r3, #0]
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop
 8001004:	24001650 	.word	0x24001650
 8001008:	2400109c 	.word	0x2400109c

0800100c <vCPL>:
void vCPL(){          reg.A = ~(reg.A); vSetBit(&reg.F, N_FLAG); vSetBit(&reg.F, H_FLAG);}
 800100c:	b510      	push	{r4, lr}
 800100e:	4c07      	ldr	r4, [pc, #28]	; (800102c <vCPL+0x20>)
 8001010:	2106      	movs	r1, #6
 8001012:	7863      	ldrb	r3, [r4, #1]
 8001014:	4620      	mov	r0, r4
 8001016:	43db      	mvns	r3, r3
 8001018:	7063      	strb	r3, [r4, #1]
 800101a:	f001 fe1f 	bl	8002c5c <vSetBit>
 800101e:	4620      	mov	r0, r4
 8001020:	2105      	movs	r1, #5
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001026:	f001 be19 	b.w	8002c5c <vSetBit>
 800102a:	bf00      	nop
 800102c:	24001650 	.word	0x24001650

08001030 <vSET_0_B>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      vResetBit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      vSetBit(&reg.B, 0);}
 8001030:	2100      	movs	r1, #0
 8001032:	4801      	ldr	r0, [pc, #4]	; (8001038 <vSET_0_B+0x8>)
 8001034:	f001 be12 	b.w	8002c5c <vSetBit>
 8001038:	24001653 	.word	0x24001653

0800103c <vSET_0_C>:
void vSET_0_C(){      vSetBit(&reg.C, 0);}
 800103c:	2100      	movs	r1, #0
 800103e:	4801      	ldr	r0, [pc, #4]	; (8001044 <vSET_0_C+0x8>)
 8001040:	f001 be0c 	b.w	8002c5c <vSetBit>
 8001044:	24001652 	.word	0x24001652

08001048 <vSET_0_D>:
void vSET_0_D(){      vSetBit(&reg.D, 0);}
 8001048:	2100      	movs	r1, #0
 800104a:	4801      	ldr	r0, [pc, #4]	; (8001050 <vSET_0_D+0x8>)
 800104c:	f001 be06 	b.w	8002c5c <vSetBit>
 8001050:	24001655 	.word	0x24001655

08001054 <vSET_0_E>:
void vSET_0_E(){      vSetBit(&reg.E, 0);}
 8001054:	2100      	movs	r1, #0
 8001056:	4801      	ldr	r0, [pc, #4]	; (800105c <vSET_0_E+0x8>)
 8001058:	f001 be00 	b.w	8002c5c <vSetBit>
 800105c:	24001654 	.word	0x24001654

08001060 <vSET_0_H>:
void vSET_0_H(){      vSetBit(&reg.H, 0);}
 8001060:	2100      	movs	r1, #0
 8001062:	4801      	ldr	r0, [pc, #4]	; (8001068 <vSET_0_H+0x8>)
 8001064:	f001 bdfa 	b.w	8002c5c <vSetBit>
 8001068:	24001657 	.word	0x24001657

0800106c <vSET_0_L>:
void vSET_0_L(){      vSetBit(&reg.L, 0);}
 800106c:	2100      	movs	r1, #0
 800106e:	4801      	ldr	r0, [pc, #4]	; (8001074 <vSET_0_L+0x8>)
 8001070:	f001 bdf4 	b.w	8002c5c <vSetBit>
 8001074:	24001656 	.word	0x24001656

08001078 <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      vSetBit(&reg.A, 0);}
 8001078:	2100      	movs	r1, #0
 800107a:	4801      	ldr	r0, [pc, #4]	; (8001080 <vSET_0_A+0x8>)
 800107c:	f001 bdee 	b.w	8002c5c <vSetBit>
 8001080:	24001651 	.word	0x24001651

08001084 <vSET_1_B>:
void vSET_1_B(){      vSetBit(&reg.B, 1);}
 8001084:	2101      	movs	r1, #1
 8001086:	4801      	ldr	r0, [pc, #4]	; (800108c <vSET_1_B+0x8>)
 8001088:	f001 bde8 	b.w	8002c5c <vSetBit>
 800108c:	24001653 	.word	0x24001653

08001090 <vSET_1_C>:
void vSET_1_C(){      vSetBit(&reg.C, 1);}
 8001090:	2101      	movs	r1, #1
 8001092:	4801      	ldr	r0, [pc, #4]	; (8001098 <vSET_1_C+0x8>)
 8001094:	f001 bde2 	b.w	8002c5c <vSetBit>
 8001098:	24001652 	.word	0x24001652

0800109c <vSET_1_D>:
void vSET_1_D(){      vSetBit(&reg.D, 1);}
 800109c:	2101      	movs	r1, #1
 800109e:	4801      	ldr	r0, [pc, #4]	; (80010a4 <vSET_1_D+0x8>)
 80010a0:	f001 bddc 	b.w	8002c5c <vSetBit>
 80010a4:	24001655 	.word	0x24001655

080010a8 <vSET_1_E>:
void vSET_1_E(){      vSetBit(&reg.E, 1);}
 80010a8:	2101      	movs	r1, #1
 80010aa:	4801      	ldr	r0, [pc, #4]	; (80010b0 <vSET_1_E+0x8>)
 80010ac:	f001 bdd6 	b.w	8002c5c <vSetBit>
 80010b0:	24001654 	.word	0x24001654

080010b4 <vSET_1_H>:
void vSET_1_H(){      vSetBit(&reg.H, 1);}
 80010b4:	2101      	movs	r1, #1
 80010b6:	4801      	ldr	r0, [pc, #4]	; (80010bc <vSET_1_H+0x8>)
 80010b8:	f001 bdd0 	b.w	8002c5c <vSetBit>
 80010bc:	24001657 	.word	0x24001657

080010c0 <vSET_1_L>:
void vSET_1_L(){      vSetBit(&reg.L, 1);}
 80010c0:	2101      	movs	r1, #1
 80010c2:	4801      	ldr	r0, [pc, #4]	; (80010c8 <vSET_1_L+0x8>)
 80010c4:	f001 bdca 	b.w	8002c5c <vSetBit>
 80010c8:	24001656 	.word	0x24001656

080010cc <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      vSetBit(&reg.A, 1);}
 80010cc:	2101      	movs	r1, #1
 80010ce:	4801      	ldr	r0, [pc, #4]	; (80010d4 <vSET_1_A+0x8>)
 80010d0:	f001 bdc4 	b.w	8002c5c <vSetBit>
 80010d4:	24001651 	.word	0x24001651

080010d8 <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      vSetBit(&reg.B, 2);}
 80010d8:	2102      	movs	r1, #2
 80010da:	4801      	ldr	r0, [pc, #4]	; (80010e0 <vSET_2_B+0x8>)
 80010dc:	f001 bdbe 	b.w	8002c5c <vSetBit>
 80010e0:	24001653 	.word	0x24001653

080010e4 <vSET_2_C>:
void vSET_2_C(){      vSetBit(&reg.C, 2);}
 80010e4:	2102      	movs	r1, #2
 80010e6:	4801      	ldr	r0, [pc, #4]	; (80010ec <vSET_2_C+0x8>)
 80010e8:	f001 bdb8 	b.w	8002c5c <vSetBit>
 80010ec:	24001652 	.word	0x24001652

080010f0 <vSET_2_D>:
void vSET_2_D(){      vSetBit(&reg.D, 2);}
 80010f0:	2102      	movs	r1, #2
 80010f2:	4801      	ldr	r0, [pc, #4]	; (80010f8 <vSET_2_D+0x8>)
 80010f4:	f001 bdb2 	b.w	8002c5c <vSetBit>
 80010f8:	24001655 	.word	0x24001655

080010fc <vSET_2_E>:
void vSET_2_E(){      vSetBit(&reg.E, 2);}
 80010fc:	2102      	movs	r1, #2
 80010fe:	4801      	ldr	r0, [pc, #4]	; (8001104 <vSET_2_E+0x8>)
 8001100:	f001 bdac 	b.w	8002c5c <vSetBit>
 8001104:	24001654 	.word	0x24001654

08001108 <vSET_2_H>:
void vSET_2_H(){      vSetBit(&reg.H, 2);}
 8001108:	2102      	movs	r1, #2
 800110a:	4801      	ldr	r0, [pc, #4]	; (8001110 <vSET_2_H+0x8>)
 800110c:	f001 bda6 	b.w	8002c5c <vSetBit>
 8001110:	24001657 	.word	0x24001657

08001114 <vSET_2_L>:
void vSET_2_L(){      vSetBit(&reg.L, 2);}
 8001114:	2102      	movs	r1, #2
 8001116:	4801      	ldr	r0, [pc, #4]	; (800111c <vSET_2_L+0x8>)
 8001118:	f001 bda0 	b.w	8002c5c <vSetBit>
 800111c:	24001656 	.word	0x24001656

08001120 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      vSetBit(&reg.A, 2);}
 8001120:	2102      	movs	r1, #2
 8001122:	4801      	ldr	r0, [pc, #4]	; (8001128 <vSET_2_A+0x8>)
 8001124:	f001 bd9a 	b.w	8002c5c <vSetBit>
 8001128:	24001651 	.word	0x24001651

0800112c <vSET_3_B>:
void vSET_3_B(){      vSetBit(&reg.B, 3);}
 800112c:	2103      	movs	r1, #3
 800112e:	4801      	ldr	r0, [pc, #4]	; (8001134 <vSET_3_B+0x8>)
 8001130:	f001 bd94 	b.w	8002c5c <vSetBit>
 8001134:	24001653 	.word	0x24001653

08001138 <vSET_3_C>:
void vSET_3_C(){      vSetBit(&reg.C, 3);}
 8001138:	2103      	movs	r1, #3
 800113a:	4801      	ldr	r0, [pc, #4]	; (8001140 <vSET_3_C+0x8>)
 800113c:	f001 bd8e 	b.w	8002c5c <vSetBit>
 8001140:	24001652 	.word	0x24001652

08001144 <vSET_3_D>:
void vSET_3_D(){      vSetBit(&reg.D, 3);}
 8001144:	2103      	movs	r1, #3
 8001146:	4801      	ldr	r0, [pc, #4]	; (800114c <vSET_3_D+0x8>)
 8001148:	f001 bd88 	b.w	8002c5c <vSetBit>
 800114c:	24001655 	.word	0x24001655

08001150 <vSET_3_E>:
void vSET_3_E(){      vSetBit(&reg.E, 3);}
 8001150:	2103      	movs	r1, #3
 8001152:	4801      	ldr	r0, [pc, #4]	; (8001158 <vSET_3_E+0x8>)
 8001154:	f001 bd82 	b.w	8002c5c <vSetBit>
 8001158:	24001654 	.word	0x24001654

0800115c <vSET_3_H>:
void vSET_3_H(){      vSetBit(&reg.H, 3);}
 800115c:	2103      	movs	r1, #3
 800115e:	4801      	ldr	r0, [pc, #4]	; (8001164 <vSET_3_H+0x8>)
 8001160:	f001 bd7c 	b.w	8002c5c <vSetBit>
 8001164:	24001657 	.word	0x24001657

08001168 <vSET_3_L>:
void vSET_3_L(){      vSetBit(&reg.L, 3);}
 8001168:	2103      	movs	r1, #3
 800116a:	4801      	ldr	r0, [pc, #4]	; (8001170 <vSET_3_L+0x8>)
 800116c:	f001 bd76 	b.w	8002c5c <vSetBit>
 8001170:	24001656 	.word	0x24001656

08001174 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      vSetBit(&reg.A, 3);}
 8001174:	2103      	movs	r1, #3
 8001176:	4801      	ldr	r0, [pc, #4]	; (800117c <vSET_3_A+0x8>)
 8001178:	f001 bd70 	b.w	8002c5c <vSetBit>
 800117c:	24001651 	.word	0x24001651

08001180 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      vSetBit(&reg.B, 4);}
 8001180:	2104      	movs	r1, #4
 8001182:	4801      	ldr	r0, [pc, #4]	; (8001188 <vSET_4_B+0x8>)
 8001184:	f001 bd6a 	b.w	8002c5c <vSetBit>
 8001188:	24001653 	.word	0x24001653

0800118c <vSET_4_C>:
void vSET_4_C(){      vSetBit(&reg.C, 4);}
 800118c:	2104      	movs	r1, #4
 800118e:	4801      	ldr	r0, [pc, #4]	; (8001194 <vSET_4_C+0x8>)
 8001190:	f001 bd64 	b.w	8002c5c <vSetBit>
 8001194:	24001652 	.word	0x24001652

08001198 <vSET_4_D>:
void vSET_4_D(){      vSetBit(&reg.D, 4);}
 8001198:	2104      	movs	r1, #4
 800119a:	4801      	ldr	r0, [pc, #4]	; (80011a0 <vSET_4_D+0x8>)
 800119c:	f001 bd5e 	b.w	8002c5c <vSetBit>
 80011a0:	24001655 	.word	0x24001655

080011a4 <vSET_4_E>:
void vSET_4_E(){      vSetBit(&reg.E, 4);}
 80011a4:	2104      	movs	r1, #4
 80011a6:	4801      	ldr	r0, [pc, #4]	; (80011ac <vSET_4_E+0x8>)
 80011a8:	f001 bd58 	b.w	8002c5c <vSetBit>
 80011ac:	24001654 	.word	0x24001654

080011b0 <vSET_4_H>:
void vSET_4_H(){      vSetBit(&reg.H, 4);}
 80011b0:	2104      	movs	r1, #4
 80011b2:	4801      	ldr	r0, [pc, #4]	; (80011b8 <vSET_4_H+0x8>)
 80011b4:	f001 bd52 	b.w	8002c5c <vSetBit>
 80011b8:	24001657 	.word	0x24001657

080011bc <vSET_4_L>:
void vSET_4_L(){      vSetBit(&reg.L, 4);}
 80011bc:	2104      	movs	r1, #4
 80011be:	4801      	ldr	r0, [pc, #4]	; (80011c4 <vSET_4_L+0x8>)
 80011c0:	f001 bd4c 	b.w	8002c5c <vSetBit>
 80011c4:	24001656 	.word	0x24001656

080011c8 <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      vSetBit(&reg.A, 4);}
 80011c8:	2104      	movs	r1, #4
 80011ca:	4801      	ldr	r0, [pc, #4]	; (80011d0 <vSET_4_A+0x8>)
 80011cc:	f001 bd46 	b.w	8002c5c <vSetBit>
 80011d0:	24001651 	.word	0x24001651

080011d4 <vSET_5_B>:
void vSET_5_B(){      vSetBit(&reg.B, 5);}
 80011d4:	2105      	movs	r1, #5
 80011d6:	4801      	ldr	r0, [pc, #4]	; (80011dc <vSET_5_B+0x8>)
 80011d8:	f001 bd40 	b.w	8002c5c <vSetBit>
 80011dc:	24001653 	.word	0x24001653

080011e0 <vSET_5_C>:
void vSET_5_C(){      vSetBit(&reg.C, 5);}
 80011e0:	2105      	movs	r1, #5
 80011e2:	4801      	ldr	r0, [pc, #4]	; (80011e8 <vSET_5_C+0x8>)
 80011e4:	f001 bd3a 	b.w	8002c5c <vSetBit>
 80011e8:	24001652 	.word	0x24001652

080011ec <vSET_5_D>:
void vSET_5_D(){      vSetBit(&reg.D, 5);}
 80011ec:	2105      	movs	r1, #5
 80011ee:	4801      	ldr	r0, [pc, #4]	; (80011f4 <vSET_5_D+0x8>)
 80011f0:	f001 bd34 	b.w	8002c5c <vSetBit>
 80011f4:	24001655 	.word	0x24001655

080011f8 <vSET_5_E>:
void vSET_5_E(){      vSetBit(&reg.E, 5);}
 80011f8:	2105      	movs	r1, #5
 80011fa:	4801      	ldr	r0, [pc, #4]	; (8001200 <vSET_5_E+0x8>)
 80011fc:	f001 bd2e 	b.w	8002c5c <vSetBit>
 8001200:	24001654 	.word	0x24001654

08001204 <vSET_5_H>:
void vSET_5_H(){      vSetBit(&reg.H, 5);}
 8001204:	2105      	movs	r1, #5
 8001206:	4801      	ldr	r0, [pc, #4]	; (800120c <vSET_5_H+0x8>)
 8001208:	f001 bd28 	b.w	8002c5c <vSetBit>
 800120c:	24001657 	.word	0x24001657

08001210 <vSET_5_L>:
void vSET_5_L(){      vSetBit(&reg.L, 5);}
 8001210:	2105      	movs	r1, #5
 8001212:	4801      	ldr	r0, [pc, #4]	; (8001218 <vSET_5_L+0x8>)
 8001214:	f001 bd22 	b.w	8002c5c <vSetBit>
 8001218:	24001656 	.word	0x24001656

0800121c <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      vSetBit(&reg.A, 5);}
 800121c:	2105      	movs	r1, #5
 800121e:	4801      	ldr	r0, [pc, #4]	; (8001224 <vSET_5_A+0x8>)
 8001220:	f001 bd1c 	b.w	8002c5c <vSetBit>
 8001224:	24001651 	.word	0x24001651

08001228 <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      vSetBit(&reg.B, 6);}
 8001228:	2106      	movs	r1, #6
 800122a:	4801      	ldr	r0, [pc, #4]	; (8001230 <vSET_6_B+0x8>)
 800122c:	f001 bd16 	b.w	8002c5c <vSetBit>
 8001230:	24001653 	.word	0x24001653

08001234 <vSET_6_C>:
void vSET_6_C(){      vSetBit(&reg.C, 6);}
 8001234:	2106      	movs	r1, #6
 8001236:	4801      	ldr	r0, [pc, #4]	; (800123c <vSET_6_C+0x8>)
 8001238:	f001 bd10 	b.w	8002c5c <vSetBit>
 800123c:	24001652 	.word	0x24001652

08001240 <vSET_6_D>:
void vSET_6_D(){      vSetBit(&reg.D, 6);}
 8001240:	2106      	movs	r1, #6
 8001242:	4801      	ldr	r0, [pc, #4]	; (8001248 <vSET_6_D+0x8>)
 8001244:	f001 bd0a 	b.w	8002c5c <vSetBit>
 8001248:	24001655 	.word	0x24001655

0800124c <vSET_6_E>:
void vSET_6_E(){      vSetBit(&reg.E, 6);}
 800124c:	2106      	movs	r1, #6
 800124e:	4801      	ldr	r0, [pc, #4]	; (8001254 <vSET_6_E+0x8>)
 8001250:	f001 bd04 	b.w	8002c5c <vSetBit>
 8001254:	24001654 	.word	0x24001654

08001258 <vSET_6_H>:
void vSET_6_H(){      vSetBit(&reg.H, 6);}
 8001258:	2106      	movs	r1, #6
 800125a:	4801      	ldr	r0, [pc, #4]	; (8001260 <vSET_6_H+0x8>)
 800125c:	f001 bcfe 	b.w	8002c5c <vSetBit>
 8001260:	24001657 	.word	0x24001657

08001264 <vSET_6_L>:
void vSET_6_L(){      vSetBit(&reg.L, 6);}
 8001264:	2106      	movs	r1, #6
 8001266:	4801      	ldr	r0, [pc, #4]	; (800126c <vSET_6_L+0x8>)
 8001268:	f001 bcf8 	b.w	8002c5c <vSetBit>
 800126c:	24001656 	.word	0x24001656

08001270 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      vSetBit(&reg.A, 6);}
 8001270:	2106      	movs	r1, #6
 8001272:	4801      	ldr	r0, [pc, #4]	; (8001278 <vSET_6_A+0x8>)
 8001274:	f001 bcf2 	b.w	8002c5c <vSetBit>
 8001278:	24001651 	.word	0x24001651

0800127c <vSET_7_B>:
void vSET_7_B(){      vSetBit(&reg.B, 7);}
 800127c:	2107      	movs	r1, #7
 800127e:	4801      	ldr	r0, [pc, #4]	; (8001284 <vSET_7_B+0x8>)
 8001280:	f001 bcec 	b.w	8002c5c <vSetBit>
 8001284:	24001653 	.word	0x24001653

08001288 <vSET_7_C>:
void vSET_7_C(){      vSetBit(&reg.C, 7);}
 8001288:	2107      	movs	r1, #7
 800128a:	4801      	ldr	r0, [pc, #4]	; (8001290 <vSET_7_C+0x8>)
 800128c:	f001 bce6 	b.w	8002c5c <vSetBit>
 8001290:	24001652 	.word	0x24001652

08001294 <vSET_7_D>:
void vSET_7_D(){      vSetBit(&reg.D, 7);}
 8001294:	2107      	movs	r1, #7
 8001296:	4801      	ldr	r0, [pc, #4]	; (800129c <vSET_7_D+0x8>)
 8001298:	f001 bce0 	b.w	8002c5c <vSetBit>
 800129c:	24001655 	.word	0x24001655

080012a0 <vSET_7_E>:
void vSET_7_E(){      vSetBit(&reg.E, 7);}
 80012a0:	2107      	movs	r1, #7
 80012a2:	4801      	ldr	r0, [pc, #4]	; (80012a8 <vSET_7_E+0x8>)
 80012a4:	f001 bcda 	b.w	8002c5c <vSetBit>
 80012a8:	24001654 	.word	0x24001654

080012ac <vSET_7_H>:
void vSET_7_H(){      vSetBit(&reg.H, 7);}
 80012ac:	2107      	movs	r1, #7
 80012ae:	4801      	ldr	r0, [pc, #4]	; (80012b4 <vSET_7_H+0x8>)
 80012b0:	f001 bcd4 	b.w	8002c5c <vSetBit>
 80012b4:	24001657 	.word	0x24001657

080012b8 <vSET_7_L>:
void vSET_7_L(){      vSetBit(&reg.L, 7);}
 80012b8:	2107      	movs	r1, #7
 80012ba:	4801      	ldr	r0, [pc, #4]	; (80012c0 <vSET_7_L+0x8>)
 80012bc:	f001 bcce 	b.w	8002c5c <vSetBit>
 80012c0:	24001656 	.word	0x24001656

080012c4 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      vSetBit(&reg.A, 7);}
 80012c4:	2107      	movs	r1, #7
 80012c6:	4801      	ldr	r0, [pc, #4]	; (80012cc <vSET_7_A+0x8>)
 80012c8:	f001 bcc8 	b.w	8002c5c <vSetBit>
 80012cc:	24001651 	.word	0x24001651

080012d0 <vJR_NC_r8>:
void vJR_NC_r8(){     ucCustomDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d08      	ldr	r5, [pc, #32]	; (80012f4 <vJR_NC_r8+0x24>)
 80012d4:	462c      	mov	r4, r5
 80012d6:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 80012da:	3801      	subs	r0, #1
 80012dc:	b280      	uxth	r0, r0
 80012de:	f002 f9c9 	bl	8003674 <ucGBMemoryRead>
 80012e2:	4629      	mov	r1, r5
 80012e4:	4602      	mov	r2, r0
 80012e6:	4620      	mov	r0, r4
 80012e8:	f001 fdc2 	bl	8002e70 <vGBFunctionJR_NC>
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <vJR_NC_r8+0x28>)
 80012ee:	7018      	strb	r0, [r3, #0]
 80012f0:	bd38      	pop	{r3, r4, r5, pc}
 80012f2:	bf00      	nop
 80012f4:	24001650 	.word	0x24001650
 80012f8:	2400109c 	.word	0x2400109c

080012fc <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 80012fc:	4901      	ldr	r1, [pc, #4]	; (8001304 <vINC_HL+0x8>)
 80012fe:	88c8      	ldrh	r0, [r1, #6]
 8001300:	f001 bdc2 	b.w	8002e88 <vMemoryLocationINC>
 8001304:	24001650 	.word	0x24001650

08001308 <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 8001308:	4901      	ldr	r1, [pc, #4]	; (8001310 <vDEC_HL+0x8>)
 800130a:	88c8      	ldrh	r0, [r1, #6]
 800130c:	f001 bde6 	b.w	8002edc <vMemoryLocationDEC>
 8001310:	24001650 	.word	0x24001650

08001314 <vSCF>:
void vSCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); vSetBit(&reg.F, C_FLAG);}
 8001314:	b508      	push	{r3, lr}
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <vSCF+0x20>)
 8001318:	2106      	movs	r1, #6
 800131a:	f001 fca7 	bl	8002c6c <vResetBit>
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <vSCF+0x20>)
 8001320:	2105      	movs	r1, #5
 8001322:	f001 fca3 	bl	8002c6c <vResetBit>
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <vSCF+0x20>)
 8001328:	2104      	movs	r1, #4
 800132a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800132e:	f001 bc95 	b.w	8002c5c <vSetBit>
 8001332:	bf00      	nop
 8001334:	24001650 	.word	0x24001650

08001338 <vRES_0_B>:
void vRES_0_B(){      vResetBit(&reg.B, 0);}
 8001338:	2100      	movs	r1, #0
 800133a:	4801      	ldr	r0, [pc, #4]	; (8001340 <vRES_0_B+0x8>)
 800133c:	f001 bc96 	b.w	8002c6c <vResetBit>
 8001340:	24001653 	.word	0x24001653

08001344 <vRES_0_C>:
void vRES_0_C(){      vResetBit(&reg.C, 0);}
 8001344:	2100      	movs	r1, #0
 8001346:	4801      	ldr	r0, [pc, #4]	; (800134c <vRES_0_C+0x8>)
 8001348:	f001 bc90 	b.w	8002c6c <vResetBit>
 800134c:	24001652 	.word	0x24001652

08001350 <vRES_0_D>:
void vRES_0_D(){      vResetBit(&reg.D, 0);}
 8001350:	2100      	movs	r1, #0
 8001352:	4801      	ldr	r0, [pc, #4]	; (8001358 <vRES_0_D+0x8>)
 8001354:	f001 bc8a 	b.w	8002c6c <vResetBit>
 8001358:	24001655 	.word	0x24001655

0800135c <vRES_0_E>:
void vRES_0_E(){      vResetBit(&reg.E, 0);}
 800135c:	2100      	movs	r1, #0
 800135e:	4801      	ldr	r0, [pc, #4]	; (8001364 <vRES_0_E+0x8>)
 8001360:	f001 bc84 	b.w	8002c6c <vResetBit>
 8001364:	24001654 	.word	0x24001654

08001368 <vRES_0_H>:
void vRES_0_H(){      vResetBit(&reg.H, 0);}
 8001368:	2100      	movs	r1, #0
 800136a:	4801      	ldr	r0, [pc, #4]	; (8001370 <vRES_0_H+0x8>)
 800136c:	f001 bc7e 	b.w	8002c6c <vResetBit>
 8001370:	24001657 	.word	0x24001657

08001374 <vRES_0_L>:
void vRES_0_L(){      vResetBit(&reg.L, 0);}
 8001374:	2100      	movs	r1, #0
 8001376:	4801      	ldr	r0, [pc, #4]	; (800137c <vRES_0_L+0x8>)
 8001378:	f001 bc78 	b.w	8002c6c <vResetBit>
 800137c:	24001656 	.word	0x24001656

08001380 <vRES_0_A>:
void vRES_0_A(){      vResetBit(&reg.A, 0);}
 8001380:	2100      	movs	r1, #0
 8001382:	4801      	ldr	r0, [pc, #4]	; (8001388 <vRES_0_A+0x8>)
 8001384:	f001 bc72 	b.w	8002c6c <vResetBit>
 8001388:	24001651 	.word	0x24001651

0800138c <vRES_1_B>:
void vRES_1_B(){      vResetBit(&reg.B, 1);}
 800138c:	2101      	movs	r1, #1
 800138e:	4801      	ldr	r0, [pc, #4]	; (8001394 <vRES_1_B+0x8>)
 8001390:	f001 bc6c 	b.w	8002c6c <vResetBit>
 8001394:	24001653 	.word	0x24001653

08001398 <vRES_1_C>:
void vRES_1_C(){      vResetBit(&reg.C, 1);}
 8001398:	2101      	movs	r1, #1
 800139a:	4801      	ldr	r0, [pc, #4]	; (80013a0 <vRES_1_C+0x8>)
 800139c:	f001 bc66 	b.w	8002c6c <vResetBit>
 80013a0:	24001652 	.word	0x24001652

080013a4 <vRES_1_D>:
void vRES_1_D(){      vResetBit(&reg.D, 1);}
 80013a4:	2101      	movs	r1, #1
 80013a6:	4801      	ldr	r0, [pc, #4]	; (80013ac <vRES_1_D+0x8>)
 80013a8:	f001 bc60 	b.w	8002c6c <vResetBit>
 80013ac:	24001655 	.word	0x24001655

080013b0 <vRES_1_E>:
void vRES_1_E(){      vResetBit(&reg.E, 1);}
 80013b0:	2101      	movs	r1, #1
 80013b2:	4801      	ldr	r0, [pc, #4]	; (80013b8 <vRES_1_E+0x8>)
 80013b4:	f001 bc5a 	b.w	8002c6c <vResetBit>
 80013b8:	24001654 	.word	0x24001654

080013bc <vRES_1_H>:
void vRES_1_H(){      vResetBit(&reg.H, 1);}
 80013bc:	2101      	movs	r1, #1
 80013be:	4801      	ldr	r0, [pc, #4]	; (80013c4 <vRES_1_H+0x8>)
 80013c0:	f001 bc54 	b.w	8002c6c <vResetBit>
 80013c4:	24001657 	.word	0x24001657

080013c8 <vRES_1_L>:
void vRES_1_L(){      vResetBit(&reg.L, 1);}
 80013c8:	2101      	movs	r1, #1
 80013ca:	4801      	ldr	r0, [pc, #4]	; (80013d0 <vRES_1_L+0x8>)
 80013cc:	f001 bc4e 	b.w	8002c6c <vResetBit>
 80013d0:	24001656 	.word	0x24001656

080013d4 <vRES_1_A>:
void vRES_1_A(){      vResetBit(&reg.A, 1);}
 80013d4:	2101      	movs	r1, #1
 80013d6:	4801      	ldr	r0, [pc, #4]	; (80013dc <vRES_1_A+0x8>)
 80013d8:	f001 bc48 	b.w	8002c6c <vResetBit>
 80013dc:	24001651 	.word	0x24001651

080013e0 <vRES_2_B>:
void vRES_2_B(){      vResetBit(&reg.B, 2);}
 80013e0:	2102      	movs	r1, #2
 80013e2:	4801      	ldr	r0, [pc, #4]	; (80013e8 <vRES_2_B+0x8>)
 80013e4:	f001 bc42 	b.w	8002c6c <vResetBit>
 80013e8:	24001653 	.word	0x24001653

080013ec <vRES_2_C>:
void vRES_2_C(){      vResetBit(&reg.C, 2);}
 80013ec:	2102      	movs	r1, #2
 80013ee:	4801      	ldr	r0, [pc, #4]	; (80013f4 <vRES_2_C+0x8>)
 80013f0:	f001 bc3c 	b.w	8002c6c <vResetBit>
 80013f4:	24001652 	.word	0x24001652

080013f8 <vRES_2_D>:
void vRES_2_D(){      vResetBit(&reg.D, 2);}
 80013f8:	2102      	movs	r1, #2
 80013fa:	4801      	ldr	r0, [pc, #4]	; (8001400 <vRES_2_D+0x8>)
 80013fc:	f001 bc36 	b.w	8002c6c <vResetBit>
 8001400:	24001655 	.word	0x24001655

08001404 <vRES_2_E>:
void vRES_2_E(){      vResetBit(&reg.E, 2);}
 8001404:	2102      	movs	r1, #2
 8001406:	4801      	ldr	r0, [pc, #4]	; (800140c <vRES_2_E+0x8>)
 8001408:	f001 bc30 	b.w	8002c6c <vResetBit>
 800140c:	24001654 	.word	0x24001654

08001410 <vRES_2_H>:
void vRES_2_H(){      vResetBit(&reg.H, 2);}
 8001410:	2102      	movs	r1, #2
 8001412:	4801      	ldr	r0, [pc, #4]	; (8001418 <vRES_2_H+0x8>)
 8001414:	f001 bc2a 	b.w	8002c6c <vResetBit>
 8001418:	24001657 	.word	0x24001657

0800141c <vRES_2_L>:
void vRES_2_L(){      vResetBit(&reg.L, 2);}
 800141c:	2102      	movs	r1, #2
 800141e:	4801      	ldr	r0, [pc, #4]	; (8001424 <vRES_2_L+0x8>)
 8001420:	f001 bc24 	b.w	8002c6c <vResetBit>
 8001424:	24001656 	.word	0x24001656

08001428 <vRES_2_A>:
void vRES_2_A(){      vResetBit(&reg.A, 2);}
 8001428:	2102      	movs	r1, #2
 800142a:	4801      	ldr	r0, [pc, #4]	; (8001430 <vRES_2_A+0x8>)
 800142c:	f001 bc1e 	b.w	8002c6c <vResetBit>
 8001430:	24001651 	.word	0x24001651

08001434 <vRES_3_B>:
void vRES_3_B(){      vResetBit(&reg.B, 3);}
 8001434:	2103      	movs	r1, #3
 8001436:	4801      	ldr	r0, [pc, #4]	; (800143c <vRES_3_B+0x8>)
 8001438:	f001 bc18 	b.w	8002c6c <vResetBit>
 800143c:	24001653 	.word	0x24001653

08001440 <vRES_3_C>:
void vRES_3_C(){      vResetBit(&reg.C, 3);}
 8001440:	2103      	movs	r1, #3
 8001442:	4801      	ldr	r0, [pc, #4]	; (8001448 <vRES_3_C+0x8>)
 8001444:	f001 bc12 	b.w	8002c6c <vResetBit>
 8001448:	24001652 	.word	0x24001652

0800144c <vRES_3_D>:
void vRES_3_D(){      vResetBit(&reg.D, 3);}
 800144c:	2103      	movs	r1, #3
 800144e:	4801      	ldr	r0, [pc, #4]	; (8001454 <vRES_3_D+0x8>)
 8001450:	f001 bc0c 	b.w	8002c6c <vResetBit>
 8001454:	24001655 	.word	0x24001655

08001458 <vRES_3_E>:
void vRES_3_E(){      vResetBit(&reg.E, 3);}
 8001458:	2103      	movs	r1, #3
 800145a:	4801      	ldr	r0, [pc, #4]	; (8001460 <vRES_3_E+0x8>)
 800145c:	f001 bc06 	b.w	8002c6c <vResetBit>
 8001460:	24001654 	.word	0x24001654

08001464 <vRES_3_H>:
void vRES_3_H(){      vResetBit(&reg.H, 3);}
 8001464:	2103      	movs	r1, #3
 8001466:	4801      	ldr	r0, [pc, #4]	; (800146c <vRES_3_H+0x8>)
 8001468:	f001 bc00 	b.w	8002c6c <vResetBit>
 800146c:	24001657 	.word	0x24001657

08001470 <vRES_3_L>:
void vRES_3_L(){      vResetBit(&reg.L, 3);}
 8001470:	2103      	movs	r1, #3
 8001472:	4801      	ldr	r0, [pc, #4]	; (8001478 <vRES_3_L+0x8>)
 8001474:	f001 bbfa 	b.w	8002c6c <vResetBit>
 8001478:	24001656 	.word	0x24001656

0800147c <vRES_3_A>:
void vRES_3_A(){      vResetBit(&reg.A, 3);}
 800147c:	2103      	movs	r1, #3
 800147e:	4801      	ldr	r0, [pc, #4]	; (8001484 <vRES_3_A+0x8>)
 8001480:	f001 bbf4 	b.w	8002c6c <vResetBit>
 8001484:	24001651 	.word	0x24001651

08001488 <vRES_4_B>:
void vRES_4_B(){      vResetBit(&reg.B, 4);}
 8001488:	2104      	movs	r1, #4
 800148a:	4801      	ldr	r0, [pc, #4]	; (8001490 <vRES_4_B+0x8>)
 800148c:	f001 bbee 	b.w	8002c6c <vResetBit>
 8001490:	24001653 	.word	0x24001653

08001494 <vRES_4_C>:
void vRES_4_C(){      vResetBit(&reg.C, 4);}
 8001494:	2104      	movs	r1, #4
 8001496:	4801      	ldr	r0, [pc, #4]	; (800149c <vRES_4_C+0x8>)
 8001498:	f001 bbe8 	b.w	8002c6c <vResetBit>
 800149c:	24001652 	.word	0x24001652

080014a0 <vRES_4_D>:
void vRES_4_D(){      vResetBit(&reg.D, 4);}
 80014a0:	2104      	movs	r1, #4
 80014a2:	4801      	ldr	r0, [pc, #4]	; (80014a8 <vRES_4_D+0x8>)
 80014a4:	f001 bbe2 	b.w	8002c6c <vResetBit>
 80014a8:	24001655 	.word	0x24001655

080014ac <vRES_4_E>:
void vRES_4_E(){      vResetBit(&reg.E, 4);}
 80014ac:	2104      	movs	r1, #4
 80014ae:	4801      	ldr	r0, [pc, #4]	; (80014b4 <vRES_4_E+0x8>)
 80014b0:	f001 bbdc 	b.w	8002c6c <vResetBit>
 80014b4:	24001654 	.word	0x24001654

080014b8 <vRES_4_H>:
void vRES_4_H(){      vResetBit(&reg.H, 4);}
 80014b8:	2104      	movs	r1, #4
 80014ba:	4801      	ldr	r0, [pc, #4]	; (80014c0 <vRES_4_H+0x8>)
 80014bc:	f001 bbd6 	b.w	8002c6c <vResetBit>
 80014c0:	24001657 	.word	0x24001657

080014c4 <vRES_4_L>:
void vRES_4_L(){      vResetBit(&reg.L, 4);}
 80014c4:	2104      	movs	r1, #4
 80014c6:	4801      	ldr	r0, [pc, #4]	; (80014cc <vRES_4_L+0x8>)
 80014c8:	f001 bbd0 	b.w	8002c6c <vResetBit>
 80014cc:	24001656 	.word	0x24001656

080014d0 <vRES_4_A>:
void vRES_4_A(){      vResetBit(&reg.A, 4);}
 80014d0:	2104      	movs	r1, #4
 80014d2:	4801      	ldr	r0, [pc, #4]	; (80014d8 <vRES_4_A+0x8>)
 80014d4:	f001 bbca 	b.w	8002c6c <vResetBit>
 80014d8:	24001651 	.word	0x24001651

080014dc <vRES_5_B>:
void vRES_5_B(){      vResetBit(&reg.B, 5);}
 80014dc:	2105      	movs	r1, #5
 80014de:	4801      	ldr	r0, [pc, #4]	; (80014e4 <vRES_5_B+0x8>)
 80014e0:	f001 bbc4 	b.w	8002c6c <vResetBit>
 80014e4:	24001653 	.word	0x24001653

080014e8 <vRES_5_C>:
void vRES_5_C(){      vResetBit(&reg.C, 5);}
 80014e8:	2105      	movs	r1, #5
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <vRES_5_C+0x8>)
 80014ec:	f001 bbbe 	b.w	8002c6c <vResetBit>
 80014f0:	24001652 	.word	0x24001652

080014f4 <vRES_5_D>:
void vRES_5_D(){      vResetBit(&reg.D, 5);}
 80014f4:	2105      	movs	r1, #5
 80014f6:	4801      	ldr	r0, [pc, #4]	; (80014fc <vRES_5_D+0x8>)
 80014f8:	f001 bbb8 	b.w	8002c6c <vResetBit>
 80014fc:	24001655 	.word	0x24001655

08001500 <vRES_5_E>:
void vRES_5_E(){      vResetBit(&reg.E, 5);}
 8001500:	2105      	movs	r1, #5
 8001502:	4801      	ldr	r0, [pc, #4]	; (8001508 <vRES_5_E+0x8>)
 8001504:	f001 bbb2 	b.w	8002c6c <vResetBit>
 8001508:	24001654 	.word	0x24001654

0800150c <vRES_5_H>:
void vRES_5_H(){      vResetBit(&reg.H, 5);}
 800150c:	2105      	movs	r1, #5
 800150e:	4801      	ldr	r0, [pc, #4]	; (8001514 <vRES_5_H+0x8>)
 8001510:	f001 bbac 	b.w	8002c6c <vResetBit>
 8001514:	24001657 	.word	0x24001657

08001518 <vRES_5_L>:
void vRES_5_L(){      vResetBit(&reg.L, 5);}
 8001518:	2105      	movs	r1, #5
 800151a:	4801      	ldr	r0, [pc, #4]	; (8001520 <vRES_5_L+0x8>)
 800151c:	f001 bba6 	b.w	8002c6c <vResetBit>
 8001520:	24001656 	.word	0x24001656

08001524 <vRES_5_A>:
void vRES_5_A(){      vResetBit(&reg.A, 5);}
 8001524:	2105      	movs	r1, #5
 8001526:	4801      	ldr	r0, [pc, #4]	; (800152c <vRES_5_A+0x8>)
 8001528:	f001 bba0 	b.w	8002c6c <vResetBit>
 800152c:	24001651 	.word	0x24001651

08001530 <vRES_6_B>:
void vRES_6_B(){      vResetBit(&reg.B, 6);}
 8001530:	2106      	movs	r1, #6
 8001532:	4801      	ldr	r0, [pc, #4]	; (8001538 <vRES_6_B+0x8>)
 8001534:	f001 bb9a 	b.w	8002c6c <vResetBit>
 8001538:	24001653 	.word	0x24001653

0800153c <vRES_6_C>:
void vRES_6_C(){      vResetBit(&reg.C, 6);}
 800153c:	2106      	movs	r1, #6
 800153e:	4801      	ldr	r0, [pc, #4]	; (8001544 <vRES_6_C+0x8>)
 8001540:	f001 bb94 	b.w	8002c6c <vResetBit>
 8001544:	24001652 	.word	0x24001652

08001548 <vRES_6_D>:
void vRES_6_D(){      vResetBit(&reg.D, 6);}
 8001548:	2106      	movs	r1, #6
 800154a:	4801      	ldr	r0, [pc, #4]	; (8001550 <vRES_6_D+0x8>)
 800154c:	f001 bb8e 	b.w	8002c6c <vResetBit>
 8001550:	24001655 	.word	0x24001655

08001554 <vRES_6_E>:
void vRES_6_E(){      vResetBit(&reg.E, 6);}
 8001554:	2106      	movs	r1, #6
 8001556:	4801      	ldr	r0, [pc, #4]	; (800155c <vRES_6_E+0x8>)
 8001558:	f001 bb88 	b.w	8002c6c <vResetBit>
 800155c:	24001654 	.word	0x24001654

08001560 <vRES_6_H>:
void vRES_6_H(){      vResetBit(&reg.H, 6);}
 8001560:	2106      	movs	r1, #6
 8001562:	4801      	ldr	r0, [pc, #4]	; (8001568 <vRES_6_H+0x8>)
 8001564:	f001 bb82 	b.w	8002c6c <vResetBit>
 8001568:	24001657 	.word	0x24001657

0800156c <vRES_6_L>:
void vRES_6_L(){      vResetBit(&reg.L, 6);}
 800156c:	2106      	movs	r1, #6
 800156e:	4801      	ldr	r0, [pc, #4]	; (8001574 <vRES_6_L+0x8>)
 8001570:	f001 bb7c 	b.w	8002c6c <vResetBit>
 8001574:	24001656 	.word	0x24001656

08001578 <vRES_6_A>:
void vRES_6_A(){      vResetBit(&reg.A, 6);}
 8001578:	2106      	movs	r1, #6
 800157a:	4801      	ldr	r0, [pc, #4]	; (8001580 <vRES_6_A+0x8>)
 800157c:	f001 bb76 	b.w	8002c6c <vResetBit>
 8001580:	24001651 	.word	0x24001651

08001584 <vRES_7_B>:
void vRES_7_B(){      vResetBit(&reg.B, 7);}
 8001584:	2107      	movs	r1, #7
 8001586:	4801      	ldr	r0, [pc, #4]	; (800158c <vRES_7_B+0x8>)
 8001588:	f001 bb70 	b.w	8002c6c <vResetBit>
 800158c:	24001653 	.word	0x24001653

08001590 <vRES_7_C>:
void vRES_7_C(){      vResetBit(&reg.C, 7);}
 8001590:	2107      	movs	r1, #7
 8001592:	4801      	ldr	r0, [pc, #4]	; (8001598 <vRES_7_C+0x8>)
 8001594:	f001 bb6a 	b.w	8002c6c <vResetBit>
 8001598:	24001652 	.word	0x24001652

0800159c <vRES_7_D>:
void vRES_7_D(){      vResetBit(&reg.D, 7);}
 800159c:	2107      	movs	r1, #7
 800159e:	4801      	ldr	r0, [pc, #4]	; (80015a4 <vRES_7_D+0x8>)
 80015a0:	f001 bb64 	b.w	8002c6c <vResetBit>
 80015a4:	24001655 	.word	0x24001655

080015a8 <vRES_7_E>:
void vRES_7_E(){      vResetBit(&reg.E, 7);}
 80015a8:	2107      	movs	r1, #7
 80015aa:	4801      	ldr	r0, [pc, #4]	; (80015b0 <vRES_7_E+0x8>)
 80015ac:	f001 bb5e 	b.w	8002c6c <vResetBit>
 80015b0:	24001654 	.word	0x24001654

080015b4 <vRES_7_H>:
void vRES_7_H(){      vResetBit(&reg.H, 7);}
 80015b4:	2107      	movs	r1, #7
 80015b6:	4801      	ldr	r0, [pc, #4]	; (80015bc <vRES_7_H+0x8>)
 80015b8:	f001 bb58 	b.w	8002c6c <vResetBit>
 80015bc:	24001657 	.word	0x24001657

080015c0 <vRES_7_L>:
void vRES_7_L(){      vResetBit(&reg.L, 7);}
 80015c0:	2107      	movs	r1, #7
 80015c2:	4801      	ldr	r0, [pc, #4]	; (80015c8 <vRES_7_L+0x8>)
 80015c4:	f001 bb52 	b.w	8002c6c <vResetBit>
 80015c8:	24001656 	.word	0x24001656

080015cc <vRES_7_A>:
void vRES_7_A(){      vResetBit(&reg.A, 7);}
 80015cc:	2107      	movs	r1, #7
 80015ce:	4801      	ldr	r0, [pc, #4]	; (80015d4 <vRES_7_A+0x8>)
 80015d0:	f001 bb4c 	b.w	8002c6c <vResetBit>
 80015d4:	24001651 	.word	0x24001651

080015d8 <vJR_C_r8>:
void vJR_C_r8(){      ucCustomDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80015d8:	b538      	push	{r3, r4, r5, lr}
 80015da:	4d08      	ldr	r5, [pc, #32]	; (80015fc <vJR_C_r8+0x24>)
 80015dc:	462c      	mov	r4, r5
 80015de:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 80015e2:	3801      	subs	r0, #1
 80015e4:	b280      	uxth	r0, r0
 80015e6:	f002 f845 	bl	8003674 <ucGBMemoryRead>
 80015ea:	4629      	mov	r1, r5
 80015ec:	4602      	mov	r2, r0
 80015ee:	4620      	mov	r0, r4
 80015f0:	f001 fc9c 	bl	8002f2c <vGBFunctionJR_C>
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <vJR_C_r8+0x28>)
 80015f6:	7018      	strb	r0, [r3, #0]
 80015f8:	bd38      	pop	{r3, r4, r5, pc}
 80015fa:	bf00      	nop
 80015fc:	24001650 	.word	0x24001650
 8001600:	2400109c 	.word	0x2400109c

08001604 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001604:	4902      	ldr	r1, [pc, #8]	; (8001610 <vADD_A_B+0xc>)
 8001606:	78ca      	ldrb	r2, [r1, #3]
 8001608:	1c48      	adds	r0, r1, #1
 800160a:	f001 bc9b 	b.w	8002f44 <vGBFunctionADD>
 800160e:	bf00      	nop
 8001610:	24001650 	.word	0x24001650

08001614 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001614:	4902      	ldr	r1, [pc, #8]	; (8001620 <vADD_A_C+0xc>)
 8001616:	788a      	ldrb	r2, [r1, #2]
 8001618:	1c48      	adds	r0, r1, #1
 800161a:	f001 bc93 	b.w	8002f44 <vGBFunctionADD>
 800161e:	bf00      	nop
 8001620:	24001650 	.word	0x24001650

08001624 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 8001624:	4902      	ldr	r1, [pc, #8]	; (8001630 <vADD_A_D+0xc>)
 8001626:	794a      	ldrb	r2, [r1, #5]
 8001628:	1c48      	adds	r0, r1, #1
 800162a:	f001 bc8b 	b.w	8002f44 <vGBFunctionADD>
 800162e:	bf00      	nop
 8001630:	24001650 	.word	0x24001650

08001634 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADD_A_E+0xc>)
 8001636:	790a      	ldrb	r2, [r1, #4]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc83 	b.w	8002f44 <vGBFunctionADD>
 800163e:	bf00      	nop
 8001640:	24001650 	.word	0x24001650

08001644 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADD_A_H+0xc>)
 8001646:	79ca      	ldrb	r2, [r1, #7]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc7b 	b.w	8002f44 <vGBFunctionADD>
 800164e:	bf00      	nop
 8001650:	24001650 	.word	0x24001650

08001654 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADD_A_L+0xc>)
 8001656:	798a      	ldrb	r2, [r1, #6]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc73 	b.w	8002f44 <vGBFunctionADD>
 800165e:	bf00      	nop
 8001660:	24001650 	.word	0x24001650

08001664 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001664:	b510      	push	{r4, lr}
 8001666:	4c05      	ldr	r4, [pc, #20]	; (800167c <vADD_A_HL+0x18>)
 8001668:	88e0      	ldrh	r0, [r4, #6]
 800166a:	f002 f803 	bl	8003674 <ucGBMemoryRead>
 800166e:	4621      	mov	r1, r4
 8001670:	4602      	mov	r2, r0
 8001672:	1c60      	adds	r0, r4, #1
 8001674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001678:	f001 bc64 	b.w	8002f44 <vGBFunctionADD>
 800167c:	24001650 	.word	0x24001650

08001680 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <vADD_A_A+0xc>)
 8001682:	4601      	mov	r1, r0
 8001684:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001688:	f001 bc5c 	b.w	8002f44 <vGBFunctionADD>
 800168c:	24001650 	.word	0x24001650

08001690 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001690:	b510      	push	{r4, lr}
 8001692:	4c06      	ldr	r4, [pc, #24]	; (80016ac <vADD_A_d8+0x1c>)
 8001694:	8960      	ldrh	r0, [r4, #10]
 8001696:	3801      	subs	r0, #1
 8001698:	b280      	uxth	r0, r0
 800169a:	f001 ffeb 	bl	8003674 <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc4c 	b.w	8002f44 <vGBFunctionADD>
 80016ac:	24001650 	.word	0x24001650

080016b0 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 80016b0:	4902      	ldr	r1, [pc, #8]	; (80016bc <vADC_A_B+0xc>)
 80016b2:	78ca      	ldrb	r2, [r1, #3]
 80016b4:	1c48      	adds	r0, r1, #1
 80016b6:	f001 bc73 	b.w	8002fa0 <vGBFunctionADC>
 80016ba:	bf00      	nop
 80016bc:	24001650 	.word	0x24001650

080016c0 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 80016c0:	4902      	ldr	r1, [pc, #8]	; (80016cc <vADC_A_C+0xc>)
 80016c2:	788a      	ldrb	r2, [r1, #2]
 80016c4:	1c48      	adds	r0, r1, #1
 80016c6:	f001 bc6b 	b.w	8002fa0 <vGBFunctionADC>
 80016ca:	bf00      	nop
 80016cc:	24001650 	.word	0x24001650

080016d0 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 80016d0:	4902      	ldr	r1, [pc, #8]	; (80016dc <vADC_A_D+0xc>)
 80016d2:	794a      	ldrb	r2, [r1, #5]
 80016d4:	1c48      	adds	r0, r1, #1
 80016d6:	f001 bc63 	b.w	8002fa0 <vGBFunctionADC>
 80016da:	bf00      	nop
 80016dc:	24001650 	.word	0x24001650

080016e0 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vADC_A_E+0xc>)
 80016e2:	790a      	ldrb	r2, [r1, #4]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc5b 	b.w	8002fa0 <vGBFunctionADC>
 80016ea:	bf00      	nop
 80016ec:	24001650 	.word	0x24001650

080016f0 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vADC_A_H+0xc>)
 80016f2:	79ca      	ldrb	r2, [r1, #7]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc53 	b.w	8002fa0 <vGBFunctionADC>
 80016fa:	bf00      	nop
 80016fc:	24001650 	.word	0x24001650

08001700 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vADC_A_L+0xc>)
 8001702:	798a      	ldrb	r2, [r1, #6]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc4b 	b.w	8002fa0 <vGBFunctionADC>
 800170a:	bf00      	nop
 800170c:	24001650 	.word	0x24001650

08001710 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001710:	b510      	push	{r4, lr}
 8001712:	4c05      	ldr	r4, [pc, #20]	; (8001728 <vADC_A_HL+0x18>)
 8001714:	88e0      	ldrh	r0, [r4, #6]
 8001716:	f001 ffad 	bl	8003674 <ucGBMemoryRead>
 800171a:	4621      	mov	r1, r4
 800171c:	4602      	mov	r2, r0
 800171e:	1c60      	adds	r0, r4, #1
 8001720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001724:	f001 bc3c 	b.w	8002fa0 <vGBFunctionADC>
 8001728:	24001650 	.word	0x24001650

0800172c <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <vADC_A_A+0xc>)
 800172e:	4601      	mov	r1, r0
 8001730:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001734:	f001 bc34 	b.w	8002fa0 <vGBFunctionADC>
 8001738:	24001650 	.word	0x24001650

0800173c <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800173c:	b510      	push	{r4, lr}
 800173e:	4c06      	ldr	r4, [pc, #24]	; (8001758 <vADC_A_d8+0x1c>)
 8001740:	8960      	ldrh	r0, [r4, #10]
 8001742:	3801      	subs	r0, #1
 8001744:	b280      	uxth	r0, r0
 8001746:	f001 ff95 	bl	8003674 <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bc24 	b.w	8002fa0 <vGBFunctionADC>
 8001758:	24001650 	.word	0x24001650

0800175c <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 800175c:	4902      	ldr	r1, [pc, #8]	; (8001768 <vSUB_B+0xc>)
 800175e:	78ca      	ldrb	r2, [r1, #3]
 8001760:	1c48      	adds	r0, r1, #1
 8001762:	f001 bc4f 	b.w	8003004 <vGBFunctionSUB>
 8001766:	bf00      	nop
 8001768:	24001650 	.word	0x24001650

0800176c <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 800176c:	4902      	ldr	r1, [pc, #8]	; (8001778 <vSUB_C+0xc>)
 800176e:	788a      	ldrb	r2, [r1, #2]
 8001770:	1c48      	adds	r0, r1, #1
 8001772:	f001 bc47 	b.w	8003004 <vGBFunctionSUB>
 8001776:	bf00      	nop
 8001778:	24001650 	.word	0x24001650

0800177c <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 800177c:	4902      	ldr	r1, [pc, #8]	; (8001788 <vSUB_D+0xc>)
 800177e:	794a      	ldrb	r2, [r1, #5]
 8001780:	1c48      	adds	r0, r1, #1
 8001782:	f001 bc3f 	b.w	8003004 <vGBFunctionSUB>
 8001786:	bf00      	nop
 8001788:	24001650 	.word	0x24001650

0800178c <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSUB_E+0xc>)
 800178e:	790a      	ldrb	r2, [r1, #4]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bc37 	b.w	8003004 <vGBFunctionSUB>
 8001796:	bf00      	nop
 8001798:	24001650 	.word	0x24001650

0800179c <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSUB_H+0xc>)
 800179e:	79ca      	ldrb	r2, [r1, #7]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bc2f 	b.w	8003004 <vGBFunctionSUB>
 80017a6:	bf00      	nop
 80017a8:	24001650 	.word	0x24001650

080017ac <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSUB_L+0xc>)
 80017ae:	798a      	ldrb	r2, [r1, #6]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bc27 	b.w	8003004 <vGBFunctionSUB>
 80017b6:	bf00      	nop
 80017b8:	24001650 	.word	0x24001650

080017bc <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017bc:	b510      	push	{r4, lr}
 80017be:	4c05      	ldr	r4, [pc, #20]	; (80017d4 <vSUB_HL+0x18>)
 80017c0:	88e0      	ldrh	r0, [r4, #6]
 80017c2:	f001 ff57 	bl	8003674 <ucGBMemoryRead>
 80017c6:	4621      	mov	r1, r4
 80017c8:	4602      	mov	r2, r0
 80017ca:	1c60      	adds	r0, r4, #1
 80017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d0:	f001 bc18 	b.w	8003004 <vGBFunctionSUB>
 80017d4:	24001650 	.word	0x24001650

080017d8 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <vSUB_A+0xc>)
 80017da:	4601      	mov	r1, r0
 80017dc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80017e0:	f001 bc10 	b.w	8003004 <vGBFunctionSUB>
 80017e4:	24001650 	.word	0x24001650

080017e8 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80017e8:	b510      	push	{r4, lr}
 80017ea:	4c06      	ldr	r4, [pc, #24]	; (8001804 <vSUB_d8+0x1c>)
 80017ec:	8960      	ldrh	r0, [r4, #10]
 80017ee:	3801      	subs	r0, #1
 80017f0:	b280      	uxth	r0, r0
 80017f2:	f001 ff3f 	bl	8003674 <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bc00 	b.w	8003004 <vGBFunctionSUB>
 8001804:	24001650 	.word	0x24001650

08001808 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001808:	4902      	ldr	r1, [pc, #8]	; (8001814 <vSBC_A_B+0xc>)
 800180a:	78ca      	ldrb	r2, [r1, #3]
 800180c:	1c48      	adds	r0, r1, #1
 800180e:	f001 bc2f 	b.w	8003070 <vGBFunctionSBC>
 8001812:	bf00      	nop
 8001814:	24001650 	.word	0x24001650

08001818 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001818:	4902      	ldr	r1, [pc, #8]	; (8001824 <vSBC_A_C+0xc>)
 800181a:	788a      	ldrb	r2, [r1, #2]
 800181c:	1c48      	adds	r0, r1, #1
 800181e:	f001 bc27 	b.w	8003070 <vGBFunctionSBC>
 8001822:	bf00      	nop
 8001824:	24001650 	.word	0x24001650

08001828 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001828:	4902      	ldr	r1, [pc, #8]	; (8001834 <vSBC_A_D+0xc>)
 800182a:	794a      	ldrb	r2, [r1, #5]
 800182c:	1c48      	adds	r0, r1, #1
 800182e:	f001 bc1f 	b.w	8003070 <vGBFunctionSBC>
 8001832:	bf00      	nop
 8001834:	24001650 	.word	0x24001650

08001838 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vSBC_A_E+0xc>)
 800183a:	790a      	ldrb	r2, [r1, #4]
 800183c:	1c48      	adds	r0, r1, #1
 800183e:	f001 bc17 	b.w	8003070 <vGBFunctionSBC>
 8001842:	bf00      	nop
 8001844:	24001650 	.word	0x24001650

08001848 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vSBC_A_H+0xc>)
 800184a:	79ca      	ldrb	r2, [r1, #7]
 800184c:	1c48      	adds	r0, r1, #1
 800184e:	f001 bc0f 	b.w	8003070 <vGBFunctionSBC>
 8001852:	bf00      	nop
 8001854:	24001650 	.word	0x24001650

08001858 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vSBC_A_L+0xc>)
 800185a:	798a      	ldrb	r2, [r1, #6]
 800185c:	1c48      	adds	r0, r1, #1
 800185e:	f001 bc07 	b.w	8003070 <vGBFunctionSBC>
 8001862:	bf00      	nop
 8001864:	24001650 	.word	0x24001650

08001868 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001868:	b510      	push	{r4, lr}
 800186a:	4c05      	ldr	r4, [pc, #20]	; (8001880 <vSBC_A_HL+0x18>)
 800186c:	88e0      	ldrh	r0, [r4, #6]
 800186e:	f001 ff01 	bl	8003674 <ucGBMemoryRead>
 8001872:	4621      	mov	r1, r4
 8001874:	4602      	mov	r2, r0
 8001876:	1c60      	adds	r0, r4, #1
 8001878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800187c:	f001 bbf8 	b.w	8003070 <vGBFunctionSBC>
 8001880:	24001650 	.word	0x24001650

08001884 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <vSBC_A_A+0xc>)
 8001886:	4601      	mov	r1, r0
 8001888:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800188c:	f001 bbf0 	b.w	8003070 <vGBFunctionSBC>
 8001890:	24001650 	.word	0x24001650

08001894 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001894:	b510      	push	{r4, lr}
 8001896:	4c06      	ldr	r4, [pc, #24]	; (80018b0 <vSBC_A_d8+0x1c>)
 8001898:	8960      	ldrh	r0, [r4, #10]
 800189a:	3801      	subs	r0, #1
 800189c:	b280      	uxth	r0, r0
 800189e:	f001 fee9 	bl	8003674 <ucGBMemoryRead>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4602      	mov	r2, r0
 80018a6:	1c60      	adds	r0, r4, #1
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f001 bbe0 	b.w	8003070 <vGBFunctionSBC>
 80018b0:	24001650 	.word	0x24001650

080018b4 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 80018b4:	4902      	ldr	r1, [pc, #8]	; (80018c0 <vCP_B+0xc>)
 80018b6:	78ca      	ldrb	r2, [r1, #3]
 80018b8:	7848      	ldrb	r0, [r1, #1]
 80018ba:	f001 bc11 	b.w	80030e0 <vGBFunctionCP>
 80018be:	bf00      	nop
 80018c0:	24001650 	.word	0x24001650

080018c4 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 80018c4:	4902      	ldr	r1, [pc, #8]	; (80018d0 <vCP_C+0xc>)
 80018c6:	788a      	ldrb	r2, [r1, #2]
 80018c8:	7848      	ldrb	r0, [r1, #1]
 80018ca:	f001 bc09 	b.w	80030e0 <vGBFunctionCP>
 80018ce:	bf00      	nop
 80018d0:	24001650 	.word	0x24001650

080018d4 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 80018d4:	4902      	ldr	r1, [pc, #8]	; (80018e0 <vCP_D+0xc>)
 80018d6:	794a      	ldrb	r2, [r1, #5]
 80018d8:	7848      	ldrb	r0, [r1, #1]
 80018da:	f001 bc01 	b.w	80030e0 <vGBFunctionCP>
 80018de:	bf00      	nop
 80018e0:	24001650 	.word	0x24001650

080018e4 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 80018e4:	4902      	ldr	r1, [pc, #8]	; (80018f0 <vCP_E+0xc>)
 80018e6:	790a      	ldrb	r2, [r1, #4]
 80018e8:	7848      	ldrb	r0, [r1, #1]
 80018ea:	f001 bbf9 	b.w	80030e0 <vGBFunctionCP>
 80018ee:	bf00      	nop
 80018f0:	24001650 	.word	0x24001650

080018f4 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 80018f4:	4902      	ldr	r1, [pc, #8]	; (8001900 <vCP_H+0xc>)
 80018f6:	79ca      	ldrb	r2, [r1, #7]
 80018f8:	7848      	ldrb	r0, [r1, #1]
 80018fa:	f001 bbf1 	b.w	80030e0 <vGBFunctionCP>
 80018fe:	bf00      	nop
 8001900:	24001650 	.word	0x24001650

08001904 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001904:	4902      	ldr	r1, [pc, #8]	; (8001910 <vCP_L+0xc>)
 8001906:	798a      	ldrb	r2, [r1, #6]
 8001908:	7848      	ldrb	r0, [r1, #1]
 800190a:	f001 bbe9 	b.w	80030e0 <vGBFunctionCP>
 800190e:	bf00      	nop
 8001910:	24001650 	.word	0x24001650

08001914 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4c06      	ldr	r4, [pc, #24]	; (8001930 <vCP_HL+0x1c>)
 8001918:	7865      	ldrb	r5, [r4, #1]
 800191a:	88e0      	ldrh	r0, [r4, #6]
 800191c:	f001 feaa 	bl	8003674 <ucGBMemoryRead>
 8001920:	4621      	mov	r1, r4
 8001922:	4602      	mov	r2, r0
 8001924:	4628      	mov	r0, r5
 8001926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800192a:	f001 bbd9 	b.w	80030e0 <vGBFunctionCP>
 800192e:	bf00      	nop
 8001930:	24001650 	.word	0x24001650

08001934 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <vCP_A+0xc>)
 8001936:	784a      	ldrb	r2, [r1, #1]
 8001938:	4610      	mov	r0, r2
 800193a:	f001 bbd1 	b.w	80030e0 <vGBFunctionCP>
 800193e:	bf00      	nop
 8001940:	24001650 	.word	0x24001650

08001944 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	4c07      	ldr	r4, [pc, #28]	; (8001964 <vCP_d8+0x20>)
 8001948:	8960      	ldrh	r0, [r4, #10]
 800194a:	7865      	ldrb	r5, [r4, #1]
 800194c:	3801      	subs	r0, #1
 800194e:	b280      	uxth	r0, r0
 8001950:	f001 fe90 	bl	8003674 <ucGBMemoryRead>
 8001954:	4621      	mov	r1, r4
 8001956:	4602      	mov	r2, r0
 8001958:	4628      	mov	r0, r5
 800195a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195e:	f001 bbbf 	b.w	80030e0 <vGBFunctionCP>
 8001962:	bf00      	nop
 8001964:	24001650 	.word	0x24001650

08001968 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 8001968:	4901      	ldr	r1, [pc, #4]	; (8001970 <vRET+0x8>)
 800196a:	1e88      	subs	r0, r1, #2
 800196c:	f001 bbd6 	b.w	800311c <vGBFunctionRET>
 8001970:	2400165a 	.word	0x2400165a

08001974 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <vRETI+0x10>)
 8001976:	2201      	movs	r2, #1
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <vRETI+0x14>)
 800197a:	1e88      	subs	r0, r1, #2
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	f001 bbcd 	b.w	800311c <vGBFunctionRET>
 8001982:	bf00      	nop
 8001984:	2400165a 	.word	0x2400165a
 8001988:	2400109e 	.word	0x2400109e

0800198c <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 800198c:	4901      	ldr	r1, [pc, #4]	; (8001994 <vPOP_BC+0x8>)
 800198e:	1d88      	adds	r0, r1, #6
 8001990:	f001 bbd8 	b.w	8003144 <vGBFunctionPOP>
 8001994:	24001652 	.word	0x24001652

08001998 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 8001998:	4901      	ldr	r1, [pc, #4]	; (80019a0 <vPOP_DE+0x8>)
 800199a:	1d08      	adds	r0, r1, #4
 800199c:	f001 bbd2 	b.w	8003144 <vGBFunctionPOP>
 80019a0:	24001654 	.word	0x24001654

080019a4 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 80019a4:	4901      	ldr	r1, [pc, #4]	; (80019ac <vPOP_HL+0x8>)
 80019a6:	1c88      	adds	r0, r1, #2
 80019a8:	f001 bbcc 	b.w	8003144 <vGBFunctionPOP>
 80019ac:	24001656 	.word	0x24001656

080019b0 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 80019b0:	b510      	push	{r4, lr}
 80019b2:	4c05      	ldr	r4, [pc, #20]	; (80019c8 <vPOP_AF+0x18>)
 80019b4:	4621      	mov	r1, r4
 80019b6:	f104 0008 	add.w	r0, r4, #8
 80019ba:	f001 fbc3 	bl	8003144 <vGBFunctionPOP>
 80019be:	8823      	ldrh	r3, [r4, #0]
 80019c0:	f023 030f 	bic.w	r3, r3, #15
 80019c4:	8023      	strh	r3, [r4, #0]
 80019c6:	bd10      	pop	{r4, pc}
 80019c8:	24001650 	.word	0x24001650

080019cc <vJP_NZ_a16>:
void vJP_NZ_a16(){    ucCustomDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	4d0d      	ldr	r5, [pc, #52]	; (8001a04 <vJP_NZ_a16+0x38>)
 80019d0:	8968      	ldrh	r0, [r5, #10]
 80019d2:	462c      	mov	r4, r5
 80019d4:	3802      	subs	r0, #2
 80019d6:	b280      	uxth	r0, r0
 80019d8:	f001 fe4c 	bl	8003674 <ucGBMemoryRead>
 80019dc:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 80019e0:	4606      	mov	r6, r0
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	b280      	uxth	r0, r0
 80019e6:	f001 fe45 	bl	8003674 <ucGBMemoryRead>
 80019ea:	4601      	mov	r1, r0
 80019ec:	4630      	mov	r0, r6
 80019ee:	f001 f931 	bl	8002c54 <usConcat16BitBigEndian>
 80019f2:	4629      	mov	r1, r5
 80019f4:	4602      	mov	r2, r0
 80019f6:	4620      	mov	r0, r4
 80019f8:	f001 fba6 	bl	8003148 <vGBFunctionJP_NZ_a16>
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <vJP_NZ_a16+0x3c>)
 80019fe:	7018      	strb	r0, [r3, #0]
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	24001650 	.word	0x24001650
 8001a08:	2400109c 	.word	0x2400109c

08001a0c <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  ucCustomDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <vCALL_NZ_a16+0x14>)
 8001a0e:	b508      	push	{r3, lr}
 8001a10:	f1a2 0108 	sub.w	r1, r2, #8
 8001a14:	1c90      	adds	r0, r2, #2
 8001a16:	f001 fbb3 	bl	8003180 <vGBFunctionCALL_NZ_a16>
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <vCALL_NZ_a16+0x18>)
 8001a1c:	7018      	strb	r0, [r3, #0]
 8001a1e:	bd08      	pop	{r3, pc}
 8001a20:	24001658 	.word	0x24001658
 8001a24:	2400109c 	.word	0x2400109c

08001a28 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001a28:	4901      	ldr	r1, [pc, #4]	; (8001a30 <vPUSH_BC+0x8>)
 8001a2a:	1d88      	adds	r0, r1, #6
 8001a2c:	f001 bb94 	b.w	8003158 <vGBFunctionPUSH>
 8001a30:	24001652 	.word	0x24001652

08001a34 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4c04      	ldr	r4, [pc, #16]	; (8001a48 <vRST_00H+0x14>)
 8001a38:	4621      	mov	r1, r4
 8001a3a:	1ea0      	subs	r0, r4, #2
 8001a3c:	f001 fb8c 	bl	8003158 <vGBFunctionPUSH>
 8001a40:	3c0a      	subs	r4, #10
 8001a42:	2300      	movs	r3, #0
 8001a44:	8163      	strh	r3, [r4, #10]
 8001a46:	bd10      	pop	{r4, pc}
 8001a48:	2400165a 	.word	0x2400165a

08001a4c <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8001a4c:	490b      	ldr	r1, [pc, #44]	; (8001a7c <vCALL_a16+0x30>)
 8001a4e:	b538      	push	{r3, r4, r5, lr}
 8001a50:	460c      	mov	r4, r1
 8001a52:	1e88      	subs	r0, r1, #2
 8001a54:	f001 fb80 	bl	8003158 <vGBFunctionPUSH>
 8001a58:	f834 090a 	ldrh.w	r0, [r4], #-10
 8001a5c:	3802      	subs	r0, #2
 8001a5e:	b280      	uxth	r0, r0
 8001a60:	f001 fe08 	bl	8003674 <ucGBMemoryRead>
 8001a64:	8963      	ldrh	r3, [r4, #10]
 8001a66:	4605      	mov	r5, r0
 8001a68:	1e58      	subs	r0, r3, #1
 8001a6a:	b280      	uxth	r0, r0
 8001a6c:	f001 fe02 	bl	8003674 <ucGBMemoryRead>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4628      	mov	r0, r5
 8001a74:	f001 f8ee 	bl	8002c54 <usConcat16BitBigEndian>
 8001a78:	8160      	strh	r0, [r4, #10]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	2400165a 	.word	0x2400165a

08001a80 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001a80:	b510      	push	{r4, lr}
 8001a82:	4c04      	ldr	r4, [pc, #16]	; (8001a94 <vRST_08H+0x14>)
 8001a84:	4621      	mov	r1, r4
 8001a86:	1ea0      	subs	r0, r4, #2
 8001a88:	f001 fb66 	bl	8003158 <vGBFunctionPUSH>
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	8023      	strh	r3, [r4, #0]
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	2400165a 	.word	0x2400165a

08001a98 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a98:	4901      	ldr	r1, [pc, #4]	; (8001aa0 <vPUSH_DE+0x8>)
 8001a9a:	1d08      	adds	r0, r1, #4
 8001a9c:	f001 bb5c 	b.w	8003158 <vGBFunctionPUSH>
 8001aa0:	24001654 	.word	0x24001654

08001aa4 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4c04      	ldr	r4, [pc, #16]	; (8001ab8 <vRST_10H+0x14>)
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1ea0      	subs	r0, r4, #2
 8001aac:	f001 fb54 	bl	8003158 <vGBFunctionPUSH>
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2400165a 	.word	0x2400165a

08001abc <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4c04      	ldr	r4, [pc, #16]	; (8001ad0 <vRST_18H+0x14>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1ea0      	subs	r0, r4, #2
 8001ac4:	f001 fb48 	bl	8003158 <vGBFunctionPUSH>
 8001ac8:	2318      	movs	r3, #24
 8001aca:	8023      	strh	r3, [r4, #0]
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400165a 	.word	0x2400165a

08001ad4 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001ad4:	4901      	ldr	r1, [pc, #4]	; (8001adc <vPUSH_HL+0x8>)
 8001ad6:	1c88      	adds	r0, r1, #2
 8001ad8:	f001 bb3e 	b.w	8003158 <vGBFunctionPUSH>
 8001adc:	24001656 	.word	0x24001656

08001ae0 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	4c04      	ldr	r4, [pc, #16]	; (8001af4 <vRST20H+0x14>)
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	1ea0      	subs	r0, r4, #2
 8001ae8:	f001 fb36 	bl	8003158 <vGBFunctionPUSH>
 8001aec:	2320      	movs	r3, #32
 8001aee:	8023      	strh	r3, [r4, #0]
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	bf00      	nop
 8001af4:	2400165a 	.word	0x2400165a

08001af8 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001af8:	b510      	push	{r4, lr}
 8001afa:	4c04      	ldr	r4, [pc, #16]	; (8001b0c <vRST_28H+0x14>)
 8001afc:	4621      	mov	r1, r4
 8001afe:	1ea0      	subs	r0, r4, #2
 8001b00:	f001 fb2a 	bl	8003158 <vGBFunctionPUSH>
 8001b04:	2328      	movs	r3, #40	; 0x28
 8001b06:	8023      	strh	r3, [r4, #0]
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2400165a 	.word	0x2400165a

08001b10 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001b10:	4902      	ldr	r1, [pc, #8]	; (8001b1c <vPUSH_AF+0xc>)
 8001b12:	f101 0008 	add.w	r0, r1, #8
 8001b16:	f001 bb1f 	b.w	8003158 <vGBFunctionPUSH>
 8001b1a:	bf00      	nop
 8001b1c:	24001650 	.word	0x24001650

08001b20 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4c04      	ldr	r4, [pc, #16]	; (8001b34 <vRST_30H+0x14>)
 8001b24:	4621      	mov	r1, r4
 8001b26:	1ea0      	subs	r0, r4, #2
 8001b28:	f001 fb16 	bl	8003158 <vGBFunctionPUSH>
 8001b2c:	2330      	movs	r3, #48	; 0x30
 8001b2e:	8023      	strh	r3, [r4, #0]
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	bf00      	nop
 8001b34:	2400165a 	.word	0x2400165a

08001b38 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4c04      	ldr	r4, [pc, #16]	; (8001b4c <vRST_38H+0x14>)
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	1ea0      	subs	r0, r4, #2
 8001b40:	f001 fb0a 	bl	8003158 <vGBFunctionPUSH>
 8001b44:	2338      	movs	r3, #56	; 0x38
 8001b46:	8023      	strh	r3, [r4, #0]
 8001b48:	bd10      	pop	{r4, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2400165a 	.word	0x2400165a

08001b50 <vJP_Z_a16>:
void vJP_Z_a16(){     ucCustomDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	4d0d      	ldr	r5, [pc, #52]	; (8001b88 <vJP_Z_a16+0x38>)
 8001b54:	8968      	ldrh	r0, [r5, #10]
 8001b56:	462c      	mov	r4, r5
 8001b58:	3802      	subs	r0, #2
 8001b5a:	b280      	uxth	r0, r0
 8001b5c:	f001 fd8a 	bl	8003674 <ucGBMemoryRead>
 8001b60:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b64:	4606      	mov	r6, r0
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	b280      	uxth	r0, r0
 8001b6a:	f001 fd83 	bl	8003674 <ucGBMemoryRead>
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4630      	mov	r0, r6
 8001b72:	f001 f86f 	bl	8002c54 <usConcat16BitBigEndian>
 8001b76:	4629      	mov	r1, r5
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f001 fb1c 	bl	80031b8 <vGBFunctionJP_Z_a16>
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <vJP_Z_a16+0x3c>)
 8001b82:	7018      	strb	r0, [r3, #0]
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	bf00      	nop
 8001b88:	24001650 	.word	0x24001650
 8001b8c:	2400109c 	.word	0x2400109c

08001b90 <vCALL_Z_a16>:
void vCALL_Z_a16(){   ucCustomDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <vCALL_Z_a16+0x14>)
 8001b92:	b508      	push	{r3, lr}
 8001b94:	f1a2 0108 	sub.w	r1, r2, #8
 8001b98:	1c90      	adds	r0, r2, #2
 8001b9a:	f001 fb15 	bl	80031c8 <vGBFunctionCALL_Z_a16>
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <vCALL_Z_a16+0x18>)
 8001ba0:	7018      	strb	r0, [r3, #0]
 8001ba2:	bd08      	pop	{r3, pc}
 8001ba4:	24001658 	.word	0x24001658
 8001ba8:	2400109c 	.word	0x2400109c

08001bac <vJP_NC_a16>:
void vJP_NC_a16(){    ucCustomDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	4d0d      	ldr	r5, [pc, #52]	; (8001be4 <vJP_NC_a16+0x38>)
 8001bb0:	8968      	ldrh	r0, [r5, #10]
 8001bb2:	462c      	mov	r4, r5
 8001bb4:	3802      	subs	r0, #2
 8001bb6:	b280      	uxth	r0, r0
 8001bb8:	f001 fd5c 	bl	8003674 <ucGBMemoryRead>
 8001bbc:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001bc0:	4606      	mov	r6, r0
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	b280      	uxth	r0, r0
 8001bc6:	f001 fd55 	bl	8003674 <ucGBMemoryRead>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f001 f841 	bl	8002c54 <usConcat16BitBigEndian>
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f001 fb12 	bl	8003200 <vGBFunctionJP_NC_a16>
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <vJP_NC_a16+0x3c>)
 8001bde:	7018      	strb	r0, [r3, #0]
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
 8001be2:	bf00      	nop
 8001be4:	24001650 	.word	0x24001650
 8001be8:	2400109c 	.word	0x2400109c

08001bec <vCALL_NC_a16>:
void vCALL_NC_a16(){  ucCustomDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <vCALL_NC_a16+0x14>)
 8001bee:	b508      	push	{r3, lr}
 8001bf0:	f1a2 0108 	sub.w	r1, r2, #8
 8001bf4:	1c90      	adds	r0, r2, #2
 8001bf6:	f001 fb0b 	bl	8003210 <vGBFunctionCALL_NC_a16>
 8001bfa:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <vCALL_NC_a16+0x18>)
 8001bfc:	7018      	strb	r0, [r3, #0]
 8001bfe:	bd08      	pop	{r3, pc}
 8001c00:	24001658 	.word	0x24001658
 8001c04:	2400109c 	.word	0x2400109c

08001c08 <vJP_C_a16>:
void vJP_C_a16(){     ucCustomDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, usConcat16BitBigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4d0d      	ldr	r5, [pc, #52]	; (8001c40 <vJP_C_a16+0x38>)
 8001c0c:	8968      	ldrh	r0, [r5, #10]
 8001c0e:	462c      	mov	r4, r5
 8001c10:	3802      	subs	r0, #2
 8001c12:	b280      	uxth	r0, r0
 8001c14:	f001 fd2e 	bl	8003674 <ucGBMemoryRead>
 8001c18:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001c1c:	4606      	mov	r6, r0
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	b280      	uxth	r0, r0
 8001c22:	f001 fd27 	bl	8003674 <ucGBMemoryRead>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f001 f813 	bl	8002c54 <usConcat16BitBigEndian>
 8001c2e:	4629      	mov	r1, r5
 8001c30:	4602      	mov	r2, r0
 8001c32:	4620      	mov	r0, r4
 8001c34:	f001 fb08 	bl	8003248 <vGBFunctionJP_C_a16>
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <vJP_C_a16+0x3c>)
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	24001650 	.word	0x24001650
 8001c44:	2400109c 	.word	0x2400109c

08001c48 <vCALL_C_a16>:
void vCALL_C_a16(){   ucCustomDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <vCALL_C_a16+0x14>)
 8001c4a:	b508      	push	{r3, lr}
 8001c4c:	f1a2 0108 	sub.w	r1, r2, #8
 8001c50:	1c90      	adds	r0, r2, #2
 8001c52:	f001 fb01 	bl	8003258 <vGBFunctionCALL_C_a16>
 8001c56:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <vCALL_C_a16+0x18>)
 8001c58:	7018      	strb	r0, [r3, #0]
 8001c5a:	bd08      	pop	{r3, pc}
 8001c5c:	24001658 	.word	0x24001658
 8001c60:	2400109c 	.word	0x2400109c

08001c64 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4c07      	ldr	r4, [pc, #28]	; (8001c84 <vADDs_SP_r8+0x20>)
 8001c68:	8960      	ldrh	r0, [r4, #10]
 8001c6a:	3801      	subs	r0, #1
 8001c6c:	b280      	uxth	r0, r0
 8001c6e:	f001 fd01 	bl	8003674 <ucGBMemoryRead>
 8001c72:	4621      	mov	r1, r4
 8001c74:	4602      	mov	r2, r0
 8001c76:	f104 0008 	add.w	r0, r4, #8
 8001c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c7e:	f001 bb07 	b.w	8003290 <vGBFunctionADD_SP_r8>
 8001c82:	bf00      	nop
 8001c84:	24001650 	.word	0x24001650

08001c88 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4c07      	ldr	r4, [pc, #28]	; (8001ca8 <vLDs_HL_SP_r8+0x20>)
 8001c8c:	8960      	ldrh	r0, [r4, #10]
 8001c8e:	3801      	subs	r0, #1
 8001c90:	b280      	uxth	r0, r0
 8001c92:	f001 fcef 	bl	8003674 <ucGBMemoryRead>
 8001c96:	4622      	mov	r2, r4
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f104 0108 	add.w	r1, r4, #8
 8001c9e:	1da0      	adds	r0, r4, #6
 8001ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ca4:	f001 bb1c 	b.w	80032e0 <vGBFunctionLD_HL_SP_r8>
 8001ca8:	24001650 	.word	0x24001650

08001cac <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4c03      	ldr	r4, [pc, #12]	; (8001cbc <vRLC_B+0x10>)
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	78e0      	ldrb	r0, [r4, #3]
 8001cb4:	f001 fb3c 	bl	8003330 <ucGBFunctionRLC>
 8001cb8:	70e0      	strb	r0, [r4, #3]
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	24001650 	.word	0x24001650

08001cc0 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4c03      	ldr	r4, [pc, #12]	; (8001cd0 <vRLC_C+0x10>)
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	78a0      	ldrb	r0, [r4, #2]
 8001cc8:	f001 fb32 	bl	8003330 <ucGBFunctionRLC>
 8001ccc:	70a0      	strb	r0, [r4, #2]
 8001cce:	bd10      	pop	{r4, pc}
 8001cd0:	24001650 	.word	0x24001650

08001cd4 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	4c03      	ldr	r4, [pc, #12]	; (8001ce4 <vRLC_D+0x10>)
 8001cd8:	4621      	mov	r1, r4
 8001cda:	7960      	ldrb	r0, [r4, #5]
 8001cdc:	f001 fb28 	bl	8003330 <ucGBFunctionRLC>
 8001ce0:	7160      	strb	r0, [r4, #5]
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	24001650 	.word	0x24001650

08001ce8 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	4c03      	ldr	r4, [pc, #12]	; (8001cf8 <vRLC_E+0x10>)
 8001cec:	4621      	mov	r1, r4
 8001cee:	7920      	ldrb	r0, [r4, #4]
 8001cf0:	f001 fb1e 	bl	8003330 <ucGBFunctionRLC>
 8001cf4:	7120      	strb	r0, [r4, #4]
 8001cf6:	bd10      	pop	{r4, pc}
 8001cf8:	24001650 	.word	0x24001650

08001cfc <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4c03      	ldr	r4, [pc, #12]	; (8001d0c <vRLC_H+0x10>)
 8001d00:	4621      	mov	r1, r4
 8001d02:	79e0      	ldrb	r0, [r4, #7]
 8001d04:	f001 fb14 	bl	8003330 <ucGBFunctionRLC>
 8001d08:	71e0      	strb	r0, [r4, #7]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	24001650 	.word	0x24001650

08001d10 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001d10:	b510      	push	{r4, lr}
 8001d12:	4c03      	ldr	r4, [pc, #12]	; (8001d20 <vRLC_L+0x10>)
 8001d14:	4621      	mov	r1, r4
 8001d16:	79a0      	ldrb	r0, [r4, #6]
 8001d18:	f001 fb0a 	bl	8003330 <ucGBFunctionRLC>
 8001d1c:	71a0      	strb	r0, [r4, #6]
 8001d1e:	bd10      	pop	{r4, pc}
 8001d20:	24001650 	.word	0x24001650

08001d24 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	4d07      	ldr	r5, [pc, #28]	; (8001d44 <vRLC_HL+0x20>)
 8001d28:	88ec      	ldrh	r4, [r5, #6]
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f001 fca2 	bl	8003674 <ucGBMemoryRead>
 8001d30:	4629      	mov	r1, r5
 8001d32:	f001 fafd 	bl	8003330 <ucGBFunctionRLC>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4620      	mov	r0, r4
 8001d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3e:	f001 bcc1 	b.w	80036c4 <vGBMemoryWrite>
 8001d42:	bf00      	nop
 8001d44:	24001650 	.word	0x24001650

08001d48 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4c03      	ldr	r4, [pc, #12]	; (8001d58 <vRLC_A+0x10>)
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	7860      	ldrb	r0, [r4, #1]
 8001d50:	f001 faee 	bl	8003330 <ucGBFunctionRLC>
 8001d54:	7060      	strb	r0, [r4, #1]
 8001d56:	bd10      	pop	{r4, pc}
 8001d58:	24001650 	.word	0x24001650

08001d5c <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4c03      	ldr	r4, [pc, #12]	; (8001d6c <vRRC_B+0x10>)
 8001d60:	4621      	mov	r1, r4
 8001d62:	78e0      	ldrb	r0, [r4, #3]
 8001d64:	f001 fb00 	bl	8003368 <ucGBFunctionRRC>
 8001d68:	70e0      	strb	r0, [r4, #3]
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	24001650 	.word	0x24001650

08001d70 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4c03      	ldr	r4, [pc, #12]	; (8001d80 <vRRC_C+0x10>)
 8001d74:	4621      	mov	r1, r4
 8001d76:	78a0      	ldrb	r0, [r4, #2]
 8001d78:	f001 faf6 	bl	8003368 <ucGBFunctionRRC>
 8001d7c:	70a0      	strb	r0, [r4, #2]
 8001d7e:	bd10      	pop	{r4, pc}
 8001d80:	24001650 	.word	0x24001650

08001d84 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4c03      	ldr	r4, [pc, #12]	; (8001d94 <vRRC_D+0x10>)
 8001d88:	4621      	mov	r1, r4
 8001d8a:	7960      	ldrb	r0, [r4, #5]
 8001d8c:	f001 faec 	bl	8003368 <ucGBFunctionRRC>
 8001d90:	7160      	strb	r0, [r4, #5]
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	24001650 	.word	0x24001650

08001d98 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4c03      	ldr	r4, [pc, #12]	; (8001da8 <vRRC_E+0x10>)
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	7920      	ldrb	r0, [r4, #4]
 8001da0:	f001 fae2 	bl	8003368 <ucGBFunctionRRC>
 8001da4:	7120      	strb	r0, [r4, #4]
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	24001650 	.word	0x24001650

08001dac <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4c03      	ldr	r4, [pc, #12]	; (8001dbc <vRRC_H+0x10>)
 8001db0:	4621      	mov	r1, r4
 8001db2:	79e0      	ldrb	r0, [r4, #7]
 8001db4:	f001 fad8 	bl	8003368 <ucGBFunctionRRC>
 8001db8:	71e0      	strb	r0, [r4, #7]
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	24001650 	.word	0x24001650

08001dc0 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	4c03      	ldr	r4, [pc, #12]	; (8001dd0 <vRRC_L+0x10>)
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	79a0      	ldrb	r0, [r4, #6]
 8001dc8:	f001 face 	bl	8003368 <ucGBFunctionRRC>
 8001dcc:	71a0      	strb	r0, [r4, #6]
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	24001650 	.word	0x24001650

08001dd4 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4d07      	ldr	r5, [pc, #28]	; (8001df4 <vRRC_HL+0x20>)
 8001dd8:	88ec      	ldrh	r4, [r5, #6]
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f001 fc4a 	bl	8003674 <ucGBMemoryRead>
 8001de0:	4629      	mov	r1, r5
 8001de2:	f001 fac1 	bl	8003368 <ucGBFunctionRRC>
 8001de6:	4601      	mov	r1, r0
 8001de8:	4620      	mov	r0, r4
 8001dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dee:	f001 bc69 	b.w	80036c4 <vGBMemoryWrite>
 8001df2:	bf00      	nop
 8001df4:	24001650 	.word	0x24001650

08001df8 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4c03      	ldr	r4, [pc, #12]	; (8001e08 <vRRC_A+0x10>)
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	7860      	ldrb	r0, [r4, #1]
 8001e00:	f001 fab2 	bl	8003368 <ucGBFunctionRRC>
 8001e04:	7060      	strb	r0, [r4, #1]
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	24001650 	.word	0x24001650

08001e0c <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	4c03      	ldr	r4, [pc, #12]	; (8001e1c <vRL_B+0x10>)
 8001e10:	4621      	mov	r1, r4
 8001e12:	78e0      	ldrb	r0, [r4, #3]
 8001e14:	f001 fac4 	bl	80033a0 <ucGBFunctionRL>
 8001e18:	70e0      	strb	r0, [r4, #3]
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	24001650 	.word	0x24001650

08001e20 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4c03      	ldr	r4, [pc, #12]	; (8001e30 <vRL_C+0x10>)
 8001e24:	4621      	mov	r1, r4
 8001e26:	78a0      	ldrb	r0, [r4, #2]
 8001e28:	f001 faba 	bl	80033a0 <ucGBFunctionRL>
 8001e2c:	70a0      	strb	r0, [r4, #2]
 8001e2e:	bd10      	pop	{r4, pc}
 8001e30:	24001650 	.word	0x24001650

08001e34 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001e34:	b510      	push	{r4, lr}
 8001e36:	4c03      	ldr	r4, [pc, #12]	; (8001e44 <vRL_D+0x10>)
 8001e38:	4621      	mov	r1, r4
 8001e3a:	7960      	ldrb	r0, [r4, #5]
 8001e3c:	f001 fab0 	bl	80033a0 <ucGBFunctionRL>
 8001e40:	7160      	strb	r0, [r4, #5]
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	24001650 	.word	0x24001650

08001e48 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	4c03      	ldr	r4, [pc, #12]	; (8001e58 <vRL_E+0x10>)
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	7920      	ldrb	r0, [r4, #4]
 8001e50:	f001 faa6 	bl	80033a0 <ucGBFunctionRL>
 8001e54:	7120      	strb	r0, [r4, #4]
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	24001650 	.word	0x24001650

08001e5c <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	4c03      	ldr	r4, [pc, #12]	; (8001e6c <vRL_H+0x10>)
 8001e60:	4621      	mov	r1, r4
 8001e62:	79e0      	ldrb	r0, [r4, #7]
 8001e64:	f001 fa9c 	bl	80033a0 <ucGBFunctionRL>
 8001e68:	71e0      	strb	r0, [r4, #7]
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	24001650 	.word	0x24001650

08001e70 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4c03      	ldr	r4, [pc, #12]	; (8001e80 <vRL_L+0x10>)
 8001e74:	4621      	mov	r1, r4
 8001e76:	79a0      	ldrb	r0, [r4, #6]
 8001e78:	f001 fa92 	bl	80033a0 <ucGBFunctionRL>
 8001e7c:	71a0      	strb	r0, [r4, #6]
 8001e7e:	bd10      	pop	{r4, pc}
 8001e80:	24001650 	.word	0x24001650

08001e84 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4d07      	ldr	r5, [pc, #28]	; (8001ea4 <vRL_HL+0x20>)
 8001e88:	88ec      	ldrh	r4, [r5, #6]
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f001 fbf2 	bl	8003674 <ucGBMemoryRead>
 8001e90:	4629      	mov	r1, r5
 8001e92:	f001 fa85 	bl	80033a0 <ucGBFunctionRL>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4620      	mov	r0, r4
 8001e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e9e:	f001 bc11 	b.w	80036c4 <vGBMemoryWrite>
 8001ea2:	bf00      	nop
 8001ea4:	24001650 	.word	0x24001650

08001ea8 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4c03      	ldr	r4, [pc, #12]	; (8001eb8 <vRL_A+0x10>)
 8001eac:	4621      	mov	r1, r4
 8001eae:	7860      	ldrb	r0, [r4, #1]
 8001eb0:	f001 fa76 	bl	80033a0 <ucGBFunctionRL>
 8001eb4:	7060      	strb	r0, [r4, #1]
 8001eb6:	bd10      	pop	{r4, pc}
 8001eb8:	24001650 	.word	0x24001650

08001ebc <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	4c03      	ldr	r4, [pc, #12]	; (8001ecc <vRR_B+0x10>)
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	78e0      	ldrb	r0, [r4, #3]
 8001ec4:	f001 fa86 	bl	80033d4 <ucGBFunctionRR>
 8001ec8:	70e0      	strb	r0, [r4, #3]
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	24001650 	.word	0x24001650

08001ed0 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4c03      	ldr	r4, [pc, #12]	; (8001ee0 <vRR_C+0x10>)
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	78a0      	ldrb	r0, [r4, #2]
 8001ed8:	f001 fa7c 	bl	80033d4 <ucGBFunctionRR>
 8001edc:	70a0      	strb	r0, [r4, #2]
 8001ede:	bd10      	pop	{r4, pc}
 8001ee0:	24001650 	.word	0x24001650

08001ee4 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4c03      	ldr	r4, [pc, #12]	; (8001ef4 <vRR_D+0x10>)
 8001ee8:	4621      	mov	r1, r4
 8001eea:	7960      	ldrb	r0, [r4, #5]
 8001eec:	f001 fa72 	bl	80033d4 <ucGBFunctionRR>
 8001ef0:	7160      	strb	r0, [r4, #5]
 8001ef2:	bd10      	pop	{r4, pc}
 8001ef4:	24001650 	.word	0x24001650

08001ef8 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	4c03      	ldr	r4, [pc, #12]	; (8001f08 <vRR_E+0x10>)
 8001efc:	4621      	mov	r1, r4
 8001efe:	7920      	ldrb	r0, [r4, #4]
 8001f00:	f001 fa68 	bl	80033d4 <ucGBFunctionRR>
 8001f04:	7120      	strb	r0, [r4, #4]
 8001f06:	bd10      	pop	{r4, pc}
 8001f08:	24001650 	.word	0x24001650

08001f0c <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4c03      	ldr	r4, [pc, #12]	; (8001f1c <vRR_H+0x10>)
 8001f10:	4621      	mov	r1, r4
 8001f12:	79e0      	ldrb	r0, [r4, #7]
 8001f14:	f001 fa5e 	bl	80033d4 <ucGBFunctionRR>
 8001f18:	71e0      	strb	r0, [r4, #7]
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	24001650 	.word	0x24001650

08001f20 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4c03      	ldr	r4, [pc, #12]	; (8001f30 <vRR_L+0x10>)
 8001f24:	4621      	mov	r1, r4
 8001f26:	79a0      	ldrb	r0, [r4, #6]
 8001f28:	f001 fa54 	bl	80033d4 <ucGBFunctionRR>
 8001f2c:	71a0      	strb	r0, [r4, #6]
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	24001650 	.word	0x24001650

08001f34 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4d07      	ldr	r5, [pc, #28]	; (8001f54 <vRR_HL+0x20>)
 8001f38:	88ec      	ldrh	r4, [r5, #6]
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f001 fb9a 	bl	8003674 <ucGBMemoryRead>
 8001f40:	4629      	mov	r1, r5
 8001f42:	f001 fa47 	bl	80033d4 <ucGBFunctionRR>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4620      	mov	r0, r4
 8001f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4e:	f001 bbb9 	b.w	80036c4 <vGBMemoryWrite>
 8001f52:	bf00      	nop
 8001f54:	24001650 	.word	0x24001650

08001f58 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4c03      	ldr	r4, [pc, #12]	; (8001f68 <vRR_A+0x10>)
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	7860      	ldrb	r0, [r4, #1]
 8001f60:	f001 fa38 	bl	80033d4 <ucGBFunctionRR>
 8001f64:	7060      	strb	r0, [r4, #1]
 8001f66:	bd10      	pop	{r4, pc}
 8001f68:	24001650 	.word	0x24001650

08001f6c <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4c03      	ldr	r4, [pc, #12]	; (8001f7c <vSLA_B+0x10>)
 8001f70:	4621      	mov	r1, r4
 8001f72:	78e0      	ldrb	r0, [r4, #3]
 8001f74:	f001 fa4a 	bl	800340c <ucGBFunctionSLA>
 8001f78:	70e0      	strb	r0, [r4, #3]
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	24001650 	.word	0x24001650

08001f80 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4c03      	ldr	r4, [pc, #12]	; (8001f90 <vSLA_C+0x10>)
 8001f84:	4621      	mov	r1, r4
 8001f86:	78a0      	ldrb	r0, [r4, #2]
 8001f88:	f001 fa40 	bl	800340c <ucGBFunctionSLA>
 8001f8c:	70a0      	strb	r0, [r4, #2]
 8001f8e:	bd10      	pop	{r4, pc}
 8001f90:	24001650 	.word	0x24001650

08001f94 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001f94:	b510      	push	{r4, lr}
 8001f96:	4c03      	ldr	r4, [pc, #12]	; (8001fa4 <vSLA_D+0x10>)
 8001f98:	4621      	mov	r1, r4
 8001f9a:	7960      	ldrb	r0, [r4, #5]
 8001f9c:	f001 fa36 	bl	800340c <ucGBFunctionSLA>
 8001fa0:	7160      	strb	r0, [r4, #5]
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	24001650 	.word	0x24001650

08001fa8 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	4c03      	ldr	r4, [pc, #12]	; (8001fb8 <vSLA_E+0x10>)
 8001fac:	4621      	mov	r1, r4
 8001fae:	7920      	ldrb	r0, [r4, #4]
 8001fb0:	f001 fa2c 	bl	800340c <ucGBFunctionSLA>
 8001fb4:	7120      	strb	r0, [r4, #4]
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	24001650 	.word	0x24001650

08001fbc <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	4c03      	ldr	r4, [pc, #12]	; (8001fcc <vSLA_H+0x10>)
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	79e0      	ldrb	r0, [r4, #7]
 8001fc4:	f001 fa22 	bl	800340c <ucGBFunctionSLA>
 8001fc8:	71e0      	strb	r0, [r4, #7]
 8001fca:	bd10      	pop	{r4, pc}
 8001fcc:	24001650 	.word	0x24001650

08001fd0 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4c03      	ldr	r4, [pc, #12]	; (8001fe0 <vSLA_L+0x10>)
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	79a0      	ldrb	r0, [r4, #6]
 8001fd8:	f001 fa18 	bl	800340c <ucGBFunctionSLA>
 8001fdc:	71a0      	strb	r0, [r4, #6]
 8001fde:	bd10      	pop	{r4, pc}
 8001fe0:	24001650 	.word	0x24001650

08001fe4 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d07      	ldr	r5, [pc, #28]	; (8002004 <vSLA_HL+0x20>)
 8001fe8:	88ec      	ldrh	r4, [r5, #6]
 8001fea:	4620      	mov	r0, r4
 8001fec:	f001 fb42 	bl	8003674 <ucGBMemoryRead>
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f001 fa0b 	bl	800340c <ucGBFunctionSLA>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ffe:	f001 bb61 	b.w	80036c4 <vGBMemoryWrite>
 8002002:	bf00      	nop
 8002004:	24001650 	.word	0x24001650

08002008 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8002008:	b510      	push	{r4, lr}
 800200a:	4c03      	ldr	r4, [pc, #12]	; (8002018 <vSLA_A+0x10>)
 800200c:	4621      	mov	r1, r4
 800200e:	7860      	ldrb	r0, [r4, #1]
 8002010:	f001 f9fc 	bl	800340c <ucGBFunctionSLA>
 8002014:	7060      	strb	r0, [r4, #1]
 8002016:	bd10      	pop	{r4, pc}
 8002018:	24001650 	.word	0x24001650

0800201c <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 800201c:	b510      	push	{r4, lr}
 800201e:	4c03      	ldr	r4, [pc, #12]	; (800202c <vSRA_B+0x10>)
 8002020:	4621      	mov	r1, r4
 8002022:	78e0      	ldrb	r0, [r4, #3]
 8002024:	f001 fa0a 	bl	800343c <ucGBFunctionSRA>
 8002028:	70e0      	strb	r0, [r4, #3]
 800202a:	bd10      	pop	{r4, pc}
 800202c:	24001650 	.word	0x24001650

08002030 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8002030:	b510      	push	{r4, lr}
 8002032:	4c03      	ldr	r4, [pc, #12]	; (8002040 <vSRA_C+0x10>)
 8002034:	4621      	mov	r1, r4
 8002036:	78a0      	ldrb	r0, [r4, #2]
 8002038:	f001 fa00 	bl	800343c <ucGBFunctionSRA>
 800203c:	70a0      	strb	r0, [r4, #2]
 800203e:	bd10      	pop	{r4, pc}
 8002040:	24001650 	.word	0x24001650

08002044 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8002044:	b510      	push	{r4, lr}
 8002046:	4c03      	ldr	r4, [pc, #12]	; (8002054 <vSRA_D+0x10>)
 8002048:	4621      	mov	r1, r4
 800204a:	7960      	ldrb	r0, [r4, #5]
 800204c:	f001 f9f6 	bl	800343c <ucGBFunctionSRA>
 8002050:	7160      	strb	r0, [r4, #5]
 8002052:	bd10      	pop	{r4, pc}
 8002054:	24001650 	.word	0x24001650

08002058 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8002058:	b510      	push	{r4, lr}
 800205a:	4c03      	ldr	r4, [pc, #12]	; (8002068 <vSRA_E+0x10>)
 800205c:	4621      	mov	r1, r4
 800205e:	7920      	ldrb	r0, [r4, #4]
 8002060:	f001 f9ec 	bl	800343c <ucGBFunctionSRA>
 8002064:	7120      	strb	r0, [r4, #4]
 8002066:	bd10      	pop	{r4, pc}
 8002068:	24001650 	.word	0x24001650

0800206c <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 800206c:	b510      	push	{r4, lr}
 800206e:	4c03      	ldr	r4, [pc, #12]	; (800207c <vSRA_H+0x10>)
 8002070:	4621      	mov	r1, r4
 8002072:	79e0      	ldrb	r0, [r4, #7]
 8002074:	f001 f9e2 	bl	800343c <ucGBFunctionSRA>
 8002078:	71e0      	strb	r0, [r4, #7]
 800207a:	bd10      	pop	{r4, pc}
 800207c:	24001650 	.word	0x24001650

08002080 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8002080:	b510      	push	{r4, lr}
 8002082:	4c03      	ldr	r4, [pc, #12]	; (8002090 <vSRA_L+0x10>)
 8002084:	4621      	mov	r1, r4
 8002086:	79a0      	ldrb	r0, [r4, #6]
 8002088:	f001 f9d8 	bl	800343c <ucGBFunctionSRA>
 800208c:	71a0      	strb	r0, [r4, #6]
 800208e:	bd10      	pop	{r4, pc}
 8002090:	24001650 	.word	0x24001650

08002094 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4d07      	ldr	r5, [pc, #28]	; (80020b4 <vSRA_HL+0x20>)
 8002098:	88ec      	ldrh	r4, [r5, #6]
 800209a:	4620      	mov	r0, r4
 800209c:	f001 faea 	bl	8003674 <ucGBMemoryRead>
 80020a0:	4629      	mov	r1, r5
 80020a2:	f001 f9cb 	bl	800343c <ucGBFunctionSRA>
 80020a6:	4601      	mov	r1, r0
 80020a8:	4620      	mov	r0, r4
 80020aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ae:	f001 bb09 	b.w	80036c4 <vGBMemoryWrite>
 80020b2:	bf00      	nop
 80020b4:	24001650 	.word	0x24001650

080020b8 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4c03      	ldr	r4, [pc, #12]	; (80020c8 <vSRA_A+0x10>)
 80020bc:	4621      	mov	r1, r4
 80020be:	7860      	ldrb	r0, [r4, #1]
 80020c0:	f001 f9bc 	bl	800343c <ucGBFunctionSRA>
 80020c4:	7060      	strb	r0, [r4, #1]
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	24001650 	.word	0x24001650

080020cc <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 80020cc:	b510      	push	{r4, lr}
 80020ce:	4c03      	ldr	r4, [pc, #12]	; (80020dc <vSWAP_B+0x10>)
 80020d0:	4621      	mov	r1, r4
 80020d2:	78e0      	ldrb	r0, [r4, #3]
 80020d4:	f001 f9cc 	bl	8003470 <ucGBFunctionSWAP>
 80020d8:	70e0      	strb	r0, [r4, #3]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	24001650 	.word	0x24001650

080020e0 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4c03      	ldr	r4, [pc, #12]	; (80020f0 <vSWAP_C+0x10>)
 80020e4:	4621      	mov	r1, r4
 80020e6:	78a0      	ldrb	r0, [r4, #2]
 80020e8:	f001 f9c2 	bl	8003470 <ucGBFunctionSWAP>
 80020ec:	70a0      	strb	r0, [r4, #2]
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	24001650 	.word	0x24001650

080020f4 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4c03      	ldr	r4, [pc, #12]	; (8002104 <vSWAP_D+0x10>)
 80020f8:	4621      	mov	r1, r4
 80020fa:	7960      	ldrb	r0, [r4, #5]
 80020fc:	f001 f9b8 	bl	8003470 <ucGBFunctionSWAP>
 8002100:	7160      	strb	r0, [r4, #5]
 8002102:	bd10      	pop	{r4, pc}
 8002104:	24001650 	.word	0x24001650

08002108 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002108:	b510      	push	{r4, lr}
 800210a:	4c03      	ldr	r4, [pc, #12]	; (8002118 <vSWAP_E+0x10>)
 800210c:	4621      	mov	r1, r4
 800210e:	7920      	ldrb	r0, [r4, #4]
 8002110:	f001 f9ae 	bl	8003470 <ucGBFunctionSWAP>
 8002114:	7120      	strb	r0, [r4, #4]
 8002116:	bd10      	pop	{r4, pc}
 8002118:	24001650 	.word	0x24001650

0800211c <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 800211c:	b510      	push	{r4, lr}
 800211e:	4c03      	ldr	r4, [pc, #12]	; (800212c <vSWAP_H+0x10>)
 8002120:	4621      	mov	r1, r4
 8002122:	79e0      	ldrb	r0, [r4, #7]
 8002124:	f001 f9a4 	bl	8003470 <ucGBFunctionSWAP>
 8002128:	71e0      	strb	r0, [r4, #7]
 800212a:	bd10      	pop	{r4, pc}
 800212c:	24001650 	.word	0x24001650

08002130 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002130:	b510      	push	{r4, lr}
 8002132:	4c03      	ldr	r4, [pc, #12]	; (8002140 <vSWAP_L+0x10>)
 8002134:	4621      	mov	r1, r4
 8002136:	79a0      	ldrb	r0, [r4, #6]
 8002138:	f001 f99a 	bl	8003470 <ucGBFunctionSWAP>
 800213c:	71a0      	strb	r0, [r4, #6]
 800213e:	bd10      	pop	{r4, pc}
 8002140:	24001650 	.word	0x24001650

08002144 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4d07      	ldr	r5, [pc, #28]	; (8002164 <vSWAP_HL+0x20>)
 8002148:	88ec      	ldrh	r4, [r5, #6]
 800214a:	4620      	mov	r0, r4
 800214c:	f001 fa92 	bl	8003674 <ucGBMemoryRead>
 8002150:	4629      	mov	r1, r5
 8002152:	f001 f98d 	bl	8003470 <ucGBFunctionSWAP>
 8002156:	4601      	mov	r1, r0
 8002158:	4620      	mov	r0, r4
 800215a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800215e:	f001 bab1 	b.w	80036c4 <vGBMemoryWrite>
 8002162:	bf00      	nop
 8002164:	24001650 	.word	0x24001650

08002168 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 8002168:	b510      	push	{r4, lr}
 800216a:	4c03      	ldr	r4, [pc, #12]	; (8002178 <vSWAP_A+0x10>)
 800216c:	4621      	mov	r1, r4
 800216e:	7860      	ldrb	r0, [r4, #1]
 8002170:	f001 f97e 	bl	8003470 <ucGBFunctionSWAP>
 8002174:	7060      	strb	r0, [r4, #1]
 8002176:	bd10      	pop	{r4, pc}
 8002178:	24001650 	.word	0x24001650

0800217c <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 800217c:	b510      	push	{r4, lr}
 800217e:	4c03      	ldr	r4, [pc, #12]	; (800218c <vSRL_B+0x10>)
 8002180:	4621      	mov	r1, r4
 8002182:	78e0      	ldrb	r0, [r4, #3]
 8002184:	f001 f98a 	bl	800349c <ucGBFunctionSRL>
 8002188:	70e0      	strb	r0, [r4, #3]
 800218a:	bd10      	pop	{r4, pc}
 800218c:	24001650 	.word	0x24001650

08002190 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 8002190:	b510      	push	{r4, lr}
 8002192:	4c03      	ldr	r4, [pc, #12]	; (80021a0 <vSRL_C+0x10>)
 8002194:	4621      	mov	r1, r4
 8002196:	78a0      	ldrb	r0, [r4, #2]
 8002198:	f001 f980 	bl	800349c <ucGBFunctionSRL>
 800219c:	70a0      	strb	r0, [r4, #2]
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	24001650 	.word	0x24001650

080021a4 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 80021a4:	b510      	push	{r4, lr}
 80021a6:	4c03      	ldr	r4, [pc, #12]	; (80021b4 <vSRL_D+0x10>)
 80021a8:	4621      	mov	r1, r4
 80021aa:	7960      	ldrb	r0, [r4, #5]
 80021ac:	f001 f976 	bl	800349c <ucGBFunctionSRL>
 80021b0:	7160      	strb	r0, [r4, #5]
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	24001650 	.word	0x24001650

080021b8 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4c03      	ldr	r4, [pc, #12]	; (80021c8 <vSRL_E+0x10>)
 80021bc:	4621      	mov	r1, r4
 80021be:	7920      	ldrb	r0, [r4, #4]
 80021c0:	f001 f96c 	bl	800349c <ucGBFunctionSRL>
 80021c4:	7120      	strb	r0, [r4, #4]
 80021c6:	bd10      	pop	{r4, pc}
 80021c8:	24001650 	.word	0x24001650

080021cc <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 80021cc:	b510      	push	{r4, lr}
 80021ce:	4c03      	ldr	r4, [pc, #12]	; (80021dc <vSRL_H+0x10>)
 80021d0:	4621      	mov	r1, r4
 80021d2:	79e0      	ldrb	r0, [r4, #7]
 80021d4:	f001 f962 	bl	800349c <ucGBFunctionSRL>
 80021d8:	71e0      	strb	r0, [r4, #7]
 80021da:	bd10      	pop	{r4, pc}
 80021dc:	24001650 	.word	0x24001650

080021e0 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 80021e0:	b510      	push	{r4, lr}
 80021e2:	4c03      	ldr	r4, [pc, #12]	; (80021f0 <vSRL_L+0x10>)
 80021e4:	4621      	mov	r1, r4
 80021e6:	79a0      	ldrb	r0, [r4, #6]
 80021e8:	f001 f958 	bl	800349c <ucGBFunctionSRL>
 80021ec:	71a0      	strb	r0, [r4, #6]
 80021ee:	bd10      	pop	{r4, pc}
 80021f0:	24001650 	.word	0x24001650

080021f4 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d07      	ldr	r5, [pc, #28]	; (8002214 <vSRL_HL+0x20>)
 80021f8:	88ec      	ldrh	r4, [r5, #6]
 80021fa:	4620      	mov	r0, r4
 80021fc:	f001 fa3a 	bl	8003674 <ucGBMemoryRead>
 8002200:	4629      	mov	r1, r5
 8002202:	f001 f94b 	bl	800349c <ucGBFunctionSRL>
 8002206:	4601      	mov	r1, r0
 8002208:	4620      	mov	r0, r4
 800220a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220e:	f001 ba59 	b.w	80036c4 <vGBMemoryWrite>
 8002212:	bf00      	nop
 8002214:	24001650 	.word	0x24001650

08002218 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002218:	b510      	push	{r4, lr}
 800221a:	4c03      	ldr	r4, [pc, #12]	; (8002228 <vSRL_A+0x10>)
 800221c:	4621      	mov	r1, r4
 800221e:	7860      	ldrb	r0, [r4, #1]
 8002220:	f001 f93c 	bl	800349c <ucGBFunctionSRL>
 8002224:	7060      	strb	r0, [r4, #1]
 8002226:	bd10      	pop	{r4, pc}
 8002228:	24001650 	.word	0x24001650

0800222c <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <vBIT_0_B+0xc>)
 800222e:	2100      	movs	r1, #0
 8002230:	78d0      	ldrb	r0, [r2, #3]
 8002232:	f001 b947 	b.w	80034c4 <vGBFunctionBIT>
 8002236:	bf00      	nop
 8002238:	24001650 	.word	0x24001650

0800223c <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <vBIT_0_C+0xc>)
 800223e:	2100      	movs	r1, #0
 8002240:	7890      	ldrb	r0, [r2, #2]
 8002242:	f001 b93f 	b.w	80034c4 <vGBFunctionBIT>
 8002246:	bf00      	nop
 8002248:	24001650 	.word	0x24001650

0800224c <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <vBIT_0_D+0xc>)
 800224e:	2100      	movs	r1, #0
 8002250:	7950      	ldrb	r0, [r2, #5]
 8002252:	f001 b937 	b.w	80034c4 <vGBFunctionBIT>
 8002256:	bf00      	nop
 8002258:	24001650 	.word	0x24001650

0800225c <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_0_E+0xc>)
 800225e:	2100      	movs	r1, #0
 8002260:	7910      	ldrb	r0, [r2, #4]
 8002262:	f001 b92f 	b.w	80034c4 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	24001650 	.word	0x24001650

0800226c <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_0_H+0xc>)
 800226e:	2100      	movs	r1, #0
 8002270:	79d0      	ldrb	r0, [r2, #7]
 8002272:	f001 b927 	b.w	80034c4 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	24001650 	.word	0x24001650

0800227c <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_0_L+0xc>)
 800227e:	2100      	movs	r1, #0
 8002280:	7990      	ldrb	r0, [r2, #6]
 8002282:	f001 b91f 	b.w	80034c4 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	24001650 	.word	0x24001650

0800228c <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 800228c:	b510      	push	{r4, lr}
 800228e:	4c05      	ldr	r4, [pc, #20]	; (80022a4 <vBIT_0_HL+0x18>)
 8002290:	88e0      	ldrh	r0, [r4, #6]
 8002292:	f001 f9ef 	bl	8003674 <ucGBMemoryRead>
 8002296:	4622      	mov	r2, r4
 8002298:	2100      	movs	r1, #0
 800229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800229e:	f001 b911 	b.w	80034c4 <vGBFunctionBIT>
 80022a2:	bf00      	nop
 80022a4:	24001650 	.word	0x24001650

080022a8 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 80022a8:	4a02      	ldr	r2, [pc, #8]	; (80022b4 <vBIT_0_A+0xc>)
 80022aa:	2100      	movs	r1, #0
 80022ac:	7850      	ldrb	r0, [r2, #1]
 80022ae:	f001 b909 	b.w	80034c4 <vGBFunctionBIT>
 80022b2:	bf00      	nop
 80022b4:	24001650 	.word	0x24001650

080022b8 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 80022b8:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <vBIT_1_B+0xc>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	78d0      	ldrb	r0, [r2, #3]
 80022be:	f001 b901 	b.w	80034c4 <vGBFunctionBIT>
 80022c2:	bf00      	nop
 80022c4:	24001650 	.word	0x24001650

080022c8 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <vBIT_1_C+0xc>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	7890      	ldrb	r0, [r2, #2]
 80022ce:	f001 b8f9 	b.w	80034c4 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	24001650 	.word	0x24001650

080022d8 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_1_D+0xc>)
 80022da:	2101      	movs	r1, #1
 80022dc:	7950      	ldrb	r0, [r2, #5]
 80022de:	f001 b8f1 	b.w	80034c4 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	24001650 	.word	0x24001650

080022e8 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_1_E+0xc>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	7910      	ldrb	r0, [r2, #4]
 80022ee:	f001 b8e9 	b.w	80034c4 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	24001650 	.word	0x24001650

080022f8 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_1_H+0xc>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	79d0      	ldrb	r0, [r2, #7]
 80022fe:	f001 b8e1 	b.w	80034c4 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	24001650 	.word	0x24001650

08002308 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_1_L+0xc>)
 800230a:	2101      	movs	r1, #1
 800230c:	7990      	ldrb	r0, [r2, #6]
 800230e:	f001 b8d9 	b.w	80034c4 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	24001650 	.word	0x24001650

08002318 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002318:	b510      	push	{r4, lr}
 800231a:	4c05      	ldr	r4, [pc, #20]	; (8002330 <vBIT_1_HL+0x18>)
 800231c:	88e0      	ldrh	r0, [r4, #6]
 800231e:	f001 f9a9 	bl	8003674 <ucGBMemoryRead>
 8002322:	4622      	mov	r2, r4
 8002324:	2101      	movs	r1, #1
 8002326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232a:	f001 b8cb 	b.w	80034c4 <vGBFunctionBIT>
 800232e:	bf00      	nop
 8002330:	24001650 	.word	0x24001650

08002334 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002334:	4a02      	ldr	r2, [pc, #8]	; (8002340 <vBIT_1_A+0xc>)
 8002336:	2101      	movs	r1, #1
 8002338:	7850      	ldrb	r0, [r2, #1]
 800233a:	f001 b8c3 	b.w	80034c4 <vGBFunctionBIT>
 800233e:	bf00      	nop
 8002340:	24001650 	.word	0x24001650

08002344 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <vBIT_2_B+0xc>)
 8002346:	2102      	movs	r1, #2
 8002348:	78d0      	ldrb	r0, [r2, #3]
 800234a:	f001 b8bb 	b.w	80034c4 <vGBFunctionBIT>
 800234e:	bf00      	nop
 8002350:	24001650 	.word	0x24001650

08002354 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <vBIT_2_C+0xc>)
 8002356:	2102      	movs	r1, #2
 8002358:	7890      	ldrb	r0, [r2, #2]
 800235a:	f001 b8b3 	b.w	80034c4 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	24001650 	.word	0x24001650

08002364 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_2_D+0xc>)
 8002366:	2102      	movs	r1, #2
 8002368:	7950      	ldrb	r0, [r2, #5]
 800236a:	f001 b8ab 	b.w	80034c4 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	24001650 	.word	0x24001650

08002374 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_2_E+0xc>)
 8002376:	2102      	movs	r1, #2
 8002378:	7910      	ldrb	r0, [r2, #4]
 800237a:	f001 b8a3 	b.w	80034c4 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	24001650 	.word	0x24001650

08002384 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_2_H+0xc>)
 8002386:	2102      	movs	r1, #2
 8002388:	79d0      	ldrb	r0, [r2, #7]
 800238a:	f001 b89b 	b.w	80034c4 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	24001650 	.word	0x24001650

08002394 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_2_L+0xc>)
 8002396:	2102      	movs	r1, #2
 8002398:	7990      	ldrb	r0, [r2, #6]
 800239a:	f001 b893 	b.w	80034c4 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	24001650 	.word	0x24001650

080023a4 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4c05      	ldr	r4, [pc, #20]	; (80023bc <vBIT_2_HL+0x18>)
 80023a8:	88e0      	ldrh	r0, [r4, #6]
 80023aa:	f001 f963 	bl	8003674 <ucGBMemoryRead>
 80023ae:	4622      	mov	r2, r4
 80023b0:	2102      	movs	r1, #2
 80023b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b6:	f001 b885 	b.w	80034c4 <vGBFunctionBIT>
 80023ba:	bf00      	nop
 80023bc:	24001650 	.word	0x24001650

080023c0 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 80023c0:	4a02      	ldr	r2, [pc, #8]	; (80023cc <vBIT_2_A+0xc>)
 80023c2:	2102      	movs	r1, #2
 80023c4:	7850      	ldrb	r0, [r2, #1]
 80023c6:	f001 b87d 	b.w	80034c4 <vGBFunctionBIT>
 80023ca:	bf00      	nop
 80023cc:	24001650 	.word	0x24001650

080023d0 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <vBIT_3_B+0xc>)
 80023d2:	2103      	movs	r1, #3
 80023d4:	78d0      	ldrb	r0, [r2, #3]
 80023d6:	f001 b875 	b.w	80034c4 <vGBFunctionBIT>
 80023da:	bf00      	nop
 80023dc:	24001650 	.word	0x24001650

080023e0 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <vBIT_3_C+0xc>)
 80023e2:	2103      	movs	r1, #3
 80023e4:	7890      	ldrb	r0, [r2, #2]
 80023e6:	f001 b86d 	b.w	80034c4 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	24001650 	.word	0x24001650

080023f0 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_3_D+0xc>)
 80023f2:	2103      	movs	r1, #3
 80023f4:	7950      	ldrb	r0, [r2, #5]
 80023f6:	f001 b865 	b.w	80034c4 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	24001650 	.word	0x24001650

08002400 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_3_E+0xc>)
 8002402:	2103      	movs	r1, #3
 8002404:	7910      	ldrb	r0, [r2, #4]
 8002406:	f001 b85d 	b.w	80034c4 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	24001650 	.word	0x24001650

08002410 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_3_H+0xc>)
 8002412:	2103      	movs	r1, #3
 8002414:	79d0      	ldrb	r0, [r2, #7]
 8002416:	f001 b855 	b.w	80034c4 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	24001650 	.word	0x24001650

08002420 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_3_L+0xc>)
 8002422:	2103      	movs	r1, #3
 8002424:	7990      	ldrb	r0, [r2, #6]
 8002426:	f001 b84d 	b.w	80034c4 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	24001650 	.word	0x24001650

08002430 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 8002430:	b510      	push	{r4, lr}
 8002432:	4c05      	ldr	r4, [pc, #20]	; (8002448 <vBIT_3_HL+0x18>)
 8002434:	88e0      	ldrh	r0, [r4, #6]
 8002436:	f001 f91d 	bl	8003674 <ucGBMemoryRead>
 800243a:	4622      	mov	r2, r4
 800243c:	2103      	movs	r1, #3
 800243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002442:	f001 b83f 	b.w	80034c4 <vGBFunctionBIT>
 8002446:	bf00      	nop
 8002448:	24001650 	.word	0x24001650

0800244c <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 800244c:	4a02      	ldr	r2, [pc, #8]	; (8002458 <vBIT_3_A+0xc>)
 800244e:	2103      	movs	r1, #3
 8002450:	7850      	ldrb	r0, [r2, #1]
 8002452:	f001 b837 	b.w	80034c4 <vGBFunctionBIT>
 8002456:	bf00      	nop
 8002458:	24001650 	.word	0x24001650

0800245c <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <vBIT_4_B+0xc>)
 800245e:	2104      	movs	r1, #4
 8002460:	78d0      	ldrb	r0, [r2, #3]
 8002462:	f001 b82f 	b.w	80034c4 <vGBFunctionBIT>
 8002466:	bf00      	nop
 8002468:	24001650 	.word	0x24001650

0800246c <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <vBIT_4_C+0xc>)
 800246e:	2104      	movs	r1, #4
 8002470:	7890      	ldrb	r0, [r2, #2]
 8002472:	f001 b827 	b.w	80034c4 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	24001650 	.word	0x24001650

0800247c <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_4_D+0xc>)
 800247e:	2104      	movs	r1, #4
 8002480:	7950      	ldrb	r0, [r2, #5]
 8002482:	f001 b81f 	b.w	80034c4 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	24001650 	.word	0x24001650

0800248c <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_4_E+0xc>)
 800248e:	2104      	movs	r1, #4
 8002490:	7910      	ldrb	r0, [r2, #4]
 8002492:	f001 b817 	b.w	80034c4 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	24001650 	.word	0x24001650

0800249c <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_4_H+0xc>)
 800249e:	2104      	movs	r1, #4
 80024a0:	79d0      	ldrb	r0, [r2, #7]
 80024a2:	f001 b80f 	b.w	80034c4 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	24001650 	.word	0x24001650

080024ac <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_4_L+0xc>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	7990      	ldrb	r0, [r2, #6]
 80024b2:	f001 b807 	b.w	80034c4 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	24001650 	.word	0x24001650

080024bc <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 80024bc:	b510      	push	{r4, lr}
 80024be:	4c05      	ldr	r4, [pc, #20]	; (80024d4 <vBIT_4_HL+0x18>)
 80024c0:	88e0      	ldrh	r0, [r4, #6]
 80024c2:	f001 f8d7 	bl	8003674 <ucGBMemoryRead>
 80024c6:	4622      	mov	r2, r4
 80024c8:	2104      	movs	r1, #4
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ce:	f000 bff9 	b.w	80034c4 <vGBFunctionBIT>
 80024d2:	bf00      	nop
 80024d4:	24001650 	.word	0x24001650

080024d8 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 80024d8:	4a02      	ldr	r2, [pc, #8]	; (80024e4 <vBIT_4_A+0xc>)
 80024da:	2104      	movs	r1, #4
 80024dc:	7850      	ldrb	r0, [r2, #1]
 80024de:	f000 bff1 	b.w	80034c4 <vGBFunctionBIT>
 80024e2:	bf00      	nop
 80024e4:	24001650 	.word	0x24001650

080024e8 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <vBIT_5_B+0xc>)
 80024ea:	2105      	movs	r1, #5
 80024ec:	78d0      	ldrb	r0, [r2, #3]
 80024ee:	f000 bfe9 	b.w	80034c4 <vGBFunctionBIT>
 80024f2:	bf00      	nop
 80024f4:	24001650 	.word	0x24001650

080024f8 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <vBIT_5_C+0xc>)
 80024fa:	2105      	movs	r1, #5
 80024fc:	7890      	ldrb	r0, [r2, #2]
 80024fe:	f000 bfe1 	b.w	80034c4 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	24001650 	.word	0x24001650

08002508 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_5_D+0xc>)
 800250a:	2105      	movs	r1, #5
 800250c:	7950      	ldrb	r0, [r2, #5]
 800250e:	f000 bfd9 	b.w	80034c4 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	24001650 	.word	0x24001650

08002518 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_5_E+0xc>)
 800251a:	2105      	movs	r1, #5
 800251c:	7910      	ldrb	r0, [r2, #4]
 800251e:	f000 bfd1 	b.w	80034c4 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	24001650 	.word	0x24001650

08002528 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_5_H+0xc>)
 800252a:	2105      	movs	r1, #5
 800252c:	79d0      	ldrb	r0, [r2, #7]
 800252e:	f000 bfc9 	b.w	80034c4 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	24001650 	.word	0x24001650

08002538 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_5_L+0xc>)
 800253a:	2105      	movs	r1, #5
 800253c:	7990      	ldrb	r0, [r2, #6]
 800253e:	f000 bfc1 	b.w	80034c4 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	24001650 	.word	0x24001650

08002548 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 8002548:	b510      	push	{r4, lr}
 800254a:	4c05      	ldr	r4, [pc, #20]	; (8002560 <vBIT_5_HL+0x18>)
 800254c:	88e0      	ldrh	r0, [r4, #6]
 800254e:	f001 f891 	bl	8003674 <ucGBMemoryRead>
 8002552:	4622      	mov	r2, r4
 8002554:	2105      	movs	r1, #5
 8002556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800255a:	f000 bfb3 	b.w	80034c4 <vGBFunctionBIT>
 800255e:	bf00      	nop
 8002560:	24001650 	.word	0x24001650

08002564 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 8002564:	4a02      	ldr	r2, [pc, #8]	; (8002570 <vBIT_5_A+0xc>)
 8002566:	2105      	movs	r1, #5
 8002568:	7850      	ldrb	r0, [r2, #1]
 800256a:	f000 bfab 	b.w	80034c4 <vGBFunctionBIT>
 800256e:	bf00      	nop
 8002570:	24001650 	.word	0x24001650

08002574 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <vBIT_6_B+0xc>)
 8002576:	2106      	movs	r1, #6
 8002578:	78d0      	ldrb	r0, [r2, #3]
 800257a:	f000 bfa3 	b.w	80034c4 <vGBFunctionBIT>
 800257e:	bf00      	nop
 8002580:	24001650 	.word	0x24001650

08002584 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <vBIT_6_C+0xc>)
 8002586:	2106      	movs	r1, #6
 8002588:	7890      	ldrb	r0, [r2, #2]
 800258a:	f000 bf9b 	b.w	80034c4 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	24001650 	.word	0x24001650

08002594 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_6_D+0xc>)
 8002596:	2106      	movs	r1, #6
 8002598:	7950      	ldrb	r0, [r2, #5]
 800259a:	f000 bf93 	b.w	80034c4 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	24001650 	.word	0x24001650

080025a4 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_6_E+0xc>)
 80025a6:	2106      	movs	r1, #6
 80025a8:	7910      	ldrb	r0, [r2, #4]
 80025aa:	f000 bf8b 	b.w	80034c4 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	24001650 	.word	0x24001650

080025b4 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_6_H+0xc>)
 80025b6:	2106      	movs	r1, #6
 80025b8:	79d0      	ldrb	r0, [r2, #7]
 80025ba:	f000 bf83 	b.w	80034c4 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	24001650 	.word	0x24001650

080025c4 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_6_L+0xc>)
 80025c6:	2106      	movs	r1, #6
 80025c8:	7990      	ldrb	r0, [r2, #6]
 80025ca:	f000 bf7b 	b.w	80034c4 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	24001650 	.word	0x24001650

080025d4 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 80025d4:	b510      	push	{r4, lr}
 80025d6:	4c05      	ldr	r4, [pc, #20]	; (80025ec <vBIT_6_HL+0x18>)
 80025d8:	88e0      	ldrh	r0, [r4, #6]
 80025da:	f001 f84b 	bl	8003674 <ucGBMemoryRead>
 80025de:	4622      	mov	r2, r4
 80025e0:	2106      	movs	r1, #6
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e6:	f000 bf6d 	b.w	80034c4 <vGBFunctionBIT>
 80025ea:	bf00      	nop
 80025ec:	24001650 	.word	0x24001650

080025f0 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 80025f0:	4a02      	ldr	r2, [pc, #8]	; (80025fc <vBIT_6_A+0xc>)
 80025f2:	2106      	movs	r1, #6
 80025f4:	7850      	ldrb	r0, [r2, #1]
 80025f6:	f000 bf65 	b.w	80034c4 <vGBFunctionBIT>
 80025fa:	bf00      	nop
 80025fc:	24001650 	.word	0x24001650

08002600 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002600:	4a02      	ldr	r2, [pc, #8]	; (800260c <vBIT_7_B+0xc>)
 8002602:	2107      	movs	r1, #7
 8002604:	78d0      	ldrb	r0, [r2, #3]
 8002606:	f000 bf5d 	b.w	80034c4 <vGBFunctionBIT>
 800260a:	bf00      	nop
 800260c:	24001650 	.word	0x24001650

08002610 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002610:	4a02      	ldr	r2, [pc, #8]	; (800261c <vBIT_7_C+0xc>)
 8002612:	2107      	movs	r1, #7
 8002614:	7890      	ldrb	r0, [r2, #2]
 8002616:	f000 bf55 	b.w	80034c4 <vGBFunctionBIT>
 800261a:	bf00      	nop
 800261c:	24001650 	.word	0x24001650

08002620 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 8002620:	4a02      	ldr	r2, [pc, #8]	; (800262c <vBIT_7_D+0xc>)
 8002622:	2107      	movs	r1, #7
 8002624:	7950      	ldrb	r0, [r2, #5]
 8002626:	f000 bf4d 	b.w	80034c4 <vGBFunctionBIT>
 800262a:	bf00      	nop
 800262c:	24001650 	.word	0x24001650

08002630 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 8002630:	4a02      	ldr	r2, [pc, #8]	; (800263c <vBIT_7_E+0xc>)
 8002632:	2107      	movs	r1, #7
 8002634:	7910      	ldrb	r0, [r2, #4]
 8002636:	f000 bf45 	b.w	80034c4 <vGBFunctionBIT>
 800263a:	bf00      	nop
 800263c:	24001650 	.word	0x24001650

08002640 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 8002640:	4a02      	ldr	r2, [pc, #8]	; (800264c <vBIT_7_H+0xc>)
 8002642:	2107      	movs	r1, #7
 8002644:	79d0      	ldrb	r0, [r2, #7]
 8002646:	f000 bf3d 	b.w	80034c4 <vGBFunctionBIT>
 800264a:	bf00      	nop
 800264c:	24001650 	.word	0x24001650

08002650 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <vBIT_7_L+0xc>)
 8002652:	2107      	movs	r1, #7
 8002654:	7990      	ldrb	r0, [r2, #6]
 8002656:	f000 bf35 	b.w	80034c4 <vGBFunctionBIT>
 800265a:	bf00      	nop
 800265c:	24001650 	.word	0x24001650

08002660 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 8002660:	b510      	push	{r4, lr}
 8002662:	4c05      	ldr	r4, [pc, #20]	; (8002678 <vBIT_7_HL+0x18>)
 8002664:	88e0      	ldrh	r0, [r4, #6]
 8002666:	f001 f805 	bl	8003674 <ucGBMemoryRead>
 800266a:	4622      	mov	r2, r4
 800266c:	2107      	movs	r1, #7
 800266e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002672:	f000 bf27 	b.w	80034c4 <vGBFunctionBIT>
 8002676:	bf00      	nop
 8002678:	24001650 	.word	0x24001650

0800267c <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 800267c:	4a02      	ldr	r2, [pc, #8]	; (8002688 <vBIT_7_A+0xc>)
 800267e:	2107      	movs	r1, #7
 8002680:	7850      	ldrb	r0, [r2, #1]
 8002682:	f000 bf1f 	b.w	80034c4 <vGBFunctionBIT>
 8002686:	bf00      	nop
 8002688:	24001650 	.word	0x24001650

0800268c <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <vRES_0_HL+0x1c>)
 800268e:	2100      	movs	r1, #0
 8002690:	b510      	push	{r4, lr}
 8002692:	88dc      	ldrh	r4, [r3, #6]
 8002694:	4620      	mov	r0, r4
 8002696:	f000 ff2d 	bl	80034f4 <ucGBFunctionRESHL>
 800269a:	4601      	mov	r1, r0
 800269c:	4620      	mov	r0, r4
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a2:	f001 b80f 	b.w	80036c4 <vGBMemoryWrite>
 80026a6:	bf00      	nop
 80026a8:	24001650 	.word	0x24001650

080026ac <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <vRES_1_HL+0x1c>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	b510      	push	{r4, lr}
 80026b2:	88dc      	ldrh	r4, [r3, #6]
 80026b4:	4620      	mov	r0, r4
 80026b6:	f000 ff1d 	bl	80034f4 <ucGBFunctionRESHL>
 80026ba:	4601      	mov	r1, r0
 80026bc:	4620      	mov	r0, r4
 80026be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c2:	f000 bfff 	b.w	80036c4 <vGBMemoryWrite>
 80026c6:	bf00      	nop
 80026c8:	24001650 	.word	0x24001650

080026cc <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <vRES_2_HL+0x1c>)
 80026ce:	2102      	movs	r1, #2
 80026d0:	b510      	push	{r4, lr}
 80026d2:	88dc      	ldrh	r4, [r3, #6]
 80026d4:	4620      	mov	r0, r4
 80026d6:	f000 ff0d 	bl	80034f4 <ucGBFunctionRESHL>
 80026da:	4601      	mov	r1, r0
 80026dc:	4620      	mov	r0, r4
 80026de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e2:	f000 bfef 	b.w	80036c4 <vGBMemoryWrite>
 80026e6:	bf00      	nop
 80026e8:	24001650 	.word	0x24001650

080026ec <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <vRES_3_HL+0x1c>)
 80026ee:	2103      	movs	r1, #3
 80026f0:	b510      	push	{r4, lr}
 80026f2:	88dc      	ldrh	r4, [r3, #6]
 80026f4:	4620      	mov	r0, r4
 80026f6:	f000 fefd 	bl	80034f4 <ucGBFunctionRESHL>
 80026fa:	4601      	mov	r1, r0
 80026fc:	4620      	mov	r0, r4
 80026fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002702:	f000 bfdf 	b.w	80036c4 <vGBMemoryWrite>
 8002706:	bf00      	nop
 8002708:	24001650 	.word	0x24001650

0800270c <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <vRES_4_HL+0x1c>)
 800270e:	2104      	movs	r1, #4
 8002710:	b510      	push	{r4, lr}
 8002712:	88dc      	ldrh	r4, [r3, #6]
 8002714:	4620      	mov	r0, r4
 8002716:	f000 feed 	bl	80034f4 <ucGBFunctionRESHL>
 800271a:	4601      	mov	r1, r0
 800271c:	4620      	mov	r0, r4
 800271e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002722:	f000 bfcf 	b.w	80036c4 <vGBMemoryWrite>
 8002726:	bf00      	nop
 8002728:	24001650 	.word	0x24001650

0800272c <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <vRES_5_HL+0x1c>)
 800272e:	2105      	movs	r1, #5
 8002730:	b510      	push	{r4, lr}
 8002732:	88dc      	ldrh	r4, [r3, #6]
 8002734:	4620      	mov	r0, r4
 8002736:	f000 fedd 	bl	80034f4 <ucGBFunctionRESHL>
 800273a:	4601      	mov	r1, r0
 800273c:	4620      	mov	r0, r4
 800273e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002742:	f000 bfbf 	b.w	80036c4 <vGBMemoryWrite>
 8002746:	bf00      	nop
 8002748:	24001650 	.word	0x24001650

0800274c <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <vRES_6_HL+0x1c>)
 800274e:	2106      	movs	r1, #6
 8002750:	b510      	push	{r4, lr}
 8002752:	88dc      	ldrh	r4, [r3, #6]
 8002754:	4620      	mov	r0, r4
 8002756:	f000 fecd 	bl	80034f4 <ucGBFunctionRESHL>
 800275a:	4601      	mov	r1, r0
 800275c:	4620      	mov	r0, r4
 800275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002762:	f000 bfaf 	b.w	80036c4 <vGBMemoryWrite>
 8002766:	bf00      	nop
 8002768:	24001650 	.word	0x24001650

0800276c <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <vRES_7_HL+0x1c>)
 800276e:	2107      	movs	r1, #7
 8002770:	b510      	push	{r4, lr}
 8002772:	88dc      	ldrh	r4, [r3, #6]
 8002774:	4620      	mov	r0, r4
 8002776:	f000 febd 	bl	80034f4 <ucGBFunctionRESHL>
 800277a:	4601      	mov	r1, r0
 800277c:	4620      	mov	r0, r4
 800277e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002782:	f000 bf9f 	b.w	80036c4 <vGBMemoryWrite>
 8002786:	bf00      	nop
 8002788:	24001650 	.word	0x24001650

0800278c <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <vSET_0_HL+0x1c>)
 800278e:	2100      	movs	r1, #0
 8002790:	b510      	push	{r4, lr}
 8002792:	88dc      	ldrh	r4, [r3, #6]
 8002794:	4620      	mov	r0, r4
 8002796:	f000 feb9 	bl	800350c <ucGBFunctionSETHL>
 800279a:	4601      	mov	r1, r0
 800279c:	4620      	mov	r0, r4
 800279e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a2:	f000 bf8f 	b.w	80036c4 <vGBMemoryWrite>
 80027a6:	bf00      	nop
 80027a8:	24001650 	.word	0x24001650

080027ac <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <vSET_1_HL+0x1c>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	b510      	push	{r4, lr}
 80027b2:	88dc      	ldrh	r4, [r3, #6]
 80027b4:	4620      	mov	r0, r4
 80027b6:	f000 fea9 	bl	800350c <ucGBFunctionSETHL>
 80027ba:	4601      	mov	r1, r0
 80027bc:	4620      	mov	r0, r4
 80027be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c2:	f000 bf7f 	b.w	80036c4 <vGBMemoryWrite>
 80027c6:	bf00      	nop
 80027c8:	24001650 	.word	0x24001650

080027cc <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <vSET_2_HL+0x1c>)
 80027ce:	2102      	movs	r1, #2
 80027d0:	b510      	push	{r4, lr}
 80027d2:	88dc      	ldrh	r4, [r3, #6]
 80027d4:	4620      	mov	r0, r4
 80027d6:	f000 fe99 	bl	800350c <ucGBFunctionSETHL>
 80027da:	4601      	mov	r1, r0
 80027dc:	4620      	mov	r0, r4
 80027de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e2:	f000 bf6f 	b.w	80036c4 <vGBMemoryWrite>
 80027e6:	bf00      	nop
 80027e8:	24001650 	.word	0x24001650

080027ec <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <vSET_3_HL+0x1c>)
 80027ee:	2103      	movs	r1, #3
 80027f0:	b510      	push	{r4, lr}
 80027f2:	88dc      	ldrh	r4, [r3, #6]
 80027f4:	4620      	mov	r0, r4
 80027f6:	f000 fe89 	bl	800350c <ucGBFunctionSETHL>
 80027fa:	4601      	mov	r1, r0
 80027fc:	4620      	mov	r0, r4
 80027fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002802:	f000 bf5f 	b.w	80036c4 <vGBMemoryWrite>
 8002806:	bf00      	nop
 8002808:	24001650 	.word	0x24001650

0800280c <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <vSET_4_HL+0x1c>)
 800280e:	2104      	movs	r1, #4
 8002810:	b510      	push	{r4, lr}
 8002812:	88dc      	ldrh	r4, [r3, #6]
 8002814:	4620      	mov	r0, r4
 8002816:	f000 fe79 	bl	800350c <ucGBFunctionSETHL>
 800281a:	4601      	mov	r1, r0
 800281c:	4620      	mov	r0, r4
 800281e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002822:	f000 bf4f 	b.w	80036c4 <vGBMemoryWrite>
 8002826:	bf00      	nop
 8002828:	24001650 	.word	0x24001650

0800282c <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <vSET_5_HL+0x1c>)
 800282e:	2105      	movs	r1, #5
 8002830:	b510      	push	{r4, lr}
 8002832:	88dc      	ldrh	r4, [r3, #6]
 8002834:	4620      	mov	r0, r4
 8002836:	f000 fe69 	bl	800350c <ucGBFunctionSETHL>
 800283a:	4601      	mov	r1, r0
 800283c:	4620      	mov	r0, r4
 800283e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002842:	f000 bf3f 	b.w	80036c4 <vGBMemoryWrite>
 8002846:	bf00      	nop
 8002848:	24001650 	.word	0x24001650

0800284c <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <vSET_6_HL+0x1c>)
 800284e:	2106      	movs	r1, #6
 8002850:	b510      	push	{r4, lr}
 8002852:	88dc      	ldrh	r4, [r3, #6]
 8002854:	4620      	mov	r0, r4
 8002856:	f000 fe59 	bl	800350c <ucGBFunctionSETHL>
 800285a:	4601      	mov	r1, r0
 800285c:	4620      	mov	r0, r4
 800285e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002862:	f000 bf2f 	b.w	80036c4 <vGBMemoryWrite>
 8002866:	bf00      	nop
 8002868:	24001650 	.word	0x24001650

0800286c <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <vSET_7_HL+0x1c>)
 800286e:	2107      	movs	r1, #7
 8002870:	b510      	push	{r4, lr}
 8002872:	88dc      	ldrh	r4, [r3, #6]
 8002874:	4620      	mov	r0, r4
 8002876:	f000 fe49 	bl	800350c <ucGBFunctionSETHL>
 800287a:	4601      	mov	r1, r0
 800287c:	4620      	mov	r0, r4
 800287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002882:	f000 bf1f 	b.w	80036c4 <vGBMemoryWrite>
 8002886:	bf00      	nop
 8002888:	24001650 	.word	0x24001650

0800288c <vCCF>:
void vCCF(){          vResetBit(&reg.F, N_FLAG); vResetBit(&reg.F, H_FLAG); (ucCheckBit(reg.F, C_FLAG)) ? vResetBit(&reg.F, C_FLAG) : vSetBit(&reg.F, C_FLAG);}
 800288c:	b510      	push	{r4, lr}
 800288e:	4c0d      	ldr	r4, [pc, #52]	; (80028c4 <vCCF+0x38>)
 8002890:	2106      	movs	r1, #6
 8002892:	4620      	mov	r0, r4
 8002894:	f000 f9ea 	bl	8002c6c <vResetBit>
 8002898:	4620      	mov	r0, r4
 800289a:	2105      	movs	r1, #5
 800289c:	f000 f9e6 	bl	8002c6c <vResetBit>
 80028a0:	7820      	ldrb	r0, [r4, #0]
 80028a2:	2104      	movs	r1, #4
 80028a4:	f000 f9ea 	bl	8002c7c <ucCheckBit>
 80028a8:	b128      	cbz	r0, 80028b6 <vCCF+0x2a>
 80028aa:	4620      	mov	r0, r4
 80028ac:	2104      	movs	r1, #4
 80028ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b2:	f000 b9db 	b.w	8002c6c <vResetBit>
 80028b6:	4620      	mov	r0, r4
 80028b8:	2104      	movs	r1, #4
 80028ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028be:	f000 b9cd 	b.w	8002c5c <vSetBit>
 80028c2:	bf00      	nop
 80028c4:	24001650 	.word	0x24001650

080028c8 <vRET_C.part.0>:
void vRET_NZ(){       ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028c8:	4901      	ldr	r1, [pc, #4]	; (80028d0 <vRET_C.part.0+0x8>)
 80028ca:	1e88      	subs	r0, r1, #2
 80028cc:	f000 bc26 	b.w	800311c <vGBFunctionRET>
 80028d0:	2400165a 	.word	0x2400165a

080028d4 <vRET_NZ>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	4c0b      	ldr	r4, [pc, #44]	; (8002904 <vRET_NZ+0x30>)
 80028d8:	2107      	movs	r1, #7
 80028da:	7820      	ldrb	r0, [r4, #0]
 80028dc:	f000 f9ce 	bl	8002c7c <ucCheckBit>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <vRET_NZ+0x34>)
 80028e4:	f04f 0107 	mov.w	r1, #7
 80028e8:	bf14      	ite	ne
 80028ea:	2208      	movne	r2, #8
 80028ec:	2214      	moveq	r2, #20
 80028ee:	7820      	ldrb	r0, [r4, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	f000 f9c3 	bl	8002c7c <ucCheckBit>
 80028f6:	b100      	cbz	r0, 80028fa <vRET_NZ+0x26>
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fe:	f7ff bfe3 	b.w	80028c8 <vRET_C.part.0>
 8002902:	bf00      	nop
 8002904:	24001650 	.word	0x24001650
 8002908:	2400109c 	.word	0x2400109c

0800290c <vRET_Z>:
void vRET_Z(){        ucCustomDuration = (ucCheckBit(reg.F, Z_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 800290c:	b510      	push	{r4, lr}
 800290e:	4c0b      	ldr	r4, [pc, #44]	; (800293c <vRET_Z+0x30>)
 8002910:	2107      	movs	r1, #7
 8002912:	7820      	ldrb	r0, [r4, #0]
 8002914:	f000 f9b2 	bl	8002c7c <ucCheckBit>
 8002918:	2800      	cmp	r0, #0
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <vRET_Z+0x34>)
 800291c:	f04f 0107 	mov.w	r1, #7
 8002920:	bf14      	ite	ne
 8002922:	2214      	movne	r2, #20
 8002924:	2208      	moveq	r2, #8
 8002926:	7820      	ldrb	r0, [r4, #0]
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	f000 f9a7 	bl	8002c7c <ucCheckBit>
 800292e:	b900      	cbnz	r0, 8002932 <vRET_Z+0x26>
 8002930:	bd10      	pop	{r4, pc}
 8002932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002936:	f7ff bfc7 	b.w	80028c8 <vRET_C.part.0>
 800293a:	bf00      	nop
 800293c:	24001650 	.word	0x24001650
 8002940:	2400109c 	.word	0x2400109c

08002944 <vRET_NC>:
void vRET_NC(){       ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  8 : 20; if(ucCheckBit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002944:	b510      	push	{r4, lr}
 8002946:	4c0b      	ldr	r4, [pc, #44]	; (8002974 <vRET_NC+0x30>)
 8002948:	2104      	movs	r1, #4
 800294a:	7820      	ldrb	r0, [r4, #0]
 800294c:	f000 f996 	bl	8002c7c <ucCheckBit>
 8002950:	2800      	cmp	r0, #0
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <vRET_NC+0x34>)
 8002954:	f04f 0104 	mov.w	r1, #4
 8002958:	bf14      	ite	ne
 800295a:	2208      	movne	r2, #8
 800295c:	2214      	moveq	r2, #20
 800295e:	7820      	ldrb	r0, [r4, #0]
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	f000 f98b 	bl	8002c7c <ucCheckBit>
 8002966:	b100      	cbz	r0, 800296a <vRET_NC+0x26>
 8002968:	bd10      	pop	{r4, pc}
 800296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800296e:	f7ff bfab 	b.w	80028c8 <vRET_C.part.0>
 8002972:	bf00      	nop
 8002974:	24001650 	.word	0x24001650
 8002978:	2400109c 	.word	0x2400109c

0800297c <vRET_C>:
void vRET_C(){        ucCustomDuration =(ucCheckBit(reg.F, C_FLAG)) ?  20 : 8; if(ucCheckBit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 800297c:	b510      	push	{r4, lr}
 800297e:	4c0b      	ldr	r4, [pc, #44]	; (80029ac <vRET_C+0x30>)
 8002980:	2104      	movs	r1, #4
 8002982:	7820      	ldrb	r0, [r4, #0]
 8002984:	f000 f97a 	bl	8002c7c <ucCheckBit>
 8002988:	2800      	cmp	r0, #0
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <vRET_C+0x34>)
 800298c:	f04f 0104 	mov.w	r1, #4
 8002990:	bf14      	ite	ne
 8002992:	2214      	movne	r2, #20
 8002994:	2208      	moveq	r2, #8
 8002996:	7820      	ldrb	r0, [r4, #0]
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	f000 f96f 	bl	8002c7c <ucCheckBit>
 800299e:	b900      	cbnz	r0, 80029a2 <vRET_C+0x26>
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029a6:	f7ff bf8f 	b.w	80028c8 <vRET_C.part.0>
 80029aa:	bf00      	nop
 80029ac:	24001650 	.word	0x24001650
 80029b0:	2400109c 	.word	0x2400109c

080029b4 <vLD_A_A>:
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <vLD_B_B>:
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <vLD_C_C>:
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <vLD_D_D>:
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <vLD_E_E>:
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <vLD_H_H>:
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <vLD_L_L>:
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <ucGetTstate>:

/**
 * @returns amount of T-states that the current instruction takes to execute
 */
uint8_t ucGetTstate(){
    return uctStates;
 80029d0:	4b01      	ldr	r3, [pc, #4]	; (80029d8 <ucGetTstate+0x8>)
}
 80029d2:	7818      	ldrb	r0, [r3, #0]
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	240010a2 	.word	0x240010a2

080029dc <prvGBCPUInterruptHandler>:

/**
 * @brief If the corresponding IE and IF are both set then jump to the corresponding ISR
 * @returns Nothing
 */
void prvGBCPUInterruptHandler(){
 80029dc:	b570      	push	{r4, r5, r6, lr}
    if(ucOneCycleInterruptDelay == 1){
 80029de:	4d39      	ldr	r5, [pc, #228]	; (8002ac4 <prvGBCPUInterruptHandler+0xe8>)
 80029e0:	782c      	ldrb	r4, [r5, #0]
 80029e2:	2c01      	cmp	r4, #1
 80029e4:	d002      	beq.n	80029ec <prvGBCPUInterruptHandler+0x10>
                uctStates += 5*4;
            }
        }

    }else{
        ucOneCycleInterruptDelay++;
 80029e6:	3401      	adds	r4, #1
 80029e8:	702c      	strb	r4, [r5, #0]
    }
}
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
        if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 80029ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029f0:	f000 fe40 	bl	8003674 <ucGBMemoryRead>
 80029f4:	4606      	mov	r6, r0
 80029f6:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029fa:	f000 fe3b 	bl	8003674 <ucGBMemoryRead>
 80029fe:	4030      	ands	r0, r6
 8002a00:	06c6      	lsls	r6, r0, #27
 8002a02:	d0f2      	beq.n	80029ea <prvGBCPUInterruptHandler+0xe>
            ucHALTED = 0;
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <prvGBCPUInterruptHandler+0xec>)
            ucInterruptMasterEnable = 0;
 8002a06:	2600      	movs	r6, #0
 8002a08:	4a30      	ldr	r2, [pc, #192]	; (8002acc <prvGBCPUInterruptHandler+0xf0>)
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
            ucHALTED = 0;
 8002a0e:	701e      	strb	r6, [r3, #0]
            ucInterruptMasterEnable = 0;
 8002a10:	7016      	strb	r6, [r2, #0]
            ucOneCycleInterruptDelay = 0;
 8002a12:	702e      	strb	r6, [r5, #0]
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a14:	f000 fe2e 	bl	8003674 <ucGBMemoryRead>
 8002a18:	4605      	mov	r5, r0
 8002a1a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a1e:	f000 fe29 	bl	8003674 <ucGBMemoryRead>
 8002a22:	4028      	ands	r0, r5
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a24:	07c5      	lsls	r5, r0, #31
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a26:	b2c3      	uxtb	r3, r0
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a28:	d418      	bmi.n	8002a5c <prvGBCPUInterruptHandler+0x80>
            }else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a2a:	0798      	lsls	r0, r3, #30
 8002a2c:	d423      	bmi.n	8002a76 <prvGBCPUInterruptHandler+0x9a>
            }else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a2e:	0759      	lsls	r1, r3, #29
 8002a30:	d42e      	bmi.n	8002a90 <prvGBCPUInterruptHandler+0xb4>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002a32:	071a      	lsls	r2, r3, #28
 8002a34:	d439      	bmi.n	8002aaa <prvGBCPUInterruptHandler+0xce>
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = JOYPAD_VECTOR;
 8002a36:	06db      	lsls	r3, r3, #27
 8002a38:	d5d7      	bpl.n	80029ea <prvGBCPUInterruptHandler+0xe>
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a40:	f000 fdf6 	bl	8003630 <vGBMemoryResetBit>
 8002a44:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <prvGBCPUInterruptHandler+0xf4>)
 8002a46:	1e88      	subs	r0, r1, #2
 8002a48:	f000 fb86 	bl	8003158 <vGBFunctionPUSH>
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <prvGBCPUInterruptHandler+0xf8>)
 8002a4e:	2260      	movs	r2, #96	; 0x60
 8002a50:	815a      	strh	r2, [r3, #10]
                uctStates += 5*4;
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <prvGBCPUInterruptHandler+0xfc>)
 8002a54:	7813      	ldrb	r3, [r2, #0]
 8002a56:	3314      	adds	r3, #20
 8002a58:	7013      	strb	r3, [r2, #0]
}
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a62:	f000 fde5 	bl	8003630 <vGBMemoryResetBit>
 8002a66:	491a      	ldr	r1, [pc, #104]	; (8002ad0 <prvGBCPUInterruptHandler+0xf4>)
 8002a68:	1e88      	subs	r0, r1, #2
 8002a6a:	f000 fb75 	bl	8003158 <vGBFunctionPUSH>
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <prvGBCPUInterruptHandler+0xf8>)
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002a74:	e7ed      	b.n	8002a52 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a76:	4621      	mov	r1, r4
 8002a78:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a7c:	f000 fdd8 	bl	8003630 <vGBMemoryResetBit>
 8002a80:	4913      	ldr	r1, [pc, #76]	; (8002ad0 <prvGBCPUInterruptHandler+0xf4>)
 8002a82:	1e88      	subs	r0, r1, #2
 8002a84:	f000 fb68 	bl	8003158 <vGBFunctionPUSH>
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <prvGBCPUInterruptHandler+0xf8>)
 8002a8a:	2248      	movs	r2, #72	; 0x48
 8002a8c:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002a8e:	e7e0      	b.n	8002a52 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a90:	2102      	movs	r1, #2
 8002a92:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a96:	f000 fdcb 	bl	8003630 <vGBMemoryResetBit>
 8002a9a:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <prvGBCPUInterruptHandler+0xf4>)
 8002a9c:	1e88      	subs	r0, r1, #2
 8002a9e:	f000 fb5b 	bl	8003158 <vGBFunctionPUSH>
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <prvGBCPUInterruptHandler+0xf8>)
 8002aa4:	2250      	movs	r2, #80	; 0x50
 8002aa6:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002aa8:	e7d3      	b.n	8002a52 <prvGBCPUInterruptHandler+0x76>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002aaa:	2103      	movs	r1, #3
 8002aac:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ab0:	f000 fdbe 	bl	8003630 <vGBMemoryResetBit>
 8002ab4:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <prvGBCPUInterruptHandler+0xf4>)
 8002ab6:	1e88      	subs	r0, r1, #2
 8002ab8:	f000 fb4e 	bl	8003158 <vGBFunctionPUSH>
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <prvGBCPUInterruptHandler+0xf8>)
 8002abe:	2258      	movs	r2, #88	; 0x58
 8002ac0:	815a      	strh	r2, [r3, #10]
            if( ucInterrTrig == 1){
 8002ac2:	e7c6      	b.n	8002a52 <prvGBCPUInterruptHandler+0x76>
 8002ac4:	240010a0 	.word	0x240010a0
 8002ac8:	2400109d 	.word	0x2400109d
 8002acc:	2400109e 	.word	0x2400109e
 8002ad0:	2400165a 	.word	0x2400165a
 8002ad4:	24001650 	.word	0x24001650
 8002ad8:	240010a2 	.word	0x240010a2

08002adc <prvGBCPUHaltedHandler>:
/**
 * @brief If the CPU is halted and ucInterruptMasterEnable is not set, then this function will unhalt the CPU if both IE and IF flags are set
 * without jumping to the ISR
 * @returns Nothing
 */
void prvGBCPUHaltedHandler(){
 8002adc:	b538      	push	{r3, r4, r5, lr}
    if(ucOneCycleInterruptDelay == 1){
 8002ade:	4c13      	ldr	r4, [pc, #76]	; (8002b2c <prvGBCPUHaltedHandler+0x50>)
 8002ae0:	7823      	ldrb	r3, [r4, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d002      	beq.n	8002aec <prvGBCPUHaltedHandler+0x10>
            }else if(InterruptSetandEn &  SERIAL_INTERRUPT){ ucHALTED = 0;
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
            }
        }
    }else{
        ucOneCycleInterruptDelay++;
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	7023      	strb	r3, [r4, #0]
    }
}
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
        if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002af0:	f000 fdc0 	bl	8003674 <ucGBMemoryRead>
 8002af4:	4605      	mov	r5, r0
 8002af6:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002afa:	f000 fdbb 	bl	8003674 <ucGBMemoryRead>
 8002afe:	4028      	ands	r0, r5
 8002b00:	06c2      	lsls	r2, r0, #27
 8002b02:	d0f2      	beq.n	8002aea <prvGBCPUHaltedHandler+0xe>
            ucInterruptMasterEnable = 0;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <prvGBCPUHaltedHandler+0x54>)
 8002b06:	2500      	movs	r5, #0
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b08:	f64f 70ff 	movw	r0, #65535	; 0xffff
            ucInterruptMasterEnable = 0;
 8002b0c:	701d      	strb	r5, [r3, #0]
            ucOneCycleInterruptDelay = 0;
 8002b0e:	7025      	strb	r5, [r4, #0]
            uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002b10:	f000 fdb0 	bl	8003674 <ucGBMemoryRead>
 8002b14:	4604      	mov	r4, r0
 8002b16:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b1a:	f000 fdab 	bl	8003674 <ucGBMemoryRead>
 8002b1e:	4020      	ands	r0, r4
            }else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
 8002b20:	06c3      	lsls	r3, r0, #27
 8002b22:	d0e2      	beq.n	8002aea <prvGBCPUHaltedHandler+0xe>
            if      (InterruptSetandEn &  VBLANK_INTERRUPT){ ucHALTED = 0;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <prvGBCPUHaltedHandler+0x58>)
 8002b26:	701d      	strb	r5, [r3, #0]
}
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
 8002b2a:	bf00      	nop
 8002b2c:	240010a0 	.word	0x240010a0
 8002b30:	2400109e 	.word	0x2400109e
 8002b34:	2400109d 	.word	0x2400109d

08002b38 <prvGBCPUinstr>:
/**
 * @brief fetch, decode and execute 1 CPU instruction, increment timers and jump to interrupt handler
 * @param opcode Opcode of instruction to be executed
 * @returns Nothing
 */
void prvGBCPUinstr(uint8_t opcode){
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if(reg.PC == usDebugPC){
 8002b3a:	4e2c      	ldr	r6, [pc, #176]	; (8002bec <prvGBCPUinstr+0xb4>)
void prvGBCPUinstr(uint8_t opcode){
 8002b3c:	4604      	mov	r4, r0
    if(reg.PC == usDebugPC){
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <prvGBCPUinstr+0xb8>)
 8002b40:	8972      	ldrh	r2, [r6, #10]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d103      	bne.n	8002b50 <prvGBCPUinstr+0x18>
        ucMemoryBreakPointTrigger++;
 8002b48:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <prvGBCPUinstr+0xbc>)
 8002b4a:	7813      	ldrb	r3, [r2, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	7013      	strb	r3, [r2, #0]
    }

    if(!ucHALTED){
 8002b50:	4d29      	ldr	r5, [pc, #164]	; (8002bf8 <prvGBCPUinstr+0xc0>)
 8002b52:	782b      	ldrb	r3, [r5, #0]
 8002b54:	b163      	cbz	r3, 8002b70 <prvGBCPUinstr+0x38>
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <prvGBCPUinstr+0xc4>)
 8002b58:	7818      	ldrb	r0, [r3, #0]
		    uctStates = instructions[opcode].Tstate;
		}

    }

    vGBMemoryIncTimers(uctStates >> 2);
 8002b5a:	0880      	lsrs	r0, r0, #2
 8002b5c:	f000 fe5e 	bl	800381c <vGBMemoryIncTimers>

    if(ucInterruptMasterEnable == 1){
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <prvGBCPUinstr+0xc8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d018      	beq.n	8002b9a <prvGBCPUinstr+0x62>
	    prvGBCPUInterruptHandler();
    }else if(ucHALTED == 1){
 8002b68:	782b      	ldrb	r3, [r5, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d01e      	beq.n	8002bac <prvGBCPUinstr+0x74>
	    prvGBCPUHaltedHandler();
    }
}
 8002b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    vGBMemorySetOP(opcode);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f000 fcd5 	bl	8003520 <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b76:	2ccb      	cmp	r4, #203	; 0xcb
 8002b78:	d01c      	beq.n	8002bb4 <prvGBCPUinstr+0x7c>
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <prvGBCPUinstr+0xcc>)
 8002b7c:	8971      	ldrh	r1, [r6, #10]
 8002b7e:	eb02 07c4 	add.w	r7, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002b82:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b86:	793b      	ldrb	r3, [r7, #4]
 8002b88:	440b      	add	r3, r1
 8002b8a:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002b8c:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002b8e:	7978      	ldrb	r0, [r7, #5]
 8002b90:	28ff      	cmp	r0, #255	; 0xff
 8002b92:	d006      	beq.n	8002ba2 <prvGBCPUinstr+0x6a>
		    uctStates = instructions[opcode].Tstate;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <prvGBCPUinstr+0xc4>)
 8002b96:	7018      	strb	r0, [r3, #0]
 8002b98:	e7df      	b.n	8002b5a <prvGBCPUinstr+0x22>
}
 8002b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    prvGBCPUInterruptHandler();
 8002b9e:	f7ff bf1d 	b.w	80029dc <prvGBCPUInterruptHandler>
		    uctStates = ucCustomDuration;
 8002ba2:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <prvGBCPUinstr+0xd0>)
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <prvGBCPUinstr+0xc4>)
 8002ba6:	7810      	ldrb	r0, [r2, #0]
 8002ba8:	7018      	strb	r0, [r3, #0]
 8002baa:	e7d6      	b.n	8002b5a <prvGBCPUinstr+0x22>
}
 8002bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    prvGBCPUHaltedHandler();
 8002bb0:	f7ff bf94 	b.w	8002adc <prvGBCPUHaltedHandler>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bb4:	8970      	ldrh	r0, [r6, #10]
 8002bb6:	4c15      	ldr	r4, [pc, #84]	; (8002c0c <prvGBCPUinstr+0xd4>)
 8002bb8:	3001      	adds	r0, #1
 8002bba:	b280      	uxth	r0, r0
 8002bbc:	f000 fd5a 	bl	8003674 <ucGBMemoryRead>
 8002bc0:	8971      	ldrh	r1, [r6, #10]
 8002bc2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <prvGBCPUinstr+0xcc>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bc8:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002bca:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bce:	440b      	add	r3, r1
 8002bd0:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002bd2:	4790      	blx	r2
		    uctStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002bd4:	8970      	ldrh	r0, [r6, #10]
 8002bd6:	3801      	subs	r0, #1
 8002bd8:	b280      	uxth	r0, r0
 8002bda:	f000 fd4b 	bl	8003674 <ucGBMemoryRead>
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <prvGBCPUinstr+0xc4>)
 8002be0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002be4:	7940      	ldrb	r0, [r0, #5]
 8002be6:	7018      	strb	r0, [r3, #0]
 8002be8:	e7b7      	b.n	8002b5a <prvGBCPUinstr+0x22>
 8002bea:	bf00      	nop
 8002bec:	24001650 	.word	0x24001650
 8002bf0:	2400100c 	.word	0x2400100c
 8002bf4:	2400109f 	.word	0x2400109f
 8002bf8:	2400109d 	.word	0x2400109d
 8002bfc:	240010a2 	.word	0x240010a2
 8002c00:	2400109e 	.word	0x2400109e
 8002c04:	2400000c 	.word	0x2400000c
 8002c08:	2400109c 	.word	0x2400109c
 8002c0c:	2400080c 	.word	0x2400080c

08002c10 <vGBCPUStep>:
void vGBCPUStep(){
 8002c10:	b538      	push	{r3, r4, r5, lr}
    if(reg.PC <= 0xFF){
 8002c12:	4c0e      	ldr	r4, [pc, #56]	; (8002c4c <vGBCPUStep+0x3c>)
 8002c14:	8960      	ldrh	r0, [r4, #10]
 8002c16:	28ff      	cmp	r0, #255	; 0xff
 8002c18:	d902      	bls.n	8002c20 <vGBCPUStep+0x10>
        if(n == 0){
 8002c1a:	4d0d      	ldr	r5, [pc, #52]	; (8002c50 <vGBCPUStep+0x40>)
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	b12b      	cbz	r3, 8002c2c <vGBCPUStep+0x1c>
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c20:	f000 fd28 	bl	8003674 <ucGBMemoryRead>
}
 8002c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c28:	f7ff bf86 	b.w	8002b38 <prvGBCPUinstr>
            vGBMemoryLoad(getRomPointer(), 256);
 8002c2c:	f001 fae0 	bl	80041f0 <getRomPointer>
 8002c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c34:	f000 fc7a 	bl	800352c <vGBMemoryLoad>
            n = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	8960      	ldrh	r0, [r4, #10]
 8002c3c:	602b      	str	r3, [r5, #0]
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c3e:	f000 fd19 	bl	8003674 <ucGBMemoryRead>
}
 8002c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        prvGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c46:	f7ff bf77 	b.w	8002b38 <prvGBCPUinstr>
 8002c4a:	bf00      	nop
 8002c4c:	24001650 	.word	0x24001650
 8002c50:	24001098 	.word	0x24001098

08002c54 <usConcat16BitBigEndian>:
 * @param x Lower address
 * @param y Higher address
 * @returns Newly concatenated short value
 */
uint16_t usConcat16BitBigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002c54:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002c58:	b280      	uxth	r0, r0
 8002c5a:	4770      	bx	lr

08002c5c <vSetBit>:
 * @param n Register/memory location
 * @param bit The bit to be set (0 - 7)
 * @returns Nothing
 */
void vSetBit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	fa03 f101 	lsl.w	r1, r3, r1
 8002c62:	7803      	ldrb	r3, [r0, #0]
 8002c64:	4319      	orrs	r1, r3
 8002c66:	7001      	strb	r1, [r0, #0]
}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop

08002c6c <vResetBit>:
 * @param n Register/memory location
 * @param bit The bit to be reset (0 - 7)
 * @returns Nothing
 */
void vResetBit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	fa03 f101 	lsl.w	r1, r3, r1
 8002c72:	7803      	ldrb	r3, [r0, #0]
 8002c74:	ea23 0101 	bic.w	r1, r3, r1
 8002c78:	7001      	strb	r1, [r0, #0]
}
 8002c7a:	4770      	bx	lr

08002c7c <ucCheckBit>:
 * @param n Value of register/memory location
 * @param bit The bit to be checked (0 - 7)
 * @returns Value of checked bit
 */
uint8_t ucCheckBit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002c7c:	4108      	asrs	r0, r1
}
 8002c7e:	f000 0001 	and.w	r0, r0, #1
 8002c82:	4770      	bx	lr

08002c84 <v8bitRegisterINC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002c84:	7803      	ldrb	r3, [r0, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002c8c:	780b      	ldrb	r3, [r1, #0]
 8002c8e:	bf0c      	ite	eq
 8002c90:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002c94:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002c98:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002c9a:	7803      	ldrb	r3, [r0, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ca0:	f991 2000 	ldrsb.w	r2, [r1]
 8002ca4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002ca8:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002caa:	7800      	ldrb	r0, [r0, #0]
 8002cac:	b118      	cbz	r0, 8002cb6 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002cae:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002cb2:	700b      	strb	r3, [r1, #0]
}
 8002cb4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002cb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	700b      	strb	r3, [r1, #0]
}
 8002cbe:	4770      	bx	lr

08002cc0 <v8bitRegisterDEC>:
 * @param reg Pointer to register/memory location
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002cc0:	7803      	ldrb	r3, [r0, #0]
 8002cc2:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002cc6:	780b      	ldrb	r3, [r1, #0]
 8002cc8:	bf14      	ite	ne
 8002cca:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002cce:	f043 0320 	orreq.w	r3, r3, #32
 8002cd2:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002cd4:	7803      	ldrb	r3, [r0, #0]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002cda:	f991 3000 	ldrsb.w	r3, [r1]
 8002cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ce2:	700a      	strb	r2, [r1, #0]
	vSetBit(flagReg, N_FLAG);
	(*reg != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ce4:	7802      	ldrb	r2, [r0, #0]
 8002ce6:	b12a      	cbz	r2, 8002cf4 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf0:	700b      	strb	r3, [r1, #0]
}
 8002cf2:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002cf4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	700b      	strb	r3, [r1, #0]
}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002d00:	7802      	ldrb	r2, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d02:	09d3      	lsrs	r3, r2, #7
 8002d04:	bf0c      	ite	eq
 8002d06:	2300      	moveq	r3, #0
 8002d08:	2310      	movne	r3, #16
 8002d0a:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002d0c:	7803      	ldrb	r3, [r0, #0]
 8002d0e:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002d10:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002d14:	7003      	strb	r3, [r0, #0]
}
 8002d16:	4770      	bx	lr

08002d18 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002d18:	7803      	ldrb	r3, [r0, #0]
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d1a:	f013 0301 	ands.w	r3, r3, #1
 8002d1e:	d007      	beq.n	8002d30 <vGBFunctionRRCA+0x18>
 8002d20:	2310      	movs	r3, #16
 8002d22:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d24:	7803      	ldrb	r3, [r0, #0]
 8002d26:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d2c:	7003      	strb	r3, [r0, #0]
}
 8002d2e:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d30:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d32:	7803      	ldrb	r3, [r0, #0]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) vSetBit(reg, 7);
}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <vGBFunction16bitADD>:
 * @param reg16 value of a 16 bit register
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002d3c:	8803      	ldrh	r3, [r0, #0]
 8002d3e:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d40:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002d42:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002d44:	d517      	bpl.n	8002d76 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002d46:	f992 3000 	ldrsb.w	r3, [r2]
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	b2dc      	uxtb	r4, r3
 8002d50:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002d52:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002d56:	8804      	ldrh	r4, [r0, #0]
 8002d58:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002d5c:	42a5      	cmp	r5, r4
 8002d5e:	d211      	bcs.n	8002d84 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002d60:	f043 0320 	orr.w	r3, r3, #32
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002d68:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d6a:	7813      	ldrb	r3, [r2, #0]
 8002d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	vResetBit(flagReg, N_FLAG);
}
 8002d70:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002d72:	7013      	strb	r3, [r2, #0]
}
 8002d74:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002d76:	f992 4000 	ldrsb.w	r4, [r2]
 8002d7a:	f024 0310 	bic.w	r3, r4, #16
 8002d7e:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002d82:	e7e5      	b.n	8002d50 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002d88:	e7ed      	b.n	8002d66 <vGBFunction16bitADD+0x2a>
 8002d8a:	bf00      	nop

08002d8c <vGBFunctionRLA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d8c:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002d90:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d92:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002d94:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d98:	f002 0210 	and.w	r2, r2, #16
 8002d9c:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002d9e:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002da0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002da4:	7003      	strb	r3, [r0, #0]
}
 8002da6:	4770      	bx	lr

08002da8 <vGBFunctionRRA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002da8:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002daa:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dac:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002dae:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002db0:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002db4:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002db6:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002db8:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002dba:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002dbe:	7003      	strb	r3, [r0, #0]
}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002dc4:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002dc6:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002dc8:	09c9      	lsrs	r1, r1, #7
 8002dca:	d105      	bne.n	8002dd8 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002dcc:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002dce:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002dd0:	fa41 f282 	sxtab	r2, r1, r2
 8002dd4:	801a      	strh	r2, [r3, #0]
		return 12;
 8002dd6:	4770      	bx	lr
		return 8;
 8002dd8:	2008      	movs	r0, #8
	}
}
 8002dda:	4770      	bx	lr

08002ddc <vGBFunctionDAA>:
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002ddc:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002dde:	b410      	push	{r4}
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002de0:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002de4:	7804      	ldrb	r4, [r0, #0]
 8002de6:	b2a3      	uxth	r3, r4
	if(ucCheckBit(*flagReg, N_FLAG) != 0){
 8002de8:	d012      	beq.n	8002e10 <vGBFunctionDAA+0x34>
		if(ucCheckBit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002dea:	0694      	lsls	r4, r2, #26
 8002dec:	bf48      	it	mi
 8002dee:	33fa      	addmi	r3, #250	; 0xfa
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002df0:	06d2      	lsls	r2, r2, #27
 8002df2:	d425      	bmi.n	8002e40 <vGBFunctionDAA+0x64>
	}else{
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
		}else{ vResetBit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002df4:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002df6:	f991 2000 	ldrsb.w	r2, [r1]
 8002dfa:	f022 0320 	bic.w	r3, r2, #32
 8002dfe:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, H_FLAG);
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002e00:	7800      	ldrb	r0, [r0, #0]
 8002e02:	b1b0      	cbz	r0, 8002e32 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002e04:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e0c:	700b      	strb	r3, [r1, #0]
 8002e0e:	4770      	bx	lr
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e10:	f012 0f20 	tst.w	r2, #32
 8002e14:	d017      	beq.n	8002e46 <vGBFunctionDAA+0x6a>
 8002e16:	3306      	adds	r3, #6
 8002e18:	b29b      	uxth	r3, r3
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e1a:	06d4      	lsls	r4, r2, #27
 8002e1c:	d403      	bmi.n	8002e26 <vGBFunctionDAA+0x4a>
 8002e1e:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002e22:	2c90      	cmp	r4, #144	; 0x90
 8002e24:	d914      	bls.n	8002e50 <vGBFunctionDAA+0x74>
 8002e26:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002e28:	f042 0210 	orr.w	r2, r2, #16
		if(ucCheckBit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; vSetBit(flagReg, C_FLAG);
 8002e2c:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002e2e:	700a      	strb	r2, [r1, #0]
}
 8002e30:	e7e0      	b.n	8002df4 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002e36:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	700b      	strb	r3, [r1, #0]
}
 8002e3e:	4770      	bx	lr
		if(ucCheckBit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e40:	33a0      	adds	r3, #160	; 0xa0
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	e7d6      	b.n	8002df4 <vGBFunctionDAA+0x18>
		if(ucCheckBit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e46:	f004 040f 	and.w	r4, r4, #15
 8002e4a:	2c09      	cmp	r4, #9
 8002e4c:	d9e5      	bls.n	8002e1a <vGBFunctionDAA+0x3e>
 8002e4e:	e7e2      	b.n	8002e16 <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002e50:	f022 0210 	bic.w	r2, r2, #16
 8002e54:	700a      	strb	r2, [r1, #0]
}
 8002e56:	e7cd      	b.n	8002df4 <vGBFunctionDAA+0x18>

08002e58 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002e58:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e5a:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8002e5c:	09c9      	lsrs	r1, r1, #7
 8002e5e:	d005      	beq.n	8002e6c <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002e60:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e62:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e64:	fa41 f282 	sxtab	r2, r1, r2
 8002e68:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e6a:	4770      	bx	lr
	}else{
		return 8;
 8002e6c:	2008      	movs	r0, #8
	}
}
 8002e6e:	4770      	bx	lr

08002e70 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002e70:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e72:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002e74:	06c9      	lsls	r1, r1, #27
 8002e76:	d405      	bmi.n	8002e84 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002e78:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e7a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e7c:	fa41 f282 	sxtab	r2, r1, r2
 8002e80:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e82:	4770      	bx	lr
		return 8;
 8002e84:	2008      	movs	r0, #8
	}
}
 8002e86:	4770      	bx	lr

08002e88 <vMemoryLocationINC>:
 * @brief Increment memory location
 * @param loc memory address
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002e8e:	f000 fbf1 	bl	8003674 <ucGBMemoryRead>
 8002e92:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002e96:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8002e98:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002e9a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002e9c:	bf0c      	ite	eq
 8002e9e:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ea2:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002ea6:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002ea8:	f000 fbe4 	bl	8003674 <ucGBMemoryRead>
 8002eac:	4601      	mov	r1, r0
 8002eae:	4628      	mov	r0, r5
 8002eb0:	3101      	adds	r1, #1
 8002eb2:	b2c9      	uxtb	r1, r1
 8002eb4:	f000 fc06 	bl	80036c4 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002eb8:	7823      	ldrb	r3, [r4, #0]
	vResetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002eba:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec0:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ec2:	f000 fbd7 	bl	8003674 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002ec6:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ec8:	b118      	cbz	r0, 8002ed2 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ece:	7023      	strb	r3, [r4, #0]
}
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	7023      	strb	r3, [r4, #0]
}
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop

08002edc <vMemoryLocationDEC>:
 * @brief Decrement memory location
 * @param loc memory address
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	460c      	mov	r4, r1
 8002ee0:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? vResetBit(flagReg, H_FLAG) : vSetBit(flagReg, H_FLAG);
 8002ee2:	f000 fbc7 	bl	8003674 <ucGBMemoryRead>
 8002ee6:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002ee8:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002eea:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002eec:	bf14      	ite	ne
 8002eee:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002ef2:	f043 0320 	orreq.w	r3, r3, #32
 8002ef6:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002ef8:	f000 fbbc 	bl	8003674 <ucGBMemoryRead>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4628      	mov	r0, r5
 8002f00:	3901      	subs	r1, #1
 8002f02:	b2c9      	uxtb	r1, r1
 8002f04:	f000 fbde 	bl	80036c4 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002f08:	7823      	ldrb	r3, [r4, #0]
	vSetBit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f0a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f10:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f12:	f000 fbaf 	bl	8003674 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002f16:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f18:	b118      	cbz	r0, 8002f22 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1e:	7023      	strb	r3, [r4, #0]
}
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f26:	7023      	strb	r3, [r4, #0]
}
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
 8002f2a:	bf00      	nop

08002f2c <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002f2c:	7809      	ldrb	r1, [r1, #0]
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002f2e:	4603      	mov	r3, r0
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8002f30:	06c9      	lsls	r1, r1, #27
 8002f32:	d505      	bpl.n	8002f40 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002f34:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002f36:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002f38:	fa41 f282 	sxtab	r2, r1, r2
 8002f3c:	801a      	strh	r2, [r3, #0]
		return 12;
 8002f3e:	4770      	bx	lr
	}else{
		return 8;
 8002f40:	2008      	movs	r0, #8
	}
}
 8002f42:	4770      	bx	lr

08002f44 <vGBFunctionADD>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002f44:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f46:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f48:	f002 050f 	and.w	r5, r2, #15
 8002f4c:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002f50:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002f52:	1963      	adds	r3, r4, r5
 8002f54:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002f56:	f991 3000 	ldrsb.w	r3, [r1]
 8002f5a:	bfcc      	ite	gt
 8002f5c:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002f60:	f023 0320 	bicle.w	r3, r3, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8002f64:	2aff      	cmp	r2, #255	; 0xff
 8002f66:	dd0d      	ble.n	8002f84 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002f68:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002f6c:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002f6e:	f043 0310 	orr.w	r3, r3, #16
 8002f72:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002f74:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002f76:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f78:	b162      	cbz	r2, 8002f94 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f7e:	bc30      	pop	{r4, r5}
 8002f80:	700b      	strb	r3, [r1, #0]
 8002f82:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f84:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	700b      	strb	r3, [r1, #0]
 8002f8c:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002f8e:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d1f2      	bne.n	8002f7a <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002f98:	bc30      	pop	{r4, r5}
 8002f9a:	700b      	strb	r3, [r1, #0]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <vGBFunctionADC>:
 * @param regA Pointer to the A register
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be added to A register
 * @returns Nothing
 */
void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002fa0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fa2:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fa4:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fa8:	7804      	ldrb	r4, [r0, #0]
 8002faa:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002fae:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fb0:	f004 070f 	and.w	r7, r4, #15
 8002fb4:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + ucCheckBit(*flagReg, C_FLAG);
 8002fb6:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) > 0xF) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8002fb8:	19e2      	adds	r2, r4, r7
 8002fba:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002fbc:	bfcc      	ite	gt
 8002fbe:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002fc2:	f025 0520 	bicle.w	r5, r5, #32
	vResetBit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002fc8:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? vSetBit(flagReg, C_FLAG) : vResetBit(flagReg, C_FLAG);
 8002fca:	dd0d      	ble.n	8002fe8 <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002fcc:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8002fd0:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8002fd2:	f045 0510 	orr.w	r5, r5, #16
 8002fd6:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8002fd8:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002fda:	b163      	cbz	r3, 8002ff6 <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8002fdc:	780b      	ldrb	r3, [r1, #0]
 8002fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fe2:	bcf0      	pop	{r4, r5, r6, r7}
 8002fe4:	700b      	strb	r3, [r1, #0]
 8002fe6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002fe8:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	700d      	strb	r5, [r1, #0]
 8002ff0:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f2      	bne.n	8002fdc <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8002ff6:	780b      	ldrb	r3, [r1, #0]
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8002ffe:	700b      	strb	r3, [r1, #0]
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop

08003004 <vGBFunctionSUB>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003004:	7803      	ldrb	r3, [r0, #0]
 8003006:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8003008:	b430      	push	{r4, r5}
	(regValue > *regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800300a:	d21d      	bcs.n	8003048 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 800300c:	f991 3000 	ldrsb.w	r3, [r1]
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	b2dc      	uxtb	r4, r3
 8003016:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 8003018:	f002 050f 	and.w	r5, r2, #15
 800301c:	7804      	ldrb	r4, [r0, #0]
 800301e:	f004 040f 	and.w	r4, r4, #15
 8003022:	42a5      	cmp	r5, r4
 8003024:	d920      	bls.n	8003068 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	b2db      	uxtb	r3, r3
 800302c:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 800302e:	7803      	ldrb	r3, [r0, #0]
 8003030:	1a9a      	subs	r2, r3, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 8003036:	b172      	cbz	r2, 8003056 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8003038:	780b      	ldrb	r3, [r1, #0]
 800303a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 8003042:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003044:	700b      	strb	r3, [r1, #0]
}
 8003046:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003048:	f991 4000 	ldrsb.w	r4, [r1]
 800304c:	f024 0310 	bic.w	r3, r4, #16
 8003050:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8003054:	e7df      	b.n	8003016 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8003056:	f991 3000 	ldrsb.w	r3, [r1]
 800305a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8003062:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003064:	700b      	strb	r3, [r1, #0]
}
 8003066:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003068:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 800306c:	e7de      	b.n	800302c <vGBFunctionSUB+0x28>
 800306e:	bf00      	nop

08003070 <vGBFunctionSBC>:
 * @param flagReg Pointer to the flag register
 * @param regValue Register/memory location data to be subtracted to A register
 * @returns Nothing
 */
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + ucCheckBit(*flagReg, C_FLAG);
 8003070:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8003072:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 8003074:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + ucCheckBit(*flagReg, C_FLAG)) < 0x0) ? vSetBit(flagReg, H_FLAG) : vResetBit(flagReg, H_FLAG);
 8003078:	7804      	ldrb	r4, [r0, #0]
 800307a:	f002 060f 	and.w	r6, r2, #15
 800307e:	f004 040f 	and.w	r4, r4, #15
 8003082:	442e      	add	r6, r5
 8003084:	1ba4      	subs	r4, r4, r6
 8003086:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 8003088:	bfb4      	ite	lt
 800308a:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800308e:	f023 0320 	bicge.w	r3, r3, #32
 8003092:	700b      	strb	r3, [r1, #0]
 8003094:	b25e      	sxtb	r6, r3
	(*regA - regValue - ucCheckBit(*flagReg, C_FLAG) < 0 ) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003096:	7804      	ldrb	r4, [r0, #0]
 8003098:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800309c:	1aa4      	subs	r4, r4, r2
 800309e:	1ae3      	subs	r3, r4, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db19      	blt.n	80030d8 <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 80030a4:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 80030a8:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 80030aa:	7804      	ldrb	r4, [r0, #0]
 80030ac:	1aa3      	subs	r3, r4, r2
 80030ae:	1b5b      	subs	r3, r3, r5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80030b4:	b13b      	cbz	r3, 80030c6 <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 80030b6:	780b      	ldrb	r3, [r1, #0]
 80030b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 80030bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 80030c0:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 80030c2:	700b      	strb	r3, [r1, #0]
}
 80030c4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80030c6:	f991 3000 	ldrsb.w	r3, [r1]
 80030ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80030d2:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 80030d4:	700b      	strb	r3, [r1, #0]
}
 80030d6:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80030d8:	f046 0310 	orr.w	r3, r6, #16
 80030dc:	b2db      	uxtb	r3, r3
}
 80030de:	e7e3      	b.n	80030a8 <vGBFunctionSBC+0x38>

080030e0 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 80030e0:	f991 3000 	ldrsb.w	r3, [r1]
 * @param flagReg Pointer to the flag register
 * @param regValue Value of a register/memory location
 * @returns Nothing
 */
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80030e4:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 80030e6:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80030e8:	f002 040f 	and.w	r4, r2, #15
 80030ec:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 80030f0:	bf8c      	ite	hi
 80030f2:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80030f6:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80030fa:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80030fc:	bf8c      	ite	hi
 80030fe:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003102:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003106:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8003108:	bf0c      	ite	eq
 800310a:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800310e:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	vSetBit(flagReg, N_FLAG);
}
 8003116:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003118:	700b      	strb	r3, [r1, #0]
}
 800311a:	4770      	bx	lr

0800311c <vGBFunctionRET>:
 * @brief Pop two bytes from the stack and jump to that address
 * @param regSP Pointer to the Stack Pointer register
 * @param regPC Pointer to the Program Counter register
 * @returns Nothing
 */
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	4604      	mov	r4, r0
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003120:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003122:	460e      	mov	r6, r1
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003124:	f000 faa6 	bl	8003674 <ucGBMemoryRead>
 8003128:	8823      	ldrh	r3, [r4, #0]
 800312a:	4605      	mov	r5, r0
 800312c:	1c58      	adds	r0, r3, #1
 800312e:	b280      	uxth	r0, r0
 8003130:	f000 faa0 	bl	8003674 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003134:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003138:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 800313a:	8823      	ldrh	r3, [r4, #0]
 800313c:	3302      	adds	r3, #2
 800313e:	8023      	strh	r3, [r4, #0]
}
 8003140:	bd70      	pop	{r4, r5, r6, pc}
 8003142:	bf00      	nop

08003144 <vGBFunctionPOP>:
 8003144:	f7ff bfea 	b.w	800311c <vGBFunctionRET>

08003148 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8003148:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 800314a:	09db      	lsrs	r3, r3, #7
 800314c:	d102      	bne.n	8003154 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800314e:	8002      	strh	r2, [r0, #0]
		return 16;
 8003150:	2010      	movs	r0, #16
 8003152:	4770      	bx	lr
		return 12;
 8003154:	200c      	movs	r0, #12
	}
}
 8003156:	4770      	bx	lr

08003158 <vGBFunctionPUSH>:
 * @brief Pushes 16 bit register onto stack
 * @param regSP Pointer to Stack Pointer register
 * @param reg16 Pointer to 16 bit register
 * @returns Nothing
 */
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 800315c:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800315e:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003160:	8809      	ldrh	r1, [r1, #0]
 8003162:	3801      	subs	r0, #1
 8003164:	0a09      	lsrs	r1, r1, #8
 8003166:	b280      	uxth	r0, r0
 8003168:	f000 faac 	bl	80036c4 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 800316c:	8820      	ldrh	r0, [r4, #0]
 800316e:	7829      	ldrb	r1, [r5, #0]
 8003170:	3802      	subs	r0, #2
 8003172:	b280      	uxth	r0, r0
 8003174:	f000 faa6 	bl	80036c4 <vGBMemoryWrite>
	*regSP -= 2;
 8003178:	8823      	ldrh	r3, [r4, #0]
 800317a:	3b02      	subs	r3, #2
 800317c:	8023      	strh	r3, [r4, #0]
}
 800317e:	bd38      	pop	{r3, r4, r5, pc}

08003180 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003180:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003182:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 8003184:	09db      	lsrs	r3, r3, #7
 8003186:	d001      	beq.n	800318c <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 8003188:	200c      	movs	r0, #12
}
 800318a:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 800318c:	4604      	mov	r4, r0
 800318e:	4610      	mov	r0, r2
 8003190:	4621      	mov	r1, r4
 8003192:	f7ff ffe1 	bl	8003158 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003196:	8820      	ldrh	r0, [r4, #0]
 8003198:	3802      	subs	r0, #2
 800319a:	b280      	uxth	r0, r0
 800319c:	f000 fa6a 	bl	8003674 <ucGBMemoryRead>
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	4605      	mov	r5, r0
 80031a4:	1e58      	subs	r0, r3, #1
 80031a6:	b280      	uxth	r0, r0
 80031a8:	f000 fa64 	bl	8003674 <ucGBMemoryRead>
 80031ac:	4603      	mov	r3, r0
		return 24;
 80031ae:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031b0:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031b4:	8025      	strh	r5, [r4, #0]
}
 80031b6:	bd38      	pop	{r3, r4, r5, pc}

080031b8 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80031b8:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031ba:	09db      	lsrs	r3, r3, #7
 80031bc:	d002      	beq.n	80031c4 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 80031be:	8002      	strh	r2, [r0, #0]
		return 16;
 80031c0:	2010      	movs	r0, #16
 80031c2:	4770      	bx	lr
	}else{
		return 12;
 80031c4:	200c      	movs	r0, #12
	}
}
 80031c6:	4770      	bx	lr

080031c8 <vGBFunctionCALL_Z_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031c8:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031ca:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, Z_FLAG) != 0){
 80031cc:	09db      	lsrs	r3, r3, #7
 80031ce:	d101      	bne.n	80031d4 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80031d0:	200c      	movs	r0, #12
	}
}
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031d4:	4604      	mov	r4, r0
 80031d6:	4610      	mov	r0, r2
 80031d8:	4621      	mov	r1, r4
 80031da:	f7ff ffbd 	bl	8003158 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031de:	8820      	ldrh	r0, [r4, #0]
 80031e0:	3802      	subs	r0, #2
 80031e2:	b280      	uxth	r0, r0
 80031e4:	f000 fa46 	bl	8003674 <ucGBMemoryRead>
 80031e8:	8823      	ldrh	r3, [r4, #0]
 80031ea:	4605      	mov	r5, r0
 80031ec:	1e58      	subs	r0, r3, #1
 80031ee:	b280      	uxth	r0, r0
 80031f0:	f000 fa40 	bl	8003674 <ucGBMemoryRead>
 80031f4:	4603      	mov	r3, r0
		return 24;
 80031f6:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031f8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031fc:	8025      	strh	r5, [r4, #0]
}
 80031fe:	bd38      	pop	{r3, r4, r5, pc}

08003200 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8003200:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003202:	06db      	lsls	r3, r3, #27
 8003204:	d402      	bmi.n	800320c <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003206:	8002      	strh	r2, [r0, #0]
		return 16;
 8003208:	2010      	movs	r0, #16
 800320a:	4770      	bx	lr
		return 12;
 800320c:	200c      	movs	r0, #12
	}
}
 800320e:	4770      	bx	lr

08003210 <vGBFunctionCALL_NC_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003210:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003212:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 8003214:	06db      	lsls	r3, r3, #27
 8003216:	d501      	bpl.n	800321c <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 8003218:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 800321a:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 800321c:	4604      	mov	r4, r0
 800321e:	4610      	mov	r0, r2
 8003220:	4621      	mov	r1, r4
 8003222:	f7ff ff99 	bl	8003158 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003226:	8820      	ldrh	r0, [r4, #0]
 8003228:	3802      	subs	r0, #2
 800322a:	b280      	uxth	r0, r0
 800322c:	f000 fa22 	bl	8003674 <ucGBMemoryRead>
 8003230:	8823      	ldrh	r3, [r4, #0]
 8003232:	4605      	mov	r5, r0
 8003234:	1e58      	subs	r0, r3, #1
 8003236:	b280      	uxth	r0, r0
 8003238:	f000 fa1c 	bl	8003674 <ucGBMemoryRead>
 800323c:	4603      	mov	r3, r0
		return 24;
 800323e:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003240:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003244:	8025      	strh	r5, [r4, #0]
}
 8003246:	bd38      	pop	{r3, r4, r5, pc}

08003248 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 8003248:	780b      	ldrb	r3, [r1, #0]
 * @param flagReg Pointer to the flag register
 * @param addr Immediate unsigned short address
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 800324a:	06db      	lsls	r3, r3, #27
 800324c:	d502      	bpl.n	8003254 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 800324e:	8002      	strh	r2, [r0, #0]
		return 16;
 8003250:	2010      	movs	r0, #16
 8003252:	4770      	bx	lr
	}else{
		return 12;
 8003254:	200c      	movs	r0, #12
	}
}
 8003256:	4770      	bx	lr

08003258 <vGBFunctionCALL_C_a16>:
 * @param regPC Pointer to Program Counter register
 * @param flagReg Pointer to the flag register
 * @param regSP Pointer to Stack Pointer register
 * @returns Duration in T-states for the current instruction
 */
uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003258:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800325a:	780b      	ldrb	r3, [r1, #0]
	if(ucCheckBit(*flagReg, C_FLAG) != 0){
 800325c:	06db      	lsls	r3, r3, #27
 800325e:	d401      	bmi.n	8003264 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003260:	200c      	movs	r0, #12
	}
}
 8003262:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003264:	4604      	mov	r4, r0
 8003266:	4610      	mov	r0, r2
 8003268:	4621      	mov	r1, r4
 800326a:	f7ff ff75 	bl	8003158 <vGBFunctionPUSH>
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800326e:	8820      	ldrh	r0, [r4, #0]
 8003270:	3802      	subs	r0, #2
 8003272:	b280      	uxth	r0, r0
 8003274:	f000 f9fe 	bl	8003674 <ucGBMemoryRead>
 8003278:	8823      	ldrh	r3, [r4, #0]
 800327a:	4605      	mov	r5, r0
 800327c:	1e58      	subs	r0, r3, #1
 800327e:	b280      	uxth	r0, r0
 8003280:	f000 f9f8 	bl	8003674 <ucGBMemoryRead>
 8003284:	4603      	mov	r3, r0
		return 24;
 8003286:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003288:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = usConcat16BitBigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800328c:	8025      	strh	r5, [r4, #0]
}
 800328e:	bd38      	pop	{r3, r4, r5, pc}

08003290 <vGBFunctionADD_SP_r8>:
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 8003290:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003292:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 8003294:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003296:	b2db      	uxtb	r3, r3
 8003298:	b2e5      	uxtb	r5, r4
 800329a:	429d      	cmp	r5, r3
 800329c:	d219      	bcs.n	80032d2 <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800329e:	f991 3000 	ldrsb.w	r3, [r1]
 80032a2:	f043 0310 	orr.w	r3, r3, #16
 80032a6:	b2dd      	uxtb	r5, r3
 80032a8:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80032aa:	f004 040f 	and.w	r4, r4, #15
 80032ae:	8805      	ldrh	r5, [r0, #0]
 80032b0:	f005 050f 	and.w	r5, r5, #15
 80032b4:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80032b6:	bf34      	ite	cc
 80032b8:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80032bc:	f023 0320 	biccs.w	r3, r3, #32
 80032c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c4:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 80032c6:	8803      	ldrh	r3, [r0, #0]
 80032c8:	fa43 f282 	sxtab	r2, r3, r2
}
 80032cc:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 80032ce:	8002      	strh	r2, [r0, #0]
}
 80032d0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032d2:	f991 5000 	ldrsb.w	r5, [r1]
 80032d6:	f025 0310 	bic.w	r3, r5, #16
 80032da:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 80032de:	e7e3      	b.n	80032a8 <vGBFunctionADD_SP_r8+0x18>

080032e0 <vGBFunctionLD_HL_SP_r8>:
 * @param regSP Pointer to the SP register
 * @param flagReg Pointer to the flag register
 * @param r8value Immediate signed byte value
 * @returns Nothing
 */
void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80032e0:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 80032e2:	880c      	ldrh	r4, [r1, #0]
 80032e4:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80032e6:	b2e4      	uxtb	r4, r4
 80032e8:	b2ee      	uxtb	r6, r5
 80032ea:	42a6      	cmp	r6, r4
 80032ec:	d219      	bcs.n	8003322 <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80032ee:	f992 4000 	ldrsb.w	r4, [r2]
 80032f2:	f044 0410 	orr.w	r4, r4, #16
 80032f6:	b2e6      	uxtb	r6, r4
 80032f8:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? vSetBit(flagReg, H_FLAG): vResetBit(flagReg, H_FLAG);
 80032fa:	f005 050f 	and.w	r5, r5, #15
 80032fe:	880e      	ldrh	r6, [r1, #0]
 8003300:	f006 060f 	and.w	r6, r6, #15
 8003304:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 8003306:	bf34      	ite	cc
 8003308:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 800330c:	f024 0420 	biccs.w	r4, r4, #32
 8003310:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003314:	7014      	strb	r4, [r2, #0]
	vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 8003316:	880a      	ldrh	r2, [r1, #0]
 8003318:	fa42 f383 	sxtab	r3, r2, r3
}
 800331c:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 800331e:	8003      	strh	r3, [r0, #0]
}
 8003320:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003322:	f992 6000 	ldrsb.w	r6, [r2]
 8003326:	f026 0410 	bic.w	r4, r6, #16
 800332a:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 800332e:	e7e3      	b.n	80032f8 <vGBFunctionLD_HL_SP_r8+0x18>

08003330 <ucGBFunctionRLC>:
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 7);
	regValue <<= 1;
 8003330:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 8003332:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003334:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003338:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800333c:	d10a      	bne.n	8003354 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 800333e:	f991 3000 	ldrsb.w	r3, [r1]
 8003342:	f063 037f 	orn	r3, r3, #127	; 0x7f
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003346:	b152      	cbz	r2, 800335e <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 8003348:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800334c:	f043 0310 	orr.w	r3, r3, #16
 8003350:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003352:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003354:	780b      	ldrb	r3, [r1, #0]
 8003356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800335a:	2a00      	cmp	r2, #0
 800335c:	d1f4      	bne.n	8003348 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 800335e:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003362:	700b      	strb	r3, [r1, #0]
}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <ucGBFunctionRRC>:
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = ucCheckBit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) vSetBit(&regValue, 7);
 8003368:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800336a:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) vSetBit(&regValue, 7);
 800336e:	d509      	bpl.n	8003384 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003370:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 8003376:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
	return regValue;
}
 800337a:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 800337c:	f043 0310 	orr.w	r3, r3, #16
 8003380:	700b      	strb	r3, [r1, #0]
}
 8003382:	4770      	bx	lr
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003384:	b942      	cbnz	r2, 8003398 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 8003386:	f991 3000 	ldrsb.w	r3, [r1]
 800338a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800338e:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 8003392:	4610      	mov	r0, r2
 8003394:	700b      	strb	r3, [r1, #0]
 8003396:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003398:	780b      	ldrb	r3, [r1, #0]
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800339e:	e7f6      	b.n	800338e <ucGBFunctionRRC+0x26>

080033a0 <ucGBFunctionRL>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 80033a0:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033a2:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80033a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80033aa:	bf14      	ite	ne
 80033ac:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033b0:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80033b4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80033b8:	b25b      	sxtb	r3, r3
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033ba:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033be:	d105      	bne.n	80033cc <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 80033c0:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c8:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033ca:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	700b      	strb	r3, [r1, #0]
}
 80033d2:	4770      	bx	lr

080033d4 <ucGBFunctionRR>:
 * @param regValue Register/memory value to be rotated
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  ucCheckBit(*flagReg, C_FLAG);
 80033d4:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 80033d6:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 80033da:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 80033de:	bf14      	ite	ne
 80033e0:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033e4:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 80033e8:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 80033ea:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 80033ec:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80033f0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033f4:	d105      	bne.n	8003402 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 80033f6:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003400:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	700b      	strb	r3, [r1, #0]
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <ucGBFunctionSLA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800340c:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 800340e:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 8003412:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 8003416:	bf4c      	ite	mi
 8003418:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800341c:	f023 0310 	bicpl.w	r3, r3, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003420:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003424:	d105      	bne.n	8003432 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 8003426:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800342a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342e:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003430:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	700b      	strb	r3, [r1, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <ucGBFunctionSRA>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 800343c:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 8003440:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003444:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 8003448:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 800344c:	bf14      	ite	ne
 800344e:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003452:	f022 0210 	biceq.w	r2, r2, #16
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003456:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800345a:	d105      	bne.n	8003468 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 800345c:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003466:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003468:	f002 031f 	and.w	r3, r2, #31
 800346c:	700b      	strb	r3, [r1, #0]
}
 800346e:	4770      	bx	lr

08003470 <ucGBFunctionSWAP>:
 * @param regValue value of the register or memory location
 * @param flagReg Pointer to the flag register
 * @returns New value of the register or memory
 */
uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003470:	0903      	lsrs	r3, r0, #4
 8003472:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 8003476:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800347a:	d107      	bne.n	800348c <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 800347c:	f991 3000 	ldrsb.w	r3, [r1]
 8003480:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	700b      	strb	r3, [r1, #0]
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	vResetBit(flagReg, C_FLAG);
	return regValue;
}
 800348a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800348c:	780b      	ldrb	r3, [r1, #0]
 800348e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	700b      	strb	r3, [r1, #0]
}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <ucGBFunctionSRL>:
 * @param regValue Register/memory value to be shifted
 * @param flagReg Pointer to the flag register
 * @returns New value of the register/memory
 */
uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? vSetBit(flagReg, C_FLAG): vResetBit(flagReg, C_FLAG);
 800349c:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 800349e:	f991 3000 	ldrsb.w	r3, [r1]
 80034a2:	bf4c      	ite	mi
 80034a4:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80034a8:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	vResetBit(flagReg, N_FLAG);
	vResetBit(flagReg, H_FLAG);
	(regValue == 0) ? vSetBit(flagReg, Z_FLAG): vResetBit(flagReg, Z_FLAG);
 80034ac:	0840      	lsrs	r0, r0, #1
 80034ae:	d105      	bne.n	80034bc <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80034b0:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80034ba:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	700b      	strb	r3, [r1, #0]
}
 80034c2:	4770      	bx	lr

080034c4 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80034c4:	fa40 f101 	asr.w	r1, r0, r1
 * @param bit The bit to be tested
 * @param flagReg Pointer to the flag register
 * @returns Nothing
 */
void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(ucCheckBit(regValue, bit) != 0) ?  vResetBit(flagReg, Z_FLAG): vSetBit(flagReg, Z_FLAG);
 80034c8:	07cb      	lsls	r3, r1, #31
 80034ca:	d508      	bpl.n	80034de <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80034cc:	7813      	ldrb	r3, [r2, #0]
 80034ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	7013      	strb	r3, [r2, #0]
	vResetBit(flagReg, N_FLAG);
	vSetBit(flagReg, H_FLAG);
}
 80034dc:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80034de:	f992 3000 	ldrsb.w	r3, [r2]
 80034e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80034e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80034ea:	f043 0320 	orr.w	r3, r3, #32
 80034ee:	7013      	strb	r3, [r2, #0]
}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <ucGBFunctionRESHL>:
 * @brief Resets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be reset (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80034f8:	f000 f8bc 	bl	8003674 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 80034fc:	2301      	movs	r3, #1
 80034fe:	fa03 f104 	lsl.w	r1, r3, r4
 8003502:	ea20 0001 	bic.w	r0, r0, r1
	vResetBit(&tempRes, bit);
	return tempRes;
}
 8003506:	b2c0      	uxtb	r0, r0
 8003508:	bd10      	pop	{r4, pc}
 800350a:	bf00      	nop

0800350c <ucGBFunctionSETHL>:
 * @brief Sets a bit in the memory address that is held in the HL register
 * @param regHLaddr Memory address held inside HL register
 * @param bit The bit to be set (0 - 7)
 * @returns New value held at memory address denoted by HL
 */
uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 800350c:	b510      	push	{r4, lr}
 800350e:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003510:	f000 f8b0 	bl	8003674 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003514:	2301      	movs	r3, #1
 8003516:	fa03 f104 	lsl.w	r1, r3, r4
 800351a:	4308      	orrs	r0, r1
	vSetBit(&tempRes, bit);
	return tempRes;
}
 800351c:	b2c0      	uxtb	r0, r0
 800351e:	bd10      	pop	{r4, pc}

08003520 <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
    ucCurrentOP = op;
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <vGBMemorySetOP+0x8>)
 8003522:	7018      	strb	r0, [r3, #0]
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	24011661 	.word	0x24011661

0800352c <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 800352c:	4603      	mov	r3, r0
 800352e:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 8003530:	4801      	ldr	r0, [pc, #4]	; (8003538 <vGBMemoryLoad+0xc>)
 8003532:	4619      	mov	r1, r3
 8003534:	f007 bb34 	b.w	800aba0 <memcpy>
 8003538:	24001660 	.word	0x24001660

0800353c <prvGBMemoryJoypad>:
/**
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @param data data trying to be written to Joypad Register.
 * @return Joypad Keys pressed
 */
uint8_t prvGBMemoryJoypad(){
 800353c:	b538      	push	{r3, r4, r5, lr}
    uint32_t value = 0;
	uint8_t mask = 0;

	if(ucJoypadSELdir == 0x10){
 800353e:	4c25      	ldr	r4, [pc, #148]	; (80035d4 <prvGBMemoryJoypad+0x98>)
 8003540:	7822      	ldrb	r2, [r4, #0]
 8003542:	2a10      	cmp	r2, #16
 8003544:	d009      	beq.n	800355a <prvGBMemoryJoypad+0x1e>
	    HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
		value = HAL_ADC_GetValue(&hadc3) >> 12;
	}else if(ucJoypadSELbut == 0x20){
 8003546:	4d24      	ldr	r5, [pc, #144]	; (80035d8 <prvGBMemoryJoypad+0x9c>)
 8003548:	782b      	ldrb	r3, [r5, #0]
 800354a:	2b20      	cmp	r3, #32
 800354c:	d029      	beq.n	80035a2 <prvGBMemoryJoypad+0x66>
 800354e:	200e      	movs	r0, #14
		}else{
		    mask = (0x1);
		}
	}

	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 8003550:	4310      	orrs	r0, r2
 8003552:	4318      	orrs	r0, r3
}
 8003554:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003558:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc3);
 800355a:	4820      	ldr	r0, [pc, #128]	; (80035dc <prvGBMemoryJoypad+0xa0>)
 800355c:	f003 f9ca 	bl	80068f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <prvGBMemoryJoypad+0xa0>)
 8003566:	f002 feb3 	bl	80062d0 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc3) >> 12;
 800356a:	481c      	ldr	r0, [pc, #112]	; (80035dc <prvGBMemoryJoypad+0xa0>)
 800356c:	f002 ff3a 	bl	80063e4 <HAL_ADC_GetValue>
 8003570:	4d19      	ldr	r5, [pc, #100]	; (80035d8 <prvGBMemoryJoypad+0x9c>)
 8003572:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 8003574:	280f      	cmp	r0, #15
 8003576:	d022      	beq.n	80035be <prvGBMemoryJoypad+0x82>
	    if((value >> 3) & 0x1){
 8003578:	0703      	lsls	r3, r0, #28
 800357a:	d40a      	bmi.n	8003592 <prvGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 800357c:	f000 0306 	and.w	r3, r0, #6
 8003580:	2b06      	cmp	r3, #6
 8003582:	782b      	ldrb	r3, [r5, #0]
 8003584:	d022      	beq.n	80035cc <prvGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 8003586:	2802      	cmp	r0, #2
 8003588:	7822      	ldrb	r2, [r4, #0]
 800358a:	bf8c      	ite	hi
 800358c:	200d      	movhi	r0, #13
 800358e:	200e      	movls	r0, #14
 8003590:	e7de      	b.n	8003550 <prvGBMemoryJoypad+0x14>
 8003592:	7822      	ldrb	r2, [r4, #0]
	    if((value >> 3) & 0x1){
 8003594:	200b      	movs	r0, #11
 8003596:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 8003598:	4310      	orrs	r0, r2
 800359a:	4318      	orrs	r0, r3
}
 800359c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035a0:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_ADC_Start(&hadc1);
 80035a2:	480f      	ldr	r0, [pc, #60]	; (80035e0 <prvGBMemoryJoypad+0xa4>)
 80035a4:	f003 f9a6 	bl	80068f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	480c      	ldr	r0, [pc, #48]	; (80035e0 <prvGBMemoryJoypad+0xa4>)
 80035ae:	f002 fe8f 	bl	80062d0 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 80035b2:	480b      	ldr	r0, [pc, #44]	; (80035e0 <prvGBMemoryJoypad+0xa4>)
 80035b4:	f002 ff16 	bl	80063e4 <HAL_ADC_GetValue>
 80035b8:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035ba:	280f      	cmp	r0, #15
 80035bc:	d1dc      	bne.n	8003578 <prvGBMemoryJoypad+0x3c>
 80035be:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (ucJoypadSELbut | ucJoypadSELdir);
 80035c0:	782b      	ldrb	r3, [r5, #0]
 80035c2:	4310      	orrs	r0, r2
 80035c4:	4318      	orrs	r0, r3
}
 80035c6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 80035cc:	2007      	movs	r0, #7
 80035ce:	7822      	ldrb	r2, [r4, #0]
 80035d0:	e7be      	b.n	8003550 <prvGBMemoryJoypad+0x14>
 80035d2:	bf00      	nop
 80035d4:	24011662 	.word	0x24011662
 80035d8:	2400165d 	.word	0x2400165d
 80035dc:	24011848 	.word	0x24011848
 80035e0:	240117e4 	.word	0x240117e4

080035e4 <vGBMemorySetBit>:
 * @param address memory map address
 * @param bit which bit to set (0 - 7)
 * @returns Nothing
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 80035e4:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80035ee:	d302      	bcc.n	80035f6 <vGBMemorySetBit+0x12>
	    mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 80035f0:	0403      	lsls	r3, r0, #16
 80035f2:	d411      	bmi.n	8003618 <vGBMemorySetBit+0x34>
 80035f4:	4770      	bx	lr
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 80035f6:	2301      	movs	r3, #1
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 80035fa:	b410      	push	{r4}
	    mem.ram[address - 0x2000] |= (0x1 << bit);
 80035fc:	fa03 f101 	lsl.w	r1, r3, r1
 8003600:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8003604:	b249      	sxtb	r1, r1
 8003606:	5d13      	ldrb	r3, [r2, r4]
 8003608:	430b      	orrs	r3, r1
 800360a:	5513      	strb	r3, [r2, r4]
	    return;

	mem.ram[address] |= (0x1 << bit);
 800360c:	5c13      	ldrb	r3, [r2, r0]
 800360e:	4319      	orrs	r1, r3
 8003610:	5411      	strb	r1, [r2, r0]
}
 8003612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	2301      	movs	r3, #1
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <vGBMemorySetBit+0x48>)
 800361c:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 8003620:	5c13      	ldrb	r3, [r2, r0]
 8003622:	b249      	sxtb	r1, r1
 8003624:	4319      	orrs	r1, r3
 8003626:	5411      	strb	r1, [r2, r0]
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	24001660 	.word	0x24001660

08003630 <vGBMemoryResetBit>:
 * @param bit which bit to reset (0 - 7)
 * @returns Nothing
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

    if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003630:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8003634:	b292      	uxth	r2, r2
 8003636:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 800363a:	b430      	push	{r4, r5}
    if(address >= ECHORAM_BASE && address < OAM_BASE)
 800363c:	d20f      	bcs.n	800365e <vGBMemoryResetBit+0x2e>
	    mem.ram[address - 0x2000] &= ~(0x1 << bit);
 800363e:	2201      	movs	r2, #1
 8003640:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 8003644:	4c0a      	ldr	r4, [pc, #40]	; (8003670 <vGBMemoryResetBit+0x40>)
 8003646:	fa02 f101 	lsl.w	r1, r2, r1
 800364a:	5d62      	ldrb	r2, [r4, r5]
 800364c:	43cb      	mvns	r3, r1
 800364e:	b25b      	sxtb	r3, r3
 8003650:	401a      	ands	r2, r3
 8003652:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
	    return;

	mem.ram[address] &= ~(0x1 << bit);
 8003654:	5c22      	ldrb	r2, [r4, r0]
 8003656:	4013      	ands	r3, r2
 8003658:	5423      	strb	r3, [r4, r0]
}
 800365a:	bc30      	pop	{r4, r5}
 800365c:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800365e:	0403      	lsls	r3, r0, #16
 8003660:	d5fb      	bpl.n	800365a <vGBMemoryResetBit+0x2a>
 8003662:	2201      	movs	r2, #1
 8003664:	4c02      	ldr	r4, [pc, #8]	; (8003670 <vGBMemoryResetBit+0x40>)
 8003666:	fa02 f301 	lsl.w	r3, r2, r1
 800366a:	43db      	mvns	r3, r3
 800366c:	b25b      	sxtb	r3, r3
 800366e:	e7f1      	b.n	8003654 <vGBMemoryResetBit+0x24>
 8003670:	24001660 	.word	0x24001660

08003674 <ucGBMemoryRead>:
 * @param address memory map address
 * @return data byte of data located in memory map
 */
uint8_t ucGBMemoryRead(uint16_t address){

    if(address >= 0xFF00){
 8003674:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
uint8_t ucGBMemoryRead(uint16_t address){
 8003678:	4603      	mov	r3, r0
    if(address >= 0xFF00){
 800367a:	d307      	bcc.n	800368c <ucGBMemoryRead+0x18>
	    if(address == JOY_ADDR){
 800367c:	d019      	beq.n	80036b2 <ucGBMemoryRead+0x3e>
		    return prvGBMemoryJoypad();
		}

		if(address == SB_ADDR){
 800367e:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003682:	4290      	cmp	r0, r2
 8003684:	d017      	beq.n	80036b6 <ucGBMemoryRead+0x42>
 8003686:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <ucGBMemoryRead+0x48>)
	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
	    return mem.ram[address - 0x2000];

	return mem.ram[address];
 8003688:	5cd0      	ldrb	r0, [r2, r3]
 800368a:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE) && mem.ram[0xFF50] != 0){
 800368c:	0402      	lsls	r2, r0, #16
 800368e:	d407      	bmi.n	80036a0 <ucGBMemoryRead+0x2c>
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <ucGBMemoryRead+0x48>)
 8003692:	f64f 7150 	movw	r1, #65360	; 0xff50
 8003696:	5c51      	ldrb	r1, [r2, r1]
 8003698:	2900      	cmp	r1, #0
 800369a:	d0f5      	beq.n	8003688 <ucGBMemoryRead+0x14>
	    return ucGBMBCreadBankX(address);
 800369c:	f7fc be96 	b.w	80003cc <ucGBMBCreadBankX>
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80036a0:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 80036a4:	b292      	uxth	r2, r2
 80036a6:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 80036aa:	d2ec      	bcs.n	8003686 <ucGBMemoryRead+0x12>
	    return mem.ram[address - 0x2000];
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <ucGBMemoryRead+0x4c>)
 80036ae:	5c80      	ldrb	r0, [r0, r2]
 80036b0:	4770      	bx	lr
		    return prvGBMemoryJoypad();
 80036b2:	f7ff bf43 	b.w	800353c <prvGBMemoryJoypad>
		    return 0xFF;
 80036b6:	20ff      	movs	r0, #255	; 0xff
}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	24001660 	.word	0x24001660
 80036c0:	23fff660 	.word	0x23fff660

080036c4 <vGBMemoryWrite>:
    if(address >= 0xFF00){
 80036c4:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4604      	mov	r4, r0
 80036cc:	460d      	mov	r5, r1
    if(address >= 0xFF00){
 80036ce:	d313      	bcc.n	80036f8 <vGBMemoryWrite+0x34>
	    if(address == JOY_ADDR){
 80036d0:	d021      	beq.n	8003716 <vGBMemoryWrite+0x52>
		else if(address == DMA_ADDR){
 80036d2:	f64f 7346 	movw	r3, #65350	; 0xff46
 80036d6:	4298      	cmp	r0, r3
 80036d8:	d026      	beq.n	8003728 <vGBMemoryWrite+0x64>
		else if(address == DIV_ADDR){
 80036da:	f64f 7304 	movw	r3, #65284	; 0xff04
 80036de:	4298      	cmp	r0, r3
 80036e0:	d036      	beq.n	8003750 <vGBMemoryWrite+0x8c>
		else if(address == TAC_ADDR){
 80036e2:	f64f 7307 	movw	r3, #65287	; 0xff07
 80036e6:	4298      	cmp	r0, r3
 80036e8:	d043      	beq.n	8003772 <vGBMemoryWrite+0xae>
		else if(address == STC_ADDR){
 80036ea:	f64f 7302 	movw	r3, #65282	; 0xff02
 80036ee:	4298      	cmp	r0, r3
 80036f0:	d032      	beq.n	8003758 <vGBMemoryWrite+0x94>
	mem.ram[address] = data;
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <vGBMemoryWrite+0xdc>)
 80036f4:	551d      	strb	r5, [r3, r4]
}
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
	if((address >= CARTROM_BANK0 && address < VRAM_BASE)){
 80036f8:	0403      	lsls	r3, r0, #16
 80036fa:	d508      	bpl.n	800370e <vGBMemoryWrite+0x4a>
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 80036fc:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003700:	b29b      	uxth	r3, r3
 8003702:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003706:	d2f4      	bcs.n	80036f2 <vGBMemoryWrite+0x2e>
	    mem.ram[address - 0x2000] = data;
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <vGBMemoryWrite+0xe0>)
 800370a:	54e1      	strb	r1, [r4, r3]
}
 800370c:	bd70      	pop	{r4, r5, r6, pc}
 800370e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    vGBMBCwrite(address, data);
 8003712:	f7fc be61 	b.w	80003d8 <vGBMBCwrite>
	        ucJoypadSELdir = data & 0x10;
 8003716:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <vGBMemoryWrite+0xe4>)
 8003718:	f001 0110 	and.w	r1, r1, #16
	        ucJoypadSELbut = data & 0x20;
 800371c:	f005 0520 	and.w	r5, r5, #32
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <vGBMemoryWrite+0xe8>)
	        ucJoypadSELdir = data & 0x10;
 8003722:	7011      	strb	r1, [r2, #0]
	        ucJoypadSELbut = data & 0x20;
 8003724:	701d      	strb	r5, [r3, #0]
}
 8003726:	bd70      	pop	{r4, r5, r6, pc}
		    for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 8003728:	020d      	lsls	r5, r1, #8
 800372a:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 800372e:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 8003732:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8003736:	1960      	adds	r0, r4, r5
 8003738:	b280      	uxth	r0, r0
 800373a:	f7ff ff9b 	bl	8003674 <ucGBMemoryRead>
 800373e:	4601      	mov	r1, r0
 8003740:	4620      	mov	r0, r4
 8003742:	3401      	adds	r4, #1
 8003744:	f7ff ffbe 	bl	80036c4 <vGBMemoryWrite>
 8003748:	b2a4      	uxth	r4, r4
 800374a:	42b4      	cmp	r4, r6
 800374c:	d1f3      	bne.n	8003736 <vGBMemoryWrite+0x72>
}
 800374e:	bd70      	pop	{r4, r5, r6, pc}
		    mem.ram[DIV_ADDR] = 0;
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <vGBMemoryWrite+0xdc>)
 8003752:	2200      	movs	r2, #0
 8003754:	541a      	strb	r2, [r3, r0]
}
 8003756:	bd70      	pop	{r4, r5, r6, pc}
		    if(ucCheckBit(data, 7)){
 8003758:	2107      	movs	r1, #7
 800375a:	4628      	mov	r0, r5
 800375c:	f7ff fa8e 	bl	8002c7c <ucCheckBit>
 8003760:	b110      	cbz	r0, 8003768 <vGBMemoryWrite+0xa4>
		        ucDataTransFlag = 1;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <vGBMemoryWrite+0xec>)
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
			mem.ram[address] = data;
 8003768:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <vGBMemoryWrite+0xdc>)
 800376a:	f64f 7302 	movw	r3, #65282	; 0xff02
 800376e:	54d5      	strb	r5, [r2, r3]
}
 8003770:	bd70      	pop	{r4, r5, r6, pc}
		    ucTimerStopStart = ucCheckBit(data, 2);
 8003772:	2102      	movs	r1, #2
 8003774:	4628      	mov	r0, r5
 8003776:	f7ff fa81 	bl	8002c7c <ucCheckBit>
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <vGBMemoryWrite+0xf0>)
 800377c:	4602      	mov	r2, r0
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 800377e:	2101      	movs	r1, #1
 8003780:	4628      	mov	r0, r5
		    ucTimerStopStart = ucCheckBit(data, 2);
 8003782:	701a      	strb	r2, [r3, #0]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 8003784:	f7ff fa7a 	bl	8002c7c <ucCheckBit>
 8003788:	4606      	mov	r6, r0
 800378a:	2100      	movs	r1, #0
 800378c:	4628      	mov	r0, r5
 800378e:	f7ff fa75 	bl	8002c7c <ucCheckBit>
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <vGBMemoryWrite+0xf4>)
			mem.ram[address] = data;
 8003794:	4a02      	ldr	r2, [pc, #8]	; (80037a0 <vGBMemoryWrite+0xdc>)
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 8003796:	eb00 0046 	add.w	r0, r0, r6, lsl #1
			mem.ram[address] = data;
 800379a:	5515      	strb	r5, [r2, r4]
		    ucClockMode = (ucCheckBit(data, 1) * 2) + ucCheckBit(data, 0);
 800379c:	7018      	strb	r0, [r3, #0]
}
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	24001660 	.word	0x24001660
 80037a4:	23fff660 	.word	0x23fff660
 80037a8:	24011662 	.word	0x24011662
 80037ac:	2400165d 	.word	0x2400165d
 80037b0:	240010a7 	.word	0x240010a7
 80037b4:	24011660 	.word	0x24011660
 80037b8:	2400165c 	.word	0x2400165c

080037bc <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	460d      	mov	r5, r1
    vGBMemoryWrite(address,   data & 0xFF);
 80037c2:	b2c9      	uxtb	r1, r1
 80037c4:	f7ff ff7e 	bl	80036c4 <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 80037c8:	1c60      	adds	r0, r4, #1
 80037ca:	0a29      	lsrs	r1, r5, #8
 80037cc:	b280      	uxth	r0, r0
}
 80037ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 80037d2:	f7ff bf77 	b.w	80036c4 <vGBMemoryWrite>
 80037d6:	bf00      	nop

080037d8 <vGBMemoryInit>:
void vGBMemoryInit(){
 80037d8:	b538      	push	{r3, r4, r5, lr}
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 80037da:	f240 1047 	movw	r0, #327	; 0x147
	mem.ram[IF_ADDR] = 0xE1;
 80037de:	25e1      	movs	r5, #225	; 0xe1
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 80037e0:	f7ff ff48 	bl	8003674 <ucGBMemoryRead>
	mem.ram[JOY_ADDR] = 0xCF;
 80037e4:	24cf      	movs	r4, #207	; 0xcf
    vGBMBCsetControllerType(ucGBMemoryRead(0x147));
 80037e6:	f7fc fdeb 	bl	80003c0 <vGBMBCsetControllerType>
	mem.ram[JOY_ADDR] = 0xCF;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <vGBMemoryInit+0x30>)
	mem.ram[IF_ADDR] = 0xE1;
 80037ec:	f64f 700f 	movw	r0, #65295	; 0xff0f
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 80037f0:	21f8      	movs	r1, #248	; 0xf8
	mem.ram[JOY_ADDR] = 0xCF;
 80037f2:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
	mem.ram[IF_ADDR] = 0xE1;
 80037f6:	541d      	strb	r5, [r3, r0]
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 80037f8:	f64f 7007 	movw	r0, #65287	; 0xff07
	mem.ram[JOY_ADDR] = 0xCF;
 80037fc:	7014      	strb	r4, [r2, #0]
}
 80037fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003802:	f7ff bf5f 	b.w	80036c4 <vGBMemoryWrite>
 8003806:	bf00      	nop
 8003808:	24001660 	.word	0x24001660

0800380c <usGBMemoryReadShort>:
 * @brief Read from 2 sequential locations in memory map
 * @param address memory map address
 * @return Short information of data in memory map
 */
uint16_t usGBMemoryReadShort(uint16_t address){
    return usConcat16BitBigEndian(mem.ram[address], mem.ram[address+1]);
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <usGBMemoryReadShort+0xc>)
 800380e:	181a      	adds	r2, r3, r0
 8003810:	5c18      	ldrb	r0, [r3, r0]
 8003812:	7851      	ldrb	r1, [r2, #1]
 8003814:	f7ff ba1e 	b.w	8002c54 <usConcat16BitBigEndian>
 8003818:	24001660 	.word	0x24001660

0800381c <vGBMemoryIncTimers>:
    static uint8_t timerDIV  = 0;
    static uint8_t timerTIMA = 0;
    static uint8_t oldTIMA   = 0;
    static uint8_t timerDiv8k = 0;

    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 800381c:	4a3d      	ldr	r2, [pc, #244]	; (8003914 <vGBMemoryIncTimers+0xf8>)
 800381e:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 8003820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003824:	7813      	ldrb	r3, [r2, #0]
 8003826:	0084      	lsls	r4, r0, #2
 8003828:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800382c:	2dff      	cmp	r5, #255	; 0xff
 800382e:	dd0c      	ble.n	800384a <vGBMemoryIncTimers+0x2e>
        mem.ram[DIV_ADDR]++;
 8003830:	4e39      	ldr	r6, [pc, #228]	; (8003918 <vGBMemoryIncTimers+0xfc>)
 8003832:	f64f 7704 	movw	r7, #65284	; 0xff04

        if(ucDataTransFlag){
 8003836:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8003930 <vGBMemoryIncTimers+0x114>
        mem.ram[DIV_ADDR]++;
 800383a:	5df5      	ldrb	r5, [r6, r7]
        if(ucDataTransFlag){
 800383c:	f89c e000 	ldrb.w	lr, [ip]
        mem.ram[DIV_ADDR]++;
 8003840:	3501      	adds	r5, #1
 8003842:	55f5      	strb	r5, [r6, r7]
        if(ucDataTransFlag){
 8003844:	f1be 0f00 	cmp.w	lr, #0
 8003848:	d137      	bne.n	80038ba <vGBMemoryIncTimers+0x9e>
        }
    }

    timerDIV += (durationMcycle << 2);

    if(ucTimerStopStart){
 800384a:	4d34      	ldr	r5, [pc, #208]	; (800391c <vGBMemoryIncTimers+0x100>)
    timerDIV += (durationMcycle << 2);
 800384c:	4423      	add	r3, r4
    if(ucTimerStopStart){
 800384e:	782d      	ldrb	r5, [r5, #0]
    timerDIV += (durationMcycle << 2);
 8003850:	7013      	strb	r3, [r2, #0]
    if(ucTimerStopStart){
 8003852:	2d00      	cmp	r5, #0
 8003854:	d02f      	beq.n	80038b6 <vGBMemoryIncTimers+0x9a>
        uint16_t curDuration = 0;

        switch (ucClockMode) {
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <vGBMemoryIncTimers+0x104>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d835      	bhi.n	80038ca <vGBMemoryIncTimers+0xae>
 800385e:	e8df f003 	tbb	[pc, r3]
 8003862:	3c05      	.short	0x3c05
 8003864:	023f      	.short	0x023f
            case 0x0: curDuration = (durationMcycle << 0);  break;
            case 0x1: curDuration = (durationMcycle << 6);  break;
            case 0x2: curDuration = (durationMcycle << 4);  break;
            case 0x3: curDuration = (durationMcycle << 2);  break;
 8003866:	b2a1      	uxth	r1, r4
 8003868:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
            default:                                        break;
        }

        if(timerTIMA + curDuration > 0xFF){
 800386c:	4d2d      	ldr	r5, [pc, #180]	; (8003924 <vGBMemoryIncTimers+0x108>)
 800386e:	782a      	ldrb	r2, [r5, #0]
 8003870:	4411      	add	r1, r2
 8003872:	29ff      	cmp	r1, #255	; 0xff
 8003874:	dd2c      	ble.n	80038d0 <vGBMemoryIncTimers+0xb4>
            mem.ram[TIMA_ADDR]++;
 8003876:	4c28      	ldr	r4, [pc, #160]	; (8003918 <vGBMemoryIncTimers+0xfc>)
 8003878:	f64f 7605 	movw	r6, #65285	; 0xff05
        }

        if(timerTIMA + curDuration > 0x1FE){
 800387c:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
            mem.ram[TIMA_ADDR]++;
 8003880:	5da3      	ldrb	r3, [r4, r6]
 8003882:	bfd4      	ite	le
 8003884:	3301      	addle	r3, #1
            mem.ram[TIMA_ADDR]++;
 8003886:	3302      	addgt	r3, #2
 8003888:	b2db      	uxtb	r3, r3
 800388a:	55a3      	strb	r3, [r4, r6]
        }

        timerTIMA += curDuration;
 800388c:	4410      	add	r0, r2

        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 800388e:	2b04      	cmp	r3, #4
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <vGBMemoryIncTimers+0x10c>)
        timerTIMA += curDuration;
 8003892:	7028      	strb	r0, [r5, #0]
        if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 8003894:	d80e      	bhi.n	80038b4 <vGBMemoryIncTimers+0x98>
 8003896:	7811      	ldrb	r1, [r2, #0]
 8003898:	29ff      	cmp	r1, #255	; 0xff
 800389a:	d10b      	bne.n	80038b4 <vGBMemoryIncTimers+0x98>
	mem.ram[address] |= (0x1 << bit);
 800389c:	f64f 700f 	movw	r0, #65295	; 0xff0f
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038a0:	f64f 7306 	movw	r3, #65286	; 0xff06
 80038a4:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 80038a8:	5c21      	ldrb	r1, [r4, r0]
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038aa:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 80038ac:	f041 0104 	orr.w	r1, r1, #4
            mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038b0:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 80038b2:	5421      	strb	r1, [r4, r0]
            vGBMemorySetBit(IF_ADDR, 2);
        }

        oldTIMA = mem.ram[TIMA_ADDR];
 80038b4:	7013      	strb	r3, [r2, #0]
    }
}
 80038b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            timerDiv8k++;
 80038ba:	4f1c      	ldr	r7, [pc, #112]	; (800392c <vGBMemoryIncTimers+0x110>)
 80038bc:	783d      	ldrb	r5, [r7, #0]
 80038be:	3501      	adds	r5, #1
 80038c0:	b2ed      	uxtb	r5, r5
            if(timerDiv8k == 0x10){
 80038c2:	2d10      	cmp	r5, #16
 80038c4:	d00f      	beq.n	80038e6 <vGBMemoryIncTimers+0xca>
            timerDiv8k++;
 80038c6:	703d      	strb	r5, [r7, #0]
 80038c8:	e7bf      	b.n	800384a <vGBMemoryIncTimers+0x2e>
        if(timerTIMA + curDuration > 0xFF){
 80038ca:	4d16      	ldr	r5, [pc, #88]	; (8003924 <vGBMemoryIncTimers+0x108>)
 80038cc:	2000      	movs	r0, #0
 80038ce:	782a      	ldrb	r2, [r5, #0]
 80038d0:	4c11      	ldr	r4, [pc, #68]	; (8003918 <vGBMemoryIncTimers+0xfc>)
 80038d2:	f64f 7305 	movw	r3, #65285	; 0xff05
 80038d6:	5ce3      	ldrb	r3, [r4, r3]
 80038d8:	e7d8      	b.n	800388c <vGBMemoryIncTimers+0x70>
            case 0x1: curDuration = (durationMcycle << 6);  break;
 80038da:	0181      	lsls	r1, r0, #6
 80038dc:	b2c8      	uxtb	r0, r1
 80038de:	e7c5      	b.n	800386c <vGBMemoryIncTimers+0x50>
            case 0x2: curDuration = (durationMcycle << 4);  break;
 80038e0:	0101      	lsls	r1, r0, #4
 80038e2:	b2c8      	uxtb	r0, r1
 80038e4:	e7c2      	b.n	800386c <vGBMemoryIncTimers+0x50>
	mem.ram[address] &= ~(0x1 << bit);
 80038e6:	f64f 7902 	movw	r9, #65282	; 0xff02
	mem.ram[address] |= (0x1 << bit);
 80038ea:	f64f 780f 	movw	r8, #65295	; 0xff0f
                timerDiv8k = 0;
 80038ee:	f04f 0a00 	mov.w	sl, #0
	mem.ram[address] &= ~(0x1 << bit);
 80038f2:	f816 e009 	ldrb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 80038f6:	f816 5008 	ldrb.w	r5, [r6, r8]
	mem.ram[address] &= ~(0x1 << bit);
 80038fa:	f00e 0e7f 	and.w	lr, lr, #127	; 0x7f
                timerDiv8k = 0;
 80038fe:	f887 a000 	strb.w	sl, [r7]
	mem.ram[address] |= (0x1 << bit);
 8003902:	f045 0508 	orr.w	r5, r5, #8
                ucDataTransFlag = 0;
 8003906:	f88c a000 	strb.w	sl, [ip]
	mem.ram[address] &= ~(0x1 << bit);
 800390a:	f806 e009 	strb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 800390e:	f806 5008 	strb.w	r5, [r6, r8]
 8003912:	e79a      	b.n	800384a <vGBMemoryIncTimers+0x2e>
 8003914:	240010a4 	.word	0x240010a4
 8003918:	24001660 	.word	0x24001660
 800391c:	24011660 	.word	0x24011660
 8003920:	2400165c 	.word	0x2400165c
 8003924:	240010a6 	.word	0x240010a6
 8003928:	240010a3 	.word	0x240010a3
 800392c:	240010a5 	.word	0x240010a5
 8003930:	240010a7 	.word	0x240010a7

08003934 <prvSetMode.part.0>:
 * @return Nothing
 */
void prvSetMode(uint8_t mode){
    ucMode = mode;
    switch (mode) {
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003934:	2101      	movs	r1, #1
 8003936:	f64f 7041 	movw	r0, #65345	; 0xff41
void prvSetMode(uint8_t mode){
 800393a:	b508      	push	{r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800393c:	f7ff fe78 	bl	8003630 <vGBMemoryResetBit>
 8003940:	2100      	movs	r1, #0
 8003942:	f64f 7041 	movw	r0, #65345	; 0xff41
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
        default:                                                                       break;
    }
}
 8003946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800394a:	f7ff be71 	b.w	8003630 <vGBMemoryResetBit>
 800394e:	bf00      	nop

08003950 <vSetFrameBuffer>:
    memset(ucGBFrame, 0, 160 * 144 * 4 * ulScaleAmount);
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <vSetFrameBuffer+0x18>)
 8003952:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 8003956:	4805      	ldr	r0, [pc, #20]	; (800396c <vSetFrameBuffer+0x1c>)
 8003958:	2100      	movs	r1, #0
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	fb02 f203 	mul.w	r2, r2, r3
 8003962:	f007 b92b 	b.w	800abbc <memset>
 8003966:	bf00      	nop
 8003968:	24001014 	.word	0x24001014
 800396c:	24001010 	.word	0x24001010

08003970 <prvCheckBGP>:
void prvCheckBGP(){
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003972:	f64f 7047 	movw	r0, #65351	; 0xff47
            case 2: ucBGPColorToPalette[i] = 3;  break;
 8003976:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003978:	f7ff fe7c 	bl	8003674 <ucGBMemoryRead>
            case 3: ucBGPColorToPalette[i] = 4;  break;
 800397c:	2604      	movs	r6, #4
 800397e:	490c      	ldr	r1, [pc, #48]	; (80039b0 <prvCheckBGP+0x40>)
    uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003980:	2200      	movs	r2, #0
            case 1: ucBGPColorToPalette[i] = 2;  break;
 8003982:	2502      	movs	r5, #2
            case 0: ucBGPColorToPalette[i] = 1;  break;
 8003984:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 8003986:	fa40 f302 	asr.w	r3, r0, r2
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d00c      	beq.n	80039ac <prvCheckBGP+0x3c>
 8003992:	2b03      	cmp	r3, #3
 8003994:	d008      	beq.n	80039a8 <prvCheckBGP+0x38>
 8003996:	2b01      	cmp	r3, #1
            case 0: ucBGPColorToPalette[i] = 1;  break;
 8003998:	bf14      	ite	ne
 800399a:	700c      	strbne	r4, [r1, #0]
            case 1: ucBGPColorToPalette[i] = 2;  break;
 800399c:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 800399e:	3202      	adds	r2, #2
 80039a0:	3101      	adds	r1, #1
 80039a2:	2a08      	cmp	r2, #8
 80039a4:	d1ef      	bne.n	8003986 <prvCheckBGP+0x16>
}
 80039a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucBGPColorToPalette[i] = 4;  break;
 80039a8:	700e      	strb	r6, [r1, #0]
 80039aa:	e7f8      	b.n	800399e <prvCheckBGP+0x2e>
            case 2: ucBGPColorToPalette[i] = 3;  break;
 80039ac:	700f      	strb	r7, [r1, #0]
 80039ae:	e7f6      	b.n	800399e <prvCheckBGP+0x2e>
 80039b0:	24011710 	.word	0x24011710

080039b4 <prvCheckOBP0>:
void prvCheckOBP0(){
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039b6:	f64f 7048 	movw	r0, #65352	; 0xff48
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 80039ba:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039bc:	f7ff fe5a 	bl	8003674 <ucGBMemoryRead>
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 80039c0:	2604      	movs	r6, #4
 80039c2:	490c      	ldr	r1, [pc, #48]	; (80039f4 <prvCheckOBP0+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039c4:	2200      	movs	r2, #0
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 80039c6:	2502      	movs	r5, #2
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 80039c8:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 80039ca:	fa40 f302 	asr.w	r3, r0, r2
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d00c      	beq.n	80039f0 <prvCheckOBP0+0x3c>
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d008      	beq.n	80039ec <prvCheckOBP0+0x38>
 80039da:	2b01      	cmp	r3, #1
            case 0: ucOBP0ColorToPalette[i] = 1; break;
 80039dc:	bf14      	ite	ne
 80039de:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP0ColorToPalette[i] = 2; break;
 80039e0:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 80039e2:	3202      	adds	r2, #2
 80039e4:	3101      	adds	r1, #1
 80039e6:	2a08      	cmp	r2, #8
 80039e8:	d1ef      	bne.n	80039ca <prvCheckOBP0+0x16>
}
 80039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP0ColorToPalette[i] = 4; break;
 80039ec:	700e      	strb	r6, [r1, #0]
 80039ee:	e7f8      	b.n	80039e2 <prvCheckOBP0+0x2e>
            case 2: ucOBP0ColorToPalette[i] = 3; break;
 80039f0:	700f      	strb	r7, [r1, #0]
 80039f2:	e7f6      	b.n	80039e2 <prvCheckOBP0+0x2e>
 80039f4:	24011664 	.word	0x24011664

080039f8 <prvCheckOBP1>:
void prvCheckOBP1(){
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 80039fa:	f64f 7049 	movw	r0, #65353	; 0xff49
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 80039fe:	2703      	movs	r7, #3
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a00:	f7ff fe38 	bl	8003674 <ucGBMemoryRead>
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003a04:	2604      	movs	r6, #4
 8003a06:	490c      	ldr	r1, [pc, #48]	; (8003a38 <prvCheckOBP1+0x40>)
    uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a08:	2200      	movs	r2, #0
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a0a:	2502      	movs	r5, #2
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a0c:	2401      	movs	r4, #1
        switch ((BGP >> (i*2)) & 0x03) {
 8003a0e:	fa40 f302 	asr.w	r3, r0, r2
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d00c      	beq.n	8003a34 <prvCheckOBP1+0x3c>
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d008      	beq.n	8003a30 <prvCheckOBP1+0x38>
 8003a1e:	2b01      	cmp	r3, #1
            case 0: ucOBP1ColorToPalette[i] = 1;  break;
 8003a20:	bf14      	ite	ne
 8003a22:	700c      	strbne	r4, [r1, #0]
            case 1: ucOBP1ColorToPalette[i] = 2;  break;
 8003a24:	700d      	strbeq	r5, [r1, #0]
    for(int i = 0; i < 4; i++){
 8003a26:	3202      	adds	r2, #2
 8003a28:	3101      	adds	r1, #1
 8003a2a:	2a08      	cmp	r2, #8
 8003a2c:	d1ef      	bne.n	8003a0e <prvCheckOBP1+0x16>
}
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            case 3: ucOBP1ColorToPalette[i] = 4;  break;
 8003a30:	700e      	strb	r6, [r1, #0]
 8003a32:	e7f8      	b.n	8003a26 <prvCheckOBP1+0x2e>
            case 2: ucOBP1ColorToPalette[i] = 3;  break;
 8003a34:	700f      	strb	r7, [r1, #0]
 8003a36:	e7f6      	b.n	8003a26 <prvCheckOBP1+0x2e>
 8003a38:	2401171c 	.word	0x2401171c

08003a3c <getTileLineData>:
    if (TileDataAddr == 0x8000){
 8003a3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	460d      	mov	r5, r1
    if (TileDataAddr == 0x8000){
 8003a44:	d00e      	beq.n	8003a64 <getTileLineData+0x28>
        int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 8003a46:	4418      	add	r0, r3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	b280      	uxth	r0, r0
 8003a4c:	f7ff fe12 	bl	8003674 <ucGBMemoryRead>
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a50:	1961      	adds	r1, r4, r5
        uint16_t temp2 =( temp + 128) * 0x10;
 8003a52:	b240      	sxtb	r0, r0
 8003a54:	3080      	adds	r0, #128	; 0x80
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a56:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a5e:	b280      	uxth	r0, r0
 8003a60:	f7ff bed4 	b.w	800380c <usGBMemoryReadShort>
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003a64:	4418      	add	r0, r3
 8003a66:	b280      	uxth	r0, r0
 8003a68:	f7ff fe04 	bl	8003674 <ucGBMemoryRead>
 8003a6c:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 8003a70:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003a78:	b280      	uxth	r0, r0
 8003a7a:	f7ff bec7 	b.w	800380c <usGBMemoryReadShort>
 8003a7e:	bf00      	nop

08003a80 <prvGBPPUDrawLineWindow.part.0>:
 */
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
    if(WY > ly || WY > 143 || WX > 166)
        return;

    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003a80:	1a80      	subs	r0, r0, r2
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset

    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003a82:	461a      	mov	r2, r3
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003a88:	4244      	negs	r4, r0
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003a8a:	f1a1 0707 	sub.w	r7, r1, #7
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003a8e:	f000 0107 	and.w	r1, r0, #7
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003a92:	f3c0 00c4 	ubfx	r0, r0, #3, #5
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003a96:	f004 0407 	and.w	r4, r4, #7
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003a9a:	f007 0607 	and.w	r6, r7, #7
    uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);                                     // gives the address offset in the tile map
 8003a9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
        uint8_t pixelData = 0;

        switch (((tile_data << pixl_offset) & 0x8080)) {
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003aa2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003ba0 <prvGBPPUDrawLineWindow.part.0+0x120>
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003aa6:	bf58      	it	pl
 8003aa8:	4261      	negpl	r1, r4
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003aaa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003ba4 <prvGBPPUDrawLineWindow.part.0+0x124>
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4c38      	ldr	r4, [pc, #224]	; (8003b94 <prvGBPPUDrawLineWindow.part.0+0x114>)
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003ab2:	0049      	lsls	r1, r1, #1
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ab4:	ed2d 8b02 	vpush	{d8}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	ee08 3a10 	vmov	s16, r3
    uint8_t line_offset = (((ly - WY) % 8)) * 2;                                                // gives the line offset in the tile
 8003abe:	b2c9      	uxtb	r1, r1
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ac0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003ac4:	9101      	str	r1, [sp, #4]
 8003ac6:	462b      	mov	r3, r5
void prvGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ac8:	ee08 5a90 	vmov	s17, r5
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003acc:	427d      	negs	r5, r7
 8003ace:	f005 0507 	and.w	r5, r5, #7
 8003ad2:	bf58      	it	pl
 8003ad4:	426e      	negpl	r6, r5
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003ad6:	f7ff ffb1 	bl	8003a3c <getTileLineData>
 8003ada:	4d2f      	ldr	r5, [pc, #188]	; (8003b98 <prvGBPPUDrawLineWindow.part.0+0x118>)
 8003adc:	4683      	mov	fp, r0
    uint8_t pixl_offset = (WX - 7) % 8;                                                         // gives current pixel offset
 8003ade:	b2f6      	uxtb	r6, r6
    for(int j = (WX - 7); j < 160; j++){
 8003ae0:	9901      	ldr	r1, [sp, #4]
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003ae2:	fa0b f306 	lsl.w	r3, fp, r6
 8003ae6:	f248 0280 	movw	r2, #32896	; 0x8080
 8003aea:	4013      	ands	r3, r2
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d049      	beq.n	8003b86 <prvGBPPUDrawLineWindow.part.0+0x106>
 8003af2:	dc28      	bgt.n	8003b46 <prvGBPPUDrawLineWindow.part.0+0xc6>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d041      	beq.n	8003b7c <prvGBPPUDrawLineWindow.part.0+0xfc>
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d12c      	bne.n	8003b56 <prvGBPPUDrawLineWindow.part.0+0xd6>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f89a c001 	ldrb.w	ip, [sl, #1]
 8003b02:	f807 3009 	strb.w	r3, [r7, r9]
    pixelPos *= ulScaleAmount;
 8003b06:	7823      	ldrb	r3, [r4, #0]
 8003b08:	fb07 fe03 	mul.w	lr, r7, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b0c:	b17b      	cbz	r3, 8003b2e <prvGBPPUDrawLineWindow.part.0+0xae>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	4822      	ldr	r0, [pc, #136]	; (8003b9c <prvGBPPUDrawLineWindow.part.0+0x11c>)
 8003b12:	ee07 1a90 	vmov	s15, r1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003b16:	682b      	ldr	r3, [r5, #0]
 8003b18:	6801      	ldr	r1, [r0, #0]
 8003b1a:	4473      	add	r3, lr
 8003b1c:	4413      	add	r3, r2
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b1e:	3201      	adds	r2, #1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003b20:	f803 c001 	strb.w	ip, [r3, r1]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003b24:	7823      	ldrb	r3, [r4, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dbf5      	blt.n	8003b16 <prvGBPPUDrawLineWindow.part.0+0x96>
 8003b2a:	ee17 1a90 	vmov	r1, s15
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
        }

        prvUpdateBuffer(pixelData, j);
        pixl_offset++;
 8003b2e:	3601      	adds	r6, #1
 8003b30:	b2f6      	uxtb	r6, r6

        if(pixl_offset == 8){
 8003b32:	2e08      	cmp	r6, #8
 8003b34:	d012      	beq.n	8003b5c <prvGBPPUDrawLineWindow.part.0+0xdc>
    for(int j = (WX - 7); j < 160; j++){
 8003b36:	3701      	adds	r7, #1
 8003b38:	2fa0      	cmp	r7, #160	; 0xa0
 8003b3a:	d1d2      	bne.n	8003ae2 <prvGBPPUDrawLineWindow.part.0+0x62>
            tile_offset++;
            pixl_offset = 0;
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
        }
    }
}
 8003b3c:	b003      	add	sp, #12
 8003b3e:	ecbd 8b02 	vpop	{d8}
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d105      	bne.n	8003b56 <prvGBPPUDrawLineWindow.part.0+0xd6>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	f89a c003 	ldrb.w	ip, [sl, #3]
 8003b50:	f807 3009 	strb.w	r3, [r7, r9]
 8003b54:	e7d7      	b.n	8003b06 <prvGBPPUDrawLineWindow.part.0+0x86>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b56:	f04f 0c00 	mov.w	ip, #0
 8003b5a:	e7d4      	b.n	8003b06 <prvGBPPUDrawLineWindow.part.0+0x86>
            tile_offset++;
 8003b5c:	f108 0801 	add.w	r8, r8, #1
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b60:	ee18 3a90 	vmov	r3, s17
 8003b64:	ee18 2a10 	vmov	r2, s16
 8003b68:	9101      	str	r1, [sp, #4]
            tile_offset++;
 8003b6a:	fa1f f888 	uxth.w	r8, r8
            pixl_offset = 0;
 8003b6e:	2600      	movs	r6, #0
            tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b70:	4640      	mov	r0, r8
 8003b72:	f7ff ff63 	bl	8003a3c <getTileLineData>
 8003b76:	9901      	ldr	r1, [sp, #4]
 8003b78:	4683      	mov	fp, r0
 8003b7a:	e7dc      	b.n	8003b36 <prvGBPPUDrawLineWindow.part.0+0xb6>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003b7c:	f89a c000 	ldrb.w	ip, [sl]
 8003b80:	f807 3009 	strb.w	r3, [r7, r9]
 8003b84:	e7bf      	b.n	8003b06 <prvGBPPUDrawLineWindow.part.0+0x86>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003b86:	2302      	movs	r3, #2
 8003b88:	f89a c002 	ldrb.w	ip, [sl, #2]
 8003b8c:	f807 3009 	strb.w	r3, [r7, r9]
 8003b90:	e7b9      	b.n	8003b06 <prvGBPPUDrawLineWindow.part.0+0x86>
 8003b92:	bf00      	nop
 8003b94:	24001014 	.word	0x24001014
 8003b98:	24001010 	.word	0x24001010
 8003b9c:	2401170c 	.word	0x2401170c
 8003ba0:	24011710 	.word	0x24011710
 8003ba4:	2401166c 	.word	0x2401166c

08003ba8 <prvCheckLYC>:
void prvCheckLYC(uint8_t ly){
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4604      	mov	r4, r0
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003bac:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003bb0:	f7ff fd60 	bl	8003674 <ucGBMemoryRead>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003bb4:	2102      	movs	r1, #2
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003bb6:	42a0      	cmp	r0, r4
        vGBMemorySetBit(STAT_ADDR, 2);
 8003bb8:	f64f 7041 	movw	r0, #65345	; 0xff41
    if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003bbc:	d003      	beq.n	8003bc6 <prvCheckLYC+0x1e>
}
 8003bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vGBMemoryResetBit(STAT_ADDR, 2);
 8003bc2:	f7ff bd35 	b.w	8003630 <vGBMemoryResetBit>
        vGBMemorySetBit(STAT_ADDR, 2);
 8003bc6:	f7ff fd0d 	bl	80035e4 <vGBMemorySetBit>
        if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 6))
 8003bca:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003bce:	f7ff fd51 	bl	8003674 <ucGBMemoryRead>
 8003bd2:	2106      	movs	r1, #6
 8003bd4:	f7ff f852 	bl	8002c7c <ucCheckBit>
 8003bd8:	b900      	cbnz	r0, 8003bdc <prvCheckLYC+0x34>
}
 8003bda:	bd10      	pop	{r4, pc}
            vGBMemorySetBit(IF_ADDR, 1);
 8003bdc:	2101      	movs	r1, #1
 8003bde:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            vGBMemorySetBit(IF_ADDR, 1);
 8003be6:	f7ff bcfd 	b.w	80035e4 <vGBMemorySetBit>
 8003bea:	bf00      	nop

08003bec <prvSetMode>:
void prvSetMode(uint8_t mode){
 8003bec:	b508      	push	{r3, lr}
    ucMode = mode;
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <prvSetMode+0x64>)
 8003bf0:	7018      	strb	r0, [r3, #0]
    switch (mode) {
 8003bf2:	2803      	cmp	r0, #3
 8003bf4:	d82b      	bhi.n	8003c4e <prvSetMode+0x62>
 8003bf6:	e8df f000 	tbb	[pc, r0]
 8003bfa:	1202      	.short	0x1202
 8003bfc:	061e      	.short	0x061e
}
 8003bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c02:	f7ff be97 	b.w	8003934 <prvSetMode.part.0>
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003c06:	2101      	movs	r1, #1
 8003c08:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c0c:	f7ff fcea 	bl	80035e4 <vGBMemorySetBit>
 8003c10:	2100      	movs	r1, #0
 8003c12:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003c1a:	f7ff bce3 	b.w	80035e4 <vGBMemorySetBit>
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c24:	f7ff fd04 	bl	8003630 <vGBMemoryResetBit>
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003c32:	f7ff bcd7 	b.w	80035e4 <vGBMemorySetBit>
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003c36:	2101      	movs	r1, #1
 8003c38:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003c3c:	f7ff fcd2 	bl	80035e4 <vGBMemorySetBit>
 8003c40:	2100      	movs	r1, #0
 8003c42:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003c4a:	f7ff bcf1 	b.w	8003630 <vGBMemoryResetBit>
}
 8003c4e:	bd08      	pop	{r3, pc}
 8003c50:	24011718 	.word	0x24011718

08003c54 <prvGBPPUDrawLineBackground>:
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003c58:	4402      	add	r2, r0
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	461e      	mov	r6, r3
 8003c5e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8003d98 <prvGBPPUDrawLineBackground+0x144>
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003c62:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
 8003c66:	f3c2 04c4 	ubfx	r4, r2, #3, #5
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003c6a:	f002 0007 	and.w	r0, r2, #7
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c6e:	4632      	mov	r2, r6
    uint8_t pixl_offset = SCX % 8;                                                              // gives current pixel offset
 8003c70:	f005 0707 	and.w	r7, r5, #7
 8003c74:	f109 0aa0 	add.w	sl, r9, #160	; 0xa0
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c78:	46c8      	mov	r8, r9
 8003c7a:	4e44      	ldr	r6, [pc, #272]	; (8003d8c <prvGBPPUDrawLineBackground+0x138>)
 8003c7c:	4d44      	ldr	r5, [pc, #272]	; (8003d90 <prvGBPPUDrawLineBackground+0x13c>)
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c7e:	ed2d 8b02 	vpush	{d8}
 8003c82:	b085      	sub	sp, #20
 8003c84:	ee08 3a10 	vmov	s16, r3
 8003c88:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    uint16_t first_tile = tile_offset % 32;
 8003c8c:	f8cd b00c 	str.w	fp, [sp, #12]
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c90:	460b      	mov	r3, r1
void prvGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c92:	ee08 1a90 	vmov	s17, r1
    uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;                                           // gives the line offset in the tile
 8003c96:	0041      	lsls	r1, r0, #1
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003c98:	eb0b 1044 	add.w	r0, fp, r4, lsl #5
 8003c9c:	4c3d      	ldr	r4, [pc, #244]	; (8003d94 <prvGBPPUDrawLineBackground+0x140>)
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003c9e:	9102      	str	r1, [sp, #8]
    uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);                        // gives the address offset in the tile map
 8003ca0:	9001      	str	r0, [sp, #4]
    uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);  // tile data holds tile line information
 8003ca2:	f7ff fecb 	bl	8003a3c <getTileLineData>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003ca6:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8003d9c <prvGBPPUDrawLineBackground+0x148>
    for(int j = 0; j < 160; j++){
 8003caa:	9902      	ldr	r1, [sp, #8]
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cac:	fa00 f307 	lsl.w	r3, r0, r7
 8003cb0:	f248 0280 	movw	r2, #32896	; 0x8080
 8003cb4:	eba8 0c09 	sub.w	ip, r8, r9
 8003cb8:	4013      	ands	r3, r2
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d050      	beq.n	8003d62 <prvGBPPUDrawLineBackground+0x10e>
 8003cc0:	dc28      	bgt.n	8003d14 <prvGBPPUDrawLineBackground+0xc0>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d048      	beq.n	8003d58 <prvGBPPUDrawLineBackground+0x104>
 8003cc6:	2b80      	cmp	r3, #128	; 0x80
 8003cc8:	d143      	bne.n	8003d52 <prvGBPPUDrawLineBackground+0xfe>
            case 0x0080: pixelData = ucBGPColorToPalette[1]; ucBGWINline[j] = 1; break;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f89b e001 	ldrb.w	lr, [fp, #1]
 8003cd0:	f888 3000 	strb.w	r3, [r8]
    pixelPos *= ulScaleAmount;
 8003cd4:	7823      	ldrb	r3, [r4, #0]
 8003cd6:	fb0c fc03 	mul.w	ip, ip, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003cda:	b173      	cbz	r3, 8003cfa <prvGBPPUDrawLineBackground+0xa6>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	ee07 1a90 	vmov	s15, r1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003ce2:	6833      	ldr	r3, [r6, #0]
 8003ce4:	6829      	ldr	r1, [r5, #0]
 8003ce6:	4463      	add	r3, ip
 8003ce8:	4413      	add	r3, r2
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003cea:	3201      	adds	r2, #1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003cec:	f803 e001 	strb.w	lr, [r3, r1]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003cf0:	7823      	ldrb	r3, [r4, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	dbf5      	blt.n	8003ce2 <prvGBPPUDrawLineBackground+0x8e>
 8003cf6:	ee17 1a90 	vmov	r1, s15
        pixl_offset++;
 8003cfa:	3701      	adds	r7, #1
 8003cfc:	b2ff      	uxtb	r7, r7
        if(pixl_offset == 8){
 8003cfe:	2f08      	cmp	r7, #8
 8003d00:	d010      	beq.n	8003d24 <prvGBPPUDrawLineBackground+0xd0>
    for(int j = 0; j < 160; j++){
 8003d02:	f108 0801 	add.w	r8, r8, #1
 8003d06:	45c2      	cmp	sl, r8
 8003d08:	d1d0      	bne.n	8003cac <prvGBPPUDrawLineBackground+0x58>
}
 8003d0a:	b005      	add	sp, #20
 8003d0c:	ecbd 8b02 	vpop	{d8}
 8003d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d11c      	bne.n	8003d52 <prvGBPPUDrawLineBackground+0xfe>
            case 0x8080: pixelData = ucBGPColorToPalette[3]; ucBGWINline[j] = 3; break;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f89b e003 	ldrb.w	lr, [fp, #3]
 8003d1e:	f888 3000 	strb.w	r3, [r8]
 8003d22:	e7d7      	b.n	8003cd4 <prvGBPPUDrawLineBackground+0x80>
            tile_offset++;
 8003d24:	9b01      	ldr	r3, [sp, #4]
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d26:	9803      	ldr	r0, [sp, #12]
            tile_offset++;
 8003d28:	1c5f      	adds	r7, r3, #1
 8003d2a:	f007 031f 	and.w	r3, r7, #31
 8003d2e:	b2bf      	uxth	r7, r7
            if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d30:	18c2      	adds	r2, r0, r3
 8003d32:	2a0b      	cmp	r2, #11
 8003d34:	dd01      	ble.n	8003d3a <prvGBPPUDrawLineBackground+0xe6>
 8003d36:	4298      	cmp	r0, r3
 8003d38:	d819      	bhi.n	8003d6e <prvGBPPUDrawLineBackground+0x11a>
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	ee18 3a90 	vmov	r3, s17
 8003d40:	ee18 2a10 	vmov	r2, s16
 8003d44:	9102      	str	r1, [sp, #8]
 8003d46:	f7ff fe79 	bl	8003a3c <getTileLineData>
            tile_offset++;
 8003d4a:	9701      	str	r7, [sp, #4]
                tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d4c:	9902      	ldr	r1, [sp, #8]
            pixl_offset = 0;
 8003d4e:	2700      	movs	r7, #0
 8003d50:	e7d7      	b.n	8003d02 <prvGBPPUDrawLineBackground+0xae>
        switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d52:	f04f 0e00 	mov.w	lr, #0
 8003d56:	e7bd      	b.n	8003cd4 <prvGBPPUDrawLineBackground+0x80>
            case 0x0000: pixelData = ucBGPColorToPalette[0]; ucBGWINline[j] = 0; break;
 8003d58:	f89b e000 	ldrb.w	lr, [fp]
 8003d5c:	f888 3000 	strb.w	r3, [r8]
 8003d60:	e7b8      	b.n	8003cd4 <prvGBPPUDrawLineBackground+0x80>
            case 0x8000: pixelData = ucBGPColorToPalette[2]; ucBGWINline[j] = 2; break;
 8003d62:	2302      	movs	r3, #2
 8003d64:	f89b e002 	ldrb.w	lr, [fp, #2]
 8003d68:	f888 3000 	strb.w	r3, [r8]
 8003d6c:	e7b2      	b.n	8003cd4 <prvGBPPUDrawLineBackground+0x80>
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d6e:	9b01      	ldr	r3, [sp, #4]
 8003d70:	ee18 2a10 	vmov	r2, s16
 8003d74:	9102      	str	r1, [sp, #8]
 8003d76:	f1a3 001f 	sub.w	r0, r3, #31
 8003d7a:	ee18 3a90 	vmov	r3, s17
            tile_offset++;
 8003d7e:	9701      	str	r7, [sp, #4]
            pixl_offset = 0;
 8003d80:	2700      	movs	r7, #0
                tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d82:	b280      	uxth	r0, r0
 8003d84:	f7ff fe5a 	bl	8003a3c <getTileLineData>
 8003d88:	9902      	ldr	r1, [sp, #8]
 8003d8a:	e7ba      	b.n	8003d02 <prvGBPPUDrawLineBackground+0xae>
 8003d8c:	24001010 	.word	0x24001010
 8003d90:	2401170c 	.word	0x2401170c
 8003d94:	24001014 	.word	0x24001014
 8003d98:	2401166c 	.word	0x2401166c
 8003d9c:	24011710 	.word	0x24011710

08003da0 <prvGBPPUDrawLineObjects>:
 * @brief  Update frame buffer with object information
 * @details Populates the frame buffer with object sprites on line ly
 * @param ly LY Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLineObjects(uint8_t ly){
 8003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da4:	f44f 4b7e 	mov.w	fp, #65024	; 0xfe00
 8003da8:	b083      	sub	sp, #12
 8003daa:	4606      	mov	r6, r0
 8003dac:	e008      	b.n	8003dc0 <prvGBPPUDrawLineObjects+0x20>
    for(int obj = 0; obj < 40; obj++){
 8003dae:	f10b 0b04 	add.w	fp, fp, #4
 8003db2:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003db6:	fa1f fb8b 	uxth.w	fp, fp
 8003dba:	459b      	cmp	fp, r3
 8003dbc:	f000 80ab 	beq.w	8003f16 <prvGBPPUDrawLineObjects+0x176>
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003dc0:	4658      	mov	r0, fp
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dc2:	f10b 0503 	add.w	r5, fp, #3
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003dc6:	f7ff fc55 	bl	8003674 <ucGBMemoryRead>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003dca:	f10b 0301 	add.w	r3, fp, #1
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003dce:	f1a0 0a10 	sub.w	sl, r0, #16
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dd2:	b2ad      	uxth	r5, r5
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003dd4:	b298      	uxth	r0, r3
 8003dd6:	f7ff fc4d 	bl	8003674 <ucGBMemoryRead>
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003dda:	f10b 0202 	add.w	r2, fp, #2
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003dde:	4607      	mov	r7, r0
        int16_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;                      // must be signed for logic to work
 8003de0:	fa0f fa8a 	sxth.w	sl, sl
        uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003de4:	b290      	uxth	r0, r2
 8003de6:	f7ff fc45 	bl	8003674 <ucGBMemoryRead>
 8003dea:	4680      	mov	r8, r0
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dec:	4628      	mov	r0, r5
 8003dee:	f7ff fc41 	bl	8003674 <ucGBMemoryRead>
 8003df2:	2107      	movs	r1, #7
 8003df4:	f7fe ff42 	bl	8002c7c <ucCheckBit>
 8003df8:	4603      	mov	r3, r0
        uint8_t objYFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003dfa:	4628      	mov	r0, r5
        uint8_t objPrio     = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dfc:	9300      	str	r3, [sp, #0]
        uint8_t objYFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003dfe:	f7ff fc39 	bl	8003674 <ucGBMemoryRead>
 8003e02:	2106      	movs	r1, #6
 8003e04:	f7fe ff3a 	bl	8002c7c <ucCheckBit>
 8003e08:	4681      	mov	r9, r0
        uint8_t objXFlip    = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f7ff fc32 	bl	8003674 <ucGBMemoryRead>
 8003e10:	2105      	movs	r1, #5
 8003e12:	f7fe ff33 	bl	8002c7c <ucCheckBit>
 8003e16:	4604      	mov	r4, r0
        uint8_t objPalette  = ucCheckBit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f7ff fc2b 	bl	8003674 <ucGBMemoryRead>
 8003e1e:	2104      	movs	r1, #4
 8003e20:	f7fe ff2c 	bl	8002c7c <ucCheckBit>
 8003e24:	4605      	mov	r5, r0
        uint8_t objSize     = ucCheckBit(ucGBMemoryRead(LCDC_ADDR), 2);
 8003e26:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003e2a:	f7ff fc23 	bl	8003674 <ucGBMemoryRead>
 8003e2e:	2102      	movs	r1, #2
 8003e30:	f7fe ff24 	bl	8002c7c <ucCheckBit>

        uint8_t objHeight   = (objSize == 0) ? 8 : 16;
 8003e34:	2800      	cmp	r0, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2308      	moveq	r3, #8
 8003e3a:	2310      	movne	r3, #16

        if(yCoordinate <= ly && (yCoordinate + objHeight) > ly){
 8003e3c:	45b2      	cmp	sl, r6
 8003e3e:	dcb6      	bgt.n	8003dae <prvGBPPUDrawLineObjects+0xe>
 8003e40:	eb0a 0203 	add.w	r2, sl, r3
 8003e44:	42b2      	cmp	r2, r6
 8003e46:	ddb2      	ble.n	8003dae <prvGBPPUDrawLineObjects+0xe>

            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003e48:	f1b9 0f00 	cmp.w	r9, #0
 8003e4c:	d05e      	beq.n	8003f0c <prvGBPPUDrawLineObjects+0x16c>
 8003e4e:	1e58      	subs	r0, r3, #1
 8003e50:	eba6 0a0a 	sub.w	sl, r6, sl
 8003e54:	eba0 000a 	sub.w	r0, r0, sl
 8003e58:	0040      	lsls	r0, r0, #1
 8003e5a:	b2c0      	uxtb	r0, r0
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e5c:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8003e60:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003f30 <prvGBPPUDrawLineObjects+0x190>
 8003e64:	eb00 1008 	add.w	r0, r0, r8, lsl #4
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];

            for(int pixelNum = 0; pixelNum < 8; pixelNum++){

                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003e68:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003f34 <prvGBPPUDrawLineObjects+0x194>
            uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e6c:	b280      	uxth	r0, r0
 8003e6e:	f7ff fccd 	bl	800380c <usGBMemoryReadShort>
        int16_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;                   // "" "" "" same here
 8003e72:	f1a7 0308 	sub.w	r3, r7, #8
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003e76:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <prvGBPPUDrawLineObjects+0x17c>)
                uint8_t pixelData = 0;

                switch (colorInfo) {
 8003e78:	f248 0e80 	movw	lr, #32896	; 0x8080
            uint8_t *palette = (objPalette) ? &ucOBP1ColorToPalette[0] : &ucOBP0ColorToPalette[0];
 8003e7c:	4f28      	ldr	r7, [pc, #160]	; (8003f20 <prvGBPPUDrawLineObjects+0x180>)
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	bf08      	it	eq
 8003e84:	4617      	moveq	r7, r2
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003e86:	2200      	movs	r2, #0
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003e88:	b18c      	cbz	r4, 8003eae <prvGBPPUDrawLineObjects+0x10e>
 8003e8a:	fa40 f102 	asr.w	r1, r0, r2
 8003e8e:	ea08 11c1 	and.w	r1, r8, r1, lsl #7
 8003e92:	b289      	uxth	r1, r1
                switch (colorInfo) {
 8003e94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e98:	d011      	beq.n	8003ebe <prvGBPPUDrawLineObjects+0x11e>
 8003e9a:	4571      	cmp	r1, lr
 8003e9c:	d034      	beq.n	8003f08 <prvGBPPUDrawLineObjects+0x168>
 8003e9e:	2980      	cmp	r1, #128	; 0x80
 8003ea0:	d030      	beq.n	8003f04 <prvGBPPUDrawLineObjects+0x164>
            for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003ea2:	3201      	adds	r2, #1
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	2a08      	cmp	r2, #8
 8003ea8:	d081      	beq.n	8003dae <prvGBPPUDrawLineObjects+0xe>
                uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d1ed      	bne.n	8003e8a <prvGBPPUDrawLineObjects+0xea>
 8003eae:	fa00 f102 	lsl.w	r1, r0, r2
 8003eb2:	ea01 0108 	and.w	r1, r1, r8
 8003eb6:	b289      	uxth	r1, r1
                switch (colorInfo) {
 8003eb8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003ebc:	d1ed      	bne.n	8003e9a <prvGBPPUDrawLineObjects+0xfa>
                    case 0x0000: pixelData = 0;          break;
                    case 0x0080: pixelData = palette[1]; break;
                    case 0x8000: pixelData = palette[2]; break;
 8003ebe:	78bd      	ldrb	r5, [r7, #2]
                    case 0x8080: pixelData = palette[3]; break;
                }

                if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <prvGBPPUDrawLineObjects+0x102>
 8003ec4:	2b9f      	cmp	r3, #159	; 0x9f
 8003ec6:	d8ec      	bhi.n	8003ea2 <prvGBPPUDrawLineObjects+0x102>
                    if((objPrio) && ucBGWINline[xCoordinate + pixelNum]){
 8003ec8:	9900      	ldr	r1, [sp, #0]
 8003eca:	b119      	cbz	r1, 8003ed4 <prvGBPPUDrawLineObjects+0x134>
 8003ecc:	4915      	ldr	r1, [pc, #84]	; (8003f24 <prvGBPPUDrawLineObjects+0x184>)
 8003ece:	5c59      	ldrb	r1, [r3, r1]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d1e6      	bne.n	8003ea2 <prvGBPPUDrawLineObjects+0x102>
    pixelPos *= ulScaleAmount;
 8003ed4:	4914      	ldr	r1, [pc, #80]	; (8003f28 <prvGBPPUDrawLineObjects+0x188>)
 8003ed6:	7809      	ldrb	r1, [r1, #0]
 8003ed8:	fb01 fa03 	mul.w	sl, r1, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d0e0      	beq.n	8003ea2 <prvGBPPUDrawLineObjects+0x102>
 8003ee0:	f04f 0c00 	mov.w	ip, #0
 8003ee4:	9301      	str	r3, [sp, #4]
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003ee6:	4911      	ldr	r1, [pc, #68]	; (8003f2c <prvGBPPUDrawLineObjects+0x18c>)
 8003ee8:	f8d9 3000 	ldr.w	r3, [r9]
 8003eec:	6809      	ldr	r1, [r1, #0]
 8003eee:	4451      	add	r1, sl
 8003ef0:	4461      	add	r1, ip
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003ef2:	f10c 0c01 	add.w	ip, ip, #1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003ef6:	54cd      	strb	r5, [r1, r3]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <prvGBPPUDrawLineObjects+0x188>)
 8003efa:	7819      	ldrb	r1, [r3, #0]
 8003efc:	458c      	cmp	ip, r1
 8003efe:	dbf2      	blt.n	8003ee6 <prvGBPPUDrawLineObjects+0x146>
 8003f00:	9b01      	ldr	r3, [sp, #4]
 8003f02:	e7ce      	b.n	8003ea2 <prvGBPPUDrawLineObjects+0x102>
                    case 0x0080: pixelData = palette[1]; break;
 8003f04:	787d      	ldrb	r5, [r7, #1]
 8003f06:	e7db      	b.n	8003ec0 <prvGBPPUDrawLineObjects+0x120>
                    case 0x8080: pixelData = palette[3]; break;
 8003f08:	78fd      	ldrb	r5, [r7, #3]
 8003f0a:	e7d9      	b.n	8003ec0 <prvGBPPUDrawLineObjects+0x120>
            uint8_t lineOffset = objYFlip ? ((objHeight - 1) - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003f0c:	eba6 000a 	sub.w	r0, r6, sl
 8003f10:	0040      	lsls	r0, r0, #1
 8003f12:	b2c0      	uxtb	r0, r0
 8003f14:	e7a2      	b.n	8003e5c <prvGBPPUDrawLineObjects+0xbc>
                    }
                }
            }
        }
    }
}
 8003f16:	b003      	add	sp, #12
 8003f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1c:	24011664 	.word	0x24011664
 8003f20:	2401171c 	.word	0x2401171c
 8003f24:	2401166c 	.word	0x2401166c
 8003f28:	24001014 	.word	0x24001014
 8003f2c:	24001010 	.word	0x24001010
 8003f30:	2401170c 	.word	0x2401170c
 8003f34:	ffff8080 	.word	0xffff8080

08003f38 <prvGBPPUDrawLine>:
 * @param ly LY Register Value
 * @param SCX Scroll X Register Value
 * @param SCY Scroll Y Register Value
 * @returns Nothing
 */
void prvGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    prvCheckBGP();
    prvCheckOBP0();
    prvCheckOBP1();

    uint16_t TileDataAddr = prvGetBackWinTileDataSel();
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f3c:	4c4f      	ldr	r4, [pc, #316]	; (800407c <prvGBPPUDrawLine+0x144>)
void prvGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003f3e:	b083      	sub	sp, #12
 8003f40:	4607      	mov	r7, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	4690      	mov	r8, r2
    prvCheckBGP();
 8003f46:	f7ff fd13 	bl	8003970 <prvCheckBGP>
    prvCheckOBP0();
 8003f4a:	f7ff fd33 	bl	80039b4 <prvCheckOBP0>
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f4e:	4e4c      	ldr	r6, [pc, #304]	; (8004080 <prvGBPPUDrawLine+0x148>)
    prvCheckOBP1();
 8003f50:	f7ff fd52 	bl	80039f8 <prvCheckOBP1>
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f54:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f58:	f7ff fb8c 	bl	8003674 <ucGBMemoryRead>
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f5c:	7823      	ldrb	r3, [r4, #0]
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f5e:	4602      	mov	r2, r0
    ulLineAdd = ulScaleAmount * 160;

    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003f60:	f64f 7040 	movw	r0, #65344	; 0xff40
    ulLineAdd = ulScaleAmount * 160;
 8003f64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f68:	f012 0f10 	tst.w	r2, #16
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f6c:	fb17 f203 	smulbb	r2, r7, r3
    ulLineAdd = ulScaleAmount * 160;
 8003f70:	ea4f 1141 	mov.w	r1, r1, lsl #5
    return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003f74:	bf14      	ite	ne
 8003f76:	f44f 4900 	movne.w	r9, #32768	; 0x8000
 8003f7a:	f44f 4908 	moveq.w	r9, #34816	; 0x8800
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f7e:	fb03 f302 	mul.w	r3, r3, r2
    ulLineAdd = ulScaleAmount * 160;
 8003f82:	4a40      	ldr	r2, [pc, #256]	; (8004084 <prvGBPPUDrawLine+0x14c>)
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ulLineAdd = ulScaleAmount * 160;
 8003f88:	6011      	str	r1, [r2, #0]
    ulCurLine = ly * ulScaleAmount * ulScaleAmount * 160;
 8003f8a:	015b      	lsls	r3, r3, #5
 8003f8c:	6033      	str	r3, [r6, #0]
    if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003f8e:	f7ff fb71 	bl	8003674 <ucGBMemoryRead>
 8003f92:	f010 0001 	ands.w	r0, r0, #1
 8003f96:	d127      	bne.n	8003fe8 <prvGBPPUDrawLine+0xb0>
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20){
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
        }
    }else{
        for(int j = 0; j < 160; j++){
 8003f98:	4686      	mov	lr, r0
 8003f9a:	4d3b      	ldr	r5, [pc, #236]	; (8004088 <prvGBPPUDrawLine+0x150>)
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003f9c:	f04f 0c01 	mov.w	ip, #1
    pixelPos *= ulScaleAmount;
 8003fa0:	7823      	ldrb	r3, [r4, #0]
 8003fa2:	fb0e f003 	mul.w	r0, lr, r3
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003fa6:	b153      	cbz	r3, 8003fbe <prvGBPPUDrawLine+0x86>
 8003fa8:	2100      	movs	r1, #0
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	6832      	ldr	r2, [r6, #0]
 8003fae:	4403      	add	r3, r0
 8003fb0:	440b      	add	r3, r1
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003fb2:	3101      	adds	r1, #1
            ucGBFrame[pixelPos + xStretch + (ulCurLine)] = data;
 8003fb4:	f803 c002 	strb.w	ip, [r3, r2]
        for(int xStretch = 0; xStretch < ulScaleAmount; xStretch++){
 8003fb8:	7823      	ldrb	r3, [r4, #0]
 8003fba:	4299      	cmp	r1, r3
 8003fbc:	dbf5      	blt.n	8003faa <prvGBPPUDrawLine+0x72>
        for(int j = 0; j < 160; j++){
 8003fbe:	f10e 0e01 	add.w	lr, lr, #1
 8003fc2:	f1be 0fa0 	cmp.w	lr, #160	; 0xa0
 8003fc6:	d1eb      	bne.n	8003fa0 <prvGBPPUDrawLine+0x68>
            prvUpdateBuffer(1, j);
        }
    }

    if(ucGBMemoryRead(LCDC_ADDR) & 0x02){
 8003fc8:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fcc:	f7ff fb52 	bl	8003674 <ucGBMemoryRead>
 8003fd0:	0783      	lsls	r3, r0, #30
 8003fd2:	d428      	bmi.n	8004026 <prvGBPPUDrawLine+0xee>
        prvGBPPUDrawLineObjects(ly);
    }

    //displayFrameBuffer(&ucGBFrame[ulCurLine + ulLineAdd], ulScaleAmount);
    displayFrameBuffer(&ucGBFrame[(ulCurLine)], ulScaleAmount, ly);
 8003fd4:	6828      	ldr	r0, [r5, #0]
 8003fd6:	463a      	mov	r2, r7
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	7821      	ldrb	r1, [r4, #0]
 8003fdc:	4418      	add	r0, r3
}
 8003fde:	b003      	add	sp, #12
 8003fe0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    displayFrameBuffer(&ucGBFrame[(ulCurLine)], ulScaleAmount, ly);
 8003fe4:	f000 bbfc 	b.w	80047e0 <displayFrameBuffer>
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003fe8:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003fec:	f7ff fb42 	bl	8003674 <ucGBMemoryRead>
 8003ff0:	f010 0f08 	tst.w	r0, #8
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4642      	mov	r2, r8
    return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003ff8:	bf14      	ite	ne
 8003ffa:	f44f 451c 	movne.w	r5, #39936	; 0x9c00
 8003ffe:	f44f 4518 	moveq.w	r5, #38912	; 0x9800
        prvGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, prvGetBackTileDisplaySel());
 8004002:	464b      	mov	r3, r9
 8004004:	4638      	mov	r0, r7
 8004006:	9500      	str	r5, [sp, #0]
 8004008:	f7ff fe24 	bl	8003c54 <prvGBPPUDrawLineBackground>
        if(ucGBMemoryRead(LCDC_ADDR) & 0x20){
 800400c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8004010:	f7ff fb30 	bl	8003674 <ucGBMemoryRead>
 8004014:	0682      	lsls	r2, r0, #26
 8004016:	d40a      	bmi.n	800402e <prvGBPPUDrawLine+0xf6>
    if(ucGBMemoryRead(LCDC_ADDR) & 0x02){
 8004018:	f64f 7040 	movw	r0, #65344	; 0xff40
 800401c:	4d1a      	ldr	r5, [pc, #104]	; (8004088 <prvGBPPUDrawLine+0x150>)
 800401e:	f7ff fb29 	bl	8003674 <ucGBMemoryRead>
 8004022:	0783      	lsls	r3, r0, #30
 8004024:	d5d6      	bpl.n	8003fd4 <prvGBPPUDrawLine+0x9c>
        prvGBPPUDrawLineObjects(ly);
 8004026:	4638      	mov	r0, r7
 8004028:	f7ff feba 	bl	8003da0 <prvGBPPUDrawLineObjects>
 800402c:	e7d2      	b.n	8003fd4 <prvGBPPUDrawLine+0x9c>
            prvGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, prvGetWinTileDisplaySel());
 800402e:	f64f 704b 	movw	r0, #65355	; 0xff4b
 8004032:	f7ff fb1f 	bl	8003674 <ucGBMemoryRead>
 8004036:	4605      	mov	r5, r0
 8004038:	f64f 704a 	movw	r0, #65354	; 0xff4a
 800403c:	f7ff fb1a 	bl	8003674 <ucGBMemoryRead>
 8004040:	4680      	mov	r8, r0
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8004042:	f64f 7040 	movw	r0, #65344	; 0xff40
 8004046:	f7ff fb15 	bl	8003674 <ucGBMemoryRead>
 800404a:	f010 0f40 	tst.w	r0, #64	; 0x40
    if(WY > ly || WY > 143 || WX > 166)
 800404e:	463a      	mov	r2, r7
    return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8004050:	bf14      	ite	ne
 8004052:	f44f 431c 	movne.w	r3, #39936	; 0x9c00
 8004056:	f44f 4318 	moveq.w	r3, #38912	; 0x9800
    if(WY > ly || WY > 143 || WX > 166)
 800405a:	2f8f      	cmp	r7, #143	; 0x8f
 800405c:	bf28      	it	cs
 800405e:	228f      	movcs	r2, #143	; 0x8f
 8004060:	4590      	cmp	r8, r2
 8004062:	d8d9      	bhi.n	8004018 <prvGBPPUDrawLine+0xe0>
 8004064:	2da6      	cmp	r5, #166	; 0xa6
 8004066:	d8d7      	bhi.n	8004018 <prvGBPPUDrawLine+0xe0>
 8004068:	4629      	mov	r1, r5
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	4638      	mov	r0, r7
 8004072:	4d05      	ldr	r5, [pc, #20]	; (8004088 <prvGBPPUDrawLine+0x150>)
 8004074:	f7ff fd04 	bl	8003a80 <prvGBPPUDrawLineWindow.part.0>
 8004078:	e7a6      	b.n	8003fc8 <prvGBPPUDrawLine+0x90>
 800407a:	bf00      	nop
 800407c:	24001014 	.word	0x24001014
 8004080:	2401170c 	.word	0x2401170c
 8004084:	24011668 	.word	0x24011668
 8004088:	24001010 	.word	0x24001010

0800408c <vGBPPUStep>:
void vGBPPUStep(){
 800408c:	b570      	push	{r4, r5, r6, lr}
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 800408e:	f64f 7040 	movw	r0, #65344	; 0xff40
void vGBPPUStep(){
 8004092:	b082      	sub	sp, #8
    if(ucGBMemoryRead(LCDC_ADDR) & 0x80){                                                           // check MSB of LCDC for screen en
 8004094:	f7ff faee 	bl	8003674 <ucGBMemoryRead>
 8004098:	0603      	lsls	r3, r0, #24
 800409a:	d409      	bmi.n	80040b0 <vGBPPUStep+0x24>
        ucLY = 0;
 800409c:	2100      	movs	r1, #0
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <vGBPPUStep+0x154>)
        vGBMemoryWrite(LY_ADDR, ucLY);
 80040a0:	f64f 7044 	movw	r0, #65348	; 0xff44
        ucLY = 0;
 80040a4:	7019      	strb	r1, [r3, #0]
}
 80040a6:	b002      	add	sp, #8
 80040a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        vGBMemoryWrite(LY_ADDR, ucLY);
 80040ac:	f7ff bb0a 	b.w	80036c4 <vGBMemoryWrite>
        ultStatesTotal += ucGetTstate();
 80040b0:	4c4c      	ldr	r4, [pc, #304]	; (80041e4 <vGBPPUStep+0x158>)
 80040b2:	f7fe fc8d 	bl	80029d0 <ucGetTstate>
            ucLY++;
 80040b6:	4d4a      	ldr	r5, [pc, #296]	; (80041e0 <vGBPPUStep+0x154>)
        ultStatesTotal += ucGetTstate();
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	4418      	add	r0, r3
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 80040bc:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
        ultStatesTotal += ucGetTstate();
 80040c0:	6020      	str	r0, [r4, #0]
        if(ultStatesTotal > 456){                                                                   // end of hblank or vblank
 80040c2:	d845      	bhi.n	8004150 <vGBPPUStep+0xc4>
        if (ucLY > 143){                                                                            // vblank region
 80040c4:	782e      	ldrb	r6, [r5, #0]
 80040c6:	2e8f      	cmp	r6, #143	; 0x8f
 80040c8:	d905      	bls.n	80040d6 <vGBPPUStep+0x4a>
            if(ucMode != MODE_1){
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <vGBPPUStep+0x15c>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d127      	bne.n	8004122 <vGBPPUStep+0x96>
}
 80040d2:	b002      	add	sp, #8
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
            if (ultStatesTotal <= 80 && ucMode != MODE_2)                                           // oam region
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	2b50      	cmp	r3, #80	; 0x50
 80040da:	d809      	bhi.n	80040f0 <vGBPPUStep+0x64>
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <vGBPPUStep+0x15c>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d0f6      	beq.n	80040d2 <vGBPPUStep+0x46>
                prvSetMode(MODE_2);
 80040e4:	2002      	movs	r0, #2
}
 80040e6:	b002      	add	sp, #8
 80040e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                prvSetMode(MODE_3);
 80040ec:	f7ff bd7e 	b.w	8003bec <prvSetMode>
            else if(ultStatesTotal > 80 && ultStatesTotal <= 252 && ucMode != MODE_3){              // vram region
 80040f0:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 80040f4:	2aab      	cmp	r2, #171	; 0xab
 80040f6:	d83d      	bhi.n	8004174 <vGBPPUStep+0xe8>
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <vGBPPUStep+0x15c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d0e8      	beq.n	80040d2 <vGBPPUStep+0x46>
                    prvGBPPUDrawLine(ucLY, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8004100:	f64f 7043 	movw	r0, #65347	; 0xff43
 8004104:	f7ff fab6 	bl	8003674 <ucGBMemoryRead>
 8004108:	4601      	mov	r1, r0
 800410a:	f64f 7042 	movw	r0, #65346	; 0xff42
 800410e:	9101      	str	r1, [sp, #4]
 8004110:	f7ff fab0 	bl	8003674 <ucGBMemoryRead>
 8004114:	9901      	ldr	r1, [sp, #4]
 8004116:	4602      	mov	r2, r0
 8004118:	4630      	mov	r0, r6
 800411a:	f7ff ff0d 	bl	8003f38 <prvGBPPUDrawLine>
                prvSetMode(MODE_3);
 800411e:	2003      	movs	r0, #3
 8004120:	e7e1      	b.n	80040e6 <vGBPPUStep+0x5a>
                prvSetMode(MODE_1);
 8004122:	2001      	movs	r0, #1
 8004124:	f7ff fd62 	bl	8003bec <prvSetMode>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 4))
 8004128:	f64f 7041 	movw	r0, #65345	; 0xff41
 800412c:	f7ff faa2 	bl	8003674 <ucGBMemoryRead>
 8004130:	2104      	movs	r1, #4
 8004132:	f7fe fda3 	bl	8002c7c <ucCheckBit>
 8004136:	2800      	cmp	r0, #0
 8004138:	d145      	bne.n	80041c6 <vGBPPUStep+0x13a>
                if(ucLY == 0x90){
 800413a:	782b      	ldrb	r3, [r5, #0]
 800413c:	2b90      	cmp	r3, #144	; 0x90
 800413e:	d1c8      	bne.n	80040d2 <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 0);
 8004140:	2100      	movs	r1, #0
                    vGBMemorySetBit(IF_ADDR, 1);
 8004142:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8004146:	b002      	add	sp, #8
 8004148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    vGBMemorySetBit(IF_ADDR, 1);
 800414c:	f7ff ba4a 	b.w	80035e4 <vGBMemorySetBit>
            ucLY++;
 8004150:	7828      	ldrb	r0, [r5, #0]
 8004152:	3001      	adds	r0, #1
 8004154:	b2c0      	uxtb	r0, r0
 8004156:	7028      	strb	r0, [r5, #0]
            prvCheckLYC(ucLY);
 8004158:	f7ff fd26 	bl	8003ba8 <prvCheckLYC>
            if(ucLY > 153){                                                                         // end of vblank
 800415c:	7829      	ldrb	r1, [r5, #0]
 800415e:	2999      	cmp	r1, #153	; 0x99
 8004160:	d81e      	bhi.n	80041a0 <vGBPPUStep+0x114>
            vGBMemoryWrite(LY_ADDR, ucLY);                                                          // update LY register
 8004162:	f64f 7044 	movw	r0, #65348	; 0xff44
 8004166:	f7ff faad 	bl	80036c4 <vGBMemoryWrite>
            ultStatesTotal -= 456;
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	e7a7      	b.n	80040c4 <vGBPPUStep+0x38>
            }else if(ultStatesTotal > 252 && ultStatesTotal <= 456 && ucMode != MODE_0){            // hblank region
 8004174:	3bfd      	subs	r3, #253	; 0xfd
 8004176:	2bcb      	cmp	r3, #203	; 0xcb
 8004178:	d8ab      	bhi.n	80040d2 <vGBPPUStep+0x46>
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <vGBPPUStep+0x15c>)
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	2a00      	cmp	r2, #0
 8004180:	d0a7      	beq.n	80040d2 <vGBPPUStep+0x46>
    ucMode = mode;
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
    switch (mode) {
 8004186:	f7ff fbd5 	bl	8003934 <prvSetMode.part.0>
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 3))
 800418a:	f64f 7041 	movw	r0, #65345	; 0xff41
 800418e:	f7ff fa71 	bl	8003674 <ucGBMemoryRead>
 8004192:	2103      	movs	r1, #3
 8004194:	f7fe fd72 	bl	8002c7c <ucCheckBit>
 8004198:	2800      	cmp	r0, #0
 800419a:	d09a      	beq.n	80040d2 <vGBPPUStep+0x46>
                    vGBMemorySetBit(IF_ADDR, 1);
 800419c:	2101      	movs	r1, #1
 800419e:	e7d0      	b.n	8004142 <vGBPPUStep+0xb6>
                framePerSecondLimiter++;
 80041a0:	4a12      	ldr	r2, [pc, #72]	; (80041ec <vGBPPUStep+0x160>)
                prvSetMode(MODE_2);
 80041a2:	2002      	movs	r0, #2
                framePerSecondLimiter++;
 80041a4:	7813      	ldrb	r3, [r2, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	7013      	strb	r3, [r2, #0]
                prvSetMode(MODE_2);
 80041aa:	f7ff fd1f 	bl	8003bec <prvSetMode>
                ucLY = 0;
 80041ae:	2300      	movs	r3, #0
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 80041b0:	f64f 7041 	movw	r0, #65345	; 0xff41
                ucLY = 0;
 80041b4:	702b      	strb	r3, [r5, #0]
                if(ucCheckBit(ucGBMemoryRead(STAT_ADDR), 5))
 80041b6:	f7ff fa5d 	bl	8003674 <ucGBMemoryRead>
 80041ba:	2105      	movs	r1, #5
 80041bc:	f7fe fd5e 	bl	8002c7c <ucCheckBit>
 80041c0:	b938      	cbnz	r0, 80041d2 <vGBPPUStep+0x146>
 80041c2:	7829      	ldrb	r1, [r5, #0]
 80041c4:	e7cd      	b.n	8004162 <vGBPPUStep+0xd6>
                    vGBMemorySetBit(IF_ADDR, 1);
 80041c6:	2101      	movs	r1, #1
 80041c8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80041cc:	f7ff fa0a 	bl	80035e4 <vGBMemorySetBit>
 80041d0:	e7b3      	b.n	800413a <vGBPPUStep+0xae>
                    vGBMemorySetBit(IF_ADDR, 1);
 80041d2:	2101      	movs	r1, #1
 80041d4:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80041d8:	f7ff fa04 	bl	80035e4 <vGBMemorySetBit>
 80041dc:	e7f1      	b.n	80041c2 <vGBPPUStep+0x136>
 80041de:	bf00      	nop
 80041e0:	240010a9 	.word	0x240010a9
 80041e4:	24011714 	.word	0x24011714
 80041e8:	24011718 	.word	0x24011718
 80041ec:	240010a8 	.word	0x240010a8

080041f0 <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <getRomPointer+0x8>)
}
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	24001018 	.word	0x24001018

080041fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80041fe:	2004      	movs	r0, #4
{
 8004200:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004202:	f004 fb71 	bl	80088e8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <SystemClock_Config+0xc8>)
 8004208:	2300      	movs	r3, #0
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <SystemClock_Config+0xcc>)
 8004210:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004214:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004216:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004218:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800421a:	f002 0201 	and.w	r2, r2, #1
 800421e:	9201      	str	r2, [sp, #4]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004226:	619a      	str	r2, [r3, #24]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004232:	6983      	ldr	r3, [r0, #24]
 8004234:	049b      	lsls	r3, r3, #18
 8004236:	d5fc      	bpl.n	8004232 <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004238:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800423a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800423e:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004240:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8004242:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004244:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;						// changed from 4 to 16 to make i2s work
 8004246:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004248:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800424a:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800424c:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800424e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004250:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004252:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004254:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004256:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;						// changed from 4 to 16 to make i2s work
 8004258:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800425a:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800425c:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004260:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004264:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004268:	f004 fb7a 	bl	8008960 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800426c:	b108      	cbz	r0, 8004272 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800426e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004270:	e7fe      	b.n	8004270 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004272:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8004274:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004276:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004278:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800427c:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800427e:	4629      	mov	r1, r5
 8004280:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004282:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004284:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004288:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800428c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004290:	f004 fefc 	bl	800908c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8004294:	b108      	cbz	r0, 800429a <SystemClock_Config+0x9e>
 8004296:	b672      	cpsid	i
  while (1)
 8004298:	e7fe      	b.n	8004298 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <SystemClock_Config+0xd0>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a2:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80042a4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80042a8:	f042 0202 	orr.w	r2, r2, #2
 80042ac:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80042b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 80042bc:	f002 f800 	bl	80062c0 <HAL_EnableCompensationCell>
}
 80042c0:	b01f      	add	sp, #124	; 0x7c
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	58000400 	.word	0x58000400
 80042c8:	58024800 	.word	0x58024800
 80042cc:	58024400 	.word	0x58024400

080042d0 <PeriphCommonClock_Config>:
{
 80042d0:	b530      	push	{r4, r5, lr}
 80042d2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042d4:	229c      	movs	r2, #156	; 0x9c
 80042d6:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80042d8:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042da:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80042dc:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042de:	f006 fc6d 	bl	800abbc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80042e6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80042e8:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80042ea:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042ec:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ee:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80042f0:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80042f2:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80042f4:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80042f6:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80042f8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80042fc:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004300:	f005 f908 	bl	8009514 <HAL_RCCEx_PeriphCLKConfig>
 8004304:	b108      	cbz	r0, 800430a <PeriphCommonClock_Config+0x3a>
 8004306:	b672      	cpsid	i
  while (1)
 8004308:	e7fe      	b.n	8004308 <PeriphCommonClock_Config+0x38>
}
 800430a:	b031      	add	sp, #196	; 0xc4
 800430c:	bd30      	pop	{r4, r5, pc}
 800430e:	bf00      	nop

08004310 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8004310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004314:	49bb      	ldr	r1, [pc, #748]	; (8004604 <main+0x2f4>)
 8004316:	e002      	b.n	800431e <main+0xe>
 8004318:	3b01      	subs	r3, #1
 800431a:	f000 811e 	beq.w	800455a <main+0x24a>
 800431e:	680a      	ldr	r2, [r1, #0]
 8004320:	0410      	lsls	r0, r2, #16
 8004322:	d4f9      	bmi.n	8004318 <main+0x8>
{
 8004324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004328:	b092      	sub	sp, #72	; 0x48
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800432a:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 800432c:	f002 fe0e 	bl	8006f4c <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004330:	4ab5      	ldr	r2, [pc, #724]	; (8004608 <main+0x2f8>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8004336:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800433a:	a80b      	add	r0, sp, #44	; 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800433c:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004340:	930e      	str	r3, [sp, #56]	; 0x38
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004342:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004346:	f002 fe23 	bl	8006f90 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800434a:	2004      	movs	r0, #4
 800434c:	f002 fe0e 	bl	8006f6c <HAL_MPU_Enable>
  HAL_Init();
 8004350:	f001 ff52 	bl	80061f8 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004354:	4aad      	ldr	r2, [pc, #692]	; (800460c <main+0x2fc>)
 8004356:	6953      	ldr	r3, [r2, #20]
 8004358:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800435c:	d111      	bne.n	8004382 <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800435e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004362:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004366:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800436a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800436e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004372:	6953      	ldr	r3, [r2, #20]
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800437a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800437e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004382:	4aa2      	ldr	r2, [pc, #648]	; (800460c <main+0x2fc>)
 8004384:	6953      	ldr	r3, [r2, #20]
 8004386:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800438a:	d124      	bne.n	80043d6 <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800438c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004390:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004394:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004398:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800439c:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043a0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80043a4:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80043a6:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80043aa:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80043ac:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80043b0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80043b2:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	d1f8      	bne.n	80043ac <main+0x9c>
    } while(sets-- != 0U);
 80043ba:	3820      	subs	r0, #32
 80043bc:	f110 0f20 	cmn.w	r0, #32
 80043c0:	d1f1      	bne.n	80043a6 <main+0x96>
 80043c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80043c6:	6953      	ldr	r3, [r2, #20]
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6153      	str	r3, [r2, #20]
 80043ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043d2:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 80043d6:	4c8b      	ldr	r4, [pc, #556]	; (8004604 <main+0x2f4>)
  SystemClock_Config();
 80043d8:	f7ff ff10 	bl	80041fc <SystemClock_Config>
  PeriphCommonClock_Config();
 80043dc:	f7ff ff78 	bl	80042d0 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 80043e0:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 80043e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80043e6:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 80043e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80043f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 80043fc:	f004 f81c 	bl	8008438 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8004400:	2100      	movs	r1, #0
 8004402:	4608      	mov	r0, r1
 8004404:	f004 f826 	bl	8008454 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8004408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800440c:	e002      	b.n	8004414 <main+0x104>
 800440e:	3b01      	subs	r3, #1
 8004410:	f000 80a5 	beq.w	800455e <main+0x24e>
 8004414:	682a      	ldr	r2, [r5, #0]
 8004416:	0412      	lsls	r2, r2, #16
 8004418:	d5f9      	bpl.n	800440e <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800441e:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004424:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004428:	f44f 7880 	mov.w	r8, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800442c:	a90b      	add	r1, sp, #44	; 0x2c
 800442e:	4878      	ldr	r0, [pc, #480]	; (8004610 <main+0x300>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004430:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004434:	f44f 2900 	mov.w	r9, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004438:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800443c:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 800443e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8004624 <main+0x314>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004442:	4033      	ands	r3, r6
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004448:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004452:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004456:	4013      	ands	r3, r2
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800445c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004468:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	9304      	str	r3, [sp, #16]
 8004472:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004474:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004480:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800448c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004494:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004498:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80044a8:	f043 0320 	orr.w	r3, r3, #32
 80044ac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80044b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044b6:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80044ba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044be:	9307      	str	r3, [sp, #28]
 80044c0:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80044c6:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80044c8:	f003 fe8a 	bl	80081e0 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80044ce:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044d2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044d6:	a90b      	add	r1, sp, #44	; 0x2c
 80044d8:	484e      	ldr	r0, [pc, #312]	; (8004614 <main+0x304>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044da:	ea43 0308 	orr.w	r3, r3, r8
 80044de:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80044e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80044e6:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044e8:	ea03 0308 	and.w	r3, r3, r8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f4:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044f6:	f003 fe73 	bl	80081e0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044fe:	a90b      	add	r1, sp, #44	; 0x2c
 8004500:	4845      	ldr	r0, [pc, #276]	; (8004618 <main+0x308>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004502:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800450a:	f003 fe69 	bl	80081e0 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 800450e:	4b43      	ldr	r3, [pc, #268]	; (800461c <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004510:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004512:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 8004516:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004518:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 800451a:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800451e:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004522:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004526:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800452a:	f8ca 7010 	str.w	r7, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800452e:	e9ca 3900 	strd	r3, r9, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004532:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004536:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800453a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 800453e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004542:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004546:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800454a:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800454e:	f002 fb15 	bl	8006b7c <HAL_ADC_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	b128      	cbz	r0, 8004562 <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 8004556:	b672      	cpsid	i
  while (1)
 8004558:	e7fe      	b.n	8004558 <main+0x248>
 800455a:	b672      	cpsid	i
 800455c:	e7fe      	b.n	800455c <main+0x24c>
 800455e:	b672      	cpsid	i
 8004560:	e7fe      	b.n	8004560 <main+0x250>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004562:	a908      	add	r1, sp, #32
 8004564:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004566:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004568:	f002 fc14 	bl	8006d94 <HAL_ADCEx_MultiModeConfigChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	b108      	cbz	r0, 8004574 <main+0x264>
 8004570:	b672      	cpsid	i
  while (1)
 8004572:	e7fe      	b.n	8004572 <main+0x262>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004574:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004576:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800457a:	4650      	mov	r0, sl
 800457c:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800457e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 8004580:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 8004584:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004586:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004588:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 800458a:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800458e:	f001 ff2d 	bl	80063ec <HAL_ADC_ConfigChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	b108      	cbz	r0, 800459a <main+0x28a>
 8004596:	b672      	cpsid	i
  while (1)
 8004598:	e7fe      	b.n	8004598 <main+0x288>
  hadc3.Instance = ADC3;
 800459a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8004628 <main+0x318>
 800459e:	4a20      	ldr	r2, [pc, #128]	; (8004620 <main+0x310>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80045a0:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80045a2:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80045a4:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80045a8:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80045ac:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80045b0:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 80045b4:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 80045b8:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 80045bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80045c0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80045c4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80045c8:	e9ca 9301 	strd	r9, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045cc:	e9ca 3703 	strd	r3, r7, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045d0:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80045d4:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80045d8:	f002 fad0 	bl	8006b7c <HAL_ADC_Init>
 80045dc:	4603      	mov	r3, r0
 80045de:	b108      	cbz	r0, 80045e4 <main+0x2d4>
 80045e0:	b672      	cpsid	i
  while (1)
 80045e2:	e7fe      	b.n	80045e2 <main+0x2d2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80045e4:	a90b      	add	r1, sp, #44	; 0x2c
 80045e6:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 80045e8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80045ec:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80045f0:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 80045f4:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80045f8:	f001 fef8 	bl	80063ec <HAL_ADC_ConfigChannel>
 80045fc:	4604      	mov	r4, r0
 80045fe:	b1a8      	cbz	r0, 800462c <main+0x31c>
 8004600:	b672      	cpsid	i
  while (1)
 8004602:	e7fe      	b.n	8004602 <main+0x2f2>
 8004604:	58024400 	.word	0x58024400
 8004608:	03000018 	.word	0x03000018
 800460c:	e000ed00 	.word	0xe000ed00
 8004610:	58020000 	.word	0x58020000
 8004614:	58022000 	.word	0x58022000
 8004618:	58020800 	.word	0x58020800
 800461c:	40022000 	.word	0x40022000
 8004620:	58026000 	.word	0x58026000
 8004624:	240117e4 	.word	0x240117e4
 8004628:	24011848 	.word	0x24011848
  stm32h7_displaySetPalette();
 800462c:	f000 f836 	bl	800469c <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8004630:	4631      	mov	r1, r6
 8004632:	4620      	mov	r0, r4
 8004634:	f001 fc7e 	bl	8005f34 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8004638:	4813      	ldr	r0, [pc, #76]	; (8004688 <main+0x378>)
 800463a:	f006 f9f7 	bl	800aa2c <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 800463e:	4620      	mov	r0, r4
 8004640:	f006 fa26 	bl	800aa90 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f006 fa76 	bl	800ab38 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	f006 fa36 	bl	800aac0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8004654:	480d      	ldr	r0, [pc, #52]	; (800468c <main+0x37c>)
 8004656:	f006 fa2b 	bl	800aab0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800465a:	480d      	ldr	r0, [pc, #52]	; (8004690 <main+0x380>)
 800465c:	f006 fa38 	bl	800aad0 <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <main+0x384>)
 8004662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	f7fe ff60 	bl	800352c <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 800466c:	4641      	mov	r1, r8
 800466e:	480a      	ldr	r0, [pc, #40]	; (8004698 <main+0x388>)
 8004670:	f7fe ff5c 	bl	800352c <vGBMemoryLoad>
  vGBMemoryInit();
 8004674:	f7ff f8b0 	bl	80037d8 <vGBMemoryInit>
  vSetFrameBuffer();
 8004678:	f7ff f96a 	bl	8003950 <vSetFrameBuffer>
      vGBCPUStep();
 800467c:	f7fe fac8 	bl	8002c10 <vGBCPUStep>
	  vGBPPUStep();
 8004680:	f7ff fd04 	bl	800408c <vGBPPUStep>
  while (1)
 8004684:	e7fa      	b.n	800467c <main+0x36c>
 8004686:	bf00      	nop
 8004688:	08012e60 	.word	0x08012e60
 800468c:	ff0000ff 	.word	0xff0000ff
 8004690:	24001070 	.word	0x24001070
 8004694:	24001018 	.word	0x24001018
 8004698:	08012bf4 	.word	0x08012bf4

0800469c <stm32h7_displaySetPalette>:

/**
 * @brief Sets the color palette for the L8 indirect color mode used for the gameboy
 * @returns Nothing
 */
void stm32h7_displaySetPalette(){
 800469c:	b430      	push	{r4, r5}

	clut_argb8888[1] = LIGHTEST_GREEN;
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <stm32h7_displaySetPalette+0x24>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80046a0:	2000      	movs	r0, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 80046a2:	4c08      	ldr	r4, [pc, #32]	; (80046c4 <stm32h7_displaySetPalette+0x28>)
	clut_cfg.Size = 255;
 80046a4:	21ff      	movs	r1, #255	; 0xff
	clut_argb8888[2] = LIGHT_GREEN;
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <stm32h7_displaySetPalette+0x2c>)
	clut_argb8888[3] = DARK_GREEN;
 80046a8:	4d08      	ldr	r5, [pc, #32]	; (80046cc <stm32h7_displaySetPalette+0x30>)
	clut_argb8888[1] = LIGHTEST_GREEN;
 80046aa:	605c      	str	r4, [r3, #4]
	clut_argb8888[2] = LIGHT_GREEN;
 80046ac:	609a      	str	r2, [r3, #8]
	clut_argb8888[4] = DARKEST_GREEN;
 80046ae:	4c08      	ldr	r4, [pc, #32]	; (80046d0 <stm32h7_displaySetPalette+0x34>)
	clut_cfg.pCLUT = clut_argb8888;
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <stm32h7_displaySetPalette+0x38>)
	clut_argb8888[4] = DARKEST_GREEN;
 80046b2:	e9c3 5403 	strd	r5, r4, [r3, #12]
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80046b6:	e9c2 3000 	strd	r3, r0, [r2]
}
 80046ba:	bc30      	pop	{r4, r5}
	clut_cfg.Size = 255;
 80046bc:	6091      	str	r1, [r2, #8]
}
 80046be:	4770      	bx	lr
 80046c0:	240010ac 	.word	0x240010ac
 80046c4:	ff9bbc0f 	.word	0xff9bbc0f
 80046c8:	ff8bac0f 	.word	0xff8bac0f
 80046cc:	ff306230 	.word	0xff306230
 80046d0:	ff0f380f 	.word	0xff0f380f
 80046d4:	24011900 	.word	0x24011900

080046d8 <CopyBuffer>:
 * @param y The coordinate y position of the buffer on the display
 * @param xsize The x size of the buffer
 * @param ysize The y size of the buffer
 * @returns Nothing
 */
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	b083      	sub	sp, #12

    uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
    uint32_t source      = (uint32_t)pSrc;

    /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80046de:	4c3d      	ldr	r4, [pc, #244]	; (80047d4 <CopyBuffer+0xfc>)
    /*##-2- DMA2D Callbacks Configuration ######################################*/
    hdma2d.XferCpltCallback  = NULL;

    /*##-3- Foreground Configuration ###########################################*/
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
    hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80046e0:	f04f 0eff 	mov.w	lr, #255	; 0xff
    //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80046e4:	f04f 0c05 	mov.w	ip, #5
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 80046e8:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80046ec:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 80046f0:	461e      	mov	r6, r3
    hdma2d.LayerCfg[1].InputOffset = 0;
    hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
    hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

    hdma2d.Instance          = DMA2D;
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <CopyBuffer+0x100>)
    hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 80046f4:	f5ca 7548 	rsb	r5, sl, #800	; 0x320
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 80046f8:	4681      	mov	r9, r0
    hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80046fa:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50

    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK){
 80046fe:	4620      	mov	r0, r4
    hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004700:	60e5      	str	r5, [r4, #12]
    hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004702:	2500      	movs	r5, #0
    hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 8004704:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004708:	460f      	mov	r7, r1
    hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800470a:	64e5      	str	r5, [r4, #76]	; 0x4c
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 800470c:	4690      	mov	r8, r2
    hdma2d.LayerCfg[1].InputOffset = 0;
 800470e:	6465      	str	r5, [r4, #68]	; 0x44
    hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004710:	60a5      	str	r5, [r4, #8]
    hdma2d.XferCpltCallback  = NULL;
 8004712:	6225      	str	r5, [r4, #32]
    hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004714:	f8c4 b004 	str.w	fp, [r4, #4]
    hdma2d.Instance          = DMA2D;
 8004718:	6023      	str	r3, [r4, #0]
    hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800471a:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800471e:	e9c4 5504 	strd	r5, r5, [r4, #16]
void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize){
 8004722:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK){
 8004726:	f003 f807 	bl	8007738 <HAL_DMA2D_Init>
 800472a:	b110      	cbz	r0, 8004732 <CopyBuffer+0x5a>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
                }
            }
        }
    }
}
 800472c:	b003      	add	sp, #12
 800472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK){
 8004732:	2101      	movs	r1, #1
 8004734:	4620      	mov	r0, r4
 8004736:	f003 f921 	bl	800797c <HAL_DMA2D_ConfigLayer>
 800473a:	2800      	cmp	r0, #0
 800473c:	d1f6      	bne.n	800472c <CopyBuffer+0x54>
            if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 800473e:	2201      	movs	r2, #1
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <CopyBuffer+0x104>)
 8004742:	4620      	mov	r0, r4
 8004744:	9200      	str	r2, [sp, #0]
 8004746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004748:	f003 f854 	bl	80077f4 <HAL_DMA2D_CLUTLoad>
 800474c:	2800      	cmp	r0, #0
 800474e:	d1ed      	bne.n	800472c <CopyBuffer+0x54>
                HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004750:	210a      	movs	r1, #10
 8004752:	4620      	mov	r0, r4
 8004754:	f003 f88c 	bl	8007870 <HAL_DMA2D_PollForTransfer>
    uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004758:	f44f 7248 	mov.w	r2, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 800475c:	4653      	mov	r3, sl
 800475e:	4649      	mov	r1, r9
    uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004760:	fb02 8206 	mla	r2, r2, r6, r8
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004764:	4620      	mov	r0, r4
 8004766:	9500      	str	r5, [sp, #0]
 8004768:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800476c:	f003 f826 	bl	80077bc <HAL_DMA2D_Start>
 8004770:	b328      	cbz	r0, 80047be <CopyBuffer+0xe6>
                ++y;
 8004772:	1c72      	adds	r2, r6, #1
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004774:	f44f 7448 	mov.w	r4, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004778:	4653      	mov	r3, sl
 800477a:	4649      	mov	r1, r9
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 800477c:	b292      	uxth	r2, r2
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 800477e:	4815      	ldr	r0, [pc, #84]	; (80047d4 <CopyBuffer+0xfc>)
 8004780:	9500      	str	r5, [sp, #0]
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004782:	fb04 8202 	mla	r2, r4, r2, r8
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004786:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800478a:	f003 f817 	bl	80077bc <HAL_DMA2D_Start>
 800478e:	b1d8      	cbz	r0, 80047c8 <CopyBuffer+0xf0>
                ++y;
 8004790:	1cb2      	adds	r2, r6, #2
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004792:	f44f 7448 	mov.w	r4, #800	; 0x320
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 8004796:	4653      	mov	r3, sl
 8004798:	4649      	mov	r1, r9
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 800479a:	b292      	uxth	r2, r2
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <CopyBuffer+0xfc>)
 800479e:	9500      	str	r5, [sp, #0]
                destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 80047a0:	fb04 8202 	mla	r2, r4, r2, r8
                if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK){
 80047a4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80047a8:	f003 f808 	bl	80077bc <HAL_DMA2D_Start>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d1bd      	bne.n	800472c <CopyBuffer+0x54>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80047b0:	210a      	movs	r1, #10
 80047b2:	4808      	ldr	r0, [pc, #32]	; (80047d4 <CopyBuffer+0xfc>)
}
 80047b4:	b003      	add	sp, #12
 80047b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80047ba:	f003 b859 	b.w	8007870 <HAL_DMA2D_PollForTransfer>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80047be:	4620      	mov	r0, r4
 80047c0:	210a      	movs	r1, #10
 80047c2:	f003 f855 	bl	8007870 <HAL_DMA2D_PollForTransfer>
 80047c6:	e7d4      	b.n	8004772 <CopyBuffer+0x9a>
                    HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80047c8:	210a      	movs	r1, #10
 80047ca:	4802      	ldr	r0, [pc, #8]	; (80047d4 <CopyBuffer+0xfc>)
 80047cc:	f003 f850 	bl	8007870 <HAL_DMA2D_PollForTransfer>
 80047d0:	e7de      	b.n	8004790 <CopyBuffer+0xb8>
 80047d2:	bf00      	nop
 80047d4:	240014ac 	.word	0x240014ac
 80047d8:	52001000 	.word	0x52001000
 80047dc:	24011900 	.word	0x24011900

080047e0 <displayFrameBuffer>:
 * @brief Copies the work buffer to the frame-buffer while converting from L8 color to RGB8888 through use of DMA2D
 * @param gb_frame Work buffer
 * @param scaleAmount Up-scaling amount
 * @returns Nothing
 */
void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount, uint8_t ly){
 80047e0:	b530      	push	{r4, r5, lr}
 80047e2:	4613      	mov	r3, r2
	//CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2 + (ly * scaleAmount), 160 * scaleAmount, 1);
 80047e4:	460c      	mov	r4, r1
void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount, uint8_t ly){
 80047e6:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2 + (ly * scaleAmount), 160 * scaleAmount, 1);
 80047e8:	2501      	movs	r5, #1
 80047ea:	fb03 f304 	mul.w	r3, r3, r4
 80047ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80047f2:	2200      	movs	r2, #0
 80047f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80047f8:	3318      	adds	r3, #24
 80047fa:	0164      	lsls	r4, r4, #5
 80047fc:	9501      	str	r5, [sp, #4]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	9400      	str	r4, [sp, #0]
 8004802:	f7ff ff69 	bl	80046d8 <CopyBuffer>

	//LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
}
 8004806:	b003      	add	sp, #12
 8004808:	bd30      	pop	{r4, r5, pc}
 800480a:	bf00      	nop

0800480c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <HAL_MspInit+0x20>)
{
 800480e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004810:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004814:	f042 0202 	orr.w	r2, r2, #2
 8004818:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800481c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004828:	b002      	add	sp, #8
 800482a:	4770      	bx	lr
 800482c:	58024400 	.word	0x58024400

08004830 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004830:	4938      	ldr	r1, [pc, #224]	; (8004914 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004832:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8004834:	6802      	ldr	r2, [r0, #0]
{
 8004836:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8004838:	428a      	cmp	r2, r1
{
 800483a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004840:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004844:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8004846:	d004      	beq.n	8004852 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8004848:	4933      	ldr	r1, [pc, #204]	; (8004918 <HAL_ADC_MspInit+0xe8>)
 800484a:	428a      	cmp	r2, r1
 800484c:	d026      	beq.n	800489c <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800484e:	b00a      	add	sp, #40	; 0x28
 8004850:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004852:	4b32      	ldr	r3, [pc, #200]	; (800491c <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004854:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004858:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800485c:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004866:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800486a:	f002 0220 	and.w	r2, r2, #32
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004872:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800487e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800488a:	f001 fd0f 	bl	80062ac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800488e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004892:	4608      	mov	r0, r1
 8004894:	f001 fd0a 	bl	80062ac <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004898:	b00a      	add	sp, #40	; 0x28
 800489a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800489c:	4a1f      	ldr	r2, [pc, #124]	; (800491c <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 800489e:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a2:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80048a4:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048a6:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80048aa:	481d      	ldr	r0, [pc, #116]	; (8004920 <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048ac:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80048b0:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80048b4:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80048b8:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 80048bc:	9402      	str	r4, [sp, #8]
 80048be:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048c0:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80048c4:	f044 0420 	orr.w	r4, r4, #32
 80048c8:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80048cc:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80048d0:	f004 0420 	and.w	r4, r4, #32
 80048d4:	9403      	str	r4, [sp, #12]
 80048d6:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d8:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80048dc:	f044 0404 	orr.w	r4, r4, #4
 80048e0:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80048e4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ea:	f002 0204 	and.w	r2, r2, #4
 80048ee:	9204      	str	r2, [sp, #16]
 80048f0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048f2:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80048f6:	f003 fc73 	bl	80081e0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80048fa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80048fe:	4608      	mov	r0, r1
 8004900:	f001 fcd4 	bl	80062ac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004904:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004908:	4608      	mov	r0, r1
 800490a:	f001 fccf 	bl	80062ac <HAL_SYSCFG_AnalogSwitchConfig>
}
 800490e:	b00a      	add	sp, #40	; 0x28
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	bf00      	nop
 8004914:	40022000 	.word	0x40022000
 8004918:	58026000 	.word	0x58026000
 800491c:	58024400 	.word	0x58024400
 8004920:	58021400 	.word	0x58021400

08004924 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004928:	4c05      	ldr	r4, [pc, #20]	; (8004940 <HardFault_Handler+0x18>)
{
 800492a:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 800492c:	4620      	mov	r0, r4
 800492e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004932:	f003 fd77 	bl	8008424 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800493a:	f001 fc9f 	bl	800627c <HAL_Delay>
  while (1)
 800493e:	e7f5      	b.n	800492c <HardFault_Handler+0x4>
 8004940:	58022000 	.word	0x58022000

08004944 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004944:	e7fe      	b.n	8004944 <MemManage_Handler>
 8004946:	bf00      	nop

08004948 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004948:	e7fe      	b.n	8004948 <BusFault_Handler>
 800494a:	bf00      	nop

0800494c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800494c:	e7fe      	b.n	800494c <UsageFault_Handler>
 800494e:	bf00      	nop

08004950 <SVC_Handler>:
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop

08004954 <DebugMon_Handler>:
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <PendSV_Handler>:
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop

0800495c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800495c:	f001 bc7c 	b.w	8006258 <HAL_IncTick>

08004960 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <LTDC_IRQHandler+0x8>)
 8004962:	f003 be93 	b.w	800868c <HAL_LTDC_IRQHandler>
 8004966:	bf00      	nop
 8004968:	24011a3c 	.word	0x24011a3c

0800496c <LTDC_ER_IRQHandler>:
 800496c:	f7ff bff8 	b.w	8004960 <LTDC_IRQHandler>

08004970 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <DSI_IRQHandler+0x8>)
 8004972:	f003 b957 	b.w	8007c24 <HAL_DSI_IRQHandler>
 8004976:	bf00      	nop
 8004978:	24011b00 	.word	0x24011b00

0800497c <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  BSP_AUDIO_OUT_IRQHandler(0);
 800497c:	2000      	movs	r0, #0
 800497e:	f000 bddd 	b.w	800553c <BSP_AUDIO_OUT_IRQHandler>
 8004982:	bf00      	nop

08004984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004988:	f7fb fca6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800498c:	480c      	ldr	r0, [pc, #48]	; (80049c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800498e:	490d      	ldr	r1, [pc, #52]	; (80049c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004994:	e002      	b.n	800499c <LoopCopyDataInit>

08004996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800499a:	3304      	adds	r3, #4

0800499c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800499c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a0:	d3f9      	bcc.n	8004996 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049a4:	4c0a      	ldr	r4, [pc, #40]	; (80049d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a8:	e001      	b.n	80049ae <LoopFillZerobss>

080049aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ac:	3204      	adds	r2, #4

080049ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b0:	d3fb      	bcc.n	80049aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049b2:	f006 f8d1 	bl	800ab58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049b6:	f7ff fcab 	bl	8004310 <main>
  bx  lr
 80049ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049bc:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80049c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80049c4:	24001078 	.word	0x24001078
  ldr r2, =_sidata
 80049c8:	0801494c 	.word	0x0801494c
  ldr r2, =_sbss
 80049cc:	24001078 	.word	0x24001078
  ldr r4, =_ebss
 80049d0:	24011bbc 	.word	0x24011bbc

080049d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC3_IRQHandler>
	...

080049d8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049da:	4c0e      	ldr	r4, [pc, #56]	; (8004a14 <IS42S32800J_ModeRegConfig+0x3c>)
 80049dc:	2304      	movs	r3, #4
{
 80049de:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 80049e0:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80049e2:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049e4:	69d7      	ldr	r7, [r2, #28]
 80049e6:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049ea:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049ec:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 80049ee:	6955      	ldr	r5, [r2, #20]
 80049f0:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 80049f2:	6995      	ldr	r5, [r2, #24]
 80049f4:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 80049f6:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 80049fc:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80049fe:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004a00:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004a02:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a04:	f005 ff2e 	bl	800a864 <HAL_SDRAM_SendCommand>
 8004a08:	3800      	subs	r0, #0
 8004a0a:	bf18      	it	ne
 8004a0c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004a0e:	4240      	negs	r0, r0
 8004a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	24001514 	.word	0x24001514

08004a18 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a18:	680a      	ldr	r2, [r1, #0]
{
 8004a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004a1c:	4c22      	ldr	r4, [pc, #136]	; (8004aa8 <IS42S32800J_Init+0x90>)
 8004a1e:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004a20:	2700      	movs	r7, #0
{
 8004a22:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004a24:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a26:	4621      	mov	r1, r4
 8004a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004a2c:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8004a2e:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004a30:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004a32:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a34:	f005 ff16 	bl	800a864 <HAL_SDRAM_SendCommand>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d132      	bne.n	8004aa2 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004a3c:	f001 fc18 	bl	8006270 <HAL_GetTick>
 8004a40:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004a42:	f001 fc15 	bl	8006270 <HAL_GetTick>
 8004a46:	4287      	cmp	r7, r0
 8004a48:	d0fb      	beq.n	8004a42 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004a4a:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004a4c:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8004a4e:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004a50:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004a52:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004a58:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a5a:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8004a5c:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a5e:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004a60:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a62:	f005 feff 	bl	800a864 <HAL_SDRAM_SendCommand>
 8004a66:	4603      	mov	r3, r0
 8004a68:	b9d8      	cbnz	r0, 8004aa2 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004a6a:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8004a6c:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8004a6e:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8004a74:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a76:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8004a78:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a7a:	490b      	ldr	r1, [pc, #44]	; (8004aa8 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004a7c:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004a7e:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004a80:	f005 fef0 	bl	800a864 <HAL_SDRAM_SendCommand>
 8004a84:	b968      	cbnz	r0, 8004aa2 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004a86:	4629      	mov	r1, r5
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff ffa5 	bl	80049d8 <IS42S32800J_ModeRegConfig>
 8004a8e:	b940      	cbnz	r0, 8004aa2 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004a90:	68a9      	ldr	r1, [r5, #8]
 8004a92:	4630      	mov	r0, r6
 8004a94:	f005 ff06 	bl	800a8a4 <HAL_SDRAM_ProgramRefreshRate>
 8004a98:	3800      	subs	r0, #0
 8004a9a:	bf18      	it	ne
 8004a9c:	2001      	movne	r0, #1
 8004a9e:	4240      	negs	r0, r0
}
 8004aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	24001514 	.word	0x24001514

08004aac <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop

08004ab4 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8004ab6:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	600b      	str	r3, [r1, #0]
}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	24001524 	.word	0x24001524

08004ac4 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004ac4:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8004ac6:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	600b      	str	r3, [r1, #0]
}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	24001524 	.word	0x24001524

08004ad4 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <OTM8009A_GetXSize+0x1c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b123      	cbz	r3, 8004ae4 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8004ada:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004ade:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004ae0:	600b      	str	r3, [r1, #0]
}
 8004ae2:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004ae4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004ae8:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8004aea:	600b      	str	r3, [r1, #0]
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	24001524 	.word	0x24001524

08004af4 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <OTM8009A_GetYSize+0x1c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	b123      	cbz	r3, 8004b04 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004afa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004afe:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004b00:	600b      	str	r3, [r1, #0]
}
 8004b02:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004b04:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004b08:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004b0a:	600b      	str	r3, [r1, #0]
}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	24001524 	.word	0x24001524

08004b14 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop

08004b24 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004b44:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b46:	6884      	ldr	r4, [r0, #8]
 8004b48:	8800      	ldrh	r0, [r0, #0]
 8004b4a:	46a4      	mov	ip, r4
}
 8004b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b50:	4760      	bx	ip
 8004b52:	bf00      	nop

08004b54 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b54:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b56:	6844      	ldr	r4, [r0, #4]
 8004b58:	8800      	ldrh	r0, [r0, #0]
 8004b5a:	46a4      	mov	ip, r4
}
 8004b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b60:	4760      	bx	ip
 8004b62:	bf00      	nop

08004b64 <OTM8009A_Init>:
{
 8004b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f100 0710 	add.w	r7, r0, #16
{
 8004b6e:	b082      	sub	sp, #8
 8004b70:	4680      	mov	r8, r0
 8004b72:	4689      	mov	r9, r1
 8004b74:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b76:	4619      	mov	r1, r3
 8004b78:	4ae0      	ldr	r2, [pc, #896]	; (8004efc <OTM8009A_Init+0x398>)
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f000 fcd6 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b80:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b82:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b84:	4ade      	ldr	r2, [pc, #888]	; (8004f00 <OTM8009A_Init+0x39c>)
 8004b86:	21ff      	movs	r1, #255	; 0xff
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f000 fccf 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b8e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b90:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b92:	4adc      	ldr	r2, [pc, #880]	; (8004f04 <OTM8009A_Init+0x3a0>)
 8004b94:	4619      	mov	r1, r3
 8004b96:	4638      	mov	r0, r7
 8004b98:	f000 fcc8 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004b9c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b9e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ba0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ba2:	4ad9      	ldr	r2, [pc, #868]	; (8004f08 <OTM8009A_Init+0x3a4>)
 8004ba4:	21ff      	movs	r1, #255	; 0xff
 8004ba6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ba8:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004baa:	f000 fcbf 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004bb0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bb2:	4ad4      	ldr	r2, [pc, #848]	; (8004f04 <OTM8009A_Init+0x3a0>)
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f000 fcb8 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004bbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bbe:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4ad2      	ldr	r2, [pc, #840]	; (8004f0c <OTM8009A_Init+0x3a8>)
 8004bc4:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f000 fcaf 	bl	800552c <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004bd2:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004bd4:	4798      	blx	r3
 8004bd6:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004bd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004bdc:	4798      	blx	r3
 8004bde:	1b00      	subs	r0, r0, r4
 8004be0:	2809      	cmp	r0, #9
 8004be2:	d9f9      	bls.n	8004bd8 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004be4:	2300      	movs	r3, #0
 8004be6:	4aca      	ldr	r2, [pc, #808]	; (8004f10 <OTM8009A_Init+0x3ac>)
 8004be8:	4638      	mov	r0, r7
 8004bea:	4619      	mov	r1, r3
 8004bec:	f000 fc9e 	bl	800552c <otm8009a_write_reg>
 8004bf0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	4ac7      	ldr	r2, [pc, #796]	; (8004f14 <OTM8009A_Init+0x3b0>)
 8004bf6:	21c4      	movs	r1, #196	; 0xc4
 8004bf8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004bfa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004bfc:	f000 fc96 	bl	800552c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004c00:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004c04:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004c06:	4798      	blx	r3
 8004c08:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004c0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004c0e:	4798      	blx	r3
 8004c10:	1b40      	subs	r0, r0, r5
 8004c12:	2809      	cmp	r0, #9
 8004c14:	d9f9      	bls.n	8004c0a <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004c16:	2300      	movs	r3, #0
 8004c18:	4abf      	ldr	r2, [pc, #764]	; (8004f18 <OTM8009A_Init+0x3b4>)
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f000 fc85 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004c24:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c26:	4abd      	ldr	r2, [pc, #756]	; (8004f1c <OTM8009A_Init+0x3b8>)
 8004c28:	21c5      	movs	r1, #197	; 0xc5
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 fc7e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004c32:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c36:	4619      	mov	r1, r3
 8004c38:	4ab9      	ldr	r2, [pc, #740]	; (8004f20 <OTM8009A_Init+0x3bc>)
 8004c3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c3c:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c3e:	f000 fc75 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c46:	4ab7      	ldr	r2, [pc, #732]	; (8004f24 <OTM8009A_Init+0x3c0>)
 8004c48:	21c5      	movs	r1, #197	; 0xc5
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f000 fc6e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c56:	4619      	mov	r1, r3
 8004c58:	4ab3      	ldr	r2, [pc, #716]	; (8004f28 <OTM8009A_Init+0x3c4>)
 8004c5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c5e:	f000 fc65 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c66:	4ab1      	ldr	r2, [pc, #708]	; (8004f2c <OTM8009A_Init+0x3c8>)
 8004c68:	21c0      	movs	r1, #192	; 0xc0
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f000 fc5e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c76:	4619      	mov	r1, r3
 8004c78:	4aa0      	ldr	r2, [pc, #640]	; (8004efc <OTM8009A_Init+0x398>)
 8004c7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004c7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c7e:	f000 fc55 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c86:	4aaa      	ldr	r2, [pc, #680]	; (8004f30 <OTM8009A_Init+0x3cc>)
 8004c88:	21d9      	movs	r1, #217	; 0xd9
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	f000 fc4e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c96:	4619      	mov	r1, r3
 8004c98:	4aa6      	ldr	r2, [pc, #664]	; (8004f34 <OTM8009A_Init+0x3d0>)
 8004c9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004c9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c9e:	f000 fc45 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004ca2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ca4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004ca6:	4aa4      	ldr	r2, [pc, #656]	; (8004f38 <OTM8009A_Init+0x3d4>)
 8004ca8:	21c1      	movs	r1, #193	; 0xc1
 8004caa:	4638      	mov	r0, r7
 8004cac:	f000 fc3e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004cb2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004cb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4aa0      	ldr	r2, [pc, #640]	; (8004f3c <OTM8009A_Init+0x3d8>)
 8004cba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004cbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cbe:	f000 fc35 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cc4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cc6:	4a9e      	ldr	r2, [pc, #632]	; (8004f40 <OTM8009A_Init+0x3dc>)
 8004cc8:	21c1      	movs	r1, #193	; 0xc1
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f000 fc2e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cd4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4a9a      	ldr	r2, [pc, #616]	; (8004f44 <OTM8009A_Init+0x3e0>)
 8004cda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cdc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cde:	f000 fc25 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ce2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004ce4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ce6:	4a98      	ldr	r2, [pc, #608]	; (8004f48 <OTM8009A_Init+0x3e4>)
 8004ce8:	21c5      	movs	r1, #197	; 0xc5
 8004cea:	4638      	mov	r0, r7
 8004cec:	f000 fc1e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cf2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cf4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4a94      	ldr	r2, [pc, #592]	; (8004f4c <OTM8009A_Init+0x3e8>)
 8004cfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cfc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004cfe:	f000 fc15 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d06:	4a87      	ldr	r2, [pc, #540]	; (8004f24 <OTM8009A_Init+0x3c0>)
 8004d08:	21c5      	movs	r1, #197	; 0xc5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 fc0e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d16:	4619      	mov	r1, r3
 8004d18:	4a78      	ldr	r2, [pc, #480]	; (8004efc <OTM8009A_Init+0x398>)
 8004d1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d1e:	f000 fc05 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d22:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d26:	4a8a      	ldr	r2, [pc, #552]	; (8004f50 <OTM8009A_Init+0x3ec>)
 8004d28:	21d8      	movs	r1, #216	; 0xd8
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f000 fbfe 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d36:	4619      	mov	r1, r3
 8004d38:	4a86      	ldr	r2, [pc, #536]	; (8004f54 <OTM8009A_Init+0x3f0>)
 8004d3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d3e:	f000 fbf5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d46:	4a84      	ldr	r2, [pc, #528]	; (8004f58 <OTM8009A_Init+0x3f4>)
 8004d48:	21c5      	movs	r1, #197	; 0xc5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f000 fbee 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d56:	4619      	mov	r1, r3
 8004d58:	4a80      	ldr	r2, [pc, #512]	; (8004f5c <OTM8009A_Init+0x3f8>)
 8004d5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d5e:	f000 fbe5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d66:	4a7e      	ldr	r2, [pc, #504]	; (8004f60 <OTM8009A_Init+0x3fc>)
 8004d68:	21c0      	movs	r1, #192	; 0xc0
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f000 fbde 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d76:	4619      	mov	r1, r3
 8004d78:	4a7a      	ldr	r2, [pc, #488]	; (8004f64 <OTM8009A_Init+0x400>)
 8004d7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d7e:	f000 fbd5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d86:	4a78      	ldr	r2, [pc, #480]	; (8004f68 <OTM8009A_Init+0x404>)
 8004d88:	21c5      	movs	r1, #197	; 0xc5
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f000 fbce 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d96:	4619      	mov	r1, r3
 8004d98:	4a66      	ldr	r2, [pc, #408]	; (8004f34 <OTM8009A_Init+0x3d0>)
 8004d9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d9e:	f000 fbc5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004da2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004da4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004da6:	4a71      	ldr	r2, [pc, #452]	; (8004f6c <OTM8009A_Init+0x408>)
 8004da8:	21c4      	movs	r1, #196	; 0xc4
 8004daa:	4638      	mov	r0, r7
 8004dac:	f000 fbbe 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004db0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004db2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004db4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004db6:	4619      	mov	r1, r3
 8004db8:	4a60      	ldr	r2, [pc, #384]	; (8004f3c <OTM8009A_Init+0x3d8>)
 8004dba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004dbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004dbe:	f000 fbb5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004dc4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <OTM8009A_Init+0x40c>)
 8004dc8:	21c1      	movs	r1, #193	; 0xc1
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f000 fbae 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004dd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004dd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dd4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <OTM8009A_Init+0x410>)
 8004dda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004ddc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004dde:	f000 fba5 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004de2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004de4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004de6:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <OTM8009A_Init+0x414>)
 8004de8:	21b3      	movs	r1, #179	; 0xb3
 8004dea:	4638      	mov	r0, r7
 8004dec:	f000 fb9e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004df2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004df4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df6:	4619      	mov	r1, r3
 8004df8:	4a42      	ldr	r2, [pc, #264]	; (8004f04 <OTM8009A_Init+0x3a0>)
 8004dfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004dfc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dfe:	f000 fb95 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e02:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e06:	4a5d      	ldr	r2, [pc, #372]	; (8004f7c <OTM8009A_Init+0x418>)
 8004e08:	21ce      	movs	r1, #206	; 0xce
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f000 fb8e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e16:	4619      	mov	r1, r3
 8004e18:	4a59      	ldr	r2, [pc, #356]	; (8004f80 <OTM8009A_Init+0x41c>)
 8004e1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e1e:	f000 fb85 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e22:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e26:	4a57      	ldr	r2, [pc, #348]	; (8004f84 <OTM8009A_Init+0x420>)
 8004e28:	21ce      	movs	r1, #206	; 0xce
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f000 fb7e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e36:	4619      	mov	r1, r3
 8004e38:	4a53      	ldr	r2, [pc, #332]	; (8004f88 <OTM8009A_Init+0x424>)
 8004e3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e3e:	f000 fb75 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e42:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e46:	4a51      	ldr	r2, [pc, #324]	; (8004f8c <OTM8009A_Init+0x428>)
 8004e48:	21ce      	movs	r1, #206	; 0xce
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f000 fb6e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e56:	4619      	mov	r1, r3
 8004e58:	4a4d      	ldr	r2, [pc, #308]	; (8004f90 <OTM8009A_Init+0x42c>)
 8004e5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e5e:	f000 fb65 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e62:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e66:	4a4b      	ldr	r2, [pc, #300]	; (8004f94 <OTM8009A_Init+0x430>)
 8004e68:	21cf      	movs	r1, #207	; 0xcf
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 fb5e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e76:	4619      	mov	r1, r3
 8004e78:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <OTM8009A_Init+0x434>)
 8004e7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e7e:	f000 fb55 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e86:	4a45      	ldr	r2, [pc, #276]	; (8004f9c <OTM8009A_Init+0x438>)
 8004e88:	21cf      	movs	r1, #207	; 0xcf
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f000 fb4e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e96:	4619      	mov	r1, r3
 8004e98:	4a1a      	ldr	r2, [pc, #104]	; (8004f04 <OTM8009A_Init+0x3a0>)
 8004e9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e9e:	f000 fb45 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004ea2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ea4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004ea6:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <OTM8009A_Init+0x43c>)
 8004ea8:	21cb      	movs	r1, #203	; 0xcb
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 fb3e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004eb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004eb2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004eb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	; (8004fa4 <OTM8009A_Init+0x440>)
 8004eba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004ebc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ebe:	f000 fb35 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ec2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ec4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ec6:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <OTM8009A_Init+0x444>)
 8004ec8:	21cb      	movs	r1, #203	; 0xcb
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f000 fb2e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ed0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ed2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ed4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <OTM8009A_Init+0x41c>)
 8004eda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004edc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ede:	f000 fb25 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ee2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ee4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ee6:	4a31      	ldr	r2, [pc, #196]	; (8004fac <OTM8009A_Init+0x448>)
 8004ee8:	21cb      	movs	r1, #203	; 0xcb
 8004eea:	4638      	mov	r0, r7
 8004eec:	f000 fb1e 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ef0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ef2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ef4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	e05a      	b.n	8004fb0 <OTM8009A_Init+0x44c>
 8004efa:	bf00      	nop
 8004efc:	08012e2d 	.word	0x08012e2d
 8004f00:	08012cfc 	.word	0x08012cfc
 8004f04:	08012e2e 	.word	0x08012e2e
 8004f08:	08012d88 	.word	0x08012d88
 8004f0c:	08012e2f 	.word	0x08012e2f
 8004f10:	08012e30 	.word	0x08012e30
 8004f14:	08012e31 	.word	0x08012e31
 8004f18:	08012e32 	.word	0x08012e32
 8004f1c:	08012e33 	.word	0x08012e33
 8004f20:	08012e34 	.word	0x08012e34
 8004f24:	08012e35 	.word	0x08012e35
 8004f28:	08012e36 	.word	0x08012e36
 8004f2c:	08012e37 	.word	0x08012e37
 8004f30:	08012e38 	.word	0x08012e38
 8004f34:	08012e39 	.word	0x08012e39
 8004f38:	08012e3a 	.word	0x08012e3a
 8004f3c:	08012e3b 	.word	0x08012e3b
 8004f40:	08012e3c 	.word	0x08012e3c
 8004f44:	08012e3d 	.word	0x08012e3d
 8004f48:	08012e3e 	.word	0x08012e3e
 8004f4c:	08012e3f 	.word	0x08012e3f
 8004f50:	08012dfc 	.word	0x08012dfc
 8004f54:	08012e40 	.word	0x08012e40
 8004f58:	08012e41 	.word	0x08012e41
 8004f5c:	08012e42 	.word	0x08012e42
 8004f60:	08012e43 	.word	0x08012e43
 8004f64:	08012e44 	.word	0x08012e44
 8004f68:	08012e45 	.word	0x08012e45
 8004f6c:	08012e46 	.word	0x08012e46
 8004f70:	08012e47 	.word	0x08012e47
 8004f74:	08012e48 	.word	0x08012e48
 8004f78:	08012e00 	.word	0x08012e00
 8004f7c:	08012e04 	.word	0x08012e04
 8004f80:	08012e49 	.word	0x08012e49
 8004f84:	08012e0c 	.word	0x08012e0c
 8004f88:	08012e4a 	.word	0x08012e4a
 8004f8c:	08012e1c 	.word	0x08012e1c
 8004f90:	08012e4b 	.word	0x08012e4b
 8004f94:	08012d00 	.word	0x08012d00
 8004f98:	08012e4c 	.word	0x08012e4c
 8004f9c:	08012e59 	.word	0x08012e59
 8004fa0:	08012d0c 	.word	0x08012d0c
 8004fa4:	08012e4d 	.word	0x08012e4d
 8004fa8:	08012d18 	.word	0x08012d18
 8004fac:	08012d28 	.word	0x08012d28
 8004fb0:	4ad1      	ldr	r2, [pc, #836]	; (80052f8 <OTM8009A_Init+0x794>)
 8004fb2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004fb4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004fb6:	f000 fab9 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004fba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004fbc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004fbe:	4acf      	ldr	r2, [pc, #828]	; (80052fc <OTM8009A_Init+0x798>)
 8004fc0:	21cb      	movs	r1, #203	; 0xcb
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f000 fab2 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004fca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004fcc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4acb      	ldr	r2, [pc, #812]	; (8005300 <OTM8009A_Init+0x79c>)
 8004fd2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004fd4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fd6:	f000 faa9 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004fda:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fdc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004fde:	4ac9      	ldr	r2, [pc, #804]	; (8005304 <OTM8009A_Init+0x7a0>)
 8004fe0:	21cb      	movs	r1, #203	; 0xcb
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f000 faa2 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fe8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004fec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4ac5      	ldr	r2, [pc, #788]	; (8005308 <OTM8009A_Init+0x7a4>)
 8004ff2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004ff4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ff6:	f000 fa99 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004ffa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ffc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004ffe:	4ac3      	ldr	r2, [pc, #780]	; (800530c <OTM8009A_Init+0x7a8>)
 8005000:	21cb      	movs	r1, #203	; 0xcb
 8005002:	4638      	mov	r0, r7
 8005004:	f000 fa92 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005008:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800500a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800500c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800500e:	4619      	mov	r1, r3
 8005010:	4abf      	ldr	r2, [pc, #764]	; (8005310 <OTM8009A_Init+0x7ac>)
 8005012:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005014:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005016:	f000 fa89 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800501a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800501c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800501e:	4abd      	ldr	r2, [pc, #756]	; (8005314 <OTM8009A_Init+0x7b0>)
 8005020:	21cb      	movs	r1, #203	; 0xcb
 8005022:	4638      	mov	r0, r7
 8005024:	f000 fa82 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005028:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800502a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800502c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800502e:	4619      	mov	r1, r3
 8005030:	4ab9      	ldr	r2, [pc, #740]	; (8005318 <OTM8009A_Init+0x7b4>)
 8005032:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005034:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005036:	f000 fa79 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800503a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800503c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800503e:	4ab7      	ldr	r2, [pc, #732]	; (800531c <OTM8009A_Init+0x7b8>)
 8005040:	21cb      	movs	r1, #203	; 0xcb
 8005042:	4638      	mov	r0, r7
 8005044:	f000 fa72 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005048:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800504a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800504c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800504e:	4619      	mov	r1, r3
 8005050:	4ab3      	ldr	r2, [pc, #716]	; (8005320 <OTM8009A_Init+0x7bc>)
 8005052:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005054:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005056:	f000 fa69 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800505a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800505c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800505e:	4ab1      	ldr	r2, [pc, #708]	; (8005324 <OTM8009A_Init+0x7c0>)
 8005060:	21cc      	movs	r1, #204	; 0xcc
 8005062:	4638      	mov	r0, r7
 8005064:	f000 fa62 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005068:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800506a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800506c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800506e:	4619      	mov	r1, r3
 8005070:	4aad      	ldr	r2, [pc, #692]	; (8005328 <OTM8009A_Init+0x7c4>)
 8005072:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005074:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005076:	f000 fa59 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800507a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800507c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800507e:	4aab      	ldr	r2, [pc, #684]	; (800532c <OTM8009A_Init+0x7c8>)
 8005080:	21cc      	movs	r1, #204	; 0xcc
 8005082:	4638      	mov	r0, r7
 8005084:	f000 fa52 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005088:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800508a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800508c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800508e:	4619      	mov	r1, r3
 8005090:	4aa7      	ldr	r2, [pc, #668]	; (8005330 <OTM8009A_Init+0x7cc>)
 8005092:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005094:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005096:	f000 fa49 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800509a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800509c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800509e:	4aa5      	ldr	r2, [pc, #660]	; (8005334 <OTM8009A_Init+0x7d0>)
 80050a0:	21cc      	movs	r1, #204	; 0xcc
 80050a2:	4638      	mov	r0, r7
 80050a4:	f000 fa42 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050aa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050ae:	4619      	mov	r1, r3
 80050b0:	4a91      	ldr	r2, [pc, #580]	; (80052f8 <OTM8009A_Init+0x794>)
 80050b2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050b4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050b6:	f000 fa39 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80050ba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80050be:	4a9e      	ldr	r2, [pc, #632]	; (8005338 <OTM8009A_Init+0x7d4>)
 80050c0:	21cc      	movs	r1, #204	; 0xcc
 80050c2:	4638      	mov	r0, r7
 80050c4:	f000 fa32 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050ca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80050cc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050ce:	4619      	mov	r1, r3
 80050d0:	4a8b      	ldr	r2, [pc, #556]	; (8005300 <OTM8009A_Init+0x79c>)
 80050d2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80050d4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050d6:	f000 fa29 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050da:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050de:	4a97      	ldr	r2, [pc, #604]	; (800533c <OTM8009A_Init+0x7d8>)
 80050e0:	21cc      	movs	r1, #204	; 0xcc
 80050e2:	4638      	mov	r0, r7
 80050e4:	f000 fa22 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050ea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050ec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050ee:	4619      	mov	r1, r3
 80050f0:	4a85      	ldr	r2, [pc, #532]	; (8005308 <OTM8009A_Init+0x7a4>)
 80050f2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050f4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050f6:	f000 fa19 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050fa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050fe:	4a90      	ldr	r2, [pc, #576]	; (8005340 <OTM8009A_Init+0x7dc>)
 8005100:	21cc      	movs	r1, #204	; 0xcc
 8005102:	4638      	mov	r0, r7
 8005104:	f000 fa12 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005108:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800510a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800510c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800510e:	4619      	mov	r1, r3
 8005110:	4a8c      	ldr	r2, [pc, #560]	; (8005344 <OTM8009A_Init+0x7e0>)
 8005112:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005114:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005116:	f000 fa09 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800511a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800511c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800511e:	4a8a      	ldr	r2, [pc, #552]	; (8005348 <OTM8009A_Init+0x7e4>)
 8005120:	21c5      	movs	r1, #197	; 0xc5
 8005122:	4638      	mov	r0, r7
 8005124:	f000 fa02 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005128:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800512a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800512c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800512e:	4619      	mov	r1, r3
 8005130:	4a86      	ldr	r2, [pc, #536]	; (800534c <OTM8009A_Init+0x7e8>)
 8005132:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005134:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005136:	f000 f9f9 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800513a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800513c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800513e:	4a84      	ldr	r2, [pc, #528]	; (8005350 <OTM8009A_Init+0x7ec>)
 8005140:	21f5      	movs	r1, #245	; 0xf5
 8005142:	4638      	mov	r0, r7
 8005144:	f000 f9f2 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005148:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800514a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800514c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800514e:	4619      	mov	r1, r3
 8005150:	4a80      	ldr	r2, [pc, #512]	; (8005354 <OTM8009A_Init+0x7f0>)
 8005152:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005154:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005156:	f000 f9e9 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800515a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800515c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800515e:	4a7e      	ldr	r2, [pc, #504]	; (8005358 <OTM8009A_Init+0x7f4>)
 8005160:	21c6      	movs	r1, #198	; 0xc6
 8005162:	4638      	mov	r0, r7
 8005164:	f000 f9e2 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005168:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800516a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800516c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800516e:	4619      	mov	r1, r3
 8005170:	4a7a      	ldr	r2, [pc, #488]	; (800535c <OTM8009A_Init+0x7f8>)
 8005172:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005174:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005176:	f000 f9d9 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800517a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800517c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800517e:	4a78      	ldr	r2, [pc, #480]	; (8005360 <OTM8009A_Init+0x7fc>)
 8005180:	21ff      	movs	r1, #255	; 0xff
 8005182:	4638      	mov	r0, r7
 8005184:	f000 f9d2 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005188:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800518a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800518c:	4a73      	ldr	r2, [pc, #460]	; (800535c <OTM8009A_Init+0x7f8>)
 800518e:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005190:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005192:	4638      	mov	r0, r7
 8005194:	f000 f9ca 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005198:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800519a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800519c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800519e:	4619      	mov	r1, r3
 80051a0:	4a6e      	ldr	r2, [pc, #440]	; (800535c <OTM8009A_Init+0x7f8>)
 80051a2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051a4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051a6:	f000 f9c1 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051aa:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051ae:	4a6d      	ldr	r2, [pc, #436]	; (8005364 <OTM8009A_Init+0x800>)
 80051b0:	21e1      	movs	r1, #225	; 0xe1
 80051b2:	4638      	mov	r0, r7
 80051b4:	f000 f9ba 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051be:	4619      	mov	r1, r3
 80051c0:	4a66      	ldr	r2, [pc, #408]	; (800535c <OTM8009A_Init+0x7f8>)
 80051c2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051c4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051c6:	f000 f9b1 	bl	800552c <otm8009a_write_reg>
 80051ca:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80051cc:	2310      	movs	r3, #16
 80051ce:	4a66      	ldr	r2, [pc, #408]	; (8005368 <OTM8009A_Init+0x804>)
 80051d0:	21e2      	movs	r1, #226	; 0xe2
 80051d2:	4638      	mov	r0, r7
 80051d4:	f000 f9aa 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d8:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80051da:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80051dc:	2300      	movs	r3, #0
 80051de:	4a63      	ldr	r2, [pc, #396]	; (800536c <OTM8009A_Init+0x808>)
 80051e0:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80051e2:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80051e4:	4638      	mov	r0, r7
 80051e6:	f000 f9a1 	bl	800552c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80051ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80051ee:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80051f0:	4798      	blx	r3
 80051f2:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80051f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80051f8:	4798      	blx	r3
 80051fa:	1b40      	subs	r0, r0, r5
 80051fc:	2877      	cmp	r0, #119	; 0x77
 80051fe:	d9f9      	bls.n	80051f4 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8005200:	f1b9 0f00 	cmp.w	r9, #0
 8005204:	d074      	beq.n	80052f0 <OTM8009A_Init+0x78c>
 8005206:	f1b9 0f02 	cmp.w	r9, #2
 800520a:	d14f      	bne.n	80052ac <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800520c:	2300      	movs	r3, #0
 800520e:	4a58      	ldr	r2, [pc, #352]	; (8005370 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005210:	213a      	movs	r1, #58	; 0x3a
 8005212:	4638      	mov	r0, r7
 8005214:	f000 f98a 	bl	800552c <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005218:	4d56      	ldr	r5, [pc, #344]	; (8005374 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800521a:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800521e:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005220:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005224:	d046      	beq.n	80052b4 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005226:	2300      	movs	r3, #0
 8005228:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800522a:	2300      	movs	r3, #0
 800522c:	4a52      	ldr	r2, [pc, #328]	; (8005378 <OTM8009A_Init+0x814>)
 800522e:	2151      	movs	r1, #81	; 0x51
 8005230:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005232:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005234:	f000 f97a 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005238:	4a50      	ldr	r2, [pc, #320]	; (800537c <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800523a:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800523e:	4653      	mov	r3, sl
 8005240:	2153      	movs	r1, #83	; 0x53
 8005242:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005244:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005248:	f000 f970 	bl	800552c <otm8009a_write_reg>
 800524c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800524e:	4653      	mov	r3, sl
 8005250:	4a4b      	ldr	r2, [pc, #300]	; (8005380 <OTM8009A_Init+0x81c>)
 8005252:	2155      	movs	r1, #85	; 0x55
 8005254:	4638      	mov	r0, r7
 8005256:	f000 f969 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800525a:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800525c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800525e:	4653      	mov	r3, sl
 8005260:	4a48      	ldr	r2, [pc, #288]	; (8005384 <OTM8009A_Init+0x820>)
 8005262:	215e      	movs	r1, #94	; 0x5e
 8005264:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005266:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005268:	f000 f960 	bl	800552c <otm8009a_write_reg>
 800526c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800526e:	4653      	mov	r3, sl
 8005270:	4a45      	ldr	r2, [pc, #276]	; (8005388 <OTM8009A_Init+0x824>)
 8005272:	2129      	movs	r1, #41	; 0x29
 8005274:	4638      	mov	r0, r7
 8005276:	f000 f959 	bl	800552c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800527a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800527c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800527e:	4653      	mov	r3, sl
 8005280:	4651      	mov	r1, sl
 8005282:	4a36      	ldr	r2, [pc, #216]	; (800535c <OTM8009A_Init+0x7f8>)
 8005284:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005286:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005288:	f000 f950 	bl	800552c <otm8009a_write_reg>
 800528c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800528e:	4653      	mov	r3, sl
 8005290:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005292:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005294:	4a3d      	ldr	r2, [pc, #244]	; (800538c <OTM8009A_Init+0x828>)
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	f000 f948 	bl	800552c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800529c:	42c4      	cmn	r4, r0
}
 800529e:	bf14      	ite	ne
 80052a0:	f04f 30ff 	movne.w	r0, #4294967295
 80052a4:	4650      	moveq	r0, sl
 80052a6:	b002      	add	sp, #8
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80052ac:	f1ba 0f01 	cmp.w	sl, #1
 80052b0:	4d30      	ldr	r5, [pc, #192]	; (8005374 <OTM8009A_Init+0x810>)
 80052b2:	d1b8      	bne.n	8005226 <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80052b4:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80052b6:	2300      	movs	r3, #0
 80052b8:	f10d 0207 	add.w	r2, sp, #7
 80052bc:	2136      	movs	r1, #54	; 0x36
 80052be:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80052c0:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80052c4:	f000 f932 	bl	800552c <otm8009a_write_reg>
 80052c8:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80052ca:	2304      	movs	r3, #4
 80052cc:	4a30      	ldr	r2, [pc, #192]	; (8005390 <OTM8009A_Init+0x82c>)
 80052ce:	212a      	movs	r1, #42	; 0x2a
 80052d0:	4638      	mov	r0, r7
 80052d2:	f000 f92b 	bl	800552c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80052d6:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80052d8:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80052da:	2304      	movs	r3, #4
 80052dc:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <OTM8009A_Init+0x830>)
 80052de:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80052e0:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80052e2:	4638      	mov	r0, r7
 80052e4:	f000 f922 	bl	800552c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80052e8:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80052ec:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80052ee:	e79c      	b.n	800522a <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80052f0:	464b      	mov	r3, r9
 80052f2:	4a29      	ldr	r2, [pc, #164]	; (8005398 <OTM8009A_Init+0x834>)
 80052f4:	e78c      	b.n	8005210 <OTM8009A_Init+0x6ac>
 80052f6:	bf00      	nop
 80052f8:	08012e4a 	.word	0x08012e4a
 80052fc:	08012d38 	.word	0x08012d38
 8005300:	08012e4b 	.word	0x08012e4b
 8005304:	08012d44 	.word	0x08012d44
 8005308:	08012e4c 	.word	0x08012e4c
 800530c:	08012d54 	.word	0x08012d54
 8005310:	08012e4e 	.word	0x08012e4e
 8005314:	08012d64 	.word	0x08012d64
 8005318:	08012e4f 	.word	0x08012e4f
 800531c:	08012d70 	.word	0x08012d70
 8005320:	08012e2e 	.word	0x08012e2e
 8005324:	08012d7c 	.word	0x08012d7c
 8005328:	08012e4d 	.word	0x08012e4d
 800532c:	08012d8c 	.word	0x08012d8c
 8005330:	08012e49 	.word	0x08012e49
 8005334:	08012d9c 	.word	0x08012d9c
 8005338:	08012dac 	.word	0x08012dac
 800533c:	08012db8 	.word	0x08012db8
 8005340:	08012dc8 	.word	0x08012dc8
 8005344:	08012e39 	.word	0x08012e39
 8005348:	08012e5a 	.word	0x08012e5a
 800534c:	08012e5b 	.word	0x08012e5b
 8005350:	08012e5c 	.word	0x08012e5c
 8005354:	08012e5d 	.word	0x08012e5d
 8005358:	08012e5e 	.word	0x08012e5e
 800535c:	08012e2d 	.word	0x08012e2d
 8005360:	08012dd8 	.word	0x08012dd8
 8005364:	08012ddc 	.word	0x08012ddc
 8005368:	08012dec 	.word	0x08012dec
 800536c:	08012e50 	.word	0x08012e50
 8005370:	08012e51 	.word	0x08012e51
 8005374:	24001524 	.word	0x24001524
 8005378:	08012e53 	.word	0x08012e53
 800537c:	08012e54 	.word	0x08012e54
 8005380:	08012e55 	.word	0x08012e55
 8005384:	08012e56 	.word	0x08012e56
 8005388:	08012e57 	.word	0x08012e57
 800538c:	08012e58 	.word	0x08012e58
 8005390:	08012cf4 	.word	0x08012cf4
 8005394:	08012cf8 	.word	0x08012cf8
 8005398:	08012e52 	.word	0x08012e52

0800539c <OTM8009A_SetBrightness>:
{
 800539c:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800539e:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80053a2:	4e0b      	ldr	r6, [pc, #44]	; (80053d0 <OTM8009A_SetBrightness+0x34>)
{
 80053a4:	b082      	sub	sp, #8
 80053a6:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80053a8:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80053ac:	2300      	movs	r3, #0
 80053ae:	f10d 0207 	add.w	r2, sp, #7
 80053b2:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80053b4:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80053b6:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80053b8:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80053bc:	f000 f8b6 	bl	800552c <otm8009a_write_reg>
 80053c0:	b918      	cbnz	r0, 80053ca <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 80053c2:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <OTM8009A_SetBrightness+0x38>)
 80053c4:	609d      	str	r5, [r3, #8]
}
 80053c6:	b002      	add	sp, #8
 80053c8:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80053ce:	e7fa      	b.n	80053c6 <OTM8009A_SetBrightness+0x2a>
 80053d0:	51eb851f 	.word	0x51eb851f
 80053d4:	24001524 	.word	0x24001524

080053d8 <OTM8009A_DisplayOn>:
{
 80053d8:	b500      	push	{lr}
 80053da:	b083      	sub	sp, #12
  uint8_t display = 0;
 80053dc:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80053de:	2129      	movs	r1, #41	; 0x29
 80053e0:	3010      	adds	r0, #16
 80053e2:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80053e6:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80053ea:	f000 f89f 	bl	800552c <otm8009a_write_reg>
 80053ee:	3800      	subs	r0, #0
 80053f0:	bf18      	it	ne
 80053f2:	2001      	movne	r0, #1
}
 80053f4:	4240      	negs	r0, r0
 80053f6:	b003      	add	sp, #12
 80053f8:	f85d fb04 	ldr.w	pc, [sp], #4

080053fc <OTM8009A_DisplayOff>:
{
 80053fc:	b500      	push	{lr}
 80053fe:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005400:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005402:	2128      	movs	r1, #40	; 0x28
 8005404:	3010      	adds	r0, #16
 8005406:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800540a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800540e:	f000 f88d 	bl	800552c <otm8009a_write_reg>
 8005412:	3800      	subs	r0, #0
 8005414:	bf18      	it	ne
 8005416:	2001      	movne	r0, #1
}
 8005418:	4240      	negs	r0, r0
 800541a:	b003      	add	sp, #12
 800541c:	f85d fb04 	ldr.w	pc, [sp], #4

08005420 <OTM8009A_SetOrientation>:
{
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005422:	2360      	movs	r3, #96	; 0x60
{
 8005424:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8005426:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005428:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800542a:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800542e:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005432:	d83e      	bhi.n	80054b2 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005434:	d020      	beq.n	8005478 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8005436:	f100 0510 	add.w	r5, r0, #16
 800543a:	4633      	mov	r3, r6
 800543c:	f10d 0207 	add.w	r2, sp, #7
 8005440:	2136      	movs	r1, #54	; 0x36
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f872 	bl	800552c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005448:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800544a:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800544c:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <OTM8009A_SetOrientation+0x98>)
 800544e:	212a      	movs	r1, #42	; 0x2a
 8005450:	4628      	mov	r0, r5
 8005452:	f000 f86b 	bl	800552c <otm8009a_write_reg>
 8005456:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005458:	2304      	movs	r3, #4
 800545a:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800545c:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800545e:	4a17      	ldr	r2, [pc, #92]	; (80054bc <OTM8009A_SetOrientation+0x9c>)
 8005460:	212b      	movs	r1, #43	; 0x2b
 8005462:	f000 f863 	bl	800552c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005468:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800546a:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 800546c:	3800      	subs	r0, #0
 800546e:	bf18      	it	ne
 8005470:	2001      	movne	r0, #1
 8005472:	4240      	negs	r0, r0
}
 8005474:	b003      	add	sp, #12
 8005476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005478:	f100 0510 	add.w	r5, r0, #16
 800547c:	4633      	mov	r3, r6
 800547e:	460f      	mov	r7, r1
 8005480:	f10d 0206 	add.w	r2, sp, #6
 8005484:	2136      	movs	r1, #54	; 0x36
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f850 	bl	800552c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800548c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800548e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005490:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <OTM8009A_SetOrientation+0x98>)
 8005492:	212a      	movs	r1, #42	; 0x2a
 8005494:	4628      	mov	r0, r5
 8005496:	f000 f849 	bl	800552c <otm8009a_write_reg>
 800549a:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800549c:	2304      	movs	r3, #4
 800549e:	4628      	mov	r0, r5
 80054a0:	4a06      	ldr	r2, [pc, #24]	; (80054bc <OTM8009A_SetOrientation+0x9c>)
 80054a2:	212b      	movs	r1, #43	; 0x2b
 80054a4:	f000 f842 	bl	800552c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80054a8:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80054ac:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80054ae:	601f      	str	r7, [r3, #0]
 80054b0:	e7dc      	b.n	800546c <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80054b6:	e7dd      	b.n	8005474 <OTM8009A_SetOrientation+0x54>
 80054b8:	08012cf4 	.word	0x08012cf4
 80054bc:	08012cf8 	.word	0x08012cf8
 80054c0:	24001524 	.word	0x24001524

080054c4 <OTM8009A_ReadID>:
{ 
 80054c4:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80054c6:	3010      	adds	r0, #16
 80054c8:	21da      	movs	r1, #218	; 0xda
{ 
 80054ca:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80054cc:	2300      	movs	r3, #0
 80054ce:	f000 f825 	bl	800551c <otm8009a_read_reg>
 80054d2:	3800      	subs	r0, #0
 80054d4:	bf18      	it	ne
 80054d6:	2001      	movne	r0, #1
}  
 80054d8:	4240      	negs	r0, r0
 80054da:	bd08      	pop	{r3, pc}

080054dc <OTM8009A_DrawVLine>:
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <OTM8009A_GetPixel>:
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop

080054ec <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80054ec:	b178      	cbz	r0, 800550e <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054ee:	684a      	ldr	r2, [r1, #4]
 80054f0:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 80054f2:	2000      	movs	r0, #0
{
 80054f4:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 80054f6:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80054fa:	4906      	ldr	r1, [pc, #24]	; (8005514 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054fc:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80054fe:	4a06      	ldr	r2, [pc, #24]	; (8005518 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8005500:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005504:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8005508:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800550a:	611a      	str	r2, [r3, #16]
}
 800550c:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005512:	4770      	bx	lr
 8005514:	08004b45 	.word	0x08004b45
 8005518:	08004b55 	.word	0x08004b55

0800551c <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800551c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800551e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005522:	46a4      	mov	ip, r4
}
 8005524:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005528:	4760      	bx	ip
 800552a:	bf00      	nop

0800552c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800552c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800552e:	6804      	ldr	r4, [r0, #0]
 8005530:	6880      	ldr	r0, [r0, #8]
 8005532:	46a4      	mov	ip, r4
}
 8005534:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005538:	4760      	bx	ip
 800553a:	bf00      	nop

0800553c <BSP_AUDIO_OUT_IRQHandler>:
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
  if (Instance == 0U)
 800553c:	b100      	cbz	r0, 8005540 <BSP_AUDIO_OUT_IRQHandler+0x4>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
  }
}
 800553e:	4770      	bx	lr
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005540:	4b02      	ldr	r3, [pc, #8]	; (800554c <BSP_AUDIO_OUT_IRQHandler+0x10>)
 8005542:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005546:	f001 bd4b 	b.w	8006fe0 <HAL_DMA_IRQHandler>
 800554a:	bf00      	nop
 800554c:	240119a4 	.word	0x240119a4

08005550 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8005550:	f000 be8e 	b.w	8006270 <HAL_GetTick>

08005554 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005554:	b910      	cbnz	r0, 800555c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005556:	4b03      	ldr	r3, [pc, #12]	; (8005564 <BSP_LCD_SetActiveLayer+0x10>)
 8005558:	6099      	str	r1, [r3, #8]
 800555a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800555c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	24011ae4 	.word	0x24011ae4

08005568 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005568:	b918      	cbnz	r0, 8005572 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <BSP_LCD_GetPixelFormat+0x10>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	600b      	str	r3, [r1, #0]
 8005570:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005572:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005576:	4770      	bx	lr
 8005578:	24011ae4 	.word	0x24011ae4

0800557c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800557c:	b948      	cbnz	r0, 8005592 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <BSP_LCD_GetXSize+0x1c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	b11b      	cbz	r3, 800558e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <BSP_LCD_GetXSize+0x20>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800558e:	4618      	mov	r0, r3
  }

  return ret;
}
 8005590:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005592:	f06f 0001 	mvn.w	r0, #1
 8005596:	4770      	bx	lr
 8005598:	24001534 	.word	0x24001534
 800559c:	24011ae4 	.word	0x24011ae4

080055a0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80055a0:	b948      	cbnz	r0, 80055b6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <BSP_LCD_GetYSize+0x1c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	b11b      	cbz	r3, 80055b2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <BSP_LCD_GetYSize+0x20>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	600b      	str	r3, [r1, #0]
 80055b0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80055b2:	4618      	mov	r0, r3
  }

  return ret;
}
 80055b4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80055b6:	f06f 0001 	mvn.w	r0, #1
 80055ba:	4770      	bx	lr
 80055bc:	24001534 	.word	0x24001534
 80055c0:	24011ae4 	.word	0x24011ae4

080055c4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80055cc:	b39c      	cbz	r4, 8005636 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80055d2:	4d1a      	ldr	r5, [pc, #104]	; (800563c <BSP_LCD_FillRGBRect+0x78>)
 80055d4:	eb04 0802 	add.w	r8, r4, r2
 80055d8:	eb0b 0e01 	add.w	lr, fp, r1
 80055dc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80055e0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005640 <BSP_LCD_FillRGBRect+0x7c>
 80055e4:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 80055e6:	f1bb 0f00 	cmp.w	fp, #0
 80055ea:	d021      	beq.n	8005630 <BSP_LCD_FillRGBRect+0x6c>
 80055ec:	460c      	mov	r4, r1
 80055ee:	e00a      	b.n	8005606 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055f0:	682e      	ldr	r6, [r5, #0]
 80055f2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80055f4:	fb06 4602 	mla	r6, r6, r2, r4
 80055f8:	3401      	adds	r4, #1
 80055fa:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80055fe:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8005600:	6928      	ldr	r0, [r5, #16]
 8005602:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8005604:	d014      	beq.n	8005630 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005606:	68a8      	ldr	r0, [r5, #8]
 8005608:	f8d3 9000 	ldr.w	r9, [r3]
 800560c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005610:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005614:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8005616:	2e00      	cmp	r6, #0
 8005618:	d0ea      	beq.n	80055f0 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800561a:	682e      	ldr	r6, [r5, #0]
 800561c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800561e:	fb06 4602 	mla	r6, r6, r2, r4
 8005622:	3401      	adds	r4, #1
 8005624:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8005628:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 800562a:	6928      	ldr	r0, [r5, #16]
 800562c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800562e:	d1ea      	bne.n	8005606 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8005630:	3201      	adds	r2, #1
 8005632:	4542      	cmp	r2, r8
 8005634:	d1d7      	bne.n	80055e6 <BSP_LCD_FillRGBRect+0x22>
}
 8005636:	2000      	movs	r0, #0
 8005638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563c:	24011ae4 	.word	0x24011ae4
 8005640:	24011a3c 	.word	0x24011a3c

08005644 <BSP_LCD_ReadPixel>:
{
 8005644:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005646:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800564a:	4e10      	ldr	r6, [pc, #64]	; (800568c <BSP_LCD_ReadPixel+0x48>)
 800564c:	4f10      	ldr	r7, [pc, #64]	; (8005690 <BSP_LCD_ReadPixel+0x4c>)
 800564e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005652:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005656:	0080      	lsls	r0, r0, #2
 8005658:	68ac      	ldr	r4, [r5, #8]
 800565a:	fb0c 7404 	mla	r4, ip, r4, r7
 800565e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005660:	b94d      	cbnz	r5, 8005676 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005662:	5830      	ldr	r0, [r6, r0]
 8005664:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8005666:	fb00 1202 	mla	r2, r0, r2, r1
}
 800566a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800566c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8005670:	bcf0      	pop	{r4, r5, r6, r7}
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005676:	5835      	ldr	r5, [r6, r0]
 8005678:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800567a:	fb05 1202 	mla	r2, r5, r2, r1
 800567e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8005682:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005684:	b292      	uxth	r2, r2
}
 8005686:	bcf0      	pop	{r4, r5, r6, r7}
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	4770      	bx	lr
 800568c:	24011ae4 	.word	0x24011ae4
 8005690:	24011a3c 	.word	0x24011a3c

08005694 <BSP_LCD_WritePixel>:
{
 8005694:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005696:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800569a:	4e0f      	ldr	r6, [pc, #60]	; (80056d8 <BSP_LCD_WritePixel+0x44>)
 800569c:	4f0f      	ldr	r7, [pc, #60]	; (80056dc <BSP_LCD_WritePixel+0x48>)
 800569e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80056a2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80056a6:	0080      	lsls	r0, r0, #2
 80056a8:	68ac      	ldr	r4, [r5, #8]
 80056aa:	fb0c 7404 	mla	r4, ip, r4, r7
 80056ae:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80056b0:	b945      	cbnz	r5, 80056c4 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80056b2:	5830      	ldr	r0, [r6, r0]
 80056b4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80056b6:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80056ba:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80056bc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80056c0:	bcf0      	pop	{r4, r5, r6, r7}
 80056c2:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80056c4:	5835      	ldr	r5, [r6, r0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80056ca:	fb05 1202 	mla	r2, r5, r2, r1
}
 80056ce:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80056d0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80056d4:	2000      	movs	r0, #0
 80056d6:	4770      	bx	lr
 80056d8:	24011ae4 	.word	0x24011ae4
 80056dc:	24011a3c 	.word	0x24011a3c

080056e0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80056e0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80056e2:	2406      	movs	r4, #6
{
 80056e4:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80056e6:	9101      	str	r1, [sp, #4]
 80056e8:	4601      	mov	r1, r0
 80056ea:	9202      	str	r2, [sp, #8]
 80056ec:	9400      	str	r4, [sp, #0]
 80056ee:	4805      	ldr	r0, [pc, #20]	; (8005704 <DSI_IO_Read+0x24>)
 80056f0:	f002 fcee 	bl	80080d0 <HAL_DSI_Read>
 80056f4:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80056f6:	bf14      	ite	ne
 80056f8:	f06f 0007 	mvnne.w	r0, #7
 80056fc:	2000      	moveq	r0, #0
 80056fe:	b004      	add	sp, #16
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	24011b00 	.word	0x24011b00

08005708 <BSP_LCD_DrawBitmap>:
{
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800570c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005710:	4e4f      	ldr	r6, [pc, #316]	; (8005850 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005712:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005714:	f04f 0934 	mov.w	r9, #52	; 0x34
 8005718:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800571c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8005720:	f8df e138 	ldr.w	lr, [pc, #312]	; 800585c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005724:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005726:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800572a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800572e:	68b9      	ldr	r1, [r7, #8]
{
 8005730:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005732:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005734:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005738:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800573c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005740:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005744:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005746:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800574a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800574e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005752:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005754:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005758:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800575c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005760:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005762:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005766:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800576a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800576e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005770:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8005774:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005776:	4465      	add	r5, ip
 8005778:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800577a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800577c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800577e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8005782:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005786:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005788:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 800578c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800578e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005792:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005794:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8005798:	d957      	bls.n	800584a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800579a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800579e:	2c08      	cmp	r4, #8
 80057a0:	bf34      	ite	cc
 80057a2:	f04f 0b02 	movcc.w	fp, #2
 80057a6:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80057aa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80057ae:	9c03      	ldr	r4, [sp, #12]
 80057b0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80057b4:	fb04 f909 	mul.w	r9, r4, r9
 80057b8:	fb09 1505 	mla	r5, r9, r5, r1
 80057bc:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80057be:	f1ba 0f00 	cmp.w	sl, #0
 80057c2:	d03e      	beq.n	8005842 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057c4:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 80057c6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 80057ca:	2700      	movs	r7, #0
 80057cc:	4c21      	ldr	r4, [pc, #132]	; (8005854 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057ce:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80057d2:	e006      	b.n	80057e2 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80057d4:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 80057d6:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80057d8:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 80057da:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80057dc:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 80057e0:	d02f      	beq.n	8005842 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057e2:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 80057e4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80057e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80057ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80057ee:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 80057f0:	4919      	ldr	r1, [pc, #100]	; (8005858 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80057f2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 80057f6:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80057fa:	bf18      	it	ne
 80057fc:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80057fe:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005800:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005802:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005806:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800580a:	4812      	ldr	r0, [pc, #72]	; (8005854 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800580c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005810:	f001 ff92 	bl	8007738 <HAL_DMA2D_Init>
 8005814:	2800      	cmp	r0, #0
 8005816:	d1dd      	bne.n	80057d4 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005818:	2101      	movs	r1, #1
 800581a:	480e      	ldr	r0, [pc, #56]	; (8005854 <BSP_LCD_DrawBitmap+0x14c>)
 800581c:	f002 f8ae 	bl	800797c <HAL_DMA2D_ConfigLayer>
 8005820:	2800      	cmp	r0, #0
 8005822:	d1d7      	bne.n	80057d4 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005824:	2001      	movs	r0, #1
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	4642      	mov	r2, r8
 800582a:	4629      	mov	r1, r5
 800582c:	9000      	str	r0, [sp, #0]
 800582e:	4809      	ldr	r0, [pc, #36]	; (8005854 <BSP_LCD_DrawBitmap+0x14c>)
 8005830:	f001 ffc4 	bl	80077bc <HAL_DMA2D_Start>
 8005834:	2800      	cmp	r0, #0
 8005836:	d1cd      	bne.n	80057d4 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005838:	2132      	movs	r1, #50	; 0x32
 800583a:	4806      	ldr	r0, [pc, #24]	; (8005854 <BSP_LCD_DrawBitmap+0x14c>)
 800583c:	f002 f818 	bl	8007870 <HAL_DMA2D_PollForTransfer>
 8005840:	e7c8      	b.n	80057d4 <BSP_LCD_DrawBitmap+0xcc>
}
 8005842:	2000      	movs	r0, #0
 8005844:	b005      	add	sp, #20
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800584a:	f04f 0b00 	mov.w	fp, #0
 800584e:	e7ac      	b.n	80057aa <BSP_LCD_DrawBitmap+0xa2>
 8005850:	24011ae4 	.word	0x24011ae4
 8005854:	24011b1c 	.word	0x24011b1c
 8005858:	52001000 	.word	0x52001000
 800585c:	24011a3c 	.word	0x24011a3c

08005860 <LL_FillBuffer>:
{
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005864:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005868:	4c28      	ldr	r4, [pc, #160]	; (800590c <LL_FillBuffer+0xac>)
{
 800586a:	4617      	mov	r7, r2
 800586c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 800586e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8005872:	4698      	mov	r8, r3
 8005874:	460e      	mov	r6, r1
 8005876:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005878:	68c2      	ldr	r2, [r0, #12]
{
 800587a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 800587c:	2a02      	cmp	r2, #2
 800587e:	d00f      	beq.n	80058a0 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005880:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8005882:	4c23      	ldr	r4, [pc, #140]	; (8005910 <LL_FillBuffer+0xb0>)
 8005884:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8005888:	4922      	ldr	r1, [pc, #136]	; (8005914 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800588a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800588c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800588e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8005890:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005894:	f001 ff50 	bl	8007738 <HAL_DMA2D_Init>
 8005898:	b308      	cbz	r0, 80058de <LL_FillBuffer+0x7e>
}
 800589a:	b002      	add	sp, #8
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 80058a0:	f3c5 1045 	ubfx	r0, r5, #5, #6
 80058a4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 80058a8:	f005 041f 	and.w	r4, r5, #31
 80058ac:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 80058b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80058b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80058b8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80058bc:	3521      	adds	r5, #33	; 0x21
 80058be:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 80058c2:	3117      	adds	r1, #23
 80058c4:	09ad      	lsrs	r5, r5, #6
 80058c6:	0989      	lsrs	r1, r1, #6
 80058c8:	022d      	lsls	r5, r5, #8
 80058ca:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80058ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80058d2:	3017      	adds	r0, #23
 80058d4:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 80058d8:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 80058dc:	e7d1      	b.n	8005882 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80058de:	2101      	movs	r1, #1
 80058e0:	4620      	mov	r0, r4
 80058e2:	f002 f84b 	bl	800797c <HAL_DMA2D_ConfigLayer>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1d7      	bne.n	800589a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80058ea:	463b      	mov	r3, r7
 80058ec:	4632      	mov	r2, r6
 80058ee:	4629      	mov	r1, r5
 80058f0:	4620      	mov	r0, r4
 80058f2:	f8cd 8000 	str.w	r8, [sp]
 80058f6:	f001 ff61 	bl	80077bc <HAL_DMA2D_Start>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d1cd      	bne.n	800589a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80058fe:	4620      	mov	r0, r4
 8005900:	2119      	movs	r1, #25
}
 8005902:	b002      	add	sp, #8
 8005904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005908:	f001 bfb2 	b.w	8007870 <HAL_DMA2D_PollForTransfer>
 800590c:	24011ae4 	.word	0x24011ae4
 8005910:	24011b1c 	.word	0x24011b1c
 8005914:	52001000 	.word	0x52001000

08005918 <BSP_LCD_DrawHLine>:
{
 8005918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800591c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005920:	4f12      	ldr	r7, [pc, #72]	; (800596c <BSP_LCD_DrawHLine+0x54>)
{
 8005922:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005924:	f8df e048 	ldr.w	lr, [pc, #72]	; 8005970 <BSP_LCD_DrawHLine+0x58>
 8005928:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 800592c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005930:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005934:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005938:	688d      	ldr	r5, [r1, #8]
{
 800593a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800593c:	690e      	ldr	r6, [r1, #16]
 800593e:	fb02 4207 	mla	r2, r2, r7, r4
 8005942:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005946:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005948:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800594a:	bf38      	it	cc
 800594c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800594e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005950:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005954:	9a08      	ldr	r2, [sp, #32]
 8005956:	9400      	str	r4, [sp, #0]
 8005958:	9201      	str	r2, [sp, #4]
 800595a:	461a      	mov	r2, r3
 800595c:	2301      	movs	r3, #1
 800595e:	f7ff ff7f 	bl	8005860 <LL_FillBuffer>
}
 8005962:	4620      	mov	r0, r4
 8005964:	b002      	add	sp, #8
 8005966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596a:	bf00      	nop
 800596c:	24011ae4 	.word	0x24011ae4
 8005970:	24011a3c 	.word	0x24011a3c

08005974 <BSP_LCD_DrawVLine>:
{
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005978:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800597c:	4c11      	ldr	r4, [pc, #68]	; (80059c4 <BSP_LCD_DrawVLine+0x50>)
 800597e:	4d12      	ldr	r5, [pc, #72]	; (80059c8 <BSP_LCD_DrawVLine+0x54>)
 8005980:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005984:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005988:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800598c:	eb02 0c03 	add.w	ip, r2, r3
{
 8005990:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005992:	68be      	ldr	r6, [r7, #8]
 8005994:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005998:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800599a:	fb08 5606 	mla	r6, r8, r6, r5
 800599e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80059a0:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059a2:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80059a4:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059a6:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80059aa:	bf88      	it	hi
 80059ac:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80059ae:	9a08      	ldr	r2, [sp, #32]
 80059b0:	e9cd 4200 	strd	r4, r2, [sp]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f7ff ff53 	bl	8005860 <LL_FillBuffer>
}
 80059ba:	2000      	movs	r0, #0
 80059bc:	b002      	add	sp, #8
 80059be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c2:	bf00      	nop
 80059c4:	24011ae4 	.word	0x24011ae4
 80059c8:	24011a3c 	.word	0x24011a3c

080059cc <BSP_LCD_FillRect>:
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059ce:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 80059d2:	4f0e      	ldr	r7, [pc, #56]	; (8005a0c <BSP_LCD_FillRect+0x40>)
 80059d4:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80059d8:	4d0d      	ldr	r5, [pc, #52]	; (8005a10 <BSP_LCD_FillRect+0x44>)
 80059da:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 80059de:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 80059e2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059e4:	68b7      	ldr	r7, [r6, #8]
 80059e6:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80059ea:	1ae4      	subs	r4, r4, r3
 80059ec:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059ee:	fb0e 5507 	mla	r5, lr, r7, r5
 80059f2:	6937      	ldr	r7, [r6, #16]
{
 80059f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80059f6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80059f8:	9400      	str	r4, [sp, #0]
 80059fa:	fb07 3101 	mla	r1, r7, r1, r3
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	9601      	str	r6, [sp, #4]
 8005a02:	f7ff ff2d 	bl	8005860 <LL_FillBuffer>
}
 8005a06:	2000      	movs	r0, #0
 8005a08:	b003      	add	sp, #12
 8005a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a0c:	24011ae4 	.word	0x24011ae4
 8005a10:	24011a3c 	.word	0x24011a3c

08005a14 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005a14:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005a16:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005a18:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a1c:	f042 0208 	orr.w	r2, r2, #8
 8005a20:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005a24:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a28:	f002 0208 	and.w	r2, r2, #8
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8005a30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8005a3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a40:	f022 0208 	bic.w	r2, r2, #8
 8005a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005a48:	b002      	add	sp, #8
 8005a4a:	4770      	bx	lr
 8005a4c:	58024400 	.word	0x58024400

08005a50 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005a52:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a54:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005a58:	f042 0210 	orr.w	r2, r2, #16
 8005a5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005a60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005a64:	f002 0210 	and.w	r2, r2, #16
 8005a68:	9201      	str	r2, [sp, #4]
 8005a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005a6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a6e:	f042 0210 	orr.w	r2, r2, #16
 8005a72:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005a74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a76:	f022 0210 	bic.w	r2, r2, #16
 8005a7a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005a7c:	b002      	add	sp, #8
 8005a7e:	4770      	bx	lr
 8005a80:	58024400 	.word	0x58024400

08005a84 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8005a86:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8005a88:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a8c:	f042 0210 	orr.w	r2, r2, #16
 8005a90:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005a94:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a98:	f002 0210 	and.w	r2, r2, #16
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8005aa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005aa4:	f042 0210 	orr.w	r2, r2, #16
 8005aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8005aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ab0:	f022 0210 	bic.w	r2, r2, #16
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005ab8:	b002      	add	sp, #8
 8005aba:	4770      	bx	lr
 8005abc:	58024400 	.word	0x58024400

08005ac0 <DSI_IO_Write>:
  if(Size <= 1U)
 8005ac0:	2b01      	cmp	r3, #1
{
 8005ac2:	b530      	push	{r4, r5, lr}
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	4601      	mov	r1, r0
  if(Size <= 1U)
 8005aca:	d909      	bls.n	8005ae0 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8005acc:	480a      	ldr	r0, [pc, #40]	; (8005af8 <DSI_IO_Write+0x38>)
 8005ace:	e9cd 5200 	strd	r5, r2, [sp]
 8005ad2:	2239      	movs	r2, #57	; 0x39
 8005ad4:	f002 fa90 	bl	8007ff8 <HAL_DSI_LongWrite>
 8005ad8:	b958      	cbnz	r0, 8005af2 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8005ada:	2000      	movs	r0, #0
}
 8005adc:	b003      	add	sp, #12
 8005ade:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005ae0:	5cd0      	ldrb	r0, [r2, r3]
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	2215      	movs	r2, #21
 8005ae6:	9000      	str	r0, [sp, #0]
 8005ae8:	4803      	ldr	r0, [pc, #12]	; (8005af8 <DSI_IO_Write+0x38>)
 8005aea:	f002 fa71 	bl	8007fd0 <HAL_DSI_ShortWrite>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0f3      	beq.n	8005ada <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005af2:	f06f 0007 	mvn.w	r0, #7
 8005af6:	e7f1      	b.n	8005adc <DSI_IO_Write+0x1c>
 8005af8:	24011b00 	.word	0x24011b00

08005afc <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8005afc:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <BSP_LCD_Reset+0x5c>)
 8005afe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005b06:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005b08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8005b0c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8005b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005b12:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005b14:	4c11      	ldr	r4, [pc, #68]	; (8005b5c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005b16:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005b1e:	4620      	mov	r0, r4
 8005b20:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005b26:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b28:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005b2a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005b2e:	f002 fb57 	bl	80081e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005b32:	4629      	mov	r1, r5
 8005b34:	4620      	mov	r0, r4
 8005b36:	2200      	movs	r2, #0
 8005b38:	f002 fc70 	bl	800841c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8005b3c:	2014      	movs	r0, #20
 8005b3e:	f000 fb9d 	bl	800627c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005b42:	4632      	mov	r2, r6
 8005b44:	4629      	mov	r1, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	f002 fc68 	bl	800841c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8005b4c:	200a      	movs	r0, #10
 8005b4e:	f000 fb95 	bl	800627c <HAL_Delay>
}
 8005b52:	b007      	add	sp, #28
 8005b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	58021800 	.word	0x58021800

08005b60 <MX_DSIHOST_DSI_Init>:
{
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005b64:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005b68:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8005b6a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8005b6c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005b70:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005b72:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005b76:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8005b7a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005b7c:	60c6      	str	r6, [r0, #12]
{
 8005b7e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005b80:	4669      	mov	r1, sp
{
 8005b82:	4604      	mov	r4, r0
 8005b84:	4690      	mov	r8, r2
 8005b86:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005b88:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8005b8a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005b8e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005b92:	f001 ff85 	bl	8007aa0 <HAL_DSI_Init>
 8005b96:	b118      	cbz	r0, 8005ba0 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005b98:	4630      	mov	r0, r6
}
 8005b9a:	b01e      	add	sp, #120	; 0x78
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005ba0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <MX_DSIHOST_DSI_Init+0xd0>)
 8005ba6:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005ba8:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005baa:	fb03 2207 	mla	r2, r3, r7, r2
 8005bae:	4b21      	ldr	r3, [pc, #132]	; (8005c34 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005bb0:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005bb2:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005bb4:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005bb8:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005bbc:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005bc0:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005bc4:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005bc6:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005bc8:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005bca:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8005bcc:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005bce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005bd2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005bd6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8005bda:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005bdc:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005bde:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005be2:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005be4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005be8:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8005bea:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8005bee:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005bf2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005bf6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005bfa:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8005bfc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005c00:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005c02:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005c06:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005c0a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005c0e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005c10:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005c14:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005c18:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005c1c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005c20:	f002 f876 	bl	8007d10 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005c24:	3800      	subs	r0, #0
 8005c26:	bf18      	it	ne
 8005c28:	2001      	movne	r0, #1
}
 8005c2a:	b01e      	add	sp, #120	; 0x78
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	0042c1d8 	.word	0x0042c1d8
 8005c34:	4c751ce3 	.word	0x4c751ce3

08005c38 <MX_LTDC_Init>:
{
 8005c38:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8005c3a:	4d0e      	ldr	r5, [pc, #56]	; (8005c74 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005c3c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005c40:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005c42:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005c44:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005c46:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005c48:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005c4a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005c4c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005c4e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005c50:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005c52:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005c54:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005c56:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005c58:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005c5a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8005c5c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8005c5e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005c62:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005c64:	6181      	str	r1, [r0, #24]
}
 8005c66:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005c68:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005c6c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005c70:	f002 bc92 	b.w	8008598 <HAL_LTDC_Init>
 8005c74:	50001000 	.word	0x50001000

08005c78 <MX_LTDC_ConfigLayer>:
{
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8005c7e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005c80:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005c82:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005c84:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005c86:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005c88:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8005c8c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8005c8e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005c90:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005c94:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005c98:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8005c9c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005c9e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005ca0:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005ca2:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005ca4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005ca6:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005ca8:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8005caa:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005cac:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8005cae:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005cb2:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005cb6:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005cb8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005cba:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005cbc:	f002 fd48 	bl	8008750 <HAL_LTDC_ConfigLayer>
}
 8005cc0:	b00f      	add	sp, #60	; 0x3c
 8005cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cc4 <MX_LTDC_ClockConfig>:
{
 8005cc4:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005cc6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005cca:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005ccc:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005cce:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005cd4:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005cd6:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005cd8:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005cda:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005cdc:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005cde:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005ce0:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005ce2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005ce6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005cea:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005cee:	f003 fc11 	bl	8009514 <HAL_RCCEx_PeriphCLKConfig>
}
 8005cf2:	b031      	add	sp, #196	; 0xc4
 8005cf4:	bd30      	pop	{r4, r5, pc}
 8005cf6:	bf00      	nop

08005cf8 <BSP_LCD_InitEx>:
{
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005cfc:	2901      	cmp	r1, #1
{
 8005cfe:	b093      	sub	sp, #76	; 0x4c
 8005d00:	461d      	mov	r5, r3
 8005d02:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d06:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005d08:	f200 80f2 	bhi.w	8005ef0 <BSP_LCD_InitEx+0x1f8>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	bf18      	it	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f040 80ec 	bne.w	8005ef0 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005d18:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005d1a:	2901      	cmp	r1, #1
 8005d1c:	f200 80e8 	bhi.w	8005ef0 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005d20:	2a02      	cmp	r2, #2
 8005d22:	f000 80ab 	beq.w	8005e7c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005d26:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005d28:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005d2a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d2c:	4c72      	ldr	r4, [pc, #456]	; (8005ef8 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005d2e:	2000      	movs	r0, #0
 8005d30:	4f72      	ldr	r7, [pc, #456]	; (8005efc <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005d32:	2600      	movs	r6, #0
 8005d34:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005d36:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005d3a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d3c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005d40:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005d42:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005d46:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005d48:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005d4c:	f7ff fed6 	bl	8005afc <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d50:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005d54:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005d56:	a90c      	add	r1, sp, #48	; 0x30
 8005d58:	4869      	ldr	r0, [pc, #420]	; (8005f00 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d5a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8005d5e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005d62:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005d66:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d6a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005d6e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005d70:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005d72:	f8cd c014 	str.w	ip, [sp, #20]
 8005d76:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d7a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005d7e:	f002 fa2f 	bl	80081e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005d82:	2201      	movs	r2, #1
 8005d84:	4649      	mov	r1, r9
 8005d86:	485e      	ldr	r0, [pc, #376]	; (8005f00 <BSP_LCD_InitEx+0x208>)
 8005d88:	f002 fb48 	bl	800841c <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8005d8c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005d90:	a90c      	add	r1, sp, #48	; 0x30
 8005d92:	485b      	ldr	r0, [pc, #364]	; (8005f00 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005d94:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005d98:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005f30 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8005d9c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005da0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005da4:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005da6:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005daa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005dae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005db2:	9406      	str	r4, [sp, #24]
 8005db4:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005db6:	f002 fa13 	bl	80081e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	4850      	ldr	r0, [pc, #320]	; (8005f00 <BSP_LCD_InitEx+0x208>)
 8005dc0:	f002 fb2c 	bl	800841c <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	210f      	movs	r1, #15
 8005dc8:	2058      	movs	r0, #88	; 0x58
 8005dca:	f001 f85f 	bl	8006e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005dce:	2058      	movs	r0, #88	; 0x58
 8005dd0:	f001 f896 	bl	8006f00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	210f      	movs	r1, #15
 8005dd8:	205a      	movs	r0, #90	; 0x5a
 8005dda:	f001 f857 	bl	8006e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005dde:	205a      	movs	r0, #90	; 0x5a
 8005de0:	f001 f88e 	bl	8006f00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005de4:	4632      	mov	r2, r6
 8005de6:	210f      	movs	r1, #15
 8005de8:	207b      	movs	r0, #123	; 0x7b
 8005dea:	f001 f84f 	bl	8006e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005dee:	207b      	movs	r0, #123	; 0x7b
 8005df0:	f001 f886 	bl	8006f00 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005df4:	4c43      	ldr	r4, [pc, #268]	; (8005f04 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005df6:	4844      	ldr	r0, [pc, #272]	; (8005f08 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005df8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005dfc:	4943      	ldr	r1, [pc, #268]	; (8005f0c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005dfe:	4e44      	ldr	r6, [pc, #272]	; (8005f10 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005e00:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005e02:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005e04:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005e08:	f7ff fe04 	bl	8005a14 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e10:	9b02      	ldr	r3, [sp, #8]
 8005e12:	4282      	cmp	r2, r0
 8005e14:	d03a      	beq.n	8005e8c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005e16:	680a      	ldr	r2, [r1, #0]
 8005e18:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005e1c:	d031      	beq.n	8005e82 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005e1e:	4642      	mov	r2, r8
 8005e20:	4629      	mov	r1, r5
 8005e22:	483a      	ldr	r0, [pc, #232]	; (8005f0c <BSP_LCD_InitEx+0x214>)
 8005e24:	f7ff fe9c 	bl	8005b60 <MX_DSIHOST_DSI_Init>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d15c      	bne.n	8005ee6 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005e2c:	4835      	ldr	r0, [pc, #212]	; (8005f04 <BSP_LCD_InitEx+0x20c>)
 8005e2e:	f7ff ff49 	bl	8005cc4 <MX_LTDC_ClockConfig>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d157      	bne.n	8005ee6 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005e36:	4642      	mov	r2, r8
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4832      	ldr	r0, [pc, #200]	; (8005f04 <BSP_LCD_InitEx+0x20c>)
 8005e3c:	f7ff fefc 	bl	8005c38 <MX_LTDC_Init>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d150      	bne.n	8005ee6 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005e44:	f000 f8b2 	bl	8005fac <BSP_SDRAM_Init>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d14c      	bne.n	8005ee6 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005e4c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005e4e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e52:	4601      	mov	r1, r0
      config.X0          = 0;
 8005e54:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e56:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005e58:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8005e5c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e60:	4828      	ldr	r0, [pc, #160]	; (8005f04 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005e62:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005e66:	f7ff ff07 	bl	8005c78 <MX_LTDC_ConfigLayer>
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	b190      	cbz	r0, 8005e94 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005e6e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005e72:	2301      	movs	r3, #1
 8005e74:	61bb      	str	r3, [r7, #24]
}
 8005e76:	b013      	add	sp, #76	; 0x4c
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8005e7c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	e754      	b.n	8005d2c <BSP_LCD_InitEx+0x34>
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	f7ff fdfe 	bl	8005a84 <DSI_MspInit.part.0>
 8005e88:	9b02      	ldr	r3, [sp, #8]
 8005e8a:	e7c8      	b.n	8005e1e <BSP_LCD_InitEx+0x126>
 8005e8c:	f7ff fde0 	bl	8005a50 <DMA2D_MspInit.part.0>
 8005e90:	9b02      	ldr	r3, [sp, #8]
 8005e92:	e7c0      	b.n	8005e16 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005e94:	481d      	ldr	r0, [pc, #116]	; (8005f0c <BSP_LCD_InitEx+0x214>)
 8005e96:	f002 f873 	bl	8007f80 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	481b      	ldr	r0, [pc, #108]	; (8005f0c <BSP_LCD_InitEx+0x214>)
 8005e9e:	f002 f85b 	bl	8007f58 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005ea4:	4d1c      	ldr	r5, [pc, #112]	; (8005f18 <BSP_LCD_InitEx+0x220>)
 8005ea6:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8005eaa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005eac:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005eb0:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005eb4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005eb8:	f7ff fb18 	bl	80054ec <OTM8009A_RegisterBusIO>
 8005ebc:	b980      	cbnz	r0, 8005ee0 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005ebe:	4c19      	ldr	r4, [pc, #100]	; (8005f24 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005ec4:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005ec6:	f7ff fafd 	bl	80054c4 <OTM8009A_ReadID>
 8005eca:	b948      	cbnz	r0, 8005ee0 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <BSP_LCD_InitEx+0x230>)
 8005ece:	4d17      	ldr	r5, [pc, #92]	; (8005f2c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	9a03      	ldr	r2, [sp, #12]
 8005ed4:	9901      	ldr	r1, [sp, #4]
 8005ed6:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005ed8:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005eda:	47a0      	blx	r4
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d0c8      	beq.n	8005e72 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ee0:	f06f 0006 	mvn.w	r0, #6
 8005ee4:	e7c5      	b.n	8005e72 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ee6:	f06f 0003 	mvn.w	r0, #3
}
 8005eea:	b013      	add	sp, #76	; 0x4c
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005ef0:	f06f 0001 	mvn.w	r0, #1
 8005ef4:	e7bf      	b.n	8005e76 <BSP_LCD_InitEx+0x17e>
 8005ef6:	bf00      	nop
 8005ef8:	58024400 	.word	0x58024400
 8005efc:	24011ae4 	.word	0x24011ae4
 8005f00:	58022400 	.word	0x58022400
 8005f04:	24011a3c 	.word	0x24011a3c
 8005f08:	52001000 	.word	0x52001000
 8005f0c:	24011b00 	.word	0x24011b00
 8005f10:	50001000 	.word	0x50001000
 8005f14:	08005551 	.word	0x08005551
 8005f18:	24001538 	.word	0x24001538
 8005f1c:	08005ac1 	.word	0x08005ac1
 8005f20:	080056e1 	.word	0x080056e1
 8005f24:	24001530 	.word	0x24001530
 8005f28:	2400101c 	.word	0x2400101c
 8005f2c:	24001534 	.word	0x24001534
 8005f30:	24011b1c 	.word	0x24011b1c

08005f34 <BSP_LCD_Init>:
{
 8005f34:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005f36:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005f3a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005f3c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005f40:	2201      	movs	r2, #1
 8005f42:	9400      	str	r4, [sp, #0]
 8005f44:	f7ff fed8 	bl	8005cf8 <BSP_LCD_InitEx>
}
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005f4e:	4915      	ldr	r1, [pc, #84]	; (8005fa4 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005f50:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005f52:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005f58:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8005f5c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005f60:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005f64:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005f66:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005f68:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005f6a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005f6c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005f6e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005f70:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005f72:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005f74:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005f76:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005f78:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005f7a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005f7c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8005f7e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005f80:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005f82:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005f84:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005f86:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005f88:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005f8c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005f90:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005f92:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005f96:	f004 fc3b 	bl	800a810 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8005f9a:	1b40      	subs	r0, r0, r5
 8005f9c:	bf18      	it	ne
 8005f9e:	2001      	movne	r0, #1
 8005fa0:	b009      	add	sp, #36	; 0x24
 8005fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa4:	52004140 	.word	0x52004140
 8005fa8:	24011b84 	.word	0x24011b84

08005fac <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 80e1 	bne.w	8006174 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fb2:	4b73      	ldr	r3, [pc, #460]	; (8006180 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005fb4:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005fc4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fc6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fca:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005fcc:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005fce:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd4:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005fd6:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005fda:	9201      	str	r2, [sp, #4]
 8005fdc:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005fde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005fe8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fec:	400a      	ands	r2, r1
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ff2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ffe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006002:	f002 0208 	and.w	r2, r2, #8
 8006006:	9203      	str	r2, [sp, #12]
 8006008:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800600a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800600e:	f042 0210 	orr.w	r2, r2, #16
 8006012:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006016:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800601a:	f002 0210 	and.w	r2, r2, #16
 800601e:	9204      	str	r2, [sp, #16]
 8006020:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006022:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006026:	f042 0220 	orr.w	r2, r2, #32
 800602a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800602e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006032:	f002 0220 	and.w	r2, r2, #32
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800603a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006046:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800604a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800604e:	9206      	str	r2, [sp, #24]
 8006050:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800605a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800605e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006062:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006066:	9207      	str	r2, [sp, #28]
 8006068:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800606a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800606e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006072:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006076:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800607a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800607e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006084:	483f      	ldr	r0, [pc, #252]	; (8006184 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006086:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006088:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800608a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800608c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800608e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006090:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006092:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006094:	f002 f8a4 	bl	80081e0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006098:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800609c:	a909      	add	r1, sp, #36	; 0x24
 800609e:	483a      	ldr	r0, [pc, #232]	; (8006188 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80060a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80060a2:	f002 f89d 	bl	80081e0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80060a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80060aa:	a909      	add	r1, sp, #36	; 0x24
 80060ac:	4837      	ldr	r0, [pc, #220]	; (800618c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80060ae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80060b0:	f002 f896 	bl	80081e0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80060b4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80060b8:	a909      	add	r1, sp, #36	; 0x24
 80060ba:	4835      	ldr	r0, [pc, #212]	; (8006190 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80060be:	f002 f88f 	bl	80081e0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80060c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80060c6:	a909      	add	r1, sp, #36	; 0x24
 80060c8:	4832      	ldr	r0, [pc, #200]	; (8006194 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80060cc:	f002 f888 	bl	80081e0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80060d0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80060d4:	a909      	add	r1, sp, #36	; 0x24
 80060d6:	4830      	ldr	r0, [pc, #192]	; (8006198 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80060d8:	4c30      	ldr	r4, [pc, #192]	; (800619c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80060dc:	f002 f880 	bl	80081e0 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80060e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80060e4:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80060e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80060ec:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80060ee:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80060f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80060f4:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80060f6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80060f8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80060fc:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80060fe:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8006100:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006102:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006104:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006106:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006108:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800610c:	4e25      	ldr	r6, [pc, #148]	; (80061a4 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800610e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006110:	6334      	str	r4, [r6, #48]	; 0x30
 8006112:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006114:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800611c:	f002 fbc2 	bl	80088a4 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8006120:	4620      	mov	r0, r4
 8006122:	f002 fb45 	bl	80087b0 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006126:	462a      	mov	r2, r5
 8006128:	210f      	movs	r1, #15
 800612a:	207a      	movs	r0, #122	; 0x7a
 800612c:	f000 feae 	bl	8006e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006130:	207a      	movs	r0, #122	; 0x7a
 8006132:	f000 fee5 	bl	8006f00 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006136:	4630      	mov	r0, r6
 8006138:	f7ff ff08 	bl	8005f4c <MX_SDRAM_Init>
 800613c:	4603      	mov	r3, r0
 800613e:	b9e0      	cbnz	r0, 800617a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006140:	4919      	ldr	r1, [pc, #100]	; (80061a8 <BSP_SDRAM_Init+0x1fc>)
 8006142:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800614a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800614e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006150:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006152:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006154:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006156:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006158:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800615a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800615e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006160:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006162:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006164:	f7fe fc58 	bl	8004a18 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006168:	2800      	cmp	r0, #0
 800616a:	bf18      	it	ne
 800616c:	f06f 0004 	mvnne.w	r0, #4
}
 8006170:	b00f      	add	sp, #60	; 0x3c
 8006172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006174:	f06f 0001 	mvn.w	r0, #1
}
 8006178:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800617a:	f04f 30ff 	mov.w	r0, #4294967295
 800617e:	e7f7      	b.n	8006170 <BSP_SDRAM_Init+0x1c4>
 8006180:	58024400 	.word	0x58024400
 8006184:	58020c00 	.word	0x58020c00
 8006188:	58021000 	.word	0x58021000
 800618c:	58021400 	.word	0x58021400
 8006190:	58021800 	.word	0x58021800
 8006194:	58021c00 	.word	0x58021c00
 8006198:	58022000 	.word	0x58022000
 800619c:	24001558 	.word	0x24001558
 80061a0:	52000040 	.word	0x52000040
 80061a4:	24011b84 	.word	0x24011b84
 80061a8:	240015c4 	.word	0x240015c4

080061ac <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <HAL_InitTick+0x40>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	b90b      	cbnz	r3, 80061b6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80061b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80061b4:	4770      	bx	lr
{
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80061ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061be:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <HAL_InitTick+0x44>)
 80061c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c4:	6810      	ldr	r0, [r2, #0]
 80061c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80061ca:	f000 fea7 	bl	8006f1c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061ce:	2c0f      	cmp	r4, #15
 80061d0:	d800      	bhi.n	80061d4 <HAL_InitTick+0x28>
 80061d2:	b108      	cbz	r0, 80061d8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80061d4:	2001      	movs	r0, #1
}
 80061d6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d8:	2200      	movs	r2, #0
 80061da:	4621      	mov	r1, r4
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	f000 fe54 	bl	8006e8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <HAL_InitTick+0x48>)
 80061e6:	2000      	movs	r0, #0
 80061e8:	601c      	str	r4, [r3, #0]
}
 80061ea:	bd10      	pop	{r4, pc}
 80061ec:	24001068 	.word	0x24001068
 80061f0:	24000000 	.word	0x24000000
 80061f4:	2400106c 	.word	0x2400106c

080061f8 <HAL_Init>:
{
 80061f8:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061fa:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061fc:	4c12      	ldr	r4, [pc, #72]	; (8006248 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061fe:	f000 fe31 	bl	8006e64 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006202:	4d12      	ldr	r5, [pc, #72]	; (800624c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006204:	f002 fea2 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_Init+0x58>)
 800620a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800620c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800620e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006210:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006212:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006216:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006218:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800621a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800621c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8006220:	4c0c      	ldr	r4, [pc, #48]	; (8006254 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006222:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006226:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800622c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800622e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006230:	f7ff ffbc 	bl	80061ac <HAL_InitTick>
 8006234:	b110      	cbz	r0, 800623c <HAL_Init+0x44>
    return HAL_ERROR;
 8006236:	2401      	movs	r4, #1
}
 8006238:	4620      	mov	r0, r4
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	4604      	mov	r4, r0
  HAL_MspInit();
 800623e:	f7fe fae5 	bl	800480c <HAL_MspInit>
}
 8006242:	4620      	mov	r0, r4
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	0800abe4 	.word	0x0800abe4
 800624c:	24000004 	.word	0x24000004
 8006250:	58024400 	.word	0x58024400
 8006254:	24000000 	.word	0x24000000

08006258 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006258:	4a03      	ldr	r2, [pc, #12]	; (8006268 <HAL_IncTick+0x10>)
 800625a:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_IncTick+0x14>)
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	440b      	add	r3, r1
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	24011bb8 	.word	0x24011bb8
 800626c:	24001068 	.word	0x24001068

08006270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006270:	4b01      	ldr	r3, [pc, #4]	; (8006278 <HAL_GetTick+0x8>)
 8006272:	6818      	ldr	r0, [r3, #0]
}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	24011bb8 	.word	0x24011bb8

0800627c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7ff fff6 	bl	8006270 <HAL_GetTick>
 8006284:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006286:	1c63      	adds	r3, r4, #1
 8006288:	d002      	beq.n	8006290 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <HAL_Delay+0x20>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006290:	f7ff ffee 	bl	8006270 <HAL_GetTick>
 8006294:	1b43      	subs	r3, r0, r5
 8006296:	42a3      	cmp	r3, r4
 8006298:	d3fa      	bcc.n	8006290 <HAL_Delay+0x14>
  {
  }
}
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	24001068 	.word	0x24001068

080062a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80062a0:	4b01      	ldr	r3, [pc, #4]	; (80062a8 <HAL_GetREVID+0x8>)
 80062a2:	6818      	ldr	r0, [r3, #0]
}
 80062a4:	0c00      	lsrs	r0, r0, #16
 80062a6:	4770      	bx	lr
 80062a8:	5c001000 	.word	0x5c001000

080062ac <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80062ac:	4a03      	ldr	r2, [pc, #12]	; (80062bc <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80062ae:	6853      	ldr	r3, [r2, #4]
 80062b0:	ea23 0000 	bic.w	r0, r3, r0
 80062b4:	4301      	orrs	r1, r0
 80062b6:	6051      	str	r1, [r2, #4]
}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	58000400 	.word	0x58000400

080062c0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80062c0:	4a02      	ldr	r2, [pc, #8]	; (80062cc <HAL_EnableCompensationCell+0xc>)
 80062c2:	6a13      	ldr	r3, [r2, #32]
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	6213      	str	r3, [r2, #32]
}
 80062ca:	4770      	bx	lr
 80062cc:	58000400 	.word	0x58000400

080062d0 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062d0:	4a40      	ldr	r2, [pc, #256]	; (80063d4 <HAL_ADC_PollForConversion+0x104>)
 80062d2:	6803      	ldr	r3, [r0, #0]
 80062d4:	4293      	cmp	r3, r2
{
 80062d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062da:	4606      	mov	r6, r0
 80062dc:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062de:	d044      	beq.n	800636a <HAL_ADC_PollForConversion+0x9a>
 80062e0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d040      	beq.n	800636a <HAL_ADC_PollForConversion+0x9a>
 80062e8:	4a3b      	ldr	r2, [pc, #236]	; (80063d8 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80062ea:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062ec:	6897      	ldr	r7, [r2, #8]
 80062ee:	2c08      	cmp	r4, #8
 80062f0:	f007 071f 	and.w	r7, r7, #31
 80062f4:	d00a      	beq.n	800630c <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062f6:	2f09      	cmp	r7, #9
 80062f8:	d84d      	bhi.n	8006396 <HAL_ADC_PollForConversion+0xc6>
 80062fa:	f240 2121 	movw	r1, #545	; 0x221
 80062fe:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006300:	07c9      	lsls	r1, r1, #31
 8006302:	d548      	bpl.n	8006396 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	07da      	lsls	r2, r3, #31
 8006308:	d449      	bmi.n	800639e <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800630a:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800630c:	f7ff ffb0 	bl	8006270 <HAL_GetTick>
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006314:	e001      	b.n	800631a <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	1c6b      	adds	r3, r5, #1
 8006318:	d129      	bne.n	800636e <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	4223      	tst	r3, r4
 800631e:	d0fa      	beq.n	8006316 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006320:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006326:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006328:	68d3      	ldr	r3, [r2, #12]
 800632a:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800632e:	d10f      	bne.n	8006350 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006330:	7d73      	ldrb	r3, [r6, #21]
 8006332:	b96b      	cbnz	r3, 8006350 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	0718      	lsls	r0, r3, #28
 8006338:	d50a      	bpl.n	8006350 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800633a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800633c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006340:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006342:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006344:	04d9      	lsls	r1, r3, #19
 8006346:	d403      	bmi.n	8006350 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006348:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006350:	4b22      	ldr	r3, [pc, #136]	; (80063dc <HAL_ADC_PollForConversion+0x10c>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d02e      	beq.n	80063b4 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006356:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006358:	2c08      	cmp	r4, #8
 800635a:	d027      	beq.n	80063ac <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800635c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8006360:	d134      	bne.n	80063cc <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006362:	230c      	movs	r3, #12
 8006364:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800636a:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_ADC_PollForConversion+0x110>)
 800636c:	e7bd      	b.n	80062ea <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800636e:	f7ff ff7f 	bl	8006270 <HAL_GetTick>
 8006372:	eba0 0008 	sub.w	r0, r0, r8
 8006376:	6832      	ldr	r2, [r6, #0]
 8006378:	42a8      	cmp	r0, r5
 800637a:	d801      	bhi.n	8006380 <HAL_ADC_PollForConversion+0xb0>
 800637c:	2d00      	cmp	r5, #0
 800637e:	d1cc      	bne.n	800631a <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	4023      	ands	r3, r4
 8006384:	d1c9      	bne.n	800631a <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006386:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006388:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800638a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800638e:	f042 0204 	orr.w	r2, r2, #4
 8006392:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006394:	e7e7      	b.n	8006366 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006396:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006398:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800639c:	d0b5      	beq.n	800630a <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800639e:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 80063a0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a2:	f043 0320 	orr.w	r3, r3, #32
 80063a6:	6573      	str	r3, [r6, #84]	; 0x54
}
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80063ac:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80063ae:	6014      	str	r4, [r2, #0]
}
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063b4:	2f09      	cmp	r7, #9
 80063b6:	d902      	bls.n	80063be <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_ADC_PollForConversion+0x104>)
 80063ba:	68d8      	ldr	r0, [r3, #12]
 80063bc:	e7cc      	b.n	8006358 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063be:	f240 2321 	movw	r3, #545	; 0x221
 80063c2:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80063c6:	07fb      	lsls	r3, r7, #31
 80063c8:	d4c5      	bmi.n	8006356 <HAL_ADC_PollForConversion+0x86>
 80063ca:	e7f5      	b.n	80063b8 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 80063cc:	2000      	movs	r0, #0
}
 80063ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d2:	bf00      	nop
 80063d4:	40022000 	.word	0x40022000
 80063d8:	58026300 	.word	0x58026300
 80063dc:	40022100 	.word	0x40022100
 80063e0:	40022300 	.word	0x40022300

080063e4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80063e4:	6803      	ldr	r3, [r0, #0]
 80063e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80063ee:	2200      	movs	r2, #0
{
 80063f0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80063f2:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063f4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80063f8:	2a01      	cmp	r2, #1
 80063fa:	f000 813a 	beq.w	8006672 <HAL_ADC_ConfigChannel+0x286>
 80063fe:	4603      	mov	r3, r0
 8006400:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006402:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006404:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006408:	6894      	ldr	r4, [r2, #8]
 800640a:	0766      	lsls	r6, r4, #29
 800640c:	f100 8099 	bmi.w	8006542 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006410:	680c      	ldr	r4, [r1, #0]
 8006412:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8006416:	2d00      	cmp	r5, #0
 8006418:	f040 809e 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x16c>
 800641c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006420:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006424:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8006426:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006428:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800642a:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 800642c:	4034      	ands	r4, r6
 800642e:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006430:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8006434:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8006438:	40a6      	lsls	r6, r4
 800643a:	61d0      	str	r0, [r2, #28]
 800643c:	fa0c f404 	lsl.w	r4, ip, r4
 8006440:	5978      	ldr	r0, [r7, r5]
 8006442:	ea20 0006 	bic.w	r0, r0, r6
 8006446:	4320      	orrs	r0, r4
 8006448:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800644a:	6890      	ldr	r0, [r2, #8]
 800644c:	0745      	lsls	r5, r0, #29
 800644e:	f100 8081 	bmi.w	8006554 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006452:	6895      	ldr	r5, [r2, #8]
 8006454:	f015 0508 	ands.w	r5, r5, #8
 8006458:	d157      	bne.n	800650a <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800645a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800645c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006460:	2007      	movs	r0, #7
 8006462:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006464:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006468:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800646c:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8006470:	fa00 fe04 	lsl.w	lr, r0, r4
 8006474:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006478:	4fc3      	ldr	r7, [pc, #780]	; (8006788 <HAL_ADC_ConfigChannel+0x39c>)
 800647a:	f85c 0006 	ldr.w	r0, [ip, r6]
 800647e:	ea20 000e 	bic.w	r0, r0, lr
 8006482:	4320      	orrs	r0, r4
 8006484:	f84c 0006 	str.w	r0, [ip, r6]
 8006488:	6838      	ldr	r0, [r7, #0]
 800648a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800648e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006492:	f000 8098 	beq.w	80065c6 <HAL_ADC_ConfigChannel+0x1da>
 8006496:	68d0      	ldr	r0, [r2, #12]
 8006498:	68d6      	ldr	r6, [r2, #12]
 800649a:	f010 0f10 	tst.w	r0, #16
 800649e:	6948      	ldr	r0, [r1, #20]
 80064a0:	f040 8107 	bne.w	80066b2 <HAL_ADC_ConfigChannel+0x2c6>
 80064a4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80064a8:	0076      	lsls	r6, r6, #1
 80064aa:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80064ae:	690f      	ldr	r7, [r1, #16]
 80064b0:	2f04      	cmp	r7, #4
 80064b2:	f000 80e1 	beq.w	8006678 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064b6:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80064ba:	6808      	ldr	r0, [r1, #0]
 80064bc:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80064c0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80064c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80064c8:	ea40 000c 	orr.w	r0, r0, ip
 80064cc:	4330      	orrs	r0, r6
 80064ce:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064d2:	7e4f      	ldrb	r7, [r1, #25]
 80064d4:	690e      	ldr	r6, [r1, #16]
 80064d6:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80064d8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80064dc:	bf0c      	ite	eq
 80064de:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80064e2:	2700      	movne	r7, #0
 80064e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80064e8:	4338      	orrs	r0, r7
 80064ea:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064ee:	7e0c      	ldrb	r4, [r1, #24]
 80064f0:	6908      	ldr	r0, [r1, #16]
 80064f2:	2c01      	cmp	r4, #1
 80064f4:	d104      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x114>
 80064f6:	f000 001f 	and.w	r0, r0, #31
 80064fa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80064fe:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006500:	6910      	ldr	r0, [r2, #16]
 8006502:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8006506:	4305      	orrs	r5, r0
 8006508:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800650a:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800650c:	07c4      	lsls	r4, r0, #31
 800650e:	d416      	bmi.n	800653e <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006510:	68ce      	ldr	r6, [r1, #12]
 8006512:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006514:	f006 0718 	and.w	r7, r6, #24
 8006518:	4c9c      	ldr	r4, [pc, #624]	; (800678c <HAL_ADC_ConfigChannel+0x3a0>)
 800651a:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800651e:	40fc      	lsrs	r4, r7
 8006520:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006524:	f8df c288 	ldr.w	ip, [pc, #648]	; 80067b0 <HAL_ADC_ConfigChannel+0x3c4>
 8006528:	4004      	ands	r4, r0
 800652a:	ea25 0507 	bic.w	r5, r5, r7
 800652e:	4566      	cmp	r6, ip
 8006530:	ea44 0405 	orr.w	r4, r4, r5
 8006534:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8006538:	d04d      	beq.n	80065d6 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800653a:	2800      	cmp	r0, #0
 800653c:	db15      	blt.n	800656a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800653e:	2000      	movs	r0, #0
 8006540:	e003      	b.n	800654a <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006544:	f042 0220 	orr.w	r2, r2, #32
 8006548:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006550:	b003      	add	sp, #12
 8006552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006554:	6890      	ldr	r0, [r2, #8]
 8006556:	e7d8      	b.n	800650a <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006558:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800655c:	b115      	cbz	r5, 8006564 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800655e:	fab5 f585 	clz	r5, r5
 8006562:	40a8      	lsls	r0, r5
 8006564:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006568:	e75c      	b.n	8006424 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800656a:	4989      	ldr	r1, [pc, #548]	; (8006790 <HAL_ADC_ConfigChannel+0x3a4>)
 800656c:	428a      	cmp	r2, r1
 800656e:	f000 80c6 	beq.w	80066fe <HAL_ADC_ConfigChannel+0x312>
 8006572:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006576:	428a      	cmp	r2, r1
 8006578:	f000 80c1 	beq.w	80066fe <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800657c:	4e85      	ldr	r6, [pc, #532]	; (8006794 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800657e:	4d86      	ldr	r5, [pc, #536]	; (8006798 <HAL_ADC_ConfigChannel+0x3ac>)
 8006580:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006582:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006584:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006588:	43e4      	mvns	r4, r4
 800658a:	f004 0401 	and.w	r4, r4, #1
 800658e:	2c00      	cmp	r4, #0
 8006590:	f000 80c3 	beq.w	800671a <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006594:	4c81      	ldr	r4, [pc, #516]	; (800679c <HAL_ADC_ConfigChannel+0x3b0>)
 8006596:	42a0      	cmp	r0, r4
 8006598:	f000 810c 	beq.w	80067b4 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800659c:	4c80      	ldr	r4, [pc, #512]	; (80067a0 <HAL_ADC_ConfigChannel+0x3b4>)
 800659e:	42a0      	cmp	r0, r4
 80065a0:	f000 812b 	beq.w	80067fa <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065a4:	4c7f      	ldr	r4, [pc, #508]	; (80067a4 <HAL_ADC_ConfigChannel+0x3b8>)
 80065a6:	42a0      	cmp	r0, r4
 80065a8:	d1c9      	bne.n	800653e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80065aa:	0249      	lsls	r1, r1, #9
 80065ac:	d4c7      	bmi.n	800653e <HAL_ADC_ConfigChannel+0x152>
 80065ae:	4979      	ldr	r1, [pc, #484]	; (8006794 <HAL_ADC_ConfigChannel+0x3a8>)
 80065b0:	428a      	cmp	r2, r1
 80065b2:	d1c4      	bne.n	800653e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80065b4:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065b6:	2000      	movs	r0, #0
 80065b8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80065bc:	4332      	orrs	r2, r6
 80065be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80065c2:	60aa      	str	r2, [r5, #8]
}
 80065c4:	e7c1      	b.n	800654a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065c6:	68d6      	ldr	r6, [r2, #12]
 80065c8:	6948      	ldr	r0, [r1, #20]
 80065ca:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80065ce:	0076      	lsls	r6, r6, #1
 80065d0:	fa00 f606 	lsl.w	r6, r0, r6
 80065d4:	e76b      	b.n	80064ae <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	d071      	beq.n	80066be <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80065de:	2c00      	cmp	r4, #0
 80065e0:	f000 80af 	beq.w	8006742 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80065e4:	fab4 f484 	clz	r4, r4
 80065e8:	3401      	adds	r4, #1
 80065ea:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ee:	2c09      	cmp	r4, #9
 80065f0:	f240 80a7 	bls.w	8006742 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80065f8:	2d00      	cmp	r5, #0
 80065fa:	f000 8112 	beq.w	8006822 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80065fe:	fab5 f585 	clz	r5, r5
 8006602:	3501      	adds	r5, #1
 8006604:	06ad      	lsls	r5, r5, #26
 8006606:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800660e:	2c00      	cmp	r4, #0
 8006610:	f000 8105 	beq.w	800681e <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8006614:	2601      	movs	r6, #1
 8006616:	fab4 f484 	clz	r4, r4
 800661a:	4434      	add	r4, r6
 800661c:	f004 041f 	and.w	r4, r4, #31
 8006620:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006624:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800662a:	2800      	cmp	r0, #0
 800662c:	f000 80f5 	beq.w	800681a <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8006630:	fab0 f480 	clz	r4, r0
 8006634:	3401      	adds	r4, #1
 8006636:	f004 041f 	and.w	r4, r4, #31
 800663a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800663e:	f1a4 001e 	sub.w	r0, r4, #30
 8006642:	0500      	lsls	r0, r0, #20
 8006644:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006648:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 800664a:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800664e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8006652:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006654:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8006656:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800665a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800665e:	fa0c fc00 	lsl.w	ip, ip, r0
 8006662:	4086      	lsls	r6, r0
 8006664:	597c      	ldr	r4, [r7, r5]
 8006666:	ea24 000c 	bic.w	r0, r4, ip
 800666a:	4330      	orrs	r0, r6
 800666c:	5178      	str	r0, [r7, r5]
 800666e:	6808      	ldr	r0, [r1, #0]
}
 8006670:	e763      	b.n	800653a <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8006672:	2002      	movs	r0, #2
}
 8006674:	b003      	add	sp, #12
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006678:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800667a:	680d      	ldr	r5, [r1, #0]
 800667c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006680:	06ac      	lsls	r4, r5, #26
 8006682:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8006686:	d030      	beq.n	80066ea <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006688:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800668a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800668e:	4284      	cmp	r4, r0
 8006690:	d026      	beq.n	80066e0 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006692:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006694:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006698:	4284      	cmp	r4, r0
 800669a:	d02b      	beq.n	80066f4 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800669c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800669e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80066a2:	4284      	cmp	r4, r0
 80066a4:	f47f af31 	bne.w	800650a <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80066a8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80066aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066ae:	66d0      	str	r0, [r2, #108]	; 0x6c
 80066b0:	e72b      	b.n	800650a <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80066b2:	0876      	lsrs	r6, r6, #1
 80066b4:	f006 0608 	and.w	r6, r6, #8
 80066b8:	fa00 f606 	lsl.w	r6, r0, r6
 80066bc:	e6f7      	b.n	80064ae <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066be:	0e80      	lsrs	r0, r0, #26
 80066c0:	1c44      	adds	r4, r0, #1
 80066c2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066c6:	2e09      	cmp	r6, #9
 80066c8:	d82d      	bhi.n	8006726 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066ca:	06a5      	lsls	r5, r4, #26
 80066cc:	2401      	movs	r4, #1
 80066ce:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80066d2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80066d6:	fa04 f606 	lsl.w	r6, r4, r6
 80066da:	0500      	lsls	r0, r0, #20
 80066dc:	4335      	orrs	r5, r6
 80066de:	e7b3      	b.n	8006648 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80066e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80066e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066e6:	6650      	str	r0, [r2, #100]	; 0x64
 80066e8:	e7d3      	b.n	8006692 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80066ea:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80066ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066f0:	6610      	str	r0, [r2, #96]	; 0x60
 80066f2:	e7c9      	b.n	8006688 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80066f4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80066f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066fa:	6690      	str	r0, [r2, #104]	; 0x68
 80066fc:	e7ce      	b.n	800669c <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066fe:	492a      	ldr	r1, [pc, #168]	; (80067a8 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006700:	4e23      	ldr	r6, [pc, #140]	; (8006790 <HAL_ADC_ConfigChannel+0x3a4>)
 8006702:	4c2a      	ldr	r4, [pc, #168]	; (80067ac <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006704:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006706:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006708:	68b7      	ldr	r7, [r6, #8]
 800670a:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800670c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006710:	433c      	orrs	r4, r7
 8006712:	43e4      	mvns	r4, r4
 8006714:	f004 0401 	and.w	r4, r4, #1
 8006718:	e739      	b.n	800658e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800671c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671e:	f042 0220 	orr.w	r2, r2, #32
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006724:	e711      	b.n	800654a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006726:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800672a:	2701      	movs	r7, #1
 800672c:	06a5      	lsls	r5, r4, #26
 800672e:	381e      	subs	r0, #30
 8006730:	fa07 f606 	lsl.w	r6, r7, r6
 8006734:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006738:	0500      	lsls	r0, r0, #20
 800673a:	4335      	orrs	r5, r6
 800673c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006740:	e782      	b.n	8006648 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006746:	2c00      	cmp	r4, #0
 8006748:	d073      	beq.n	8006832 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800674a:	fab4 f484 	clz	r4, r4
 800674e:	3401      	adds	r4, #1
 8006750:	06a4      	lsls	r4, r4, #26
 8006752:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 800675a:	2e00      	cmp	r6, #0
 800675c:	d067      	beq.n	800682e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800675e:	2501      	movs	r5, #1
 8006760:	fab6 f686 	clz	r6, r6
 8006764:	442e      	add	r6, r5
 8006766:	f006 061f 	and.w	r6, r6, #31
 800676a:	40b5      	lsls	r5, r6
 800676c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006772:	2800      	cmp	r0, #0
 8006774:	d058      	beq.n	8006828 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006776:	fab0 f480 	clz	r4, r0
 800677a:	3401      	adds	r4, #1
 800677c:	f004 041f 	and.w	r4, r4, #31
 8006780:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006784:	0520      	lsls	r0, r4, #20
 8006786:	e75f      	b.n	8006648 <HAL_ADC_ConfigChannel+0x25c>
 8006788:	5c001000 	.word	0x5c001000
 800678c:	000fffff 	.word	0x000fffff
 8006790:	40022000 	.word	0x40022000
 8006794:	58026000 	.word	0x58026000
 8006798:	58026300 	.word	0x58026300
 800679c:	cb840000 	.word	0xcb840000
 80067a0:	c7520000 	.word	0xc7520000
 80067a4:	cfb80000 	.word	0xcfb80000
 80067a8:	40022300 	.word	0x40022300
 80067ac:	40022100 	.word	0x40022100
 80067b0:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067b4:	0208      	lsls	r0, r1, #8
 80067b6:	f53f aec2 	bmi.w	800653e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ba:	491f      	ldr	r1, [pc, #124]	; (8006838 <HAL_ADC_ConfigChannel+0x44c>)
 80067bc:	428a      	cmp	r2, r1
 80067be:	f47f aebe 	bne.w	800653e <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067c2:	4a1e      	ldr	r2, [pc, #120]	; (800683c <HAL_ADC_ConfigChannel+0x450>)
 80067c4:	481e      	ldr	r0, [pc, #120]	; (8006840 <HAL_ADC_ConfigChannel+0x454>)
 80067c6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80067c8:	68a9      	ldr	r1, [r5, #8]
 80067ca:	0992      	lsrs	r2, r2, #6
 80067cc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80067d0:	fba0 0202 	umull	r0, r2, r0, r2
 80067d4:	4331      	orrs	r1, r6
 80067d6:	0992      	lsrs	r2, r2, #6
 80067d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80067dc:	3201      	adds	r2, #1
 80067de:	60a9      	str	r1, [r5, #8]
 80067e0:	0052      	lsls	r2, r2, #1
 80067e2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80067e4:	9a01      	ldr	r2, [sp, #4]
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	f43f aea9 	beq.w	800653e <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80067ec:	9a01      	ldr	r2, [sp, #4]
 80067ee:	3a01      	subs	r2, #1
 80067f0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80067f2:	9a01      	ldr	r2, [sp, #4]
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1f9      	bne.n	80067ec <HAL_ADC_ConfigChannel+0x400>
 80067f8:	e6a1      	b.n	800653e <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80067fa:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80067fe:	f47f ae9e 	bne.w	800653e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006802:	490d      	ldr	r1, [pc, #52]	; (8006838 <HAL_ADC_ConfigChannel+0x44c>)
 8006804:	428a      	cmp	r2, r1
 8006806:	f47f ae9a 	bne.w	800653e <HAL_ADC_ConfigChannel+0x152>
 800680a:	68aa      	ldr	r2, [r5, #8]
 800680c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006810:	4332      	orrs	r2, r6
 8006812:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006816:	60aa      	str	r2, [r5, #8]
}
 8006818:	e697      	b.n	800654a <HAL_ADC_ConfigChannel+0x15e>
 800681a:	480a      	ldr	r0, [pc, #40]	; (8006844 <HAL_ADC_ConfigChannel+0x458>)
 800681c:	e714      	b.n	8006648 <HAL_ADC_ConfigChannel+0x25c>
 800681e:	2402      	movs	r4, #2
 8006820:	e700      	b.n	8006624 <HAL_ADC_ConfigChannel+0x238>
 8006822:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006826:	e6f0      	b.n	800660a <HAL_ADC_ConfigChannel+0x21e>
 8006828:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800682c:	e70c      	b.n	8006648 <HAL_ADC_ConfigChannel+0x25c>
 800682e:	2502      	movs	r5, #2
 8006830:	e79c      	b.n	800676c <HAL_ADC_ConfigChannel+0x380>
 8006832:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006836:	e78e      	b.n	8006756 <HAL_ADC_ConfigChannel+0x36a>
 8006838:	58026000 	.word	0x58026000
 800683c:	24000000 	.word	0x24000000
 8006840:	053e2d63 	.word	0x053e2d63
 8006844:	fe500000 	.word	0xfe500000

08006848 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006848:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	07d1      	lsls	r1, r2, #31
 800684e:	d501      	bpl.n	8006854 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006850:	2000      	movs	r0, #0
}
 8006852:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	4a21      	ldr	r2, [pc, #132]	; (80068dc <ADC_Enable+0x94>)
 8006858:	4211      	tst	r1, r2
{
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800685e:	d008      	beq.n	8006872 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006860:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8006862:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006864:	f043 0310 	orr.w	r3, r3, #16
 8006868:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800686c:	4303      	orrs	r3, r0
 800686e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006870:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <ADC_Enable+0x98>)
 8006876:	400a      	ands	r2, r1
 8006878:	f042 0201 	orr.w	r2, r2, #1
 800687c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800687e:	f7ff fcf7 	bl	8006270 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006886:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006888:	4293      	cmp	r3, r2
 800688a:	d01f      	beq.n	80068cc <ADC_Enable+0x84>
 800688c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006890:	4293      	cmp	r3, r2
 8006892:	d01b      	beq.n	80068cc <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <ADC_Enable+0xa0>)
 8006896:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	07d6      	lsls	r6, r2, #31
 800689c:	d414      	bmi.n	80068c8 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 800689e:	4e10      	ldr	r6, [pc, #64]	; (80068e0 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068a0:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068a2:	07d0      	lsls	r0, r2, #31
 80068a4:	d404      	bmi.n	80068b0 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	4032      	ands	r2, r6
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068b0:	f7ff fcde 	bl	8006270 <HAL_GetTick>
 80068b4:	1b43      	subs	r3, r0, r5
 80068b6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068b8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068ba:	d902      	bls.n	80068c2 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	07d1      	lsls	r1, r2, #31
 80068c0:	d5ce      	bpl.n	8006860 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	07d2      	lsls	r2, r2, #31
 80068c6:	d5eb      	bpl.n	80068a0 <ADC_Enable+0x58>
  return HAL_OK;
 80068c8:	2000      	movs	r0, #0
}
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80068cc:	4a07      	ldr	r2, [pc, #28]	; (80068ec <ADC_Enable+0xa4>)
 80068ce:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068d0:	06d2      	lsls	r2, r2, #27
 80068d2:	d0e1      	beq.n	8006898 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d1de      	bne.n	8006898 <ADC_Enable+0x50>
 80068da:	e7f5      	b.n	80068c8 <ADC_Enable+0x80>
 80068dc:	8000003f 	.word	0x8000003f
 80068e0:	7fffffc0 	.word	0x7fffffc0
 80068e4:	40022000 	.word	0x40022000
 80068e8:	58026300 	.word	0x58026300
 80068ec:	40022300 	.word	0x40022300
 80068f0:	40022100 	.word	0x40022100

080068f4 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068f4:	4a39      	ldr	r2, [pc, #228]	; (80069dc <HAL_ADC_Start+0xe8>)
 80068f6:	6803      	ldr	r3, [r0, #0]
 80068f8:	4293      	cmp	r3, r2
{
 80068fa:	b570      	push	{r4, r5, r6, lr}
 80068fc:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068fe:	d045      	beq.n	800698c <HAL_ADC_Start+0x98>
 8006900:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006904:	4293      	cmp	r3, r2
 8006906:	d041      	beq.n	800698c <HAL_ADC_Start+0x98>
 8006908:	4a35      	ldr	r2, [pc, #212]	; (80069e0 <HAL_ADC_Start+0xec>)
 800690a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800690c:	689d      	ldr	r5, [r3, #8]
 800690e:	f015 0504 	ands.w	r5, r5, #4
 8006912:	d141      	bne.n	8006998 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8006914:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006918:	2b01      	cmp	r3, #1
 800691a:	d03d      	beq.n	8006998 <HAL_ADC_Start+0xa4>
 800691c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800691e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006920:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006924:	f7ff ff90 	bl	8006848 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006928:	2800      	cmp	r0, #0
 800692a:	d137      	bne.n	800699c <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 800692c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800692e:	f006 061f 	and.w	r6, r6, #31
 8006932:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006934:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8006936:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006938:	492b      	ldr	r1, [pc, #172]	; (80069e8 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 800693a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800693e:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 8006940:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006942:	d044      	beq.n	80069ce <HAL_ADC_Start+0xda>
 8006944:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006946:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006948:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800694c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800694e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006954:	d03f      	beq.n	80069d6 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006956:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006958:	f022 0206 	bic.w	r2, r2, #6
 800695c:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800695e:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8006960:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006962:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006964:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006966:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800696a:	d020      	beq.n	80069ae <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800696c:	2e09      	cmp	r6, #9
 800696e:	d918      	bls.n	80069a2 <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006970:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006976:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006978:	68cb      	ldr	r3, [r1, #12]
 800697a:	019b      	lsls	r3, r3, #6
 800697c:	d505      	bpl.n	800698a <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800697e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006988:	6563      	str	r3, [r4, #84]	; 0x54
}
 800698a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800698c:	4a17      	ldr	r2, [pc, #92]	; (80069ec <HAL_ADC_Start+0xf8>)
 800698e:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006990:	689d      	ldr	r5, [r3, #8]
 8006992:	f015 0504 	ands.w	r5, r5, #4
 8006996:	d0bd      	beq.n	8006914 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8006998:	2002      	movs	r0, #2
}
 800699a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800699c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069a2:	f240 2221 	movw	r2, #545	; 0x221
 80069a6:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80069aa:	07f5      	lsls	r5, r6, #31
 80069ac:	d5e0      	bpl.n	8006970 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	0192      	lsls	r2, r2, #6
 80069b2:	d505      	bpl.n	80069c0 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80069b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80069b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80069ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069be:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80069c0:	6899      	ldr	r1, [r3, #8]
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <HAL_ADC_Start+0xfc>)
 80069c4:	400a      	ands	r2, r1
 80069c6:	f042 0204 	orr.w	r2, r2, #4
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069ce:	4903      	ldr	r1, [pc, #12]	; (80069dc <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	d0b8      	beq.n	8006946 <HAL_ADC_Start+0x52>
 80069d4:	e7bb      	b.n	800694e <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 80069d6:	65a2      	str	r2, [r4, #88]	; 0x58
 80069d8:	e7c1      	b.n	800695e <HAL_ADC_Start+0x6a>
 80069da:	bf00      	nop
 80069dc:	40022000 	.word	0x40022000
 80069e0:	58026300 	.word	0x58026300
 80069e4:	fffff0fe 	.word	0xfffff0fe
 80069e8:	40022100 	.word	0x40022100
 80069ec:	40022300 	.word	0x40022300
 80069f0:	7fffffc0 	.word	0x7fffffc0

080069f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80069f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069f6:	4a5a      	ldr	r2, [pc, #360]	; (8006b60 <ADC_ConfigureBoostMode+0x16c>)
{
 80069f8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069fa:	6803      	ldr	r3, [r0, #0]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d029      	beq.n	8006a54 <ADC_ConfigureBoostMode+0x60>
 8006a00:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d025      	beq.n	8006a54 <ADC_ConfigureBoostMode+0x60>
 8006a08:	4b56      	ldr	r3, [pc, #344]	; (8006b64 <ADC_ConfigureBoostMode+0x170>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b333      	cbz	r3, 8006a66 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a18:	f002 fc62 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006a1c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006a1e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a24:	f000 808b 	beq.w	8006b3e <ADC_ConfigureBoostMode+0x14a>
 8006a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a2c:	d06f      	beq.n	8006b0e <ADC_ConfigureBoostMode+0x11a>
 8006a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a32:	f000 8084 	beq.w	8006b3e <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a36:	f7ff fc33 	bl	80062a0 <HAL_GetREVID>
 8006a3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	d84e      	bhi.n	8006ae0 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8006a42:	4b49      	ldr	r3, [pc, #292]	; (8006b68 <ADC_ConfigureBoostMode+0x174>)
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d92d      	bls.n	8006aa4 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	6893      	ldr	r3, [r2, #8]
 8006a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a50:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a54:	4b45      	ldr	r3, [pc, #276]	; (8006b6c <ADC_ConfigureBoostMode+0x178>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1d8      	bne.n	8006a18 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a6a:	f003 fd4d 	bl	800a508 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006a6e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a70:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006a72:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006a76:	d06c      	beq.n	8006b52 <ADC_ConfigureBoostMode+0x15e>
 8006a78:	d808      	bhi.n	8006a8c <ADC_ConfigureBoostMode+0x98>
 8006a7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006a7e:	d050      	beq.n	8006b22 <ADC_ConfigureBoostMode+0x12e>
 8006a80:	d916      	bls.n	8006ab0 <ADC_ConfigureBoostMode+0xbc>
 8006a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a86:	d1d6      	bne.n	8006a36 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8006a88:	0945      	lsrs	r5, r0, #5
        break;
 8006a8a:	e7d4      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006a8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006a90:	d045      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x12a>
 8006a92:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006a96:	d1ce      	bne.n	8006a36 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a98:	f7ff fc02 	bl	80062a0 <HAL_GetREVID>
 8006a9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006aa0:	4298      	cmp	r0, r3
 8006aa2:	d840      	bhi.n	8006b26 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	6893      	ldr	r3, [r2, #8]
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aac:	6093      	str	r3, [r2, #8]
}
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8006ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab4:	d006      	beq.n	8006ac4 <ADC_ConfigureBoostMode+0xd0>
 8006ab6:	d90a      	bls.n	8006ace <ADC_ConfigureBoostMode+0xda>
 8006ab8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006abc:	d002      	beq.n	8006ac4 <ADC_ConfigureBoostMode+0xd0>
 8006abe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ac2:	d1b8      	bne.n	8006a36 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006ac4:	0c9b      	lsrs	r3, r3, #18
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006acc:	e7b3      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006ace:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ad2:	d0f7      	beq.n	8006ac4 <ADC_ConfigureBoostMode+0xd0>
 8006ad4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ad8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006adc:	d0f2      	beq.n	8006ac4 <ADC_ConfigureBoostMode+0xd0>
 8006ade:	e7aa      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006ae0:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <ADC_ConfigureBoostMode+0x17c>)
 8006ae2:	429d      	cmp	r5, r3
 8006ae4:	d805      	bhi.n	8006af2 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	6893      	ldr	r3, [r2, #8]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aee:	6093      	str	r3, [r2, #8]
}
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <ADC_ConfigureBoostMode+0x180>)
 8006af4:	429d      	cmp	r5, r3
 8006af6:	d91a      	bls.n	8006b2e <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006af8:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006afa:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006afc:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006afe:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006b00:	d829      	bhi.n	8006b56 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b0a:	6093      	str	r3, [r2, #8]
}
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8006b0e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b10:	f7ff fbc6 	bl	80062a0 <HAL_GetREVID>
 8006b14:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b18:	4298      	cmp	r0, r3
 8006b1a:	d8e1      	bhi.n	8006ae0 <ADC_ConfigureBoostMode+0xec>
 8006b1c:	e791      	b.n	8006a42 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8006b1e:	09c5      	lsrs	r5, r0, #7
        break;
 8006b20:	e789      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8006b22:	0905      	lsrs	r5, r0, #4
        break;
 8006b24:	e787      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006b26:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <ADC_ConfigureBoostMode+0x17c>)
 8006b28:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006b2c:	d2db      	bcs.n	8006ae6 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	6893      	ldr	r3, [r2, #8]
 8006b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3a:	6093      	str	r3, [r2, #8]
}
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b44:	f7ff fbac 	bl	80062a0 <HAL_GetREVID>
 8006b48:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	d8c7      	bhi.n	8006ae0 <ADC_ConfigureBoostMode+0xec>
 8006b50:	e777      	b.n	8006a42 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8006b52:	0985      	lsrs	r5, r0, #6
        break;
 8006b54:	e76f      	b.n	8006a36 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b5a:	6093      	str	r3, [r2, #8]
}
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	40022000 	.word	0x40022000
 8006b64:	58026300 	.word	0x58026300
 8006b68:	01312d00 	.word	0x01312d00
 8006b6c:	40022300 	.word	0x40022300
 8006b70:	00bebc21 	.word	0x00bebc21
 8006b74:	017d7841 	.word	0x017d7841
 8006b78:	02faf081 	.word	0x02faf081

08006b7c <HAL_ADC_Init>:
{
 8006b7c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006b7e:	2300      	movs	r3, #0
{
 8006b80:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006b82:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f000 80d0 	beq.w	8006d2a <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006b8a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	f000 80ba 	beq.w	8006d08 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006b94:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b96:	6893      	ldr	r3, [r2, #8]
 8006b98:	009d      	lsls	r5, r3, #2
 8006b9a:	d503      	bpl.n	8006ba4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b9c:	6891      	ldr	r1, [r2, #8]
 8006b9e:	4b71      	ldr	r3, [pc, #452]	; (8006d64 <HAL_ADC_Init+0x1e8>)
 8006ba0:	400b      	ands	r3, r1
 8006ba2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ba4:	6893      	ldr	r3, [r2, #8]
 8006ba6:	00d8      	lsls	r0, r3, #3
 8006ba8:	d416      	bmi.n	8006bd8 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006baa:	4b6f      	ldr	r3, [pc, #444]	; (8006d68 <HAL_ADC_Init+0x1ec>)
 8006bac:	4d6f      	ldr	r5, [pc, #444]	; (8006d6c <HAL_ADC_Init+0x1f0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006bb0:	6890      	ldr	r0, [r2, #8]
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	496e      	ldr	r1, [pc, #440]	; (8006d70 <HAL_ADC_Init+0x1f4>)
 8006bb6:	fba5 5303 	umull	r5, r3, r5, r3
 8006bba:	4001      	ands	r1, r0
 8006bbc:	099b      	lsrs	r3, r3, #6
 8006bbe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	6091      	str	r1, [r2, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	b12b      	cbz	r3, 8006bd8 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f9      	bne.n	8006bcc <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006bd8:	6893      	ldr	r3, [r2, #8]
 8006bda:	00d9      	lsls	r1, r3, #3
 8006bdc:	d424      	bmi.n	8006c28 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006be0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006be2:	f043 0310 	orr.w	r3, r3, #16
 8006be6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006be8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bea:	432b      	orrs	r3, r5
 8006bec:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bee:	6893      	ldr	r3, [r2, #8]
 8006bf0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bf6:	d11d      	bne.n	8006c34 <HAL_ADC_Init+0xb8>
 8006bf8:	06db      	lsls	r3, r3, #27
 8006bfa:	d41b      	bmi.n	8006c34 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006bfe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c08:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c0a:	07de      	lsls	r6, r3, #31
 8006c0c:	d428      	bmi.n	8006c60 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c0e:	4b59      	ldr	r3, [pc, #356]	; (8006d74 <HAL_ADC_Init+0x1f8>)
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d017      	beq.n	8006c44 <HAL_ADC_Init+0xc8>
 8006c14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d013      	beq.n	8006c44 <HAL_ADC_Init+0xc8>
 8006c1c:	4b56      	ldr	r3, [pc, #344]	; (8006d78 <HAL_ADC_Init+0x1fc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	07d9      	lsls	r1, r3, #31
 8006c22:	d41d      	bmi.n	8006c60 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c24:	4a55      	ldr	r2, [pc, #340]	; (8006d7c <HAL_ADC_Init+0x200>)
 8006c26:	e015      	b.n	8006c54 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c28:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c32:	d0e1      	beq.n	8006bf8 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006c36:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c38:	f043 0310 	orr.w	r3, r3, #16
}
 8006c3c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c40:	b002      	add	sp, #8
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c44:	4a4b      	ldr	r2, [pc, #300]	; (8006d74 <HAL_ADC_Init+0x1f8>)
 8006c46:	4b4e      	ldr	r3, [pc, #312]	; (8006d80 <HAL_ADC_Init+0x204>)
 8006c48:	6892      	ldr	r2, [r2, #8]
 8006c4a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	07d8      	lsls	r0, r3, #31
 8006c50:	d406      	bmi.n	8006c60 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c52:	4a4c      	ldr	r2, [pc, #304]	; (8006d84 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c54:	6893      	ldr	r3, [r2, #8]
 8006c56:	6861      	ldr	r1, [r4, #4]
 8006c58:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006c60:	f7ff fb1e 	bl	80062a0 <HAL_GetREVID>
 8006c64:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c68:	68a1      	ldr	r1, [r4, #8]
 8006c6a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006c6c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006c6e:	d851      	bhi.n	8006d14 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c70:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006c72:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006c76:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006c7a:	4302      	orrs	r2, r0
 8006c7c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d103      	bne.n	8006c8a <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006c82:	6a23      	ldr	r3, [r4, #32]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8c:	b123      	cbz	r3, 8006c98 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006c8e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006c92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c94:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006c96:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	493b      	ldr	r1, [pc, #236]	; (8006d88 <HAL_ADC_Init+0x20c>)
 8006c9c:	68d8      	ldr	r0, [r3, #12]
 8006c9e:	4001      	ands	r1, r0
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006caa:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cac:	d11c      	bne.n	8006ce8 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006cae:	0712      	lsls	r2, r2, #28
 8006cb0:	d41a      	bmi.n	8006ce8 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	4a35      	ldr	r2, [pc, #212]	; (8006d8c <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006cb6:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006cb8:	400a      	ands	r2, r1
 8006cba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cbc:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006cc4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006cc8:	2a01      	cmp	r2, #1
 8006cca:	d03a      	beq.n	8006d42 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006cd4:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006cd6:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006ce2:	f7ff fe87 	bl	80069f4 <ADC_ConfigureBoostMode>
 8006ce6:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ce8:	68e2      	ldr	r2, [r4, #12]
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	d021      	beq.n	8006d32 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf0:	f022 020f 	bic.w	r2, r2, #15
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006cf8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006d04:	b002      	add	sp, #8
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006d08:	f7fd fd92 	bl	8004830 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006d0c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006d0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006d12:	e73f      	b.n	8006b94 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006d14:	2910      	cmp	r1, #16
 8006d16:	d1ab      	bne.n	8006c70 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006d18:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d1a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006d1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d1e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006d22:	430a      	orrs	r2, r1
 8006d24:	f042 021c 	orr.w	r2, r2, #28
 8006d28:	e7a9      	b.n	8006c7e <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006d2a:	2501      	movs	r5, #1
}
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d34:	69a2      	ldr	r2, [r4, #24]
 8006d36:	f021 010f 	bic.w	r1, r1, #15
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d40:	e7d9      	b.n	8006cf6 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006d42:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006d46:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006d48:	3901      	subs	r1, #1
 8006d4a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d4c:	4332      	orrs	r2, r6
 8006d4e:	691e      	ldr	r6, [r3, #16]
 8006d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d54:	490e      	ldr	r1, [pc, #56]	; (8006d90 <HAL_ADC_Init+0x214>)
 8006d56:	4302      	orrs	r2, r0
 8006d58:	4031      	ands	r1, r6
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	611a      	str	r2, [r3, #16]
 8006d62:	e7b7      	b.n	8006cd4 <HAL_ADC_Init+0x158>
 8006d64:	5fffffc0 	.word	0x5fffffc0
 8006d68:	24000000 	.word	0x24000000
 8006d6c:	053e2d63 	.word	0x053e2d63
 8006d70:	6fffffc0 	.word	0x6fffffc0
 8006d74:	40022000 	.word	0x40022000
 8006d78:	58026000 	.word	0x58026000
 8006d7c:	58026300 	.word	0x58026300
 8006d80:	40022100 	.word	0x40022100
 8006d84:	40022300 	.word	0x40022300
 8006d88:	fff0c003 	.word	0xfff0c003
 8006d8c:	ffffbffc 	.word	0xffffbffc
 8006d90:	fc00f81e 	.word	0xfc00f81e

08006d94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006d94:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d96:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006d9a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d9c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006d9e:	2a01      	cmp	r2, #1
 8006da0:	d04d      	beq.n	8006e3e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006da2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006da4:	4c2b      	ldr	r4, [pc, #172]	; (8006e54 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006da6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006da8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006daa:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006dac:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006dae:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006db0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006db4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006db6:	d008      	beq.n	8006dca <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dbe:	f041 0120 	orr.w	r1, r1, #32
 8006dc2:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006dc4:	b01a      	add	sp, #104	; 0x68
 8006dc6:	bcf0      	pop	{r4, r5, r6, r7}
 8006dc8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dca:	4c23      	ldr	r4, [pc, #140]	; (8006e58 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006dcc:	68a2      	ldr	r2, [r4, #8]
 8006dce:	0752      	lsls	r2, r2, #29
 8006dd0:	d50b      	bpl.n	8006dea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006dd2:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006dd6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dd8:	f042 0220 	orr.w	r2, r2, #32
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006de4:	b01a      	add	sp, #104	; 0x68
 8006de6:	bcf0      	pop	{r4, r5, r6, r7}
 8006de8:	4770      	bx	lr
 8006dea:	68a8      	ldr	r0, [r5, #8]
 8006dec:	f010 0004 	ands.w	r0, r0, #4
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006df2:	b1c6      	cbz	r6, 8006e26 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006df4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006e60 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006df8:	684f      	ldr	r7, [r1, #4]
 8006dfa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006dfe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e02:	433a      	orrs	r2, r7
 8006e04:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e08:	68ad      	ldr	r5, [r5, #8]
 8006e0a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e0c:	432a      	orrs	r2, r5
 8006e0e:	07d4      	lsls	r4, r2, #31
 8006e10:	d413      	bmi.n	8006e3a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006e12:	688a      	ldr	r2, [r1, #8]
 8006e14:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006e18:	4910      	ldr	r1, [pc, #64]	; (8006e5c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006e1a:	4316      	orrs	r6, r2
 8006e1c:	4021      	ands	r1, r4
 8006e1e:	430e      	orrs	r6, r1
 8006e20:	f8cc 6008 	str.w	r6, [ip, #8]
 8006e24:	e7db      	b.n	8006dde <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006e26:	490e      	ldr	r1, [pc, #56]	; (8006e60 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006e28:	688a      	ldr	r2, [r1, #8]
 8006e2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e2e:	608a      	str	r2, [r1, #8]
 8006e30:	68a8      	ldr	r0, [r5, #8]
 8006e32:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e34:	4302      	orrs	r2, r0
 8006e36:	07d0      	lsls	r0, r2, #31
 8006e38:	d505      	bpl.n	8006e46 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e7cf      	b.n	8006dde <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006e3e:	2002      	movs	r0, #2
}
 8006e40:	b01a      	add	sp, #104	; 0x68
 8006e42:	bcf0      	pop	{r4, r5, r6, r7}
 8006e44:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006e46:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e48:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006e4a:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006e4c:	4022      	ands	r2, r4
 8006e4e:	608a      	str	r2, [r1, #8]
 8006e50:	e7c5      	b.n	8006dde <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006e52:	bf00      	nop
 8006e54:	40022000 	.word	0x40022000
 8006e58:	40022100 	.word	0x40022100
 8006e5c:	fffff0e0 	.word	0xfffff0e0
 8006e60:	40022300 	.word	0x40022300

08006e64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e64:	4907      	ldr	r1, [pc, #28]	; (8006e84 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e66:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e6a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e6c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e70:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e72:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006e76:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e78:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e7c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006e7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006e80:	60cb      	str	r3, [r1, #12]
 8006e82:	4770      	bx	lr
 8006e84:	e000ed00 	.word	0xe000ed00
 8006e88:	05fa0000 	.word	0x05fa0000

08006e8c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <HAL_NVIC_SetPriority+0x68>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e94:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e96:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e9a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e9c:	2d04      	cmp	r5, #4
 8006e9e:	bf28      	it	cs
 8006ea0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ea2:	2c06      	cmp	r4, #6
 8006ea4:	d919      	bls.n	8006eda <HAL_NVIC_SetPriority+0x4e>
 8006ea6:	3b03      	subs	r3, #3
 8006ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8006eac:	409c      	lsls	r4, r3
 8006eae:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb2:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb8:	fa04 f405 	lsl.w	r4, r4, r5
 8006ebc:	ea21 0104 	bic.w	r1, r1, r4
 8006ec0:	fa01 f103 	lsl.w	r1, r1, r3
 8006ec4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006ec8:	db0a      	blt.n	8006ee0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eca:	0109      	lsls	r1, r1, #4
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_NVIC_SetPriority+0x6c>)
 8006ece:	b2c9      	uxtb	r1, r1
 8006ed0:	4403      	add	r3, r0
 8006ed2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ed6:	bc30      	pop	{r4, r5}
 8006ed8:	4770      	bx	lr
 8006eda:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006edc:	4613      	mov	r3, r2
 8006ede:	e7e8      	b.n	8006eb2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee0:	f000 000f 	and.w	r0, r0, #15
 8006ee4:	0109      	lsls	r1, r1, #4
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_NVIC_SetPriority+0x70>)
 8006ee8:	b2c9      	uxtb	r1, r1
 8006eea:	4403      	add	r3, r0
 8006eec:	7619      	strb	r1, [r3, #24]
 8006eee:	bc30      	pop	{r4, r5}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	e000ed00 	.word	0xe000ed00
 8006ef8:	e000e100 	.word	0xe000e100
 8006efc:	e000ecfc 	.word	0xe000ecfc

08006f00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006f00:	2800      	cmp	r0, #0
 8006f02:	db07      	blt.n	8006f14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f04:	2301      	movs	r3, #1
 8006f06:	f000 011f 	and.w	r1, r0, #31
 8006f0a:	4a03      	ldr	r2, [pc, #12]	; (8006f18 <HAL_NVIC_EnableIRQ+0x18>)
 8006f0c:	0940      	lsrs	r0, r0, #5
 8006f0e:	408b      	lsls	r3, r1
 8006f10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	e000e100 	.word	0xe000e100

08006f1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f1c:	3801      	subs	r0, #1
 8006f1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006f22:	d20d      	bcs.n	8006f40 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f26:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f28:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f2a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f2c:	25f0      	movs	r5, #240	; 0xf0
 8006f2e:	4c06      	ldr	r4, [pc, #24]	; (8006f48 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f30:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f32:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f34:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f3a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006f3c:	bc30      	pop	{r4, r5}
 8006f3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006f40:	2001      	movs	r0, #1
 8006f42:	4770      	bx	lr
 8006f44:	e000e010 	.word	0xe000e010
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006f4c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f50:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f52:	2000      	movs	r0, #0
 8006f54:	4904      	ldr	r1, [pc, #16]	; (8006f68 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8006f5e:	6048      	str	r0, [r1, #4]
}
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	e000ed90 	.word	0xe000ed90

08006f6c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f6c:	4a06      	ldr	r2, [pc, #24]	; (8006f88 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f6e:	f040 0001 	orr.w	r0, r0, #1
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <HAL_MPU_Enable+0x20>)
 8006f74:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f76:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f82:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f86:	4770      	bx	lr
 8006f88:	e000ed00 	.word	0xe000ed00
 8006f8c:	e000ed90 	.word	0xe000ed90

08006f90 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006f90:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <HAL_MPU_ConfigRegion+0x4c>)
 8006f92:	7843      	ldrb	r3, [r0, #1]
 8006f94:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006f96:	7801      	ldrb	r1, [r0, #0]
 8006f98:	b1e9      	cbz	r1, 8006fd6 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006f9a:	6843      	ldr	r3, [r0, #4]
{
 8006f9c:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8006f9e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fa0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fa2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fa4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fa6:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fa8:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006faa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fae:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	7a01      	ldrb	r1, [r0, #8]
 8006fb4:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fb8:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006fba:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006fbe:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006fc0:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006fc4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006fc8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006fcc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006fd0:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fd2:	6113      	str	r3, [r2, #16]
}
 8006fd4:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8006fd6:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006fd8:	6111      	str	r1, [r2, #16]
 8006fda:	4770      	bx	lr
 8006fdc:	e000ed90 	.word	0xe000ed90

08006fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr_dma  = regs_dma->ISR;
  tmpisr_bdma = regs_bdma->ISR;

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fe4:	4a9f      	ldr	r2, [pc, #636]	; (8007264 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 8006fe6:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fe8:	4e9f      	ldr	r6, [pc, #636]	; (8007268 <HAL_DMA_IRQHandler+0x288>)
{
 8006fea:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fec:	6803      	ldr	r3, [r0, #0]
{
 8006fee:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ff0:	499e      	ldr	r1, [pc, #632]	; (800726c <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	bf18      	it	ne
 8006ff8:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 8006ffa:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ffc:	bf08      	it	eq
 8006ffe:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8007000:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 8007002:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007004:	bf18      	it	ne
 8007006:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8007008:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800700a:	d04a      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xc2>
 800700c:	3230      	adds	r2, #48	; 0x30
 800700e:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800727c <HAL_DMA_IRQHandler+0x29c>
 8007012:	4897      	ldr	r0, [pc, #604]	; (8007270 <HAL_DMA_IRQHandler+0x290>)
 8007014:	4573      	cmp	r3, lr
 8007016:	bf18      	it	ne
 8007018:	4293      	cmpne	r3, r2
 800701a:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800701e:	bf0c      	ite	eq
 8007020:	2201      	moveq	r2, #1
 8007022:	2200      	movne	r2, #0
 8007024:	4283      	cmp	r3, r0
 8007026:	bf08      	it	eq
 8007028:	f042 0201 	orreq.w	r2, r2, #1
 800702c:	3030      	adds	r0, #48	; 0x30
 800702e:	4573      	cmp	r3, lr
 8007030:	bf08      	it	eq
 8007032:	f042 0201 	orreq.w	r2, r2, #1
 8007036:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800703a:	4283      	cmp	r3, r0
 800703c:	bf08      	it	eq
 800703e:	f042 0201 	orreq.w	r2, r2, #1
 8007042:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007046:	4573      	cmp	r3, lr
 8007048:	bf08      	it	eq
 800704a:	f042 0201 	orreq.w	r2, r2, #1
 800704e:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8007052:	4283      	cmp	r3, r0
 8007054:	bf08      	it	eq
 8007056:	f042 0201 	orreq.w	r2, r2, #1
 800705a:	3030      	adds	r0, #48	; 0x30
 800705c:	4573      	cmp	r3, lr
 800705e:	bf08      	it	eq
 8007060:	f042 0201 	orreq.w	r2, r2, #1
 8007064:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007068:	4283      	cmp	r3, r0
 800706a:	bf08      	it	eq
 800706c:	f042 0201 	orreq.w	r2, r2, #1
 8007070:	3030      	adds	r0, #48	; 0x30
 8007072:	4573      	cmp	r3, lr
 8007074:	bf08      	it	eq
 8007076:	f042 0201 	orreq.w	r2, r2, #1
 800707a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800707e:	4283      	cmp	r3, r0
 8007080:	bf08      	it	eq
 8007082:	f042 0201 	orreq.w	r2, r2, #1
 8007086:	3030      	adds	r0, #48	; 0x30
 8007088:	4573      	cmp	r3, lr
 800708a:	bf08      	it	eq
 800708c:	f042 0201 	orreq.w	r2, r2, #1
 8007090:	4283      	cmp	r3, r0
 8007092:	bf08      	it	eq
 8007094:	f042 0201 	orreq.w	r2, r2, #1
 8007098:	b91a      	cbnz	r2, 80070a2 <HAL_DMA_IRQHandler+0xc2>
 800709a:	4a76      	ldr	r2, [pc, #472]	; (8007274 <HAL_DMA_IRQHandler+0x294>)
 800709c:	4293      	cmp	r3, r2
 800709e:	f040 820b 	bne.w	80074b8 <HAL_DMA_IRQHandler+0x4d8>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070a2:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 80070a6:	2208      	movs	r2, #8
 80070a8:	f001 0c1f 	and.w	ip, r1, #31
 80070ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80070b0:	4217      	tst	r7, r2
 80070b2:	f040 818d 	bne.w	80073d0 <HAL_DMA_IRQHandler+0x3f0>
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070b6:	fa27 f20c 	lsr.w	r2, r7, ip
 80070ba:	07d2      	lsls	r2, r2, #31
 80070bc:	d50c      	bpl.n	80070d8 <HAL_DMA_IRQHandler+0xf8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	0610      	lsls	r0, r2, #24
 80070c2:	d509      	bpl.n	80070d8 <HAL_DMA_IRQHandler+0xf8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070c4:	2201      	movs	r2, #1
 80070c6:	fa02 f20c 	lsl.w	r2, r2, ip
 80070ca:	60a2      	str	r2, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070cc:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80070d0:	f042 0202 	orr.w	r2, r2, #2
 80070d4:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070d8:	f04f 0e04 	mov.w	lr, #4
 80070dc:	fa0e f00c 	lsl.w	r0, lr, ip
 80070e0:	4238      	tst	r0, r7
 80070e2:	d05b      	beq.n	800719c <HAL_DMA_IRQHandler+0x1bc>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070e4:	2e00      	cmp	r6, #0
 80070e6:	d14f      	bne.n	8007188 <HAL_DMA_IRQHandler+0x1a8>
 80070e8:	4a63      	ldr	r2, [pc, #396]	; (8007278 <HAL_DMA_IRQHandler+0x298>)
 80070ea:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800727c <HAL_DMA_IRQHandler+0x29c>
 80070ee:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8007270 <HAL_DMA_IRQHandler+0x290>
 80070f2:	454b      	cmp	r3, r9
 80070f4:	bf18      	it	ne
 80070f6:	4293      	cmpne	r3, r2
 80070f8:	f109 0948 	add.w	r9, r9, #72	; 0x48
 80070fc:	bf0c      	ite	eq
 80070fe:	2201      	moveq	r2, #1
 8007100:	2200      	movne	r2, #0
 8007102:	4543      	cmp	r3, r8
 8007104:	bf08      	it	eq
 8007106:	f042 0201 	orreq.w	r2, r2, #1
 800710a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800710e:	454b      	cmp	r3, r9
 8007110:	bf08      	it	eq
 8007112:	f042 0201 	orreq.w	r2, r2, #1
 8007116:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800711a:	4543      	cmp	r3, r8
 800711c:	bf08      	it	eq
 800711e:	f042 0201 	orreq.w	r2, r2, #1
 8007122:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8007126:	454b      	cmp	r3, r9
 8007128:	bf08      	it	eq
 800712a:	f042 0201 	orreq.w	r2, r2, #1
 800712e:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8007132:	4543      	cmp	r3, r8
 8007134:	bf08      	it	eq
 8007136:	f042 0201 	orreq.w	r2, r2, #1
 800713a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800713e:	454b      	cmp	r3, r9
 8007140:	bf08      	it	eq
 8007142:	f042 0201 	orreq.w	r2, r2, #1
 8007146:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800714a:	4543      	cmp	r3, r8
 800714c:	bf08      	it	eq
 800714e:	f042 0201 	orreq.w	r2, r2, #1
 8007152:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007156:	454b      	cmp	r3, r9
 8007158:	bf08      	it	eq
 800715a:	f042 0201 	orreq.w	r2, r2, #1
 800715e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007162:	4543      	cmp	r3, r8
 8007164:	bf08      	it	eq
 8007166:	f042 0201 	orreq.w	r2, r2, #1
 800716a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800716e:	454b      	cmp	r3, r9
 8007170:	bf08      	it	eq
 8007172:	f042 0201 	orreq.w	r2, r2, #1
 8007176:	4543      	cmp	r3, r8
 8007178:	bf08      	it	eq
 800717a:	f042 0201 	orreq.w	r2, r2, #1
 800717e:	b91a      	cbnz	r2, 8007188 <HAL_DMA_IRQHandler+0x1a8>
 8007180:	4a3c      	ldr	r2, [pc, #240]	; (8007274 <HAL_DMA_IRQHandler+0x294>)
 8007182:	4293      	cmp	r3, r2
 8007184:	f040 822f 	bne.w	80075e6 <HAL_DMA_IRQHandler+0x606>
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	0792      	lsls	r2, r2, #30
 800718c:	d506      	bpl.n	800719c <HAL_DMA_IRQHandler+0x1bc>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800718e:	60a0      	str	r0, [r4, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007190:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8007194:	f042 0204 	orr.w	r2, r2, #4
 8007198:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800719c:	2210      	movs	r2, #16
 800719e:	fa02 fc0c 	lsl.w	ip, r2, ip
 80071a2:	ea1c 0f07 	tst.w	ip, r7
 80071a6:	d06f      	beq.n	8007288 <HAL_DMA_IRQHandler+0x2a8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80071a8:	2e00      	cmp	r6, #0
 80071aa:	d146      	bne.n	800723a <HAL_DMA_IRQHandler+0x25a>
 80071ac:	4a32      	ldr	r2, [pc, #200]	; (8007278 <HAL_DMA_IRQHandler+0x298>)
 80071ae:	4833      	ldr	r0, [pc, #204]	; (800727c <HAL_DMA_IRQHandler+0x29c>)
 80071b0:	4e2f      	ldr	r6, [pc, #188]	; (8007270 <HAL_DMA_IRQHandler+0x290>)
 80071b2:	4283      	cmp	r3, r0
 80071b4:	bf18      	it	ne
 80071b6:	4293      	cmpne	r3, r2
 80071b8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80071bc:	bf0c      	ite	eq
 80071be:	2201      	moveq	r2, #1
 80071c0:	2200      	movne	r2, #0
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	bf08      	it	eq
 80071c6:	f042 0201 	orreq.w	r2, r2, #1
 80071ca:	3630      	adds	r6, #48	; 0x30
 80071cc:	4283      	cmp	r3, r0
 80071ce:	bf08      	it	eq
 80071d0:	f042 0201 	orreq.w	r2, r2, #1
 80071d4:	3030      	adds	r0, #48	; 0x30
 80071d6:	42b3      	cmp	r3, r6
 80071d8:	bf08      	it	eq
 80071da:	f042 0201 	orreq.w	r2, r2, #1
 80071de:	f506 765c 	add.w	r6, r6, #880	; 0x370
 80071e2:	4283      	cmp	r3, r0
 80071e4:	bf08      	it	eq
 80071e6:	f042 0201 	orreq.w	r2, r2, #1
 80071ea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80071ee:	42b3      	cmp	r3, r6
 80071f0:	bf08      	it	eq
 80071f2:	f042 0201 	orreq.w	r2, r2, #1
 80071f6:	3630      	adds	r6, #48	; 0x30
 80071f8:	4283      	cmp	r3, r0
 80071fa:	bf08      	it	eq
 80071fc:	f042 0201 	orreq.w	r2, r2, #1
 8007200:	3030      	adds	r0, #48	; 0x30
 8007202:	42b3      	cmp	r3, r6
 8007204:	bf08      	it	eq
 8007206:	f042 0201 	orreq.w	r2, r2, #1
 800720a:	3630      	adds	r6, #48	; 0x30
 800720c:	4283      	cmp	r3, r0
 800720e:	bf08      	it	eq
 8007210:	f042 0201 	orreq.w	r2, r2, #1
 8007214:	3030      	adds	r0, #48	; 0x30
 8007216:	42b3      	cmp	r3, r6
 8007218:	bf08      	it	eq
 800721a:	f042 0201 	orreq.w	r2, r2, #1
 800721e:	3630      	adds	r6, #48	; 0x30
 8007220:	4283      	cmp	r3, r0
 8007222:	bf08      	it	eq
 8007224:	f042 0201 	orreq.w	r2, r2, #1
 8007228:	42b3      	cmp	r3, r6
 800722a:	bf08      	it	eq
 800722c:	f042 0201 	orreq.w	r2, r2, #1
 8007230:	b91a      	cbnz	r2, 800723a <HAL_DMA_IRQHandler+0x25a>
 8007232:	4a10      	ldr	r2, [pc, #64]	; (8007274 <HAL_DMA_IRQHandler+0x294>)
 8007234:	4293      	cmp	r3, r2
 8007236:	f040 81de 	bne.w	80075f6 <HAL_DMA_IRQHandler+0x616>
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8007240:	b312      	cbz	r2, 8007288 <HAL_DMA_IRQHandler+0x2a8>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007242:	f8c4 c008 	str.w	ip, [r4, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	0352      	lsls	r2, r2, #13
 800724a:	f100 818b 	bmi.w	8007564 <HAL_DMA_IRQHandler+0x584>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	05d6      	lsls	r6, r2, #23
 8007252:	d403      	bmi.n	800725c <HAL_DMA_IRQHandler+0x27c>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	f022 0208 	bic.w	r2, r2, #8
 800725a:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800725c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007260:	b193      	cbz	r3, 8007288 <HAL_DMA_IRQHandler+0x2a8>
 8007262:	e00d      	b.n	8007280 <HAL_DMA_IRQHandler+0x2a0>
 8007264:	40020028 	.word	0x40020028
 8007268:	40020010 	.word	0x40020010
 800726c:	24000000 	.word	0x24000000
 8007270:	40020070 	.word	0x40020070
 8007274:	400204b8 	.word	0x400204b8
 8007278:	40020058 	.word	0x40020058
 800727c:	40020040 	.word	0x40020040
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007280:	4650      	mov	r0, sl
 8007282:	4798      	blx	r3
 8007284:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007288:	f001 011f 	and.w	r1, r1, #31
 800728c:	2620      	movs	r6, #32
 800728e:	408e      	lsls	r6, r1
 8007290:	423e      	tst	r6, r7
 8007292:	d06a      	beq.n	800736a <HAL_DMA_IRQHandler+0x38a>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007294:	f8da 2000 	ldr.w	r2, [sl]
 8007298:	4ba7      	ldr	r3, [pc, #668]	; (8007538 <HAL_DMA_IRQHandler+0x558>)
 800729a:	48a8      	ldr	r0, [pc, #672]	; (800753c <HAL_DMA_IRQHandler+0x55c>)
 800729c:	4fa8      	ldr	r7, [pc, #672]	; (8007540 <HAL_DMA_IRQHandler+0x560>)
 800729e:	4282      	cmp	r2, r0
 80072a0:	bf18      	it	ne
 80072a2:	429a      	cmpne	r2, r3
 80072a4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80072a8:	bf0c      	ite	eq
 80072aa:	2301      	moveq	r3, #1
 80072ac:	2300      	movne	r3, #0
 80072ae:	42ba      	cmp	r2, r7
 80072b0:	bf08      	it	eq
 80072b2:	f043 0301 	orreq.w	r3, r3, #1
 80072b6:	3730      	adds	r7, #48	; 0x30
 80072b8:	4282      	cmp	r2, r0
 80072ba:	bf08      	it	eq
 80072bc:	f043 0301 	orreq.w	r3, r3, #1
 80072c0:	3030      	adds	r0, #48	; 0x30
 80072c2:	42ba      	cmp	r2, r7
 80072c4:	bf08      	it	eq
 80072c6:	f043 0301 	orreq.w	r3, r3, #1
 80072ca:	3730      	adds	r7, #48	; 0x30
 80072cc:	4282      	cmp	r2, r0
 80072ce:	bf08      	it	eq
 80072d0:	f043 0301 	orreq.w	r3, r3, #1
 80072d4:	3030      	adds	r0, #48	; 0x30
 80072d6:	42ba      	cmp	r2, r7
 80072d8:	bf08      	it	eq
 80072da:	f043 0301 	orreq.w	r3, r3, #1
 80072de:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80072e2:	4282      	cmp	r2, r0
 80072e4:	bf08      	it	eq
 80072e6:	f043 0301 	orreq.w	r3, r3, #1
 80072ea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80072ee:	42ba      	cmp	r2, r7
 80072f0:	bf08      	it	eq
 80072f2:	f043 0301 	orreq.w	r3, r3, #1
 80072f6:	3730      	adds	r7, #48	; 0x30
 80072f8:	4282      	cmp	r2, r0
 80072fa:	bf08      	it	eq
 80072fc:	f043 0301 	orreq.w	r3, r3, #1
 8007300:	3030      	adds	r0, #48	; 0x30
 8007302:	42ba      	cmp	r2, r7
 8007304:	bf08      	it	eq
 8007306:	f043 0301 	orreq.w	r3, r3, #1
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	4282      	cmp	r2, r0
 800730e:	bf08      	it	eq
 8007310:	f043 0301 	orreq.w	r3, r3, #1
 8007314:	3030      	adds	r0, #48	; 0x30
 8007316:	42ba      	cmp	r2, r7
 8007318:	bf08      	it	eq
 800731a:	f043 0301 	orreq.w	r3, r3, #1
 800731e:	3730      	adds	r7, #48	; 0x30
 8007320:	4282      	cmp	r2, r0
 8007322:	bf08      	it	eq
 8007324:	f043 0301 	orreq.w	r3, r3, #1
 8007328:	42ba      	cmp	r2, r7
 800732a:	bf08      	it	eq
 800732c:	f043 0301 	orreq.w	r3, r3, #1
 8007330:	b91b      	cbnz	r3, 800733a <HAL_DMA_IRQHandler+0x35a>
 8007332:	4b84      	ldr	r3, [pc, #528]	; (8007544 <HAL_DMA_IRQHandler+0x564>)
 8007334:	429a      	cmp	r2, r3
 8007336:	f040 8173 	bne.w	8007620 <HAL_DMA_IRQHandler+0x640>
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007340:	b19b      	cbz	r3, 800736a <HAL_DMA_IRQHandler+0x38a>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007342:	60a6      	str	r6, [r4, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007344:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8007348:	2b04      	cmp	r3, #4
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800734a:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800734c:	f000 8114 	beq.w	8007578 <HAL_DMA_IRQHandler+0x598>
            hdma->XferAbortCallback(hdma);
          }
          return;
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007350:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007354:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007356:	f000 812d 	beq.w	80075b4 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800735a:	031c      	lsls	r4, r3, #12
 800735c:	f140 8138 	bpl.w	80075d0 <HAL_DMA_IRQHandler+0x5f0>

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
          }

          if(hdma->XferCpltCallback != NULL)
 8007360:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8007364:	b10b      	cbz	r3, 800736a <HAL_DMA_IRQHandler+0x38a>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007366:	4650      	mov	r0, sl
 8007368:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800736a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80df 	beq.w	8007532 <HAL_DMA_IRQHandler+0x552>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007374:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8007378:	07d8      	lsls	r0, r3, #31
 800737a:	d51f      	bpl.n	80073bc <HAL_DMA_IRQHandler+0x3dc>
      {
        hdma->State = HAL_DMA_STATE_ABORT;

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800737c:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8007380:	2404      	movs	r4, #4
 8007382:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007386:	6813      	ldr	r3, [r2, #0]
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800738e:	4b6e      	ldr	r3, [pc, #440]	; (8007548 <HAL_DMA_IRQHandler+0x568>)
 8007390:	fba3 3505 	umull	r3, r5, r3, r5
 8007394:	0aad      	lsrs	r5, r5, #10
 8007396:	e002      	b.n	800739e <HAL_DMA_IRQHandler+0x3be>
          if (++count > timeout)
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007398:	6813      	ldr	r3, [r2, #0]
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d504      	bpl.n	80073a8 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	3301      	adds	r3, #1
 80073a2:	42ab      	cmp	r3, r5
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	d9f7      	bls.n	8007398 <HAL_DMA_IRQHandler+0x3b8>

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073a8:	2300      	movs	r3, #0
 80073aa:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	07db      	lsls	r3, r3, #31
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073b2:	bf4c      	ite	mi
 80073b4:	2303      	movmi	r3, #3
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80073b6:	2301      	movpl	r3, #1
 80073b8:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80073bc:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80b6 	beq.w	8007532 <HAL_DMA_IRQHandler+0x552>
      hdma->State = HAL_DMA_STATE_READY;

      if (hdma->XferErrorCallback != NULL)
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073c6:	4650      	mov	r0, sl
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073c8:	b002      	add	sp, #8
 80073ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 80073ce:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	0740      	lsls	r0, r0, #29
 80073d4:	d50a      	bpl.n	80073ec <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	f020 0004 	bic.w	r0, r0, #4
 80073dc:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073de:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073e0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80073e4:	f042 0201 	orr.w	r2, r2, #1
 80073e8:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ec:	fa27 f20c 	lsr.w	r2, r7, ip
 80073f0:	07d2      	lsls	r2, r2, #31
 80073f2:	f57f ae71 	bpl.w	80070d8 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80073f6:	4a55      	ldr	r2, [pc, #340]	; (800754c <HAL_DMA_IRQHandler+0x56c>)
 80073f8:	4851      	ldr	r0, [pc, #324]	; (8007540 <HAL_DMA_IRQHandler+0x560>)
 80073fa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8007560 <HAL_DMA_IRQHandler+0x580>
 80073fe:	4283      	cmp	r3, r0
 8007400:	bf18      	it	ne
 8007402:	4293      	cmpne	r3, r2
 8007404:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007408:	bf0c      	ite	eq
 800740a:	2201      	moveq	r2, #1
 800740c:	2200      	movne	r2, #0
 800740e:	4543      	cmp	r3, r8
 8007410:	bf08      	it	eq
 8007412:	f042 0201 	orreq.w	r2, r2, #1
 8007416:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800741a:	4283      	cmp	r3, r0
 800741c:	bf08      	it	eq
 800741e:	f042 0201 	orreq.w	r2, r2, #1
 8007422:	3030      	adds	r0, #48	; 0x30
 8007424:	4543      	cmp	r3, r8
 8007426:	bf08      	it	eq
 8007428:	f042 0201 	orreq.w	r2, r2, #1
 800742c:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8007430:	4283      	cmp	r3, r0
 8007432:	bf08      	it	eq
 8007434:	f042 0201 	orreq.w	r2, r2, #1
 8007438:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800743c:	4543      	cmp	r3, r8
 800743e:	bf08      	it	eq
 8007440:	f042 0201 	orreq.w	r2, r2, #1
 8007444:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007448:	4283      	cmp	r3, r0
 800744a:	bf08      	it	eq
 800744c:	f042 0201 	orreq.w	r2, r2, #1
 8007450:	3030      	adds	r0, #48	; 0x30
 8007452:	4543      	cmp	r3, r8
 8007454:	bf08      	it	eq
 8007456:	f042 0201 	orreq.w	r2, r2, #1
 800745a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800745e:	4283      	cmp	r3, r0
 8007460:	bf08      	it	eq
 8007462:	f042 0201 	orreq.w	r2, r2, #1
 8007466:	3030      	adds	r0, #48	; 0x30
 8007468:	4543      	cmp	r3, r8
 800746a:	bf08      	it	eq
 800746c:	f042 0201 	orreq.w	r2, r2, #1
 8007470:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007474:	4283      	cmp	r3, r0
 8007476:	bf08      	it	eq
 8007478:	f042 0201 	orreq.w	r2, r2, #1
 800747c:	3030      	adds	r0, #48	; 0x30
 800747e:	4543      	cmp	r3, r8
 8007480:	bf08      	it	eq
 8007482:	f042 0201 	orreq.w	r2, r2, #1
 8007486:	4283      	cmp	r3, r0
 8007488:	bf08      	it	eq
 800748a:	f042 0201 	orreq.w	r2, r2, #1
 800748e:	2a00      	cmp	r2, #0
 8007490:	f47f ae15 	bne.w	80070be <HAL_DMA_IRQHandler+0xde>
 8007494:	2e00      	cmp	r6, #0
 8007496:	f47f ae12 	bne.w	80070be <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800749a:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800749c:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800749e:	fa02 f20c 	lsl.w	r2, r2, ip
 80074a2:	423a      	tst	r2, r7
 80074a4:	f040 809f 	bne.w	80075e6 <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074a8:	2210      	movs	r2, #16
 80074aa:	fa02 fc0c 	lsl.w	ip, r2, ip
 80074ae:	ea17 0f0c 	tst.w	r7, ip
 80074b2:	f43f aee9 	beq.w	8007288 <HAL_DMA_IRQHandler+0x2a8>
 80074b6:	e679      	b.n	80071ac <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80074b8:	4a25      	ldr	r2, [pc, #148]	; (8007550 <HAL_DMA_IRQHandler+0x570>)
 80074ba:	4e26      	ldr	r6, [pc, #152]	; (8007554 <HAL_DMA_IRQHandler+0x574>)
 80074bc:	4d26      	ldr	r5, [pc, #152]	; (8007558 <HAL_DMA_IRQHandler+0x578>)
 80074be:	42b3      	cmp	r3, r6
 80074c0:	bf18      	it	ne
 80074c2:	4293      	cmpne	r3, r2
 80074c4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80074c8:	bf0c      	ite	eq
 80074ca:	2201      	moveq	r2, #1
 80074cc:	2200      	movne	r2, #0
 80074ce:	42ab      	cmp	r3, r5
 80074d0:	bf08      	it	eq
 80074d2:	f042 0201 	orreq.w	r2, r2, #1
 80074d6:	3528      	adds	r5, #40	; 0x28
 80074d8:	42b3      	cmp	r3, r6
 80074da:	bf08      	it	eq
 80074dc:	f042 0201 	orreq.w	r2, r2, #1
 80074e0:	3628      	adds	r6, #40	; 0x28
 80074e2:	42ab      	cmp	r3, r5
 80074e4:	bf08      	it	eq
 80074e6:	f042 0201 	orreq.w	r2, r2, #1
 80074ea:	3528      	adds	r5, #40	; 0x28
 80074ec:	42b3      	cmp	r3, r6
 80074ee:	bf08      	it	eq
 80074f0:	f042 0201 	orreq.w	r2, r2, #1
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	bf08      	it	eq
 80074f8:	f042 0201 	orreq.w	r2, r2, #1
 80074fc:	b912      	cbnz	r2, 8007504 <HAL_DMA_IRQHandler+0x524>
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <HAL_DMA_IRQHandler+0x57c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d116      	bne.n	8007532 <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007504:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8007508:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800750a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800750c:	f005 051f 	and.w	r5, r5, #31
 8007510:	40ae      	lsls	r6, r5
 8007512:	420e      	tst	r6, r1
 8007514:	d073      	beq.n	80075fe <HAL_DMA_IRQHandler+0x61e>
 8007516:	0757      	lsls	r7, r2, #29
 8007518:	d571      	bpl.n	80075fe <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800751a:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800751c:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800751e:	f140 809f 	bpl.w	8007660 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007522:	03d1      	lsls	r1, r2, #15
 8007524:	f100 80a2 	bmi.w	800766c <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007528:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f af4a 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
}
 8007532:	b002      	add	sp, #8
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	400204b8 	.word	0x400204b8
 8007548:	1b4e81b5 	.word	0x1b4e81b5
 800754c:	40020058 	.word	0x40020058
 8007550:	58025408 	.word	0x58025408
 8007554:	5802541c 	.word	0x5802541c
 8007558:	58025430 	.word	0x58025430
 800755c:	58025494 	.word	0x58025494
 8007560:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	031b      	lsls	r3, r3, #12
 8007568:	f57f ae78 	bpl.w	800725c <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800756c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007570:	2b00      	cmp	r3, #0
 8007572:	f47f ae85 	bne.w	8007280 <HAL_DMA_IRQHandler+0x2a0>
 8007576:	e687      	b.n	8007288 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007578:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800757c:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007580:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007582:	6953      	ldr	r3, [r2, #20]
 8007584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007588:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800758a:	b33d      	cbz	r5, 80075dc <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800758c:	6813      	ldr	r3, [r2, #0]
 800758e:	f023 0308 	bic.w	r3, r3, #8
 8007592:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007594:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8007596:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8007598:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800759a:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800759e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075a2:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 80075a4:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80075a8:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f47f af0a 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
 80075b2:	e7be      	b.n	8007532 <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075b4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80075b8:	f47f aed2 	bne.w	8007360 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075bc:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80075be:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075c0:	f021 0110 	bic.w	r1, r1, #16
 80075c4:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 80075c6:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80075ca:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 80075ce:	e6c7      	b.n	8007360 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 80075d0:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f47f aec6 	bne.w	8007366 <HAL_DMA_IRQHandler+0x386>
 80075da:	e6c6      	b.n	800736a <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075dc:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1d3      	bne.n	800758c <HAL_DMA_IRQHandler+0x5ac>
 80075e4:	e7d6      	b.n	8007594 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075e6:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075e8:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ea:	fa02 fc0c 	lsl.w	ip, r2, ip
 80075ee:	ea17 0f0c 	tst.w	r7, ip
 80075f2:	f43f ae49 	beq.w	8007288 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80075fc:	e620      	b.n	8007240 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075fe:	2602      	movs	r6, #2
 8007600:	40ae      	lsls	r6, r5
 8007602:	420e      	tst	r6, r1
 8007604:	d010      	beq.n	8007628 <HAL_DMA_IRQHandler+0x648>
 8007606:	0797      	lsls	r7, r2, #30
 8007608:	d50e      	bpl.n	8007628 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800760a:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800760c:	0414      	lsls	r4, r2, #16
 800760e:	d533      	bpl.n	8007678 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007610:	03d0      	lsls	r0, r2, #15
 8007612:	d43d      	bmi.n	8007690 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 8007614:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8007618:	2b00      	cmp	r3, #0
 800761a:	f47f aed4 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
 800761e:	e788      	b.n	8007532 <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007626:	e68b      	b.n	8007340 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007628:	2608      	movs	r6, #8
 800762a:	40ae      	lsls	r6, r5
 800762c:	420e      	tst	r6, r1
 800762e:	d080      	beq.n	8007532 <HAL_DMA_IRQHandler+0x552>
 8007630:	0711      	lsls	r1, r2, #28
 8007632:	f57f af7e 	bpl.w	8007532 <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007636:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007638:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800763a:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800763c:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007640:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007644:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8007646:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800764a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800764c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007650:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007654:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f aeb4 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
 800765e:	e768      	b.n	8007532 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007660:	0692      	lsls	r2, r2, #26
 8007662:	d403      	bmi.n	800766c <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	f022 0204 	bic.w	r2, r2, #4
 800766a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800766c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	f47f aea8 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
 8007676:	e75c      	b.n	8007532 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007678:	f012 0220 	ands.w	r2, r2, #32
 800767c:	d108      	bne.n	8007690 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800767e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007680:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007682:	f021 010a 	bic.w	r1, r1, #10
 8007686:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8007688:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800768c:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007690:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f ae96 	bne.w	80073c6 <HAL_DMA_IRQHandler+0x3e6>
 800769a:	e74a      	b.n	8007532 <HAL_DMA_IRQHandler+0x552>

0800769c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800769c:	b470      	push	{r4, r5, r6}
 800769e:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80076a0:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80076a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80076a8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80076aa:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80076ae:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80076b2:	ea43 0304 	orr.w	r3, r3, r4
 80076b6:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80076b8:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80076ba:	d008      	beq.n	80076ce <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80076bc:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80076c0:	d002      	beq.n	80076c8 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80076c2:	60e9      	str	r1, [r5, #12]
  }
}
 80076c4:	bc70      	pop	{r4, r5, r6}
 80076c6:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80076c8:	6169      	str	r1, [r5, #20]
}
 80076ca:	bc70      	pop	{r4, r5, r6}
 80076cc:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80076ce:	6883      	ldr	r3, [r0, #8]
 80076d0:	b1b3      	cbz	r3, 8007700 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d017      	beq.n	8007706 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80076d6:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80076d8:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80076dc:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80076e0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80076e2:	d01e      	beq.n	8007722 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80076e4:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80076e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80076ea:	d00f      	beq.n	800770c <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80076ec:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80076ee:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076f0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80076f2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076f4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80076f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80076fc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007700:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8007702:	bc70      	pop	{r4, r5, r6}
 8007704:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8007706:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800770a:	e7f9      	b.n	8007700 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 800770c:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 800770e:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007710:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8007712:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007714:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8007718:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800771c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8007720:	e7ee      	b.n	8007700 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8007722:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8007724:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007726:	02c9      	lsls	r1, r1, #11
 8007728:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 800772c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8007730:	e7e6      	b.n	8007700 <DMA2D_SetConfig+0x64>
 8007732:	bf00      	nop

08007734 <HAL_DMA2D_MspInit>:
}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8007738:	2800      	cmp	r0, #0
 800773a:	d036      	beq.n	80077aa <HAL_DMA2D_Init+0x72>
{
 800773c:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800773e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8007742:	4604      	mov	r4, r0
 8007744:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007748:	b353      	cbz	r3, 80077a0 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800774a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800774c:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800774e:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007750:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007752:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007756:	4916      	ldr	r1, [pc, #88]	; (80077b0 <HAL_DMA2D_Init+0x78>)
 8007758:	681e      	ldr	r6, [r3, #0]
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	4031      	ands	r1, r6
 800775e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007760:	4814      	ldr	r0, [pc, #80]	; (80077b4 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007762:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007764:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007766:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007768:	69a1      	ldr	r1, [r4, #24]
 800776a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800776c:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800776e:	4912      	ldr	r1, [pc, #72]	; (80077b8 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007770:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007772:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007774:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007776:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007778:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800777a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800777e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007780:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007782:	0552      	lsls	r2, r2, #21
 8007784:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007786:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800778a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800778e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007790:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007794:	430a      	orrs	r2, r1
 8007796:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007798:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800779a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800779e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80077a0:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80077a4:	f7ff ffc6 	bl	8007734 <HAL_DMA2D_MspInit>
 80077a8:	e7cf      	b.n	800774a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 80077aa:	2001      	movs	r0, #1
}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	fff8ffbf 	.word	0xfff8ffbf
 80077b4:	fffffef8 	.word	0xfffffef8
 80077b8:	ffff0000 	.word	0xffff0000

080077bc <HAL_DMA2D_Start>:
{
 80077bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80077be:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 80077c2:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80077c4:	2d01      	cmp	r5, #1
 80077c6:	d011      	beq.n	80077ec <HAL_DMA2D_Start+0x30>
 80077c8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80077ca:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077cc:	2502      	movs	r5, #2
 80077ce:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80077d0:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80077d2:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077d6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80077da:	f7ff ff5f 	bl	800769c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80077de:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80077e0:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	4333      	orrs	r3, r6
 80077e6:	6013      	str	r3, [r2, #0]
}
 80077e8:	b003      	add	sp, #12
 80077ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80077ec:	2002      	movs	r0, #2
}
 80077ee:	b003      	add	sp, #12
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f2:	bf00      	nop

080077f4 <HAL_DMA2D_CLUTLoad>:
{
 80077f4:	b430      	push	{r4, r5}
 80077f6:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 80077f8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 80077fc:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 80077fe:	2c01      	cmp	r4, #1
{
 8007800:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8007804:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8007808:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 800780a:	d02b      	beq.n	8007864 <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800780c:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 800780e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007810:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007814:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 8007816:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800781a:	b18a      	cbz	r2, 8007840 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 800781c:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	4c12      	ldr	r4, [pc, #72]	; (800786c <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 8007822:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007824:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8007826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800782a:	69d1      	ldr	r1, [r2, #28]
 800782c:	400c      	ands	r4, r1
 800782e:	4323      	orrs	r3, r4
 8007830:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 8007832:	69d3      	ldr	r3, [r2, #28]
 8007834:	f043 0320 	orr.w	r3, r3, #32
 8007838:	61d3      	str	r3, [r2, #28]
}
 800783a:	b004      	add	sp, #16
 800783c:	bc30      	pop	{r4, r5}
 800783e:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007840:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	4c09      	ldr	r4, [pc, #36]	; (800786c <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8007846:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800784c:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 800784e:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8007850:	400c      	ands	r4, r1
 8007852:	4323      	orrs	r3, r4
 8007854:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 8007856:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007858:	f043 0320 	orr.w	r3, r3, #32
 800785c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800785e:	b004      	add	sp, #16
 8007860:	bc30      	pop	{r4, r5}
 8007862:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8007864:	2002      	movs	r0, #2
}
 8007866:	b004      	add	sp, #16
 8007868:	bc30      	pop	{r4, r5}
 800786a:	4770      	bx	lr
 800786c:	ffff00ef 	.word	0xffff00ef

08007870 <HAL_DMA2D_PollForTransfer>:
{
 8007870:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8007872:	2300      	movs	r3, #0
{
 8007874:	b082      	sub	sp, #8
 8007876:	4605      	mov	r5, r0
 8007878:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 800787a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	07d2      	lsls	r2, r2, #31
 8007882:	d40f      	bmi.n	80078a4 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007884:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007886:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007888:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800788a:	0692      	lsls	r2, r2, #26
 800788c:	d433      	bmi.n	80078f6 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 800788e:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007890:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007892:	2101      	movs	r1, #1
  return HAL_OK;
 8007894:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007896:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8007898:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800789c:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 80078a0:	b002      	add	sp, #8
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80078a4:	f7fe fce4 	bl	8006270 <HAL_GetTick>
 80078a8:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	e001      	b.n	80078b2 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 80078ae:	1c60      	adds	r0, r4, #1
 80078b0:	d148      	bne.n	8007944 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	0791      	lsls	r1, r2, #30
 80078b6:	d4e5      	bmi.n	8007884 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078bc:	9a01      	ldr	r2, [sp, #4]
 80078be:	f012 0f21 	tst.w	r2, #33	; 0x21
 80078c2:	d0f4      	beq.n	80078ae <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	0696      	lsls	r6, r2, #26
 80078c8:	d503      	bpl.n	80078d2 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078ca:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80078cc:	f042 0202 	orr.w	r2, r2, #2
 80078d0:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80078d2:	9a01      	ldr	r2, [sp, #4]
 80078d4:	07d4      	lsls	r4, r2, #31
 80078d6:	d503      	bpl.n	80078e0 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078d8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80078da:	f042 0201 	orr.w	r2, r2, #1
 80078de:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80078e0:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078e2:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80078e4:	2200      	movs	r2, #0
        return HAL_ERROR;
 80078e6:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80078e8:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078ea:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 80078ee:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 80078f2:	b002      	add	sp, #8
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80078f6:	f7fe fcbb 	bl	8006270 <HAL_GetTick>
 80078fa:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	e001      	b.n	8007904 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8007900:	1c61      	adds	r1, r4, #1
 8007902:	d132      	bne.n	800796a <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	06d2      	lsls	r2, r2, #27
 8007908:	d4c1      	bmi.n	800788e <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800790e:	9a01      	ldr	r2, [sp, #4]
 8007910:	f012 0f29 	tst.w	r2, #41	; 0x29
 8007914:	d0f4      	beq.n	8007900 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007916:	9a01      	ldr	r2, [sp, #4]
 8007918:	0716      	lsls	r6, r2, #28
 800791a:	d503      	bpl.n	8007924 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800791c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800791e:	f042 0204 	orr.w	r2, r2, #4
 8007922:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007924:	9a01      	ldr	r2, [sp, #4]
 8007926:	0694      	lsls	r4, r2, #26
 8007928:	d503      	bpl.n	8007932 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800792a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800792c:	f042 0202 	orr.w	r2, r2, #2
 8007930:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	07d0      	lsls	r0, r2, #31
 8007936:	d503      	bpl.n	8007940 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007938:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007940:	2429      	movs	r4, #41	; 0x29
 8007942:	e7ce      	b.n	80078e2 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007944:	f7fe fc94 	bl	8006270 <HAL_GetTick>
 8007948:	1b80      	subs	r0, r0, r6
 800794a:	42a0      	cmp	r0, r4
 800794c:	d801      	bhi.n	8007952 <HAL_DMA2D_PollForTransfer+0xe2>
 800794e:	2c00      	cmp	r4, #0
 8007950:	d1ab      	bne.n	80078aa <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007954:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8007956:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007958:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800795c:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800795e:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007962:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007964:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8007968:	e79a      	b.n	80078a0 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800796a:	f7fe fc81 	bl	8006270 <HAL_GetTick>
 800796e:	1b80      	subs	r0, r0, r6
 8007970:	42a0      	cmp	r0, r4
 8007972:	d8ee      	bhi.n	8007952 <HAL_DMA2D_PollForTransfer+0xe2>
 8007974:	2c00      	cmp	r4, #0
 8007976:	d1c1      	bne.n	80078fc <HAL_DMA2D_PollForTransfer+0x8c>
 8007978:	e7eb      	b.n	8007952 <HAL_DMA2D_PollForTransfer+0xe2>
 800797a:	bf00      	nop

0800797c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800797c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8007980:	2a01      	cmp	r2, #1
 8007982:	d063      	beq.n	8007a4c <HAL_DMA2D_ConfigLayer+0xd0>
 8007984:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007986:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800798a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800798c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007990:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007992:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007994:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8007998:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800799c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800799e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80079a0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80079a2:	0512      	lsls	r2, r2, #20
 80079a4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80079a6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079aa:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80079ae:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079b0:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80079b2:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079b6:	d922      	bls.n	80079fe <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80079b8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80079ba:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80079be:	b981      	cbnz	r1, 80079e2 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	4923      	ldr	r1, [pc, #140]	; (8007a50 <HAL_DMA2D_ConfigLayer+0xd4>)
 80079c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079c8:	4029      	ands	r1, r5
 80079ca:	430a      	orrs	r2, r1
 80079cc:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079ce:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 80079d0:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80079d2:	2101      	movs	r1, #1
  return HAL_OK;
 80079d4:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80079d6:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 80079da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80079de:	bc70      	pop	{r4, r5, r6}
 80079e0:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80079e2:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079e4:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80079e6:	d129      	bne.n	8007a3c <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079e8:	69e6      	ldr	r6, [r4, #28]
 80079ea:	491a      	ldr	r1, [pc, #104]	; (8007a54 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80079ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079ee:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079f2:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079fa:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079fc:	e7e8      	b.n	80079d0 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80079fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007a00:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8007a04:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007a06:	b161      	cbz	r1, 8007a22 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	4c11      	ldr	r4, [pc, #68]	; (8007a50 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007a0c:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007a0e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a10:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a12:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007a14:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a18:	4322      	orrs	r2, r4
 8007a1a:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a1c:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007a1e:	620d      	str	r5, [r1, #32]
 8007a20:	e7d6      	b.n	80079d0 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	4c0a      	ldr	r4, [pc, #40]	; (8007a50 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007a26:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007a28:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a2a:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007a2c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007a2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a32:	4322      	orrs	r2, r4
 8007a34:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007a36:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007a38:	6288      	str	r0, [r1, #40]	; 0x28
 8007a3a:	e7c9      	b.n	80079d0 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a3c:	69e5      	ldr	r5, [r4, #28]
 8007a3e:	4904      	ldr	r1, [pc, #16]	; (8007a50 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a40:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a42:	4029      	ands	r1, r5
 8007a44:	430a      	orrs	r2, r1
 8007a46:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a48:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a4a:	e7c1      	b.n	80079d0 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8007a4c:	2002      	movs	r0, #2
}
 8007a4e:	4770      	bx	lr
 8007a50:	00ccfff0 	.word	0x00ccfff0
 8007a54:	00c0fff0 	.word	0x00c0fff0

08007a58 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	4617      	mov	r7, r2
 8007a62:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a64:	f7fe fc04 	bl	8006270 <HAL_GetTick>
 8007a68:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a6a:	e005      	b.n	8007a78 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007a6c:	f7fe fc00 	bl	8006270 <HAL_GetTick>
 8007a70:	1b84      	subs	r4, r0, r6
 8007a72:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8007a76:	d80e      	bhi.n	8007a96 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007a78:	682c      	ldr	r4, [r5, #0]
 8007a7a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007a7c:	07db      	lsls	r3, r3, #31
 8007a7e:	d5f5      	bpl.n	8007a6c <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007a80:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8007a84:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8007a86:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007a88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a8c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007a90:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8007a96:	2003      	movs	r0, #3
}
 8007a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007a9c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f000 80b3 	beq.w	8007c0c <HAL_DSI_Init+0x16c>
{
 8007aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007aa8:	7c43      	ldrb	r3, [r0, #17]
{
 8007aaa:	b083      	sub	sp, #12
 8007aac:	460d      	mov	r5, r1
 8007aae:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80a8 	beq.w	8007c06 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8007ab6:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007ab8:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8007aba:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007abc:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007abe:	9200      	str	r2, [sp, #0]
 8007ac0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007ac4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007ac8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007acc:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007ad8:	f7fe fbca 	bl	8006270 <HAL_GetTick>
 8007adc:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007ade:	e006      	b.n	8007aee <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007ae0:	f7fe fbc6 	bl	8006270 <HAL_GetTick>
 8007ae4:	1b83      	subs	r3, r0, r6
 8007ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aea:	f200 8089 	bhi.w	8007c00 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007af4:	04d1      	lsls	r1, r2, #19
 8007af6:	d5f3      	bpl.n	8007ae0 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007af8:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007afa:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007afc:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007b00:	682e      	ldr	r6, [r5, #0]
 8007b02:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007b04:	4942      	ldr	r1, [pc, #264]	; (8007c10 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007b06:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8007b0a:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007b0c:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007b0e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007b12:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007b16:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007b20:	9001      	str	r0, [sp, #4]
 8007b22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007b2e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8007b3a:	f7fe fb99 	bl	8006270 <HAL_GetTick>
 8007b3e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007b40:	e005      	b.n	8007b4e <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b42:	f7fe fb95 	bl	8006270 <HAL_GetTick>
 8007b46:	1b80      	subs	r0, r0, r6
 8007b48:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b4c:	d858      	bhi.n	8007c00 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007b54:	05d2      	lsls	r2, r2, #23
 8007b56:	d5f4      	bpl.n	8007b42 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b5c:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b60:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8007b62:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b64:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b68:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b6a:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007b6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007b72:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007b76:	f022 0203 	bic.w	r2, r2, #3
 8007b7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b7e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b82:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b84:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b86:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b88:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b8c:	bf38      	it	cc
 8007b8e:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007b90:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007b94:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007b98:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007b9a:	f020 0003 	bic.w	r0, r0, #3
 8007b9e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007ba2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007ba6:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007ba8:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007baa:	682d      	ldr	r5, [r5, #0]
 8007bac:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007bb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007bb4:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bb6:	fb0c f505 	mul.w	r5, ip, r5
 8007bba:	4a16      	ldr	r2, [pc, #88]	; (8007c14 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007bbc:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bc0:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007bc4:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007bc6:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bc8:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007bca:	ea46 060e 	orr.w	r6, r6, lr
 8007bce:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8007bd0:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007bd2:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bd6:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007bda:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8007bde:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8007be2:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007be4:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8007be8:	432a      	orrs	r2, r5
 8007bea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007bee:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007bf2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007bf6:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007bf8:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007bfa:	7466      	strb	r6, [r4, #17]
}
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007c00:	2003      	movs	r0, #3
}
 8007c02:	b003      	add	sp, #12
 8007c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8007c06:	f7ff ff49 	bl	8007a9c <HAL_DSI_MspInit>
 8007c0a:	e754      	b.n	8007ab6 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8007c0c:	2001      	movs	r0, #1
}
 8007c0e:	4770      	bx	lr
 8007c10:	fffc8603 	.word	0xfffc8603
 8007c14:	003d0900 	.word	0x003d0900

08007c18 <HAL_DSI_TearingEffectCallback>:
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop

08007c1c <HAL_DSI_EndOfRefreshCallback>:
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <HAL_DSI_ErrorCallback>:
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop

08007c24 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007c24:	6803      	ldr	r3, [r0, #0]
 8007c26:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007c2a:	07d1      	lsls	r1, r2, #31
{
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007c30:	d503      	bpl.n	8007c3a <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007c32:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007c36:	07d2      	lsls	r2, r2, #31
 8007c38:	d462      	bmi.n	8007d00 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007c3a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007c3e:	0791      	lsls	r1, r2, #30
 8007c40:	d503      	bpl.n	8007c4a <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007c42:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007c46:	0792      	lsls	r2, r2, #30
 8007c48:	d44f      	bmi.n	8007cea <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007c4a:	69a3      	ldr	r3, [r4, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d04b      	beq.n	8007ce8 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007c50:	6821      	ldr	r1, [r4, #0]
 8007c52:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007c56:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007c5a:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007c5e:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007c60:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007c64:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007c66:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007c68:	b119      	cbz	r1, 8007c72 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007c6a:	6961      	ldr	r1, [r4, #20]
 8007c6c:	f041 0101 	orr.w	r1, r1, #1
 8007c70:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007c72:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007c76:	d003      	beq.n	8007c80 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007c78:	6962      	ldr	r2, [r4, #20]
 8007c7a:	f042 0202 	orr.w	r2, r2, #2
 8007c7e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007c80:	07d8      	lsls	r0, r3, #31
 8007c82:	d503      	bpl.n	8007c8c <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007c84:	6962      	ldr	r2, [r4, #20]
 8007c86:	f042 0204 	orr.w	r2, r2, #4
 8007c8a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007c8c:	0799      	lsls	r1, r3, #30
 8007c8e:	d503      	bpl.n	8007c98 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007c90:	6962      	ldr	r2, [r4, #20]
 8007c92:	f042 0208 	orr.w	r2, r2, #8
 8007c96:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007c98:	f013 0f0c 	tst.w	r3, #12
 8007c9c:	d003      	beq.n	8007ca6 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007c9e:	6962      	ldr	r2, [r4, #20]
 8007ca0:	f042 0210 	orr.w	r2, r2, #16
 8007ca4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007ca6:	06da      	lsls	r2, r3, #27
 8007ca8:	d503      	bpl.n	8007cb2 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007caa:	6962      	ldr	r2, [r4, #20]
 8007cac:	f042 0220 	orr.w	r2, r2, #32
 8007cb0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007cb2:	0698      	lsls	r0, r3, #26
 8007cb4:	d503      	bpl.n	8007cbe <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007cb6:	6962      	ldr	r2, [r4, #20]
 8007cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cbc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007cbe:	0659      	lsls	r1, r3, #25
 8007cc0:	d503      	bpl.n	8007cca <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007cc2:	6962      	ldr	r2, [r4, #20]
 8007cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cc8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007cca:	061a      	lsls	r2, r3, #24
 8007ccc:	d503      	bpl.n	8007cd6 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007cce:	6962      	ldr	r2, [r4, #20]
 8007cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007cd6:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007cda:	d003      	beq.n	8007ce4 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ce2:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007ce4:	6963      	ldr	r3, [r4, #20]
 8007ce6:	b93b      	cbnz	r3, 8007cf8 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007ce8:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007cea:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007cec:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007cee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007cf2:	f7ff ff93 	bl	8007c1c <HAL_DSI_EndOfRefreshCallback>
 8007cf6:	e7a8      	b.n	8007c4a <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f7ff ff91 	bl	8007c20 <HAL_DSI_ErrorCallback>
}
 8007cfe:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007d00:	2201      	movs	r2, #1
 8007d02:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007d06:	f7ff ff87 	bl	8007c18 <HAL_DSI_TearingEffectCallback>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	e795      	b.n	8007c3a <HAL_DSI_IRQHandler+0x16>
 8007d0e:	bf00      	nop

08007d10 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d10:	7c03      	ldrb	r3, [r0, #16]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	f000 8113 	beq.w	8007f3e <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007d18:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8007d1a:	2201      	movs	r2, #1
{
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8007d20:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007d22:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007d26:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007d28:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007d2c:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007d30:	4e84      	ldr	r6, [pc, #528]	; (8007f44 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007d32:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007d34:	4d84      	ldr	r5, [pc, #528]	; (8007f48 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d36:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007d3a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007d3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8007d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4a:	f022 0203 	bic.w	r2, r2, #3
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007d50:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007d52:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007d56:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007d5a:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d5e:	ea06 0602 	and.w	r6, r6, r2
 8007d62:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d66:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007d6a:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d72:	ea02 0205 	and.w	r2, r2, r5
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007d78:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8007d7a:	ea47 0708 	orr.w	r7, r7, r8
 8007d7e:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007d80:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8007d82:	ea06 0605 	and.w	r6, r6, r5
 8007d86:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007d88:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8007d8a:	ea45 050e 	orr.w	r5, r5, lr
 8007d8e:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007d90:	68dd      	ldr	r5, [r3, #12]
 8007d92:	f025 0503 	bic.w	r5, r5, #3
 8007d96:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	ea42 020c 	orr.w	r2, r2, ip
 8007d9e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007da0:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007da2:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007da4:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007da8:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007dac:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007dae:	ea42 0206 	orr.w	r2, r2, r6
 8007db2:	695d      	ldr	r5, [r3, #20]
 8007db4:	ea42 0207 	orr.w	r2, r2, r7
 8007db8:	ea42 0205 	orr.w	r2, r2, r5
 8007dbc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	f022 020f 	bic.w	r2, r2, #15
 8007dc4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	ea42 0200 	orr.w	r2, r2, r0
 8007dcc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007dce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007dd2:	f022 020e 	bic.w	r2, r2, #14
 8007dd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8007dda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007dde:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007de2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007de6:	d107      	bne.n	8007df8 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007de8:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007dea:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007dec:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8007df0:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	432a      	orrs	r2, r5
 8007df6:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007df8:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007dfa:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007dfc:	4a53      	ldr	r2, [pc, #332]	; (8007f4c <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007dfe:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007e00:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007e02:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007e06:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007e0a:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007e0c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007e0e:	4f50      	ldr	r7, [pc, #320]	; (8007f50 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007e10:	4305      	orrs	r5, r0
 8007e12:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007e14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007e16:	4010      	ands	r0, r2
 8007e18:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8007e1c:	484d      	ldr	r0, [pc, #308]	; (8007f54 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007e1e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007e22:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007e26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e2a:	4017      	ands	r7, r2
 8007e2c:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007e2e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007e30:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007e34:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007e38:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8007e3a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8007e3c:	4005      	ands	r5, r0
 8007e3e:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e42:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007e46:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8007e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e4e:	4002      	ands	r2, r0
 8007e50:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007e52:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007e54:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007e56:	ea47 070e 	orr.w	r7, r7, lr
 8007e5a:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007e5c:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8007e5e:	4007      	ands	r7, r0

  return HAL_OK;
 8007e60:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007e62:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007e64:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8007e66:	ea45 050c 	orr.w	r5, r5, ip
 8007e6a:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007e6c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007e6e:	402a      	ands	r2, r5
 8007e70:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e72:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007e74:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e76:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e7a:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007e7c:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007e80:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007e82:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007e84:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8007e88:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e8c:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007e90:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8007e96:	699f      	ldr	r7, [r3, #24]
 8007e98:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8007e9c:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007e9e:	699d      	ldr	r5, [r3, #24]
 8007ea0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007ea4:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007ea8:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8007eaa:	699d      	ldr	r5, [r3, #24]
 8007eac:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007eb0:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007eb8:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007ebc:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8007ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007ec6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007ec8:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007ecc:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007ed0:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8007ed2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007ed4:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8007ed8:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007eda:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007edc:	ea45 050e 	orr.w	r5, r5, lr
 8007ee0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8007ee2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007ee4:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8007ee8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eec:	ea42 020c 	orr.w	r2, r2, ip
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007ef2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007ef4:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007ef6:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007efa:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007efe:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f02:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007f04:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8007f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007f12:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007f14:	ea45 050e 	orr.w	r5, r5, lr
 8007f18:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8007f1a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007f1c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007f20:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8007f22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007f24:	ea41 010c 	orr.w	r1, r1, ip
 8007f28:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8007f2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007f2c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007f30:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	433a      	orrs	r2, r7
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8007f38:	7426      	strb	r6, [r4, #16]
}
 8007f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8007f3e:	2002      	movs	r0, #2
}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	ffffc000 	.word	0xffffc000
 8007f48:	ffffe000 	.word	0xffffe000
 8007f4c:	fffff000 	.word	0xfffff000
 8007f50:	ffff8000 	.word	0xffff8000
 8007f54:	fffffc00 	.word	0xfffffc00

08007f58 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f58:	7c02      	ldrb	r2, [r0, #16]
 8007f5a:	2a01      	cmp	r2, #1
 8007f5c:	d00e      	beq.n	8007f7c <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f5e:	6802      	ldr	r2, [r0, #0]
 8007f60:	4603      	mov	r3, r0
{
 8007f62:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f64:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007f66:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f68:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8007f6c:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007f6e:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007f70:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007f72:	4321      	orrs	r1, r4
 8007f74:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8007f76:	741d      	strb	r5, [r3, #16]
}
 8007f78:	bc30      	pop	{r4, r5}
 8007f7a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007f7c:	2002      	movs	r0, #2
}
 8007f7e:	4770      	bx	lr

08007f80 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f80:	7c03      	ldrb	r3, [r0, #16]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d021      	beq.n	8007fca <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007f86:	6803      	ldr	r3, [r0, #0]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007f8c:	4608      	mov	r0, r1
{
 8007f8e:	b410      	push	{r4}
 8007f90:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8007f92:	9100      	str	r1, [sp, #0]
 8007f94:	685c      	ldr	r4, [r3, #4]
 8007f96:	f044 0401 	orr.w	r4, r4, #1
 8007f9a:	605c      	str	r4, [r3, #4]
 8007f9c:	685c      	ldr	r4, [r3, #4]
 8007f9e:	f004 0401 	and.w	r4, r4, #1
 8007fa2:	9400      	str	r4, [sp, #0]
 8007fa4:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007fa6:	9101      	str	r1, [sp, #4]
 8007fa8:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8007fac:	f044 0408 	orr.w	r4, r4, #8
 8007fb0:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8007fb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8007fb8:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	9b01      	ldr	r3, [sp, #4]
}
 8007fc2:	b003      	add	sp, #12
 8007fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007fca:	2002      	movs	r0, #2
}
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop

08007fd0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007fd0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007fd2:	7c05      	ldrb	r5, [r0, #16]
{
 8007fd4:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007fd6:	2d01      	cmp	r5, #1
 8007fd8:	d00a      	beq.n	8007ff0 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007fda:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8007fdc:	2501      	movs	r5, #1
 8007fde:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007fe0:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8007fe2:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007fe4:	f7ff fd38 	bl	8007a58 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fe8:	2300      	movs	r3, #0
 8007fea:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007fec:	b002      	add	sp, #8
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8007ff0:	2002      	movs	r0, #2
}
 8007ff2:	b002      	add	sp, #8
 8007ff4:	bd70      	pop	{r4, r5, r6, pc}
 8007ff6:	bf00      	nop

08007ff8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ffe:	7c03      	ldrb	r3, [r0, #16]
{
 8008000:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8008002:	2b01      	cmp	r3, #1
 8008004:	d05e      	beq.n	80080c4 <HAL_DSI_LongWrite+0xcc>
 8008006:	2301      	movs	r3, #1
 8008008:	4607      	mov	r7, r0
 800800a:	4689      	mov	r9, r1
 800800c:	4692      	mov	sl, r2
 800800e:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8008010:	f7fe f92e 	bl	8006270 <HAL_GetTick>
 8008014:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008016:	e005      	b.n	8008024 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008018:	f7fe f92a 	bl	8006270 <HAL_GetTick>
 800801c:	1b40      	subs	r0, r0, r5
 800801e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008022:	d84b      	bhi.n	80080bc <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8008028:	f014 0401 	ands.w	r4, r4, #1
 800802c:	d0f4      	beq.n	8008018 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800802e:	4640      	mov	r0, r8
 8008030:	2803      	cmp	r0, #3
 8008032:	bf28      	it	cs
 8008034:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8008036:	f1b8 0f00 	cmp.w	r8, #0
 800803a:	d046      	beq.n	80080ca <HAL_DSI_LongWrite+0xd2>
 800803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803e:	1e5c      	subs	r4, r3, #1
 8008040:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8008042:	3301      	adds	r3, #1
 8008044:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8008048:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 800804a:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800804c:	fa02 f205 	lsl.w	r2, r2, r5
 8008050:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8008054:	d3f5      	bcc.n	8008042 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8008058:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 800805a:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800805c:	ebb8 0000 	subs.w	r0, r8, r0
 8008060:	d017      	beq.n	8008092 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008062:	2804      	cmp	r0, #4
 8008064:	4684      	mov	ip, r0
 8008066:	f04f 0500 	mov.w	r5, #0
 800806a:	bf28      	it	cs
 800806c:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8008070:	462b      	mov	r3, r5
 8008072:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008076:	f816 4b01 	ldrb.w	r4, [r6], #1
 800807a:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 800807c:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800807e:	f105 0508 	add.w	r5, r5, #8
 8008082:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8008086:	d1f6      	bne.n	8008076 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8008088:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800808c:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 800808e:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8008090:	d1e7      	bne.n	8008062 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8008092:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008096:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800809a:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800809c:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 80080a0:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80080a2:	46c8      	mov	r8, r9
 80080a4:	fa1f f989 	uxth.w	r9, r9
 80080a8:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 80080ac:	ea43 0309 	orr.w	r3, r3, r9
 80080b0:	ea43 0308 	orr.w	r3, r3, r8
 80080b4:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80080b6:	743a      	strb	r2, [r7, #16]
}
 80080b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 80080bc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80080be:	743c      	strb	r4, [r7, #16]
}
 80080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 80080c4:	2002      	movs	r0, #2
}
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 80080ca:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80080cc:	e7e1      	b.n	8008092 <HAL_DSI_LongWrite+0x9a>
 80080ce:	bf00      	nop

080080d0 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80080d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d4:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80080d6:	7c02      	ldrb	r2, [r0, #16]
{
 80080d8:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80080da:	2a01      	cmp	r2, #1
{
 80080dc:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 80080de:	d070      	beq.n	80081c2 <HAL_DSI_Read+0xf2>
 80080e0:	461e      	mov	r6, r3
 80080e2:	2301      	movs	r3, #1
 80080e4:	4607      	mov	r7, r0
 80080e6:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80080e8:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80080ea:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80080ec:	d80d      	bhi.n	800810a <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80080ee:	2c06      	cmp	r4, #6
 80080f0:	d017      	beq.n	8008122 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80080f2:	2c04      	cmp	r4, #4
 80080f4:	d04f      	beq.n	8008196 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80080f6:	2c14      	cmp	r4, #20
 80080f8:	d067      	beq.n	80081ca <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80080fa:	2c24      	cmp	r4, #36	; 0x24
 80080fc:	d052      	beq.n	80081a4 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 80080fe:	2300      	movs	r3, #0
      return HAL_ERROR;
 8008100:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8008102:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8008104:	b002      	add	sp, #8
 8008106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800810a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800810e:	b2f3      	uxtb	r3, r6
 8008110:	2237      	movs	r2, #55	; 0x37
 8008112:	f8cd c000 	str.w	ip, [sp]
 8008116:	f7ff fc9f 	bl	8007a58 <DSI_ShortWrite>
 800811a:	2800      	cmp	r0, #0
 800811c:	d1ef      	bne.n	80080fe <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800811e:	2c06      	cmp	r4, #6
 8008120:	d1e7      	bne.n	80080f2 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8008124:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008126:	021a      	lsls	r2, r3, #8
 8008128:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 800812c:	f043 0306 	orr.w	r3, r3, #6
 8008130:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8008132:	f7fe f89d 	bl	8006270 <HAL_GetTick>
 8008136:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8008138:	e006      	b.n	8008148 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800813a:	f7fe f899 	bl	8006270 <HAL_GetTick>
 800813e:	eba0 0008 	sub.w	r0, r0, r8
 8008142:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008146:	d81b      	bhi.n	8008180 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8008148:	2e00      	cmp	r6, #0
 800814a:	dd1f      	ble.n	800818c <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008150:	f011 0110 	ands.w	r1, r1, #16
 8008154:	d1f1      	bne.n	800813a <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8008156:	2e04      	cmp	r6, #4
 8008158:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 800815a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800815c:	bf28      	it	cs
 800815e:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8008160:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8008162:	fa22 f401 	lsr.w	r4, r2, r1
 8008166:	3108      	adds	r1, #8
 8008168:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 800816c:	429d      	cmp	r5, r3
 800816e:	d1f8      	bne.n	8008162 <HAL_DSI_Read+0x92>
 8008170:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008172:	f7fe f87d 	bl	8006270 <HAL_GetTick>
 8008176:	eba0 0008 	sub.w	r0, r0, r8
 800817a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800817e:	d9e3      	bls.n	8008148 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8008180:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008182:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008184:	743b      	strb	r3, [r7, #16]
}
 8008186:	b002      	add	sp, #8
 8008188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 800818c:	2000      	movs	r0, #0
 800818e:	7438      	strb	r0, [r7, #16]
}
 8008190:	b002      	add	sp, #8
 8008192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008196:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800819a:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800819c:	f043 0304 	orr.w	r3, r3, #4
 80081a0:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80081a2:	e7c6      	b.n	8008132 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081a6:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081ac:	7852      	ldrb	r2, [r2, #1]
 80081ae:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081b4:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80081ba:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80081be:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80081c0:	e7b7      	b.n	8008132 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 80081c2:	2002      	movs	r0, #2
}
 80081c4:	b002      	add	sp, #8
 80081c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80081ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081cc:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80081d0:	7811      	ldrb	r1, [r2, #0]
 80081d2:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80081d8:	f043 0314 	orr.w	r3, r3, #20
 80081dc:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80081de:	e7a8      	b.n	8008132 <HAL_DSI_Read+0x62>

080081e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081e4:	680e      	ldr	r6, [r1, #0]
{
 80081e6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	f000 80d3 	beq.w	8008394 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80081ee:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081f0:	f8df a220 	ldr.w	sl, [pc, #544]	; 8008414 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081f4:	f8df b220 	ldr.w	fp, [pc, #544]	; 8008418 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081f8:	46b1      	mov	r9, r6
 80081fa:	e020      	b.n	800823e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80081fc:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081fe:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008202:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008206:	f04f 0e0f 	mov.w	lr, #15
 800820a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800820e:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008210:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008214:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8008218:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800821a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800821e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008222:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008226:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800822a:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800822c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800822e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008230:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8008232:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8008234:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008236:	fa39 f203 	lsrs.w	r2, r9, r3
 800823a:	f000 80ab 	beq.w	8008394 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800823e:	2201      	movs	r2, #1
 8008240:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8008242:	ea12 0809 	ands.w	r8, r2, r9
 8008246:	d0f5      	beq.n	8008234 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008248:	684c      	ldr	r4, [r1, #4]
 800824a:	005f      	lsls	r7, r3, #1
 800824c:	f024 0c10 	bic.w	ip, r4, #16
 8008250:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008254:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008256:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800825a:	f200 809e 	bhi.w	800839a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800825e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8008262:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008266:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008268:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800826a:	ea2e 0e05 	bic.w	lr, lr, r5
 800826e:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008270:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008272:	68ce      	ldr	r6, [r1, #12]
 8008274:	40be      	lsls	r6, r7
 8008276:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800827a:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800827c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8008280:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008284:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008288:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800828a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800828c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800828e:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008292:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008294:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008298:	fa02 f207 	lsl.w	r2, r2, r7
 800829c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 80082a0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082a2:	d0ab      	beq.n	80081fc <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 80082a4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082a6:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082aa:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082ac:	fa02 f707 	lsl.w	r7, r2, r7
 80082b0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80082b2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082b4:	00e6      	lsls	r6, r4, #3
 80082b6:	d5bd      	bpl.n	8008234 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b8:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80082bc:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082c0:	f003 0203 	and.w	r2, r3, #3
 80082c4:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082c6:	f046 0602 	orr.w	r6, r6, #2
 80082ca:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082ce:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082d0:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80082d4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80082d8:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082dc:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e0:	f006 0602 	and.w	r6, r6, #2
 80082e4:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082e6:	4e42      	ldr	r6, [pc, #264]	; (80083f0 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e8:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082ea:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80082ec:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082ee:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082f2:	d020      	beq.n	8008336 <HAL_GPIO_Init+0x156>
 80082f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80082f8:	42b0      	cmp	r0, r6
 80082fa:	d056      	beq.n	80083aa <HAL_GPIO_Init+0x1ca>
 80082fc:	4e3d      	ldr	r6, [pc, #244]	; (80083f4 <HAL_GPIO_Init+0x214>)
 80082fe:	42b0      	cmp	r0, r6
 8008300:	d058      	beq.n	80083b4 <HAL_GPIO_Init+0x1d4>
 8008302:	4e3d      	ldr	r6, [pc, #244]	; (80083f8 <HAL_GPIO_Init+0x218>)
 8008304:	42b0      	cmp	r0, r6
 8008306:	d04b      	beq.n	80083a0 <HAL_GPIO_Init+0x1c0>
 8008308:	4e3c      	ldr	r6, [pc, #240]	; (80083fc <HAL_GPIO_Init+0x21c>)
 800830a:	42b0      	cmp	r0, r6
 800830c:	d05c      	beq.n	80083c8 <HAL_GPIO_Init+0x1e8>
 800830e:	4e3c      	ldr	r6, [pc, #240]	; (8008400 <HAL_GPIO_Init+0x220>)
 8008310:	42b0      	cmp	r0, r6
 8008312:	d05e      	beq.n	80083d2 <HAL_GPIO_Init+0x1f2>
 8008314:	4e3b      	ldr	r6, [pc, #236]	; (8008404 <HAL_GPIO_Init+0x224>)
 8008316:	42b0      	cmp	r0, r6
 8008318:	d051      	beq.n	80083be <HAL_GPIO_Init+0x1de>
 800831a:	4e3b      	ldr	r6, [pc, #236]	; (8008408 <HAL_GPIO_Init+0x228>)
 800831c:	42b0      	cmp	r0, r6
 800831e:	d05d      	beq.n	80083dc <HAL_GPIO_Init+0x1fc>
 8008320:	4e3a      	ldr	r6, [pc, #232]	; (800840c <HAL_GPIO_Init+0x22c>)
 8008322:	42b0      	cmp	r0, r6
 8008324:	d05f      	beq.n	80083e6 <HAL_GPIO_Init+0x206>
 8008326:	4e3a      	ldr	r6, [pc, #232]	; (8008410 <HAL_GPIO_Init+0x230>)
 8008328:	42b0      	cmp	r0, r6
 800832a:	bf0c      	ite	eq
 800832c:	2609      	moveq	r6, #9
 800832e:	260a      	movne	r6, #10
 8008330:	fa06 f202 	lsl.w	r2, r6, r2
 8008334:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008336:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8008338:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 800833c:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008340:	03e5      	lsls	r5, r4, #15
    position++;
 8008342:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8008346:	bf54      	ite	pl
 8008348:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800834a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800834e:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008352:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8008354:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8008358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800835c:	bf54      	ite	pl
 800835e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008360:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008364:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8008366:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800836a:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800836c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008370:	bf54      	ite	pl
 8008372:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008374:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008378:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800837a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800837e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8008380:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8008382:	bf54      	ite	pl
 8008384:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8008386:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800838a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800838c:	fa39 f203 	lsrs.w	r2, r9, r3
 8008390:	f47f af55 	bne.w	800823e <HAL_GPIO_Init+0x5e>
  }
}
 8008394:	b005      	add	sp, #20
 8008396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	40bd      	lsls	r5, r7
 800839c:	43ed      	mvns	r5, r5
 800839e:	e775      	b.n	800828c <HAL_GPIO_Init+0xac>
 80083a0:	2603      	movs	r6, #3
 80083a2:	fa06 f202 	lsl.w	r2, r6, r2
 80083a6:	4315      	orrs	r5, r2
 80083a8:	e7c5      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083aa:	2601      	movs	r6, #1
 80083ac:	fa06 f202 	lsl.w	r2, r6, r2
 80083b0:	4315      	orrs	r5, r2
 80083b2:	e7c0      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083b4:	2602      	movs	r6, #2
 80083b6:	fa06 f202 	lsl.w	r2, r6, r2
 80083ba:	4315      	orrs	r5, r2
 80083bc:	e7bb      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083be:	2606      	movs	r6, #6
 80083c0:	fa06 f202 	lsl.w	r2, r6, r2
 80083c4:	4315      	orrs	r5, r2
 80083c6:	e7b6      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083c8:	2604      	movs	r6, #4
 80083ca:	fa06 f202 	lsl.w	r2, r6, r2
 80083ce:	4315      	orrs	r5, r2
 80083d0:	e7b1      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083d2:	2605      	movs	r6, #5
 80083d4:	fa06 f202 	lsl.w	r2, r6, r2
 80083d8:	4315      	orrs	r5, r2
 80083da:	e7ac      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083dc:	2607      	movs	r6, #7
 80083de:	fa06 f202 	lsl.w	r2, r6, r2
 80083e2:	4315      	orrs	r5, r2
 80083e4:	e7a7      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083e6:	2608      	movs	r6, #8
 80083e8:	fa06 f202 	lsl.w	r2, r6, r2
 80083ec:	4315      	orrs	r5, r2
 80083ee:	e7a2      	b.n	8008336 <HAL_GPIO_Init+0x156>
 80083f0:	58020000 	.word	0x58020000
 80083f4:	58020800 	.word	0x58020800
 80083f8:	58020c00 	.word	0x58020c00
 80083fc:	58021000 	.word	0x58021000
 8008400:	58021400 	.word	0x58021400
 8008404:	58021800 	.word	0x58021800
 8008408:	58021c00 	.word	0x58021c00
 800840c:	58022000 	.word	0x58022000
 8008410:	58022400 	.word	0x58022400
 8008414:	58024400 	.word	0x58024400
 8008418:	58000080 	.word	0x58000080

0800841c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800841c:	b902      	cbnz	r2, 8008420 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800841e:	0409      	lsls	r1, r1, #16
 8008420:	6181      	str	r1, [r0, #24]
  }
}
 8008422:	4770      	bx	lr

08008424 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008424:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008426:	ea01 0203 	and.w	r2, r1, r3
 800842a:	ea21 0103 	bic.w	r1, r1, r3
 800842e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008432:	6181      	str	r1, [r0, #24]
}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008438:	4a04      	ldr	r2, [pc, #16]	; (800844c <HAL_HSEM_FastTake+0x14>)
 800843a:	3020      	adds	r0, #32
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <HAL_HSEM_FastTake+0x18>)
 800843e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8008442:	1ac0      	subs	r0, r0, r3
 8008444:	bf18      	it	ne
 8008446:	2001      	movne	r0, #1
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	58026400 	.word	0x58026400
 8008450:	80000300 	.word	0x80000300

08008454 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <HAL_HSEM_Release+0xc>)
 8008456:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800845a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800845e:	4770      	bx	lr
 8008460:	58026400 	.word	0x58026400

08008464 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008464:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008466:	f04f 0c00 	mov.w	ip, #0
{
 800846a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800846e:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008470:	6804      	ldr	r4, [r0, #0]
 8008472:	6848      	ldr	r0, [r1, #4]
{
 8008474:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008476:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008478:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800847a:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800847e:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008482:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008486:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008488:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800848c:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008490:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008492:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008496:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008498:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800849a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800849c:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80084a0:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084a4:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084a8:	4f38      	ldr	r7, [pc, #224]	; (800858c <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084aa:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80084ac:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084b0:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80084b4:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084b6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084ba:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084bc:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084c0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084c4:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80084c6:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084ca:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80084cc:	68e5      	ldr	r5, [r4, #12]
 80084ce:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80084d2:	444d      	add	r5, r9
 80084d4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80084d8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80084da:	691d      	ldr	r5, [r3, #16]
 80084dc:	f025 0507 	bic.w	r5, r5, #7
 80084e0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80084e2:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80084e6:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80084e8:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80084ec:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80084f0:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80084f4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80084f8:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80084fc:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8008500:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8008504:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008506:	695d      	ldr	r5, [r3, #20]
 8008508:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800850c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800850e:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008512:	69dd      	ldr	r5, [r3, #28]
 8008514:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008516:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008518:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800851a:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 800851e:	4305      	orrs	r5, r0
 8008520:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008522:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008524:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008528:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800852a:	f1be 0f00 	cmp.w	lr, #0
 800852e:	d00b      	beq.n	8008548 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008530:	f1be 0f01 	cmp.w	lr, #1
 8008534:	d026      	beq.n	8008584 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008536:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800853a:	2d02      	cmp	r5, #2
 800853c:	d902      	bls.n	8008544 <LTDC_SetConfig+0xe0>
 800853e:	f1be 0f07 	cmp.w	lr, #7
 8008542:	d121      	bne.n	8008588 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008544:	2702      	movs	r7, #2
 8008546:	e000      	b.n	800854a <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8008548:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800854a:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800854c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800854e:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008550:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008554:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008558:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800855c:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800855e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008560:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008564:	490a      	ldr	r1, [pc, #40]	; (8008590 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008566:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800856a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800856c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800856e:	4001      	ands	r1, r0
 8008570:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008572:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008576:	58a3      	ldr	r3, [r4, r2]
 8008578:	f043 0301 	orr.w	r3, r3, #1
 800857c:	50a3      	str	r3, [r4, r2]
}
 800857e:	b003      	add	sp, #12
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8008584:	2703      	movs	r7, #3
 8008586:	e7e0      	b.n	800854a <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8008588:	2701      	movs	r7, #1
 800858a:	e7de      	b.n	800854a <LTDC_SetConfig+0xe6>
 800858c:	fffff8f8 	.word	0xfffff8f8
 8008590:	fffff800 	.word	0xfffff800

08008594 <HAL_LTDC_MspInit>:
}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8008598:	2800      	cmp	r0, #0
 800859a:	d06d      	beq.n	8008678 <HAL_LTDC_Init+0xe0>
{
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800859e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80085a2:	4604      	mov	r4, r0
 80085a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d060      	beq.n	800866e <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085ac:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80085ae:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085b0:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80085b2:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80085b4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085b8:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80085ba:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085bc:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085c4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80085c6:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085c8:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80085ca:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085ce:	4e2b      	ldr	r6, [pc, #172]	; (800867c <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80085d0:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085d2:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085d4:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80085d6:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085d8:	4302      	orrs	r2, r0
 80085da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	4032      	ands	r2, r6
 80085e0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085e2:	6898      	ldr	r0, [r3, #8]
 80085e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80085e8:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085ea:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085ee:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085f2:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80085f4:	68d8      	ldr	r0, [r3, #12]
 80085f6:	4030      	ands	r0, r6
 80085f8:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008600:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008602:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008606:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800860a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	4032      	ands	r2, r6
 8008610:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008612:	6918      	ldr	r0, [r3, #16]
 8008614:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008618:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800861a:	ea40 000c 	orr.w	r0, r0, ip
 800861e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008620:	6958      	ldr	r0, [r3, #20]
 8008622:	4006      	ands	r6, r0
 8008624:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800862a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800862e:	4302      	orrs	r2, r0
 8008630:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008632:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008634:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008638:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800863c:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008640:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008642:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008644:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008648:	4302      	orrs	r2, r0
  return HAL_OK;
 800864a:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800864c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8008650:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008654:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008658:	f042 0206 	orr.w	r2, r2, #6
 800865c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	432a      	orrs	r2, r5
 8008662:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008664:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008668:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800866c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800866e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008672:	f7ff ff8f 	bl	8008594 <HAL_LTDC_MspInit>
 8008676:	e799      	b.n	80085ac <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8008678:	2001      	movs	r0, #1
}
 800867a:	4770      	bx	lr
 800867c:	f000f800 	.word	0xf000f800

08008680 <HAL_LTDC_ErrorCallback>:
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop

08008684 <HAL_LTDC_LineEventCallback>:
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <HAL_LTDC_ReloadEventCallback>:
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop

0800868c <HAL_LTDC_IRQHandler>:
{
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800868e:	6803      	ldr	r3, [r0, #0]
{
 8008690:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008692:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008694:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008696:	0769      	lsls	r1, r5, #29
 8008698:	d501      	bpl.n	800869e <HAL_LTDC_IRQHandler+0x12>
 800869a:	0772      	lsls	r2, r6, #29
 800869c:	d41d      	bmi.n	80086da <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800869e:	07ab      	lsls	r3, r5, #30
 80086a0:	d501      	bpl.n	80086a6 <HAL_LTDC_IRQHandler+0x1a>
 80086a2:	07b7      	lsls	r7, r6, #30
 80086a4:	d42d      	bmi.n	8008702 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80086a6:	07e8      	lsls	r0, r5, #31
 80086a8:	d501      	bpl.n	80086ae <HAL_LTDC_IRQHandler+0x22>
 80086aa:	07f1      	lsls	r1, r6, #31
 80086ac:	d440      	bmi.n	8008730 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80086ae:	072a      	lsls	r2, r5, #28
 80086b0:	d501      	bpl.n	80086b6 <HAL_LTDC_IRQHandler+0x2a>
 80086b2:	0733      	lsls	r3, r6, #28
 80086b4:	d400      	bmi.n	80086b8 <HAL_LTDC_IRQHandler+0x2c>
}
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80086b8:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80086ba:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 80086bc:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 80086be:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80086c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 80086c2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80086c4:	f022 0208 	bic.w	r2, r2, #8
 80086c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80086ca:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80086cc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80086d0:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80086d4:	f7ff ffd8 	bl	8008688 <HAL_LTDC_ReloadEventCallback>
}
 80086d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80086da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80086dc:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 80086de:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80086e0:	f022 0204 	bic.w	r2, r2, #4
 80086e4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80086e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80086e8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80086ec:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80086f0:	f043 0301 	orr.w	r3, r3, #1
 80086f4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80086f8:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80086fc:	f7ff ffc0 	bl	8008680 <HAL_LTDC_ErrorCallback>
 8008700:	e7cd      	b.n	800869e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008702:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008704:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008706:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800870a:	f022 0202 	bic.w	r2, r2, #2
 800870e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8008710:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008712:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8008714:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008716:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800871a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800871e:	f043 0302 	orr.w	r3, r3, #2
 8008722:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008726:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800872a:	f7ff ffa9 	bl	8008680 <HAL_LTDC_ErrorCallback>
 800872e:	e7ba      	b.n	80086a6 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008730:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008732:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8008734:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8008736:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008740:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008742:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008746:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800874a:	f7ff ff9b 	bl	8008684 <HAL_LTDC_LineEventCallback>
 800874e:	e7ae      	b.n	80086ae <HAL_LTDC_IRQHandler+0x22>

08008750 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8008750:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d028      	beq.n	80087aa <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008758:	2302      	movs	r3, #2
 800875a:	4694      	mov	ip, r2
{
 800875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008760:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8008762:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008766:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008768:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800876c:	fb04 0402 	mla	r4, r4, r2, r0
 8008770:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8008772:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008776:	460f      	mov	r7, r1
 8008778:	3438      	adds	r4, #56	; 0x38
 800877a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800877c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800877e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008786:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008788:	4662      	mov	r2, ip
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800878e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008790:	f7ff fe68 	bl	8008464 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8008794:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008796:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8008798:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800879a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800879e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80087a2:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 80087a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 80087aa:	2002      	movs	r0, #2
}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80087b4:	f7fd fd5c 	bl	8006270 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	d05a      	beq.n	8008872 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80087bc:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80087be:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80087c0:	2100      	movs	r1, #0
 80087c2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80087c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80087c8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	f022 0201 	bic.w	r2, r2, #1
 80087d2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80087d4:	e005      	b.n	80087e2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80087d6:	f7fd fd4b 	bl	8006270 <HAL_GetTick>
 80087da:	1b43      	subs	r3, r0, r5
 80087dc:	2b05      	cmp	r3, #5
 80087de:	d841      	bhi.n	8008864 <HAL_MDMA_Init+0xb4>
 80087e0:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	07d2      	lsls	r2, r2, #31
 80087e6:	d4f6      	bmi.n	80087d6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80087e8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80087ec:	69e1      	ldr	r1, [r4, #28]
 80087ee:	4302      	orrs	r2, r0
 80087f0:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80087f8:	432a      	orrs	r2, r5
 80087fa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80087fc:	4302      	orrs	r2, r0
 80087fe:	68a0      	ldr	r0, [r4, #8]
 8008800:	430a      	orrs	r2, r1
 8008802:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008804:	432a      	orrs	r2, r5
 8008806:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008808:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800880a:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800880c:	6920      	ldr	r0, [r4, #16]
 800880e:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008810:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008812:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008816:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800881a:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800881c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800881e:	d103      	bne.n	8008828 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008826:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008828:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800882a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800882c:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800882e:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008830:	db30      	blt.n	8008894 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008832:	b292      	uxth	r2, r2
 8008834:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008838:	2a00      	cmp	r2, #0
 800883a:	db1c      	blt.n	8008876 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800883c:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800883e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008842:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008846:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008848:	d021      	beq.n	800888e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800884a:	b2c9      	uxtb	r1, r1
 800884c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800884e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008850:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8008852:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008854:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008856:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008858:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800885a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800885e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8008862:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008864:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008866:	2303      	movs	r3, #3
      return HAL_ERROR;
 8008868:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800886a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800886c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008870:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008872:	2001      	movs	r0, #1
}
 8008874:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008876:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008878:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800887a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800887e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8008882:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008884:	6a18      	ldr	r0, [r3, #32]
 8008886:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800888a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800888c:	d1dd      	bne.n	800884a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800888e:	2200      	movs	r2, #0
 8008890:	629a      	str	r2, [r3, #40]	; 0x28
 8008892:	e7dc      	b.n	800884e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008894:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008896:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008898:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800889c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800889e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80088a0:	621a      	str	r2, [r3, #32]
 80088a2:	e7c8      	b.n	8008836 <HAL_MDMA_Init+0x86>

080088a4 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80088a4:	b1f0      	cbz	r0, 80088e4 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 80088a6:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	4601      	mov	r1, r0
  return HAL_OK;
 80088ac:	4618      	mov	r0, r3
{
 80088ae:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 80088b0:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80088b2:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 80088b4:	f024 0401 	bic.w	r4, r4, #1
 80088b8:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80088ba:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80088bc:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80088be:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80088c0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80088c2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80088c4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80088c6:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80088c8:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80088ca:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80088cc:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80088ce:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80088d0:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 80088d2:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80088d6:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 80088da:	664b      	str	r3, [r1, #100]	; 0x64
}
 80088dc:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 80088de:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 80088e2:	4770      	bx	lr
    return HAL_ERROR;
 80088e4:	2001      	movs	r0, #1
}
 80088e6:	4770      	bx	lr

080088e8 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80088e8:	4a1c      	ldr	r2, [pc, #112]	; (800895c <HAL_PWREx_ConfigSupply+0x74>)
 80088ea:	68d3      	ldr	r3, [r2, #12]
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088f2:	68d3      	ldr	r3, [r2, #12]
{
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80088f8:	d005      	beq.n	8008906 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088fe:	1a18      	subs	r0, r3, r0
 8008900:	bf18      	it	ne
 8008902:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008904:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800890a:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800890c:	4303      	orrs	r3, r0
 800890e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8008910:	f7fd fcae 	bl	8006270 <HAL_GetTick>
 8008914:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008916:	e005      	b.n	8008924 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008918:	f7fd fcaa 	bl	8006270 <HAL_GetTick>
 800891c:	1b43      	subs	r3, r0, r5
 800891e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008922:	d819      	bhi.n	8008958 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008924:	6873      	ldr	r3, [r6, #4]
 8008926:	049a      	lsls	r2, r3, #18
 8008928:	d5f6      	bpl.n	8008918 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800892a:	f1a4 031d 	sub.w	r3, r4, #29
 800892e:	2b01      	cmp	r3, #1
 8008930:	d905      	bls.n	800893e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8008932:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008936:	2801      	cmp	r0, #1
 8008938:	d901      	bls.n	800893e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800893a:	2000      	movs	r0, #0
}
 800893c:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800893e:	f7fd fc97 	bl	8006270 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008942:	4d06      	ldr	r5, [pc, #24]	; (800895c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008944:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008946:	68eb      	ldr	r3, [r5, #12]
 8008948:	03db      	lsls	r3, r3, #15
 800894a:	d4f6      	bmi.n	800893a <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800894c:	f7fd fc90 	bl	8006270 <HAL_GetTick>
 8008950:	1b00      	subs	r0, r0, r4
 8008952:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008956:	d9f6      	bls.n	8008946 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008958:	2001      	movs	r0, #1
}
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	58024800 	.word	0x58024800

08008960 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008960:	2800      	cmp	r0, #0
 8008962:	f000 81f7 	beq.w	8008d54 <HAL_RCC_OscConfig+0x3f4>
{
 8008966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008968:	6803      	ldr	r3, [r0, #0]
 800896a:	4604      	mov	r4, r0
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d52e      	bpl.n	80089ce <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008970:	49b4      	ldr	r1, [pc, #720]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008972:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008974:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008976:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800897a:	2a10      	cmp	r2, #16
 800897c:	f000 812c 	beq.w	8008bd8 <HAL_RCC_OscConfig+0x278>
 8008980:	2a18      	cmp	r2, #24
 8008982:	f000 8124 	beq.w	8008bce <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898c:	f000 8167 	beq.w	8008c5e <HAL_RCC_OscConfig+0x2fe>
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 817f 	beq.w	8008c94 <HAL_RCC_OscConfig+0x334>
 8008996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800899a:	4baa      	ldr	r3, [pc, #680]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	f000 8278 	beq.w	8008e92 <HAL_RCC_OscConfig+0x532>
 80089a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fd fc5e 	bl	8006270 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089b4:	4ea3      	ldr	r6, [pc, #652]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80089b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089b8:	e005      	b.n	80089c6 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ba:	f7fd fc59 	bl	8006270 <HAL_GetTick>
 80089be:	1b40      	subs	r0, r0, r5
 80089c0:	2864      	cmp	r0, #100	; 0x64
 80089c2:	f200 8165 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c6:	6833      	ldr	r3, [r6, #0]
 80089c8:	039f      	lsls	r7, r3, #14
 80089ca:	d5f6      	bpl.n	80089ba <HAL_RCC_OscConfig+0x5a>
 80089cc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ce:	0799      	lsls	r1, r3, #30
 80089d0:	d521      	bpl.n	8008a16 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d2:	4a9c      	ldr	r2, [pc, #624]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 80089d4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089d8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80089dc:	f040 80a8 	bne.w	8008b30 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089e0:	4b98      	ldr	r3, [pc, #608]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	075b      	lsls	r3, r3, #29
 80089e6:	d503      	bpl.n	80089f0 <HAL_RCC_OscConfig+0x90>
 80089e8:	68e3      	ldr	r3, [r4, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80ed 	beq.w	8008bca <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089f0:	f7fd fc56 	bl	80062a0 <HAL_GetREVID>
 80089f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80089f8:	4298      	cmp	r0, r3
 80089fa:	f200 8189 	bhi.w	8008d10 <HAL_RCC_OscConfig+0x3b0>
 80089fe:	6922      	ldr	r2, [r4, #16]
 8008a00:	2a40      	cmp	r2, #64	; 0x40
 8008a02:	f000 824e 	beq.w	8008ea2 <HAL_RCC_OscConfig+0x542>
 8008a06:	498f      	ldr	r1, [pc, #572]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008a08:	684b      	ldr	r3, [r1, #4]
 8008a0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a0e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a16:	06d9      	lsls	r1, r3, #27
 8008a18:	d456      	bmi.n	8008ac8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1a:	071d      	lsls	r5, r3, #28
 8008a1c:	d517      	bpl.n	8008a4e <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a1e:	6963      	ldr	r3, [r4, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 80b4 	beq.w	8008b8e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a26:	4b87      	ldr	r3, [pc, #540]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008a28:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a2a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008a32:	f7fd fc1d 	bl	8006270 <HAL_GetTick>
 8008a36:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a38:	e005      	b.n	8008a46 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a3a:	f7fd fc19 	bl	8006270 <HAL_GetTick>
 8008a3e:	1b40      	subs	r0, r0, r5
 8008a40:	2802      	cmp	r0, #2
 8008a42:	f200 8125 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a46:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008a48:	0798      	lsls	r0, r3, #30
 8008a4a:	d5f6      	bpl.n	8008a3a <HAL_RCC_OscConfig+0xda>
 8008a4c:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a4e:	069a      	lsls	r2, r3, #26
 8008a50:	d517      	bpl.n	8008a82 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a52:	69a3      	ldr	r3, [r4, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8134 	beq.w	8008cc2 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a5a:	4b7a      	ldr	r3, [pc, #488]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008a5c:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a5e:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008a66:	f7fd fc03 	bl	8006270 <HAL_GetTick>
 8008a6a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a6c:	e005      	b.n	8008a7a <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a6e:	f7fd fbff 	bl	8006270 <HAL_GetTick>
 8008a72:	1b40      	subs	r0, r0, r5
 8008a74:	2802      	cmp	r0, #2
 8008a76:	f200 810b 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a7a:	6833      	ldr	r3, [r6, #0]
 8008a7c:	049f      	lsls	r7, r3, #18
 8008a7e:	d5f6      	bpl.n	8008a6e <HAL_RCC_OscConfig+0x10e>
 8008a80:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a82:	0759      	lsls	r1, r3, #29
 8008a84:	f100 80b2 	bmi.w	8008bec <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a88:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a8a:	b1d8      	cbz	r0, 8008ac4 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a8c:	4b6d      	ldr	r3, [pc, #436]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008a94:	2a18      	cmp	r2, #24
 8008a96:	f000 81ce 	beq.w	8008e36 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a9a:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a9c:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a9e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008aa0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008aa4:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008aa6:	f000 8161 	beq.w	8008d6c <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aaa:	f7fd fbe1 	bl	8006270 <HAL_GetTick>
 8008aae:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ab0:	e005      	b.n	8008abe <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ab2:	f7fd fbdd 	bl	8006270 <HAL_GetTick>
 8008ab6:	1b00      	subs	r0, r0, r4
 8008ab8:	2802      	cmp	r0, #2
 8008aba:	f200 80e9 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	019b      	lsls	r3, r3, #6
 8008ac2:	d4f6      	bmi.n	8008ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008ac4:	2000      	movs	r0, #0
}
 8008ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac8:	4a5e      	ldr	r2, [pc, #376]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008aca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d072      	beq.n	8008bbc <HAL_RCC_OscConfig+0x25c>
 8008ad6:	2b18      	cmp	r3, #24
 8008ad8:	d06c      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ada:	69e3      	ldr	r3, [r4, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8103 	beq.w	8008ce8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8008ae2:	4b58      	ldr	r3, [pc, #352]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ae6:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8008ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008aee:	f7fd fbbf 	bl	8006270 <HAL_GetTick>
 8008af2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008af4:	e005      	b.n	8008b02 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008af6:	f7fd fbbb 	bl	8006270 <HAL_GetTick>
 8008afa:	1b40      	subs	r0, r0, r5
 8008afc:	2802      	cmp	r0, #2
 8008afe:	f200 80c7 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b02:	6833      	ldr	r3, [r6, #0]
 8008b04:	05db      	lsls	r3, r3, #23
 8008b06:	d5f6      	bpl.n	8008af6 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b08:	f7fd fbca 	bl	80062a0 <HAL_GetREVID>
 8008b0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b10:	4298      	cmp	r0, r3
 8008b12:	f200 81e9 	bhi.w	8008ee8 <HAL_RCC_OscConfig+0x588>
 8008b16:	6a22      	ldr	r2, [r4, #32]
 8008b18:	6873      	ldr	r3, [r6, #4]
 8008b1a:	2a20      	cmp	r2, #32
 8008b1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b20:	bf0c      	ite	eq
 8008b22:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008b26:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008b2a:	6073      	str	r3, [r6, #4]
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	e774      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b30:	2b18      	cmp	r3, #24
 8008b32:	f000 810b 	beq.w	8008d4c <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b36:	68e2      	ldr	r2, [r4, #12]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	f000 80f3 	beq.w	8008d24 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b3e:	4941      	ldr	r1, [pc, #260]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008b40:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b42:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b44:	f023 0319 	bic.w	r3, r3, #25
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008b4c:	f7fd fb90 	bl	8006270 <HAL_GetTick>
 8008b50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b52:	e005      	b.n	8008b60 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b54:	f7fd fb8c 	bl	8006270 <HAL_GetTick>
 8008b58:	1b40      	subs	r0, r0, r5
 8008b5a:	2802      	cmp	r0, #2
 8008b5c:	f200 8098 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	075f      	lsls	r7, r3, #29
 8008b64:	d5f6      	bpl.n	8008b54 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b66:	f7fd fb9b 	bl	80062a0 <HAL_GetREVID>
 8008b6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	f200 81c3 	bhi.w	8008efa <HAL_RCC_OscConfig+0x59a>
 8008b74:	6922      	ldr	r2, [r4, #16]
 8008b76:	6873      	ldr	r3, [r6, #4]
 8008b78:	2a40      	cmp	r2, #64	; 0x40
 8008b7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008b7e:	bf0c      	ite	eq
 8008b80:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008b84:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008b88:	6073      	str	r3, [r6, #4]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	e743      	b.n	8008a16 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8008b8e:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008b90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b92:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008b9a:	f7fd fb69 	bl	8006270 <HAL_GetTick>
 8008b9e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ba0:	e004      	b.n	8008bac <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ba2:	f7fd fb65 	bl	8006270 <HAL_GetTick>
 8008ba6:	1b40      	subs	r0, r0, r5
 8008ba8:	2802      	cmp	r0, #2
 8008baa:	d871      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bac:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008bae:	0799      	lsls	r1, r3, #30
 8008bb0:	d4f7      	bmi.n	8008ba2 <HAL_RCC_OscConfig+0x242>
 8008bb2:	e74b      	b.n	8008a4c <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008bb4:	f002 0203 	and.w	r2, r2, #3
 8008bb8:	2a01      	cmp	r2, #1
 8008bba:	d18e      	bne.n	8008ada <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bbc:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	05da      	lsls	r2, r3, #23
 8008bc2:	d552      	bpl.n	8008c6a <HAL_RCC_OscConfig+0x30a>
 8008bc4:	69e3      	ldr	r3, [r4, #28]
 8008bc6:	2b80      	cmp	r3, #128	; 0x80
 8008bc8:	d04f      	beq.n	8008c6a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8008bca:	2001      	movs	r0, #1
}
 8008bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bce:	f001 0103 	and.w	r1, r1, #3
 8008bd2:	2902      	cmp	r1, #2
 8008bd4:	f47f aed7 	bne.w	8008986 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd8:	4a1a      	ldr	r2, [pc, #104]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	0392      	lsls	r2, r2, #14
 8008bde:	f57f aef6 	bpl.w	80089ce <HAL_RCC_OscConfig+0x6e>
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	f47f aef2 	bne.w	80089ce <HAL_RCC_OscConfig+0x6e>
 8008bea:	e7ee      	b.n	8008bca <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008bec:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <HAL_RCC_OscConfig+0x2e8>)
 8008bee:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bf0:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8008bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008bf8:	f7fd fb3a 	bl	8006270 <HAL_GetTick>
 8008bfc:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bfe:	e004      	b.n	8008c0a <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c00:	f7fd fb36 	bl	8006270 <HAL_GetTick>
 8008c04:	1b40      	subs	r0, r0, r5
 8008c06:	2864      	cmp	r0, #100	; 0x64
 8008c08:	d842      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c0a:	6833      	ldr	r3, [r6, #0]
 8008c0c:	05da      	lsls	r2, r3, #23
 8008c0e:	d5f7      	bpl.n	8008c00 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	f000 817a 	beq.w	8008f0c <HAL_RCC_OscConfig+0x5ac>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 814b 	beq.w	8008eb4 <HAL_RCC_OscConfig+0x554>
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
 8008c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c24:	f000 8187 	beq.w	8008f36 <HAL_RCC_OscConfig+0x5d6>
 8008c28:	f022 0201 	bic.w	r2, r2, #1
 8008c2c:	671a      	str	r2, [r3, #112]	; 0x70
 8008c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c30:	f022 0204 	bic.w	r2, r2, #4
 8008c34:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008c36:	f7fd fb1b 	bl	8006270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c3a:	4e02      	ldr	r6, [pc, #8]	; (8008c44 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c3c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008c40:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x2f6>
 8008c44:	58024400 	.word	0x58024400
 8008c48:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c4c:	f7fd fb10 	bl	8006270 <HAL_GetTick>
 8008c50:	1b40      	subs	r0, r0, r5
 8008c52:	42b8      	cmp	r0, r7
 8008c54:	d81c      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c56:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008c58:	079b      	lsls	r3, r3, #30
 8008c5a:	d5f7      	bpl.n	8008c4c <HAL_RCC_OscConfig+0x2ec>
 8008c5c:	e714      	b.n	8008a88 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c5e:	4aae      	ldr	r2, [pc, #696]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008c60:	6813      	ldr	r3, [r2, #0]
 8008c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c66:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c68:	e6a2      	b.n	80089b0 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c6a:	f7fd fb19 	bl	80062a0 <HAL_GetREVID>
 8008c6e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008c72:	4298      	cmp	r0, r3
 8008c74:	d870      	bhi.n	8008d58 <HAL_RCC_OscConfig+0x3f8>
 8008c76:	6a22      	ldr	r2, [r4, #32]
 8008c78:	2a20      	cmp	r2, #32
 8008c7a:	f000 8153 	beq.w	8008f24 <HAL_RCC_OscConfig+0x5c4>
 8008c7e:	49a6      	ldr	r1, [pc, #664]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008c80:	684b      	ldr	r3, [r1, #4]
 8008c82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c86:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008c8a:	604b      	str	r3, [r1, #4]
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	e6c4      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8008c90:	2003      	movs	r0, #3
}
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c94:	4ba0      	ldr	r3, [pc, #640]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008c96:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c98:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ca6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008ca8:	f7fd fae2 	bl	8006270 <HAL_GetTick>
 8008cac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cae:	e004      	b.n	8008cba <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cb0:	f7fd fade 	bl	8006270 <HAL_GetTick>
 8008cb4:	1b40      	subs	r0, r0, r5
 8008cb6:	2864      	cmp	r0, #100	; 0x64
 8008cb8:	d8ea      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cba:	6833      	ldr	r3, [r6, #0]
 8008cbc:	0398      	lsls	r0, r3, #14
 8008cbe:	d4f7      	bmi.n	8008cb0 <HAL_RCC_OscConfig+0x350>
 8008cc0:	e684      	b.n	80089cc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8008cc2:	4b95      	ldr	r3, [pc, #596]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cc6:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8008cc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ccc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008cce:	f7fd facf 	bl	8006270 <HAL_GetTick>
 8008cd2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cd4:	e004      	b.n	8008ce0 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008cd6:	f7fd facb 	bl	8006270 <HAL_GetTick>
 8008cda:	1b40      	subs	r0, r0, r5
 8008cdc:	2802      	cmp	r0, #2
 8008cde:	d8d7      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	0498      	lsls	r0, r3, #18
 8008ce4:	d4f7      	bmi.n	8008cd6 <HAL_RCC_OscConfig+0x376>
 8008ce6:	e6cb      	b.n	8008a80 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8008ce8:	4b8b      	ldr	r3, [pc, #556]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008cea:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008cec:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8008cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008cf4:	f7fd fabc 	bl	8006270 <HAL_GetTick>
 8008cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008cfa:	e004      	b.n	8008d06 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008cfc:	f7fd fab8 	bl	8006270 <HAL_GetTick>
 8008d00:	1b40      	subs	r0, r0, r5
 8008d02:	2802      	cmp	r0, #2
 8008d04:	d8c4      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d06:	6833      	ldr	r3, [r6, #0]
 8008d08:	05df      	lsls	r7, r3, #23
 8008d0a:	d4f7      	bmi.n	8008cfc <HAL_RCC_OscConfig+0x39c>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	e684      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d10:	4a81      	ldr	r2, [pc, #516]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008d12:	6921      	ldr	r1, [r4, #16]
 8008d14:	6853      	ldr	r3, [r2, #4]
 8008d16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d1e:	6053      	str	r3, [r2, #4]
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	e678      	b.n	8008a16 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8008d24:	4b7c      	ldr	r3, [pc, #496]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008d26:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d28:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d30:	f7fd fa9e 	bl	8006270 <HAL_GetTick>
 8008d34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d36:	e004      	b.n	8008d42 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d38:	f7fd fa9a 	bl	8006270 <HAL_GetTick>
 8008d3c:	1b40      	subs	r0, r0, r5
 8008d3e:	2802      	cmp	r0, #2
 8008d40:	d8a6      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d42:	6833      	ldr	r3, [r6, #0]
 8008d44:	0758      	lsls	r0, r3, #29
 8008d46:	d4f7      	bmi.n	8008d38 <HAL_RCC_OscConfig+0x3d8>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	e664      	b.n	8008a16 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d4c:	0792      	lsls	r2, r2, #30
 8008d4e:	f47f aef2 	bne.w	8008b36 <HAL_RCC_OscConfig+0x1d6>
 8008d52:	e645      	b.n	80089e0 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008d54:	2001      	movs	r0, #1
}
 8008d56:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d58:	4a6f      	ldr	r2, [pc, #444]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008d5a:	6a21      	ldr	r1, [r4, #32]
 8008d5c:	68d3      	ldr	r3, [r2, #12]
 8008d5e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008d62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d66:	60d3      	str	r3, [r2, #12]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	e656      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8008d6c:	f7fd fa80 	bl	8006270 <HAL_GetTick>
 8008d70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d72:	e004      	b.n	8008d7e <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d74:	f7fd fa7c 	bl	8006270 <HAL_GetTick>
 8008d78:	1b80      	subs	r0, r0, r6
 8008d7a:	2802      	cmp	r0, #2
 8008d7c:	d888      	bhi.n	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	0199      	lsls	r1, r3, #6
 8008d82:	d4f7      	bmi.n	8008d74 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008d86:	4b65      	ldr	r3, [pc, #404]	; (8008f1c <HAL_RCC_OscConfig+0x5bc>)
 8008d88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d8e:	4964      	ldr	r1, [pc, #400]	; (8008f20 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d90:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d92:	4e61      	ldr	r6, [pc, #388]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d94:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008d98:	62ab      	str	r3, [r5, #40]	; 0x28
 8008d9a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008d9c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8008da0:	3f01      	subs	r7, #1
 8008da2:	1e50      	subs	r0, r2, #1
 8008da4:	3b01      	subs	r3, #1
 8008da6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008da8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008dac:	025b      	lsls	r3, r3, #9
 8008dae:	0400      	lsls	r0, r0, #16
 8008db0:	3a01      	subs	r2, #1
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008db8:	0612      	lsls	r2, r2, #24
 8008dba:	4303      	orrs	r3, r0
 8008dbc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008dc0:	433b      	orrs	r3, r7
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008dc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dce:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008dd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008dd2:	4011      	ands	r1, r2
 8008dd4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008dd8:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dde:	f023 030c 	bic.w	r3, r3, #12
 8008de2:	4313      	orrs	r3, r2
 8008de4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008de6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008de8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008dea:	f023 0302 	bic.w	r3, r3, #2
 8008dee:	4313      	orrs	r3, r2
 8008df0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008df2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e00:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e08:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e0c:	f043 0301 	orr.w	r3, r3, #1
 8008e10:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008e1a:	f7fd fa29 	bl	8006270 <HAL_GetTick>
 8008e1e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e20:	e005      	b.n	8008e2e <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e22:	f7fd fa25 	bl	8006270 <HAL_GetTick>
 8008e26:	1b00      	subs	r0, r0, r4
 8008e28:	2802      	cmp	r0, #2
 8008e2a:	f63f af31 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e2e:	6833      	ldr	r3, [r6, #0]
 8008e30:	019a      	lsls	r2, r3, #6
 8008e32:	d5f6      	bpl.n	8008e22 <HAL_RCC_OscConfig+0x4c2>
 8008e34:	e646      	b.n	8008ac4 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e36:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e3a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e3c:	f43f ae43 	beq.w	8008ac6 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e40:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008e46:	428b      	cmp	r3, r1
 8008e48:	f47f aebf 	bne.w	8008bca <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e4c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f47f aeb9 	bne.w	8008bca <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008e5a:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8008e5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e60:	429a      	cmp	r2, r3
 8008e62:	f47f aeb2 	bne.w	8008bca <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e68:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008e6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	f47f aeab 	bne.w	8008bca <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e76:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8008e7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	f47f aea4 	bne.w	8008bca <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008e84:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008e88:	3801      	subs	r0, #1
  return HAL_OK;
 8008e8a:	1a28      	subs	r0, r5, r0
 8008e8c:	bf18      	it	ne
 8008e8e:	2001      	movne	r0, #1
}
 8008e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e586      	b.n	80089b0 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ea2:	4a1d      	ldr	r2, [pc, #116]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008ea4:	6853      	ldr	r3, [r2, #4]
 8008ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eae:	6053      	str	r3, [r2, #4]
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	e5b0      	b.n	8008a16 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb4:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eb6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ebc:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ebe:	f022 0201 	bic.w	r2, r2, #1
 8008ec2:	671a      	str	r2, [r3, #112]	; 0x70
 8008ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ec6:	f022 0204 	bic.w	r2, r2, #4
 8008eca:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008ecc:	f7fd f9d0 	bl	8006270 <HAL_GetTick>
 8008ed0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ed2:	e005      	b.n	8008ee0 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed4:	f7fd f9cc 	bl	8006270 <HAL_GetTick>
 8008ed8:	1b40      	subs	r0, r0, r5
 8008eda:	42b8      	cmp	r0, r7
 8008edc:	f63f aed8 	bhi.w	8008c90 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ee0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008ee2:	0798      	lsls	r0, r3, #30
 8008ee4:	d4f6      	bmi.n	8008ed4 <HAL_RCC_OscConfig+0x574>
 8008ee6:	e5cf      	b.n	8008a88 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ee8:	68f3      	ldr	r3, [r6, #12]
 8008eea:	6a22      	ldr	r2, [r4, #32]
 8008eec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008ef0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ef4:	60f3      	str	r3, [r6, #12]
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	e58f      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008efa:	6873      	ldr	r3, [r6, #4]
 8008efc:	6922      	ldr	r2, [r4, #16]
 8008efe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f06:	6073      	str	r3, [r6, #4]
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	e584      	b.n	8008a16 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f0c:	4a02      	ldr	r2, [pc, #8]	; (8008f18 <HAL_RCC_OscConfig+0x5b8>)
 8008f0e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008f10:	f043 0301 	orr.w	r3, r3, #1
 8008f14:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f16:	e68e      	b.n	8008c36 <HAL_RCC_OscConfig+0x2d6>
 8008f18:	58024400 	.word	0x58024400
 8008f1c:	fffffc0c 	.word	0xfffffc0c
 8008f20:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f24:	4a08      	ldr	r2, [pc, #32]	; (8008f48 <HAL_RCC_OscConfig+0x5e8>)
 8008f26:	6853      	ldr	r3, [r2, #4]
 8008f28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	e571      	b.n	8008a1a <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f36:	f042 0204 	orr.w	r2, r2, #4
 8008f3a:	671a      	str	r2, [r3, #112]	; 0x70
 8008f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	671a      	str	r2, [r3, #112]	; 0x70
 8008f44:	e677      	b.n	8008c36 <HAL_RCC_OscConfig+0x2d6>
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400

08008f4c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f4c:	4a47      	ldr	r2, [pc, #284]	; (800906c <HAL_RCC_GetSysClockFreq+0x120>)
 8008f4e:	6913      	ldr	r3, [r2, #16]
 8008f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d004      	beq.n	8008f62 <HAL_RCC_GetSysClockFreq+0x16>
 8008f58:	2b18      	cmp	r3, #24
 8008f5a:	d00d      	beq.n	8008f78 <HAL_RCC_GetSysClockFreq+0x2c>
 8008f5c:	b11b      	cbz	r3, 8008f66 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f5e:	4844      	ldr	r0, [pc, #272]	; (8009070 <HAL_RCC_GetSysClockFreq+0x124>)
 8008f60:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f62:	4844      	ldr	r0, [pc, #272]	; (8009074 <HAL_RCC_GetSysClockFreq+0x128>)
 8008f64:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	0699      	lsls	r1, r3, #26
 8008f6a:	d54a      	bpl.n	8009002 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f6c:	6813      	ldr	r3, [r2, #0]
 8008f6e:	4842      	ldr	r0, [pc, #264]	; (8009078 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008f70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008f74:	40d8      	lsrs	r0, r3
 8008f76:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f78:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008f7a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f7c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008f80:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f84:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f88:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008f8a:	d038      	beq.n	8008ffe <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f8c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f90:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f94:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f98:	fb01 f105 	mul.w	r1, r1, r5
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	ee07 1a90 	vmov	s15, r1
 8008fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8008fa6:	d002      	beq.n	8008fae <HAL_RCC_GetSysClockFreq+0x62>
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d02c      	beq.n	8009006 <HAL_RCC_GetSysClockFreq+0xba>
 8008fac:	b393      	cbz	r3, 8009014 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fae:	ee07 0a90 	vmov	s15, r0
 8008fb2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800907c <HAL_RCC_GetSysClockFreq+0x130>
 8008fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008fbc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008fc0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009080 <HAL_RCC_GetSysClockFreq+0x134>
 8008fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd4:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008fd8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008fdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008fe0:	4b22      	ldr	r3, [pc, #136]	; (800906c <HAL_RCC_GetSysClockFreq+0x120>)
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008fe8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ffa:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008ffe:	bc30      	pop	{r4, r5}
 8009000:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009002:	481d      	ldr	r0, [pc, #116]	; (8009078 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009004:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009006:	ee07 0a90 	vmov	s15, r0
 800900a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8009084 <HAL_RCC_GetSysClockFreq+0x138>
 800900e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009012:	e7d2      	b.n	8008fba <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009014:	6813      	ldr	r3, [r2, #0]
 8009016:	069b      	lsls	r3, r3, #26
 8009018:	d520      	bpl.n	800905c <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901a:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800901c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009020:	4915      	ldr	r1, [pc, #84]	; (8009078 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009022:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009026:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800902a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902e:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009030:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009032:	eddf 4a13 	vldr	s9, [pc, #76]	; 8009080 <HAL_RCC_GetSysClockFreq+0x134>
 8009036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903a:	ee06 1a10 	vmov	s12, r1
 800903e:	ee06 3a90 	vmov	s13, r3
 8009042:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009046:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800904a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800904e:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009052:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009056:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800905a:	e7c1      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800905c:	ee07 0a90 	vmov	s15, r0
 8009060:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8009088 <HAL_RCC_GetSysClockFreq+0x13c>
 8009064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009068:	e7a7      	b.n	8008fba <HAL_RCC_GetSysClockFreq+0x6e>
 800906a:	bf00      	nop
 800906c:	58024400 	.word	0x58024400
 8009070:	003d0900 	.word	0x003d0900
 8009074:	017d7840 	.word	0x017d7840
 8009078:	03d09000 	.word	0x03d09000
 800907c:	4a742400 	.word	0x4a742400
 8009080:	39000000 	.word	0x39000000
 8009084:	4bbebc20 	.word	0x4bbebc20
 8009088:	4c742400 	.word	0x4c742400

0800908c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800908c:	2800      	cmp	r0, #0
 800908e:	f000 810e 	beq.w	80092ae <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009092:	4a8d      	ldr	r2, [pc, #564]	; (80092c8 <HAL_RCC_ClockConfig+0x23c>)
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	428b      	cmp	r3, r1
{
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090a4:	d20c      	bcs.n	80090c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	f023 030f 	bic.w	r3, r3, #15
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090b0:	6813      	ldr	r3, [r2, #0]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	428b      	cmp	r3, r1
 80090b8:	d002      	beq.n	80090c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
}
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	075f      	lsls	r7, r3, #29
 80090c4:	d50b      	bpl.n	80090de <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090c6:	4981      	ldr	r1, [pc, #516]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 80090c8:	6920      	ldr	r0, [r4, #16]
 80090ca:	698a      	ldr	r2, [r1, #24]
 80090cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80090d0:	4290      	cmp	r0, r2
 80090d2:	d904      	bls.n	80090de <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090d4:	698a      	ldr	r2, [r1, #24]
 80090d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090da:	4302      	orrs	r2, r0
 80090dc:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090de:	071e      	lsls	r6, r3, #28
 80090e0:	d50b      	bpl.n	80090fa <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090e2:	497a      	ldr	r1, [pc, #488]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 80090e4:	6960      	ldr	r0, [r4, #20]
 80090e6:	69ca      	ldr	r2, [r1, #28]
 80090e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80090ec:	4290      	cmp	r0, r2
 80090ee:	d904      	bls.n	80090fa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090f0:	69ca      	ldr	r2, [r1, #28]
 80090f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090f6:	4302      	orrs	r2, r0
 80090f8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090fa:	06d8      	lsls	r0, r3, #27
 80090fc:	d50b      	bpl.n	8009116 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090fe:	4973      	ldr	r1, [pc, #460]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 8009100:	69a0      	ldr	r0, [r4, #24]
 8009102:	69ca      	ldr	r2, [r1, #28]
 8009104:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009108:	4290      	cmp	r0, r2
 800910a:	d904      	bls.n	8009116 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800910c:	69ca      	ldr	r2, [r1, #28]
 800910e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009112:	4302      	orrs	r2, r0
 8009114:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009116:	0699      	lsls	r1, r3, #26
 8009118:	d50b      	bpl.n	8009132 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800911a:	496c      	ldr	r1, [pc, #432]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 800911c:	69e0      	ldr	r0, [r4, #28]
 800911e:	6a0a      	ldr	r2, [r1, #32]
 8009120:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009124:	4290      	cmp	r0, r2
 8009126:	d904      	bls.n	8009132 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009128:	6a0a      	ldr	r2, [r1, #32]
 800912a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800912e:	4302      	orrs	r2, r0
 8009130:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009132:	079a      	lsls	r2, r3, #30
 8009134:	f140 80ad 	bpl.w	8009292 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009138:	4864      	ldr	r0, [pc, #400]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 800913a:	68e1      	ldr	r1, [r4, #12]
 800913c:	6982      	ldr	r2, [r0, #24]
 800913e:	f002 020f 	and.w	r2, r2, #15
 8009142:	4291      	cmp	r1, r2
 8009144:	d904      	bls.n	8009150 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009146:	6982      	ldr	r2, [r0, #24]
 8009148:	f022 020f 	bic.w	r2, r2, #15
 800914c:	430a      	orrs	r2, r1
 800914e:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009150:	07d8      	lsls	r0, r3, #31
 8009152:	d531      	bpl.n	80091b8 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009154:	4a5d      	ldr	r2, [pc, #372]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 8009156:	68a1      	ldr	r1, [r4, #8]
 8009158:	6993      	ldr	r3, [r2, #24]
 800915a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800915e:	430b      	orrs	r3, r1
 8009160:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009162:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009164:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009166:	2902      	cmp	r1, #2
 8009168:	f000 80a3 	beq.w	80092b2 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800916c:	2903      	cmp	r1, #3
 800916e:	f000 809a 	beq.w	80092a6 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009172:	2901      	cmp	r1, #1
 8009174:	f000 80a3 	beq.w	80092be <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009178:	0758      	lsls	r0, r3, #29
 800917a:	d59e      	bpl.n	80090ba <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800917c:	4a53      	ldr	r2, [pc, #332]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800917e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009182:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009184:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009186:	f023 0307 	bic.w	r3, r3, #7
 800918a:	430b      	orrs	r3, r1
 800918c:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800918e:	f7fd f86f 	bl	8006270 <HAL_GetTick>
 8009192:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009194:	e005      	b.n	80091a2 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009196:	f7fd f86b 	bl	8006270 <HAL_GetTick>
 800919a:	1b80      	subs	r0, r0, r6
 800919c:	4540      	cmp	r0, r8
 800919e:	f200 808c 	bhi.w	80092ba <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6862      	ldr	r2, [r4, #4]
 80091a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091aa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80091ae:	d1f2      	bne.n	8009196 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	0799      	lsls	r1, r3, #30
 80091b4:	d506      	bpl.n	80091c4 <HAL_RCC_ClockConfig+0x138>
 80091b6:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b8:	4844      	ldr	r0, [pc, #272]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 80091ba:	6982      	ldr	r2, [r0, #24]
 80091bc:	f002 020f 	and.w	r2, r2, #15
 80091c0:	428a      	cmp	r2, r1
 80091c2:	d86a      	bhi.n	800929a <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091c4:	4940      	ldr	r1, [pc, #256]	; (80092c8 <HAL_RCC_ClockConfig+0x23c>)
 80091c6:	680a      	ldr	r2, [r1, #0]
 80091c8:	f002 020f 	and.w	r2, r2, #15
 80091cc:	42aa      	cmp	r2, r5
 80091ce:	d90a      	bls.n	80091e6 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d0:	680a      	ldr	r2, [r1, #0]
 80091d2:	f022 020f 	bic.w	r2, r2, #15
 80091d6:	432a      	orrs	r2, r5
 80091d8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091da:	680a      	ldr	r2, [r1, #0]
 80091dc:	f002 020f 	and.w	r2, r2, #15
 80091e0:	42aa      	cmp	r2, r5
 80091e2:	f47f af6a 	bne.w	80090ba <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091e6:	075a      	lsls	r2, r3, #29
 80091e8:	d50b      	bpl.n	8009202 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091ea:	4938      	ldr	r1, [pc, #224]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 80091ec:	6920      	ldr	r0, [r4, #16]
 80091ee:	698a      	ldr	r2, [r1, #24]
 80091f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80091f4:	4290      	cmp	r0, r2
 80091f6:	d204      	bcs.n	8009202 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091f8:	698a      	ldr	r2, [r1, #24]
 80091fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80091fe:	4302      	orrs	r2, r0
 8009200:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009202:	071f      	lsls	r7, r3, #28
 8009204:	d50b      	bpl.n	800921e <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009206:	4931      	ldr	r1, [pc, #196]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 8009208:	6960      	ldr	r0, [r4, #20]
 800920a:	69ca      	ldr	r2, [r1, #28]
 800920c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009210:	4290      	cmp	r0, r2
 8009212:	d204      	bcs.n	800921e <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009214:	69ca      	ldr	r2, [r1, #28]
 8009216:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800921a:	4302      	orrs	r2, r0
 800921c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800921e:	06de      	lsls	r6, r3, #27
 8009220:	d50b      	bpl.n	800923a <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009222:	492a      	ldr	r1, [pc, #168]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 8009224:	69a0      	ldr	r0, [r4, #24]
 8009226:	69ca      	ldr	r2, [r1, #28]
 8009228:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800922c:	4290      	cmp	r0, r2
 800922e:	d204      	bcs.n	800923a <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009230:	69ca      	ldr	r2, [r1, #28]
 8009232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009236:	4302      	orrs	r2, r0
 8009238:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800923a:	069d      	lsls	r5, r3, #26
 800923c:	d50b      	bpl.n	8009256 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800923e:	4a23      	ldr	r2, [pc, #140]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 8009240:	69e1      	ldr	r1, [r4, #28]
 8009242:	6a13      	ldr	r3, [r2, #32]
 8009244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009248:	4299      	cmp	r1, r3
 800924a:	d204      	bcs.n	8009256 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800924c:	6a13      	ldr	r3, [r2, #32]
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009252:	430b      	orrs	r3, r1
 8009254:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009256:	f7ff fe79 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 800925a:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <HAL_RCC_ClockConfig+0x240>)
 800925c:	4602      	mov	r2, r0
 800925e:	481c      	ldr	r0, [pc, #112]	; (80092d0 <HAL_RCC_ClockConfig+0x244>)
 8009260:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009262:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009264:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8009268:	4d1a      	ldr	r5, [pc, #104]	; (80092d4 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	4c1a      	ldr	r4, [pc, #104]	; (80092d8 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009270:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009272:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009274:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8009278:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800927a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800927e:	4d17      	ldr	r5, [pc, #92]	; (80092dc <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009280:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009282:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8009286:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009288:	6023      	str	r3, [r4, #0]
}
 800928a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800928e:	f7fc bf8d 	b.w	80061ac <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009292:	07da      	lsls	r2, r3, #31
 8009294:	f53f af5e 	bmi.w	8009154 <HAL_RCC_ClockConfig+0xc8>
 8009298:	e794      	b.n	80091c4 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800929a:	6982      	ldr	r2, [r0, #24]
 800929c:	f022 020f 	bic.w	r2, r2, #15
 80092a0:	4311      	orrs	r1, r2
 80092a2:	6181      	str	r1, [r0, #24]
 80092a4:	e78e      	b.n	80091c4 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092a6:	019f      	lsls	r7, r3, #6
 80092a8:	f53f af68 	bmi.w	800917c <HAL_RCC_ClockConfig+0xf0>
 80092ac:	e705      	b.n	80090ba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80092ae:	2001      	movs	r0, #1
}
 80092b0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092b2:	039b      	lsls	r3, r3, #14
 80092b4:	f53f af62 	bmi.w	800917c <HAL_RCC_ClockConfig+0xf0>
 80092b8:	e6ff      	b.n	80090ba <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80092ba:	2003      	movs	r0, #3
 80092bc:	e6fe      	b.n	80090bc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092be:	05de      	lsls	r6, r3, #23
 80092c0:	f53f af5c 	bmi.w	800917c <HAL_RCC_ClockConfig+0xf0>
 80092c4:	e6f9      	b.n	80090ba <HAL_RCC_ClockConfig+0x2e>
 80092c6:	bf00      	nop
 80092c8:	52002000 	.word	0x52002000
 80092cc:	58024400 	.word	0x58024400
 80092d0:	0800abe4 	.word	0x0800abe4
 80092d4:	2400106c 	.word	0x2400106c
 80092d8:	24000004 	.word	0x24000004
 80092dc:	24000000 	.word	0x24000000

080092e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092e0:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092e2:	f7ff fe33 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <HAL_RCC_GetHCLKFreq+0x34>)
 80092e8:	490b      	ldr	r1, [pc, #44]	; (8009318 <HAL_RCC_GetHCLKFreq+0x38>)
 80092ea:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092ec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092ee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092f2:	4c0a      	ldr	r4, [pc, #40]	; (800931c <HAL_RCC_GetHCLKFreq+0x3c>)
 80092f4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f8:	4d09      	ldr	r5, [pc, #36]	; (8009320 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092fa:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092fc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092fe:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009302:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009306:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800930a:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800930e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009310:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	58024400 	.word	0x58024400
 8009318:	0800abe4 	.word	0x0800abe4
 800931c:	24000004 	.word	0x24000004
 8009320:	24000000 	.word	0x24000000

08009324 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009324:	4a3b      	ldr	r2, [pc, #236]	; (8009414 <RCCEx_PLL2_Config+0xf0>)
{
 8009326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009328:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	2b03      	cmp	r3, #3
 8009330:	d069      	beq.n	8009406 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009338:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800933a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800933e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009340:	f7fc ff96 	bl	8006270 <HAL_GetTick>
 8009344:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009346:	e004      	b.n	8009352 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009348:	f7fc ff92 	bl	8006270 <HAL_GetTick>
 800934c:	1b43      	subs	r3, r0, r5
 800934e:	2b02      	cmp	r3, #2
 8009350:	d857      	bhi.n	8009402 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	011a      	lsls	r2, r3, #4
 8009356:	d4f7      	bmi.n	8009348 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800935a:	6832      	ldr	r2, [r6, #0]
 800935c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009360:	492d      	ldr	r1, [pc, #180]	; (8009418 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009362:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009366:	62a3      	str	r3, [r4, #40]	; 0x28
 8009368:	6875      	ldr	r5, [r6, #4]
 800936a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800936e:	3d01      	subs	r5, #1
 8009370:	1e50      	subs	r0, r2, #1
 8009372:	3b01      	subs	r3, #1
 8009374:	6932      	ldr	r2, [r6, #16]
 8009376:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800937a:	025b      	lsls	r3, r3, #9
 800937c:	0400      	lsls	r0, r0, #16
 800937e:	3a01      	subs	r2, #1
 8009380:	b29b      	uxth	r3, r3
 8009382:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009386:	0612      	lsls	r2, r2, #24
 8009388:	4303      	orrs	r3, r0
 800938a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800938e:	432b      	orrs	r3, r5
 8009390:	4313      	orrs	r3, r2
 8009392:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009396:	6972      	ldr	r2, [r6, #20]
 8009398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800939c:	4313      	orrs	r3, r2
 800939e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093a2:	69b2      	ldr	r2, [r6, #24]
 80093a4:	f023 0320 	bic.w	r3, r3, #32
 80093a8:	4313      	orrs	r3, r2
 80093aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093ae:	f023 0310 	bic.w	r3, r3, #16
 80093b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80093b6:	69f3      	ldr	r3, [r6, #28]
 80093b8:	4011      	ands	r1, r2
 80093ba:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80093be:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093c2:	f043 0310 	orr.w	r3, r3, #16
 80093c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80093ca:	b1f7      	cbz	r7, 800940a <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093cc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093ce:	bf0c      	ite	eq
 80093d0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093d4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80093d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093da:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <RCCEx_PLL2_Config+0xf0>)
 80093dc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093de:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80093e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80093e4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80093e6:	f7fc ff43 	bl	8006270 <HAL_GetTick>
 80093ea:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093ec:	e004      	b.n	80093f8 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093ee:	f7fc ff3f 	bl	8006270 <HAL_GetTick>
 80093f2:	1b00      	subs	r0, r0, r4
 80093f4:	2802      	cmp	r0, #2
 80093f6:	d804      	bhi.n	8009402 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	d5f7      	bpl.n	80093ee <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80093fe:	2000      	movs	r0, #0
}
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8009402:	2003      	movs	r0, #3
}
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009406:	2001      	movs	r0, #1
}
 8009408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800940a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800940e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009410:	e7e3      	b.n	80093da <RCCEx_PLL2_Config+0xb6>
 8009412:	bf00      	nop
 8009414:	58024400 	.word	0x58024400
 8009418:	ffff0007 	.word	0xffff0007

0800941c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800941c:	4a3b      	ldr	r2, [pc, #236]	; (800950c <RCCEx_PLL3_Config+0xf0>)
{
 800941e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009420:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d069      	beq.n	80094fe <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009430:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8009432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009436:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009438:	f7fc ff1a 	bl	8006270 <HAL_GetTick>
 800943c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800943e:	e004      	b.n	800944a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009440:	f7fc ff16 	bl	8006270 <HAL_GetTick>
 8009444:	1b43      	subs	r3, r0, r5
 8009446:	2b02      	cmp	r3, #2
 8009448:	d857      	bhi.n	80094fa <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	009a      	lsls	r2, r3, #2
 800944e:	d4f7      	bmi.n	8009440 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009452:	6832      	ldr	r2, [r6, #0]
 8009454:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009458:	492d      	ldr	r1, [pc, #180]	; (8009510 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800945a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800945e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009460:	6875      	ldr	r5, [r6, #4]
 8009462:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009466:	3d01      	subs	r5, #1
 8009468:	1e50      	subs	r0, r2, #1
 800946a:	3b01      	subs	r3, #1
 800946c:	6932      	ldr	r2, [r6, #16]
 800946e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009472:	025b      	lsls	r3, r3, #9
 8009474:	0400      	lsls	r0, r0, #16
 8009476:	3a01      	subs	r2, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800947e:	0612      	lsls	r2, r2, #24
 8009480:	4303      	orrs	r3, r0
 8009482:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009486:	432b      	orrs	r3, r5
 8009488:	4313      	orrs	r3, r2
 800948a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800948c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800948e:	6972      	ldr	r2, [r6, #20]
 8009490:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009494:	4313      	orrs	r3, r2
 8009496:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800949a:	69b2      	ldr	r2, [r6, #24]
 800949c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a0:	4313      	orrs	r3, r2
 80094a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80094ae:	69f3      	ldr	r3, [r6, #28]
 80094b0:	4011      	ands	r1, r2
 80094b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80094b6:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80094c2:	b1f7      	cbz	r7, 8009502 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094c4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094c6:	bf0c      	ite	eq
 80094c8:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094cc:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80094d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094d2:	4b0e      	ldr	r3, [pc, #56]	; (800950c <RCCEx_PLL3_Config+0xf0>)
 80094d4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094d6:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80094d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80094de:	f7fc fec7 	bl	8006270 <HAL_GetTick>
 80094e2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094e4:	e004      	b.n	80094f0 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094e6:	f7fc fec3 	bl	8006270 <HAL_GetTick>
 80094ea:	1b00      	subs	r0, r0, r4
 80094ec:	2802      	cmp	r0, #2
 80094ee:	d804      	bhi.n	80094fa <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	d5f7      	bpl.n	80094e6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80094f6:	2000      	movs	r0, #0
}
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80094fa:	2003      	movs	r0, #3
}
 80094fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80094fe:	2001      	movs	r0, #1
}
 8009500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009506:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009508:	e7e3      	b.n	80094d2 <RCCEx_PLL3_Config+0xb6>
 800950a:	bf00      	nop
 800950c:	58024400 	.word	0x58024400
 8009510:	ffff0007 	.word	0xffff0007

08009514 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009518:	6803      	ldr	r3, [r0, #0]
{
 800951a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800951c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8009520:	d01c      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009522:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009524:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009528:	f000 84c7 	beq.w	8009eba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800952c:	d823      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800952e:	2a00      	cmp	r2, #0
 8009530:	f000 842c 	beq.w	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8009534:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009538:	d120      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800953a:	2102      	movs	r1, #2
 800953c:	3004      	adds	r0, #4
 800953e:	f7ff fef1 	bl	8009324 <RCCEx_PLL2_Config>
 8009542:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009544:	2e00      	cmp	r6, #0
 8009546:	f040 84c0 	bne.w	8009eca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 800954a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800954c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800954e:	48b0      	ldr	r0, [pc, #704]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009550:	2600      	movs	r6, #0
 8009552:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009554:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8009558:	430a      	orrs	r2, r1
 800955a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800955c:	05da      	lsls	r2, r3, #23
 800955e:	d511      	bpl.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009560:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009562:	2a04      	cmp	r2, #4
 8009564:	f200 8580 	bhi.w	800a068 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8009568:	e8df f012 	tbh	[pc, r2, lsl #1]
 800956c:	04c104ba 	.word	0x04c104ba
 8009570:	033b04b2 	.word	0x033b04b2
 8009574:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009576:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800957a:	d0e8      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800957c:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800957e:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009582:	d4ed      	bmi.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009584:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009586:	059f      	lsls	r7, r3, #22
 8009588:	d51b      	bpl.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800958a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800958c:	2a80      	cmp	r2, #128	; 0x80
 800958e:	f000 84b7 	beq.w	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8009592:	f200 8127 	bhi.w	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009596:	2a00      	cmp	r2, #0
 8009598:	f000 83e6 	beq.w	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800959c:	2a40      	cmp	r2, #64	; 0x40
 800959e:	f040 8128 	bne.w	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095a2:	2100      	movs	r1, #0
 80095a4:	1d20      	adds	r0, r4, #4
 80095a6:	f7ff febd 	bl	8009324 <RCCEx_PLL2_Config>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	f040 83cc 	bne.w	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80095b4:	4996      	ldr	r1, [pc, #600]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80095b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80095b8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80095ba:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80095be:	4302      	orrs	r2, r0
 80095c0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80095c2:	0558      	lsls	r0, r3, #21
 80095c4:	d51f      	bpl.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80095c6:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80095ca:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80095ce:	f000 8462 	beq.w	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80095d2:	f200 8111 	bhi.w	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	f000 83c0 	beq.w	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80095dc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80095e0:	f040 8112 	bne.w	8009808 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095e4:	2100      	movs	r1, #0
 80095e6:	1d20      	adds	r0, r4, #4
 80095e8:	f7ff fe9c 	bl	8009324 <RCCEx_PLL2_Config>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	f040 83b1 	bne.w	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095f6:	4986      	ldr	r1, [pc, #536]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80095f8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80095fc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80095fe:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8009602:	4302      	orrs	r2, r0
 8009604:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009606:	0519      	lsls	r1, r3, #20
 8009608:	d51f      	bpl.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800960a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800960e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8009612:	f000 8437 	beq.w	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8009616:	f200 80fd 	bhi.w	8009814 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800961a:	2a00      	cmp	r2, #0
 800961c:	f000 83aa 	beq.w	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009620:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009624:	f040 80fe 	bne.w	8009824 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009628:	2100      	movs	r1, #0
 800962a:	1d20      	adds	r0, r4, #4
 800962c:	f7ff fe7a 	bl	8009324 <RCCEx_PLL2_Config>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009634:	2d00      	cmp	r5, #0
 8009636:	f040 8387 	bne.w	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800963a:	4975      	ldr	r1, [pc, #468]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800963c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8009640:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009642:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8009646:	4302      	orrs	r2, r0
 8009648:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800964a:	019a      	lsls	r2, r3, #6
 800964c:	d518      	bpl.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800964e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009650:	2a20      	cmp	r2, #32
 8009652:	f000 840d 	beq.w	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009656:	f200 80e8 	bhi.w	800982a <HAL_RCCEx_PeriphCLKConfig+0x316>
 800965a:	b13a      	cbz	r2, 800966c <HAL_RCCEx_PeriphCLKConfig+0x158>
 800965c:	2a10      	cmp	r2, #16
 800965e:	f040 80e7 	bne.w	8009830 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009662:	496b      	ldr	r1, [pc, #428]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009664:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009666:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800966a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800966c:	2d00      	cmp	r5, #0
 800966e:	f040 83ba 	bne.w	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009672:	4967      	ldr	r1, [pc, #412]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009674:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009676:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009678:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800967c:	4302      	orrs	r2, r0
 800967e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009680:	04df      	lsls	r7, r3, #19
 8009682:	d51d      	bpl.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009684:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009686:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800968a:	f000 840d 	beq.w	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800968e:	f200 80d2 	bhi.w	8009836 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009692:	2a00      	cmp	r2, #0
 8009694:	f000 8374 	beq.w	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8009698:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800969c:	f040 80d3 	bne.w	8009846 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096a0:	2100      	movs	r1, #0
 80096a2:	1d20      	adds	r0, r4, #4
 80096a4:	f7ff fe3e 	bl	8009324 <RCCEx_PLL2_Config>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096ac:	2d00      	cmp	r5, #0
 80096ae:	f040 834f 	bne.w	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096b2:	4957      	ldr	r1, [pc, #348]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80096b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80096b6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80096b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80096bc:	4302      	orrs	r2, r0
 80096be:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096c0:	0498      	lsls	r0, r3, #18
 80096c2:	d51b      	bpl.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 80096c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096c6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80096ca:	f000 83bd 	beq.w	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80096ce:	f200 80bd 	bhi.w	800984c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80096d2:	b14a      	cbz	r2, 80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80096d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80096d8:	f040 80c2 	bne.w	8009860 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096dc:	2101      	movs	r1, #1
 80096de:	1d20      	adds	r0, r4, #4
 80096e0:	f7ff fe20 	bl	8009324 <RCCEx_PLL2_Config>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	f040 837e 	bne.w	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80096ee:	4948      	ldr	r1, [pc, #288]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80096f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80096f2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80096f4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80096f8:	4302      	orrs	r2, r0
 80096fa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096fc:	0459      	lsls	r1, r3, #17
 80096fe:	d51d      	bpl.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009700:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009704:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009708:	f000 83a8 	beq.w	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x948>
 800970c:	f200 80ab 	bhi.w	8009866 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009710:	b14a      	cbz	r2, 8009726 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009712:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009716:	f040 80b0 	bne.w	800987a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800971a:	2101      	movs	r1, #1
 800971c:	1d20      	adds	r0, r4, #4
 800971e:	f7ff fe01 	bl	8009324 <RCCEx_PLL2_Config>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009726:	2d00      	cmp	r5, #0
 8009728:	f040 8363 	bne.w	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800972c:	4938      	ldr	r1, [pc, #224]	; (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800972e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009732:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009734:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009738:	4302      	orrs	r2, r0
 800973a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	d509      	bpl.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8009740:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009742:	2a00      	cmp	r2, #0
 8009744:	f000 8264 	beq.w	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8009748:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800974c:	f000 825a 	beq.w	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8009750:	2601      	movs	r6, #1
 8009752:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009754:	041f      	lsls	r7, r3, #16
 8009756:	d50d      	bpl.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8009758:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800975a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800975e:	f000 8420 	beq.w	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8009762:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009766:	f000 82ce 	beq.w	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800976a:	2a00      	cmp	r2, #0
 800976c:	f000 82d1 	beq.w	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009770:	2601      	movs	r6, #1
 8009772:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009774:	01d8      	lsls	r0, r3, #7
 8009776:	f100 81cf 	bmi.w	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800977a:	0259      	lsls	r1, r3, #9
 800977c:	f100 81ef 	bmi.w	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009780:	07df      	lsls	r7, r3, #31
 8009782:	f140 8088 	bpl.w	8009896 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009786:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009788:	2a28      	cmp	r2, #40	; 0x28
 800978a:	f200 81cf 	bhi.w	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x618>
 800978e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009792:	007e      	.short	0x007e
 8009794:	01cd01cd 	.word	0x01cd01cd
 8009798:	01cd01cd 	.word	0x01cd01cd
 800979c:	01cd01cd 	.word	0x01cd01cd
 80097a0:	03d401cd 	.word	0x03d401cd
 80097a4:	01cd01cd 	.word	0x01cd01cd
 80097a8:	01cd01cd 	.word	0x01cd01cd
 80097ac:	01cd01cd 	.word	0x01cd01cd
 80097b0:	007701cd 	.word	0x007701cd
 80097b4:	01cd01cd 	.word	0x01cd01cd
 80097b8:	01cd01cd 	.word	0x01cd01cd
 80097bc:	01cd01cd 	.word	0x01cd01cd
 80097c0:	007e01cd 	.word	0x007e01cd
 80097c4:	01cd01cd 	.word	0x01cd01cd
 80097c8:	01cd01cd 	.word	0x01cd01cd
 80097cc:	01cd01cd 	.word	0x01cd01cd
 80097d0:	007e01cd 	.word	0x007e01cd
 80097d4:	01cd01cd 	.word	0x01cd01cd
 80097d8:	01cd01cd 	.word	0x01cd01cd
 80097dc:	01cd01cd 	.word	0x01cd01cd
 80097e0:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 80097e4:	2ac0      	cmp	r2, #192	; 0xc0
 80097e6:	f43f aee2 	beq.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80097ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80097ee:	f43f aede 	beq.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80097f2:	2601      	movs	r6, #1
 80097f4:	4635      	mov	r5, r6
 80097f6:	e6e4      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80097f8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80097fc:	f43f aef8 	beq.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009800:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009804:	f43f aef4 	beq.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009808:	2601      	movs	r6, #1
 800980a:	4635      	mov	r5, r6
 800980c:	e6fb      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800980e:	bf00      	nop
 8009810:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8009814:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009818:	f43f af0c 	beq.w	8009634 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800981c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009820:	f43f af08 	beq.w	8009634 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009824:	2601      	movs	r6, #1
 8009826:	4635      	mov	r5, r6
 8009828:	e70f      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 800982a:	2a30      	cmp	r2, #48	; 0x30
 800982c:	f43f af1e 	beq.w	800966c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8009830:	2601      	movs	r6, #1
 8009832:	4635      	mov	r5, r6
 8009834:	e724      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009836:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800983a:	f43f af37 	beq.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 800983e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009842:	f43f af33 	beq.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009846:	2601      	movs	r6, #1
 8009848:	4635      	mov	r5, r6
 800984a:	e739      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 800984c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8009850:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009854:	f43f af48 	beq.w	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009858:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800985c:	f43f af44 	beq.w	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009860:	2601      	movs	r6, #1
 8009862:	4635      	mov	r5, r6
 8009864:	e74a      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009866:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800986a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800986e:	f43f af5a 	beq.w	8009726 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009872:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009876:	f43f af56 	beq.w	8009726 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800987a:	2601      	movs	r6, #1
 800987c:	4635      	mov	r5, r6
 800987e:	e75d      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009880:	2101      	movs	r1, #1
 8009882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009886:	f7ff fdc9 	bl	800941c <RCCEx_PLL3_Config>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800988e:	2d00      	cmp	r5, #0
 8009890:	f000 82c0 	beq.w	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8009894:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009896:	0798      	lsls	r0, r3, #30
 8009898:	d516      	bpl.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800989a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800989c:	2a05      	cmp	r2, #5
 800989e:	f200 83e6 	bhi.w	800a06e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80098a2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80098a6:	000d      	.short	0x000d
 80098a8:	00060336 	.word	0x00060336
 80098ac:	000d000d 	.word	0x000d000d
 80098b0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098b2:	2101      	movs	r1, #1
 80098b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098b8:	f7ff fdb0 	bl	800941c <RCCEx_PLL3_Config>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	f000 8279 	beq.w	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80098c6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098c8:	0759      	lsls	r1, r3, #29
 80098ca:	d517      	bpl.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80098cc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80098d0:	2a05      	cmp	r2, #5
 80098d2:	f200 83c6 	bhi.w	800a062 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 80098d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80098da:	000d      	.short	0x000d
 80098dc:	00060326 	.word	0x00060326
 80098e0:	000d000d 	.word	0x000d000d
 80098e4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098e6:	2101      	movs	r1, #1
 80098e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098ec:	f7ff fd96 	bl	800941c <RCCEx_PLL3_Config>
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	f000 826a 	beq.w	8009dce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80098fa:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098fc:	069a      	lsls	r2, r3, #26
 80098fe:	d51d      	bpl.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009900:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009904:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009908:	f000 8340 	beq.w	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xa78>
 800990c:	f200 81af 	bhi.w	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8009910:	b14a      	cbz	r2, 8009926 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009912:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009916:	f040 81b4 	bne.w	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800991a:	2100      	movs	r1, #0
 800991c:	1d20      	adds	r0, r4, #4
 800991e:	f7ff fd01 	bl	8009324 <RCCEx_PLL2_Config>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009926:	2d00      	cmp	r5, #0
 8009928:	f040 823c 	bne.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800992c:	49b3      	ldr	r1, [pc, #716]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800992e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8009932:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009934:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009938:	4302      	orrs	r2, r0
 800993a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800993c:	065f      	lsls	r7, r3, #25
 800993e:	d51d      	bpl.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009940:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009944:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009948:	f000 8334 	beq.w	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800994c:	f200 817f 	bhi.w	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009950:	b14a      	cbz	r2, 8009966 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009952:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009956:	f040 8184 	bne.w	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800995a:	2100      	movs	r1, #0
 800995c:	1d20      	adds	r0, r4, #4
 800995e:	f7ff fce1 	bl	8009324 <RCCEx_PLL2_Config>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009966:	2d00      	cmp	r5, #0
 8009968:	f040 8221 	bne.w	8009dae <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800996c:	49a3      	ldr	r1, [pc, #652]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800996e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009972:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009974:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009978:	4302      	orrs	r2, r0
 800997a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800997c:	0618      	lsls	r0, r3, #24
 800997e:	d51d      	bpl.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009980:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009984:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009988:	f000 831f 	beq.w	8009fca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800998c:	f200 814f 	bhi.w	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8009990:	b14a      	cbz	r2, 80099a6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009992:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009996:	f040 8154 	bne.w	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800999a:	2100      	movs	r1, #0
 800999c:	1d20      	adds	r0, r4, #4
 800999e:	f7ff fcc1 	bl	8009324 <RCCEx_PLL2_Config>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	f040 81f7 	bne.w	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099ac:	4993      	ldr	r1, [pc, #588]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099ae:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80099b2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80099b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80099b8:	4302      	orrs	r2, r0
 80099ba:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80099bc:	0719      	lsls	r1, r3, #28
 80099be:	d50b      	bpl.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80099c0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80099c4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80099c8:	f000 831e 	beq.w	800a008 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80099cc:	488b      	ldr	r0, [pc, #556]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80099d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80099d4:	430a      	orrs	r2, r1
 80099d6:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099d8:	06da      	lsls	r2, r3, #27
 80099da:	d50b      	bpl.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80099dc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80099e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80099e4:	f000 8305 	beq.w	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099e8:	4884      	ldr	r0, [pc, #528]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80099ea:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80099ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80099f0:	430a      	orrs	r2, r1
 80099f2:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099f4:	031f      	lsls	r7, r3, #12
 80099f6:	d50e      	bpl.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80099f8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80099fc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009a00:	f000 816b 	beq.w	8009cda <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8009a04:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009a08:	f000 816e 	beq.w	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	f000 82e7 	beq.w	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a12:	2601      	movs	r6, #1
 8009a14:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a16:	0358      	lsls	r0, r3, #13
 8009a18:	d50f      	bpl.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8009a1a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009a1e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009a22:	f000 8144 	beq.w	8009cae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8009a26:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009a2a:	f000 8147 	beq.w	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8009a2e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009a32:	f000 82a2 	beq.w	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009a36:	2601      	movs	r6, #1
 8009a38:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a3a:	03d9      	lsls	r1, r3, #15
 8009a3c:	d517      	bpl.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009a3e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	f000 8288 	beq.w	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8009a46:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009a4a:	f040 817a 	bne.w	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a4e:	2102      	movs	r1, #2
 8009a50:	1d20      	adds	r0, r4, #4
 8009a52:	f7ff fc67 	bl	8009324 <RCCEx_PLL2_Config>
 8009a56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	f040 81e5 	bne.w	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a60:	4966      	ldr	r1, [pc, #408]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a64:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009a66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a6a:	4302      	orrs	r2, r0
 8009a6c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a6e:	009a      	lsls	r2, r3, #2
 8009a70:	f100 815c 	bmi.w	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a74:	039f      	lsls	r7, r3, #14
 8009a76:	d43f      	bmi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009a78:	1e30      	subs	r0, r6, #0
 8009a7a:	bf18      	it	ne
 8009a7c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a7e:	02de      	lsls	r6, r3, #11
 8009a80:	d506      	bpl.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a82:	495e      	ldr	r1, [pc, #376]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a84:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009a86:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009a8c:	432a      	orrs	r2, r5
 8009a8e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a90:	00dd      	lsls	r5, r3, #3
 8009a92:	d507      	bpl.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a94:	4959      	ldr	r1, [pc, #356]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009a96:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009a9a:	690a      	ldr	r2, [r1, #16]
 8009a9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009aa0:	432a      	orrs	r2, r5
 8009aa2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009aa4:	0299      	lsls	r1, r3, #10
 8009aa6:	d506      	bpl.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009aa8:	4954      	ldr	r1, [pc, #336]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009aaa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009aac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009aae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009ab2:	432a      	orrs	r2, r5
 8009ab4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ab6:	005a      	lsls	r2, r3, #1
 8009ab8:	d509      	bpl.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009aba:	4a50      	ldr	r2, [pc, #320]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009abc:	6911      	ldr	r1, [r2, #16]
 8009abe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009ac2:	6111      	str	r1, [r2, #16]
 8009ac4:	6911      	ldr	r1, [r2, #16]
 8009ac6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8009aca:	4329      	orrs	r1, r5
 8009acc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da06      	bge.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ad2:	494a      	ldr	r1, [pc, #296]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ad4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009ad6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009adc:	432a      	orrs	r2, r5
 8009ade:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	d507      	bpl.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ae4:	4a45      	ldr	r2, [pc, #276]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009ae6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009aea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009aec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009af8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009afc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009b00:	f000 8232 	beq.w	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8009b04:	f240 80c3 	bls.w	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8009b08:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009b0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b10:	f000 80c0 	beq.w	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009b14:	2001      	movs	r0, #1
 8009b16:	e7b2      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8009b18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009b1a:	2a03      	cmp	r2, #3
 8009b1c:	f200 82aa 	bhi.w	800a074 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8009b20:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009b24:	018a0010 	.word	0x018a0010
 8009b28:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b2c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b2e:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b32:	f57f aec9 	bpl.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009b36:	e6b0      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b38:	2102      	movs	r1, #2
 8009b3a:	1d20      	adds	r0, r4, #4
 8009b3c:	f7ff fbf2 	bl	8009324 <RCCEx_PLL2_Config>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	f040 8152 	bne.w	8009dee <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b4a:	492c      	ldr	r1, [pc, #176]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009b4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009b4e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009b50:	f022 0203 	bic.w	r2, r2, #3
 8009b54:	4302      	orrs	r2, r0
 8009b56:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b58:	0259      	lsls	r1, r3, #9
 8009b5a:	f57f ae11 	bpl.w	8009780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b5e:	4b28      	ldr	r3, [pc, #160]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8009b60:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b62:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009b6a:	f7fc fb81 	bl	8006270 <HAL_GetTick>
 8009b6e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b70:	e005      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b72:	f7fc fb7d 	bl	8006270 <HAL_GetTick>
 8009b76:	1bc0      	subs	r0, r0, r7
 8009b78:	2864      	cmp	r0, #100	; 0x64
 8009b7a:	f200 81e8 	bhi.w	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b82:	05da      	lsls	r2, r3, #23
 8009b84:	d5f5      	bpl.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	f040 8267 	bne.w	800a05a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009b8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009b92:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009b94:	4059      	eors	r1, r3
 8009b96:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009b9a:	d00b      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b9c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b9e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ba0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ba4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009ba8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009baa:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009bac:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009bb0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009bb2:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb8:	f000 8231 	beq.w	800a01e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bbc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009bc0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009bc4:	f000 823f 	beq.w	800a046 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8009bc8:	490c      	ldr	r1, [pc, #48]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009bca:	690a      	ldr	r2, [r1, #16]
 8009bcc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009bd0:	610a      	str	r2, [r1, #16]
 8009bd2:	4a0a      	ldr	r2, [pc, #40]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bd8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009bda:	430b      	orrs	r3, r1
 8009bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	e5ce      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009be2:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	f040 80b5 	bne.w	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bea:	4904      	ldr	r1, [pc, #16]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009bf0:	f022 0207 	bic.w	r2, r2, #7
 8009bf4:	4302      	orrs	r2, r0
 8009bf6:	650a      	str	r2, [r1, #80]	; 0x50
 8009bf8:	e4c5      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009bfa:	bf00      	nop
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c04:	2101      	movs	r1, #1
 8009c06:	1d20      	adds	r0, r4, #4
 8009c08:	f7ff fb8c 	bl	8009324 <RCCEx_PLL2_Config>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	f040 810c 	bne.w	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009c16:	49b9      	ldr	r1, [pc, #740]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c18:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009c1a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009c1c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009c1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c22:	ea42 0200 	orr.w	r2, r2, r0
 8009c26:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c28:	f57f ada4 	bpl.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009c2c:	e594      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c2e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009c32:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009c36:	f43f aeb6 	beq.w	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009c3a:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009c3e:	f43f aeb2 	beq.w	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009c42:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c44:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c46:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c48:	f57f aec6 	bpl.w	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009c4c:	e6b8      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c4e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009c52:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009c56:	f43f ae86 	beq.w	8009966 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c5a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009c5e:	f43f ae82 	beq.w	8009966 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c62:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c64:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c66:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c68:	f57f aea8 	bpl.w	80099bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c6c:	e688      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c6e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009c72:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009c76:	f43f ae56 	beq.w	8009926 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009c7a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009c7e:	f43f ae52 	beq.w	8009926 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009c82:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c84:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c86:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c88:	f57f ae78 	bpl.w	800997c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009c8c:	e658      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	f47f af40 	bne.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	f47f af3d 	bne.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c9a:	4d98      	ldr	r5, [pc, #608]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009c9c:	1e30      	subs	r0, r6, #0
 8009c9e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009ca0:	bf18      	it	ne
 8009ca2:	2001      	movne	r0, #1
 8009ca4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009ca8:	430a      	orrs	r2, r1
 8009caa:	656a      	str	r2, [r5, #84]	; 0x54
 8009cac:	e6e7      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cae:	2101      	movs	r1, #1
 8009cb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cb4:	f7ff fbb2 	bl	800941c <RCCEx_PLL3_Config>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	f040 80a4 	bne.w	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cc2:	498e      	ldr	r1, [pc, #568]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009cc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009cc8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009cca:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009cce:	4302      	orrs	r2, r0
 8009cd0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cd2:	03d9      	lsls	r1, r3, #15
 8009cd4:	f57f aecb 	bpl.w	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009cd8:	e6b1      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cda:	2102      	movs	r1, #2
 8009cdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ce0:	f7ff fb9c 	bl	800941c <RCCEx_PLL3_Config>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	f040 8089 	bne.w	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cee:	4983      	ldr	r1, [pc, #524]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009cf0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8009cf4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009cf6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009cfa:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009cfc:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cfe:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d00:	f57f ae9b 	bpl.w	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009d04:	e689      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d06:	2101      	movs	r1, #1
 8009d08:	1d20      	adds	r0, r4, #4
 8009d0a:	f7ff fb0b 	bl	8009324 <RCCEx_PLL2_Config>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	d16f      	bne.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d16:	4979      	ldr	r1, [pc, #484]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d18:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009d1a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d20:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d22:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d24:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d26:	f57f ad28 	bpl.w	800977a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009d2a:	e6f5      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d32:	f7ff fb73 	bl	800941c <RCCEx_PLL3_Config>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f43f ae9b 	beq.w	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8009d3e:	2601      	movs	r6, #1
 8009d40:	e698      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009d42:	2601      	movs	r6, #1
 8009d44:	4635      	mov	r5, r6
 8009d46:	e692      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009d48:	462e      	mov	r6, r5
 8009d4a:	e47e      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d4c:	462e      	mov	r6, r5
 8009d4e:	e438      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009d50:	462e      	mov	r6, r5
 8009d52:	e4b5      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009d54:	462e      	mov	r6, r5
 8009d56:	e416      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009d58:	462e      	mov	r6, r5
 8009d5a:	e454      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d5c:	4967      	ldr	r1, [pc, #412]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d5e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d64:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d66:	e443      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4964      	ldr	r1, [pc, #400]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d70:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d72:	e41c      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d74:	4961      	ldr	r1, [pc, #388]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d7c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d7e:	e459      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d80:	495e      	ldr	r1, [pc, #376]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009d84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d88:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009d8a:	e48f      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d8c:	485b      	ldr	r0, [pc, #364]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009d8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009d90:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009d94:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009d96:	f7ff bbda 	b.w	800954e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d9a:	0719      	lsls	r1, r3, #28
 8009d9c:	462e      	mov	r6, r5
 8009d9e:	f57f ae1b 	bpl.w	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009da2:	e60d      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009da4:	065f      	lsls	r7, r3, #25
 8009da6:	462e      	mov	r6, r5
 8009da8:	f57f ade8 	bpl.w	800997c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009dac:	e5c8      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009dae:	0618      	lsls	r0, r3, #24
 8009db0:	462e      	mov	r6, r5
 8009db2:	f57f ae03 	bpl.w	80099bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009db6:	e5e3      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009db8:	4950      	ldr	r1, [pc, #320]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009dba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009dbc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009dbe:	f022 0207 	bic.w	r2, r2, #7
 8009dc2:	4302      	orrs	r2, r0
 8009dc4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dc6:	0759      	lsls	r1, r3, #29
 8009dc8:	f57f ad98 	bpl.w	80098fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009dcc:	e57e      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009dce:	494b      	ldr	r1, [pc, #300]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009dd0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009dd4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009dd6:	f022 0207 	bic.w	r2, r2, #7
 8009dda:	4302      	orrs	r2, r0
 8009ddc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dde:	069a      	lsls	r2, r3, #26
 8009de0:	f57f adac 	bpl.w	800993c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009de4:	e58c      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009de6:	462e      	mov	r6, r5
 8009de8:	e44a      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009dea:	462e      	mov	r6, r5
 8009dec:	e486      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009dee:	462e      	mov	r6, r5
 8009df0:	e4c3      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009df2:	462e      	mov	r6, r5
 8009df4:	e4a2      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009df6:	01d8      	lsls	r0, r3, #7
 8009df8:	462e      	mov	r6, r5
 8009dfa:	f57f acbe 	bpl.w	800977a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009dfe:	e68b      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e00:	0358      	lsls	r0, r3, #13
 8009e02:	462e      	mov	r6, r5
 8009e04:	f57f ae19 	bpl.w	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009e08:	e607      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e0a:	03d9      	lsls	r1, r3, #15
 8009e0c:	462e      	mov	r6, r5
 8009e0e:	f57f ae2e 	bpl.w	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009e12:	e614      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e14:	4939      	ldr	r1, [pc, #228]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009e16:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009e18:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009e1a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8009e1e:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e20:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e22:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e24:	f57f ad50 	bpl.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009e28:	e537      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009e2a:	462e      	mov	r6, r5
 8009e2c:	e61f      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e2e:	041f      	lsls	r7, r3, #16
 8009e30:	462e      	mov	r6, r5
 8009e32:	f57f ac9f 	bpl.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009e36:	e48f      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e38:	4930      	ldr	r1, [pc, #192]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009e3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009e3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009e40:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	d1d3      	bne.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8009e46:	e680      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e48:	2101      	movs	r1, #1
 8009e4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e4e:	f7ff fae5 	bl	800941c <RCCEx_PLL3_Config>
 8009e52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	d1c7      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8009e5a:	e448      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e62:	f7ff fadb 	bl	800941c <RCCEx_PLL3_Config>
 8009e66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	d1c1      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8009e6e:	e45d      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e70:	2102      	movs	r1, #2
 8009e72:	1d20      	adds	r0, r4, #4
 8009e74:	f7ff fa56 	bl	8009324 <RCCEx_PLL2_Config>
 8009e78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	d1b2      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8009e80:	f7ff bbf7 	b.w	8009672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e84:	2100      	movs	r1, #0
 8009e86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e8a:	f7ff fac7 	bl	800941c <RCCEx_PLL3_Config>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	4605      	mov	r5, r0
      break;
 8009e92:	f7ff bbcf 	b.w	8009634 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e96:	2100      	movs	r1, #0
 8009e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e9c:	f7ff fabe 	bl	800941c <RCCEx_PLL3_Config>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	4605      	mov	r5, r0
      break;
 8009ea4:	f7ff bba4 	b.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009eae:	f7ff fab5 	bl	800941c <RCCEx_PLL3_Config>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	4605      	mov	r5, r0
      break;
 8009eb6:	f7ff bbf9 	b.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009eba:	2102      	movs	r1, #2
 8009ebc:	3024      	adds	r0, #36	; 0x24
 8009ebe:	f7ff faad 	bl	800941c <RCCEx_PLL3_Config>
 8009ec2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	f43f ab40 	beq.w	800954a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	f7ff bb46 	b.w	800955c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ed6:	f7ff faa1 	bl	800941c <RCCEx_PLL3_Config>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	4605      	mov	r5, r0
      break;
 8009ede:	e681      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4906      	ldr	r1, [pc, #24]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8009ee2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009ee6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009eea:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009eec:	e67a      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eee:	2100      	movs	r1, #0
 8009ef0:	1d20      	adds	r0, r4, #4
 8009ef2:	f7ff fa17 	bl	8009324 <RCCEx_PLL2_Config>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	4605      	mov	r5, r0
      break;
 8009efa:	e673      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009efc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f00:	2100      	movs	r1, #0
 8009f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f06:	f7ff fa89 	bl	800941c <RCCEx_PLL3_Config>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	4605      	mov	r5, r0
      break;
 8009f0e:	f7ff bb4e 	b.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f12:	2101      	movs	r1, #1
 8009f14:	1d20      	adds	r0, r4, #4
 8009f16:	f7ff fa05 	bl	8009324 <RCCEx_PLL2_Config>
 8009f1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	f47f acd1 	bne.w	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8009f24:	e748      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f26:	2101      	movs	r1, #1
 8009f28:	1d20      	adds	r0, r4, #4
 8009f2a:	f7ff f9fb 	bl	8009324 <RCCEx_PLL2_Config>
 8009f2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	2d00      	cmp	r5, #0
 8009f34:	f47f ace1 	bne.w	80098fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009f38:	e749      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	1d20      	adds	r0, r4, #4
 8009f3e:	f7ff f9f1 	bl	8009324 <RCCEx_PLL2_Config>
 8009f42:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	f47f aca4 	bne.w	8009894 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8009f4c:	e762      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8009f4e:	2603      	movs	r6, #3
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	4635      	mov	r5, r6
 8009f54:	e414      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f56:	4949      	ldr	r1, [pc, #292]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f58:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009f5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f5e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	f47f af62 	bne.w	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009f66:	e57b      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f68:	4844      	ldr	r0, [pc, #272]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f6a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009f6c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009f70:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	f47f adce 	bne.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8009f78:	e68f      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f7a:	4940      	ldr	r1, [pc, #256]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009f7c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009f7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f82:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009f84:	2d00      	cmp	r5, #0
 8009f86:	f47f af40 	bne.w	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009f8a:	e69a      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f8c:	2102      	movs	r1, #2
 8009f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f92:	f7ff fa43 	bl	800941c <RCCEx_PLL3_Config>
 8009f96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	2d00      	cmp	r5, #0
 8009f9c:	f47f af02 	bne.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8009fa0:	e4c4      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa2:	4936      	ldr	r1, [pc, #216]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009fa4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009fa6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009faa:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	f47f af22 	bne.w	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009fb2:	e6b0      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fba:	f7ff fa2f 	bl	800941c <RCCEx_PLL3_Config>
 8009fbe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	f47f aef3 	bne.w	8009dae <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009fc8:	e4d0      	b.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fca:	2102      	movs	r1, #2
 8009fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fd0:	f7ff fa24 	bl	800941c <RCCEx_PLL3_Config>
 8009fd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	f47f aede 	bne.w	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8009fde:	e4e5      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fe0:	1d20      	adds	r0, r4, #4
 8009fe2:	f7ff f99f 	bl	8009324 <RCCEx_PLL2_Config>
 8009fe6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	2d00      	cmp	r5, #0
 8009fec:	f47f af08 	bne.w	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009ff0:	e67d      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ff8:	f7ff fa10 	bl	800941c <RCCEx_PLL3_Config>
 8009ffc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a000:	b100      	cbz	r0, 800a004 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 800a002:	2601      	movs	r6, #1
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	e4ef      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a008:	2102      	movs	r1, #2
 800a00a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a00e:	f7ff fa05 	bl	800941c <RCCEx_PLL3_Config>
 800a012:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a016:	b100      	cbz	r0, 800a01a <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 800a018:	2601      	movs	r6, #1
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	e4d6      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800a01e:	f7fc f927 	bl	8006270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a022:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a026:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a02a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a02c:	e004      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a02e:	f7fc f91f 	bl	8006270 <HAL_GetTick>
 800a032:	1bc0      	subs	r0, r0, r7
 800a034:	4548      	cmp	r0, r9
 800a036:	d88a      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a038:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a03c:	079b      	lsls	r3, r3, #30
 800a03e:	d5f6      	bpl.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a040:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800a044:	e5ba      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a046:	480d      	ldr	r0, [pc, #52]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800a048:	4a0d      	ldr	r2, [pc, #52]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800a04a:	6901      	ldr	r1, [r0, #16]
 800a04c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a050:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800a054:	430a      	orrs	r2, r1
 800a056:	6102      	str	r2, [r0, #16]
 800a058:	e5bb      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800a05a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a05c:	462e      	mov	r6, r5
 800a05e:	f7ff bb8f 	b.w	8009780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a062:	2601      	movs	r6, #1
 800a064:	4635      	mov	r5, r6
 800a066:	e449      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a068:	2601      	movs	r6, #1
 800a06a:	f7ff ba8b 	b.w	8009584 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a06e:	2601      	movs	r6, #1
 800a070:	4635      	mov	r5, r6
 800a072:	e429      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800a074:	2601      	movs	r6, #1
 800a076:	4635      	mov	r5, r6
 800a078:	f7ff bb7f 	b.w	800977a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a07c:	58024400 	.word	0x58024400
 800a080:	00ffffcf 	.word	0x00ffffcf

0800a084 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a084:	4b58      	ldr	r3, [pc, #352]	; (800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 800a086:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a088:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a08a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a08c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800a08e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a092:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a096:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800a098:	d05c      	beq.n	800a154 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a09a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a09e:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0a2:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0a6:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a0aa:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0ac:	ee07 4a90 	vmov	s15, r4
 800a0b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a0b4:	d003      	beq.n	800a0be <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800a0b6:	2902      	cmp	r1, #2
 800a0b8:	d075      	beq.n	800a1a6 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800a0ba:	2900      	cmp	r1, #0
 800a0bc:	d04f      	beq.n	800a15e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0be:	ee07 2a90 	vmov	s15, r2
 800a0c2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800a0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a0d0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d8:	ee06 3a90 	vmov	s13, r3
 800a0dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a0e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0e4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a0e8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a0ec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a0f0:	4a3d      	ldr	r2, [pc, #244]	; (800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 800a0f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a0f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0fc:	ee07 3a10 	vmov	s14, r3
 800a100:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a104:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a106:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a112:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a116:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a118:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a11c:	ee07 3a10 	vmov	s14, r3
 800a120:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a124:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a130:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a134:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a136:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a142:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a14e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a152:	4770      	bx	lr
 800a154:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a156:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a15a:	6082      	str	r2, [r0, #8]
}
 800a15c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15e:	6819      	ldr	r1, [r3, #0]
 800a160:	0689      	lsls	r1, r1, #26
 800a162:	d527      	bpl.n	800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a164:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a166:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a16a:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a16c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a170:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a17a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a17c:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a184:	ee06 2a10 	vmov	s12, r2
 800a188:	ee06 3a90 	vmov	s13, r3
 800a18c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a190:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a194:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a198:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a19c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a1a0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a1a4:	e7a4      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1a6:	ee07 2a90 	vmov	s15, r2
 800a1aa:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800a1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1b2:	e78a      	b.n	800a0ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1b4:	ee07 2a90 	vmov	s15, r2
 800a1b8:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 800a1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1c6:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1da:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a1de:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a1e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1e6:	e783      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	4a742400 	.word	0x4a742400
 800a1f0:	39000000 	.word	0x39000000
 800a1f4:	03d09000 	.word	0x03d09000
 800a1f8:	4bbebc20 	.word	0x4bbebc20
 800a1fc:	4c742400 	.word	0x4c742400

0800a200 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a200:	4b58      	ldr	r3, [pc, #352]	; (800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 800a202:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a204:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a206:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a208:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800a20a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a20e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a212:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800a214:	d05c      	beq.n	800a2d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a216:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a21a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a21e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a222:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a226:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a228:	ee07 4a90 	vmov	s15, r4
 800a22c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a230:	d003      	beq.n	800a23a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800a232:	2902      	cmp	r1, #2
 800a234:	d075      	beq.n	800a322 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800a236:	2900      	cmp	r1, #0
 800a238:	d04f      	beq.n	800a2da <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a23a:	ee07 2a90 	vmov	s15, r2
 800a23e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800a368 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800a242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a24c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a254:	ee06 3a90 	vmov	s13, r3
 800a258:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a25c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a260:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a264:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a268:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a26c:	4a3d      	ldr	r2, [pc, #244]	; (800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800a26e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a272:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a274:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a278:	ee07 3a10 	vmov	s14, r3
 800a27c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a280:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a282:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a292:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a294:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a298:	ee07 3a10 	vmov	s14, r3
 800a29c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a2a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ac:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a2b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a2b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2be:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a2ca:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a2ce:	4770      	bx	lr
 800a2d0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2d2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2d6:	6082      	str	r2, [r0, #8]
}
 800a2d8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2da:	6819      	ldr	r1, [r3, #0]
 800a2dc:	0689      	lsls	r1, r1, #26
 800a2de:	d527      	bpl.n	800a330 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2e0:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2e2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2e6:	4a22      	ldr	r2, [pc, #136]	; (800a370 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2ec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2f6:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2f8:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a300:	ee06 2a10 	vmov	s12, r2
 800a304:	ee06 3a90 	vmov	s13, r3
 800a308:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a30c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a310:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a314:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a318:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a31c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a320:	e7a4      	b.n	800a26c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a322:	ee07 2a90 	vmov	s15, r2
 800a326:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a374 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 800a32a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a32e:	e78a      	b.n	800a246 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a330:	ee07 2a90 	vmov	s15, r2
 800a334:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800a378 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a342:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800a346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a356:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a35a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a35e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a362:	e783      	b.n	800a26c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a364:	58024400 	.word	0x58024400
 800a368:	4a742400 	.word	0x4a742400
 800a36c:	39000000 	.word	0x39000000
 800a370:	03d09000 	.word	0x03d09000
 800a374:	4bbebc20 	.word	0x4bbebc20
 800a378:	4c742400 	.word	0x4c742400

0800a37c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a37c:	4b5c      	ldr	r3, [pc, #368]	; (800a4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 800a37e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a380:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a382:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a384:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800a386:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a38a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a38e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800a390:	d05c      	beq.n	800a44c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a392:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a396:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a39a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a39e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800a3a2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3a4:	ee07 4a90 	vmov	s15, r4
 800a3a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800a3ac:	d07e      	beq.n	800a4ac <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800a3ae:	2902      	cmp	r1, #2
 800a3b0:	d075      	beq.n	800a49e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	d04f      	beq.n	800a456 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3b6:	ee07 2a90 	vmov	s15, r2
 800a3ba:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a3be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a3c8:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d0:	ee06 3a90 	vmov	s13, r3
 800a3d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a3d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a3dc:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a3e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a3e4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a3e8:	4a41      	ldr	r2, [pc, #260]	; (800a4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800a3ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a3f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a3f4:	ee07 3a10 	vmov	s14, r3
 800a3f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a3fc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a3fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a40a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a40e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a410:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a414:	ee07 3a10 	vmov	s14, r3
 800a418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a41c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a428:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a42c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a42e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a43a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a442:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a446:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a44a:	4770      	bx	lr
 800a44c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a44e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a452:	6082      	str	r2, [r0, #8]
}
 800a454:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	0689      	lsls	r1, r1, #26
 800a45a:	d52e      	bpl.n	800a4ba <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a45c:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a45e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a462:	4a26      	ldr	r2, [pc, #152]	; (800a4fc <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a464:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a468:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a46c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a472:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a474:	eddf 4a20 	vldr	s9, [pc, #128]	; 800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47c:	ee06 2a10 	vmov	s12, r2
 800a480:	ee06 3a90 	vmov	s13, r3
 800a484:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a488:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a48c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800a490:	eee7 6a24 	vfma.f32	s13, s14, s9
 800a494:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a498:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a49c:	e7a4      	b.n	800a3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a49e:	ee07 2a90 	vmov	s15, r2
 800a4a2:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a500 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 800a4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4aa:	e78a      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4ac:	ee07 2a90 	vmov	s15, r2
 800a4b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a504 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a4b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4b8:	e783      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4ba:	ee07 2a90 	vmov	s15, r2
 800a4be:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800a4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4cc:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800a4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800a4d8:	ee07 3a90 	vmov	s15, r3
 800a4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a4ec:	e77c      	b.n	800a3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 800a4ee:	bf00      	nop
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	4c742400 	.word	0x4c742400
 800a4f8:	39000000 	.word	0x39000000
 800a4fc:	03d09000 	.word	0x03d09000
 800a500:	4bbebc20 	.word	0x4bbebc20
 800a504:	4a742400 	.word	0x4a742400

0800a508 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a508:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a50c:	b500      	push	{lr}
 800a50e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a510:	d077      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a512:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a516:	d02e      	beq.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a518:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a51c:	f000 80cf 	beq.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a520:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a524:	f000 8080 	beq.w	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a528:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a52c:	d05a      	beq.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a52e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a532:	f000 8105 	beq.w	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a536:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a53a:	f000 8110 	beq.w	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a53e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a542:	f000 80e2 	beq.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a546:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a54a:	d13a      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a54c:	4ba9      	ldr	r3, [pc, #676]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800a554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a558:	f000 808e 	beq.w	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800a55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a560:	f000 812e 	beq.w	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800a564:	bb6b      	cbnz	r3, 800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a566:	4aa3      	ldr	r2, [pc, #652]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 800a568:	4ba3      	ldr	r3, [pc, #652]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a56a:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 800a56c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a570:	bf18      	it	ne
 800a572:	4618      	movne	r0, r3
 800a574:	e042      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a576:	4a9f      	ldr	r2, [pc, #636]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a578:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a57a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a57e:	2b80      	cmp	r3, #128	; 0x80
 800a580:	f000 8098 	beq.w	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a584:	d921      	bls.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800a586:	2bc0      	cmp	r3, #192	; 0xc0
 800a588:	d037      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58e:	d118      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a590:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a592:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a598:	0749      	lsls	r1, r1, #29
 800a59a:	d502      	bpl.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80ae 	beq.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5a2:	4a94      	ldr	r2, [pc, #592]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	05d0      	lsls	r0, r2, #23
 800a5a8:	d503      	bpl.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a5aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ae:	f000 80fb 	beq.w	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5b2:	4a90      	ldr	r2, [pc, #576]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5b4:	6812      	ldr	r2, [r2, #0]
 800a5b6:	0391      	lsls	r1, r2, #14
 800a5b8:	d503      	bpl.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5be:	f000 80bd 	beq.w	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 800a5c2:	2000      	movs	r0, #0
}
 800a5c4:	b005      	add	sp, #20
 800a5c6:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d04b      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d1f7      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5d2:	6810      	ldr	r0, [r2, #0]
 800a5d4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a5d8:	d010      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5da:	a801      	add	r0, sp, #4
 800a5dc:	f7ff fd52 	bl	800a084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5e0:	9801      	ldr	r0, [sp, #4]
 800a5e2:	e00b      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a5e4:	4a83      	ldr	r2, [pc, #524]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a5e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a5e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f0:	d060      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a5f2:	d936      	bls.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800a5f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5f8:	d178      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5fa:	4880      	ldr	r0, [pc, #512]	; (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 800a5fc:	b005      	add	sp, #20
 800a5fe:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a602:	4b7c      	ldr	r3, [pc, #496]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d8d9      	bhi.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a60e:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a679 	.word	0x0800a679
 800a618:	0800a69d 	.word	0x0800a69d
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a5fb 	.word	0x0800a5fb
 800a624:	0800a685 	.word	0x0800a685
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a628:	4a72      	ldr	r2, [pc, #456]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a62a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a62c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a634:	d03e      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a636:	d937      	bls.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800a638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a63c:	d0dd      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a63e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a642:	d1be      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a644:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a646:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a64c:	0752      	lsls	r2, r2, #29
 800a64e:	d5a8      	bpl.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1a6      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a654:	4b67      	ldr	r3, [pc, #412]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a656:	486a      	ldr	r0, [pc, #424]	; (800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a65e:	40d8      	lsrs	r0, r3
 800a660:	e7cc      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a662:	2b00      	cmp	r3, #0
 800a664:	d146      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a666:	6810      	ldr	r0, [r2, #0]
 800a668:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a66c:	d0c6      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a66e:	a801      	add	r0, sp, #4
 800a670:	f7ff fe84 	bl	800a37c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a674:	9802      	ldr	r0, [sp, #8]
 800a676:	e7c1      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a678:	4b5e      	ldr	r3, [pc, #376]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a680:	d0bc      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a682:	e7f4      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a684:	4a5b      	ldr	r2, [pc, #364]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a686:	e783      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a688:	4b5a      	ldr	r3, [pc, #360]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a690:	d0b4      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a692:	a801      	add	r0, sp, #4
 800a694:	f7ff fdb4 	bl	800a200 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a698:	9801      	ldr	r0, [sp, #4]
 800a69a:	e7af      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a69c:	4b55      	ldr	r3, [pc, #340]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a6a4:	d0aa      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6a6:	e798      	b.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0dc      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a6ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6b0:	d08f      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6b2:	e786      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6b4:	6810      	ldr	r0, [r2, #0]
 800a6b6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a6ba:	d09f      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6bc:	e7e9      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a6be:	4a4d      	ldr	r2, [pc, #308]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a6c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a6c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a6c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6ca:	d0f3      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6cc:	d806      	bhi.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0c9      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800a6d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d6:	f43f af7c 	beq.w	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6da:	e772      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a6dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6e0:	d08b      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a6e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6e6:	f43f af53 	beq.w	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800a6ea:	e76a      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 800a6ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6f0:	d0a8      	beq.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a6f2:	e766      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f8:	f43f af6b 	beq.w	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6fc:	e761      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	483f      	ldr	r0, [pc, #252]	; (800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a702:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a706:	40d8      	lsrs	r0, r3
 800a708:	e778      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a70a:	4a3a      	ldr	r2, [pc, #232]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a70c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a70e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a716:	d066      	beq.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a718:	d82f      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a71e:	d04f      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800a720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a724:	d131      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a726:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a72e:	f43f af65 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	a801      	add	r0, sp, #4
 800a734:	f7ff fd64 	bl	800a200 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a738:	9802      	ldr	r0, [sp, #8]
 800a73a:	e75f      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 800a73c:	482e      	ldr	r0, [pc, #184]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a73e:	e75d      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a740:	4a2c      	ldr	r2, [pc, #176]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a742:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74c:	d02e      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a752:	f43f af77 	beq.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a756:	2b00      	cmp	r3, #0
 800a758:	f47f af33 	bne.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a75c:	e739      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a75e:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800a762:	03d2      	lsls	r2, r2, #15
 800a764:	d589      	bpl.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a76c:	f43f af46 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a770:	a801      	add	r0, sp, #4
 800a772:	f7ff fc87 	bl	800a084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a776:	9803      	ldr	r0, [sp, #12]
 800a778:	e740      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a77e:	d02a      	beq.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800a780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a784:	f43f aeef 	beq.w	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800a788:	e71b      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f af19 	bne.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a790:	f7fe fda6 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
 800a794:	4b17      	ldr	r3, [pc, #92]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a796:	4a1b      	ldr	r2, [pc, #108]	; (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a79e:	5cd3      	ldrb	r3, [r2, r3]
 800a7a0:	f003 031f 	and.w	r3, r3, #31
 800a7a4:	40d8      	lsrs	r0, r3
          break;
 800a7a6:	e729      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800a7a8:	4817      	ldr	r0, [pc, #92]	; (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a7aa:	e727      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ac:	6810      	ldr	r0, [r2, #0]
 800a7ae:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a7b2:	f43f af23 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7b6:	a801      	add	r0, sp, #4
 800a7b8:	f7ff fd22 	bl	800a200 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7bc:	9803      	ldr	r0, [sp, #12]
 800a7be:	e71d      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c0:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a7c8:	f43f af18 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7cc:	a801      	add	r0, sp, #4
 800a7ce:	f7ff fc59 	bl	800a084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7d2:	9802      	ldr	r0, [sp, #8]
 800a7d4:	e712      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7d6:	4a07      	ldr	r2, [pc, #28]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7da:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800a7dc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a7e0:	bf18      	it	ne
 800a7e2:	4618      	movne	r0, r3
 800a7e4:	e70a      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7e6:	6810      	ldr	r0, [r2, #0]
 800a7e8:	f010 0004 	ands.w	r0, r0, #4
 800a7ec:	f43f af06 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a7f0:	e730      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a7f2:	bf00      	nop
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	017d7840 	.word	0x017d7840
 800a7fc:	00bb8000 	.word	0x00bb8000
 800a800:	03d09000 	.word	0x03d09000
 800a804:	0800abe4 	.word	0x0800abe4
 800a808:	003d0900 	.word	0x003d0900

0800a80c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800a810:	b318      	cbz	r0, 800a85a <HAL_SDRAM_Init+0x4a>
{
 800a812:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a814:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a818:	460d      	mov	r5, r1
 800a81a:	4604      	mov	r4, r0
 800a81c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a820:	b1b3      	cbz	r3, 800a850 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a822:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a824:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a826:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a82a:	f851 0b04 	ldr.w	r0, [r1], #4
 800a82e:	f000 f851 	bl	800a8d4 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a832:	4629      	mov	r1, r5
 800a834:	e9d4 0200 	ldrd	r0, r2, [r4]
 800a838:	f000 f888 	bl	800a94c <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800a83c:	4a08      	ldr	r2, [pc, #32]	; (800a860 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a83e:	2101      	movs	r1, #1
  return HAL_OK;
 800a840:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a842:	6813      	ldr	r3, [r2, #0]
 800a844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a848:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a84a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a850:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a854:	f7ff ffda 	bl	800a80c <HAL_SDRAM_MspInit>
 800a858:	e7e3      	b.n	800a822 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a85a:	2001      	movs	r0, #1
}
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	52004000 	.word	0x52004000

0800a864 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a864:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a866:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a86a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a86c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a86e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a870:	d004      	beq.n	800a87c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a872:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a876:	2c01      	cmp	r4, #1
 800a878:	d001      	beq.n	800a87e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a87a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a87c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a87e:	2302      	movs	r3, #2
 800a880:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a882:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a884:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a888:	f000 f8ac 	bl	800a9e4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a88c:	6833      	ldr	r3, [r6, #0]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d003      	beq.n	800a89a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a892:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a894:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 800a898:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a89a:	2305      	movs	r3, #5
  return HAL_OK;
 800a89c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a89e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}

0800a8a4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a8a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a8a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a8aa:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	b2d8      	uxtb	r0, r3
 800a8b0:	d005      	beq.n	800a8be <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a8b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	b2dd      	uxtb	r5, r3
 800a8ba:	d001      	beq.n	800a8c0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a8bc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8c0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a8c2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a8c8:	f000 f8a2 	bl	800aa10 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a8cc:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ce:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}

0800a8d4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8d4:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8d6:	6802      	ldr	r2, [r0, #0]
{
 800a8d8:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8da:	b9c3      	cbnz	r3, 800a90e <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800a8e0:	684c      	ldr	r4, [r1, #4]
 800a8e2:	698e      	ldr	r6, [r1, #24]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a8ea:	4323      	orrs	r3, r4
 800a8ec:	690c      	ldr	r4, [r1, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	694a      	ldr	r2, [r1, #20]
 800a8f2:	432b      	orrs	r3, r5
 800a8f4:	69cd      	ldr	r5, [r1, #28]
 800a8f6:	4323      	orrs	r3, r4
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	4333      	orrs	r3, r6
 800a8fc:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800a900:	432b      	orrs	r3, r5
 800a902:	4323      	orrs	r3, r4
 800a904:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a906:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a908:	6003      	str	r3, [r0, #0]
}
 800a90a:	2000      	movs	r0, #0
 800a90c:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a90e:	69cb      	ldr	r3, [r1, #28]
 800a910:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a914:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a916:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a918:	4b0b      	ldr	r3, [pc, #44]	; (800a948 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a91a:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800a91e:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a920:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a922:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a924:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a926:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a928:	6842      	ldr	r2, [r0, #4]
 800a92a:	4013      	ands	r3, r2
 800a92c:	432b      	orrs	r3, r5
 800a92e:	690d      	ldr	r5, [r1, #16]
 800a930:	4323      	orrs	r3, r4
 800a932:	4333      	orrs	r3, r6
 800a934:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800a938:	432b      	orrs	r3, r5
 800a93a:	4323      	orrs	r3, r4
 800a93c:	4313      	orrs	r3, r2
}
 800a93e:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a940:	6043      	str	r3, [r0, #4]
}
 800a942:	2000      	movs	r0, #0
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	ffff8000 	.word	0xffff8000

0800a94c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a94c:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a94e:	bb0a      	cbnz	r2, 800a994 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a950:	684c      	ldr	r4, [r1, #4]
 800a952:	6882      	ldr	r2, [r0, #8]
 800a954:	680d      	ldr	r5, [r1, #0]
 800a956:	1e63      	subs	r3, r4, #1
 800a958:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a95c:	688c      	ldr	r4, [r1, #8]
 800a95e:	1e6e      	subs	r6, r5, #1
 800a960:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800a964:	1e65      	subs	r5, r4, #1
 800a966:	68cc      	ldr	r4, [r1, #12]
 800a968:	4333      	orrs	r3, r6
 800a96a:	690a      	ldr	r2, [r1, #16]
 800a96c:	1e66      	subs	r6, r4, #1
 800a96e:	694c      	ldr	r4, [r1, #20]
 800a970:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a974:	1e55      	subs	r5, r2, #1
 800a976:	698a      	ldr	r2, [r1, #24]
 800a978:	1e61      	subs	r1, r4, #1
 800a97a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800a97e:	3a01      	subs	r2, #1
 800a980:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a984:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a988:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a98c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a98e:	6083      	str	r3, [r0, #8]
}
 800a990:	2000      	movs	r0, #0
 800a992:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a994:	6882      	ldr	r2, [r0, #8]
 800a996:	68cb      	ldr	r3, [r1, #12]
 800a998:	4c11      	ldr	r4, [pc, #68]	; (800a9e0 <FMC_SDRAM_Timing_Init+0x94>)
 800a99a:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a99c:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a99e:	4014      	ands	r4, r2
 800a9a0:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9a2:	1e5e      	subs	r6, r3, #1
 800a9a4:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9a6:	3a01      	subs	r2, #1
 800a9a8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9ac:	688d      	ldr	r5, [r1, #8]
 800a9ae:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9b0:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9b4:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9b6:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9b8:	68c2      	ldr	r2, [r0, #12]
 800a9ba:	690c      	ldr	r4, [r1, #16]
 800a9bc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a9c0:	6989      	ldr	r1, [r1, #24]
 800a9c2:	3c01      	subs	r4, #1
 800a9c4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800a9c8:	3901      	subs	r1, #1
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a9d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9d4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800a9d8:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9da:	60c3      	str	r3, [r0, #12]
}
 800a9dc:	2000      	movs	r0, #0
 800a9de:	4770      	bx	lr
 800a9e0:	ff0f0fff 	.word	0xff0f0fff

0800a9e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a9e4:	b470      	push	{r4, r5, r6}
 800a9e6:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a9e8:	68ce      	ldr	r6, [r1, #12]
 800a9ea:	4c08      	ldr	r4, [pc, #32]	; (800aa0c <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a9ec:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a9ee:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a9f2:	6889      	ldr	r1, [r1, #8]
 800a9f4:	432b      	orrs	r3, r5
 800a9f6:	6915      	ldr	r5, [r2, #16]
 800a9f8:	3901      	subs	r1, #1
 800a9fa:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800a9fe:	402c      	ands	r4, r5
 800aa00:	4323      	orrs	r3, r4
 800aa02:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800aa06:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800aa08:	6113      	str	r3, [r2, #16]
}
 800aa0a:	4770      	bx	lr
 800aa0c:	ffc00000 	.word	0xffc00000

0800aa10 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa10:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800aa14:	2000      	movs	r0, #0
{
 800aa16:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa18:	6954      	ldr	r4, [r2, #20]
 800aa1a:	4023      	ands	r3, r4
}
 800aa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa20:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800aa24:	6151      	str	r1, [r2, #20]
}
 800aa26:	4770      	bx	lr
 800aa28:	ffffc001 	.word	0xffffc001

0800aa2c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800aa32:	4c15      	ldr	r4, [pc, #84]	; (800aa88 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800aa34:	2500      	movs	r5, #0
 800aa36:	4e15      	ldr	r6, [pc, #84]	; (800aa8c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800aa3e:	e9d3 7200 	ldrd	r7, r2, [r3]
 800aa42:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800aa46:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800aa4a:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800aa4c:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800aa50:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800aa52:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800aa54:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800aa56:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800aa5a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800aa5e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800aa62:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800aa66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800aa68:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800aa6a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800aa6c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800aa6e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800aa70:	6a23      	ldr	r3, [r4, #32]
 800aa72:	f106 0118 	add.w	r1, r6, #24
 800aa76:	4628      	mov	r0, r5
 800aa78:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800aa7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa7c:	f106 011c 	add.w	r1, r6, #28
 800aa80:	4628      	mov	r0, r5
}
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800aa86:	4718      	bx	r3
 800aa88:	24001624 	.word	0x24001624
 800aa8c:	240015e4 	.word	0x240015e4

0800aa90 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800aa90:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <UTIL_LCD_SetLayer+0x18>)
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	b133      	cbz	r3, 800aaa6 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800aa98:	4d04      	ldr	r5, [pc, #16]	; (800aaac <UTIL_LCD_SetLayer+0x1c>)
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	6928      	ldr	r0, [r5, #16]
 800aaa0:	4798      	blx	r3
 800aaa2:	b900      	cbnz	r0, 800aaa6 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800aaa4:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	24001624 	.word	0x24001624
 800aaac:	240015e4 	.word	0x240015e4

0800aab0 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800aab0:	4a02      	ldr	r2, [pc, #8]	; (800aabc <UTIL_LCD_SetTextColor+0xc>)
 800aab2:	68d3      	ldr	r3, [r2, #12]
 800aab4:	015b      	lsls	r3, r3, #5
 800aab6:	50d0      	str	r0, [r2, r3]
}
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	240015e4 	.word	0x240015e4

0800aac0 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800aac0:	4b02      	ldr	r3, [pc, #8]	; (800aacc <UTIL_LCD_SetBackColor+0xc>)
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aac8:	6058      	str	r0, [r3, #4]
}
 800aaca:	4770      	bx	lr
 800aacc:	240015e4 	.word	0x240015e4

0800aad0 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <UTIL_LCD_SetFont+0xc>)
 800aad2:	68da      	ldr	r2, [r3, #12]
 800aad4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aad8:	6098      	str	r0, [r3, #8]
}
 800aada:	4770      	bx	lr
 800aadc:	240015e4 	.word	0x240015e4

0800aae0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aae2:	4e13      	ldr	r6, [pc, #76]	; (800ab30 <UTIL_LCD_FillRect+0x50>)
{
 800aae4:	4615      	mov	r5, r2
 800aae6:	b083      	sub	sp, #12
 800aae8:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aaea:	69f7      	ldr	r7, [r6, #28]
{
 800aaec:	462b      	mov	r3, r5
 800aaee:	460a      	mov	r2, r1
 800aaf0:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800aaf2:	2f02      	cmp	r7, #2
 800aaf4:	d008      	beq.n	800ab08 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800aaf6:	4f0f      	ldr	r7, [pc, #60]	; (800ab34 <UTIL_LCD_FillRect+0x54>)
 800aaf8:	4601      	mov	r1, r0
 800aafa:	e9cd 4500 	strd	r4, r5, [sp]
 800aafe:	693c      	ldr	r4, [r7, #16]
 800ab00:	6930      	ldr	r0, [r6, #16]
 800ab02:	47a0      	blx	r4
  }
}
 800ab04:	b003      	add	sp, #12
 800ab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800ab08:	096f      	lsrs	r7, r5, #5
 800ab0a:	9400      	str	r4, [sp, #0]
 800ab0c:	0a29      	lsrs	r1, r5, #8
 800ab0e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800ab12:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800ab16:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	6930      	ldr	r0, [r6, #16]
 800ab1e:	433c      	orrs	r4, r7
 800ab20:	4e04      	ldr	r6, [pc, #16]	; (800ab34 <UTIL_LCD_FillRect+0x54>)
 800ab22:	4325      	orrs	r5, r4
 800ab24:	6934      	ldr	r4, [r6, #16]
 800ab26:	9501      	str	r5, [sp, #4]
 800ab28:	47a0      	blx	r4
}
 800ab2a:	b003      	add	sp, #12
 800ab2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	240015e4 	.word	0x240015e4
 800ab34:	24001624 	.word	0x24001624

0800ab38 <UTIL_LCD_Clear>:
{
 800ab38:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800ab3a:	2100      	movs	r1, #0
{
 800ab3c:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800ab3e:	4a05      	ldr	r2, [pc, #20]	; (800ab54 <UTIL_LCD_Clear+0x1c>)
 800ab40:	9000      	str	r0, [sp, #0]
 800ab42:	4608      	mov	r0, r1
 800ab44:	6993      	ldr	r3, [r2, #24]
 800ab46:	6952      	ldr	r2, [r2, #20]
 800ab48:	f7ff ffca 	bl	800aae0 <UTIL_LCD_FillRect>
}
 800ab4c:	b003      	add	sp, #12
 800ab4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab52:	bf00      	nop
 800ab54:	240015e4 	.word	0x240015e4

0800ab58 <__libc_init_array>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4d0d      	ldr	r5, [pc, #52]	; (800ab90 <__libc_init_array+0x38>)
 800ab5c:	4c0d      	ldr	r4, [pc, #52]	; (800ab94 <__libc_init_array+0x3c>)
 800ab5e:	1b64      	subs	r4, r4, r5
 800ab60:	10a4      	asrs	r4, r4, #2
 800ab62:	2600      	movs	r6, #0
 800ab64:	42a6      	cmp	r6, r4
 800ab66:	d109      	bne.n	800ab7c <__libc_init_array+0x24>
 800ab68:	4d0b      	ldr	r5, [pc, #44]	; (800ab98 <__libc_init_array+0x40>)
 800ab6a:	4c0c      	ldr	r4, [pc, #48]	; (800ab9c <__libc_init_array+0x44>)
 800ab6c:	f000 f82e 	bl	800abcc <_init>
 800ab70:	1b64      	subs	r4, r4, r5
 800ab72:	10a4      	asrs	r4, r4, #2
 800ab74:	2600      	movs	r6, #0
 800ab76:	42a6      	cmp	r6, r4
 800ab78:	d105      	bne.n	800ab86 <__libc_init_array+0x2e>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab80:	4798      	blx	r3
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7ee      	b.n	800ab64 <__libc_init_array+0xc>
 800ab86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8a:	4798      	blx	r3
 800ab8c:	3601      	adds	r6, #1
 800ab8e:	e7f2      	b.n	800ab76 <__libc_init_array+0x1e>
 800ab90:	08014944 	.word	0x08014944
 800ab94:	08014944 	.word	0x08014944
 800ab98:	08014944 	.word	0x08014944
 800ab9c:	08014948 	.word	0x08014948

0800aba0 <memcpy>:
 800aba0:	440a      	add	r2, r1
 800aba2:	4291      	cmp	r1, r2
 800aba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba8:	d100      	bne.n	800abac <memcpy+0xc>
 800abaa:	4770      	bx	lr
 800abac:	b510      	push	{r4, lr}
 800abae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb6:	4291      	cmp	r1, r2
 800abb8:	d1f9      	bne.n	800abae <memcpy+0xe>
 800abba:	bd10      	pop	{r4, pc}

0800abbc <memset>:
 800abbc:	4402      	add	r2, r0
 800abbe:	4603      	mov	r3, r0
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d100      	bne.n	800abc6 <memset+0xa>
 800abc4:	4770      	bx	lr
 800abc6:	f803 1b01 	strb.w	r1, [r3], #1
 800abca:	e7f9      	b.n	800abc0 <memset+0x4>

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
