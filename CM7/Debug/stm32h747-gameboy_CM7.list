
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e30  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007244  08007244  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007244  08007244  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  24000000  0800724c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2400005c  080072a8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002c8  080072a8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a36d  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7b  00000000  00000000  0004a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0004e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0004f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042f85  00000000  00000000  000505a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018066  00000000  00000000  00093525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4fe0  00000000  00000000  000ab58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0026056b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b7c  00000000  00000000  002605c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400005c 	.word	0x2400005c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080070b0 	.word	0x080070b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000060 	.word	0x24000060
 80002d4:	080070b0 	.word	0x080070b0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <main+0xdc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f945 	bl	80006c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f002 f9f5 	bl	8002828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f859 	bl	80004f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <main+0xdc>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a27      	ldr	r2, [pc, #156]	; (80004e8 <main+0xdc>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <main+0xdc>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f003 fe9d 	bl	80041a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f003 feb3 	bl	80041d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <main+0xdc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f917 	bl	80006c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8ad 	bl	80005f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  vLEDInit();
 800049a:	f000 f8e3 	bl	8000664 <vLEDInit>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800049e:	2101      	movs	r1, #1
 80004a0:	2000      	movs	r0, #0
 80004a2:	f001 faf3 	bl	8001a8c <BSP_LCD_Init>
  BSP_LCD_DisplayOff(0);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f001 fde8 	bl	800207c <BSP_LCD_DisplayOff>
  HAL_Delay(1000);
 80004ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b0:	f002 fa54 	bl	800295c <HAL_Delay>
  BSP_LCD_DisplayOn(0);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f001 fdbd 	bl	8002034 <BSP_LCD_DisplayOn>
  BSP_LCD_FillRect(0, 0, 0, 800, 480, LCD_COLOR_ARGB8888_BLUE);
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0xe0>)
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f001 fdf9 	bl	80020c4 <BSP_LCD_FillRect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80004d2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <main+0xe4>)
 80004d8:	f003 fe47 	bl	800416a <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, 0);
	//HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
	//HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
	//HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
	HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e0:	f002 fa3c 	bl	800295c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80004e4:	e7f5      	b.n	80004d2 <main+0xc6>
 80004e6:	bf00      	nop
 80004e8:	58024400 	.word	0x58024400
 80004ec:	ff0000ff 	.word	0xff0000ff
 80004f0:	58022000 	.word	0x58022000

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09c      	sub	sp, #112	; 0x70
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fe:	224c      	movs	r2, #76	; 0x4c
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f006 fdcc 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2220      	movs	r2, #32
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 fdc6 	bl	80070a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000514:	2004      	movs	r0, #4
 8000516:	f004 fb21 	bl	8004b5c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <SystemClock_Config+0xf4>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <SystemClock_Config+0xf4>)
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052a:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <SystemClock_Config+0xf4>)
 800052c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <SystemClock_Config+0xf8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a2c      	ldr	r2, [pc, #176]	; (80005ec <SystemClock_Config+0xf8>)
 800053a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <SystemClock_Config+0xf8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800054c:	bf00      	nop
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xf8>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055a:	d1f8      	bne.n	800054e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <SystemClock_Config+0xfc>)
 800055e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000560:	f023 0303 	bic.w	r3, r3, #3
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <SystemClock_Config+0xfc>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800056c:	230b      	movs	r3, #11
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000576:	2301      	movs	r3, #1
 8000578:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2340      	movs	r3, #64	; 0x40
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	2302      	movs	r3, #2
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fb3e 	bl	8004c10 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800059a:	f000 f893 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	233f      	movs	r3, #63	; 0x3f
 80005a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 ff34 	bl	8005430 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80005ce:	f000 f879 	bl	80006c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f005 f8df 	bl	800579c <HAL_RCC_MCOConfig>
}
 80005de:	bf00      	nop
 80005e0:	3770      	adds	r7, #112	; 0x70
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	58000400 	.word	0x58000400
 80005ec:	58024800 	.word	0x58024800
 80005f0:	58024400 	.word	0x58024400

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0x6c>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_GPIO_Init+0x6c>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x6c>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_GPIO_Init+0x6c>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <MX_GPIO_Init+0x6c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0x6c>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_GPIO_Init+0x6c>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0x6c>)
 800063e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0x6c>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	58024400 	.word	0x58024400

08000664 <vLEDInit>:

/* USER CODE BEGIN 4 */
static void vLEDInit(void){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <vLEDInit+0x58>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <vLEDInit+0x58>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <vLEDInit+0x58>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000696:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800069a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <vLEDInit+0x5c>)
 80006ae:	f003 fb93 	bl	8003dd8 <HAL_GPIO_Init>
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	58024400 	.word	0x58024400
 80006c0:	58022000 	.word	0x58022000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>

080006ce <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <HardFault_Handler+0x4>

080006e2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <MemManage_Handler+0x4>

080006e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <BusFault_Handler+0x4>

080006ee <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <UsageFault_Handler+0x4>

080006f4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000722:	f002 f8fb 	bl	800291c <HAL_IncTick>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <LTDC_IRQHandler>:
  * @brief  This function handles LTDC interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <LTDC_IRQHandler+0x10>)
 8000732:	f003 fe3d 	bl	80043b0 <HAL_LTDC_IRQHandler>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	24000148 	.word	0x24000148

08000740 <LTDC_ER_IRQHandler>:

void LTDC_ER_IRQHandler(void)
{ 
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <LTDC_ER_IRQHandler+0x10>)
 8000746:	f003 fe33 	bl	80043b0 <HAL_LTDC_IRQHandler>

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	24000148 	.word	0x24000148

08000754 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <DSI_IRQHandler+0x10>)
 800075a:	f002 fe87 	bl	800346c <HAL_DSI_IRQHandler>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2400020c 	.word	0x2400020c

08000768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800076c:	f7ff fdb4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f006 fc5f 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079a:	f7ff fe37 	bl	800040c <main>
  bx  lr
 800079e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80007a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007a8:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 80007ac:	0800724c 	.word	0x0800724c
  ldr r2, =_sbss
 80007b0:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 80007b4:	240002c8 	.word	0x240002c8

080007b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC3_IRQHandler>

080007ba <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f831 	bl	8000838 <IS42S32800J_ClockEnable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d128      	bne.n	800082e <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 f8e1 	bl	80009a4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f849 	bl	8000880 <IS42S32800J_Precharge>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d11c      	bne.n	800082e <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	461a      	mov	r2, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f896 	bl	8000930 <IS42S32800J_RefreshMode>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d111      	bne.n	800082e <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800080a:	6839      	ldr	r1, [r7, #0]
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f85b 	bl	80008c8 <IS42S32800J_ModeRegConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10a      	bne.n	800082e <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f8ac 	bl	800097c <IS42S32800J_RefreshRate>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <IS42S32800J_ClockEnable+0x44>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <IS42S32800J_ClockEnable+0x44>)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <IS42S32800J_ClockEnable+0x44>)
 8000850:	2201      	movs	r2, #1
 8000852:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <IS42S32800J_ClockEnable+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	4907      	ldr	r1, [pc, #28]	; (800087c <IS42S32800J_ClockEnable+0x44>)
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f006 fa99 	bl	8006d98 <HAL_SDRAM_SendCommand>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	e000      	b.n	8000874 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000872:	2300      	movs	r3, #0
  }
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000078 	.word	0x24000078

08000880 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <IS42S32800J_Precharge+0x44>)
 800088c:	2202      	movs	r2, #2
 800088e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <IS42S32800J_Precharge+0x44>)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <IS42S32800J_Precharge+0x44>)
 8000898:	2201      	movs	r2, #1
 800089a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <IS42S32800J_Precharge+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <IS42S32800J_Precharge+0x44>)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f006 fa75 	bl	8006d98 <HAL_SDRAM_SendCommand>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e000      	b.n	80008bc <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80008ba:	2300      	movs	r3, #0
  }
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000078 	.word	0x24000078

080008c8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008da:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80008e0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80008e6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <IS42S32800J_ModeRegConfig+0x64>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <IS42S32800J_ModeRegConfig+0x64>)
 80008fc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <IS42S32800J_ModeRegConfig+0x64>)
 8000900:	2201      	movs	r2, #1
 8000902:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <IS42S32800J_ModeRegConfig+0x64>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090e:	4907      	ldr	r1, [pc, #28]	; (800092c <IS42S32800J_ModeRegConfig+0x64>)
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f006 fa41 	bl	8006d98 <HAL_SDRAM_SendCommand>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	e000      	b.n	8000924 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000922:	2300      	movs	r3, #0
  }
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24000078 	.word	0x24000078

08000930 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <IS42S32800J_RefreshMode+0x48>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <IS42S32800J_RefreshMode+0x48>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <IS42S32800J_RefreshMode+0x48>)
 800094a:	2208      	movs	r2, #8
 800094c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <IS42S32800J_RefreshMode+0x48>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <IS42S32800J_RefreshMode+0x48>)
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f006 fa1c 	bl	8006d98 <HAL_SDRAM_SendCommand>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e000      	b.n	800096e <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 800096c:	2300      	movs	r3, #0
  }
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000078 	.word	0x24000078

0800097c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000986:	6839      	ldr	r1, [r7, #0]
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f006 fa3a 	bl	8006e02 <HAL_SDRAM_ProgramRefreshRate>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	e000      	b.n	800099c <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 800099a:	2300      	movs	r3, #0
  }
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80009ac:	f001 ffca 	bl	8002944 <HAL_GetTick>
 80009b0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80009b2:	bf00      	nop
 80009b4:	f001 ffc6 	bl	8002944 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e014      	b.n	8000a16 <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <OTM8009A_RegisterBusIO+0x54>)
 8000a08:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <OTM8009A_RegisterBusIO+0x58>)
 8000a0e:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	0800198b 	.word	0x0800198b
 8000a28:	080019bd 	.word	0x080019bd

08000a2c <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f103 0010 	add.w	r0, r3, #16
 8000a3e:	2300      	movs	r3, #0
 8000a40:	4abf      	ldr	r2, [pc, #764]	; (8000d40 <OTM8009A_Init+0x314>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	f001 f804 	bl	8001a50 <otm8009a_write_reg>
 8000a48:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f103 0010 	add.w	r0, r3, #16
 8000a50:	2303      	movs	r3, #3
 8000a52:	4abc      	ldr	r2, [pc, #752]	; (8000d44 <OTM8009A_Init+0x318>)
 8000a54:	21ff      	movs	r1, #255	; 0xff
 8000a56:	f000 fffb 	bl	8001a50 <otm8009a_write_reg>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f103 0010 	add.w	r0, r3, #16
 8000a68:	2300      	movs	r3, #0
 8000a6a:	4ab7      	ldr	r2, [pc, #732]	; (8000d48 <OTM8009A_Init+0x31c>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f000 ffef 	bl	8001a50 <otm8009a_write_reg>
 8000a72:	4602      	mov	r2, r0
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	4413      	add	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f103 0010 	add.w	r0, r3, #16
 8000a80:	2302      	movs	r3, #2
 8000a82:	4ab2      	ldr	r2, [pc, #712]	; (8000d4c <OTM8009A_Init+0x320>)
 8000a84:	21ff      	movs	r1, #255	; 0xff
 8000a86:	f000 ffe3 	bl	8001a50 <otm8009a_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	4413      	add	r3, r2
 8000a90:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f103 0010 	add.w	r0, r3, #16
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4aab      	ldr	r2, [pc, #684]	; (8000d48 <OTM8009A_Init+0x31c>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f000 ffd7 	bl	8001a50 <otm8009a_write_reg>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f103 0010 	add.w	r0, r3, #16
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	4aa7      	ldr	r2, [pc, #668]	; (8000d50 <OTM8009A_Init+0x324>)
 8000ab4:	21c4      	movs	r1, #196	; 0xc4
 8000ab6:	f000 ffcb 	bl	8001a50 <otm8009a_write_reg>
 8000aba:	4602      	mov	r2, r0
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	4413      	add	r3, r2
 8000ac0:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 ff92 	bl	80019ee <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f103 0010 	add.w	r0, r3, #16
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4aa0      	ldr	r2, [pc, #640]	; (8000d54 <OTM8009A_Init+0x328>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f000 ffbb 	bl	8001a50 <otm8009a_write_reg>
 8000ada:	4602      	mov	r2, r0
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	4413      	add	r3, r2
 8000ae0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f103 0010 	add.w	r0, r3, #16
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4a9b      	ldr	r2, [pc, #620]	; (8000d58 <OTM8009A_Init+0x32c>)
 8000aec:	21c4      	movs	r1, #196	; 0xc4
 8000aee:	f000 ffaf 	bl	8001a50 <otm8009a_write_reg>
 8000af2:	4602      	mov	r2, r0
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	4413      	add	r3, r2
 8000af8:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 8000afa:	210a      	movs	r1, #10
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f000 ff76 	bl	80019ee <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f103 0010 	add.w	r0, r3, #16
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4a94      	ldr	r2, [pc, #592]	; (8000d5c <OTM8009A_Init+0x330>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f000 ff9f 	bl	8001a50 <otm8009a_write_reg>
 8000b12:	4602      	mov	r2, r0
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	4413      	add	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f103 0010 	add.w	r0, r3, #16
 8000b20:	2300      	movs	r3, #0
 8000b22:	4a8f      	ldr	r2, [pc, #572]	; (8000d60 <OTM8009A_Init+0x334>)
 8000b24:	21c5      	movs	r1, #197	; 0xc5
 8000b26:	f000 ff93 	bl	8001a50 <otm8009a_write_reg>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	4413      	add	r3, r2
 8000b30:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f103 0010 	add.w	r0, r3, #16
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4a8a      	ldr	r2, [pc, #552]	; (8000d64 <OTM8009A_Init+0x338>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f000 ff87 	bl	8001a50 <otm8009a_write_reg>
 8000b42:	4602      	mov	r2, r0
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4413      	add	r3, r2
 8000b48:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f103 0010 	add.w	r0, r3, #16
 8000b50:	2300      	movs	r3, #0
 8000b52:	4a85      	ldr	r2, [pc, #532]	; (8000d68 <OTM8009A_Init+0x33c>)
 8000b54:	21c5      	movs	r1, #197	; 0xc5
 8000b56:	f000 ff7b 	bl	8001a50 <otm8009a_write_reg>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4413      	add	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f103 0010 	add.w	r0, r3, #16
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4a80      	ldr	r2, [pc, #512]	; (8000d6c <OTM8009A_Init+0x340>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f000 ff6f 	bl	8001a50 <otm8009a_write_reg>
 8000b72:	4602      	mov	r2, r0
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	4413      	add	r3, r2
 8000b78:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f103 0010 	add.w	r0, r3, #16
 8000b80:	2300      	movs	r3, #0
 8000b82:	4a7b      	ldr	r2, [pc, #492]	; (8000d70 <OTM8009A_Init+0x344>)
 8000b84:	21c0      	movs	r1, #192	; 0xc0
 8000b86:	f000 ff63 	bl	8001a50 <otm8009a_write_reg>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f103 0010 	add.w	r0, r3, #16
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4a69      	ldr	r2, [pc, #420]	; (8000d40 <OTM8009A_Init+0x314>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f000 ff57 	bl	8001a50 <otm8009a_write_reg>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f103 0010 	add.w	r0, r3, #16
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4a70      	ldr	r2, [pc, #448]	; (8000d74 <OTM8009A_Init+0x348>)
 8000bb4:	21d9      	movs	r1, #217	; 0xd9
 8000bb6:	f000 ff4b 	bl	8001a50 <otm8009a_write_reg>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f103 0010 	add.w	r0, r3, #16
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4a6b      	ldr	r2, [pc, #428]	; (8000d78 <OTM8009A_Init+0x34c>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f000 ff3f 	bl	8001a50 <otm8009a_write_reg>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f103 0010 	add.w	r0, r3, #16
 8000be0:	2300      	movs	r3, #0
 8000be2:	4a66      	ldr	r2, [pc, #408]	; (8000d7c <OTM8009A_Init+0x350>)
 8000be4:	21c1      	movs	r1, #193	; 0xc1
 8000be6:	f000 ff33 	bl	8001a50 <otm8009a_write_reg>
 8000bea:	4602      	mov	r2, r0
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4413      	add	r3, r2
 8000bf0:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f103 0010 	add.w	r0, r3, #16
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4a61      	ldr	r2, [pc, #388]	; (8000d80 <OTM8009A_Init+0x354>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f000 ff27 	bl	8001a50 <otm8009a_write_reg>
 8000c02:	4602      	mov	r2, r0
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4413      	add	r3, r2
 8000c08:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f103 0010 	add.w	r0, r3, #16
 8000c10:	2300      	movs	r3, #0
 8000c12:	4a5c      	ldr	r2, [pc, #368]	; (8000d84 <OTM8009A_Init+0x358>)
 8000c14:	21c1      	movs	r1, #193	; 0xc1
 8000c16:	f000 ff1b 	bl	8001a50 <otm8009a_write_reg>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	4413      	add	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f103 0010 	add.w	r0, r3, #16
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <OTM8009A_Init+0x35c>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f000 ff0f 	bl	8001a50 <otm8009a_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4413      	add	r3, r2
 8000c38:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f103 0010 	add.w	r0, r3, #16
 8000c40:	2300      	movs	r3, #0
 8000c42:	4a52      	ldr	r2, [pc, #328]	; (8000d8c <OTM8009A_Init+0x360>)
 8000c44:	21c5      	movs	r1, #197	; 0xc5
 8000c46:	f000 ff03 	bl	8001a50 <otm8009a_write_reg>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f103 0010 	add.w	r0, r3, #16
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4a4d      	ldr	r2, [pc, #308]	; (8000d90 <OTM8009A_Init+0x364>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f000 fef7 	bl	8001a50 <otm8009a_write_reg>
 8000c62:	4602      	mov	r2, r0
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f103 0010 	add.w	r0, r3, #16
 8000c70:	2300      	movs	r3, #0
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <OTM8009A_Init+0x33c>)
 8000c74:	21c5      	movs	r1, #197	; 0xc5
 8000c76:	f000 feeb 	bl	8001a50 <otm8009a_write_reg>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f103 0010 	add.w	r0, r3, #16
 8000c88:	2300      	movs	r3, #0
 8000c8a:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <OTM8009A_Init+0x314>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f000 fedf 	bl	8001a50 <otm8009a_write_reg>
 8000c92:	4602      	mov	r2, r0
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4413      	add	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f103 0010 	add.w	r0, r3, #16
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	4a3c      	ldr	r2, [pc, #240]	; (8000d94 <OTM8009A_Init+0x368>)
 8000ca4:	21d8      	movs	r1, #216	; 0xd8
 8000ca6:	f000 fed3 	bl	8001a50 <otm8009a_write_reg>
 8000caa:	4602      	mov	r2, r0
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4413      	add	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f103 0010 	add.w	r0, r3, #16
 8000cb8:	2300      	movs	r3, #0
 8000cba:	4a37      	ldr	r2, [pc, #220]	; (8000d98 <OTM8009A_Init+0x36c>)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f000 fec7 	bl	8001a50 <otm8009a_write_reg>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f103 0010 	add.w	r0, r3, #16
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <OTM8009A_Init+0x370>)
 8000cd4:	21c5      	movs	r1, #197	; 0xc5
 8000cd6:	f000 febb 	bl	8001a50 <otm8009a_write_reg>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	4413      	add	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f103 0010 	add.w	r0, r3, #16
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <OTM8009A_Init+0x374>)
 8000cec:	2100      	movs	r1, #0
 8000cee:	f000 feaf 	bl	8001a50 <otm8009a_write_reg>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f103 0010 	add.w	r0, r3, #16
 8000d00:	2300      	movs	r3, #0
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <OTM8009A_Init+0x378>)
 8000d04:	21c0      	movs	r1, #192	; 0xc0
 8000d06:	f000 fea3 	bl	8001a50 <otm8009a_write_reg>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	4413      	add	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f103 0010 	add.w	r0, r3, #16
 8000d18:	2300      	movs	r3, #0
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <OTM8009A_Init+0x37c>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f000 fe97 	bl	8001a50 <otm8009a_write_reg>
 8000d22:	4602      	mov	r2, r0
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f103 0010 	add.w	r0, r3, #16
 8000d30:	2300      	movs	r3, #0
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <OTM8009A_Init+0x380>)
 8000d34:	21c5      	movs	r1, #197	; 0xc5
 8000d36:	f000 fe8b 	bl	8001a50 <otm8009a_write_reg>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	e038      	b.n	8000db0 <OTM8009A_Init+0x384>
 8000d3e:	bf00      	nop
 8000d40:	080070e1 	.word	0x080070e1
 8000d44:	08007114 	.word	0x08007114
 8000d48:	080070e2 	.word	0x080070e2
 8000d4c:	08007118 	.word	0x08007118
 8000d50:	080070e3 	.word	0x080070e3
 8000d54:	080070e4 	.word	0x080070e4
 8000d58:	080070e5 	.word	0x080070e5
 8000d5c:	080070e6 	.word	0x080070e6
 8000d60:	080070e7 	.word	0x080070e7
 8000d64:	080070e8 	.word	0x080070e8
 8000d68:	080070e9 	.word	0x080070e9
 8000d6c:	080070ea 	.word	0x080070ea
 8000d70:	080070eb 	.word	0x080070eb
 8000d74:	080070ec 	.word	0x080070ec
 8000d78:	080070ed 	.word	0x080070ed
 8000d7c:	080070ee 	.word	0x080070ee
 8000d80:	080070ef 	.word	0x080070ef
 8000d84:	080070f0 	.word	0x080070f0
 8000d88:	080070f1 	.word	0x080070f1
 8000d8c:	080070f2 	.word	0x080070f2
 8000d90:	080070f3 	.word	0x080070f3
 8000d94:	0800711c 	.word	0x0800711c
 8000d98:	080070f4 	.word	0x080070f4
 8000d9c:	080070f5 	.word	0x080070f5
 8000da0:	080070f6 	.word	0x080070f6
 8000da4:	080070f7 	.word	0x080070f7
 8000da8:	080070f8 	.word	0x080070f8
 8000dac:	080070f9 	.word	0x080070f9
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	4413      	add	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f103 0010 	add.w	r0, r3, #16
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4abe      	ldr	r2, [pc, #760]	; (80010b8 <OTM8009A_Init+0x68c>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f000 fe45 	bl	8001a50 <otm8009a_write_reg>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	4413      	add	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f103 0010 	add.w	r0, r3, #16
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4ab9      	ldr	r2, [pc, #740]	; (80010bc <OTM8009A_Init+0x690>)
 8000dd8:	21c4      	movs	r1, #196	; 0xc4
 8000dda:	f000 fe39 	bl	8001a50 <otm8009a_write_reg>
 8000dde:	4602      	mov	r2, r0
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	4413      	add	r3, r2
 8000de4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f103 0010 	add.w	r0, r3, #16
 8000dec:	2300      	movs	r3, #0
 8000dee:	4ab4      	ldr	r2, [pc, #720]	; (80010c0 <OTM8009A_Init+0x694>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	f000 fe2d 	bl	8001a50 <otm8009a_write_reg>
 8000df6:	4602      	mov	r2, r0
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f103 0010 	add.w	r0, r3, #16
 8000e04:	2300      	movs	r3, #0
 8000e06:	4aaf      	ldr	r2, [pc, #700]	; (80010c4 <OTM8009A_Init+0x698>)
 8000e08:	21c1      	movs	r1, #193	; 0xc1
 8000e0a:	f000 fe21 	bl	8001a50 <otm8009a_write_reg>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	4413      	add	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f103 0010 	add.w	r0, r3, #16
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4aaa      	ldr	r2, [pc, #680]	; (80010c8 <OTM8009A_Init+0x69c>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	f000 fe15 	bl	8001a50 <otm8009a_write_reg>
 8000e26:	4602      	mov	r2, r0
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f103 0010 	add.w	r0, r3, #16
 8000e34:	2302      	movs	r3, #2
 8000e36:	4aa5      	ldr	r2, [pc, #660]	; (80010cc <OTM8009A_Init+0x6a0>)
 8000e38:	21b3      	movs	r1, #179	; 0xb3
 8000e3a:	f000 fe09 	bl	8001a50 <otm8009a_write_reg>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	4413      	add	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f103 0010 	add.w	r0, r3, #16
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4aa0      	ldr	r2, [pc, #640]	; (80010d0 <OTM8009A_Init+0x6a4>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	f000 fdfd 	bl	8001a50 <otm8009a_write_reg>
 8000e56:	4602      	mov	r2, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f103 0010 	add.w	r0, r3, #16
 8000e64:	2306      	movs	r3, #6
 8000e66:	4a9b      	ldr	r2, [pc, #620]	; (80010d4 <OTM8009A_Init+0x6a8>)
 8000e68:	21ce      	movs	r1, #206	; 0xce
 8000e6a:	f000 fdf1 	bl	8001a50 <otm8009a_write_reg>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4413      	add	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f103 0010 	add.w	r0, r3, #16
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4a96      	ldr	r2, [pc, #600]	; (80010d8 <OTM8009A_Init+0x6ac>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	f000 fde5 	bl	8001a50 <otm8009a_write_reg>
 8000e86:	4602      	mov	r2, r0
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f103 0010 	add.w	r0, r3, #16
 8000e94:	230e      	movs	r3, #14
 8000e96:	4a91      	ldr	r2, [pc, #580]	; (80010dc <OTM8009A_Init+0x6b0>)
 8000e98:	21ce      	movs	r1, #206	; 0xce
 8000e9a:	f000 fdd9 	bl	8001a50 <otm8009a_write_reg>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f103 0010 	add.w	r0, r3, #16
 8000eac:	2300      	movs	r3, #0
 8000eae:	4a8c      	ldr	r2, [pc, #560]	; (80010e0 <OTM8009A_Init+0x6b4>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f000 fdcd 	bl	8001a50 <otm8009a_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f103 0010 	add.w	r0, r3, #16
 8000ec4:	230e      	movs	r3, #14
 8000ec6:	4a87      	ldr	r2, [pc, #540]	; (80010e4 <OTM8009A_Init+0x6b8>)
 8000ec8:	21ce      	movs	r1, #206	; 0xce
 8000eca:	f000 fdc1 	bl	8001a50 <otm8009a_write_reg>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f103 0010 	add.w	r0, r3, #16
 8000edc:	2300      	movs	r3, #0
 8000ede:	4a82      	ldr	r2, [pc, #520]	; (80010e8 <OTM8009A_Init+0x6bc>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f000 fdb5 	bl	8001a50 <otm8009a_write_reg>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f103 0010 	add.w	r0, r3, #16
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <OTM8009A_Init+0x6c0>)
 8000ef8:	21cf      	movs	r1, #207	; 0xcf
 8000efa:	f000 fda9 	bl	8001a50 <otm8009a_write_reg>
 8000efe:	4602      	mov	r2, r0
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4413      	add	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f103 0010 	add.w	r0, r3, #16
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4a78      	ldr	r2, [pc, #480]	; (80010f0 <OTM8009A_Init+0x6c4>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	f000 fd9d 	bl	8001a50 <otm8009a_write_reg>
 8000f16:	4602      	mov	r2, r0
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f103 0010 	add.w	r0, r3, #16
 8000f24:	2300      	movs	r3, #0
 8000f26:	4a73      	ldr	r2, [pc, #460]	; (80010f4 <OTM8009A_Init+0x6c8>)
 8000f28:	21cf      	movs	r1, #207	; 0xcf
 8000f2a:	f000 fd91 	bl	8001a50 <otm8009a_write_reg>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f103 0010 	add.w	r0, r3, #16
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4a64      	ldr	r2, [pc, #400]	; (80010d0 <OTM8009A_Init+0x6a4>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	f000 fd85 	bl	8001a50 <otm8009a_write_reg>
 8000f46:	4602      	mov	r2, r0
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f103 0010 	add.w	r0, r3, #16
 8000f54:	230a      	movs	r3, #10
 8000f56:	4a68      	ldr	r2, [pc, #416]	; (80010f8 <OTM8009A_Init+0x6cc>)
 8000f58:	21cb      	movs	r1, #203	; 0xcb
 8000f5a:	f000 fd79 	bl	8001a50 <otm8009a_write_reg>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f103 0010 	add.w	r0, r3, #16
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4a63      	ldr	r2, [pc, #396]	; (80010fc <OTM8009A_Init+0x6d0>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	f000 fd6d 	bl	8001a50 <otm8009a_write_reg>
 8000f76:	4602      	mov	r2, r0
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f103 0010 	add.w	r0, r3, #16
 8000f84:	230f      	movs	r3, #15
 8000f86:	4a5e      	ldr	r2, [pc, #376]	; (8001100 <OTM8009A_Init+0x6d4>)
 8000f88:	21cb      	movs	r1, #203	; 0xcb
 8000f8a:	f000 fd61 	bl	8001a50 <otm8009a_write_reg>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f103 0010 	add.w	r0, r3, #16
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <OTM8009A_Init+0x6ac>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f000 fd55 	bl	8001a50 <otm8009a_write_reg>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f103 0010 	add.w	r0, r3, #16
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4a53      	ldr	r2, [pc, #332]	; (8001104 <OTM8009A_Init+0x6d8>)
 8000fb8:	21cb      	movs	r1, #203	; 0xcb
 8000fba:	f000 fd49 	bl	8001a50 <otm8009a_write_reg>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f103 0010 	add.w	r0, r3, #16
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <OTM8009A_Init+0x6b4>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f000 fd3d 	bl	8001a50 <otm8009a_write_reg>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4413      	add	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f103 0010 	add.w	r0, r3, #16
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	4a48      	ldr	r2, [pc, #288]	; (8001108 <OTM8009A_Init+0x6dc>)
 8000fe8:	21cb      	movs	r1, #203	; 0xcb
 8000fea:	f000 fd31 	bl	8001a50 <otm8009a_write_reg>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f103 0010 	add.w	r0, r3, #16
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4a3a      	ldr	r2, [pc, #232]	; (80010e8 <OTM8009A_Init+0x6bc>)
 8001000:	2100      	movs	r1, #0
 8001002:	f000 fd25 	bl	8001a50 <otm8009a_write_reg>
 8001006:	4602      	mov	r2, r0
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f103 0010 	add.w	r0, r3, #16
 8001014:	230f      	movs	r3, #15
 8001016:	4a3d      	ldr	r2, [pc, #244]	; (800110c <OTM8009A_Init+0x6e0>)
 8001018:	21cb      	movs	r1, #203	; 0xcb
 800101a:	f000 fd19 	bl	8001a50 <otm8009a_write_reg>
 800101e:	4602      	mov	r2, r0
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f103 0010 	add.w	r0, r3, #16
 800102c:	2300      	movs	r3, #0
 800102e:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <OTM8009A_Init+0x6c4>)
 8001030:	2100      	movs	r1, #0
 8001032:	f000 fd0d 	bl	8001a50 <otm8009a_write_reg>
 8001036:	4602      	mov	r2, r0
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f103 0010 	add.w	r0, r3, #16
 8001044:	230f      	movs	r3, #15
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <OTM8009A_Init+0x6e4>)
 8001048:	21cb      	movs	r1, #203	; 0xcb
 800104a:	f000 fd01 	bl	8001a50 <otm8009a_write_reg>
 800104e:	4602      	mov	r2, r0
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f103 0010 	add.w	r0, r3, #16
 800105c:	2300      	movs	r3, #0
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <OTM8009A_Init+0x6e8>)
 8001060:	2100      	movs	r1, #0
 8001062:	f000 fcf5 	bl	8001a50 <otm8009a_write_reg>
 8001066:	4602      	mov	r2, r0
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4413      	add	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f103 0010 	add.w	r0, r3, #16
 8001074:	230a      	movs	r3, #10
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <OTM8009A_Init+0x6ec>)
 8001078:	21cb      	movs	r1, #203	; 0xcb
 800107a:	f000 fce9 	bl	8001a50 <otm8009a_write_reg>
 800107e:	4602      	mov	r2, r0
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f103 0010 	add.w	r0, r3, #16
 800108c:	2300      	movs	r3, #0
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <OTM8009A_Init+0x6f0>)
 8001090:	2100      	movs	r1, #0
 8001092:	f000 fcdd 	bl	8001a50 <otm8009a_write_reg>
 8001096:	4602      	mov	r2, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	4413      	add	r3, r2
 800109c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f103 0010 	add.w	r0, r3, #16
 80010a4:	230a      	movs	r3, #10
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <OTM8009A_Init+0x6f4>)
 80010a8:	21cb      	movs	r1, #203	; 0xcb
 80010aa:	f000 fcd1 	bl	8001a50 <otm8009a_write_reg>
 80010ae:	4602      	mov	r2, r0
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e035      	b.n	8001124 <OTM8009A_Init+0x6f8>
 80010b8:	080070ed 	.word	0x080070ed
 80010bc:	080070fa 	.word	0x080070fa
 80010c0:	080070ef 	.word	0x080070ef
 80010c4:	080070fb 	.word	0x080070fb
 80010c8:	080070fc 	.word	0x080070fc
 80010cc:	08007120 	.word	0x08007120
 80010d0:	080070e2 	.word	0x080070e2
 80010d4:	08007124 	.word	0x08007124
 80010d8:	080070fd 	.word	0x080070fd
 80010dc:	0800712c 	.word	0x0800712c
 80010e0:	080070fe 	.word	0x080070fe
 80010e4:	0800713c 	.word	0x0800713c
 80010e8:	080070ff 	.word	0x080070ff
 80010ec:	0800714c 	.word	0x0800714c
 80010f0:	08007100 	.word	0x08007100
 80010f4:	0800710d 	.word	0x0800710d
 80010f8:	08007158 	.word	0x08007158
 80010fc:	08007101 	.word	0x08007101
 8001100:	08007164 	.word	0x08007164
 8001104:	08007174 	.word	0x08007174
 8001108:	08007184 	.word	0x08007184
 800110c:	08007190 	.word	0x08007190
 8001110:	080071a0 	.word	0x080071a0
 8001114:	08007102 	.word	0x08007102
 8001118:	080071b0 	.word	0x080071b0
 800111c:	08007103 	.word	0x08007103
 8001120:	080071bc 	.word	0x080071bc
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f103 0010 	add.w	r0, r3, #16
 800112a:	2300      	movs	r3, #0
 800112c:	4aae      	ldr	r2, [pc, #696]	; (80013e8 <OTM8009A_Init+0x9bc>)
 800112e:	2100      	movs	r1, #0
 8001130:	f000 fc8e 	bl	8001a50 <otm8009a_write_reg>
 8001134:	4602      	mov	r2, r0
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f103 0010 	add.w	r0, r3, #16
 8001142:	230a      	movs	r3, #10
 8001144:	4aa9      	ldr	r2, [pc, #676]	; (80013ec <OTM8009A_Init+0x9c0>)
 8001146:	21cc      	movs	r1, #204	; 0xcc
 8001148:	f000 fc82 	bl	8001a50 <otm8009a_write_reg>
 800114c:	4602      	mov	r2, r0
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f103 0010 	add.w	r0, r3, #16
 800115a:	2300      	movs	r3, #0
 800115c:	4aa4      	ldr	r2, [pc, #656]	; (80013f0 <OTM8009A_Init+0x9c4>)
 800115e:	2100      	movs	r1, #0
 8001160:	f000 fc76 	bl	8001a50 <otm8009a_write_reg>
 8001164:	4602      	mov	r2, r0
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4413      	add	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f103 0010 	add.w	r0, r3, #16
 8001172:	230f      	movs	r3, #15
 8001174:	4a9f      	ldr	r2, [pc, #636]	; (80013f4 <OTM8009A_Init+0x9c8>)
 8001176:	21cc      	movs	r1, #204	; 0xcc
 8001178:	f000 fc6a 	bl	8001a50 <otm8009a_write_reg>
 800117c:	4602      	mov	r2, r0
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f103 0010 	add.w	r0, r3, #16
 800118a:	2300      	movs	r3, #0
 800118c:	4a9a      	ldr	r2, [pc, #616]	; (80013f8 <OTM8009A_Init+0x9cc>)
 800118e:	2100      	movs	r1, #0
 8001190:	f000 fc5e 	bl	8001a50 <otm8009a_write_reg>
 8001194:	4602      	mov	r2, r0
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4413      	add	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f103 0010 	add.w	r0, r3, #16
 80011a2:	230f      	movs	r3, #15
 80011a4:	4a95      	ldr	r2, [pc, #596]	; (80013fc <OTM8009A_Init+0x9d0>)
 80011a6:	21cc      	movs	r1, #204	; 0xcc
 80011a8:	f000 fc52 	bl	8001a50 <otm8009a_write_reg>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f103 0010 	add.w	r0, r3, #16
 80011ba:	2300      	movs	r3, #0
 80011bc:	4a90      	ldr	r2, [pc, #576]	; (8001400 <OTM8009A_Init+0x9d4>)
 80011be:	2100      	movs	r1, #0
 80011c0:	f000 fc46 	bl	8001a50 <otm8009a_write_reg>
 80011c4:	4602      	mov	r2, r0
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f103 0010 	add.w	r0, r3, #16
 80011d2:	230a      	movs	r3, #10
 80011d4:	4a8b      	ldr	r2, [pc, #556]	; (8001404 <OTM8009A_Init+0x9d8>)
 80011d6:	21cc      	movs	r1, #204	; 0xcc
 80011d8:	f000 fc3a 	bl	8001a50 <otm8009a_write_reg>
 80011dc:	4602      	mov	r2, r0
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4413      	add	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f103 0010 	add.w	r0, r3, #16
 80011ea:	2300      	movs	r3, #0
 80011ec:	4a86      	ldr	r2, [pc, #536]	; (8001408 <OTM8009A_Init+0x9dc>)
 80011ee:	2100      	movs	r1, #0
 80011f0:	f000 fc2e 	bl	8001a50 <otm8009a_write_reg>
 80011f4:	4602      	mov	r2, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f103 0010 	add.w	r0, r3, #16
 8001202:	230f      	movs	r3, #15
 8001204:	4a81      	ldr	r2, [pc, #516]	; (800140c <OTM8009A_Init+0x9e0>)
 8001206:	21cc      	movs	r1, #204	; 0xcc
 8001208:	f000 fc22 	bl	8001a50 <otm8009a_write_reg>
 800120c:	4602      	mov	r2, r0
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f103 0010 	add.w	r0, r3, #16
 800121a:	2300      	movs	r3, #0
 800121c:	4a7c      	ldr	r2, [pc, #496]	; (8001410 <OTM8009A_Init+0x9e4>)
 800121e:	2100      	movs	r1, #0
 8001220:	f000 fc16 	bl	8001a50 <otm8009a_write_reg>
 8001224:	4602      	mov	r2, r0
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f103 0010 	add.w	r0, r3, #16
 8001232:	230f      	movs	r3, #15
 8001234:	4a77      	ldr	r2, [pc, #476]	; (8001414 <OTM8009A_Init+0x9e8>)
 8001236:	21cc      	movs	r1, #204	; 0xcc
 8001238:	f000 fc0a 	bl	8001a50 <otm8009a_write_reg>
 800123c:	4602      	mov	r2, r0
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	4413      	add	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f103 0010 	add.w	r0, r3, #16
 800124a:	2300      	movs	r3, #0
 800124c:	4a72      	ldr	r2, [pc, #456]	; (8001418 <OTM8009A_Init+0x9ec>)
 800124e:	2100      	movs	r1, #0
 8001250:	f000 fbfe 	bl	8001a50 <otm8009a_write_reg>
 8001254:	4602      	mov	r2, r0
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f103 0010 	add.w	r0, r3, #16
 8001262:	2300      	movs	r3, #0
 8001264:	4a6d      	ldr	r2, [pc, #436]	; (800141c <OTM8009A_Init+0x9f0>)
 8001266:	21c5      	movs	r1, #197	; 0xc5
 8001268:	f000 fbf2 	bl	8001a50 <otm8009a_write_reg>
 800126c:	4602      	mov	r2, r0
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4413      	add	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f103 0010 	add.w	r0, r3, #16
 800127a:	2300      	movs	r3, #0
 800127c:	4a68      	ldr	r2, [pc, #416]	; (8001420 <OTM8009A_Init+0x9f4>)
 800127e:	2100      	movs	r1, #0
 8001280:	f000 fbe6 	bl	8001a50 <otm8009a_write_reg>
 8001284:	4602      	mov	r2, r0
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4413      	add	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f103 0010 	add.w	r0, r3, #16
 8001292:	2300      	movs	r3, #0
 8001294:	4a63      	ldr	r2, [pc, #396]	; (8001424 <OTM8009A_Init+0x9f8>)
 8001296:	21f5      	movs	r1, #245	; 0xf5
 8001298:	f000 fbda 	bl	8001a50 <otm8009a_write_reg>
 800129c:	4602      	mov	r2, r0
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f103 0010 	add.w	r0, r3, #16
 80012aa:	2300      	movs	r3, #0
 80012ac:	4a5e      	ldr	r2, [pc, #376]	; (8001428 <OTM8009A_Init+0x9fc>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	f000 fbce 	bl	8001a50 <otm8009a_write_reg>
 80012b4:	4602      	mov	r2, r0
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	4413      	add	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f103 0010 	add.w	r0, r3, #16
 80012c2:	2300      	movs	r3, #0
 80012c4:	4a59      	ldr	r2, [pc, #356]	; (800142c <OTM8009A_Init+0xa00>)
 80012c6:	21c6      	movs	r1, #198	; 0xc6
 80012c8:	f000 fbc2 	bl	8001a50 <otm8009a_write_reg>
 80012cc:	4602      	mov	r2, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f103 0010 	add.w	r0, r3, #16
 80012da:	2300      	movs	r3, #0
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <OTM8009A_Init+0xa04>)
 80012de:	2100      	movs	r1, #0
 80012e0:	f000 fbb6 	bl	8001a50 <otm8009a_write_reg>
 80012e4:	4602      	mov	r2, r0
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	4413      	add	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f103 0010 	add.w	r0, r3, #16
 80012f2:	2303      	movs	r3, #3
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <OTM8009A_Init+0xa08>)
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	f000 fbaa 	bl	8001a50 <otm8009a_write_reg>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	4413      	add	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f103 0010 	add.w	r0, r3, #16
 800130a:	2300      	movs	r3, #0
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <OTM8009A_Init+0xa04>)
 800130e:	2100      	movs	r1, #0
 8001310:	f000 fb9e 	bl	8001a50 <otm8009a_write_reg>
 8001314:	4602      	mov	r2, r0
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f103 0010 	add.w	r0, r3, #16
 8001322:	2300      	movs	r3, #0
 8001324:	4a42      	ldr	r2, [pc, #264]	; (8001430 <OTM8009A_Init+0xa04>)
 8001326:	2100      	movs	r1, #0
 8001328:	f000 fb92 	bl	8001a50 <otm8009a_write_reg>
 800132c:	4602      	mov	r2, r0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f103 0010 	add.w	r0, r3, #16
 800133a:	2310      	movs	r3, #16
 800133c:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <OTM8009A_Init+0xa0c>)
 800133e:	21e1      	movs	r1, #225	; 0xe1
 8001340:	f000 fb86 	bl	8001a50 <otm8009a_write_reg>
 8001344:	4602      	mov	r2, r0
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f103 0010 	add.w	r0, r3, #16
 8001352:	2300      	movs	r3, #0
 8001354:	4a36      	ldr	r2, [pc, #216]	; (8001430 <OTM8009A_Init+0xa04>)
 8001356:	2100      	movs	r1, #0
 8001358:	f000 fb7a 	bl	8001a50 <otm8009a_write_reg>
 800135c:	4602      	mov	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4413      	add	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f103 0010 	add.w	r0, r3, #16
 800136a:	2310      	movs	r3, #16
 800136c:	4a33      	ldr	r2, [pc, #204]	; (800143c <OTM8009A_Init+0xa10>)
 800136e:	21e2      	movs	r1, #226	; 0xe2
 8001370:	f000 fb6e 	bl	8001a50 <otm8009a_write_reg>
 8001374:	4602      	mov	r2, r0
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f103 0010 	add.w	r0, r3, #16
 8001382:	2300      	movs	r3, #0
 8001384:	4a2e      	ldr	r2, [pc, #184]	; (8001440 <OTM8009A_Init+0xa14>)
 8001386:	2111      	movs	r1, #17
 8001388:	f000 fb62 	bl	8001a50 <otm8009a_write_reg>
 800138c:	4602      	mov	r2, r0
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8001394:	2178      	movs	r1, #120	; 0x78
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fb29 	bl	80019ee <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d012      	beq.n	80013c8 <OTM8009A_Init+0x99c>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d153      	bne.n	8001450 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f103 0010 	add.w	r0, r3, #16
 80013ae:	2300      	movs	r3, #0
 80013b0:	4a24      	ldr	r2, [pc, #144]	; (8001444 <OTM8009A_Init+0xa18>)
 80013b2:	213a      	movs	r1, #58	; 0x3a
 80013b4:	f000 fb4c 	bl	8001a50 <otm8009a_write_reg>
 80013b8:	4602      	mov	r2, r0
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <OTM8009A_Init+0xa1c>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	605a      	str	r2, [r3, #4]
    break;
 80013c6:	e044      	b.n	8001452 <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f103 0010 	add.w	r0, r3, #16
 80013ce:	2300      	movs	r3, #0
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <OTM8009A_Init+0xa20>)
 80013d2:	213a      	movs	r1, #58	; 0x3a
 80013d4:	f000 fb3c 	bl	8001a50 <otm8009a_write_reg>
 80013d8:	4602      	mov	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <OTM8009A_Init+0xa1c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
    break;
 80013e6:	e034      	b.n	8001452 <OTM8009A_Init+0xa26>
 80013e8:	080070e2 	.word	0x080070e2
 80013ec:	080071c8 	.word	0x080071c8
 80013f0:	08007101 	.word	0x08007101
 80013f4:	080071d4 	.word	0x080071d4
 80013f8:	080070fd 	.word	0x080070fd
 80013fc:	080071e4 	.word	0x080071e4
 8001400:	080070fe 	.word	0x080070fe
 8001404:	080071f4 	.word	0x080071f4
 8001408:	080070ff 	.word	0x080070ff
 800140c:	08007200 	.word	0x08007200
 8001410:	08007100 	.word	0x08007100
 8001414:	08007210 	.word	0x08007210
 8001418:	080070ed 	.word	0x080070ed
 800141c:	0800710e 	.word	0x0800710e
 8001420:	0800710f 	.word	0x0800710f
 8001424:	08007110 	.word	0x08007110
 8001428:	08007111 	.word	0x08007111
 800142c:	08007112 	.word	0x08007112
 8001430:	080070e1 	.word	0x080070e1
 8001434:	08007220 	.word	0x08007220
 8001438:	08007224 	.word	0x08007224
 800143c:	08007234 	.word	0x08007234
 8001440:	08007104 	.word	0x08007104
 8001444:	08007105 	.word	0x08007105
 8001448:	24000088 	.word	0x24000088
 800144c:	08007106 	.word	0x08007106
  default :
    break;
 8001450:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d12a      	bne.n	80014ae <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f103 0010 	add.w	r0, r3, #16
 8001462:	f107 0213 	add.w	r2, r7, #19
 8001466:	2300      	movs	r3, #0
 8001468:	2136      	movs	r1, #54	; 0x36
 800146a:	f000 faf1 	bl	8001a50 <otm8009a_write_reg>
 800146e:	4602      	mov	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f103 0010 	add.w	r0, r3, #16
 800147c:	2304      	movs	r3, #4
 800147e:	4a44      	ldr	r2, [pc, #272]	; (8001590 <OTM8009A_Init+0xb64>)
 8001480:	212a      	movs	r1, #42	; 0x2a
 8001482:	f000 fae5 	bl	8001a50 <otm8009a_write_reg>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f103 0010 	add.w	r0, r3, #16
 8001494:	2304      	movs	r3, #4
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <OTM8009A_Init+0xb68>)
 8001498:	212b      	movs	r1, #43	; 0x2b
 800149a:	f000 fad9 	bl	8001a50 <otm8009a_write_reg>
 800149e:	4602      	mov	r2, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <OTM8009A_Init+0xb6c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e002      	b.n	80014b4 <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80014ae:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <OTM8009A_Init+0xb6c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f103 0010 	add.w	r0, r3, #16
 80014ba:	2300      	movs	r3, #0
 80014bc:	4a37      	ldr	r2, [pc, #220]	; (800159c <OTM8009A_Init+0xb70>)
 80014be:	2151      	movs	r1, #81	; 0x51
 80014c0:	f000 fac6 	bl	8001a50 <otm8009a_write_reg>
 80014c4:	4602      	mov	r2, r0
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <OTM8009A_Init+0xb74>)
 80014ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <OTM8009A_Init+0xb78>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	09db      	lsrs	r3, r3, #7
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	fb03 f302 	mul.w	r3, r3, r2
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <OTM8009A_Init+0xb6c>)
 80014e6:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f103 0010 	add.w	r0, r3, #16
 80014ee:	2300      	movs	r3, #0
 80014f0:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <OTM8009A_Init+0xb7c>)
 80014f2:	2153      	movs	r1, #83	; 0x53
 80014f4:	f000 faac 	bl	8001a50 <otm8009a_write_reg>
 80014f8:	4602      	mov	r2, r0
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f103 0010 	add.w	r0, r3, #16
 8001506:	2300      	movs	r3, #0
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <OTM8009A_Init+0xb80>)
 800150a:	2155      	movs	r1, #85	; 0x55
 800150c:	f000 faa0 	bl	8001a50 <otm8009a_write_reg>
 8001510:	4602      	mov	r2, r0
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4413      	add	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f103 0010 	add.w	r0, r3, #16
 800151e:	2300      	movs	r3, #0
 8001520:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <OTM8009A_Init+0xb84>)
 8001522:	215e      	movs	r1, #94	; 0x5e
 8001524:	f000 fa94 	bl	8001a50 <otm8009a_write_reg>
 8001528:	4602      	mov	r2, r0
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4413      	add	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f103 0010 	add.w	r0, r3, #16
 8001536:	2300      	movs	r3, #0
 8001538:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <OTM8009A_Init+0xb88>)
 800153a:	2129      	movs	r1, #41	; 0x29
 800153c:	f000 fa88 	bl	8001a50 <otm8009a_write_reg>
 8001540:	4602      	mov	r2, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f103 0010 	add.w	r0, r3, #16
 800154e:	2300      	movs	r3, #0
 8001550:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <OTM8009A_Init+0xb8c>)
 8001552:	2100      	movs	r1, #0
 8001554:	f000 fa7c 	bl	8001a50 <otm8009a_write_reg>
 8001558:	4602      	mov	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f103 0010 	add.w	r0, r3, #16
 8001566:	2300      	movs	r3, #0
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <OTM8009A_Init+0xb90>)
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	f000 fa70 	bl	8001a50 <otm8009a_write_reg>
 8001570:	4602      	mov	r2, r0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	080070d8 	.word	0x080070d8
 8001594:	080070dc 	.word	0x080070dc
 8001598:	24000088 	.word	0x24000088
 800159c:	08007107 	.word	0x08007107
 80015a0:	080070e0 	.word	0x080070e0
 80015a4:	80808081 	.word	0x80808081
 80015a8:	08007108 	.word	0x08007108
 80015ac:	08007109 	.word	0x08007109
 80015b0:	0800710a 	.word	0x0800710a
 80015b4:	0800710b 	.word	0x0800710b
 80015b8:	080070e1 	.word	0x080070e1
 80015bc:	0800710c 	.word	0x0800710c

080015c0 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f103 0010 	add.w	r0, r3, #16
 80015e8:	2300      	movs	r3, #0
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	21da      	movs	r1, #218	; 0xda
 80015ee:	f000 fa18 	bl	8001a22 <otm8009a_read_reg>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e001      	b.n	8001604 <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001604:	68fb      	ldr	r3, [r7, #12]
}  
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <OTM8009A_SetBrightness+0x54>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f103 0010 	add.w	r0, r3, #16
 8001634:	f107 020b 	add.w	r2, r7, #11
 8001638:	2300      	movs	r3, #0
 800163a:	2151      	movs	r1, #81	; 0x51
 800163c:	f000 fa08 	bl	8001a50 <otm8009a_write_reg>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e004      	b.n	8001658 <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <OTM8009A_SetBrightness+0x58>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	51eb851f 	.word	0x51eb851f
 8001668:	24000088 	.word	0x24000088

0800166c <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <OTM8009A_GetBrightness+0x20>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	24000088 	.word	0x24000088

08001690 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0010 	add.w	r0, r3, #16
 80016a2:	f107 020b 	add.w	r2, r7, #11
 80016a6:	2300      	movs	r3, #0
 80016a8:	2129      	movs	r1, #41	; 0x29
 80016aa:	f000 f9d1 	bl	8001a50 <otm8009a_write_reg>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e001      	b.n	80016c0 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 0010 	add.w	r0, r3, #16
 80016dc:	f107 020b 	add.w	r2, r7, #11
 80016e0:	2300      	movs	r3, #0
 80016e2:	2128      	movs	r1, #40	; 0x28
 80016e4:	f000 f9b4 	bl	8001a50 <otm8009a_write_reg>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e001      	b.n	80016fa <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800170e:	2360      	movs	r3, #96	; 0x60
 8001710:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001712:	2300      	movs	r3, #0
 8001714:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d006      	beq.n	800172a <OTM8009A_SetOrientation+0x26>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e04d      	b.n	80017c6 <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d125      	bne.n	800177c <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f103 0010 	add.w	r0, r3, #16
 8001736:	f107 020b 	add.w	r2, r7, #11
 800173a:	2300      	movs	r3, #0
 800173c:	2136      	movs	r1, #54	; 0x36
 800173e:	f000 f987 	bl	8001a50 <otm8009a_write_reg>
 8001742:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f103 0010 	add.w	r0, r3, #16
 800174a:	2304      	movs	r3, #4
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <OTM8009A_SetOrientation+0xd8>)
 800174e:	212a      	movs	r1, #42	; 0x2a
 8001750:	f000 f97e 	bl	8001a50 <otm8009a_write_reg>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f103 0010 	add.w	r0, r3, #16
 8001762:	2304      	movs	r3, #4
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <OTM8009A_SetOrientation+0xdc>)
 8001766:	212b      	movs	r1, #43	; 0x2b
 8001768:	f000 f972 	bl	8001a50 <otm8009a_write_reg>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <OTM8009A_SetOrientation+0xe0>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e024      	b.n	80017c6 <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0010 	add.w	r0, r3, #16
 8001782:	f107 020a 	add.w	r2, r7, #10
 8001786:	2300      	movs	r3, #0
 8001788:	2136      	movs	r1, #54	; 0x36
 800178a:	f000 f961 	bl	8001a50 <otm8009a_write_reg>
 800178e:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f103 0010 	add.w	r0, r3, #16
 8001796:	2304      	movs	r3, #4
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <OTM8009A_SetOrientation+0xd8>)
 800179a:	212a      	movs	r1, #42	; 0x2a
 800179c:	f000 f958 	bl	8001a50 <otm8009a_write_reg>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 0010 	add.w	r0, r3, #16
 80017ae:	2304      	movs	r3, #4
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <OTM8009A_SetOrientation+0xdc>)
 80017b2:	212b      	movs	r1, #43	; 0x2b
 80017b4:	f000 f94c 	bl	8001a50 <otm8009a_write_reg>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <OTM8009A_SetOrientation+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080070d8 	.word	0x080070d8
 80017e0:	080070dc 	.word	0x080070dc
 80017e4:	24000088 	.word	0x24000088

080017e8 <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <OTM8009A_GetOrientation+0x20>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	24000088 	.word	0x24000088

0800180c <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <OTM8009A_GetXSize+0x44>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <OTM8009A_GetXSize+0x18>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <OTM8009A_GetXSize+0x22>
 8001822:	e009      	b.n	8001838 <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800182a:	601a      	str	r2, [r3, #0]
    break;
 800182c:	e009      	b.n	8001842 <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001834:	601a      	str	r2, [r3, #0]
    break;
 8001836:	e004      	b.n	8001842 <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800183e:	601a      	str	r2, [r3, #0]
    break;
 8001840:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	24000088 	.word	0x24000088

08001854 <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <OTM8009A_GetYSize+0x44>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <OTM8009A_GetYSize+0x18>
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <OTM8009A_GetYSize+0x22>
 800186a:	e009      	b.n	8001880 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001872:	601a      	str	r2, [r3, #0]
    break;
 8001874:	e009      	b.n	800188a <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800187c:	601a      	str	r2, [r3, #0]
    break;
 800187e:	e004      	b.n	800188a <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001886:	601a      	str	r2, [r3, #0]
    break;
 8001888:	bf00      	nop
  }
  
  return OTM8009A_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	24000088 	.word	0x24000088

0800189c <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	461a      	mov	r2, r3
 8001996:	460b      	mov	r3, r1
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	4613      	mov	r3, r2
 800199c:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	689c      	ldr	r4, [r3, #8]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	8818      	ldrh	r0, [r3, #0]
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	8979      	ldrh	r1, [r7, #10]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	47a0      	blx	r4
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	460b      	mov	r3, r1
 80019ca:	817b      	strh	r3, [r7, #10]
 80019cc:	4613      	mov	r3, r2
 80019ce:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	685c      	ldr	r4, [r3, #4]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	8818      	ldrh	r0, [r3, #0]
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	47a0      	blx	r4
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}

080019ee <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4798      	blx	r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001a02:	bf00      	nop
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f5      	bhi.n	8001a04 <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001a22:	b590      	push	{r4, r7, lr}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	460b      	mov	r3, r1
 8001a30:	817b      	strh	r3, [r7, #10]
 8001a32:	4613      	mov	r3, r2
 8001a34:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	685c      	ldr	r4, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6898      	ldr	r0, [r3, #8]
 8001a3e:	893b      	ldrh	r3, [r7, #8]
 8001a40:	8979      	ldrh	r1, [r7, #10]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	47a0      	blx	r4
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
 8001a60:	4613      	mov	r3, r2
 8001a62:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	893b      	ldrh	r3, [r7, #8]
 8001a6e:	8979      	ldrh	r1, [r7, #10]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	47a0      	blx	r4
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001a82:	f000 ff5f 	bl	8002944 <HAL_GetTick>
 8001a86:	4603      	mov	r3, r0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8001a96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f805 	bl	8001ab4 <BSP_LCD_InitEx>
 8001aaa:	4603      	mov	r3, r0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d808      	bhi.n	8001ade <BSP_LCD_InitEx+0x2a>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <BSP_LCD_InitEx+0x2a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d006      	beq.n	8001ae6 <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ade:	f06f 0301 	mvn.w	r3, #1
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae4:	e0bf      	b.n	8001c66 <BSP_LCD_InitEx+0x1b2>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d110      	bne.n	8001b0e <BSP_LCD_InitEx+0x5a>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB565;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 2U;
 8001af8:	495d      	ldr	r1, [pc, #372]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3310      	adds	r3, #16
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e00f      	b.n	8001b2e <BSP_LCD_InitEx+0x7a>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      dsi_pixel_format = DSI_RGB888;
 8001b12:	2305      	movs	r3, #5
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
      Lcd_Ctx[Instance].BppFactor = 4U;
 8001b1a:	4955      	ldr	r1, [pc, #340]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3310      	adds	r3, #16
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8001b2e:	4950      	ldr	r1, [pc, #320]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8001b42:	494b      	ldr	r1, [pc, #300]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8001b54:	4946      	ldr	r1, [pc, #280]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3304      	adds	r3, #4
 8001b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b66:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f88d 	bl	8001c88 <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 8001b6e:	f000 f8c5 	bl	8001cfc <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <BSP_LCD_InitEx+0x1c0>)
 8001b74:	4a40      	ldr	r2, [pc, #256]	; (8001c78 <BSP_LCD_InitEx+0x1c4>)
 8001b76:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <BSP_LCD_InitEx+0x1c8>)
 8001b7a:	4a41      	ldr	r2, [pc, #260]	; (8001c80 <BSP_LCD_InitEx+0x1cc>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <BSP_LCD_InitEx+0x1d0>)
 8001b80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b84:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8001b86:	483b      	ldr	r0, [pc, #236]	; (8001c74 <BSP_LCD_InitEx+0x1c0>)
 8001b88:	f000 fb5e 	bl	8002248 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8001b8c:	483b      	ldr	r0, [pc, #236]	; (8001c7c <BSP_LCD_InitEx+0x1c8>)
 8001b8e:	f000 fb8d 	bl	80022ac <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 8001b92:	483c      	ldr	r0, [pc, #240]	; (8001c84 <BSP_LCD_InitEx+0x1d0>)
 8001b94:	f000 fbb8 	bl	8002308 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4839      	ldr	r0, [pc, #228]	; (8001c84 <BSP_LCD_InitEx+0x1d0>)
 8001ba0:	f000 f914 	bl	8001dcc <MX_DSIHOST_DSI_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <BSP_LCD_InitEx+0xfe>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001baa:	f06f 0303 	mvn.w	r3, #3
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb0:	e014      	b.n	8001bdc <BSP_LCD_InitEx+0x128>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8001bb2:	4830      	ldr	r0, [pc, #192]	; (8001c74 <BSP_LCD_InitEx+0x1c0>)
 8001bb4:	f000 fa1c 	bl	8001ff0 <MX_LTDC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <BSP_LCD_InitEx+0x112>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bbe:	f06f 0303 	mvn.w	r3, #3
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc4:	e00a      	b.n	8001bdc <BSP_LCD_InitEx+0x128>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8001bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	482a      	ldr	r0, [pc, #168]	; (8001c74 <BSP_LCD_InitEx+0x1c0>)
 8001bcc:	f000 f982 	bl	8001ed4 <MX_LTDC_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <BSP_LCD_InitEx+0x128>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8001bd6:	f06f 0303 	mvn.w	r3, #3
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d141      	bne.n	8001c66 <BSP_LCD_InitEx+0x1b2>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 fc78 	bl	80024d8 <BSP_SDRAM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <BSP_LCD_InitEx+0x140>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8001bee:	f06f 0303 	mvn.w	r3, #3
 8001bf2:	e039      	b.n	8001c68 <BSP_LCD_InitEx+0x1b4>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8001c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c02:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8001c08:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	461a      	mov	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <BSP_LCD_InitEx+0x1c0>)
 8001c18:	f000 f9a8 	bl	8001f6c <MX_LTDC_ConfigLayer>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <BSP_LCD_InitEx+0x176>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001c22:	f06f 0303 	mvn.w	r3, #3
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
 8001c28:	e013      	b.n	8001c52 <BSP_LCD_InitEx+0x19e>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 8001c2a:	4816      	ldr	r0, [pc, #88]	; (8001c84 <BSP_LCD_InitEx+0x1d0>)
 8001c2c:	f001 ff2e 	bl	8003a8c <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8001c30:	2104      	movs	r1, #4
 8001c32:	4814      	ldr	r0, [pc, #80]	; (8001c84 <BSP_LCD_InitEx+0x1d0>)
 8001c34:	f001 ff02 	bl	8003a3c <HAL_DSI_ConfigFlowControl>

#if (USE_LCD_CTRL_OTM8009A == 1)
        /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c3c:	f000 fbf8 	bl	8002430 <OTM8009A_Probe>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <BSP_LCD_InitEx+0x19a>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001c46:	f06f 0306 	mvn.w	r3, #6
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4c:	e001      	b.n	8001c52 <BSP_LCD_InitEx+0x19e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8001c52:	4907      	ldr	r1, [pc, #28]	; (8001c70 <BSP_LCD_InitEx+0x1bc>)
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3318      	adds	r3, #24
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 8001c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3738      	adds	r7, #56	; 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	240001f0 	.word	0x240001f0
 8001c74:	24000148 	.word	0x24000148
 8001c78:	50001000 	.word	0x50001000
 8001c7c:	24000228 	.word	0x24000228
 8001c80:	52001000 	.word	0x52001000
 8001c84:	2400020c 	.word	0x2400020c

08001c88 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <BSP_LCD_Reset+0x6c>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <BSP_LCD_Reset+0x6c>)
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <BSP_LCD_Reset+0x6c>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <BSP_LCD_Reset+0x70>)
 8001cc6:	f002 f887 	bl	8003dd8 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2108      	movs	r1, #8
 8001cce:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <BSP_LCD_Reset+0x70>)
 8001cd0:	f002 fa32 	bl	8004138 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8001cd4:	2014      	movs	r0, #20
 8001cd6:	f000 fe41 	bl	800295c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2108      	movs	r1, #8
 8001cde:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <BSP_LCD_Reset+0x70>)
 8001ce0:	f002 fa2a 	bl	8004138 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f000 fe39 	bl	800295c <HAL_Delay>
}
 8001cea:	bf00      	nop
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58021800 	.word	0x58021800

08001cfc <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4619      	mov	r1, r3
 8001d38:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <LCD_InitSequence+0xcc>)
 8001d3a:	f002 f84d 	bl	8003dd8 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <LCD_InitSequence+0xcc>)
 8001d46:	f002 f9f7 	bl	8004138 <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <LCD_InitSequence+0xc8>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <LCD_InitSequence+0xcc>)
 8001d7c:	f002 f82c 	bl	8003dd8 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2104      	movs	r1, #4
 8001d84:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <LCD_InitSequence+0xcc>)
 8001d86:	f002 f9d7 	bl	8004138 <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	2058      	movs	r0, #88	; 0x58
 8001d90:	f000 feef 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d94:	2058      	movs	r0, #88	; 0x58
 8001d96:	f000 ff06 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	205a      	movs	r0, #90	; 0x5a
 8001da0:	f000 fee7 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001da4:	205a      	movs	r0, #90	; 0x5a
 8001da6:	f000 fefe 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	210f      	movs	r1, #15
 8001dae:	207b      	movs	r0, #123	; 0x7b
 8001db0:	f000 fedf 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001db4:	207b      	movs	r0, #123	; 0x7b
 8001db6:	f000 fef6 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	58022400 	.word	0x58022400

08001dcc <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0a2      	sub	sp, #136	; 0x88
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001de0:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2204      	movs	r2, #4
 8001dec:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	67fb      	str	r3, [r7, #124]	; 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8001e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f001 fa0a 	bl	8003224 <HAL_DSI_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e053      	b.n	8001ec2 <MX_DSIHOST_DSI_Init+0xf6>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	617b      	str	r3, [r7, #20]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 8001e32:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8001e44:	2304      	movs	r3, #4
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8001e48:	234d      	movs	r3, #77	; 0x4d
 8001e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001e52:	fb02 f203 	mul.w	r2, r2, r3
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <MX_DSIHOST_DSI_Init+0x100>)
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <MX_DSIHOST_DSI_Init+0x104>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	0b5b      	lsrs	r3, r3, #13
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8001e64:	2301      	movs	r3, #1
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.VerticalActive = Height;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8001e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e78:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPLargestPacketSize = 4;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVACTLargestPacketSize = 4;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	65fb      	str	r3, [r7, #92]	; 0x5c

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8001e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8001e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	673b      	str	r3, [r7, #112]	; 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8001ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea4:	677b      	str	r3, [r7, #116]	; 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f001 fbc3 	bl	800363c <HAL_DSI_ConfigVideoMode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_DSIHOST_DSI_Init+0xf4>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <MX_DSIHOST_DSI_Init+0xf6>
  }

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3788      	adds	r7, #136	; 0x88
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	0042c1d8 	.word	0x0042c1d8
 8001ed0:	4c751ce3 	.word	0x4c751ce3

08001ed4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <MX_LTDC_Init+0x94>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2223      	movs	r2, #35	; 0x23
 8001f08:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	220f      	movs	r2, #15
 8001f28:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f103 020f 	add.w	r2, r3, #15
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 021f 	add.w	r2, r3, #31
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0x00;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f002 f950 	bl	80041fc <HAL_LTDC_Init>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	50001000 	.word	0x50001000

08001f6c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	; 0x48
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8001f96:	23ff      	movs	r3, #255	; 0xff
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f002 faa7 	bl	8004534 <HAL_LTDC_ConfigLayer>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3748      	adds	r7, #72	; 0x48
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0b2      	sub	sp, #200	; 0xc8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8001ff8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ffc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8001ffe:	2305      	movs	r3, #5
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8002002:	2384      	movs	r3, #132	; 0x84
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8002006:	2302      	movs	r3, #2
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 800200a:	2302      	movs	r3, #2
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800200e:	2318      	movs	r3, #24
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8002012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002018:	2300      	movs	r3, #0
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fd9d 	bl	8005b64 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	37c8      	adds	r7, #200	; 0xc8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance    LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= LCD_INSTANCES_NBR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <BSP_LCD_DisplayOn+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002042:	f06f 0301 	mvn.w	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e00f      	b.n	800206a <BSP_LCD_DisplayOn+0x36>
  }
  else
  {
    if(Lcd_Drv->DisplayOn(Lcd_CompObj) != BSP_ERROR_NONE)
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <BSP_LCD_DisplayOn+0x40>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <BSP_LCD_DisplayOn+0x44>)
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4610      	mov	r0, r2
 8002056:	4798      	blx	r3
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <BSP_LCD_DisplayOn+0x32>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800205e:	f06f 0303 	mvn.w	r3, #3
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e001      	b.n	800206a <BSP_LCD_DisplayOn+0x36>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000094 	.word	0x24000094
 8002078:	24000098 	.word	0x24000098

0800207c <BSP_LCD_DisplayOff>:
  * @brief  Switch Off the display.
  * @param  Instance    LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOff(uint32_t Instance)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= LCD_INSTANCES_NBR)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <BSP_LCD_DisplayOff+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800208a:	f06f 0301 	mvn.w	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e00f      	b.n	80020b2 <BSP_LCD_DisplayOff+0x36>
  }
  else
  {
    if(Lcd_Drv->DisplayOff(Lcd_CompObj) != BSP_ERROR_NONE)
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <BSP_LCD_DisplayOff+0x40>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <BSP_LCD_DisplayOff+0x44>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4610      	mov	r0, r2
 800209e:	4798      	blx	r3
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <BSP_LCD_DisplayOff+0x32>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020a6:	f06f 0303 	mvn.w	r3, #3
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e001      	b.n	80020b2 <BSP_LCD_DisplayOff+0x36>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000094 	.word	0x24000094
 80020c0:	24000098 	.word	0x24000098

080020c4 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80020d2:	4921      	ldr	r1, [pc, #132]	; (8002158 <BSP_LCD_FillRect+0x94>)
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3308      	adds	r3, #8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <BSP_LCD_FillRect+0x98>)
 80020e6:	2134      	movs	r1, #52	; 0x34
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	335c      	adds	r3, #92	; 0x5c
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	4819      	ldr	r0, [pc, #100]	; (8002158 <BSP_LCD_FillRect+0x94>)
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	3310      	adds	r3, #16
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	4c14      	ldr	r4, [pc, #80]	; (8002158 <BSP_LCD_FillRect+0x94>)
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4423      	add	r3, r4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	fb02 f203 	mul.w	r2, r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	fb03 f300 	mul.w	r3, r3, r0
 8002122:	440b      	add	r3, r1
 8002124:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <BSP_LCD_FillRect+0x94>)
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4403      	add	r3, r0
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f80a 	bl	8002160 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	240001f0 	.word	0x240001f0
 800215c:	24000148 	.word	0x24000148

08002160 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002172:	4932      	ldr	r1, [pc, #200]	; (800223c <LL_FillBuffer+0xdc>)
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	330c      	adds	r3, #12
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d129      	bne.n	80021dc <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002188:	2302      	movs	r3, #2
 800218a:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	3317      	adds	r3, #23
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	0419      	lsls	r1, r3, #16
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ac:	4613      	mov	r3, r2
 80021ae:	01db      	lsls	r3, r3, #7
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	3321      	adds	r3, #33	; 0x21
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4319      	orrs	r1, r3
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	3317      	adds	r3, #23
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	430b      	orrs	r3, r1
 80021d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d8:	613b      	str	r3, [r7, #16]
    break;
 80021da:	e002      	b.n	80021e2 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
    break;
 80021e0:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <LL_FillBuffer+0xe0>)
 80021e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021e8:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <LL_FillBuffer+0xe0>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <LL_FillBuffer+0xe0>)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <LL_FillBuffer+0xe0>)
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <LL_FillBuffer+0xe4>)
 80021fa:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <LL_FillBuffer+0xe0>)
 80021fe:	f000 fced 	bl	8002bdc <HAL_DMA2D_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002208:	2101      	movs	r1, #1
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <LL_FillBuffer+0xe0>)
 800220c:	f000 fe68 	bl	8002ee0 <HAL_DMA2D_ConfigLayer>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10e      	bne.n	8002234 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	4807      	ldr	r0, [pc, #28]	; (8002240 <LL_FillBuffer+0xe0>)
 8002222:	f000 fd49 	bl	8002cb8 <HAL_DMA2D_Start>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800222c:	2119      	movs	r1, #25
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <LL_FillBuffer+0xe0>)
 8002230:	f000 fd6d 	bl	8002d0e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	240001f0 	.word	0x240001f0
 8002240:	24000228 	.word	0x24000228
 8002244:	52001000 	.word	0x52001000

08002248 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <LTDC_MspInit+0x5c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11e      	bne.n	8002298 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <LTDC_MspInit+0x60>)
 800225c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <LTDC_MspInit+0x60>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <LTDC_MspInit+0x60>)
 800226c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <LTDC_MspInit+0x60>)
 800227a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LTDC_MspInit+0x60>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <LTDC_MspInit+0x60>)
 800228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228e:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <LTDC_MspInit+0x60>)
 8002290:	f023 0308 	bic.w	r3, r3, #8
 8002294:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	50001000 	.word	0x50001000
 80022a8:	58024400 	.word	0x58024400

080022ac <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <DMA2D_MspInit+0x54>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11a      	bne.n	80022f4 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <DMA2D_MspInit+0x58>)
 80022c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <DMA2D_MspInit+0x58>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <DMA2D_MspInit+0x58>)
 80022d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <DMA2D_MspInit+0x58>)
 80022de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e0:	4a08      	ldr	r2, [pc, #32]	; (8002304 <DMA2D_MspInit+0x58>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <DMA2D_MspInit+0x58>)
 80022ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <DMA2D_MspInit+0x58>)
 80022ee:	f023 0310 	bic.w	r3, r3, #16
 80022f2:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	52001000 	.word	0x52001000
 8002304:	58024400 	.word	0x58024400

08002308 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002318:	d11e      	bne.n	8002358 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <DSI_MspInit+0x5c>)
 800231c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002320:	4a10      	ldr	r2, [pc, #64]	; (8002364 <DSI_MspInit+0x5c>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <DSI_MspInit+0x5c>)
 800232c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <DSI_MspInit+0x5c>)
 800233a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <DSI_MspInit+0x5c>)
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <DSI_MspInit+0x5c>)
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <DSI_MspInit+0x5c>)
 8002350:	f023 0310 	bic.w	r3, r3, #16
 8002354:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	58024400 	.word	0x58024400

08002368 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60ba      	str	r2, [r7, #8]
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	81fb      	strh	r3, [r7, #14]
 8002376:	460b      	mov	r3, r1
 8002378:	81bb      	strh	r3, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d812      	bhi.n	80023ae <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002388:	89f9      	ldrh	r1, [r7, #14]
 800238a:	89b8      	ldrh	r0, [r7, #12]
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4603      	mov	r3, r0
 8002398:	2215      	movs	r2, #21
 800239a:	4810      	ldr	r0, [pc, #64]	; (80023dc <DSI_IO_Write+0x74>)
 800239c:	f001 fbb2 	bl	8003b04 <HAL_DSI_ShortWrite>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80023a6:	f06f 0307 	mvn.w	r3, #7
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e010      	b.n	80023d0 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80023ae:	89f9      	ldrh	r1, [r7, #14]
 80023b0:	88f8      	ldrh	r0, [r7, #6]
 80023b2:	89bb      	ldrh	r3, [r7, #12]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	9201      	str	r2, [sp, #4]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4603      	mov	r3, r0
 80023bc:	2239      	movs	r2, #57	; 0x39
 80023be:	4807      	ldr	r0, [pc, #28]	; (80023dc <DSI_IO_Write+0x74>)
 80023c0:	f001 fbc2 	bl	8003b48 <HAL_DSI_LongWrite>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80023ca:	f06f 0307 	mvn.w	r3, #7
 80023ce:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80023d0:	697b      	ldr	r3, [r7, #20]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2400020c 	.word	0x2400020c

080023e0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	60ba      	str	r2, [r7, #8]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	81fb      	strh	r3, [r7, #14]
 80023ee:	460b      	mov	r3, r1
 80023f0:	81bb      	strh	r3, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80023fa:	89f9      	ldrh	r1, [r7, #14]
 80023fc:	88f8      	ldrh	r0, [r7, #6]
 80023fe:	89bb      	ldrh	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	9202      	str	r2, [sp, #8]
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2306      	movs	r3, #6
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	4603      	mov	r3, r0
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <DSI_IO_Read+0x4c>)
 8002410:	f001 fc32 	bl	8003c78 <HAL_DSI_Read>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800241a:	f06f 0307 	mvn.w	r3, #7
 800241e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002420:	697b      	ldr	r3, [r7, #20]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2400020c 	.word	0x2400020c

08002430 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t id;
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <OTM8009A_Probe+0x8c>)
 8002440:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <OTM8009A_Probe+0x90>)
 8002444:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <OTM8009A_Probe+0x94>)
 8002448:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4619      	mov	r1, r3
 8002450:	481d      	ldr	r0, [pc, #116]	; (80024c8 <OTM8009A_Probe+0x98>)
 8002452:	f7fe fabd 	bl	80009d0 <OTM8009A_RegisterBusIO>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <OTM8009A_Probe+0x34>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800245c:	f06f 0307 	mvn.w	r3, #7
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e025      	b.n	80024b0 <OTM8009A_Probe+0x80>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <OTM8009A_Probe+0x9c>)
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <OTM8009A_Probe+0x98>)
 8002468:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <OTM8009A_Probe+0x9c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f107 0218 	add.w	r2, r7, #24
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f8af 	bl	80015d8 <OTM8009A_ReadID>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <OTM8009A_Probe+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002480:	f06f 0304 	mvn.w	r3, #4
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e013      	b.n	80024b0 <OTM8009A_Probe+0x80>
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <OTM8009A_Probe+0xa0>)
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <OTM8009A_Probe+0xa4>)
 800248c:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <OTM8009A_Probe+0xa0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <OTM8009A_Probe+0x9c>)
 8002496:	6810      	ldr	r0, [r2, #0]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4798      	blx	r3
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <OTM8009A_Probe+0x7c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024a4:	f06f 0304 	mvn.w	r3, #4
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e001      	b.n	80024b0 <OTM8009A_Probe+0x80>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 80024b0:	69fb      	ldr	r3, [r7, #28]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08001a7f 	.word	0x08001a7f
 80024c0:	08002369 	.word	0x08002369
 80024c4:	080023e1 	.word	0x080023e1
 80024c8:	2400009c 	.word	0x2400009c
 80024cc:	24000098 	.word	0x24000098
 80024d0:	24000094 	.word	0x24000094
 80024d4:	24000008 	.word	0x24000008

080024d8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80024e6:	f06f 0301 	mvn.w	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e033      	b.n	8002556 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 80024ee:	481c      	ldr	r0, [pc, #112]	; (8002560 <BSP_SDRAM_Init+0x88>)
 80024f0:	f000 f884 	bl	80025fc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80024f4:	481a      	ldr	r0, [pc, #104]	; (8002560 <BSP_SDRAM_Init+0x88>)
 80024f6:	f000 f837 	bl	8002568 <MX_SDRAM_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e026      	b.n	8002556 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 800250a:	2208      	movs	r2, #8
 800250c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 8002510:	2203      	movs	r2, #3
 8002512:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 8002516:	f240 6203 	movw	r2, #1539	; 0x603
 800251a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800253c:	4909      	ldr	r1, [pc, #36]	; (8002564 <BSP_SDRAM_Init+0x8c>)
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <BSP_SDRAM_Init+0x88>)
 8002540:	f7fe f93b 	bl	80007ba <IS42S32800J_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800254a:	f06f 0304 	mvn.w	r3, #4
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e001      	b.n	8002556 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	24000290 	.word	0x24000290
 8002564:	240000bc 	.word	0x240000bc

08002568 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <MX_SDRAM_Init+0x8c>)
 8002574:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800259a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_SDRAM_Init+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80025bc:	2307      	movs	r3, #7
 80025be:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80025c0:	2304      	movs	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80025c4:	2307      	movs	r3, #7
 80025c6:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80025d0:	2302      	movs	r3, #2
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f004 fb96 	bl	8006d0c <HAL_SDRAM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	52004140 	.word	0x52004140
 80025f8:	24000290 	.word	0x24000290

080025fc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	; 0x40
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002604:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <SDRAM_MspInit+0x208>)
 8002606:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <SDRAM_MspInit+0x208>)
 800260c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002610:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <SDRAM_MspInit+0x208>)
 8002616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8002622:	4b78      	ldr	r3, [pc, #480]	; (8002804 <SDRAM_MspInit+0x208>)
 8002624:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002628:	4a76      	ldr	r2, [pc, #472]	; (8002804 <SDRAM_MspInit+0x208>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002632:	4b74      	ldr	r3, [pc, #464]	; (8002804 <SDRAM_MspInit+0x208>)
 8002634:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <SDRAM_MspInit+0x208>)
 8002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002646:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <SDRAM_MspInit+0x208>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002650:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <SDRAM_MspInit+0x208>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800265e:	4b69      	ldr	r3, [pc, #420]	; (8002804 <SDRAM_MspInit+0x208>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002664:	4a67      	ldr	r2, [pc, #412]	; (8002804 <SDRAM_MspInit+0x208>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <SDRAM_MspInit+0x208>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800267c:	4b61      	ldr	r3, [pc, #388]	; (8002804 <SDRAM_MspInit+0x208>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	4a60      	ldr	r2, [pc, #384]	; (8002804 <SDRAM_MspInit+0x208>)
 8002684:	f043 0320 	orr.w	r3, r3, #32
 8002688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268c:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <SDRAM_MspInit+0x208>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <SDRAM_MspInit+0x208>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <SDRAM_MspInit+0x208>)
 80026a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <SDRAM_MspInit+0x208>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b8:	4b52      	ldr	r3, [pc, #328]	; (8002804 <SDRAM_MspInit+0x208>)
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026be:	4a51      	ldr	r2, [pc, #324]	; (8002804 <SDRAM_MspInit+0x208>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <SDRAM_MspInit+0x208>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <SDRAM_MspInit+0x208>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <SDRAM_MspInit+0x208>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <SDRAM_MspInit+0x208>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002700:	230c      	movs	r3, #12
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002704:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800270a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270e:	4619      	mov	r1, r3
 8002710:	483d      	ldr	r0, [pc, #244]	; (8002808 <SDRAM_MspInit+0x20c>)
 8002712:	f001 fb61 	bl	8003dd8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002716:	f64f 7383 	movw	r3, #65411	; 0xff83
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	4619      	mov	r1, r3
 8002722:	483a      	ldr	r0, [pc, #232]	; (800280c <SDRAM_MspInit+0x210>)
 8002724:	f001 fb58 	bl	8003dd8 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002728:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800272e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002732:	4619      	mov	r1, r3
 8002734:	4836      	ldr	r0, [pc, #216]	; (8002810 <SDRAM_MspInit+0x214>)
 8002736:	f001 fb4f 	bl	8003dd8 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800273a:	f248 1337 	movw	r3, #33079	; 0x8137
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	4619      	mov	r1, r3
 8002746:	4833      	ldr	r0, [pc, #204]	; (8002814 <SDRAM_MspInit+0x218>)
 8002748:	f001 fb46 	bl	8003dd8 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800274c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002756:	4619      	mov	r1, r3
 8002758:	482f      	ldr	r0, [pc, #188]	; (8002818 <SDRAM_MspInit+0x21c>)
 800275a:	f001 fb3d 	bl	8003dd8 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800275e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002768:	4619      	mov	r1, r3
 800276a:	482c      	ldr	r0, [pc, #176]	; (800281c <SDRAM_MspInit+0x220>)
 800276c:	f001 fb34 	bl	8003dd8 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <SDRAM_MspInit+0x224>)
 8002772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002776:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <SDRAM_MspInit+0x224>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <SDRAM_MspInit+0x224>)
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <SDRAM_MspInit+0x224>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <SDRAM_MspInit+0x224>)
 800278e:	f240 2202 	movw	r2, #514	; 0x202
 8002792:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <SDRAM_MspInit+0x224>)
 8002796:	f640 0208 	movw	r2, #2056	; 0x808
 800279a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <SDRAM_MspInit+0x224>)
 800279e:	2220      	movs	r2, #32
 80027a0:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <SDRAM_MspInit+0x224>)
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <SDRAM_MspInit+0x224>)
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <SDRAM_MspInit+0x224>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <SDRAM_MspInit+0x224>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <SDRAM_MspInit+0x224>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <SDRAM_MspInit+0x224>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <SDRAM_MspInit+0x224>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <SDRAM_MspInit+0x224>)
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <SDRAM_MspInit+0x228>)
 80027d2:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <SDRAM_MspInit+0x224>)
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	4a11      	ldr	r2, [pc, #68]	; (8002820 <SDRAM_MspInit+0x224>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6413      	str	r3, [r2, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80027e0:	480f      	ldr	r0, [pc, #60]	; (8002820 <SDRAM_MspInit+0x224>)
 80027e2:	f002 f8cb 	bl	800497c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 80027e6:	480e      	ldr	r0, [pc, #56]	; (8002820 <SDRAM_MspInit+0x224>)
 80027e8:	f002 f87c 	bl	80048e4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	210f      	movs	r1, #15
 80027f0:	207a      	movs	r0, #122	; 0x7a
 80027f2:	f000 f9be 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80027f6:	207a      	movs	r0, #122	; 0x7a
 80027f8:	f000 f9d5 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3740      	adds	r7, #64	; 0x40
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	58024400 	.word	0x58024400
 8002808:	58020c00 	.word	0x58020c00
 800280c:	58021000 	.word	0x58021000
 8002810:	58021400 	.word	0x58021400
 8002814:	58021800 	.word	0x58021800
 8002818:	58021c00 	.word	0x58021c00
 800281c:	58022000 	.word	0x58022000
 8002820:	240000dc 	.word	0x240000dc
 8002824:	52000040 	.word	0x52000040

08002828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282e:	2003      	movs	r0, #3
 8002830:	f000 f994 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002834:	f003 f81c 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_Init+0x68>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4913      	ldr	r1, [pc, #76]	; (8002894 <HAL_Init+0x6c>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_Init+0x68>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_Init+0x6c>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_Init+0x70>)
 800286a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800286c:	4a0b      	ldr	r2, [pc, #44]	; (800289c <HAL_Init+0x74>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f81c 	bl	80028b0 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e002      	b.n	8002888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002882:	f000 f80d 	bl	80028a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58024400 	.word	0x58024400
 8002894:	080070c8 	.word	0x080070c8
 8002898:	24000004 	.word	0x24000004
 800289c:	24000000 	.word	0x24000000

080028a0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_InitTick+0x60>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e021      	b.n	8002908 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_InitTick+0x64>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_InitTick+0x60>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f971 	bl	8002bc2 <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 f93b 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_InitTick+0x68>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	24000058 	.word	0x24000058
 8002914:	24000000 	.word	0x24000000
 8002918:	24000054 	.word	0x24000054

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	24000058 	.word	0x24000058
 8002940:	240002c4 	.word	0x240002c4

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	240002c4 	.word	0x240002c4

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000058 	.word	0x24000058

080029a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_GetREVID+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0c1b      	lsrs	r3, r3, #16
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	5c001000 	.word	0x5c001000

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00
 8002a00:	05fa0000 	.word	0x05fa0000

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff8e 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff29 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff40 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff90 	bl	8002ab0 <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5f 	bl	8002a5c <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff33 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa4 	bl	8002b18 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04f      	b.n	8002c8e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f84e 	bl	8002ca4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_DMA2D_Init+0xbc>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6851      	ldr	r1, [r2, #4]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	69d2      	ldr	r2, [r2, #28]
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_DMA2D_Init+0xc0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6891      	ldr	r1, [r2, #8]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6992      	ldr	r2, [r2, #24]
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_DMA2D_Init+0xc4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d1      	ldr	r1, [r2, #12]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	051a      	lsls	r2, r3, #20
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	055b      	lsls	r3, r3, #21
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	fff8ffbf 	.word	0xfff8ffbf
 8002c9c:	fffffef8 	.word	0xfffffef8
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA2D_Start+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e018      	b.n	8002d06 <HAL_DMA2D_Start+0x4e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f9aa 	bl	8003048 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d056      	beq.n	8002dd8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7ff fe0b 	bl	8002944 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d30:	e04b      	b.n	8002dca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0a5      	b.n	8002ed8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d01a      	beq.n	8002dca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7ff fdd6 	bl	8002944 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <HAL_DMA2D_PollForTransfer+0x9c>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e086      	b.n	8002ed8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ac      	beq.n	8002d32 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d061      	beq.n	8002ebe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dfa:	f7ff fda3 	bl	8002944 <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e00:	e056      	b.n	8002eb0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02e      	beq.n	8002e72 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e38:	f043 0202 	orr.w	r2, r3, #2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2229      	movs	r2, #41	; 0x29
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e032      	b.n	8002ed8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d01a      	beq.n	8002eb0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7ff fd63 	bl	8002944 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <HAL_DMA2D_PollForTransfer+0x182>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e013      	b.n	8002ed8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0a1      	beq.n	8002e02 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2212      	movs	r2, #18
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <HAL_DMA2D_ConfigLayer+0x22>
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_DMA2D_ConfigLayer+0x30>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e092      	b.n	8003036 <HAL_DMA2D_ConfigLayer+0x156>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3328      	adds	r3, #40	; 0x28
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002f44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002f50:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_DMA2D_ConfigLayer+0x164>)
 8002f52:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b0a      	cmp	r3, #10
 8002f5a:	d003      	beq.n	8002f64 <HAL_DMA2D_ConfigLayer+0x84>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d107      	bne.n	8002f74 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e005      	b.n	8002f80 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d120      	bne.n	8002fc8 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	ea02 0103 	and.w	r1, r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b0a      	cmp	r3, #10
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA2D_ConfigLayer+0xd8>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b09      	cmp	r3, #9
 8002fb6:	d135      	bne.n	8003024 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc6:	e02d      	b.n	8003024 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b0b      	cmp	r3, #11
 8002fce:	d109      	bne.n	8002fe4 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002fe2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	ea02 0103 	and.w	r1, r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b0a      	cmp	r3, #10
 800300c:	d003      	beq.n	8003016 <HAL_DMA2D_ConfigLayer+0x136>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b09      	cmp	r3, #9
 8003014:	d106      	bne.n	8003024 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003022:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	ff33000f 	.word	0xff33000f

08003048 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003048:	b480      	push	{r7}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003080:	d174      	bne.n	800316c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003088:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003090:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003098:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e053      	b.n	8003162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e048      	b.n	8003162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d111      	bne.n	80030fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	0cdb      	lsrs	r3, r3, #19
 80030dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	0a9b      	lsrs	r3, r3, #10
 80030e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	02db      	lsls	r3, r3, #11
 80030f2:	4313      	orrs	r3, r2
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	e032      	b.n	8003162 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d117      	bne.n	8003134 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	0fdb      	lsrs	r3, r3, #31
 8003108:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	0cdb      	lsrs	r3, r3, #19
 800310e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	431a      	orrs	r2, r3
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	03db      	lsls	r3, r3, #15
 800312a:	4313      	orrs	r3, r2
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e016      	b.n	8003162 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	0f1b      	lsrs	r3, r3, #28
 8003138:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	0d1b      	lsrs	r3, r3, #20
 800313e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	0b1b      	lsrs	r3, r3, #12
 8003144:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	011a      	lsls	r2, r3, #4
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	431a      	orrs	r2, r3
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	031b      	lsls	r3, r3, #12
 800315a:	4313      	orrs	r3, r2
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800316a:	e00d      	b.n	8003188 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003174:	d104      	bne.n	8003180 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	615a      	str	r2, [r3, #20]
}
 800317e:	e003      	b.n	8003188 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	; 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	019a      	lsls	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	431a      	orrs	r2, r3
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d4:	f7ff fbb6 	bl	8002944 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80031da:	e009      	b.n	80031f0 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80031dc:	f7ff fbb2 	bl	8002944 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ea:	d901      	bls.n	80031f0 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e015      	b.n	800321c <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ee      	beq.n	80031dc <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	431a      	orrs	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	ea42 0103 	orr.w	r1, r2, r3
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e106      	b.n	8003446 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7c5b      	ldrb	r3, [r3, #17]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f908 	bl	8003458 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003262:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800326e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7ff fb65 	bl	8002944 <HAL_GetTick>
 800327a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800327c:	e009      	b.n	8003292 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800327e:	f7ff fb61 	bl	8002944 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328c:	d901      	bls.n	8003292 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0d9      	b.n	8003446 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ed      	beq.n	800327e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_DSI_Init+0x22c>)
 80032b0:	400b      	ands	r3, r1
 80032b2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	009a      	lsls	r2, r3, #2
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	02db      	lsls	r3, r3, #11
 80032ca:	431a      	orrs	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003306:	f7ff fb1d 	bl	8002944 <HAL_GetTick>
 800330a:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800330c:	e009      	b.n	8003322 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800330e:	f7ff fb19 	bl	8002944 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331c:	d901      	bls.n	8003322 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e091      	b.n	8003446 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ed      	beq.n	800330e <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0206 	orr.w	r2, r2, #6
 8003342:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0203 	bic.w	r2, r2, #3
 8003356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0203 	bic.w	r2, r2, #3
 8003384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ac:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_DSI_Init+0x1aa>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	e000      	b.n	80033d0 <HAL_DSI_Init+0x1ac>
 80033ce:	2301      	movs	r3, #1
 80033d0:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_DSI_Init+0x230>)
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	409a      	lsls	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003406:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	430a      	orrs	r2, r1
 800341a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	fffc8603 	.word	0xfffc8603
 8003454:	003d0900 	.word	0x003d0900

08003458 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8ad 	bl	80035fe <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00f      	beq.n	80034d4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f89f 	bl	8003612 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 808c 	beq.w	80035f6 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034e6:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034fe:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f043 0208 	orr.w	r2, r3, #8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f818 	bl	8003626 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7c1b      	ldrb	r3, [r3, #16]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_DSI_ConfigVideoMode+0x16>
 800364e:	2302      	movs	r3, #2
 8003650:	e1ee      	b.n	8003a30 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0203 	bic.w	r2, r2, #3
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80036aa:	400b      	ands	r3, r1
 80036ac:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b84      	ldr	r3, [pc, #528]	; (80038dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80036cc:	400b      	ands	r3, r1
 80036ce:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b7b      	ldr	r3, [pc, #492]	; (80038dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0203 	bic.w	r2, r2, #3
 8003712:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0207 	bic.w	r2, r2, #7
 8003734:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	431a      	orrs	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 020f 	bic.w	r2, r2, #15
 8003762:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020e 	bic.w	r2, r2, #14
 8003786:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005a      	lsls	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d110      	bne.n	80037cc <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6919      	ldr	r1, [r3, #16]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80037d8:	400b      	ands	r3, r1
 80037da:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800381c:	400b      	ands	r3, r1
 800381e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800383e:	400b      	ands	r3, r1
 8003840:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003860:	400b      	ands	r3, r1
 8003862:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003882:	400b      	ands	r3, r1
 8003884:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80038a4:	400b      	ands	r3, r1
 80038a6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d4:	e00a      	b.n	80038ec <HAL_DSI_ConfigVideoMode+0x2b0>
 80038d6:	bf00      	nop
 80038d8:	ffffc000 	.word	0xffffc000
 80038dc:	ffffe000 	.word	0xffffe000
 80038e0:	fffff000 	.word	0xfffff000
 80038e4:	ffff8000 	.word	0xffff8000
 80038e8:	fffffc00 	.word	0xfffffc00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003902:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	041a      	lsls	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003926:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7c1b      	ldrb	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_DSI_ConfigFlowControl+0x16>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e016      	b.n	8003a80 <HAL_DSI_ConfigFlowControl+0x44>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 021f 	bic.w	r2, r2, #31
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7c1b      	ldrb	r3, [r3, #16]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DSI_Start+0x14>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e02b      	b.n	8003af8 <HAL_DSI_Start+0x6c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0208 	orr.w	r2, r2, #8
 8003adc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	7c1b      	ldrb	r3, [r3, #16]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_DSI_ShortWrite+0x1a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e010      	b.n	8003b40 <HAL_DSI_ShortWrite+0x3c>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fb49 	bl	80031c6 <DSI_ShortWrite>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	741a      	strb	r2, [r3, #16]

  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	7c1b      	ldrb	r3, [r3, #16]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_DSI_LongWrite+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e084      	b.n	8003c70 <HAL_DSI_LongWrite+0x128>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b6c:	f7fe feea 	bl	8002944 <HAL_GetTick>
 8003b70:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b72:	e00c      	b.n	8003b8e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b74:	f7fe fee6 	bl	8002944 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b82:	d904      	bls.n	8003b8e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e070      	b.n	8003c70 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0eb      	beq.n	8003b74 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	bf28      	it	cs
 8003ba6:	2303      	movcs	r3, #3
 8003ba8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
 8003bae:	e00f      	b.n	8003bd0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3eb      	bcc.n	8003bb0 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003bf0:	e028      	b.n	8003c44 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	bf28      	it	cs
 8003bf8:	2304      	movcs	r3, #4
 8003bfa:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	e00e      	b.n	8003c24 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	3301      	adds	r3, #1
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3ec      	bcc.n	8003c06 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1d3      	bne.n	8003bf2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c52:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	f7ff fa96 	bl	8003194 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	; 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t datasize = Size;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	7c1b      	ldrb	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_DSI_Read+0x22>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e09a      	b.n	8003dd0 <HAL_DSI_Read+0x158>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d913      	bls.n	8003cce <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	b2da      	uxtb	r2, r3
                           (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	2237      	movs	r2, #55	; 0x37
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fa84 	bl	80031c6 <DSI_ShortWrite>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e080      	b.n	8003dd0 <HAL_DSI_Read+0x158>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d109      	bne.n	8003ce8 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	f7ff fa57 	bl	8003194 <DSI_ConfigPacketHeader>
 8003ce6:	e033      	b.n	8003d50 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d109      	bne.n	8003d02 <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	f7ff fa4a 	bl	8003194 <DSI_ConfigPacketHeader>
 8003d00:	e026      	b.n	8003d50 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	2b14      	cmp	r3, #20
 8003d06:	d10c      	bne.n	8003d22 <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	f7ff fa3a 	bl	8003194 <DSI_ConfigPacketHeader>
 8003d20:	e016      	b.n	8003d50 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	2b24      	cmp	r3, #36	; 0x24
 8003d26:	d10e      	bne.n	8003d46 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	3301      	adds	r3, #1
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	f7ff fa28 	bl	8003194 <DSI_ConfigPacketHeader>
 8003d44:	e004      	b.n	8003d50 <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e03f      	b.n	8003dd0 <HAL_DSI_Read+0x158>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d50:	f7fe fdf8 	bl	8002944 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8003d56:	e034      	b.n	8003dc2 <HAL_DSI_Read+0x14a>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	bf28      	it	cs
 8003d74:	2304      	movcs	r3, #4
 8003d76:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e010      	b.n	8003da0 <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	701a      	strb	r2, [r3, #0]
        pdata++;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	3301      	adds	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
        datasize--;
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d3ea      	bcc.n	8003d7e <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003da8:	f7fe fdcc 	bl	8002944 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db6:	d904      	bls.n	8003dc2 <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e006      	b.n	8003dd0 <HAL_DSI_Read+0x158>
  while (((int32_t)(datasize)) > 0)
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dcc7      	bgt.n	8003d58 <HAL_DSI_Read+0xe0>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003de6:	4b89      	ldr	r3, [pc, #548]	; (800400c <HAL_GPIO_Init+0x234>)
 8003de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dea:	e194      	b.n	8004116 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8186 	beq.w	8004110 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d00b      	beq.n	8003e24 <HAL_GPIO_Init+0x4c>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e18:	2b11      	cmp	r3, #17
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b12      	cmp	r3, #18
 8003e22:	d130      	bne.n	8003e86 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 0201 	and.w	r2, r3, #1
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0xee>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b12      	cmp	r3, #18
 8003ec4:	d123      	bne.n	8003f0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	08da      	lsrs	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3208      	adds	r2, #8
 8003f08:	69b9      	ldr	r1, [r7, #24]
 8003f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80e0 	beq.w	8004110 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f50:	4b2f      	ldr	r3, [pc, #188]	; (8004010 <HAL_GPIO_Init+0x238>)
 8003f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f56:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <HAL_GPIO_Init+0x238>)
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_GPIO_Init+0x238>)
 8003f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6e:	4a29      	ldr	r2, [pc, #164]	; (8004014 <HAL_GPIO_Init+0x23c>)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <HAL_GPIO_Init+0x240>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d052      	beq.n	8004040 <HAL_GPIO_Init+0x268>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <HAL_GPIO_Init+0x244>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d031      	beq.n	8004006 <HAL_GPIO_Init+0x22e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <HAL_GPIO_Init+0x248>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02b      	beq.n	8004002 <HAL_GPIO_Init+0x22a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_GPIO_Init+0x24c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d025      	beq.n	8003ffe <HAL_GPIO_Init+0x226>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_GPIO_Init+0x250>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01f      	beq.n	8003ffa <HAL_GPIO_Init+0x222>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_GPIO_Init+0x254>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d019      	beq.n	8003ff6 <HAL_GPIO_Init+0x21e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <HAL_GPIO_Init+0x258>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_GPIO_Init+0x21a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_GPIO_Init+0x25c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00d      	beq.n	8003fee <HAL_GPIO_Init+0x216>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_GPIO_Init+0x260>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <HAL_GPIO_Init+0x212>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_GPIO_Init+0x264>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_GPIO_Init+0x20e>
 8003fe2:	2309      	movs	r3, #9
 8003fe4:	e02d      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	e02b      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003fea:	2308      	movs	r3, #8
 8003fec:	e029      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003fee:	2307      	movs	r3, #7
 8003ff0:	e027      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	e025      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	e023      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	e021      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8003ffe:	2303      	movs	r3, #3
 8004000:	e01f      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8004002:	2302      	movs	r3, #2
 8004004:	e01d      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 8004006:	2301      	movs	r3, #1
 8004008:	e01b      	b.n	8004042 <HAL_GPIO_Init+0x26a>
 800400a:	bf00      	nop
 800400c:	58000080 	.word	0x58000080
 8004010:	58024400 	.word	0x58024400
 8004014:	58000400 	.word	0x58000400
 8004018:	58020000 	.word	0x58020000
 800401c:	58020400 	.word	0x58020400
 8004020:	58020800 	.word	0x58020800
 8004024:	58020c00 	.word	0x58020c00
 8004028:	58021000 	.word	0x58021000
 800402c:	58021400 	.word	0x58021400
 8004030:	58021800 	.word	0x58021800
 8004034:	58021c00 	.word	0x58021c00
 8004038:	58022000 	.word	0x58022000
 800403c:	58022400 	.word	0x58022400
 8004040:	2300      	movs	r3, #0
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	f002 0203 	and.w	r2, r2, #3
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	4093      	lsls	r3, r2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004052:	4938      	ldr	r1, [pc, #224]	; (8004134 <HAL_GPIO_Init+0x35c>)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f ae63 	bne.w	8003dec <HAL_GPIO_Init+0x14>
  }
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	3724      	adds	r7, #36	; 0x24
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	58000400 	.word	0x58000400

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004156:	887b      	ldrh	r3, [r7, #2]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	619a      	str	r2, [r3, #24]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	041a      	lsls	r2, r3, #16
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43d9      	mvns	r1, r3
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	400b      	ands	r3, r1
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <HAL_HSEM_FastTake+0x2c>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3320      	adds	r3, #32
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <HAL_HSEM_FastTake+0x30>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	58026400 	.word	0x58026400
 80041d0:	80000300 	.word	0x80000300

080041d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_HSEM_Release+0x24>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	58026400 	.word	0x58026400

080041fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0bf      	b.n	800438e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8ba 	bl	800439c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800423e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004254:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_LTDC_Init+0x19c>)
 8004270:	400b      	ands	r3, r1
 8004272:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68d9      	ldr	r1, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_LTDC_Init+0x19c>)
 800429e:	400b      	ands	r3, r1
 80042a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68d9      	ldr	r1, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6919      	ldr	r1, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_LTDC_Init+0x19c>)
 80042cc:	400b      	ands	r3, r1
 80042ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6919      	ldr	r1, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6959      	ldr	r1, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_LTDC_Init+0x19c>)
 80042fa:	400b      	ands	r3, r1
 80042fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6959      	ldr	r1, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0206 	orr.w	r2, r2, #6
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	f000f800 	.word	0xf000f800

0800439c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d023      	beq.n	800441a <HAL_LTDC_IRQHandler+0x6a>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01e      	beq.n	800441a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2204      	movs	r2, #4
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f86f 	bl	80044f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d023      	beq.n	800446c <HAL_LTDC_IRQHandler+0xbc>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01e      	beq.n	800446c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0202 	bic.w	r2, r2, #2
 800443c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2202      	movs	r2, #2
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800444c:	f043 0202 	orr.w	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f846 	bl	80044f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01b      	beq.n	80044ae <HAL_LTDC_IRQHandler+0xfe>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f82f 	bl	800450c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <HAL_LTDC_IRQHandler+0x140>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0208 	bic.w	r2, r2, #8
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2208      	movs	r2, #8
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f818 	bl	8004520 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004534:	b5b0      	push	{r4, r5, r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_LTDC_ConfigLayer+0x1a>
 800454a:	2302      	movs	r3, #2
 800454c:	e02c      	b.n	80045a8 <HAL_LTDC_ConfigLayer+0x74>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2134      	movs	r1, #52	; 0x34
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4614      	mov	r4, r2
 8004572:	461d      	mov	r5, r3
 8004574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800457a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800457c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800457e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f811 	bl	80045b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bdb0      	pop	{r4, r5, r7, pc}

080045b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	4413      	add	r3, r2
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	4413      	add	r3, r2
 80045de:	3384      	adds	r3, #132	; 0x84
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	4611      	mov	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	01d2      	lsls	r2, r2, #7
 80045ec:	440a      	add	r2, r1
 80045ee:	3284      	adds	r2, #132	; 0x84
 80045f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	4413      	add	r3, r2
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	440b      	add	r3, r1
 8004616:	3384      	adds	r3, #132	; 0x84
 8004618:	4619      	mov	r1, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800462e:	4413      	add	r3, r2
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4413      	add	r3, r2
 8004640:	3384      	adds	r3, #132	; 0x84
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4611      	mov	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	01d2      	lsls	r2, r2, #7
 800464e:	440a      	add	r2, r1
 8004650:	3284      	adds	r2, #132	; 0x84
 8004652:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004656:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004666:	4413      	add	r3, r2
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	01db      	lsls	r3, r3, #7
 8004674:	440b      	add	r3, r1
 8004676:	3384      	adds	r3, #132	; 0x84
 8004678:	4619      	mov	r1, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	01db      	lsls	r3, r3, #7
 800468a:	4413      	add	r3, r2
 800468c:	3384      	adds	r3, #132	; 0x84
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	4611      	mov	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	01d2      	lsls	r2, r2, #7
 800469a:	440a      	add	r2, r1
 800469c:	3284      	adds	r2, #132	; 0x84
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	01db      	lsls	r3, r3, #7
 80046ae:	4413      	add	r3, r2
 80046b0:	3384      	adds	r3, #132	; 0x84
 80046b2:	461a      	mov	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4413      	add	r3, r2
 80046e2:	3384      	adds	r3, #132	; 0x84
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	4413      	add	r3, r2
 80046f2:	3384      	adds	r3, #132	; 0x84
 80046f4:	461a      	mov	r2, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004700:	461a      	mov	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	431a      	orrs	r2, r3
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4619      	mov	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	01db      	lsls	r3, r3, #7
 8004714:	440b      	add	r3, r1
 8004716:	3384      	adds	r3, #132	; 0x84
 8004718:	4619      	mov	r1, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	01db      	lsls	r3, r3, #7
 800472a:	4413      	add	r3, r2
 800472c:	3384      	adds	r3, #132	; 0x84
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	4611      	mov	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	01d2      	lsls	r2, r2, #7
 800473a:	440a      	add	r2, r1
 800473c:	3284      	adds	r2, #132	; 0x84
 800473e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004742:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	3384      	adds	r3, #132	; 0x84
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	01db      	lsls	r3, r3, #7
 8004764:	4413      	add	r3, r2
 8004766:	3384      	adds	r3, #132	; 0x84
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	01db      	lsls	r3, r3, #7
 8004774:	440b      	add	r3, r1
 8004776:	3384      	adds	r3, #132	; 0x84
 8004778:	4619      	mov	r1, r3
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <LTDC_SetConfig+0x32c>)
 800477c:	4013      	ands	r3, r2
 800477e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	68f9      	ldr	r1, [r7, #12]
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	4608      	mov	r0, r1
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	01c9      	lsls	r1, r1, #7
 8004792:	4401      	add	r1, r0
 8004794:	3184      	adds	r1, #132	; 0x84
 8004796:	4313      	orrs	r3, r2
 8004798:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	01db      	lsls	r3, r3, #7
 80047a4:	4413      	add	r3, r2
 80047a6:	3384      	adds	r3, #132	; 0x84
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	01db      	lsls	r3, r3, #7
 80047b4:	4413      	add	r3, r2
 80047b6:	3384      	adds	r3, #132	; 0x84
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	01db      	lsls	r3, r3, #7
 80047c8:	4413      	add	r3, r2
 80047ca:	3384      	adds	r3, #132	; 0x84
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80047dc:	2304      	movs	r3, #4
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	e01b      	b.n	800481a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80047ea:	2303      	movs	r3, #3
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e014      	b.n	800481a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d00b      	beq.n	8004810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d007      	beq.n	8004810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004804:	2b03      	cmp	r3, #3
 8004806:	d003      	beq.n	8004810 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800480c:	2b07      	cmp	r3, #7
 800480e:	d102      	bne.n	8004816 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004810:	2302      	movs	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e001      	b.n	800481a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	4413      	add	r3, r2
 8004826:	3384      	adds	r3, #132	; 0x84
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	4611      	mov	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	01d2      	lsls	r2, r2, #7
 8004834:	440a      	add	r2, r1
 8004836:	3284      	adds	r2, #132	; 0x84
 8004838:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800483c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1acb      	subs	r3, r1, r3
 8004854:	69f9      	ldr	r1, [r7, #28]
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	3307      	adds	r3, #7
 800485c:	68f9      	ldr	r1, [r7, #12]
 800485e:	6809      	ldr	r1, [r1, #0]
 8004860:	4608      	mov	r0, r1
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	01c9      	lsls	r1, r1, #7
 8004866:	4401      	add	r1, r0
 8004868:	3184      	adds	r1, #132	; 0x84
 800486a:	4313      	orrs	r3, r2
 800486c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	4413      	add	r3, r2
 800487a:	3384      	adds	r3, #132	; 0x84
 800487c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	440b      	add	r3, r1
 800488a:	3384      	adds	r3, #132	; 0x84
 800488c:	4619      	mov	r1, r3
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <LTDC_SetConfig+0x330>)
 8004890:	4013      	ands	r3, r2
 8004892:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	4413      	add	r3, r2
 80048a0:	3384      	adds	r3, #132	; 0x84
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	01db      	lsls	r3, r3, #7
 80048b4:	4413      	add	r3, r2
 80048b6:	3384      	adds	r3, #132	; 0x84
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4611      	mov	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	01d2      	lsls	r2, r2, #7
 80048c4:	440a      	add	r2, r1
 80048c6:	3284      	adds	r2, #132	; 0x84
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	fffff8f8 	.word	0xfffff8f8
 80048e0:	fffff800 	.word	0xfffff800

080048e4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7fe f82a 	bl	8002944 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e03b      	b.n	8004974 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800491c:	e00f      	b.n	800493e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800491e:	f7fe f811 	bl	8002944 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b05      	cmp	r3, #5
 800492a:	d908      	bls.n	800493e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2203      	movs	r2, #3
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e01a      	b.n	8004974 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e8      	bne.n	800491e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f86d 	bl	8004a2c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e048      	b.n	8004a20 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	221f      	movs	r2, #31
 80049f4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68d9      	ldr	r1, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004a52:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004a5e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004a6a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004a74:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004a80:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004a82:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d107      	bne.n	8004a9e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004a9c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da11      	bge.n	8004ad2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004abc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	b292      	uxth	r2, r2
 8004ace:	621a      	str	r2, [r3, #32]
 8004ad0:	e006      	b.n	8004ae0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b292      	uxth	r2, r2
 8004ade:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da15      	bge.n	8004b14 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004af6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	425b      	negs	r3, r3
 8004afe:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a19      	ldr	r1, [r3, #32]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	041a      	lsls	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	621a      	str	r2, [r3, #32]
 8004b12:	e009      	b.n	8004b28 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a19      	ldr	r1, [r3, #32]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d006      	beq.n	8004b40 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b3e:	e003      	b.n	8004b48 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b64:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d00a      	beq.n	8004b86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e040      	b.n	8004c04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e03e      	b.n	8004c04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b86:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b8e:	491f      	ldr	r1, [pc, #124]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b96:	f7fd fed5 	bl	8002944 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b9c:	e009      	b.n	8004bb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b9e:	f7fd fed1 	bl	8002944 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bac:	d901      	bls.n	8004bb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e028      	b.n	8004c04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b1e      	cmp	r3, #30
 8004bc4:	d008      	beq.n	8004bd8 <HAL_PWREx_ConfigSupply+0x7c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bca:	d005      	beq.n	8004bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b1d      	cmp	r3, #29
 8004bd0:	d002      	beq.n	8004bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8004bd6:	d114      	bne.n	8004c02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004bd8:	f7fd feb4 	bl	8002944 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bde:	e009      	b.n	8004bf4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004be0:	f7fd feb0 	bl	8002944 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bee:	d901      	bls.n	8004bf4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e007      	b.n	8004c04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d1ee      	bne.n	8004be0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	58024800 	.word	0x58024800

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e3ff      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8087 	beq.w	8004d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c30:	4b99      	ldr	r3, [pc, #612]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c3a:	4b97      	ldr	r3, [pc, #604]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d007      	beq.n	8004c56 <HAL_RCC_OscConfig+0x46>
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b18      	cmp	r3, #24
 8004c4a:	d110      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d10b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c56:	4b90      	ldr	r3, [pc, #576]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x12c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d168      	bne.n	8004d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e3d9      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x76>
 8004c78:	4b87      	ldr	r3, [pc, #540]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a86      	ldr	r2, [pc, #536]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e02e      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x98>
 8004c8e:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a81      	ldr	r2, [pc, #516]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xbc>
 8004cb2:	4b79      	ldr	r3, [pc, #484]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a78      	ldr	r2, [pc, #480]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b76      	ldr	r3, [pc, #472]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a75      	ldr	r2, [pc, #468]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ccc:	4b72      	ldr	r3, [pc, #456]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a71      	ldr	r2, [pc, #452]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6e      	ldr	r2, [pc, #440]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd fe2a 	bl	8002944 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fe26 	bl	8002944 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e38d      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d06:	4b64      	ldr	r3, [pc, #400]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xe4>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fe16 	bl	8002944 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fd fe12 	bl	8002944 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e379      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2e:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x10c>
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80ae 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4c:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d56:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b18      	cmp	r3, #24
 8004d66:	d13a      	bne.n	8004dde <HAL_RCC_OscConfig+0x1ce>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d135      	bne.n	8004dde <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d72:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e34b      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	f7fd fe0b 	bl	80029a4 <HAL_GetREVID>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d817      	bhi.n	8004dc8 <HAL_RCC_OscConfig+0x1b8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d108      	bne.n	8004db2 <HAL_RCC_OscConfig+0x1a2>
 8004da0:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004da8:	4a3b      	ldr	r2, [pc, #236]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db0:	e07a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	4b39      	ldr	r3, [pc, #228]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	031b      	lsls	r3, r3, #12
 8004dc0:	4935      	ldr	r1, [pc, #212]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc6:	e06f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b33      	ldr	r3, [pc, #204]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	4930      	ldr	r1, [pc, #192]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ddc:	e064      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d045      	beq.n	8004e72 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004de6:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 0219 	bic.w	r2, r3, #25
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4929      	ldr	r1, [pc, #164]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fd fda4 	bl	8002944 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fd fda0 	bl	8002944 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e307      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e12:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1e:	f7fd fdc1 	bl	80029a4 <HAL_GetREVID>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d817      	bhi.n	8004e5c <HAL_RCC_OscConfig+0x24c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d108      	bne.n	8004e46 <HAL_RCC_OscConfig+0x236>
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e42:	6053      	str	r3, [r2, #4]
 8004e44:	e030      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	4910      	ldr	r1, [pc, #64]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
 8004e5a:	e025      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	490b      	ldr	r1, [pc, #44]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	e01a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <HAL_RCC_OscConfig+0x288>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd fd61 	bl	8002944 <HAL_GetTick>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fd fd5d 	bl	8002944 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d903      	bls.n	8004e9c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e2c4      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
 8004e98:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e9c:	4ba4      	ldr	r3, [pc, #656]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ee      	bne.n	8004e86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80a9 	beq.w	8005008 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb6:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ec0:	4b9b      	ldr	r3, [pc, #620]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d007      	beq.n	8004edc <HAL_RCC_OscConfig+0x2cc>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b18      	cmp	r3, #24
 8004ed0:	d13a      	bne.n	8004f48 <HAL_RCC_OscConfig+0x338>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d135      	bne.n	8004f48 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004edc:	4b94      	ldr	r3, [pc, #592]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2e4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e296      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ef4:	f7fd fd56 	bl	80029a4 <HAL_GetREVID>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f241 0203 	movw	r2, #4099	; 0x1003
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d817      	bhi.n	8004f32 <HAL_RCC_OscConfig+0x322>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d108      	bne.n	8004f1c <HAL_RCC_OscConfig+0x30c>
 8004f0a:	4b89      	ldr	r3, [pc, #548]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f12:	4a87      	ldr	r2, [pc, #540]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f1a:	e075      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1c:	4b84      	ldr	r3, [pc, #528]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	069b      	lsls	r3, r3, #26
 8004f2a:	4981      	ldr	r1, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f30:	e06a      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f32:	4b7f      	ldr	r3, [pc, #508]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	497b      	ldr	r1, [pc, #492]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f46:	e05f      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d042      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f50:	4b77      	ldr	r3, [pc, #476]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a76      	ldr	r2, [pc, #472]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fd fcf2 	bl	8002944 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f64:	f7fd fcee 	bl	8002944 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e255      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f76:	4b6e      	ldr	r3, [pc, #440]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f82:	f7fd fd0f 	bl	80029a4 <HAL_GetREVID>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d817      	bhi.n	8004fc0 <HAL_RCC_OscConfig+0x3b0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d108      	bne.n	8004faa <HAL_RCC_OscConfig+0x39a>
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fa0:	4a63      	ldr	r2, [pc, #396]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa6:	6053      	str	r3, [r2, #4]
 8004fa8:	e02e      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
 8004faa:	4b61      	ldr	r3, [pc, #388]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	069b      	lsls	r3, r3, #26
 8004fb8:	495d      	ldr	r1, [pc, #372]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
 8004fbe:	e023      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
 8004fc0:	4b5b      	ldr	r3, [pc, #364]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	4958      	ldr	r1, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60cb      	str	r3, [r1, #12]
 8004fd4:	e018      	b.n	8005008 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fd6:	4b56      	ldr	r3, [pc, #344]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a55      	ldr	r2, [pc, #340]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fd fcaf 	bl	8002944 <HAL_GetTick>
 8004fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fea:	f7fd fcab 	bl	8002944 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e212      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d036      	beq.n	8005082 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d019      	beq.n	8005050 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501c:	4b44      	ldr	r3, [pc, #272]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	4a43      	ldr	r2, [pc, #268]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fc8c 	bl	8002944 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005030:	f7fd fc88 	bl	8002944 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1ef      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005042:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x420>
 800504e:	e018      	b.n	8005082 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005050:	4b37      	ldr	r3, [pc, #220]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	4a36      	ldr	r2, [pc, #216]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fd fc72 	bl	8002944 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005064:	f7fd fc6e 	bl	8002944 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1d5      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005076:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d036      	beq.n	80050fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005096:	4b26      	ldr	r3, [pc, #152]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 800509c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050a2:	f7fd fc4f 	bl	8002944 <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050aa:	f7fd fc4b 	bl	8002944 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e1b2      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050bc:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x49a>
 80050c8:	e018      	b.n	80050fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ca:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 80050d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050d6:	f7fd fc35 	bl	8002944 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050de:	f7fd fc31 	bl	8002944 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e198      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCC_OscConfig+0x520>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8085 	beq.w	8005214 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <HAL_RCC_OscConfig+0x524>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <HAL_RCC_OscConfig+0x524>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005116:	f7fd fc15 	bl	8002944 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511c:	e00c      	b.n	8005138 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fd fc11 	bl	8002944 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b64      	cmp	r3, #100	; 0x64
 800512a:	d905      	bls.n	8005138 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e178      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
 8005130:	58024400 	.word	0x58024400
 8005134:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005138:	4b96      	ldr	r3, [pc, #600]	; (8005394 <HAL_RCC_OscConfig+0x784>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ec      	beq.n	800511e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x54a>
 800514c:	4b92      	ldr	r3, [pc, #584]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a91      	ldr	r2, [pc, #580]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	e02d      	b.n	80051b6 <HAL_RCC_OscConfig+0x5a6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x56c>
 8005162:	4b8d      	ldr	r3, [pc, #564]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a8c      	ldr	r2, [pc, #560]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
 800516e:	4b8a      	ldr	r3, [pc, #552]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a89      	ldr	r2, [pc, #548]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	e01c      	b.n	80051b6 <HAL_RCC_OscConfig+0x5a6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d10c      	bne.n	800519e <HAL_RCC_OscConfig+0x58e>
 8005184:	4b84      	ldr	r3, [pc, #528]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a83      	ldr	r2, [pc, #524]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a80      	ldr	r2, [pc, #512]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
 800519c:	e00b      	b.n	80051b6 <HAL_RCC_OscConfig+0x5a6>
 800519e:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	4a7d      	ldr	r2, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	6713      	str	r3, [r2, #112]	; 0x70
 80051aa:	4b7b      	ldr	r3, [pc, #492]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a7a      	ldr	r2, [pc, #488]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fd fbc1 	bl	8002944 <HAL_GetTick>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fd fbbd 	bl	8002944 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e122      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051dc:	4b6e      	ldr	r3, [pc, #440]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ee      	beq.n	80051c6 <HAL_RCC_OscConfig+0x5b6>
 80051e8:	e014      	b.n	8005214 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fd fbab 	bl	8002944 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd fba7 	bl	8002944 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10c      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005208:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ee      	bne.n	80051f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8101 	beq.w	8005420 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800521e:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005226:	2b18      	cmp	r3, #24
 8005228:	f000 80bc 	beq.w	80053a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2b02      	cmp	r3, #2
 8005232:	f040 8095 	bne.w	8005360 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005236:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800523c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fd fb7f 	bl	8002944 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524a:	f7fd fb7b 	bl	8002944 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0e2      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525c:	4b4e      	ldr	r3, [pc, #312]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005268:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800526a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526c:	4b4b      	ldr	r3, [pc, #300]	; (800539c <HAL_RCC_OscConfig+0x78c>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005278:	0112      	lsls	r2, r2, #4
 800527a:	430a      	orrs	r2, r1
 800527c:	4946      	ldr	r1, [pc, #280]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800527e:	4313      	orrs	r3, r2
 8005280:	628b      	str	r3, [r1, #40]	; 0x28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	3b01      	subs	r3, #1
 8005288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	3b01      	subs	r3, #1
 8005292:	025b      	lsls	r3, r3, #9
 8005294:	b29b      	uxth	r3, r3
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	3b01      	subs	r3, #1
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	3b01      	subs	r3, #1
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052b2:	4939      	ldr	r1, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052b8:	4b37      	ldr	r3, [pc, #220]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a36      	ldr	r2, [pc, #216]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <HAL_RCC_OscConfig+0x790>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052d0:	00d2      	lsls	r2, r2, #3
 80052d2:	4931      	ldr	r1, [pc, #196]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052d8:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f023 020c 	bic.w	r2, r3, #12
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	492c      	ldr	r1, [pc, #176]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052ea:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	f023 0202 	bic.w	r2, r3, #2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	4928      	ldr	r1, [pc, #160]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052fc:	4b26      	ldr	r3, [pc, #152]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005314:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800531a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005320:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd fb04 	bl	8002944 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fd fb00 	bl	8002944 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e067      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x730>
 800535e:	e05f      	b.n	8005420 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800536a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd faea 	bl	8002944 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005374:	f7fd fae6 	bl	8002944 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e04d      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005386:	4b04      	ldr	r3, [pc, #16]	; (8005398 <HAL_RCC_OscConfig+0x788>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x764>
 8005392:	e045      	b.n	8005420 <HAL_RCC_OscConfig+0x810>
 8005394:	58024800 	.word	0x58024800
 8005398:	58024400 	.word	0x58024400
 800539c:	fffffc0c 	.word	0xfffffc0c
 80053a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCC_OscConfig+0x81c>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCC_OscConfig+0x81c>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d031      	beq.n	800541c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0203 	and.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d12a      	bne.n	800541c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d122      	bne.n	800541c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0a5b      	lsrs	r3, r3, #9
 80053ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d108      	bne.n	800541c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400

08005430 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e19c      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b8a      	ldr	r3, [pc, #552]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d910      	bls.n	8005474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 020f 	bic.w	r2, r3, #15
 800545a:	4985      	ldr	r1, [pc, #532]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b83      	ldr	r3, [pc, #524]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e184      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	4b7b      	ldr	r3, [pc, #492]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800548c:	429a      	cmp	r2, r3
 800548e:	d908      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005490:	4b78      	ldr	r3, [pc, #480]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	4975      	ldr	r1, [pc, #468]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	4b70      	ldr	r3, [pc, #448]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054be:	4b6d      	ldr	r3, [pc, #436]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	496a      	ldr	r1, [pc, #424]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d908      	bls.n	80054fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	495e      	ldr	r1, [pc, #376]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d010      	beq.n	800552c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005516:	429a      	cmp	r2, r3
 8005518:	d908      	bls.n	800552c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4953      	ldr	r1, [pc, #332]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005528:	4313      	orrs	r3, r2
 800552a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d010      	beq.n	800555a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	4b4d      	ldr	r3, [pc, #308]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	429a      	cmp	r2, r3
 8005546:	d908      	bls.n	800555a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b4a      	ldr	r3, [pc, #296]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f023 020f 	bic.w	r2, r3, #15
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4947      	ldr	r1, [pc, #284]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005556:	4313      	orrs	r3, r2
 8005558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d055      	beq.n	8005612 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005566:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4940      	ldr	r1, [pc, #256]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005574:	4313      	orrs	r3, r2
 8005576:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005580:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d121      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0f6      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d115      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0ea      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b0:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0de      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c0:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0d6      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f023 0207 	bic.w	r2, r3, #7
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4925      	ldr	r1, [pc, #148]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fd f9af 	bl	8002944 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ea:	f7fd f9ab 	bl	8002944 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0be      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005600:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	429a      	cmp	r2, r3
 8005610:	d1eb      	bne.n	80055ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	4b14      	ldr	r3, [pc, #80]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	429a      	cmp	r2, r3
 800562c:	d208      	bcs.n	8005640 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f023 020f 	bic.w	r2, r3, #15
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	490e      	ldr	r1, [pc, #56]	; (8005674 <HAL_RCC_ClockConfig+0x244>)
 800563c:	4313      	orrs	r3, r2
 800563e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d214      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 020f 	bic.w	r2, r3, #15
 8005656:	4906      	ldr	r1, [pc, #24]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e086      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
 8005670:	52002000 	.word	0x52002000
 8005674:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005690:	429a      	cmp	r2, r3
 8005692:	d208      	bcs.n	80056a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005694:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	4939      	ldr	r1, [pc, #228]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	4b34      	ldr	r3, [pc, #208]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056be:	429a      	cmp	r2, r3
 80056c0:	d208      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	492e      	ldr	r1, [pc, #184]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d208      	bcs.n	8005702 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056f0:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4922      	ldr	r1, [pc, #136]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800571a:	429a      	cmp	r2, r3
 800571c:	d208      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4917      	ldr	r1, [pc, #92]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 800572c:	4313      	orrs	r3, r2
 800572e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005730:	f000 f89e 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	4912      	ldr	r1, [pc, #72]	; (800578c <HAL_RCC_ClockConfig+0x35c>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	4a0d      	ldr	r2, [pc, #52]	; (800578c <HAL_RCC_ClockConfig+0x35c>)
 8005758:	5cd3      	ldrb	r3, [r2, r3]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <HAL_RCC_ClockConfig+0x360>)
 8005766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005768:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <HAL_RCC_ClockConfig+0x364>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x368>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fd f89c 	bl	80028b0 <HAL_InitTick>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	58024400 	.word	0x58024400
 800578c:	080070c8 	.word	0x080070c8
 8005790:	24000004 	.word	0x24000004
 8005794:	24000000 	.word	0x24000000
 8005798:	24000054 	.word	0x24000054

0800579c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	; 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d12a      	bne.n	8005804 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80057ae:	4b2d      	ldr	r3, [pc, #180]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057b4:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80057cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057de:	2300      	movs	r3, #0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80057e2:	f107 031c 	add.w	r3, r7, #28
 80057e6:	4619      	mov	r1, r3
 80057e8:	481f      	ldr	r0, [pc, #124]	; (8005868 <HAL_RCC_MCOConfig+0xcc>)
 80057ea:	f7fe faf5 	bl	8003dd8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	430b      	orrs	r3, r1
 80057fc:	4919      	ldr	r1, [pc, #100]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005802:	e02a      	b.n	800585a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 8005806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 8005816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005828:	2302      	movs	r3, #2
 800582a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800582c:	2303      	movs	r3, #3
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005830:	2300      	movs	r3, #0
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005834:	2300      	movs	r3, #0
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005838:	f107 031c 	add.w	r3, r7, #28
 800583c:	4619      	mov	r1, r3
 800583e:	480b      	ldr	r0, [pc, #44]	; (800586c <HAL_RCC_MCOConfig+0xd0>)
 8005840:	f7fe faca 	bl	8003dd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	01d9      	lsls	r1, r3, #7
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	430b      	orrs	r3, r1
 8005854:	4903      	ldr	r1, [pc, #12]	; (8005864 <HAL_RCC_MCOConfig+0xc8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	610b      	str	r3, [r1, #16]
}
 800585a:	bf00      	nop
 800585c:	3730      	adds	r7, #48	; 0x30
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
 8005868:	58020000 	.word	0x58020000
 800586c:	58020800 	.word	0x58020800

08005870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005876:	4bb3      	ldr	r3, [pc, #716]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587e:	2b18      	cmp	r3, #24
 8005880:	f200 8155 	bhi.w	8005b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058f1 	.word	0x080058f1
 8005890:	08005b2f 	.word	0x08005b2f
 8005894:	08005b2f 	.word	0x08005b2f
 8005898:	08005b2f 	.word	0x08005b2f
 800589c:	08005b2f 	.word	0x08005b2f
 80058a0:	08005b2f 	.word	0x08005b2f
 80058a4:	08005b2f 	.word	0x08005b2f
 80058a8:	08005b2f 	.word	0x08005b2f
 80058ac:	08005917 	.word	0x08005917
 80058b0:	08005b2f 	.word	0x08005b2f
 80058b4:	08005b2f 	.word	0x08005b2f
 80058b8:	08005b2f 	.word	0x08005b2f
 80058bc:	08005b2f 	.word	0x08005b2f
 80058c0:	08005b2f 	.word	0x08005b2f
 80058c4:	08005b2f 	.word	0x08005b2f
 80058c8:	08005b2f 	.word	0x08005b2f
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	08005b2f 	.word	0x08005b2f
 80058d4:	08005b2f 	.word	0x08005b2f
 80058d8:	08005b2f 	.word	0x08005b2f
 80058dc:	08005b2f 	.word	0x08005b2f
 80058e0:	08005b2f 	.word	0x08005b2f
 80058e4:	08005b2f 	.word	0x08005b2f
 80058e8:	08005b2f 	.word	0x08005b2f
 80058ec:	08005923 	.word	0x08005923
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f0:	4b94      	ldr	r3, [pc, #592]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058fc:	4b91      	ldr	r3, [pc, #580]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	4a90      	ldr	r2, [pc, #576]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800590e:	e111      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005910:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005912:	61bb      	str	r3, [r7, #24]
    break;
 8005914:	e10e      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005916:	4b8d      	ldr	r3, [pc, #564]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005918:	61bb      	str	r3, [r7, #24]
    break;
 800591a:	e10b      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800591c:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800591e:	61bb      	str	r3, [r7, #24]
    break;
 8005920:	e108      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800592c:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005936:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005938:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005942:	4b80      	ldr	r3, [pc, #512]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80e1 	beq.w	8005b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b02      	cmp	r3, #2
 800596a:	f000 8083 	beq.w	8005a74 <HAL_RCC_GetSysClockFreq+0x204>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b02      	cmp	r3, #2
 8005972:	f200 80a1 	bhi.w	8005ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x114>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d056      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005982:	e099      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005984:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02d      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005990:	4b6c      	ldr	r3, [pc, #432]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	4a6b      	ldr	r2, [pc, #428]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ba:	4b62      	ldr	r3, [pc, #392]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80059ea:	e087      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b51      	ldr	r3, [pc, #324]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a2e:	e065      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a72:	e043      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b2f      	ldr	r3, [pc, #188]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab6:	e021      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ade:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	0a5b      	lsrs	r3, r3, #9
 8005b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b06:	3301      	adds	r3, #1
 8005b08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b20:	ee17 3a90 	vmov	r3, s15
 8005b24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b26:	e005      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
    break;
 8005b2c:	e002      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b30:	61bb      	str	r3, [r7, #24]
    break;
 8005b32:	bf00      	nop
  }

  return sysclockfreq;
 8005b34:	69bb      	ldr	r3, [r7, #24]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	003d0900 	.word	0x003d0900
 8005b50:	017d7840 	.word	0x017d7840
 8005b54:	46000000 	.word	0x46000000
 8005b58:	4c742400 	.word	0x4c742400
 8005b5c:	4a742400 	.word	0x4a742400
 8005b60:	4bbebc20 	.word	0x4bbebc20

08005b64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b70:	2300      	movs	r3, #0
 8005b72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b88:	d02a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b8e:	d824      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b94:	d018      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b9a:	d81e      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba4:	d007      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ba6:	e018      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4bab      	ldr	r3, [pc, #684]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4aaa      	ldr	r2, [pc, #680]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bb4:	e015      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2102      	movs	r1, #2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 ff41 	bl	8006a44 <RCCEx_PLL2_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bc6:	e00c      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ffea 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005be8:	4b9b      	ldr	r3, [pc, #620]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf4:	4998      	ldr	r1, [pc, #608]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8005bfa:	e001      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d03d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d826      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c31 	.word	0x08005c31
 8005c20:	08005c3f 	.word	0x08005c3f
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c30:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4a88      	ldr	r2, [pc, #544]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c3c:	e015      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fefd 	bl	8006a44 <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c4e:	e00c      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3324      	adds	r3, #36	; 0x24
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ffa6 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c60:	e003      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
      break;
 8005c66:	e000      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c70:	4b79      	ldr	r3, [pc, #484]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	f023 0207 	bic.w	r2, r3, #7
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	4976      	ldr	r1, [pc, #472]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	650b      	str	r3, [r1, #80]	; 0x50
 8005c82:	e001      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d042      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9c:	d02b      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d825      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ca4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ca6:	d028      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8005caa:	d821      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d016      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d81d      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d007      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005cbc:	e018      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbe:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	4a65      	ldr	r2, [pc, #404]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cca:	e017      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 feb6 	bl	8006a44 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cdc:	e00e      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 ff5f 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cee:	e005      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d02:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	4952      	ldr	r1, [pc, #328]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	650b      	str	r3, [r1, #80]	; 0x50
 8005d14:	e001      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d049      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d30:	d030      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d36:	d82a      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d3c:	d02c      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d42:	d824      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d48:	d018      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4e:	d81e      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d58:	d007      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d5a:	e018      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d68:	e017      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fe67 	bl	8006a44 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d7a:	e00e      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 ff10 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d8c:	e005      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	e002      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dae:	492a      	ldr	r1, [pc, #168]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	658b      	str	r3, [r1, #88]	; 0x58
 8005db4:	e001      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d04c      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dd0:	d030      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dd6:	d82a      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ddc:	d02c      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005de2:	d824      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de8:	d018      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dee:	d81e      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005df8:	d007      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005dfa:	e018      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfc:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e08:	e017      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fe17 	bl	8006a44 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e1a:	e00e      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3324      	adds	r3, #36	; 0x24
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fec0 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e4e:	4902      	ldr	r1, [pc, #8]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	658b      	str	r3, [r1, #88]	; 0x58
 8005e54:	e004      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e56:	bf00      	nop
 8005e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d032      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d01c      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d817      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d00c      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d813      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d10f      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4bb1      	ldr	r3, [pc, #708]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4ab0      	ldr	r2, [pc, #704]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e94:	e00e      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fdd1 	bl	8006a44 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ea6:	e005      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005eac:	e002      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005eba:	4ba5      	ldr	r3, [pc, #660]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec6:	49a2      	ldr	r1, [pc, #648]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ecc:	e001      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d047      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee6:	d030      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eec:	d82a      	bhi.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ef2:	d02c      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005ef4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ef8:	d824      	bhi.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	d018      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d81e      	bhi.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d007      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f10:	e018      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f12:	4b8f      	ldr	r3, [pc, #572]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4a8e      	ldr	r2, [pc, #568]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f1e:	e017      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fd8c 	bl	8006a44 <RCCEx_PLL2_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f30:	e00e      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fe35 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f42:	e005      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
      break;
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f56:	4b7e      	ldr	r3, [pc, #504]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	497b      	ldr	r1, [pc, #492]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	650b      	str	r3, [r1, #80]	; 0x50
 8005f68:	e001      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d049      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f82:	d02e      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f88:	d828      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f8e:	d02a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f94:	d822      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f9a:	d026      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa0:	d81c      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa6:	d010      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fac:	d816      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01d      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb6:	d111      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd40 	bl	8006a44 <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fc8:	e012      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3324      	adds	r3, #36	; 0x24
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fde9 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fda:	e009      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe0:	e006      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ff6:	4b56      	ldr	r3, [pc, #344]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006002:	4953      	ldr	r1, [pc, #332]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006004:	4313      	orrs	r3, r2
 8006006:	650b      	str	r3, [r1, #80]	; 0x50
 8006008:	e001      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04b      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006024:	d02e      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800602a:	d828      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d02a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006036:	d822      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800603c:	d026      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800603e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006042:	d81c      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006048:	d010      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800604a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604e:	d816      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01d      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006058:	d111      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2101      	movs	r1, #1
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fcef 	bl	8006a44 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800606a:	e012      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3324      	adds	r3, #36	; 0x24
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fd98 	bl	8006ba8 <RCCEx_PLL3_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800607c:	e009      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      break;
 8006082:	e006      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006084:	bf00      	nop
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006098:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060a6:	492a      	ldr	r1, [pc, #168]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	658b      	str	r3, [r1, #88]	; 0x58
 80060ac:	e001      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d022      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ca:	d108      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	2101      	movs	r1, #1
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fcb6 	bl	8006a44 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	75fb      	strb	r3, [r7, #23]
      break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80060ec:	4b18      	ldr	r3, [pc, #96]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f8:	4915      	ldr	r1, [pc, #84]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d031      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006118:	d00e      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800611a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611e:	d814      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8006124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006128:	d10f      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a08      	ldr	r2, [pc, #32]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006136:	e00e      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fc80 	bl	8006a44 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006148:	e005      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	75fb      	strb	r3, [r7, #23]
      break;
 800614e:	e002      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006150:	58024400 	.word	0x58024400
      break;
 8006154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800615c:	4bbc      	ldr	r3, [pc, #752]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	49b9      	ldr	r1, [pc, #740]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800616a:	4313      	orrs	r3, r2
 800616c:	650b      	str	r3, [r1, #80]	; 0x50
 800616e:	e001      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d032      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	2b03      	cmp	r3, #3
 8006186:	d81b      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061a1 	.word	0x080061a1
 8006198:	080061af 	.word	0x080061af
 800619c:	080061c7 	.word	0x080061c7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4bab      	ldr	r3, [pc, #684]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	4aaa      	ldr	r2, [pc, #680]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061ac:	e00c      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	2102      	movs	r1, #2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fc45 	bl	8006a44 <RCCEx_PLL2_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 80061c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061ce:	4ba0      	ldr	r3, [pc, #640]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d2:	f023 0203 	bic.w	r2, r3, #3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	499d      	ldr	r1, [pc, #628]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061e0:	e001      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8086 	beq.w	8006300 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f4:	4b97      	ldr	r3, [pc, #604]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a96      	ldr	r2, [pc, #600]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80061fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006200:	f7fc fba0 	bl	8002944 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006206:	e009      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006208:	f7fc fb9c 	bl	8002944 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	; 0x64
 8006214:	d902      	bls.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	75fb      	strb	r3, [r7, #23]
        break;
 800621a:	e005      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800621c:	4b8d      	ldr	r3, [pc, #564]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ef      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d166      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800622e:	4b88      	ldr	r3, [pc, #544]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006238:	4053      	eors	r3, r2
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d013      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006242:	4b83      	ldr	r3, [pc, #524]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800624c:	4b80      	ldr	r3, [pc, #512]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a7f      	ldr	r2, [pc, #508]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006258:	4b7d      	ldr	r3, [pc, #500]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a7c      	ldr	r2, [pc, #496]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006264:	4a7a      	ldr	r2, [pc, #488]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d115      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fc fb65 	bl	8002944 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800627c:	e00b      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627e:	f7fc fb61 	bl	8002944 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f241 3288 	movw	r2, #5000	; 0x1388
 800628c:	4293      	cmp	r3, r2
 800628e:	d902      	bls.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	75fb      	strb	r3, [r7, #23]
            break;
 8006294:	e005      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006296:	4b6e      	ldr	r3, [pc, #440]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ed      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d126      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b6:	d10d      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80062b8:	4b65      	ldr	r3, [pc, #404]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062c6:	0919      	lsrs	r1, r3, #4
 80062c8:	4b63      	ldr	r3, [pc, #396]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 80062ca:	400b      	ands	r3, r1
 80062cc:	4960      	ldr	r1, [pc, #384]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	610b      	str	r3, [r1, #16]
 80062d2:	e005      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80062d4:	4b5e      	ldr	r3, [pc, #376]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062de:	6113      	str	r3, [r2, #16]
 80062e0:	4b5b      	ldr	r3, [pc, #364]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ee:	4958      	ldr	r1, [pc, #352]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	670b      	str	r3, [r1, #112]	; 0x70
 80062f4:	e004      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	75bb      	strb	r3, [r7, #22]
 80062fa:	e001      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07e      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006310:	2b28      	cmp	r3, #40	; 0x28
 8006312:	d867      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	080063eb 	.word	0x080063eb
 8006320:	080063e5 	.word	0x080063e5
 8006324:	080063e5 	.word	0x080063e5
 8006328:	080063e5 	.word	0x080063e5
 800632c:	080063e5 	.word	0x080063e5
 8006330:	080063e5 	.word	0x080063e5
 8006334:	080063e5 	.word	0x080063e5
 8006338:	080063e5 	.word	0x080063e5
 800633c:	080063c1 	.word	0x080063c1
 8006340:	080063e5 	.word	0x080063e5
 8006344:	080063e5 	.word	0x080063e5
 8006348:	080063e5 	.word	0x080063e5
 800634c:	080063e5 	.word	0x080063e5
 8006350:	080063e5 	.word	0x080063e5
 8006354:	080063e5 	.word	0x080063e5
 8006358:	080063e5 	.word	0x080063e5
 800635c:	080063d3 	.word	0x080063d3
 8006360:	080063e5 	.word	0x080063e5
 8006364:	080063e5 	.word	0x080063e5
 8006368:	080063e5 	.word	0x080063e5
 800636c:	080063e5 	.word	0x080063e5
 8006370:	080063e5 	.word	0x080063e5
 8006374:	080063e5 	.word	0x080063e5
 8006378:	080063e5 	.word	0x080063e5
 800637c:	080063eb 	.word	0x080063eb
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080063e5 	.word	0x080063e5
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063e5 	.word	0x080063e5
 8006398:	080063e5 	.word	0x080063e5
 800639c:	080063eb 	.word	0x080063eb
 80063a0:	080063e5 	.word	0x080063e5
 80063a4:	080063e5 	.word	0x080063e5
 80063a8:	080063e5 	.word	0x080063e5
 80063ac:	080063e5 	.word	0x080063e5
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080063e5 	.word	0x080063e5
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	080063eb 	.word	0x080063eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	2101      	movs	r1, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fb3c 	bl	8006a44 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	2101      	movs	r1, #1
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fbe5 	bl	8006ba8 <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80063ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fe:	4914      	ldr	r1, [pc, #80]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006400:	4313      	orrs	r3, r2
 8006402:	654b      	str	r3, [r1, #84]	; 0x54
 8006404:	e001      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d03e      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641a:	2b05      	cmp	r3, #5
 800641c:	d827      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006475 	.word	0x08006475
 8006428:	0800643d 	.word	0x0800643d
 800642c:	0800645d 	.word	0x0800645d
 8006430:	08006475 	.word	0x08006475
 8006434:	08006475 	.word	0x08006475
 8006438:	08006475 	.word	0x08006475
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	2101      	movs	r1, #1
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fafe 	bl	8006a44 <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800644c:	e013      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
 8006454:	58024800 	.word	0x58024800
 8006458:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3324      	adds	r3, #36	; 0x24
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fba0 	bl	8006ba8 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
      break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800647c:	4b9f      	ldr	r3, [pc, #636]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	f023 0207 	bic.w	r2, r3, #7
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006488:	499c      	ldr	r1, [pc, #624]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800648a:	4313      	orrs	r3, r2
 800648c:	654b      	str	r3, [r1, #84]	; 0x54
 800648e:	e001      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d039      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	d820      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064f3 	.word	0x080064f3
 80064b4:	080064c9 	.word	0x080064c9
 80064b8:	080064db 	.word	0x080064db
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064f3 	.word	0x080064f3
 80064c4:	080064f3 	.word	0x080064f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fab8 	bl	8006a44 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064d8:	e00c      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fb61 	bl	8006ba8 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80064f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064fa:	4b80      	ldr	r3, [pc, #512]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	f023 0207 	bic.w	r2, r3, #7
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006508:	497c      	ldr	r1, [pc, #496]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800650a:	4313      	orrs	r3, r2
 800650c:	658b      	str	r3, [r1, #88]	; 0x58
 800650e:	e001      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d04b      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800652a:	d02e      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800652c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006530:	d828      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d02a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d822      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800653e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006542:	d026      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8006544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006548:	d81c      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654e:	d010      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006554:	d816      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01d      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800655a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655e:	d111      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	2100      	movs	r1, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fa6c 	bl	8006a44 <RCCEx_PLL2_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006570:	e012      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3324      	adds	r3, #36	; 0x24
 8006576:	2102      	movs	r1, #2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fb15 	bl	8006ba8 <RCCEx_PLL3_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006582:	e009      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
      break;
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800658a:	bf00      	nop
 800658c:	e004      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800659e:	4b57      	ldr	r3, [pc, #348]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	4953      	ldr	r1, [pc, #332]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	654b      	str	r3, [r1, #84]	; 0x54
 80065b2:	e001      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d04b      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ce:	d02e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80065d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065d4:	d828      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	d02a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xace>
 80065dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e0:	d822      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80065e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e6:	d026      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ec:	d81c      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f2:	d010      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d816      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01d      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xad6>
 80065fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006602:	d111      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa1a 	bl	8006a44 <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006614:	e012      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	; 0x24
 800661a:	2102      	movs	r1, #2
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fac3 	bl	8006ba8 <RCCEx_PLL3_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006626:	e009      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800663a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006650:	492a      	ldr	r1, [pc, #168]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006652:	4313      	orrs	r3, r2
 8006654:	658b      	str	r3, [r1, #88]	; 0x58
 8006656:	e001      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d04d      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800666e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006672:	d02e      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8006674:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006678:	d828      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667e:	d02a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006684:	d822      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800668a:	d026      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xb76>
 800668c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006690:	d81c      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006696:	d010      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669c:	d816      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01d      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d111      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f9c8 	bl	8006a44 <RCCEx_PLL2_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066b8:	e012      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3324      	adds	r3, #36	; 0x24
 80066be:	2102      	movs	r1, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fa71 	bl	8006ba8 <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066ca:	e009      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	75fb      	strb	r3, [r7, #23]
      break;
 80066d0:	e006      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80066d2:	bf00      	nop
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80066de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066f4:	4901      	ldr	r1, [pc, #4]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	658b      	str	r3, [r1, #88]	; 0x58
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80066fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	d10a      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	2102      	movs	r1, #2
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fa40 	bl	8006ba8 <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006732:	4b8c      	ldr	r3, [pc, #560]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006740:	4988      	ldr	r1, [pc, #544]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006742:	4313      	orrs	r3, r2
 8006744:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675c:	d10a      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3324      	adds	r3, #36	; 0x24
 8006762:	2102      	movs	r1, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fa1f 	bl	8006ba8 <RCCEx_PLL3_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006774:	4b7b      	ldr	r3, [pc, #492]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006782:	4978      	ldr	r1, [pc, #480]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006784:	4313      	orrs	r3, r2
 8006786:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d034      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800679a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800679e:	d01d      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80067a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a4:	d817      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80067aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ae:	d009      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80067b0:	e011      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f943 	bl	8006a44 <RCCEx_PLL2_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067c2:	e00c      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3324      	adds	r3, #36	; 0x24
 80067c8:	2102      	movs	r1, #2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f9ec 	bl	8006ba8 <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
      break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80067dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067e4:	4b5f      	ldr	r3, [pc, #380]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067f2:	495c      	ldr	r1, [pc, #368]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	658b      	str	r3, [r1, #88]	; 0x58
 80067f8:	e001      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d033      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006814:	d01c      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8006816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800681a:	d816      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xce6>
 800681c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006820:	d003      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006826:	d007      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8006828:	e00f      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800682a:	4b4e      	ldr	r3, [pc, #312]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4a4d      	ldr	r2, [pc, #308]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006836:	e00c      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3324      	adds	r3, #36	; 0x24
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f9b2 	bl	8006ba8 <RCCEx_PLL3_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006848:	e003      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
      break;
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8006850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006858:	4b42      	ldr	r3, [pc, #264]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	493f      	ldr	r1, [pc, #252]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006868:	4313      	orrs	r3, r2
 800686a:	654b      	str	r3, [r1, #84]	; 0x54
 800686c:	e001      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d029      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d007      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800688c:	e00f      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688e:	4b35      	ldr	r3, [pc, #212]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	4a34      	ldr	r2, [pc, #208]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800689a:	e00b      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	2102      	movs	r1, #2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f8ce 	bl	8006a44 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
      break;
 80068b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068ba:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c6:	4927      	ldr	r1, [pc, #156]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068cc:	e001      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	2102      	movs	r1, #2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f95f 	bl	8006ba8 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d035      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690a:	d017      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800690c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006910:	d811      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006916:	d013      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8006918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691c:	d80b      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d010      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8006922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006926:	d106      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006928:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800692e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006934:	e007      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
      break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	4902      	ldr	r1, [pc, #8]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800695c:	4313      	orrs	r3, r2
 800695e:	654b      	str	r3, [r1, #84]	; 0x54
 8006960:	e004      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006978:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006984:	492e      	ldr	r1, [pc, #184]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006986:	4313      	orrs	r3, r2
 8006988:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069a4:	4926      	ldr	r1, [pc, #152]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069b6:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c2:	491f      	ldr	r1, [pc, #124]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069de:	6113      	str	r3, [r2, #16]
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069ea:	4915      	ldr	r1, [pc, #84]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	da08      	bge.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80069fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	490e      	ldr	r1, [pc, #56]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a24:	4906      	ldr	r1, [pc, #24]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a2a:	7dbb      	ldrb	r3, [r7, #22]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400

08006a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a52:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d101      	bne.n	8006a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e099      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a62:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6e:	f7fb ff69 	bl	8002944 <HAL_GetTick>
 8006a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a76:	f7fb ff65 	bl	8002944 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e086      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a88:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	031b      	lsls	r3, r3, #12
 8006aa2:	493f      	ldr	r1, [pc, #252]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	025b      	lsls	r3, r3, #9
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ad8:	4931      	ldr	r1, [pc, #196]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	492d      	ldr	r1, [pc, #180]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006af0:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f023 0220 	bic.w	r2, r3, #32
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	4928      	ldr	r1, [pc, #160]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <RCCEx_PLL2_Config+0x160>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	69d2      	ldr	r2, [r2, #28]
 8006b1a:	00d2      	lsls	r2, r2, #3
 8006b1c:	4920      	ldr	r1, [pc, #128]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	f043 0310 	orr.w	r3, r3, #16
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b40:	e00f      	b.n	8006b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d106      	bne.n	8006b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b54:	e005      	b.n	8006b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b6e:	f7fb fee9 	bl	8002944 <HAL_GetTick>
 8006b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b74:	e008      	b.n	8006b88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b76:	f7fb fee5 	bl	8002944 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	ffff0007 	.word	0xffff0007

08006ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bb6:	4b53      	ldr	r3, [pc, #332]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d101      	bne.n	8006bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e099      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006bc6:	4b4f      	ldr	r3, [pc, #316]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a4e      	ldr	r2, [pc, #312]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd2:	f7fb feb7 	bl	8002944 <HAL_GetTick>
 8006bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bd8:	e008      	b.n	8006bec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006bda:	f7fb feb3 	bl	8002944 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e086      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bec:	4b45      	ldr	r3, [pc, #276]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f0      	bne.n	8006bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bf8:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	051b      	lsls	r3, r3, #20
 8006c06:	493f      	ldr	r1, [pc, #252]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	025b      	lsls	r3, r3, #9
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c3c:	4931      	ldr	r1, [pc, #196]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c42:	4b30      	ldr	r3, [pc, #192]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	492d      	ldr	r1, [pc, #180]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c54:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	4928      	ldr	r1, [pc, #160]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <RCCEx_PLL3_Config+0x160>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	69d2      	ldr	r2, [r2, #28]
 8006c7e:	00d2      	lsls	r2, r2, #3
 8006c80:	4920      	ldr	r1, [pc, #128]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c86:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4a19      	ldr	r2, [pc, #100]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ca4:	e00f      	b.n	8006cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006cac:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cb8:	e005      	b.n	8006cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cba:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd2:	f7fb fe37 	bl	8002944 <HAL_GetTick>
 8006cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cd8:	e008      	b.n	8006cec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cda:	f7fb fe33 	bl	8002944 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
 8006d08:	ffff0007 	.word	0xffff0007

08006d0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02b      	b.n	8006d78 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f825 	bl	8006d84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f000 f881 	bl	8006e54 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	f000 f8d5 	bl	8006f0c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <HAL_SDRAM_Init+0x74>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a06      	ldr	r2, [pc, #24]	; (8006d80 <HAL_SDRAM_Init+0x74>)
 8006d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d6c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	52004000 	.word	0x52004000

08006d84 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006daa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d101      	bne.n	8006db6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006db2:	2302      	movs	r3, #2
 8006db4:	e021      	b.n	8006dfa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d002      	beq.n	8006dc2 <HAL_SDRAM_SendCommand+0x2a>
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d118      	bne.n	8006df4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f904 	bl	8006fe0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d104      	bne.n	8006dea <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2205      	movs	r2, #5
 8006de4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006de8:	e006      	b.n	8006df8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006df2:	e001      	b.n	8006df8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d101      	bne.n	8006e1c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e016      	b.n	8006e4a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d10f      	bne.n	8006e48 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f8f6 	bl	8007028 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d121      	bne.n	8006eaa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <FMC_SDRAM_Init+0xb4>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	6851      	ldr	r1, [r2, #4]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	6892      	ldr	r2, [r2, #8]
 8006e76:	4311      	orrs	r1, r2
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	68d2      	ldr	r2, [r2, #12]
 8006e7c:	4311      	orrs	r1, r2
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	6912      	ldr	r2, [r2, #16]
 8006e82:	4311      	orrs	r1, r2
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	6952      	ldr	r2, [r2, #20]
 8006e88:	4311      	orrs	r1, r2
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	6992      	ldr	r2, [r2, #24]
 8006e8e:	4311      	orrs	r1, r2
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	69d2      	ldr	r2, [r2, #28]
 8006e94:	4311      	orrs	r1, r2
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	6a12      	ldr	r2, [r2, #32]
 8006e9a:	4311      	orrs	r1, r2
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e026      	b.n	8006ef8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	69d9      	ldr	r1, [r3, #28]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	4319      	orrs	r1, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <FMC_SDRAM_Init+0xb4>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	6851      	ldr	r1, [r2, #4]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	6892      	ldr	r2, [r2, #8]
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	68d2      	ldr	r2, [r2, #12]
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	6912      	ldr	r2, [r2, #16]
 8006ee4:	4311      	orrs	r1, r2
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	6952      	ldr	r2, [r2, #20]
 8006eea:	4311      	orrs	r1, r2
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	6992      	ldr	r2, [r2, #24]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	ffff8000 	.word	0xffff8000

08006f0c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d128      	bne.n	8006f70 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	1e59      	subs	r1, r3, #1
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	4319      	orrs	r1, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	4319      	orrs	r1, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	4319      	orrs	r1, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	4319      	orrs	r1, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	051b      	lsls	r3, r3, #20
 8006f5c:	4319      	orrs	r1, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	061b      	lsls	r3, r3, #24
 8006f66:	430b      	orrs	r3, r1
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	609a      	str	r2, [r3, #8]
 8006f6e:	e02d      	b.n	8006fcc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <FMC_SDRAM_Timing_Init+0xd0>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68d2      	ldr	r2, [r2, #12]
 8006f7c:	3a01      	subs	r2, #1
 8006f7e:	0311      	lsls	r1, r2, #12
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	6952      	ldr	r2, [r2, #20]
 8006f84:	3a01      	subs	r2, #1
 8006f86:	0512      	lsls	r2, r2, #20
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	1e59      	subs	r1, r3, #1
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	4319      	orrs	r1, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	4319      	orrs	r1, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	4319      	orrs	r1, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	ff0f0fff 	.word	0xff0f0fff

08006fe0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <FMC_SDRAM_SendCommand+0x44>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	6811      	ldr	r1, [r2, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	6852      	ldr	r2, [r2, #4]
 8006ffc:	4311      	orrs	r1, r2
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	6892      	ldr	r2, [r2, #8]
 8007002:	3a01      	subs	r2, #1
 8007004:	0152      	lsls	r2, r2, #5
 8007006:	4311      	orrs	r1, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	68d2      	ldr	r2, [r2, #12]
 800700c:	0252      	lsls	r2, r2, #9
 800700e:	430a      	orrs	r2, r1
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	ffc00000 	.word	0xffc00000

08007028 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007038:	4013      	ands	r3, r2
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	0052      	lsls	r2, r2, #1
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	ffffc001 	.word	0xffffc001

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4d0d      	ldr	r5, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1b64      	subs	r4, r4, r5
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2600      	movs	r6, #0
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4d0b      	ldr	r5, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f000 f820 	bl	80070b0 <_init>
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2600      	movs	r6, #0
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f855 3b04 	ldr.w	r3, [r5], #4
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	08007244 	.word	0x08007244
 8007094:	08007244 	.word	0x08007244
 8007098:	08007244 	.word	0x08007244
 800709c:	08007248 	.word	0x08007248

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
