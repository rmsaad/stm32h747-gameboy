
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a20c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d68  0800a4a4  0800a4a4  0001a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801420c  0801420c  0003107c  2**0
                  CONTENTS
  4 .ARM          00000000  0801420c  0801420c  0003107c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801420c  0801420c  0003107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801420c  0801420c  0002420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014210  08014210  00024210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000107c  24000000  08014214  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010990  24001080  08015290  00031080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24011a10  08015290  00031a10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000cbf74  00000000  00000000  000310aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007414  00000000  00000000  000fd01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b661  00000000  00000000  00104432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025e8  00000000  00000000  0011fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004968  00000000  00000000  00122080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048a4b  00000000  00000000  001269e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003232d  00000000  00000000  0016f433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c8c25  00000000  00000000  001a1760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0036a385  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fd4  00000000  00000000  0036a3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001080 	.word	0x24001080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a48c 	.word	0x0800a48c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24001084 	.word	0x24001084
 80002d4:	0800a48c 	.word	0x0800a48c

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <gbMBCsetControllerType>:
uint8_t ucgbMBCbankMode = 0x0;

extern const unsigned char* rom;

void gbMBCsetControllerType(uint8_t code){
	ucgbMBCcontrollerCode = code;
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <gbMBCsetControllerType+0x8>)
 80003c2:	7018      	strb	r0, [r3, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	2400109d 	.word	0x2400109d

080003cc <gbMBCreadBankX>:

uint8_t gbMBCreadBankX(uint16_t address){
	if(address < CARTROM_BANKX){
 80003cc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80003d0:	d302      	bcc.n	80003d8 <gbMBCreadBankX+0xc>
		return (uint8_t) rom[address];
	}else if(ucgbMBCcontrollerCode == 0){
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <gbMBCreadBankX+0x2c>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b91b      	cbnz	r3, 80003e0 <gbMBCreadBankX+0x14>
		return (uint8_t) rom[address];
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <gbMBCreadBankX+0x30>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	5c18      	ldrb	r0, [r3, r0]
 80003de:	4770      	bx	lr
	}else{
		return (uint8_t) rom[((ucgbMBCoffsetHigh + ucgbMBCoffsetLow - 1) * 0x4000) + (address)];
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <gbMBCreadBankX+0x34>)
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <gbMBCreadBankX+0x38>)
 80003e4:	7811      	ldrb	r1, [r2, #0]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <gbMBCreadBankX+0x30>)
 80003ea:	440b      	add	r3, r1
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	eb02 3383 	add.w	r3, r2, r3, lsl #14
 80003f4:	5c18      	ldrb	r0, [r3, r0]
	}
}
 80003f6:	4770      	bx	lr
 80003f8:	2400109d 	.word	0x2400109d
 80003fc:	24001018 	.word	0x24001018
 8000400:	24000008 	.word	0x24000008
 8000404:	2400109e 	.word	0x2400109e

08000408 <gbMBCwrite>:

void gbMBCwrite(uint16_t address, uint8_t data){
	if(ucgbMBCcontrollerCode > 0){
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <gbMBCwrite+0x54>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b173      	cbz	r3, 800042c <gbMBCwrite+0x24>
		if(address < 0x2000){
 800040e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000412:	d20c      	bcs.n	800042e <gbMBCwrite+0x26>
			if((data & 0x0A) == 0x0A){
 8000414:	f001 010a 	and.w	r1, r1, #10
				ucgbMBCramEN = 1;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <gbMBCwrite+0x58>)
			if((data & 0x0A) == 0x0A){
 800041a:	290a      	cmp	r1, #10
 800041c:	d01b      	beq.n	8000456 <gbMBCwrite+0x4e>
			}else{
				ucgbMBCramEN = 0;
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	4770      	bx	lr
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
			}else{

			}
		}else{
			ucgbMBCbankMode = (data & 0x01);
 8000424:	f001 0101 	and.w	r1, r1, #1
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <gbMBCwrite+0x5c>)
 800042a:	7019      	strb	r1, [r3, #0]
		}
	}
}
 800042c:	4770      	bx	lr
		}else if(address < 0x4000){
 800042e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000432:	d30c      	bcc.n	800044e <gbMBCwrite+0x46>
		}else if(address < 0x6000){
 8000434:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 8000438:	d2f4      	bcs.n	8000424 <gbMBCwrite+0x1c>
			if(ucgbMBCbankMode == 0){
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <gbMBCwrite+0x5c>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1f4      	bne.n	800042c <gbMBCwrite+0x24>
				ucgbMBCoffsetHigh = ((data & 0x03) << 5);
 8000442:	0149      	lsls	r1, r1, #5
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <gbMBCwrite+0x60>)
 8000446:	f001 0160 	and.w	r1, r1, #96	; 0x60
 800044a:	7019      	strb	r1, [r3, #0]
 800044c:	4770      	bx	lr
			if(ucgbMBCoffsetLow == 0){
 800044e:	f011 011f 	ands.w	r1, r1, #31
				ucgbMBCoffsetLow = 1;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <gbMBCwrite+0x64>)
			if(ucgbMBCoffsetLow == 0){
 8000454:	d1e9      	bne.n	800042a <gbMBCwrite+0x22>
				ucgbMBCoffsetLow = 1;
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	4770      	bx	lr
 800045c:	2400109d 	.word	0x2400109d
 8000460:	2400109f 	.word	0x2400109f
 8000464:	2400109c 	.word	0x2400109c
 8000468:	2400109e 	.word	0x2400109e
 800046c:	24000008 	.word	0x24000008

08000470 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 8000474:	4a02      	ldr	r2, [pc, #8]	; (8000480 <vINCs_BC+0xc>)
 8000476:	8853      	ldrh	r3, [r2, #2]
 8000478:	3301      	adds	r3, #1
 800047a:	8053      	strh	r3, [r2, #2]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	2400166c 	.word	0x2400166c

08000484 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 8000484:	4a02      	ldr	r2, [pc, #8]	; (8000490 <vDECs_BC+0xc>)
 8000486:	8853      	ldrh	r3, [r2, #2]
 8000488:	3b01      	subs	r3, #1
 800048a:	8053      	strh	r3, [r2, #2]
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	2400166c 	.word	0x2400166c

08000494 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <vSTOP+0x8>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	4770      	bx	lr
 800049c:	240010ad 	.word	0x240010ad

080004a0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <vINCs_DE+0xc>)
 80004a2:	8893      	ldrh	r3, [r2, #4]
 80004a4:	3301      	adds	r3, #1
 80004a6:	8093      	strh	r3, [r2, #4]
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	2400166c 	.word	0x2400166c

080004b0 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 80004b0:	4a02      	ldr	r2, [pc, #8]	; (80004bc <vDECs_DE+0xc>)
 80004b2:	8893      	ldrh	r3, [r2, #4]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	8093      	strh	r3, [r2, #4]
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	2400166c 	.word	0x2400166c

080004c0 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 80004c0:	4a02      	ldr	r2, [pc, #8]	; (80004cc <vINCs_HL+0xc>)
 80004c2:	88d3      	ldrh	r3, [r2, #6]
 80004c4:	3301      	adds	r3, #1
 80004c6:	80d3      	strh	r3, [r2, #6]
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2400166c 	.word	0x2400166c

080004d0 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 80004d0:	4a02      	ldr	r2, [pc, #8]	; (80004dc <vDECs_HL+0xc>)
 80004d2:	88d3      	ldrh	r3, [r2, #6]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	80d3      	strh	r3, [r2, #6]
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	2400166c 	.word	0x2400166c

080004e0 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <vINCs_SP+0xc>)
 80004e2:	8913      	ldrh	r3, [r2, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	8113      	strh	r3, [r2, #8]
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2400166c 	.word	0x2400166c

080004f0 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004f0:	4a02      	ldr	r2, [pc, #8]	; (80004fc <vDECs_SP+0xc>)
 80004f2:	8913      	ldrh	r3, [r2, #8]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	8113      	strh	r3, [r2, #8]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2400166c 	.word	0x2400166c

08000500 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <vLD_B_C+0x8>)
 8000502:	789a      	ldrb	r2, [r3, #2]
 8000504:	70da      	strb	r2, [r3, #3]
 8000506:	4770      	bx	lr
 8000508:	2400166c 	.word	0x2400166c

0800050c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800050c:	4b01      	ldr	r3, [pc, #4]	; (8000514 <vLD_B_D+0x8>)
 800050e:	795a      	ldrb	r2, [r3, #5]
 8000510:	70da      	strb	r2, [r3, #3]
 8000512:	4770      	bx	lr
 8000514:	2400166c 	.word	0x2400166c

08000518 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <vLD_B_E+0x8>)
 800051a:	791a      	ldrb	r2, [r3, #4]
 800051c:	70da      	strb	r2, [r3, #3]
 800051e:	4770      	bx	lr
 8000520:	2400166c 	.word	0x2400166c

08000524 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000524:	4b01      	ldr	r3, [pc, #4]	; (800052c <vLD_B_H+0x8>)
 8000526:	79da      	ldrb	r2, [r3, #7]
 8000528:	70da      	strb	r2, [r3, #3]
 800052a:	4770      	bx	lr
 800052c:	2400166c 	.word	0x2400166c

08000530 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <vLD_B_L+0x8>)
 8000532:	799a      	ldrb	r2, [r3, #6]
 8000534:	70da      	strb	r2, [r3, #3]
 8000536:	4770      	bx	lr
 8000538:	2400166c 	.word	0x2400166c

0800053c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <vLD_B_A+0x8>)
 800053e:	785a      	ldrb	r2, [r3, #1]
 8000540:	70da      	strb	r2, [r3, #3]
 8000542:	4770      	bx	lr
 8000544:	2400166c 	.word	0x2400166c

08000548 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000548:	4b01      	ldr	r3, [pc, #4]	; (8000550 <vLD_C_B+0x8>)
 800054a:	78da      	ldrb	r2, [r3, #3]
 800054c:	709a      	strb	r2, [r3, #2]
 800054e:	4770      	bx	lr
 8000550:	2400166c 	.word	0x2400166c

08000554 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <vLD_C_D+0x8>)
 8000556:	795a      	ldrb	r2, [r3, #5]
 8000558:	709a      	strb	r2, [r3, #2]
 800055a:	4770      	bx	lr
 800055c:	2400166c 	.word	0x2400166c

08000560 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 8000560:	4b01      	ldr	r3, [pc, #4]	; (8000568 <vLD_C_E+0x8>)
 8000562:	791a      	ldrb	r2, [r3, #4]
 8000564:	709a      	strb	r2, [r3, #2]
 8000566:	4770      	bx	lr
 8000568:	2400166c 	.word	0x2400166c

0800056c <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <vLD_C_H+0x8>)
 800056e:	79da      	ldrb	r2, [r3, #7]
 8000570:	709a      	strb	r2, [r3, #2]
 8000572:	4770      	bx	lr
 8000574:	2400166c 	.word	0x2400166c

08000578 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <vLD_C_L+0x8>)
 800057a:	799a      	ldrb	r2, [r3, #6]
 800057c:	709a      	strb	r2, [r3, #2]
 800057e:	4770      	bx	lr
 8000580:	2400166c 	.word	0x2400166c

08000584 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <vLD_C_A+0x8>)
 8000586:	785a      	ldrb	r2, [r3, #1]
 8000588:	709a      	strb	r2, [r3, #2]
 800058a:	4770      	bx	lr
 800058c:	2400166c 	.word	0x2400166c

08000590 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <vLD_D_B+0x8>)
 8000592:	78da      	ldrb	r2, [r3, #3]
 8000594:	715a      	strb	r2, [r3, #5]
 8000596:	4770      	bx	lr
 8000598:	2400166c 	.word	0x2400166c

0800059c <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <vLD_D_C+0x8>)
 800059e:	789a      	ldrb	r2, [r3, #2]
 80005a0:	715a      	strb	r2, [r3, #5]
 80005a2:	4770      	bx	lr
 80005a4:	2400166c 	.word	0x2400166c

080005a8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <vLD_D_E+0x8>)
 80005aa:	791a      	ldrb	r2, [r3, #4]
 80005ac:	715a      	strb	r2, [r3, #5]
 80005ae:	4770      	bx	lr
 80005b0:	2400166c 	.word	0x2400166c

080005b4 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <vLD_D_H+0x8>)
 80005b6:	79da      	ldrb	r2, [r3, #7]
 80005b8:	715a      	strb	r2, [r3, #5]
 80005ba:	4770      	bx	lr
 80005bc:	2400166c 	.word	0x2400166c

080005c0 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <vLD_D_L+0x8>)
 80005c2:	799a      	ldrb	r2, [r3, #6]
 80005c4:	715a      	strb	r2, [r3, #5]
 80005c6:	4770      	bx	lr
 80005c8:	2400166c 	.word	0x2400166c

080005cc <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <vLD_D_A+0x8>)
 80005ce:	785a      	ldrb	r2, [r3, #1]
 80005d0:	715a      	strb	r2, [r3, #5]
 80005d2:	4770      	bx	lr
 80005d4:	2400166c 	.word	0x2400166c

080005d8 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <vLD_E_B+0x8>)
 80005da:	78da      	ldrb	r2, [r3, #3]
 80005dc:	711a      	strb	r2, [r3, #4]
 80005de:	4770      	bx	lr
 80005e0:	2400166c 	.word	0x2400166c

080005e4 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <vLD_E_C+0x8>)
 80005e6:	789a      	ldrb	r2, [r3, #2]
 80005e8:	711a      	strb	r2, [r3, #4]
 80005ea:	4770      	bx	lr
 80005ec:	2400166c 	.word	0x2400166c

080005f0 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <vLD_E_D+0x8>)
 80005f2:	795a      	ldrb	r2, [r3, #5]
 80005f4:	711a      	strb	r2, [r3, #4]
 80005f6:	4770      	bx	lr
 80005f8:	2400166c 	.word	0x2400166c

080005fc <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <vLD_E_H+0x8>)
 80005fe:	79da      	ldrb	r2, [r3, #7]
 8000600:	711a      	strb	r2, [r3, #4]
 8000602:	4770      	bx	lr
 8000604:	2400166c 	.word	0x2400166c

08000608 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000608:	4b01      	ldr	r3, [pc, #4]	; (8000610 <vLD_E_L+0x8>)
 800060a:	799a      	ldrb	r2, [r3, #6]
 800060c:	711a      	strb	r2, [r3, #4]
 800060e:	4770      	bx	lr
 8000610:	2400166c 	.word	0x2400166c

08000614 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <vLD_E_A+0x8>)
 8000616:	785a      	ldrb	r2, [r3, #1]
 8000618:	711a      	strb	r2, [r3, #4]
 800061a:	4770      	bx	lr
 800061c:	2400166c 	.word	0x2400166c

08000620 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <vLD_H_B+0x8>)
 8000622:	78da      	ldrb	r2, [r3, #3]
 8000624:	71da      	strb	r2, [r3, #7]
 8000626:	4770      	bx	lr
 8000628:	2400166c 	.word	0x2400166c

0800062c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <vLD_H_C+0x8>)
 800062e:	789a      	ldrb	r2, [r3, #2]
 8000630:	71da      	strb	r2, [r3, #7]
 8000632:	4770      	bx	lr
 8000634:	2400166c 	.word	0x2400166c

08000638 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <vLD_H_D+0x8>)
 800063a:	795a      	ldrb	r2, [r3, #5]
 800063c:	71da      	strb	r2, [r3, #7]
 800063e:	4770      	bx	lr
 8000640:	2400166c 	.word	0x2400166c

08000644 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <vLD_H_E+0x8>)
 8000646:	791a      	ldrb	r2, [r3, #4]
 8000648:	71da      	strb	r2, [r3, #7]
 800064a:	4770      	bx	lr
 800064c:	2400166c 	.word	0x2400166c

08000650 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <vLD_H_L+0x8>)
 8000652:	799a      	ldrb	r2, [r3, #6]
 8000654:	71da      	strb	r2, [r3, #7]
 8000656:	4770      	bx	lr
 8000658:	2400166c 	.word	0x2400166c

0800065c <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 800065c:	4b01      	ldr	r3, [pc, #4]	; (8000664 <vLD_H_A+0x8>)
 800065e:	785a      	ldrb	r2, [r3, #1]
 8000660:	71da      	strb	r2, [r3, #7]
 8000662:	4770      	bx	lr
 8000664:	2400166c 	.word	0x2400166c

08000668 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <vLD_L_B+0x8>)
 800066a:	78da      	ldrb	r2, [r3, #3]
 800066c:	719a      	strb	r2, [r3, #6]
 800066e:	4770      	bx	lr
 8000670:	2400166c 	.word	0x2400166c

08000674 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <vLD_L_C+0x8>)
 8000676:	789a      	ldrb	r2, [r3, #2]
 8000678:	719a      	strb	r2, [r3, #6]
 800067a:	4770      	bx	lr
 800067c:	2400166c 	.word	0x2400166c

08000680 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <vLD_L_D+0x8>)
 8000682:	795a      	ldrb	r2, [r3, #5]
 8000684:	719a      	strb	r2, [r3, #6]
 8000686:	4770      	bx	lr
 8000688:	2400166c 	.word	0x2400166c

0800068c <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <vLD_L_E+0x8>)
 800068e:	791a      	ldrb	r2, [r3, #4]
 8000690:	719a      	strb	r2, [r3, #6]
 8000692:	4770      	bx	lr
 8000694:	2400166c 	.word	0x2400166c

08000698 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <vLD_L_H+0x8>)
 800069a:	79da      	ldrb	r2, [r3, #7]
 800069c:	719a      	strb	r2, [r3, #6]
 800069e:	4770      	bx	lr
 80006a0:	2400166c 	.word	0x2400166c

080006a4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <vLD_L_A+0x8>)
 80006a6:	785a      	ldrb	r2, [r3, #1]
 80006a8:	719a      	strb	r2, [r3, #6]
 80006aa:	4770      	bx	lr
 80006ac:	2400166c 	.word	0x2400166c

080006b0 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <vHALT+0x8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	4770      	bx	lr
 80006b8:	240010aa 	.word	0x240010aa

080006bc <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <vLD_A_B+0x8>)
 80006be:	78da      	ldrb	r2, [r3, #3]
 80006c0:	705a      	strb	r2, [r3, #1]
 80006c2:	4770      	bx	lr
 80006c4:	2400166c 	.word	0x2400166c

080006c8 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <vLD_A_C+0x8>)
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	705a      	strb	r2, [r3, #1]
 80006ce:	4770      	bx	lr
 80006d0:	2400166c 	.word	0x2400166c

080006d4 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <vLD_A_D+0x8>)
 80006d6:	795a      	ldrb	r2, [r3, #5]
 80006d8:	705a      	strb	r2, [r3, #1]
 80006da:	4770      	bx	lr
 80006dc:	2400166c 	.word	0x2400166c

080006e0 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <vLD_A_E+0x8>)
 80006e2:	791a      	ldrb	r2, [r3, #4]
 80006e4:	705a      	strb	r2, [r3, #1]
 80006e6:	4770      	bx	lr
 80006e8:	2400166c 	.word	0x2400166c

080006ec <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <vLD_A_H+0x8>)
 80006ee:	79da      	ldrb	r2, [r3, #7]
 80006f0:	705a      	strb	r2, [r3, #1]
 80006f2:	4770      	bx	lr
 80006f4:	2400166c 	.word	0x2400166c

080006f8 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <vLD_A_L+0x8>)
 80006fa:	799a      	ldrb	r2, [r3, #6]
 80006fc:	705a      	strb	r2, [r3, #1]
 80006fe:	4770      	bx	lr
 8000700:	2400166c 	.word	0x2400166c

08000704 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <vAND_B+0x18>)
 8000706:	785a      	ldrb	r2, [r3, #1]
 8000708:	78d9      	ldrb	r1, [r3, #3]
 800070a:	400a      	ands	r2, r1
 800070c:	2a00      	cmp	r2, #0
 800070e:	705a      	strb	r2, [r3, #1]
 8000710:	bf0c      	ite	eq
 8000712:	22a0      	moveq	r2, #160	; 0xa0
 8000714:	2220      	movne	r2, #32
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	2400166c 	.word	0x2400166c

08000720 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <vAND_C+0x18>)
 8000722:	785a      	ldrb	r2, [r3, #1]
 8000724:	7899      	ldrb	r1, [r3, #2]
 8000726:	400a      	ands	r2, r1
 8000728:	2a00      	cmp	r2, #0
 800072a:	705a      	strb	r2, [r3, #1]
 800072c:	bf0c      	ite	eq
 800072e:	22a0      	moveq	r2, #160	; 0xa0
 8000730:	2220      	movne	r2, #32
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2400166c 	.word	0x2400166c

0800073c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <vAND_D+0x18>)
 800073e:	785a      	ldrb	r2, [r3, #1]
 8000740:	7959      	ldrb	r1, [r3, #5]
 8000742:	400a      	ands	r2, r1
 8000744:	2a00      	cmp	r2, #0
 8000746:	705a      	strb	r2, [r3, #1]
 8000748:	bf0c      	ite	eq
 800074a:	22a0      	moveq	r2, #160	; 0xa0
 800074c:	2220      	movne	r2, #32
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	2400166c 	.word	0x2400166c

08000758 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <vAND_E+0x18>)
 800075a:	785a      	ldrb	r2, [r3, #1]
 800075c:	7919      	ldrb	r1, [r3, #4]
 800075e:	400a      	ands	r2, r1
 8000760:	2a00      	cmp	r2, #0
 8000762:	705a      	strb	r2, [r3, #1]
 8000764:	bf0c      	ite	eq
 8000766:	22a0      	moveq	r2, #160	; 0xa0
 8000768:	2220      	movne	r2, #32
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	2400166c 	.word	0x2400166c

08000774 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <vAND_H+0x18>)
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	79d9      	ldrb	r1, [r3, #7]
 800077a:	400a      	ands	r2, r1
 800077c:	2a00      	cmp	r2, #0
 800077e:	705a      	strb	r2, [r3, #1]
 8000780:	bf0c      	ite	eq
 8000782:	22a0      	moveq	r2, #160	; 0xa0
 8000784:	2220      	movne	r2, #32
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2400166c 	.word	0x2400166c

08000790 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <vAND_L+0x18>)
 8000792:	785a      	ldrb	r2, [r3, #1]
 8000794:	7999      	ldrb	r1, [r3, #6]
 8000796:	400a      	ands	r2, r1
 8000798:	2a00      	cmp	r2, #0
 800079a:	705a      	strb	r2, [r3, #1]
 800079c:	bf0c      	ite	eq
 800079e:	22a0      	moveq	r2, #160	; 0xa0
 80007a0:	2220      	movne	r2, #32
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2400166c 	.word	0x2400166c

080007ac <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <vAND_A+0x10>)
 80007ae:	785a      	ldrb	r2, [r3, #1]
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	bf0c      	ite	eq
 80007b4:	22a0      	moveq	r2, #160	; 0xa0
 80007b6:	2220      	movne	r2, #32
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	4770      	bx	lr
 80007bc:	2400166c 	.word	0x2400166c

080007c0 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <vXOR_B+0x18>)
 80007c2:	785a      	ldrb	r2, [r3, #1]
 80007c4:	78d9      	ldrb	r1, [r3, #3]
 80007c6:	ea82 0001 	eor.w	r0, r2, r1
 80007ca:	428a      	cmp	r2, r1
 80007cc:	bf0c      	ite	eq
 80007ce:	2280      	moveq	r2, #128	; 0x80
 80007d0:	2200      	movne	r2, #0
 80007d2:	7058      	strb	r0, [r3, #1]
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	4770      	bx	lr
 80007d8:	2400166c 	.word	0x2400166c

080007dc <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <vXOR_C+0x18>)
 80007de:	785a      	ldrb	r2, [r3, #1]
 80007e0:	7899      	ldrb	r1, [r3, #2]
 80007e2:	ea82 0001 	eor.w	r0, r2, r1
 80007e6:	428a      	cmp	r2, r1
 80007e8:	bf0c      	ite	eq
 80007ea:	2280      	moveq	r2, #128	; 0x80
 80007ec:	2200      	movne	r2, #0
 80007ee:	7058      	strb	r0, [r3, #1]
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	4770      	bx	lr
 80007f4:	2400166c 	.word	0x2400166c

080007f8 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <vXOR_D+0x18>)
 80007fa:	785a      	ldrb	r2, [r3, #1]
 80007fc:	7959      	ldrb	r1, [r3, #5]
 80007fe:	ea82 0001 	eor.w	r0, r2, r1
 8000802:	428a      	cmp	r2, r1
 8000804:	bf0c      	ite	eq
 8000806:	2280      	moveq	r2, #128	; 0x80
 8000808:	2200      	movne	r2, #0
 800080a:	7058      	strb	r0, [r3, #1]
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	4770      	bx	lr
 8000810:	2400166c 	.word	0x2400166c

08000814 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <vXOR_E+0x18>)
 8000816:	785a      	ldrb	r2, [r3, #1]
 8000818:	7919      	ldrb	r1, [r3, #4]
 800081a:	ea82 0001 	eor.w	r0, r2, r1
 800081e:	428a      	cmp	r2, r1
 8000820:	bf0c      	ite	eq
 8000822:	2280      	moveq	r2, #128	; 0x80
 8000824:	2200      	movne	r2, #0
 8000826:	7058      	strb	r0, [r3, #1]
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	4770      	bx	lr
 800082c:	2400166c 	.word	0x2400166c

08000830 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <vXOR_H+0x18>)
 8000832:	785a      	ldrb	r2, [r3, #1]
 8000834:	79d9      	ldrb	r1, [r3, #7]
 8000836:	ea82 0001 	eor.w	r0, r2, r1
 800083a:	428a      	cmp	r2, r1
 800083c:	bf0c      	ite	eq
 800083e:	2280      	moveq	r2, #128	; 0x80
 8000840:	2200      	movne	r2, #0
 8000842:	7058      	strb	r0, [r3, #1]
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	4770      	bx	lr
 8000848:	2400166c 	.word	0x2400166c

0800084c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <vXOR_L+0x18>)
 800084e:	785a      	ldrb	r2, [r3, #1]
 8000850:	7999      	ldrb	r1, [r3, #6]
 8000852:	ea82 0001 	eor.w	r0, r2, r1
 8000856:	428a      	cmp	r2, r1
 8000858:	bf0c      	ite	eq
 800085a:	2280      	moveq	r2, #128	; 0x80
 800085c:	2200      	movne	r2, #0
 800085e:	7058      	strb	r0, [r3, #1]
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	4770      	bx	lr
 8000864:	2400166c 	.word	0x2400166c

08000868 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000868:	4b01      	ldr	r3, [pc, #4]	; (8000870 <vXOR_A+0x8>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	801a      	strh	r2, [r3, #0]
 800086e:	4770      	bx	lr
 8000870:	2400166c 	.word	0x2400166c

08000874 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <vOR_B+0x18>)
 8000876:	785a      	ldrb	r2, [r3, #1]
 8000878:	78d9      	ldrb	r1, [r3, #3]
 800087a:	430a      	orrs	r2, r1
 800087c:	2a00      	cmp	r2, #0
 800087e:	705a      	strb	r2, [r3, #1]
 8000880:	bf0c      	ite	eq
 8000882:	2280      	moveq	r2, #128	; 0x80
 8000884:	2200      	movne	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2400166c 	.word	0x2400166c

08000890 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <vOR_C+0x18>)
 8000892:	785a      	ldrb	r2, [r3, #1]
 8000894:	7899      	ldrb	r1, [r3, #2]
 8000896:	430a      	orrs	r2, r1
 8000898:	2a00      	cmp	r2, #0
 800089a:	705a      	strb	r2, [r3, #1]
 800089c:	bf0c      	ite	eq
 800089e:	2280      	moveq	r2, #128	; 0x80
 80008a0:	2200      	movne	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2400166c 	.word	0x2400166c

080008ac <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <vOR_D+0x18>)
 80008ae:	785a      	ldrb	r2, [r3, #1]
 80008b0:	7959      	ldrb	r1, [r3, #5]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	705a      	strb	r2, [r3, #1]
 80008b8:	bf0c      	ite	eq
 80008ba:	2280      	moveq	r2, #128	; 0x80
 80008bc:	2200      	movne	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2400166c 	.word	0x2400166c

080008c8 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <vOR_E+0x18>)
 80008ca:	785a      	ldrb	r2, [r3, #1]
 80008cc:	7919      	ldrb	r1, [r3, #4]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	705a      	strb	r2, [r3, #1]
 80008d4:	bf0c      	ite	eq
 80008d6:	2280      	moveq	r2, #128	; 0x80
 80008d8:	2200      	movne	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	2400166c 	.word	0x2400166c

080008e4 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <vOR_H+0x18>)
 80008e6:	785a      	ldrb	r2, [r3, #1]
 80008e8:	79d9      	ldrb	r1, [r3, #7]
 80008ea:	430a      	orrs	r2, r1
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	705a      	strb	r2, [r3, #1]
 80008f0:	bf0c      	ite	eq
 80008f2:	2280      	moveq	r2, #128	; 0x80
 80008f4:	2200      	movne	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2400166c 	.word	0x2400166c

08000900 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <vOR_L+0x18>)
 8000902:	785a      	ldrb	r2, [r3, #1]
 8000904:	7999      	ldrb	r1, [r3, #6]
 8000906:	430a      	orrs	r2, r1
 8000908:	2a00      	cmp	r2, #0
 800090a:	705a      	strb	r2, [r3, #1]
 800090c:	bf0c      	ite	eq
 800090e:	2280      	moveq	r2, #128	; 0x80
 8000910:	2200      	movne	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2400166c 	.word	0x2400166c

0800091c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <vOR_A+0x10>)
 800091e:	785a      	ldrb	r2, [r3, #1]
 8000920:	2a00      	cmp	r2, #0
 8000922:	bf0c      	ite	eq
 8000924:	2280      	moveq	r2, #128	; 0x80
 8000926:	2200      	movne	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	4770      	bx	lr
 800092c:	2400166c 	.word	0x2400166c

08000930 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000930:	4b01      	ldr	r3, [pc, #4]	; (8000938 <vJP_HL+0x8>)
 8000932:	88da      	ldrh	r2, [r3, #6]
 8000934:	815a      	strh	r2, [r3, #10]
 8000936:	4770      	bx	lr
 8000938:	2400166c 	.word	0x2400166c

0800093c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800093c:	4b01      	ldr	r3, [pc, #4]	; (8000944 <vDI+0x8>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	4770      	bx	lr
 8000944:	240010ab 	.word	0x240010ab

08000948 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000948:	4b01      	ldr	r3, [pc, #4]	; (8000950 <vLDs_SP_HL+0x8>)
 800094a:	88da      	ldrh	r2, [r3, #6]
 800094c:	811a      	strh	r2, [r3, #8]
 800094e:	4770      	bx	lr
 8000950:	2400166c 	.word	0x2400166c

08000954 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 8000954:	4b01      	ldr	r3, [pc, #4]	; (800095c <vEI+0x8>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	4770      	bx	lr
 800095c:	240010ab 	.word	0x240010ab

08000960 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 8000960:	b510      	push	{r4, lr}
 8000962:	4c04      	ldr	r4, [pc, #16]	; (8000974 <vLD_B_d8+0x14>)
 8000964:	8960      	ldrh	r0, [r4, #10]
 8000966:	3801      	subs	r0, #1
 8000968:	b280      	uxth	r0, r0
 800096a:	f002 fea5 	bl	80036b8 <ucGBMemoryRead>
 800096e:	70e0      	strb	r0, [r4, #3]
 8000970:	bd10      	pop	{r4, pc}
 8000972:	bf00      	nop
 8000974:	2400166c 	.word	0x2400166c

08000978 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000978:	b510      	push	{r4, lr}
 800097a:	4c03      	ldr	r4, [pc, #12]	; (8000988 <vLD_A_BC+0x10>)
 800097c:	8860      	ldrh	r0, [r4, #2]
 800097e:	f002 fe9b 	bl	80036b8 <ucGBMemoryRead>
 8000982:	7060      	strb	r0, [r4, #1]
 8000984:	bd10      	pop	{r4, pc}
 8000986:	bf00      	nop
 8000988:	2400166c 	.word	0x2400166c

0800098c <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 800098c:	b510      	push	{r4, lr}
 800098e:	4c04      	ldr	r4, [pc, #16]	; (80009a0 <vLD_C_d8+0x14>)
 8000990:	8960      	ldrh	r0, [r4, #10]
 8000992:	3801      	subs	r0, #1
 8000994:	b280      	uxth	r0, r0
 8000996:	f002 fe8f 	bl	80036b8 <ucGBMemoryRead>
 800099a:	70a0      	strb	r0, [r4, #2]
 800099c:	bd10      	pop	{r4, pc}
 800099e:	bf00      	nop
 80009a0:	2400166c 	.word	0x2400166c

080009a4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80009a4:	b510      	push	{r4, lr}
 80009a6:	4c04      	ldr	r4, [pc, #16]	; (80009b8 <vLD_D_d8+0x14>)
 80009a8:	8960      	ldrh	r0, [r4, #10]
 80009aa:	3801      	subs	r0, #1
 80009ac:	b280      	uxth	r0, r0
 80009ae:	f002 fe83 	bl	80036b8 <ucGBMemoryRead>
 80009b2:	7160      	strb	r0, [r4, #5]
 80009b4:	bd10      	pop	{r4, pc}
 80009b6:	bf00      	nop
 80009b8:	2400166c 	.word	0x2400166c

080009bc <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 80009bc:	b510      	push	{r4, lr}
 80009be:	4c05      	ldr	r4, [pc, #20]	; (80009d4 <vJR_r8+0x18>)
 80009c0:	8960      	ldrh	r0, [r4, #10]
 80009c2:	3801      	subs	r0, #1
 80009c4:	b280      	uxth	r0, r0
 80009c6:	f002 fe77 	bl	80036b8 <ucGBMemoryRead>
 80009ca:	8963      	ldrh	r3, [r4, #10]
 80009cc:	fa43 f080 	sxtab	r0, r3, r0
 80009d0:	8160      	strh	r0, [r4, #10]
 80009d2:	bd10      	pop	{r4, pc}
 80009d4:	2400166c 	.word	0x2400166c

080009d8 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 80009d8:	b510      	push	{r4, lr}
 80009da:	4c03      	ldr	r4, [pc, #12]	; (80009e8 <vLD_A_DE+0x10>)
 80009dc:	88a0      	ldrh	r0, [r4, #4]
 80009de:	f002 fe6b 	bl	80036b8 <ucGBMemoryRead>
 80009e2:	7060      	strb	r0, [r4, #1]
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	bf00      	nop
 80009e8:	2400166c 	.word	0x2400166c

080009ec <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 80009ec:	b510      	push	{r4, lr}
 80009ee:	4c04      	ldr	r4, [pc, #16]	; (8000a00 <vLD_E_d8+0x14>)
 80009f0:	8960      	ldrh	r0, [r4, #10]
 80009f2:	3801      	subs	r0, #1
 80009f4:	b280      	uxth	r0, r0
 80009f6:	f002 fe5f 	bl	80036b8 <ucGBMemoryRead>
 80009fa:	7120      	strb	r0, [r4, #4]
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	bf00      	nop
 8000a00:	2400166c 	.word	0x2400166c

08000a04 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000a04:	b510      	push	{r4, lr}
 8000a06:	4c04      	ldr	r4, [pc, #16]	; (8000a18 <vLD_H_d8+0x14>)
 8000a08:	8960      	ldrh	r0, [r4, #10]
 8000a0a:	3801      	subs	r0, #1
 8000a0c:	b280      	uxth	r0, r0
 8000a0e:	f002 fe53 	bl	80036b8 <ucGBMemoryRead>
 8000a12:	71e0      	strb	r0, [r4, #7]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	2400166c 	.word	0x2400166c

08000a1c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c04      	ldr	r4, [pc, #16]	; (8000a30 <vLD_A_HLI+0x14>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fe49 	bl	80036b8 <ucGBMemoryRead>
 8000a26:	88e3      	ldrh	r3, [r4, #6]
 8000a28:	7060      	strb	r0, [r4, #1]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	80e3      	strh	r3, [r4, #6]
 8000a2e:	bd10      	pop	{r4, pc}
 8000a30:	2400166c 	.word	0x2400166c

08000a34 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4c04      	ldr	r4, [pc, #16]	; (8000a48 <vLD_L_d8+0x14>)
 8000a38:	8960      	ldrh	r0, [r4, #10]
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	b280      	uxth	r0, r0
 8000a3e:	f002 fe3b 	bl	80036b8 <ucGBMemoryRead>
 8000a42:	71a0      	strb	r0, [r4, #6]
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	bf00      	nop
 8000a48:	2400166c 	.word	0x2400166c

08000a4c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4c04      	ldr	r4, [pc, #16]	; (8000a60 <vLD_A_HLD+0x14>)
 8000a50:	88e0      	ldrh	r0, [r4, #6]
 8000a52:	f002 fe31 	bl	80036b8 <ucGBMemoryRead>
 8000a56:	88e3      	ldrh	r3, [r4, #6]
 8000a58:	7060      	strb	r0, [r4, #1]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	80e3      	strh	r3, [r4, #6]
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	2400166c 	.word	0x2400166c

08000a64 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4c04      	ldr	r4, [pc, #16]	; (8000a78 <vLD_A_d8+0x14>)
 8000a68:	8960      	ldrh	r0, [r4, #10]
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	b280      	uxth	r0, r0
 8000a6e:	f002 fe23 	bl	80036b8 <ucGBMemoryRead>
 8000a72:	7060      	strb	r0, [r4, #1]
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	bf00      	nop
 8000a78:	2400166c 	.word	0x2400166c

08000a7c <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 8000a7c:	b510      	push	{r4, lr}
 8000a7e:	4c03      	ldr	r4, [pc, #12]	; (8000a8c <vLD_B_HL+0x10>)
 8000a80:	88e0      	ldrh	r0, [r4, #6]
 8000a82:	f002 fe19 	bl	80036b8 <ucGBMemoryRead>
 8000a86:	70e0      	strb	r0, [r4, #3]
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2400166c 	.word	0x2400166c

08000a90 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4c03      	ldr	r4, [pc, #12]	; (8000aa0 <vLD_C_HL+0x10>)
 8000a94:	88e0      	ldrh	r0, [r4, #6]
 8000a96:	f002 fe0f 	bl	80036b8 <ucGBMemoryRead>
 8000a9a:	70a0      	strb	r0, [r4, #2]
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2400166c 	.word	0x2400166c

08000aa4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	4c03      	ldr	r4, [pc, #12]	; (8000ab4 <vLD_D_HL+0x10>)
 8000aa8:	88e0      	ldrh	r0, [r4, #6]
 8000aaa:	f002 fe05 	bl	80036b8 <ucGBMemoryRead>
 8000aae:	7160      	strb	r0, [r4, #5]
 8000ab0:	bd10      	pop	{r4, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2400166c 	.word	0x2400166c

08000ab8 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4c03      	ldr	r4, [pc, #12]	; (8000ac8 <vLD_E_HL+0x10>)
 8000abc:	88e0      	ldrh	r0, [r4, #6]
 8000abe:	f002 fdfb 	bl	80036b8 <ucGBMemoryRead>
 8000ac2:	7120      	strb	r0, [r4, #4]
 8000ac4:	bd10      	pop	{r4, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2400166c 	.word	0x2400166c

08000acc <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000acc:	b510      	push	{r4, lr}
 8000ace:	4c03      	ldr	r4, [pc, #12]	; (8000adc <vLD_H_HL+0x10>)
 8000ad0:	88e0      	ldrh	r0, [r4, #6]
 8000ad2:	f002 fdf1 	bl	80036b8 <ucGBMemoryRead>
 8000ad6:	71e0      	strb	r0, [r4, #7]
 8000ad8:	bd10      	pop	{r4, pc}
 8000ada:	bf00      	nop
 8000adc:	2400166c 	.word	0x2400166c

08000ae0 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4c03      	ldr	r4, [pc, #12]	; (8000af0 <vLD_L_HL+0x10>)
 8000ae4:	88e0      	ldrh	r0, [r4, #6]
 8000ae6:	f002 fde7 	bl	80036b8 <ucGBMemoryRead>
 8000aea:	71a0      	strb	r0, [r4, #6]
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	2400166c 	.word	0x2400166c

08000af4 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4c03      	ldr	r4, [pc, #12]	; (8000b04 <vLD_A_HL+0x10>)
 8000af8:	88e0      	ldrh	r0, [r4, #6]
 8000afa:	f002 fddd 	bl	80036b8 <ucGBMemoryRead>
 8000afe:	7060      	strb	r0, [r4, #1]
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	bf00      	nop
 8000b04:	2400166c 	.word	0x2400166c

08000b08 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c06      	ldr	r4, [pc, #24]	; (8000b24 <vAND_HL+0x1c>)
 8000b0c:	88e0      	ldrh	r0, [r4, #6]
 8000b0e:	f002 fdd3 	bl	80036b8 <ucGBMemoryRead>
 8000b12:	7863      	ldrb	r3, [r4, #1]
 8000b14:	4018      	ands	r0, r3
 8000b16:	2800      	cmp	r0, #0
 8000b18:	7060      	strb	r0, [r4, #1]
 8000b1a:	bf0c      	ite	eq
 8000b1c:	23a0      	moveq	r3, #160	; 0xa0
 8000b1e:	2320      	movne	r3, #32
 8000b20:	7023      	strb	r3, [r4, #0]
 8000b22:	bd10      	pop	{r4, pc}
 8000b24:	2400166c 	.word	0x2400166c

08000b28 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4c07      	ldr	r4, [pc, #28]	; (8000b48 <vXOR_HL+0x20>)
 8000b2c:	88e0      	ldrh	r0, [r4, #6]
 8000b2e:	f002 fdc3 	bl	80036b8 <ucGBMemoryRead>
 8000b32:	7863      	ldrb	r3, [r4, #1]
 8000b34:	ea83 0200 	eor.w	r2, r3, r0
 8000b38:	4283      	cmp	r3, r0
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2080      	moveq	r0, #128	; 0x80
 8000b3e:	2000      	movne	r0, #0
 8000b40:	7062      	strb	r2, [r4, #1]
 8000b42:	7020      	strb	r0, [r4, #0]
 8000b44:	bd10      	pop	{r4, pc}
 8000b46:	bf00      	nop
 8000b48:	2400166c 	.word	0x2400166c

08000b4c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	4c07      	ldr	r4, [pc, #28]	; (8000b6c <vOR_HL+0x20>)
 8000b50:	88e0      	ldrh	r0, [r4, #6]
 8000b52:	f002 fdb1 	bl	80036b8 <ucGBMemoryRead>
 8000b56:	7863      	ldrb	r3, [r4, #1]
 8000b58:	4318      	orrs	r0, r3
 8000b5a:	b2c0      	uxtb	r0, r0
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	7060      	strb	r0, [r4, #1]
 8000b60:	bf0c      	ite	eq
 8000b62:	2380      	moveq	r3, #128	; 0x80
 8000b64:	2300      	movne	r3, #0
 8000b66:	7023      	strb	r3, [r4, #0]
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2400166c 	.word	0x2400166c

08000b70 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <vPREFIX+0x1c>)
 8000b72:	8958      	ldrh	r0, [r3, #10]
 8000b74:	3801      	subs	r0, #1
 8000b76:	b510      	push	{r4, lr}
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	f002 fd9d 	bl	80036b8 <ucGBMemoryRead>
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <vPREFIX+0x20>)
 8000b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b84:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b88:	4718      	bx	r3
 8000b8a:	bf00      	nop
 8000b8c:	2400166c 	.word	0x2400166c
 8000b90:	24000810 	.word	0x24000810

08000b94 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000b94:	b510      	push	{r4, lr}
 8000b96:	4c07      	ldr	r4, [pc, #28]	; (8000bb4 <vAND_d8+0x20>)
 8000b98:	8960      	ldrh	r0, [r4, #10]
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	b280      	uxth	r0, r0
 8000b9e:	f002 fd8b 	bl	80036b8 <ucGBMemoryRead>
 8000ba2:	7863      	ldrb	r3, [r4, #1]
 8000ba4:	4018      	ands	r0, r3
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	7060      	strb	r0, [r4, #1]
 8000baa:	bf0c      	ite	eq
 8000bac:	23a0      	moveq	r3, #160	; 0xa0
 8000bae:	2320      	movne	r3, #32
 8000bb0:	7023      	strb	r3, [r4, #0]
 8000bb2:	bd10      	pop	{r4, pc}
 8000bb4:	2400166c 	.word	0x2400166c

08000bb8 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4c08      	ldr	r4, [pc, #32]	; (8000bdc <vXOR_d8+0x24>)
 8000bbc:	8960      	ldrh	r0, [r4, #10]
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	b280      	uxth	r0, r0
 8000bc2:	f002 fd79 	bl	80036b8 <ucGBMemoryRead>
 8000bc6:	7863      	ldrb	r3, [r4, #1]
 8000bc8:	ea83 0200 	eor.w	r2, r3, r0
 8000bcc:	4283      	cmp	r3, r0
 8000bce:	bf0c      	ite	eq
 8000bd0:	2080      	moveq	r0, #128	; 0x80
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	7062      	strb	r2, [r4, #1]
 8000bd6:	7020      	strb	r0, [r4, #0]
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	2400166c 	.word	0x2400166c

08000be0 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000be0:	b510      	push	{r4, lr}
 8000be2:	4c06      	ldr	r4, [pc, #24]	; (8000bfc <vLDH_A_a8+0x1c>)
 8000be4:	8960      	ldrh	r0, [r4, #10]
 8000be6:	3801      	subs	r0, #1
 8000be8:	b280      	uxth	r0, r0
 8000bea:	f002 fd65 	bl	80036b8 <ucGBMemoryRead>
 8000bee:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bf2:	b280      	uxth	r0, r0
 8000bf4:	f002 fd60 	bl	80036b8 <ucGBMemoryRead>
 8000bf8:	7060      	strb	r0, [r4, #1]
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	2400166c 	.word	0x2400166c

08000c00 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000c00:	b510      	push	{r4, lr}
 8000c02:	4c04      	ldr	r4, [pc, #16]	; (8000c14 <vLD_A_fC+0x14>)
 8000c04:	78a0      	ldrb	r0, [r4, #2]
 8000c06:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000c0a:	b280      	uxth	r0, r0
 8000c0c:	f002 fd54 	bl	80036b8 <ucGBMemoryRead>
 8000c10:	7060      	strb	r0, [r4, #1]
 8000c12:	bd10      	pop	{r4, pc}
 8000c14:	2400166c 	.word	0x2400166c

08000c18 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4c08      	ldr	r4, [pc, #32]	; (8000c3c <vOR_d8+0x24>)
 8000c1c:	8960      	ldrh	r0, [r4, #10]
 8000c1e:	3801      	subs	r0, #1
 8000c20:	b280      	uxth	r0, r0
 8000c22:	f002 fd49 	bl	80036b8 <ucGBMemoryRead>
 8000c26:	7863      	ldrb	r3, [r4, #1]
 8000c28:	4318      	orrs	r0, r3
 8000c2a:	b2c0      	uxtb	r0, r0
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	7060      	strb	r0, [r4, #1]
 8000c30:	bf0c      	ite	eq
 8000c32:	2380      	moveq	r3, #128	; 0x80
 8000c34:	2300      	movne	r3, #0
 8000c36:	7023      	strb	r3, [r4, #0]
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2400166c 	.word	0x2400166c

08000c40 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vLDs_BC_d16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fd35 	bl	80036b8 <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fd2f 	bl	80036b8 <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f002 f81b 	bl	8002c98 <concat_16bit_bigEndian>
 8000c62:	8060      	strh	r0, [r4, #2]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	2400166c 	.word	0x2400166c

08000c6c <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c09      	ldr	r4, [pc, #36]	; (8000c94 <vLDs_DE_d16+0x28>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fd1f 	bl	80036b8 <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fd19 	bl	80036b8 <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f002 f805 	bl	8002c98 <concat_16bit_bigEndian>
 8000c8e:	80a0      	strh	r0, [r4, #4]
 8000c90:	bd38      	pop	{r3, r4, r5, pc}
 8000c92:	bf00      	nop
 8000c94:	2400166c 	.word	0x2400166c

08000c98 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4c09      	ldr	r4, [pc, #36]	; (8000cc0 <vLDs_HL_d16+0x28>)
 8000c9c:	8960      	ldrh	r0, [r4, #10]
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	b280      	uxth	r0, r0
 8000ca2:	f002 fd09 	bl	80036b8 <ucGBMemoryRead>
 8000ca6:	8963      	ldrh	r3, [r4, #10]
 8000ca8:	4605      	mov	r5, r0
 8000caa:	1e58      	subs	r0, r3, #1
 8000cac:	b280      	uxth	r0, r0
 8000cae:	f002 fd03 	bl	80036b8 <ucGBMemoryRead>
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f001 ffef 	bl	8002c98 <concat_16bit_bigEndian>
 8000cba:	80e0      	strh	r0, [r4, #6]
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400166c 	.word	0x2400166c

08000cc4 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4c09      	ldr	r4, [pc, #36]	; (8000cec <vLDs_SP_d16+0x28>)
 8000cc8:	8960      	ldrh	r0, [r4, #10]
 8000cca:	3802      	subs	r0, #2
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	f002 fcf3 	bl	80036b8 <ucGBMemoryRead>
 8000cd2:	8963      	ldrh	r3, [r4, #10]
 8000cd4:	4605      	mov	r5, r0
 8000cd6:	1e58      	subs	r0, r3, #1
 8000cd8:	b280      	uxth	r0, r0
 8000cda:	f002 fced 	bl	80036b8 <ucGBMemoryRead>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	f001 ffd9 	bl	8002c98 <concat_16bit_bigEndian>
 8000ce6:	8120      	strh	r0, [r4, #8]
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop
 8000cec:	2400166c 	.word	0x2400166c

08000cf0 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	4c09      	ldr	r4, [pc, #36]	; (8000d18 <vJP_a16+0x28>)
 8000cf4:	8960      	ldrh	r0, [r4, #10]
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	b280      	uxth	r0, r0
 8000cfa:	f002 fcdd 	bl	80036b8 <ucGBMemoryRead>
 8000cfe:	8963      	ldrh	r3, [r4, #10]
 8000d00:	4605      	mov	r5, r0
 8000d02:	1e58      	subs	r0, r3, #1
 8000d04:	b280      	uxth	r0, r0
 8000d06:	f002 fcd7 	bl	80036b8 <ucGBMemoryRead>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	f001 ffc3 	bl	8002c98 <concat_16bit_bigEndian>
 8000d12:	8160      	strh	r0, [r4, #10]
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop
 8000d18:	2400166c 	.word	0x2400166c

08000d1c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <vLD_A_a16+0x2c>)
 8000d20:	8960      	ldrh	r0, [r4, #10]
 8000d22:	3802      	subs	r0, #2
 8000d24:	b280      	uxth	r0, r0
 8000d26:	f002 fcc7 	bl	80036b8 <ucGBMemoryRead>
 8000d2a:	8963      	ldrh	r3, [r4, #10]
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	1e58      	subs	r0, r3, #1
 8000d30:	b280      	uxth	r0, r0
 8000d32:	f002 fcc1 	bl	80036b8 <ucGBMemoryRead>
 8000d36:	4601      	mov	r1, r0
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f001 ffad 	bl	8002c98 <concat_16bit_bigEndian>
 8000d3e:	f002 fcbb 	bl	80036b8 <ucGBMemoryRead>
 8000d42:	7060      	strb	r0, [r4, #1]
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	2400166c 	.word	0x2400166c

08000d4c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_BC_A+0xc>)
 8000d4e:	7859      	ldrb	r1, [r3, #1]
 8000d50:	8858      	ldrh	r0, [r3, #2]
 8000d52:	f002 bcd9 	b.w	8003708 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	2400166c 	.word	0x2400166c

08000d5c <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_DE_A+0xc>)
 8000d5e:	7859      	ldrb	r1, [r3, #1]
 8000d60:	8898      	ldrh	r0, [r3, #4]
 8000d62:	f002 bcd1 	b.w	8003708 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	2400166c 	.word	0x2400166c

08000d6c <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	4c04      	ldr	r4, [pc, #16]	; (8000d80 <vLD_HLI_A+0x14>)
 8000d70:	7861      	ldrb	r1, [r4, #1]
 8000d72:	88e0      	ldrh	r0, [r4, #6]
 8000d74:	f002 fcc8 	bl	8003708 <vGBMemoryWrite>
 8000d78:	88e3      	ldrh	r3, [r4, #6]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	80e3      	strh	r3, [r4, #6]
 8000d7e:	bd10      	pop	{r4, pc}
 8000d80:	2400166c 	.word	0x2400166c

08000d84 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d84:	b510      	push	{r4, lr}
 8000d86:	4c04      	ldr	r4, [pc, #16]	; (8000d98 <vLD_HLD_A+0x14>)
 8000d88:	7861      	ldrb	r1, [r4, #1]
 8000d8a:	88e0      	ldrh	r0, [r4, #6]
 8000d8c:	f002 fcbc 	bl	8003708 <vGBMemoryWrite>
 8000d90:	88e3      	ldrh	r3, [r4, #6]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	80e3      	strh	r3, [r4, #6]
 8000d96:	bd10      	pop	{r4, pc}
 8000d98:	2400166c 	.word	0x2400166c

08000d9c <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <vLD_HL_d8+0x1c>)
 8000d9e:	8958      	ldrh	r0, [r3, #10]
 8000da0:	3801      	subs	r0, #1
 8000da2:	b510      	push	{r4, lr}
 8000da4:	88dc      	ldrh	r4, [r3, #6]
 8000da6:	b280      	uxth	r0, r0
 8000da8:	f002 fc86 	bl	80036b8 <ucGBMemoryRead>
 8000dac:	4601      	mov	r1, r0
 8000dae:	4620      	mov	r0, r4
 8000db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db4:	f002 bca8 	b.w	8003708 <vGBMemoryWrite>
 8000db8:	2400166c 	.word	0x2400166c

08000dbc <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <vLD_HL_B+0xc>)
 8000dbe:	78d9      	ldrb	r1, [r3, #3]
 8000dc0:	88d8      	ldrh	r0, [r3, #6]
 8000dc2:	f002 bca1 	b.w	8003708 <vGBMemoryWrite>
 8000dc6:	bf00      	nop
 8000dc8:	2400166c 	.word	0x2400166c

08000dcc <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <vLD_HL_C+0xc>)
 8000dce:	7899      	ldrb	r1, [r3, #2]
 8000dd0:	88d8      	ldrh	r0, [r3, #6]
 8000dd2:	f002 bc99 	b.w	8003708 <vGBMemoryWrite>
 8000dd6:	bf00      	nop
 8000dd8:	2400166c 	.word	0x2400166c

08000ddc <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <vLD_HL_D+0xc>)
 8000dde:	7959      	ldrb	r1, [r3, #5]
 8000de0:	88d8      	ldrh	r0, [r3, #6]
 8000de2:	f002 bc91 	b.w	8003708 <vGBMemoryWrite>
 8000de6:	bf00      	nop
 8000de8:	2400166c 	.word	0x2400166c

08000dec <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <vLD_HL_E+0xc>)
 8000dee:	7919      	ldrb	r1, [r3, #4]
 8000df0:	88d8      	ldrh	r0, [r3, #6]
 8000df2:	f002 bc89 	b.w	8003708 <vGBMemoryWrite>
 8000df6:	bf00      	nop
 8000df8:	2400166c 	.word	0x2400166c

08000dfc <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <vLD_HL_H+0xc>)
 8000dfe:	79d9      	ldrb	r1, [r3, #7]
 8000e00:	88d8      	ldrh	r0, [r3, #6]
 8000e02:	f002 bc81 	b.w	8003708 <vGBMemoryWrite>
 8000e06:	bf00      	nop
 8000e08:	2400166c 	.word	0x2400166c

08000e0c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <vLD_HL_L+0xc>)
 8000e0e:	7999      	ldrb	r1, [r3, #6]
 8000e10:	88d8      	ldrh	r0, [r3, #6]
 8000e12:	f002 bc79 	b.w	8003708 <vGBMemoryWrite>
 8000e16:	bf00      	nop
 8000e18:	2400166c 	.word	0x2400166c

08000e1c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <vLD_HL_A+0xc>)
 8000e1e:	7859      	ldrb	r1, [r3, #1]
 8000e20:	88d8      	ldrh	r0, [r3, #6]
 8000e22:	f002 bc71 	b.w	8003708 <vGBMemoryWrite>
 8000e26:	bf00      	nop
 8000e28:	2400166c 	.word	0x2400166c

08000e2c <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	4c07      	ldr	r4, [pc, #28]	; (8000e4c <vLDH_a8_A+0x20>)
 8000e30:	8960      	ldrh	r0, [r4, #10]
 8000e32:	3801      	subs	r0, #1
 8000e34:	b280      	uxth	r0, r0
 8000e36:	f002 fc3f 	bl	80036b8 <ucGBMemoryRead>
 8000e3a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e3e:	7861      	ldrb	r1, [r4, #1]
 8000e40:	b280      	uxth	r0, r0
 8000e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e46:	f002 bc5f 	b.w	8003708 <vGBMemoryWrite>
 8000e4a:	bf00      	nop
 8000e4c:	2400166c 	.word	0x2400166c

08000e50 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <vLD_fC_A+0x10>)
 8000e52:	7898      	ldrb	r0, [r3, #2]
 8000e54:	7859      	ldrb	r1, [r3, #1]
 8000e56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000e5a:	b280      	uxth	r0, r0
 8000e5c:	f002 bc54 	b.w	8003708 <vGBMemoryWrite>
 8000e60:	2400166c 	.word	0x2400166c

08000e64 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <vLD_a16_A+0x2c>)
 8000e68:	8960      	ldrh	r0, [r4, #10]
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	b280      	uxth	r0, r0
 8000e6e:	f002 fc23 	bl	80036b8 <ucGBMemoryRead>
 8000e72:	8963      	ldrh	r3, [r4, #10]
 8000e74:	4605      	mov	r5, r0
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	f002 fc1d 	bl	80036b8 <ucGBMemoryRead>
 8000e7e:	4601      	mov	r1, r0
 8000e80:	4628      	mov	r0, r5
 8000e82:	f001 ff09 	bl	8002c98 <concat_16bit_bigEndian>
 8000e86:	7861      	ldrb	r1, [r4, #1]
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f002 bc3c 	b.w	8003708 <vGBMemoryWrite>
 8000e90:	2400166c 	.word	0x2400166c

08000e94 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e94:	4901      	ldr	r1, [pc, #4]	; (8000e9c <vINC_B+0x8>)
 8000e96:	1cc8      	adds	r0, r1, #3
 8000e98:	f001 bf16 	b.w	8002cc8 <v8bitRegisterINC>
 8000e9c:	2400166c 	.word	0x2400166c

08000ea0 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000ea0:	4901      	ldr	r1, [pc, #4]	; (8000ea8 <vINC_C+0x8>)
 8000ea2:	1c88      	adds	r0, r1, #2
 8000ea4:	f001 bf10 	b.w	8002cc8 <v8bitRegisterINC>
 8000ea8:	2400166c 	.word	0x2400166c

08000eac <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000eac:	4901      	ldr	r1, [pc, #4]	; (8000eb4 <vINC_D+0x8>)
 8000eae:	1d48      	adds	r0, r1, #5
 8000eb0:	f001 bf0a 	b.w	8002cc8 <v8bitRegisterINC>
 8000eb4:	2400166c 	.word	0x2400166c

08000eb8 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000eb8:	4901      	ldr	r1, [pc, #4]	; (8000ec0 <vINC_E+0x8>)
 8000eba:	1d08      	adds	r0, r1, #4
 8000ebc:	f001 bf04 	b.w	8002cc8 <v8bitRegisterINC>
 8000ec0:	2400166c 	.word	0x2400166c

08000ec4 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000ec4:	4901      	ldr	r1, [pc, #4]	; (8000ecc <vINC_H+0x8>)
 8000ec6:	1dc8      	adds	r0, r1, #7
 8000ec8:	f001 befe 	b.w	8002cc8 <v8bitRegisterINC>
 8000ecc:	2400166c 	.word	0x2400166c

08000ed0 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000ed0:	4901      	ldr	r1, [pc, #4]	; (8000ed8 <vINC_L+0x8>)
 8000ed2:	1d88      	adds	r0, r1, #6
 8000ed4:	f001 bef8 	b.w	8002cc8 <v8bitRegisterINC>
 8000ed8:	2400166c 	.word	0x2400166c

08000edc <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000edc:	4901      	ldr	r1, [pc, #4]	; (8000ee4 <vINC_A+0x8>)
 8000ede:	1c48      	adds	r0, r1, #1
 8000ee0:	f001 bef2 	b.w	8002cc8 <v8bitRegisterINC>
 8000ee4:	2400166c 	.word	0x2400166c

08000ee8 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000ee8:	4901      	ldr	r1, [pc, #4]	; (8000ef0 <vDEC_B+0x8>)
 8000eea:	1cc8      	adds	r0, r1, #3
 8000eec:	f001 bf0a 	b.w	8002d04 <v8bitRegisterDEC>
 8000ef0:	2400166c 	.word	0x2400166c

08000ef4 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000ef4:	4901      	ldr	r1, [pc, #4]	; (8000efc <vDEC_C+0x8>)
 8000ef6:	1c88      	adds	r0, r1, #2
 8000ef8:	f001 bf04 	b.w	8002d04 <v8bitRegisterDEC>
 8000efc:	2400166c 	.word	0x2400166c

08000f00 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000f00:	4901      	ldr	r1, [pc, #4]	; (8000f08 <vDEC_D+0x8>)
 8000f02:	1d48      	adds	r0, r1, #5
 8000f04:	f001 befe 	b.w	8002d04 <v8bitRegisterDEC>
 8000f08:	2400166c 	.word	0x2400166c

08000f0c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000f0c:	4901      	ldr	r1, [pc, #4]	; (8000f14 <vDEC_E+0x8>)
 8000f0e:	1d08      	adds	r0, r1, #4
 8000f10:	f001 bef8 	b.w	8002d04 <v8bitRegisterDEC>
 8000f14:	2400166c 	.word	0x2400166c

08000f18 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000f18:	4901      	ldr	r1, [pc, #4]	; (8000f20 <vDEC_H+0x8>)
 8000f1a:	1dc8      	adds	r0, r1, #7
 8000f1c:	f001 bef2 	b.w	8002d04 <v8bitRegisterDEC>
 8000f20:	2400166c 	.word	0x2400166c

08000f24 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000f24:	4901      	ldr	r1, [pc, #4]	; (8000f2c <vDEC_L+0x8>)
 8000f26:	1d88      	adds	r0, r1, #6
 8000f28:	f001 beec 	b.w	8002d04 <v8bitRegisterDEC>
 8000f2c:	2400166c 	.word	0x2400166c

08000f30 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000f30:	4901      	ldr	r1, [pc, #4]	; (8000f38 <vDEC_A+0x8>)
 8000f32:	1c48      	adds	r0, r1, #1
 8000f34:	f001 bee6 	b.w	8002d04 <v8bitRegisterDEC>
 8000f38:	2400166c 	.word	0x2400166c

08000f3c <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000f3c:	4901      	ldr	r1, [pc, #4]	; (8000f44 <vRLCA+0x8>)
 8000f3e:	1c48      	adds	r0, r1, #1
 8000f40:	f001 bf00 	b.w	8002d44 <vGBFunctionRLCA>
 8000f44:	2400166c 	.word	0x2400166c

08000f48 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <vLDs_a16_SP+0x2c>)
 8000f4c:	8960      	ldrh	r0, [r4, #10]
 8000f4e:	3802      	subs	r0, #2
 8000f50:	b280      	uxth	r0, r0
 8000f52:	f002 fbb1 	bl	80036b8 <ucGBMemoryRead>
 8000f56:	8963      	ldrh	r3, [r4, #10]
 8000f58:	4605      	mov	r5, r0
 8000f5a:	1e58      	subs	r0, r3, #1
 8000f5c:	b280      	uxth	r0, r0
 8000f5e:	f002 fbab 	bl	80036b8 <ucGBMemoryRead>
 8000f62:	4601      	mov	r1, r0
 8000f64:	4628      	mov	r0, r5
 8000f66:	f001 fe97 	bl	8002c98 <concat_16bit_bigEndian>
 8000f6a:	8921      	ldrh	r1, [r4, #8]
 8000f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f70:	f002 bc46 	b.w	8003800 <vGBMemoryWriteShort>
 8000f74:	2400166c 	.word	0x2400166c

08000f78 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000f78:	4a02      	ldr	r2, [pc, #8]	; (8000f84 <vADDs_HL_BC+0xc>)
 8000f7a:	8851      	ldrh	r1, [r2, #2]
 8000f7c:	1d90      	adds	r0, r2, #6
 8000f7e:	f001 beff 	b.w	8002d80 <vGBFunction16bitADD>
 8000f82:	bf00      	nop
 8000f84:	2400166c 	.word	0x2400166c

08000f88 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000f88:	4a02      	ldr	r2, [pc, #8]	; (8000f94 <vADDs_HL_DE+0xc>)
 8000f8a:	8891      	ldrh	r1, [r2, #4]
 8000f8c:	1d90      	adds	r0, r2, #6
 8000f8e:	f001 bef7 	b.w	8002d80 <vGBFunction16bitADD>
 8000f92:	bf00      	nop
 8000f94:	2400166c 	.word	0x2400166c

08000f98 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <vADDs_HL_HL+0xc>)
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000fa0:	f001 beee 	b.w	8002d80 <vGBFunction16bitADD>
 8000fa4:	2400166c 	.word	0x2400166c

08000fa8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000fa8:	4a02      	ldr	r2, [pc, #8]	; (8000fb4 <vADDs_HL_SP+0xc>)
 8000faa:	8911      	ldrh	r1, [r2, #8]
 8000fac:	1d90      	adds	r0, r2, #6
 8000fae:	f001 bee7 	b.w	8002d80 <vGBFunction16bitADD>
 8000fb2:	bf00      	nop
 8000fb4:	2400166c 	.word	0x2400166c

08000fb8 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000fb8:	4901      	ldr	r1, [pc, #4]	; (8000fc0 <vRRCA+0x8>)
 8000fba:	1c48      	adds	r0, r1, #1
 8000fbc:	f001 bece 	b.w	8002d5c <vGBFunctionRRCA>
 8000fc0:	2400166c 	.word	0x2400166c

08000fc4 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000fc4:	4901      	ldr	r1, [pc, #4]	; (8000fcc <vRLA+0x8>)
 8000fc6:	1c48      	adds	r0, r1, #1
 8000fc8:	f001 bf02 	b.w	8002dd0 <vGBFunctionRLA>
 8000fcc:	2400166c 	.word	0x2400166c

08000fd0 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000fd0:	4901      	ldr	r1, [pc, #4]	; (8000fd8 <vRRA+0x8>)
 8000fd2:	1c48      	adds	r0, r1, #1
 8000fd4:	f001 bf0a 	b.w	8002dec <vGBFunctionRRA>
 8000fd8:	2400166c 	.word	0x2400166c

08000fdc <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4d08      	ldr	r5, [pc, #32]	; (8001000 <vJR_NZ_r8+0x24>)
 8000fe0:	462c      	mov	r4, r5
 8000fe2:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	b280      	uxth	r0, r0
 8000fea:	f002 fb65 	bl	80036b8 <ucGBMemoryRead>
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f001 ff08 	bl	8002e08 <vGBFunctionJR_NZ>
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <vJR_NZ_r8+0x28>)
 8000ffa:	7018      	strb	r0, [r3, #0]
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	2400166c 	.word	0x2400166c
 8001004:	240010a0 	.word	0x240010a0

08001008 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8001008:	4901      	ldr	r1, [pc, #4]	; (8001010 <vDAA+0x8>)
 800100a:	1c48      	adds	r0, r1, #1
 800100c:	f001 bf08 	b.w	8002e20 <vGBFunctionDAA>
 8001010:	2400166c 	.word	0x2400166c

08001014 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4d08      	ldr	r5, [pc, #32]	; (8001038 <vJR_Z_r8+0x24>)
 8001018:	462c      	mov	r4, r5
 800101a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800101e:	3801      	subs	r0, #1
 8001020:	b280      	uxth	r0, r0
 8001022:	f002 fb49 	bl	80036b8 <ucGBMemoryRead>
 8001026:	4629      	mov	r1, r5
 8001028:	4602      	mov	r2, r0
 800102a:	4620      	mov	r0, r4
 800102c:	f001 ff36 	bl	8002e9c <vGBFunctionJR_Z>
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <vJR_Z_r8+0x28>)
 8001032:	7018      	strb	r0, [r3, #0]
 8001034:	bd38      	pop	{r3, r4, r5, pc}
 8001036:	bf00      	nop
 8001038:	2400166c 	.word	0x2400166c
 800103c:	240010a0 	.word	0x240010a0

08001040 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8001040:	b510      	push	{r4, lr}
 8001042:	4c07      	ldr	r4, [pc, #28]	; (8001060 <vCPL+0x20>)
 8001044:	2106      	movs	r1, #6
 8001046:	7863      	ldrb	r3, [r4, #1]
 8001048:	4620      	mov	r0, r4
 800104a:	43db      	mvns	r3, r3
 800104c:	7063      	strb	r3, [r4, #1]
 800104e:	f001 fe27 	bl	8002ca0 <setbit>
 8001052:	4620      	mov	r0, r4
 8001054:	2105      	movs	r1, #5
 8001056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105a:	f001 be21 	b.w	8002ca0 <setbit>
 800105e:	bf00      	nop
 8001060:	2400166c 	.word	0x2400166c

08001064 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8001064:	2100      	movs	r1, #0
 8001066:	4801      	ldr	r0, [pc, #4]	; (800106c <vSET_0_B+0x8>)
 8001068:	f001 be1a 	b.w	8002ca0 <setbit>
 800106c:	2400166f 	.word	0x2400166f

08001070 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8001070:	2100      	movs	r1, #0
 8001072:	4801      	ldr	r0, [pc, #4]	; (8001078 <vSET_0_C+0x8>)
 8001074:	f001 be14 	b.w	8002ca0 <setbit>
 8001078:	2400166e 	.word	0x2400166e

0800107c <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 800107c:	2100      	movs	r1, #0
 800107e:	4801      	ldr	r0, [pc, #4]	; (8001084 <vSET_0_D+0x8>)
 8001080:	f001 be0e 	b.w	8002ca0 <setbit>
 8001084:	24001671 	.word	0x24001671

08001088 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8001088:	2100      	movs	r1, #0
 800108a:	4801      	ldr	r0, [pc, #4]	; (8001090 <vSET_0_E+0x8>)
 800108c:	f001 be08 	b.w	8002ca0 <setbit>
 8001090:	24001670 	.word	0x24001670

08001094 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8001094:	2100      	movs	r1, #0
 8001096:	4801      	ldr	r0, [pc, #4]	; (800109c <vSET_0_H+0x8>)
 8001098:	f001 be02 	b.w	8002ca0 <setbit>
 800109c:	24001673 	.word	0x24001673

080010a0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 80010a0:	2100      	movs	r1, #0
 80010a2:	4801      	ldr	r0, [pc, #4]	; (80010a8 <vSET_0_L+0x8>)
 80010a4:	f001 bdfc 	b.w	8002ca0 <setbit>
 80010a8:	24001672 	.word	0x24001672

080010ac <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 80010ac:	2100      	movs	r1, #0
 80010ae:	4801      	ldr	r0, [pc, #4]	; (80010b4 <vSET_0_A+0x8>)
 80010b0:	f001 bdf6 	b.w	8002ca0 <setbit>
 80010b4:	2400166d 	.word	0x2400166d

080010b8 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 80010b8:	2101      	movs	r1, #1
 80010ba:	4801      	ldr	r0, [pc, #4]	; (80010c0 <vSET_1_B+0x8>)
 80010bc:	f001 bdf0 	b.w	8002ca0 <setbit>
 80010c0:	2400166f 	.word	0x2400166f

080010c4 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 80010c4:	2101      	movs	r1, #1
 80010c6:	4801      	ldr	r0, [pc, #4]	; (80010cc <vSET_1_C+0x8>)
 80010c8:	f001 bdea 	b.w	8002ca0 <setbit>
 80010cc:	2400166e 	.word	0x2400166e

080010d0 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 80010d0:	2101      	movs	r1, #1
 80010d2:	4801      	ldr	r0, [pc, #4]	; (80010d8 <vSET_1_D+0x8>)
 80010d4:	f001 bde4 	b.w	8002ca0 <setbit>
 80010d8:	24001671 	.word	0x24001671

080010dc <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 80010dc:	2101      	movs	r1, #1
 80010de:	4801      	ldr	r0, [pc, #4]	; (80010e4 <vSET_1_E+0x8>)
 80010e0:	f001 bdde 	b.w	8002ca0 <setbit>
 80010e4:	24001670 	.word	0x24001670

080010e8 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 80010e8:	2101      	movs	r1, #1
 80010ea:	4801      	ldr	r0, [pc, #4]	; (80010f0 <vSET_1_H+0x8>)
 80010ec:	f001 bdd8 	b.w	8002ca0 <setbit>
 80010f0:	24001673 	.word	0x24001673

080010f4 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 80010f4:	2101      	movs	r1, #1
 80010f6:	4801      	ldr	r0, [pc, #4]	; (80010fc <vSET_1_L+0x8>)
 80010f8:	f001 bdd2 	b.w	8002ca0 <setbit>
 80010fc:	24001672 	.word	0x24001672

08001100 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001100:	2101      	movs	r1, #1
 8001102:	4801      	ldr	r0, [pc, #4]	; (8001108 <vSET_1_A+0x8>)
 8001104:	f001 bdcc 	b.w	8002ca0 <setbit>
 8001108:	2400166d 	.word	0x2400166d

0800110c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800110c:	2102      	movs	r1, #2
 800110e:	4801      	ldr	r0, [pc, #4]	; (8001114 <vSET_2_B+0x8>)
 8001110:	f001 bdc6 	b.w	8002ca0 <setbit>
 8001114:	2400166f 	.word	0x2400166f

08001118 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001118:	2102      	movs	r1, #2
 800111a:	4801      	ldr	r0, [pc, #4]	; (8001120 <vSET_2_C+0x8>)
 800111c:	f001 bdc0 	b.w	8002ca0 <setbit>
 8001120:	2400166e 	.word	0x2400166e

08001124 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001124:	2102      	movs	r1, #2
 8001126:	4801      	ldr	r0, [pc, #4]	; (800112c <vSET_2_D+0x8>)
 8001128:	f001 bdba 	b.w	8002ca0 <setbit>
 800112c:	24001671 	.word	0x24001671

08001130 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001130:	2102      	movs	r1, #2
 8001132:	4801      	ldr	r0, [pc, #4]	; (8001138 <vSET_2_E+0x8>)
 8001134:	f001 bdb4 	b.w	8002ca0 <setbit>
 8001138:	24001670 	.word	0x24001670

0800113c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800113c:	2102      	movs	r1, #2
 800113e:	4801      	ldr	r0, [pc, #4]	; (8001144 <vSET_2_H+0x8>)
 8001140:	f001 bdae 	b.w	8002ca0 <setbit>
 8001144:	24001673 	.word	0x24001673

08001148 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001148:	2102      	movs	r1, #2
 800114a:	4801      	ldr	r0, [pc, #4]	; (8001150 <vSET_2_L+0x8>)
 800114c:	f001 bda8 	b.w	8002ca0 <setbit>
 8001150:	24001672 	.word	0x24001672

08001154 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 8001154:	2102      	movs	r1, #2
 8001156:	4801      	ldr	r0, [pc, #4]	; (800115c <vSET_2_A+0x8>)
 8001158:	f001 bda2 	b.w	8002ca0 <setbit>
 800115c:	2400166d 	.word	0x2400166d

08001160 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 8001160:	2103      	movs	r1, #3
 8001162:	4801      	ldr	r0, [pc, #4]	; (8001168 <vSET_3_B+0x8>)
 8001164:	f001 bd9c 	b.w	8002ca0 <setbit>
 8001168:	2400166f 	.word	0x2400166f

0800116c <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 800116c:	2103      	movs	r1, #3
 800116e:	4801      	ldr	r0, [pc, #4]	; (8001174 <vSET_3_C+0x8>)
 8001170:	f001 bd96 	b.w	8002ca0 <setbit>
 8001174:	2400166e 	.word	0x2400166e

08001178 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 8001178:	2103      	movs	r1, #3
 800117a:	4801      	ldr	r0, [pc, #4]	; (8001180 <vSET_3_D+0x8>)
 800117c:	f001 bd90 	b.w	8002ca0 <setbit>
 8001180:	24001671 	.word	0x24001671

08001184 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 8001184:	2103      	movs	r1, #3
 8001186:	4801      	ldr	r0, [pc, #4]	; (800118c <vSET_3_E+0x8>)
 8001188:	f001 bd8a 	b.w	8002ca0 <setbit>
 800118c:	24001670 	.word	0x24001670

08001190 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 8001190:	2103      	movs	r1, #3
 8001192:	4801      	ldr	r0, [pc, #4]	; (8001198 <vSET_3_H+0x8>)
 8001194:	f001 bd84 	b.w	8002ca0 <setbit>
 8001198:	24001673 	.word	0x24001673

0800119c <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 800119c:	2103      	movs	r1, #3
 800119e:	4801      	ldr	r0, [pc, #4]	; (80011a4 <vSET_3_L+0x8>)
 80011a0:	f001 bd7e 	b.w	8002ca0 <setbit>
 80011a4:	24001672 	.word	0x24001672

080011a8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80011a8:	2103      	movs	r1, #3
 80011aa:	4801      	ldr	r0, [pc, #4]	; (80011b0 <vSET_3_A+0x8>)
 80011ac:	f001 bd78 	b.w	8002ca0 <setbit>
 80011b0:	2400166d 	.word	0x2400166d

080011b4 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 80011b4:	2104      	movs	r1, #4
 80011b6:	4801      	ldr	r0, [pc, #4]	; (80011bc <vSET_4_B+0x8>)
 80011b8:	f001 bd72 	b.w	8002ca0 <setbit>
 80011bc:	2400166f 	.word	0x2400166f

080011c0 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 80011c0:	2104      	movs	r1, #4
 80011c2:	4801      	ldr	r0, [pc, #4]	; (80011c8 <vSET_4_C+0x8>)
 80011c4:	f001 bd6c 	b.w	8002ca0 <setbit>
 80011c8:	2400166e 	.word	0x2400166e

080011cc <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 80011cc:	2104      	movs	r1, #4
 80011ce:	4801      	ldr	r0, [pc, #4]	; (80011d4 <vSET_4_D+0x8>)
 80011d0:	f001 bd66 	b.w	8002ca0 <setbit>
 80011d4:	24001671 	.word	0x24001671

080011d8 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 80011d8:	2104      	movs	r1, #4
 80011da:	4801      	ldr	r0, [pc, #4]	; (80011e0 <vSET_4_E+0x8>)
 80011dc:	f001 bd60 	b.w	8002ca0 <setbit>
 80011e0:	24001670 	.word	0x24001670

080011e4 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 80011e4:	2104      	movs	r1, #4
 80011e6:	4801      	ldr	r0, [pc, #4]	; (80011ec <vSET_4_H+0x8>)
 80011e8:	f001 bd5a 	b.w	8002ca0 <setbit>
 80011ec:	24001673 	.word	0x24001673

080011f0 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 80011f0:	2104      	movs	r1, #4
 80011f2:	4801      	ldr	r0, [pc, #4]	; (80011f8 <vSET_4_L+0x8>)
 80011f4:	f001 bd54 	b.w	8002ca0 <setbit>
 80011f8:	24001672 	.word	0x24001672

080011fc <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 80011fc:	2104      	movs	r1, #4
 80011fe:	4801      	ldr	r0, [pc, #4]	; (8001204 <vSET_4_A+0x8>)
 8001200:	f001 bd4e 	b.w	8002ca0 <setbit>
 8001204:	2400166d 	.word	0x2400166d

08001208 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001208:	2105      	movs	r1, #5
 800120a:	4801      	ldr	r0, [pc, #4]	; (8001210 <vSET_5_B+0x8>)
 800120c:	f001 bd48 	b.w	8002ca0 <setbit>
 8001210:	2400166f 	.word	0x2400166f

08001214 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001214:	2105      	movs	r1, #5
 8001216:	4801      	ldr	r0, [pc, #4]	; (800121c <vSET_5_C+0x8>)
 8001218:	f001 bd42 	b.w	8002ca0 <setbit>
 800121c:	2400166e 	.word	0x2400166e

08001220 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001220:	2105      	movs	r1, #5
 8001222:	4801      	ldr	r0, [pc, #4]	; (8001228 <vSET_5_D+0x8>)
 8001224:	f001 bd3c 	b.w	8002ca0 <setbit>
 8001228:	24001671 	.word	0x24001671

0800122c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800122c:	2105      	movs	r1, #5
 800122e:	4801      	ldr	r0, [pc, #4]	; (8001234 <vSET_5_E+0x8>)
 8001230:	f001 bd36 	b.w	8002ca0 <setbit>
 8001234:	24001670 	.word	0x24001670

08001238 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001238:	2105      	movs	r1, #5
 800123a:	4801      	ldr	r0, [pc, #4]	; (8001240 <vSET_5_H+0x8>)
 800123c:	f001 bd30 	b.w	8002ca0 <setbit>
 8001240:	24001673 	.word	0x24001673

08001244 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001244:	2105      	movs	r1, #5
 8001246:	4801      	ldr	r0, [pc, #4]	; (800124c <vSET_5_L+0x8>)
 8001248:	f001 bd2a 	b.w	8002ca0 <setbit>
 800124c:	24001672 	.word	0x24001672

08001250 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 8001250:	2105      	movs	r1, #5
 8001252:	4801      	ldr	r0, [pc, #4]	; (8001258 <vSET_5_A+0x8>)
 8001254:	f001 bd24 	b.w	8002ca0 <setbit>
 8001258:	2400166d 	.word	0x2400166d

0800125c <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 800125c:	2106      	movs	r1, #6
 800125e:	4801      	ldr	r0, [pc, #4]	; (8001264 <vSET_6_B+0x8>)
 8001260:	f001 bd1e 	b.w	8002ca0 <setbit>
 8001264:	2400166f 	.word	0x2400166f

08001268 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 8001268:	2106      	movs	r1, #6
 800126a:	4801      	ldr	r0, [pc, #4]	; (8001270 <vSET_6_C+0x8>)
 800126c:	f001 bd18 	b.w	8002ca0 <setbit>
 8001270:	2400166e 	.word	0x2400166e

08001274 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 8001274:	2106      	movs	r1, #6
 8001276:	4801      	ldr	r0, [pc, #4]	; (800127c <vSET_6_D+0x8>)
 8001278:	f001 bd12 	b.w	8002ca0 <setbit>
 800127c:	24001671 	.word	0x24001671

08001280 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 8001280:	2106      	movs	r1, #6
 8001282:	4801      	ldr	r0, [pc, #4]	; (8001288 <vSET_6_E+0x8>)
 8001284:	f001 bd0c 	b.w	8002ca0 <setbit>
 8001288:	24001670 	.word	0x24001670

0800128c <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 800128c:	2106      	movs	r1, #6
 800128e:	4801      	ldr	r0, [pc, #4]	; (8001294 <vSET_6_H+0x8>)
 8001290:	f001 bd06 	b.w	8002ca0 <setbit>
 8001294:	24001673 	.word	0x24001673

08001298 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 8001298:	2106      	movs	r1, #6
 800129a:	4801      	ldr	r0, [pc, #4]	; (80012a0 <vSET_6_L+0x8>)
 800129c:	f001 bd00 	b.w	8002ca0 <setbit>
 80012a0:	24001672 	.word	0x24001672

080012a4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80012a4:	2106      	movs	r1, #6
 80012a6:	4801      	ldr	r0, [pc, #4]	; (80012ac <vSET_6_A+0x8>)
 80012a8:	f001 bcfa 	b.w	8002ca0 <setbit>
 80012ac:	2400166d 	.word	0x2400166d

080012b0 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 80012b0:	2107      	movs	r1, #7
 80012b2:	4801      	ldr	r0, [pc, #4]	; (80012b8 <vSET_7_B+0x8>)
 80012b4:	f001 bcf4 	b.w	8002ca0 <setbit>
 80012b8:	2400166f 	.word	0x2400166f

080012bc <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 80012bc:	2107      	movs	r1, #7
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vSET_7_C+0x8>)
 80012c0:	f001 bcee 	b.w	8002ca0 <setbit>
 80012c4:	2400166e 	.word	0x2400166e

080012c8 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 80012c8:	2107      	movs	r1, #7
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vSET_7_D+0x8>)
 80012cc:	f001 bce8 	b.w	8002ca0 <setbit>
 80012d0:	24001671 	.word	0x24001671

080012d4 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 80012d4:	2107      	movs	r1, #7
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vSET_7_E+0x8>)
 80012d8:	f001 bce2 	b.w	8002ca0 <setbit>
 80012dc:	24001670 	.word	0x24001670

080012e0 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 80012e0:	2107      	movs	r1, #7
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vSET_7_H+0x8>)
 80012e4:	f001 bcdc 	b.w	8002ca0 <setbit>
 80012e8:	24001673 	.word	0x24001673

080012ec <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 80012ec:	2107      	movs	r1, #7
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vSET_7_L+0x8>)
 80012f0:	f001 bcd6 	b.w	8002ca0 <setbit>
 80012f4:	24001672 	.word	0x24001672

080012f8 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 80012f8:	2107      	movs	r1, #7
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vSET_7_A+0x8>)
 80012fc:	f001 bcd0 	b.w	8002ca0 <setbit>
 8001300:	2400166d 	.word	0x2400166d

08001304 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d08      	ldr	r5, [pc, #32]	; (8001328 <vJR_NC_r8+0x24>)
 8001308:	462c      	mov	r4, r5
 800130a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800130e:	3801      	subs	r0, #1
 8001310:	b280      	uxth	r0, r0
 8001312:	f002 f9d1 	bl	80036b8 <ucGBMemoryRead>
 8001316:	4629      	mov	r1, r5
 8001318:	4602      	mov	r2, r0
 800131a:	4620      	mov	r0, r4
 800131c:	f001 fdca 	bl	8002eb4 <vGBFunctionJR_NC>
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <vJR_NC_r8+0x28>)
 8001322:	7018      	strb	r0, [r3, #0]
 8001324:	bd38      	pop	{r3, r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	2400166c 	.word	0x2400166c
 800132c:	240010a0 	.word	0x240010a0

08001330 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001330:	4901      	ldr	r1, [pc, #4]	; (8001338 <vINC_HL+0x8>)
 8001332:	88c8      	ldrh	r0, [r1, #6]
 8001334:	f001 bdca 	b.w	8002ecc <vMemoryLocationINC>
 8001338:	2400166c 	.word	0x2400166c

0800133c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800133c:	4901      	ldr	r1, [pc, #4]	; (8001344 <vDEC_HL+0x8>)
 800133e:	88c8      	ldrh	r0, [r1, #6]
 8001340:	f001 bdee 	b.w	8002f20 <vMemoryLocationDEC>
 8001344:	2400166c 	.word	0x2400166c

08001348 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001348:	b508      	push	{r3, lr}
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <vSCF+0x20>)
 800134c:	2106      	movs	r1, #6
 800134e:	f001 fcaf 	bl	8002cb0 <resetbit>
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <vSCF+0x20>)
 8001354:	2105      	movs	r1, #5
 8001356:	f001 fcab 	bl	8002cb0 <resetbit>
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <vSCF+0x20>)
 800135c:	2104      	movs	r1, #4
 800135e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001362:	f001 bc9d 	b.w	8002ca0 <setbit>
 8001366:	bf00      	nop
 8001368:	2400166c 	.word	0x2400166c

0800136c <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 800136c:	2100      	movs	r1, #0
 800136e:	4801      	ldr	r0, [pc, #4]	; (8001374 <vRES_0_B+0x8>)
 8001370:	f001 bc9e 	b.w	8002cb0 <resetbit>
 8001374:	2400166f 	.word	0x2400166f

08001378 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 8001378:	2100      	movs	r1, #0
 800137a:	4801      	ldr	r0, [pc, #4]	; (8001380 <vRES_0_C+0x8>)
 800137c:	f001 bc98 	b.w	8002cb0 <resetbit>
 8001380:	2400166e 	.word	0x2400166e

08001384 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 8001384:	2100      	movs	r1, #0
 8001386:	4801      	ldr	r0, [pc, #4]	; (800138c <vRES_0_D+0x8>)
 8001388:	f001 bc92 	b.w	8002cb0 <resetbit>
 800138c:	24001671 	.word	0x24001671

08001390 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 8001390:	2100      	movs	r1, #0
 8001392:	4801      	ldr	r0, [pc, #4]	; (8001398 <vRES_0_E+0x8>)
 8001394:	f001 bc8c 	b.w	8002cb0 <resetbit>
 8001398:	24001670 	.word	0x24001670

0800139c <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 800139c:	2100      	movs	r1, #0
 800139e:	4801      	ldr	r0, [pc, #4]	; (80013a4 <vRES_0_H+0x8>)
 80013a0:	f001 bc86 	b.w	8002cb0 <resetbit>
 80013a4:	24001673 	.word	0x24001673

080013a8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80013a8:	2100      	movs	r1, #0
 80013aa:	4801      	ldr	r0, [pc, #4]	; (80013b0 <vRES_0_L+0x8>)
 80013ac:	f001 bc80 	b.w	8002cb0 <resetbit>
 80013b0:	24001672 	.word	0x24001672

080013b4 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 80013b4:	2100      	movs	r1, #0
 80013b6:	4801      	ldr	r0, [pc, #4]	; (80013bc <vRES_0_A+0x8>)
 80013b8:	f001 bc7a 	b.w	8002cb0 <resetbit>
 80013bc:	2400166d 	.word	0x2400166d

080013c0 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 80013c0:	2101      	movs	r1, #1
 80013c2:	4801      	ldr	r0, [pc, #4]	; (80013c8 <vRES_1_B+0x8>)
 80013c4:	f001 bc74 	b.w	8002cb0 <resetbit>
 80013c8:	2400166f 	.word	0x2400166f

080013cc <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 80013cc:	2101      	movs	r1, #1
 80013ce:	4801      	ldr	r0, [pc, #4]	; (80013d4 <vRES_1_C+0x8>)
 80013d0:	f001 bc6e 	b.w	8002cb0 <resetbit>
 80013d4:	2400166e 	.word	0x2400166e

080013d8 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 80013d8:	2101      	movs	r1, #1
 80013da:	4801      	ldr	r0, [pc, #4]	; (80013e0 <vRES_1_D+0x8>)
 80013dc:	f001 bc68 	b.w	8002cb0 <resetbit>
 80013e0:	24001671 	.word	0x24001671

080013e4 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 80013e4:	2101      	movs	r1, #1
 80013e6:	4801      	ldr	r0, [pc, #4]	; (80013ec <vRES_1_E+0x8>)
 80013e8:	f001 bc62 	b.w	8002cb0 <resetbit>
 80013ec:	24001670 	.word	0x24001670

080013f0 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 80013f0:	2101      	movs	r1, #1
 80013f2:	4801      	ldr	r0, [pc, #4]	; (80013f8 <vRES_1_H+0x8>)
 80013f4:	f001 bc5c 	b.w	8002cb0 <resetbit>
 80013f8:	24001673 	.word	0x24001673

080013fc <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 80013fc:	2101      	movs	r1, #1
 80013fe:	4801      	ldr	r0, [pc, #4]	; (8001404 <vRES_1_L+0x8>)
 8001400:	f001 bc56 	b.w	8002cb0 <resetbit>
 8001404:	24001672 	.word	0x24001672

08001408 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001408:	2101      	movs	r1, #1
 800140a:	4801      	ldr	r0, [pc, #4]	; (8001410 <vRES_1_A+0x8>)
 800140c:	f001 bc50 	b.w	8002cb0 <resetbit>
 8001410:	2400166d 	.word	0x2400166d

08001414 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001414:	2102      	movs	r1, #2
 8001416:	4801      	ldr	r0, [pc, #4]	; (800141c <vRES_2_B+0x8>)
 8001418:	f001 bc4a 	b.w	8002cb0 <resetbit>
 800141c:	2400166f 	.word	0x2400166f

08001420 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001420:	2102      	movs	r1, #2
 8001422:	4801      	ldr	r0, [pc, #4]	; (8001428 <vRES_2_C+0x8>)
 8001424:	f001 bc44 	b.w	8002cb0 <resetbit>
 8001428:	2400166e 	.word	0x2400166e

0800142c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800142c:	2102      	movs	r1, #2
 800142e:	4801      	ldr	r0, [pc, #4]	; (8001434 <vRES_2_D+0x8>)
 8001430:	f001 bc3e 	b.w	8002cb0 <resetbit>
 8001434:	24001671 	.word	0x24001671

08001438 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001438:	2102      	movs	r1, #2
 800143a:	4801      	ldr	r0, [pc, #4]	; (8001440 <vRES_2_E+0x8>)
 800143c:	f001 bc38 	b.w	8002cb0 <resetbit>
 8001440:	24001670 	.word	0x24001670

08001444 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001444:	2102      	movs	r1, #2
 8001446:	4801      	ldr	r0, [pc, #4]	; (800144c <vRES_2_H+0x8>)
 8001448:	f001 bc32 	b.w	8002cb0 <resetbit>
 800144c:	24001673 	.word	0x24001673

08001450 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 8001450:	2102      	movs	r1, #2
 8001452:	4801      	ldr	r0, [pc, #4]	; (8001458 <vRES_2_L+0x8>)
 8001454:	f001 bc2c 	b.w	8002cb0 <resetbit>
 8001458:	24001672 	.word	0x24001672

0800145c <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 800145c:	2102      	movs	r1, #2
 800145e:	4801      	ldr	r0, [pc, #4]	; (8001464 <vRES_2_A+0x8>)
 8001460:	f001 bc26 	b.w	8002cb0 <resetbit>
 8001464:	2400166d 	.word	0x2400166d

08001468 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 8001468:	2103      	movs	r1, #3
 800146a:	4801      	ldr	r0, [pc, #4]	; (8001470 <vRES_3_B+0x8>)
 800146c:	f001 bc20 	b.w	8002cb0 <resetbit>
 8001470:	2400166f 	.word	0x2400166f

08001474 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 8001474:	2103      	movs	r1, #3
 8001476:	4801      	ldr	r0, [pc, #4]	; (800147c <vRES_3_C+0x8>)
 8001478:	f001 bc1a 	b.w	8002cb0 <resetbit>
 800147c:	2400166e 	.word	0x2400166e

08001480 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 8001480:	2103      	movs	r1, #3
 8001482:	4801      	ldr	r0, [pc, #4]	; (8001488 <vRES_3_D+0x8>)
 8001484:	f001 bc14 	b.w	8002cb0 <resetbit>
 8001488:	24001671 	.word	0x24001671

0800148c <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 800148c:	2103      	movs	r1, #3
 800148e:	4801      	ldr	r0, [pc, #4]	; (8001494 <vRES_3_E+0x8>)
 8001490:	f001 bc0e 	b.w	8002cb0 <resetbit>
 8001494:	24001670 	.word	0x24001670

08001498 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 8001498:	2103      	movs	r1, #3
 800149a:	4801      	ldr	r0, [pc, #4]	; (80014a0 <vRES_3_H+0x8>)
 800149c:	f001 bc08 	b.w	8002cb0 <resetbit>
 80014a0:	24001673 	.word	0x24001673

080014a4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80014a4:	2103      	movs	r1, #3
 80014a6:	4801      	ldr	r0, [pc, #4]	; (80014ac <vRES_3_L+0x8>)
 80014a8:	f001 bc02 	b.w	8002cb0 <resetbit>
 80014ac:	24001672 	.word	0x24001672

080014b0 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 80014b0:	2103      	movs	r1, #3
 80014b2:	4801      	ldr	r0, [pc, #4]	; (80014b8 <vRES_3_A+0x8>)
 80014b4:	f001 bbfc 	b.w	8002cb0 <resetbit>
 80014b8:	2400166d 	.word	0x2400166d

080014bc <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 80014bc:	2104      	movs	r1, #4
 80014be:	4801      	ldr	r0, [pc, #4]	; (80014c4 <vRES_4_B+0x8>)
 80014c0:	f001 bbf6 	b.w	8002cb0 <resetbit>
 80014c4:	2400166f 	.word	0x2400166f

080014c8 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 80014c8:	2104      	movs	r1, #4
 80014ca:	4801      	ldr	r0, [pc, #4]	; (80014d0 <vRES_4_C+0x8>)
 80014cc:	f001 bbf0 	b.w	8002cb0 <resetbit>
 80014d0:	2400166e 	.word	0x2400166e

080014d4 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 80014d4:	2104      	movs	r1, #4
 80014d6:	4801      	ldr	r0, [pc, #4]	; (80014dc <vRES_4_D+0x8>)
 80014d8:	f001 bbea 	b.w	8002cb0 <resetbit>
 80014dc:	24001671 	.word	0x24001671

080014e0 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 80014e0:	2104      	movs	r1, #4
 80014e2:	4801      	ldr	r0, [pc, #4]	; (80014e8 <vRES_4_E+0x8>)
 80014e4:	f001 bbe4 	b.w	8002cb0 <resetbit>
 80014e8:	24001670 	.word	0x24001670

080014ec <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 80014ec:	2104      	movs	r1, #4
 80014ee:	4801      	ldr	r0, [pc, #4]	; (80014f4 <vRES_4_H+0x8>)
 80014f0:	f001 bbde 	b.w	8002cb0 <resetbit>
 80014f4:	24001673 	.word	0x24001673

080014f8 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 80014f8:	2104      	movs	r1, #4
 80014fa:	4801      	ldr	r0, [pc, #4]	; (8001500 <vRES_4_L+0x8>)
 80014fc:	f001 bbd8 	b.w	8002cb0 <resetbit>
 8001500:	24001672 	.word	0x24001672

08001504 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001504:	2104      	movs	r1, #4
 8001506:	4801      	ldr	r0, [pc, #4]	; (800150c <vRES_4_A+0x8>)
 8001508:	f001 bbd2 	b.w	8002cb0 <resetbit>
 800150c:	2400166d 	.word	0x2400166d

08001510 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001510:	2105      	movs	r1, #5
 8001512:	4801      	ldr	r0, [pc, #4]	; (8001518 <vRES_5_B+0x8>)
 8001514:	f001 bbcc 	b.w	8002cb0 <resetbit>
 8001518:	2400166f 	.word	0x2400166f

0800151c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800151c:	2105      	movs	r1, #5
 800151e:	4801      	ldr	r0, [pc, #4]	; (8001524 <vRES_5_C+0x8>)
 8001520:	f001 bbc6 	b.w	8002cb0 <resetbit>
 8001524:	2400166e 	.word	0x2400166e

08001528 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001528:	2105      	movs	r1, #5
 800152a:	4801      	ldr	r0, [pc, #4]	; (8001530 <vRES_5_D+0x8>)
 800152c:	f001 bbc0 	b.w	8002cb0 <resetbit>
 8001530:	24001671 	.word	0x24001671

08001534 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001534:	2105      	movs	r1, #5
 8001536:	4801      	ldr	r0, [pc, #4]	; (800153c <vRES_5_E+0x8>)
 8001538:	f001 bbba 	b.w	8002cb0 <resetbit>
 800153c:	24001670 	.word	0x24001670

08001540 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001540:	2105      	movs	r1, #5
 8001542:	4801      	ldr	r0, [pc, #4]	; (8001548 <vRES_5_H+0x8>)
 8001544:	f001 bbb4 	b.w	8002cb0 <resetbit>
 8001548:	24001673 	.word	0x24001673

0800154c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800154c:	2105      	movs	r1, #5
 800154e:	4801      	ldr	r0, [pc, #4]	; (8001554 <vRES_5_L+0x8>)
 8001550:	f001 bbae 	b.w	8002cb0 <resetbit>
 8001554:	24001672 	.word	0x24001672

08001558 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 8001558:	2105      	movs	r1, #5
 800155a:	4801      	ldr	r0, [pc, #4]	; (8001560 <vRES_5_A+0x8>)
 800155c:	f001 bba8 	b.w	8002cb0 <resetbit>
 8001560:	2400166d 	.word	0x2400166d

08001564 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 8001564:	2106      	movs	r1, #6
 8001566:	4801      	ldr	r0, [pc, #4]	; (800156c <vRES_6_B+0x8>)
 8001568:	f001 bba2 	b.w	8002cb0 <resetbit>
 800156c:	2400166f 	.word	0x2400166f

08001570 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 8001570:	2106      	movs	r1, #6
 8001572:	4801      	ldr	r0, [pc, #4]	; (8001578 <vRES_6_C+0x8>)
 8001574:	f001 bb9c 	b.w	8002cb0 <resetbit>
 8001578:	2400166e 	.word	0x2400166e

0800157c <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 800157c:	2106      	movs	r1, #6
 800157e:	4801      	ldr	r0, [pc, #4]	; (8001584 <vRES_6_D+0x8>)
 8001580:	f001 bb96 	b.w	8002cb0 <resetbit>
 8001584:	24001671 	.word	0x24001671

08001588 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 8001588:	2106      	movs	r1, #6
 800158a:	4801      	ldr	r0, [pc, #4]	; (8001590 <vRES_6_E+0x8>)
 800158c:	f001 bb90 	b.w	8002cb0 <resetbit>
 8001590:	24001670 	.word	0x24001670

08001594 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 8001594:	2106      	movs	r1, #6
 8001596:	4801      	ldr	r0, [pc, #4]	; (800159c <vRES_6_H+0x8>)
 8001598:	f001 bb8a 	b.w	8002cb0 <resetbit>
 800159c:	24001673 	.word	0x24001673

080015a0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80015a0:	2106      	movs	r1, #6
 80015a2:	4801      	ldr	r0, [pc, #4]	; (80015a8 <vRES_6_L+0x8>)
 80015a4:	f001 bb84 	b.w	8002cb0 <resetbit>
 80015a8:	24001672 	.word	0x24001672

080015ac <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80015ac:	2106      	movs	r1, #6
 80015ae:	4801      	ldr	r0, [pc, #4]	; (80015b4 <vRES_6_A+0x8>)
 80015b0:	f001 bb7e 	b.w	8002cb0 <resetbit>
 80015b4:	2400166d 	.word	0x2400166d

080015b8 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 80015b8:	2107      	movs	r1, #7
 80015ba:	4801      	ldr	r0, [pc, #4]	; (80015c0 <vRES_7_B+0x8>)
 80015bc:	f001 bb78 	b.w	8002cb0 <resetbit>
 80015c0:	2400166f 	.word	0x2400166f

080015c4 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 80015c4:	2107      	movs	r1, #7
 80015c6:	4801      	ldr	r0, [pc, #4]	; (80015cc <vRES_7_C+0x8>)
 80015c8:	f001 bb72 	b.w	8002cb0 <resetbit>
 80015cc:	2400166e 	.word	0x2400166e

080015d0 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 80015d0:	2107      	movs	r1, #7
 80015d2:	4801      	ldr	r0, [pc, #4]	; (80015d8 <vRES_7_D+0x8>)
 80015d4:	f001 bb6c 	b.w	8002cb0 <resetbit>
 80015d8:	24001671 	.word	0x24001671

080015dc <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 80015dc:	2107      	movs	r1, #7
 80015de:	4801      	ldr	r0, [pc, #4]	; (80015e4 <vRES_7_E+0x8>)
 80015e0:	f001 bb66 	b.w	8002cb0 <resetbit>
 80015e4:	24001670 	.word	0x24001670

080015e8 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 80015e8:	2107      	movs	r1, #7
 80015ea:	4801      	ldr	r0, [pc, #4]	; (80015f0 <vRES_7_H+0x8>)
 80015ec:	f001 bb60 	b.w	8002cb0 <resetbit>
 80015f0:	24001673 	.word	0x24001673

080015f4 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 80015f4:	2107      	movs	r1, #7
 80015f6:	4801      	ldr	r0, [pc, #4]	; (80015fc <vRES_7_L+0x8>)
 80015f8:	f001 bb5a 	b.w	8002cb0 <resetbit>
 80015fc:	24001672 	.word	0x24001672

08001600 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001600:	2107      	movs	r1, #7
 8001602:	4801      	ldr	r0, [pc, #4]	; (8001608 <vRES_7_A+0x8>)
 8001604:	f001 bb54 	b.w	8002cb0 <resetbit>
 8001608:	2400166d 	.word	0x2400166d

0800160c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4d08      	ldr	r5, [pc, #32]	; (8001630 <vJR_C_r8+0x24>)
 8001610:	462c      	mov	r4, r5
 8001612:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001616:	3801      	subs	r0, #1
 8001618:	b280      	uxth	r0, r0
 800161a:	f002 f84d 	bl	80036b8 <ucGBMemoryRead>
 800161e:	4629      	mov	r1, r5
 8001620:	4602      	mov	r2, r0
 8001622:	4620      	mov	r0, r4
 8001624:	f001 fca4 	bl	8002f70 <vGBFunctionJR_C>
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <vJR_C_r8+0x28>)
 800162a:	7018      	strb	r0, [r3, #0]
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	2400166c 	.word	0x2400166c
 8001634:	240010a0 	.word	0x240010a0

08001638 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001638:	4902      	ldr	r1, [pc, #8]	; (8001644 <vADD_A_B+0xc>)
 800163a:	78ca      	ldrb	r2, [r1, #3]
 800163c:	1c48      	adds	r0, r1, #1
 800163e:	f001 bca3 	b.w	8002f88 <vGBFunctionADD>
 8001642:	bf00      	nop
 8001644:	2400166c 	.word	0x2400166c

08001648 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001648:	4902      	ldr	r1, [pc, #8]	; (8001654 <vADD_A_C+0xc>)
 800164a:	788a      	ldrb	r2, [r1, #2]
 800164c:	1c48      	adds	r0, r1, #1
 800164e:	f001 bc9b 	b.w	8002f88 <vGBFunctionADD>
 8001652:	bf00      	nop
 8001654:	2400166c 	.word	0x2400166c

08001658 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 8001658:	4902      	ldr	r1, [pc, #8]	; (8001664 <vADD_A_D+0xc>)
 800165a:	794a      	ldrb	r2, [r1, #5]
 800165c:	1c48      	adds	r0, r1, #1
 800165e:	f001 bc93 	b.w	8002f88 <vGBFunctionADD>
 8001662:	bf00      	nop
 8001664:	2400166c 	.word	0x2400166c

08001668 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 8001668:	4902      	ldr	r1, [pc, #8]	; (8001674 <vADD_A_E+0xc>)
 800166a:	790a      	ldrb	r2, [r1, #4]
 800166c:	1c48      	adds	r0, r1, #1
 800166e:	f001 bc8b 	b.w	8002f88 <vGBFunctionADD>
 8001672:	bf00      	nop
 8001674:	2400166c 	.word	0x2400166c

08001678 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 8001678:	4902      	ldr	r1, [pc, #8]	; (8001684 <vADD_A_H+0xc>)
 800167a:	79ca      	ldrb	r2, [r1, #7]
 800167c:	1c48      	adds	r0, r1, #1
 800167e:	f001 bc83 	b.w	8002f88 <vGBFunctionADD>
 8001682:	bf00      	nop
 8001684:	2400166c 	.word	0x2400166c

08001688 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 8001688:	4902      	ldr	r1, [pc, #8]	; (8001694 <vADD_A_L+0xc>)
 800168a:	798a      	ldrb	r2, [r1, #6]
 800168c:	1c48      	adds	r0, r1, #1
 800168e:	f001 bc7b 	b.w	8002f88 <vGBFunctionADD>
 8001692:	bf00      	nop
 8001694:	2400166c 	.word	0x2400166c

08001698 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001698:	b510      	push	{r4, lr}
 800169a:	4c05      	ldr	r4, [pc, #20]	; (80016b0 <vADD_A_HL+0x18>)
 800169c:	88e0      	ldrh	r0, [r4, #6]
 800169e:	f002 f80b 	bl	80036b8 <ucGBMemoryRead>
 80016a2:	4621      	mov	r1, r4
 80016a4:	4602      	mov	r2, r0
 80016a6:	1c60      	adds	r0, r4, #1
 80016a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ac:	f001 bc6c 	b.w	8002f88 <vGBFunctionADD>
 80016b0:	2400166c 	.word	0x2400166c

080016b4 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <vADD_A_A+0xc>)
 80016b6:	4601      	mov	r1, r0
 80016b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016bc:	f001 bc64 	b.w	8002f88 <vGBFunctionADD>
 80016c0:	2400166c 	.word	0x2400166c

080016c4 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4c06      	ldr	r4, [pc, #24]	; (80016e0 <vADD_A_d8+0x1c>)
 80016c8:	8960      	ldrh	r0, [r4, #10]
 80016ca:	3801      	subs	r0, #1
 80016cc:	b280      	uxth	r0, r0
 80016ce:	f001 fff3 	bl	80036b8 <ucGBMemoryRead>
 80016d2:	4621      	mov	r1, r4
 80016d4:	4602      	mov	r2, r0
 80016d6:	1c60      	adds	r0, r4, #1
 80016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016dc:	f001 bc54 	b.w	8002f88 <vGBFunctionADD>
 80016e0:	2400166c 	.word	0x2400166c

080016e4 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 80016e4:	4902      	ldr	r1, [pc, #8]	; (80016f0 <vADC_A_B+0xc>)
 80016e6:	78ca      	ldrb	r2, [r1, #3]
 80016e8:	1c48      	adds	r0, r1, #1
 80016ea:	f001 bc7b 	b.w	8002fe4 <vGBFunctionADC>
 80016ee:	bf00      	nop
 80016f0:	2400166c 	.word	0x2400166c

080016f4 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 80016f4:	4902      	ldr	r1, [pc, #8]	; (8001700 <vADC_A_C+0xc>)
 80016f6:	788a      	ldrb	r2, [r1, #2]
 80016f8:	1c48      	adds	r0, r1, #1
 80016fa:	f001 bc73 	b.w	8002fe4 <vGBFunctionADC>
 80016fe:	bf00      	nop
 8001700:	2400166c 	.word	0x2400166c

08001704 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001704:	4902      	ldr	r1, [pc, #8]	; (8001710 <vADC_A_D+0xc>)
 8001706:	794a      	ldrb	r2, [r1, #5]
 8001708:	1c48      	adds	r0, r1, #1
 800170a:	f001 bc6b 	b.w	8002fe4 <vGBFunctionADC>
 800170e:	bf00      	nop
 8001710:	2400166c 	.word	0x2400166c

08001714 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001714:	4902      	ldr	r1, [pc, #8]	; (8001720 <vADC_A_E+0xc>)
 8001716:	790a      	ldrb	r2, [r1, #4]
 8001718:	1c48      	adds	r0, r1, #1
 800171a:	f001 bc63 	b.w	8002fe4 <vGBFunctionADC>
 800171e:	bf00      	nop
 8001720:	2400166c 	.word	0x2400166c

08001724 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001724:	4902      	ldr	r1, [pc, #8]	; (8001730 <vADC_A_H+0xc>)
 8001726:	79ca      	ldrb	r2, [r1, #7]
 8001728:	1c48      	adds	r0, r1, #1
 800172a:	f001 bc5b 	b.w	8002fe4 <vGBFunctionADC>
 800172e:	bf00      	nop
 8001730:	2400166c 	.word	0x2400166c

08001734 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001734:	4902      	ldr	r1, [pc, #8]	; (8001740 <vADC_A_L+0xc>)
 8001736:	798a      	ldrb	r2, [r1, #6]
 8001738:	1c48      	adds	r0, r1, #1
 800173a:	f001 bc53 	b.w	8002fe4 <vGBFunctionADC>
 800173e:	bf00      	nop
 8001740:	2400166c 	.word	0x2400166c

08001744 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001744:	b510      	push	{r4, lr}
 8001746:	4c05      	ldr	r4, [pc, #20]	; (800175c <vADC_A_HL+0x18>)
 8001748:	88e0      	ldrh	r0, [r4, #6]
 800174a:	f001 ffb5 	bl	80036b8 <ucGBMemoryRead>
 800174e:	4621      	mov	r1, r4
 8001750:	4602      	mov	r2, r0
 8001752:	1c60      	adds	r0, r4, #1
 8001754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001758:	f001 bc44 	b.w	8002fe4 <vGBFunctionADC>
 800175c:	2400166c 	.word	0x2400166c

08001760 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <vADC_A_A+0xc>)
 8001762:	4601      	mov	r1, r0
 8001764:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001768:	f001 bc3c 	b.w	8002fe4 <vGBFunctionADC>
 800176c:	2400166c 	.word	0x2400166c

08001770 <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001770:	b510      	push	{r4, lr}
 8001772:	4c06      	ldr	r4, [pc, #24]	; (800178c <vADC_A_d8+0x1c>)
 8001774:	8960      	ldrh	r0, [r4, #10]
 8001776:	3801      	subs	r0, #1
 8001778:	b280      	uxth	r0, r0
 800177a:	f001 ff9d 	bl	80036b8 <ucGBMemoryRead>
 800177e:	4621      	mov	r1, r4
 8001780:	4602      	mov	r2, r0
 8001782:	1c60      	adds	r0, r4, #1
 8001784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001788:	f001 bc2c 	b.w	8002fe4 <vGBFunctionADC>
 800178c:	2400166c 	.word	0x2400166c

08001790 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 8001790:	4902      	ldr	r1, [pc, #8]	; (800179c <vSUB_B+0xc>)
 8001792:	78ca      	ldrb	r2, [r1, #3]
 8001794:	1c48      	adds	r0, r1, #1
 8001796:	f001 bc57 	b.w	8003048 <vGBFunctionSUB>
 800179a:	bf00      	nop
 800179c:	2400166c 	.word	0x2400166c

080017a0 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80017a0:	4902      	ldr	r1, [pc, #8]	; (80017ac <vSUB_C+0xc>)
 80017a2:	788a      	ldrb	r2, [r1, #2]
 80017a4:	1c48      	adds	r0, r1, #1
 80017a6:	f001 bc4f 	b.w	8003048 <vGBFunctionSUB>
 80017aa:	bf00      	nop
 80017ac:	2400166c 	.word	0x2400166c

080017b0 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80017b0:	4902      	ldr	r1, [pc, #8]	; (80017bc <vSUB_D+0xc>)
 80017b2:	794a      	ldrb	r2, [r1, #5]
 80017b4:	1c48      	adds	r0, r1, #1
 80017b6:	f001 bc47 	b.w	8003048 <vGBFunctionSUB>
 80017ba:	bf00      	nop
 80017bc:	2400166c 	.word	0x2400166c

080017c0 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80017c0:	4902      	ldr	r1, [pc, #8]	; (80017cc <vSUB_E+0xc>)
 80017c2:	790a      	ldrb	r2, [r1, #4]
 80017c4:	1c48      	adds	r0, r1, #1
 80017c6:	f001 bc3f 	b.w	8003048 <vGBFunctionSUB>
 80017ca:	bf00      	nop
 80017cc:	2400166c 	.word	0x2400166c

080017d0 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 80017d0:	4902      	ldr	r1, [pc, #8]	; (80017dc <vSUB_H+0xc>)
 80017d2:	79ca      	ldrb	r2, [r1, #7]
 80017d4:	1c48      	adds	r0, r1, #1
 80017d6:	f001 bc37 	b.w	8003048 <vGBFunctionSUB>
 80017da:	bf00      	nop
 80017dc:	2400166c 	.word	0x2400166c

080017e0 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 80017e0:	4902      	ldr	r1, [pc, #8]	; (80017ec <vSUB_L+0xc>)
 80017e2:	798a      	ldrb	r2, [r1, #6]
 80017e4:	1c48      	adds	r0, r1, #1
 80017e6:	f001 bc2f 	b.w	8003048 <vGBFunctionSUB>
 80017ea:	bf00      	nop
 80017ec:	2400166c 	.word	0x2400166c

080017f0 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017f0:	b510      	push	{r4, lr}
 80017f2:	4c05      	ldr	r4, [pc, #20]	; (8001808 <vSUB_HL+0x18>)
 80017f4:	88e0      	ldrh	r0, [r4, #6]
 80017f6:	f001 ff5f 	bl	80036b8 <ucGBMemoryRead>
 80017fa:	4621      	mov	r1, r4
 80017fc:	4602      	mov	r2, r0
 80017fe:	1c60      	adds	r0, r4, #1
 8001800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001804:	f001 bc20 	b.w	8003048 <vGBFunctionSUB>
 8001808:	2400166c 	.word	0x2400166c

0800180c <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <vSUB_A+0xc>)
 800180e:	4601      	mov	r1, r0
 8001810:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001814:	f001 bc18 	b.w	8003048 <vGBFunctionSUB>
 8001818:	2400166c 	.word	0x2400166c

0800181c <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800181c:	b510      	push	{r4, lr}
 800181e:	4c06      	ldr	r4, [pc, #24]	; (8001838 <vSUB_d8+0x1c>)
 8001820:	8960      	ldrh	r0, [r4, #10]
 8001822:	3801      	subs	r0, #1
 8001824:	b280      	uxth	r0, r0
 8001826:	f001 ff47 	bl	80036b8 <ucGBMemoryRead>
 800182a:	4621      	mov	r1, r4
 800182c:	4602      	mov	r2, r0
 800182e:	1c60      	adds	r0, r4, #1
 8001830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001834:	f001 bc08 	b.w	8003048 <vGBFunctionSUB>
 8001838:	2400166c 	.word	0x2400166c

0800183c <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 800183c:	4902      	ldr	r1, [pc, #8]	; (8001848 <vSBC_A_B+0xc>)
 800183e:	78ca      	ldrb	r2, [r1, #3]
 8001840:	1c48      	adds	r0, r1, #1
 8001842:	f001 bc37 	b.w	80030b4 <vGBFunctionSBC>
 8001846:	bf00      	nop
 8001848:	2400166c 	.word	0x2400166c

0800184c <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 800184c:	4902      	ldr	r1, [pc, #8]	; (8001858 <vSBC_A_C+0xc>)
 800184e:	788a      	ldrb	r2, [r1, #2]
 8001850:	1c48      	adds	r0, r1, #1
 8001852:	f001 bc2f 	b.w	80030b4 <vGBFunctionSBC>
 8001856:	bf00      	nop
 8001858:	2400166c 	.word	0x2400166c

0800185c <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 800185c:	4902      	ldr	r1, [pc, #8]	; (8001868 <vSBC_A_D+0xc>)
 800185e:	794a      	ldrb	r2, [r1, #5]
 8001860:	1c48      	adds	r0, r1, #1
 8001862:	f001 bc27 	b.w	80030b4 <vGBFunctionSBC>
 8001866:	bf00      	nop
 8001868:	2400166c 	.word	0x2400166c

0800186c <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 800186c:	4902      	ldr	r1, [pc, #8]	; (8001878 <vSBC_A_E+0xc>)
 800186e:	790a      	ldrb	r2, [r1, #4]
 8001870:	1c48      	adds	r0, r1, #1
 8001872:	f001 bc1f 	b.w	80030b4 <vGBFunctionSBC>
 8001876:	bf00      	nop
 8001878:	2400166c 	.word	0x2400166c

0800187c <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 800187c:	4902      	ldr	r1, [pc, #8]	; (8001888 <vSBC_A_H+0xc>)
 800187e:	79ca      	ldrb	r2, [r1, #7]
 8001880:	1c48      	adds	r0, r1, #1
 8001882:	f001 bc17 	b.w	80030b4 <vGBFunctionSBC>
 8001886:	bf00      	nop
 8001888:	2400166c 	.word	0x2400166c

0800188c <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 800188c:	4902      	ldr	r1, [pc, #8]	; (8001898 <vSBC_A_L+0xc>)
 800188e:	798a      	ldrb	r2, [r1, #6]
 8001890:	1c48      	adds	r0, r1, #1
 8001892:	f001 bc0f 	b.w	80030b4 <vGBFunctionSBC>
 8001896:	bf00      	nop
 8001898:	2400166c 	.word	0x2400166c

0800189c <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800189c:	b510      	push	{r4, lr}
 800189e:	4c05      	ldr	r4, [pc, #20]	; (80018b4 <vSBC_A_HL+0x18>)
 80018a0:	88e0      	ldrh	r0, [r4, #6]
 80018a2:	f001 ff09 	bl	80036b8 <ucGBMemoryRead>
 80018a6:	4621      	mov	r1, r4
 80018a8:	4602      	mov	r2, r0
 80018aa:	1c60      	adds	r0, r4, #1
 80018ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b0:	f001 bc00 	b.w	80030b4 <vGBFunctionSBC>
 80018b4:	2400166c 	.word	0x2400166c

080018b8 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <vSBC_A_A+0xc>)
 80018ba:	4601      	mov	r1, r0
 80018bc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80018c0:	f001 bbf8 	b.w	80030b4 <vGBFunctionSBC>
 80018c4:	2400166c 	.word	0x2400166c

080018c8 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c8:	b510      	push	{r4, lr}
 80018ca:	4c06      	ldr	r4, [pc, #24]	; (80018e4 <vSBC_A_d8+0x1c>)
 80018cc:	8960      	ldrh	r0, [r4, #10]
 80018ce:	3801      	subs	r0, #1
 80018d0:	b280      	uxth	r0, r0
 80018d2:	f001 fef1 	bl	80036b8 <ucGBMemoryRead>
 80018d6:	4621      	mov	r1, r4
 80018d8:	4602      	mov	r2, r0
 80018da:	1c60      	adds	r0, r4, #1
 80018dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018e0:	f001 bbe8 	b.w	80030b4 <vGBFunctionSBC>
 80018e4:	2400166c 	.word	0x2400166c

080018e8 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 80018e8:	4902      	ldr	r1, [pc, #8]	; (80018f4 <vCP_B+0xc>)
 80018ea:	78ca      	ldrb	r2, [r1, #3]
 80018ec:	7848      	ldrb	r0, [r1, #1]
 80018ee:	f001 bc19 	b.w	8003124 <vGBFunctionCP>
 80018f2:	bf00      	nop
 80018f4:	2400166c 	.word	0x2400166c

080018f8 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 80018f8:	4902      	ldr	r1, [pc, #8]	; (8001904 <vCP_C+0xc>)
 80018fa:	788a      	ldrb	r2, [r1, #2]
 80018fc:	7848      	ldrb	r0, [r1, #1]
 80018fe:	f001 bc11 	b.w	8003124 <vGBFunctionCP>
 8001902:	bf00      	nop
 8001904:	2400166c 	.word	0x2400166c

08001908 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001908:	4902      	ldr	r1, [pc, #8]	; (8001914 <vCP_D+0xc>)
 800190a:	794a      	ldrb	r2, [r1, #5]
 800190c:	7848      	ldrb	r0, [r1, #1]
 800190e:	f001 bc09 	b.w	8003124 <vGBFunctionCP>
 8001912:	bf00      	nop
 8001914:	2400166c 	.word	0x2400166c

08001918 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001918:	4902      	ldr	r1, [pc, #8]	; (8001924 <vCP_E+0xc>)
 800191a:	790a      	ldrb	r2, [r1, #4]
 800191c:	7848      	ldrb	r0, [r1, #1]
 800191e:	f001 bc01 	b.w	8003124 <vGBFunctionCP>
 8001922:	bf00      	nop
 8001924:	2400166c 	.word	0x2400166c

08001928 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001928:	4902      	ldr	r1, [pc, #8]	; (8001934 <vCP_H+0xc>)
 800192a:	79ca      	ldrb	r2, [r1, #7]
 800192c:	7848      	ldrb	r0, [r1, #1]
 800192e:	f001 bbf9 	b.w	8003124 <vGBFunctionCP>
 8001932:	bf00      	nop
 8001934:	2400166c 	.word	0x2400166c

08001938 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001938:	4902      	ldr	r1, [pc, #8]	; (8001944 <vCP_L+0xc>)
 800193a:	798a      	ldrb	r2, [r1, #6]
 800193c:	7848      	ldrb	r0, [r1, #1]
 800193e:	f001 bbf1 	b.w	8003124 <vGBFunctionCP>
 8001942:	bf00      	nop
 8001944:	2400166c 	.word	0x2400166c

08001948 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001948:	b538      	push	{r3, r4, r5, lr}
 800194a:	4c06      	ldr	r4, [pc, #24]	; (8001964 <vCP_HL+0x1c>)
 800194c:	7865      	ldrb	r5, [r4, #1]
 800194e:	88e0      	ldrh	r0, [r4, #6]
 8001950:	f001 feb2 	bl	80036b8 <ucGBMemoryRead>
 8001954:	4621      	mov	r1, r4
 8001956:	4602      	mov	r2, r0
 8001958:	4628      	mov	r0, r5
 800195a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195e:	f001 bbe1 	b.w	8003124 <vGBFunctionCP>
 8001962:	bf00      	nop
 8001964:	2400166c 	.word	0x2400166c

08001968 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 8001968:	4902      	ldr	r1, [pc, #8]	; (8001974 <vCP_A+0xc>)
 800196a:	784a      	ldrb	r2, [r1, #1]
 800196c:	4610      	mov	r0, r2
 800196e:	f001 bbd9 	b.w	8003124 <vGBFunctionCP>
 8001972:	bf00      	nop
 8001974:	2400166c 	.word	0x2400166c

08001978 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4c07      	ldr	r4, [pc, #28]	; (8001998 <vCP_d8+0x20>)
 800197c:	8960      	ldrh	r0, [r4, #10]
 800197e:	7865      	ldrb	r5, [r4, #1]
 8001980:	3801      	subs	r0, #1
 8001982:	b280      	uxth	r0, r0
 8001984:	f001 fe98 	bl	80036b8 <ucGBMemoryRead>
 8001988:	4621      	mov	r1, r4
 800198a:	4602      	mov	r2, r0
 800198c:	4628      	mov	r0, r5
 800198e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001992:	f001 bbc7 	b.w	8003124 <vGBFunctionCP>
 8001996:	bf00      	nop
 8001998:	2400166c 	.word	0x2400166c

0800199c <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 800199c:	4901      	ldr	r1, [pc, #4]	; (80019a4 <vRET+0x8>)
 800199e:	1e88      	subs	r0, r1, #2
 80019a0:	f001 bbde 	b.w	8003160 <vGBFunctionRET>
 80019a4:	24001676 	.word	0x24001676

080019a8 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <vRETI+0x10>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <vRETI+0x14>)
 80019ae:	1e88      	subs	r0, r1, #2
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	f001 bbd5 	b.w	8003160 <vGBFunctionRET>
 80019b6:	bf00      	nop
 80019b8:	24001676 	.word	0x24001676
 80019bc:	240010ab 	.word	0x240010ab

080019c0 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80019c0:	4901      	ldr	r1, [pc, #4]	; (80019c8 <vPOP_BC+0x8>)
 80019c2:	1d88      	adds	r0, r1, #6
 80019c4:	f001 bbe0 	b.w	8003188 <vGBFunctionPOP>
 80019c8:	2400166e 	.word	0x2400166e

080019cc <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 80019cc:	4901      	ldr	r1, [pc, #4]	; (80019d4 <vPOP_DE+0x8>)
 80019ce:	1d08      	adds	r0, r1, #4
 80019d0:	f001 bbda 	b.w	8003188 <vGBFunctionPOP>
 80019d4:	24001670 	.word	0x24001670

080019d8 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 80019d8:	4901      	ldr	r1, [pc, #4]	; (80019e0 <vPOP_HL+0x8>)
 80019da:	1c88      	adds	r0, r1, #2
 80019dc:	f001 bbd4 	b.w	8003188 <vGBFunctionPOP>
 80019e0:	24001672 	.word	0x24001672

080019e4 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 80019e4:	b510      	push	{r4, lr}
 80019e6:	4c05      	ldr	r4, [pc, #20]	; (80019fc <vPOP_AF+0x18>)
 80019e8:	4621      	mov	r1, r4
 80019ea:	f104 0008 	add.w	r0, r4, #8
 80019ee:	f001 fbcb 	bl	8003188 <vGBFunctionPOP>
 80019f2:	8823      	ldrh	r3, [r4, #0]
 80019f4:	f023 030f 	bic.w	r3, r3, #15
 80019f8:	8023      	strh	r3, [r4, #0]
 80019fa:	bd10      	pop	{r4, pc}
 80019fc:	2400166c 	.word	0x2400166c

08001a00 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	4d0d      	ldr	r5, [pc, #52]	; (8001a38 <vJP_NZ_a16+0x38>)
 8001a04:	8968      	ldrh	r0, [r5, #10]
 8001a06:	462c      	mov	r4, r5
 8001a08:	3802      	subs	r0, #2
 8001a0a:	b280      	uxth	r0, r0
 8001a0c:	f001 fe54 	bl	80036b8 <ucGBMemoryRead>
 8001a10:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001a14:	4606      	mov	r6, r0
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	b280      	uxth	r0, r0
 8001a1a:	f001 fe4d 	bl	80036b8 <ucGBMemoryRead>
 8001a1e:	4601      	mov	r1, r0
 8001a20:	4630      	mov	r0, r6
 8001a22:	f001 f939 	bl	8002c98 <concat_16bit_bigEndian>
 8001a26:	4629      	mov	r1, r5
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f001 fbae 	bl	800318c <vGBFunctionJP_NZ_a16>
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <vJP_NZ_a16+0x3c>)
 8001a32:	7018      	strb	r0, [r3, #0]
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
 8001a36:	bf00      	nop
 8001a38:	2400166c 	.word	0x2400166c
 8001a3c:	240010a0 	.word	0x240010a0

08001a40 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <vCALL_NZ_a16+0x14>)
 8001a42:	b508      	push	{r3, lr}
 8001a44:	f1a2 0108 	sub.w	r1, r2, #8
 8001a48:	1c90      	adds	r0, r2, #2
 8001a4a:	f001 fbbb 	bl	80031c4 <vGBFunctionCALL_NZ_a16>
 8001a4e:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <vCALL_NZ_a16+0x18>)
 8001a50:	7018      	strb	r0, [r3, #0]
 8001a52:	bd08      	pop	{r3, pc}
 8001a54:	24001674 	.word	0x24001674
 8001a58:	240010a0 	.word	0x240010a0

08001a5c <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001a5c:	4901      	ldr	r1, [pc, #4]	; (8001a64 <vPUSH_BC+0x8>)
 8001a5e:	1d88      	adds	r0, r1, #6
 8001a60:	f001 bb9c 	b.w	800319c <vGBFunctionPUSH>
 8001a64:	2400166e 	.word	0x2400166e

08001a68 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	4c04      	ldr	r4, [pc, #16]	; (8001a7c <vRST_00H+0x14>)
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	1ea0      	subs	r0, r4, #2
 8001a70:	f001 fb94 	bl	800319c <vGBFunctionPUSH>
 8001a74:	3c0a      	subs	r4, #10
 8001a76:	2300      	movs	r3, #0
 8001a78:	8163      	strh	r3, [r4, #10]
 8001a7a:	bd10      	pop	{r4, pc}
 8001a7c:	24001676 	.word	0x24001676

08001a80 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8001a80:	490b      	ldr	r1, [pc, #44]	; (8001ab0 <vCALL_a16+0x30>)
 8001a82:	b538      	push	{r3, r4, r5, lr}
 8001a84:	460c      	mov	r4, r1
 8001a86:	1e88      	subs	r0, r1, #2
 8001a88:	f001 fb88 	bl	800319c <vGBFunctionPUSH>
 8001a8c:	f834 090a 	ldrh.w	r0, [r4], #-10
 8001a90:	3802      	subs	r0, #2
 8001a92:	b280      	uxth	r0, r0
 8001a94:	f001 fe10 	bl	80036b8 <ucGBMemoryRead>
 8001a98:	8963      	ldrh	r3, [r4, #10]
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	1e58      	subs	r0, r3, #1
 8001a9e:	b280      	uxth	r0, r0
 8001aa0:	f001 fe0a 	bl	80036b8 <ucGBMemoryRead>
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f001 f8f6 	bl	8002c98 <concat_16bit_bigEndian>
 8001aac:	8160      	strh	r0, [r4, #10]
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
 8001ab0:	24001676 	.word	0x24001676

08001ab4 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4c04      	ldr	r4, [pc, #16]	; (8001ac8 <vRST_08H+0x14>)
 8001ab8:	4621      	mov	r1, r4
 8001aba:	1ea0      	subs	r0, r4, #2
 8001abc:	f001 fb6e 	bl	800319c <vGBFunctionPUSH>
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	8023      	strh	r3, [r4, #0]
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24001676 	.word	0x24001676

08001acc <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001acc:	4901      	ldr	r1, [pc, #4]	; (8001ad4 <vPUSH_DE+0x8>)
 8001ace:	1d08      	adds	r0, r1, #4
 8001ad0:	f001 bb64 	b.w	800319c <vGBFunctionPUSH>
 8001ad4:	24001670 	.word	0x24001670

08001ad8 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4c04      	ldr	r4, [pc, #16]	; (8001aec <vRST_10H+0x14>)
 8001adc:	4621      	mov	r1, r4
 8001ade:	1ea0      	subs	r0, r4, #2
 8001ae0:	f001 fb5c 	bl	800319c <vGBFunctionPUSH>
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	8023      	strh	r3, [r4, #0]
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	24001676 	.word	0x24001676

08001af0 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001af0:	b510      	push	{r4, lr}
 8001af2:	4c04      	ldr	r4, [pc, #16]	; (8001b04 <vRST_18H+0x14>)
 8001af4:	4621      	mov	r1, r4
 8001af6:	1ea0      	subs	r0, r4, #2
 8001af8:	f001 fb50 	bl	800319c <vGBFunctionPUSH>
 8001afc:	2318      	movs	r3, #24
 8001afe:	8023      	strh	r3, [r4, #0]
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	bf00      	nop
 8001b04:	24001676 	.word	0x24001676

08001b08 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001b08:	4901      	ldr	r1, [pc, #4]	; (8001b10 <vPUSH_HL+0x8>)
 8001b0a:	1c88      	adds	r0, r1, #2
 8001b0c:	f001 bb46 	b.w	800319c <vGBFunctionPUSH>
 8001b10:	24001672 	.word	0x24001672

08001b14 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001b14:	b510      	push	{r4, lr}
 8001b16:	4c04      	ldr	r4, [pc, #16]	; (8001b28 <vRST20H+0x14>)
 8001b18:	4621      	mov	r1, r4
 8001b1a:	1ea0      	subs	r0, r4, #2
 8001b1c:	f001 fb3e 	bl	800319c <vGBFunctionPUSH>
 8001b20:	2320      	movs	r3, #32
 8001b22:	8023      	strh	r3, [r4, #0]
 8001b24:	bd10      	pop	{r4, pc}
 8001b26:	bf00      	nop
 8001b28:	24001676 	.word	0x24001676

08001b2c <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	4c04      	ldr	r4, [pc, #16]	; (8001b40 <vRST_28H+0x14>)
 8001b30:	4621      	mov	r1, r4
 8001b32:	1ea0      	subs	r0, r4, #2
 8001b34:	f001 fb32 	bl	800319c <vGBFunctionPUSH>
 8001b38:	2328      	movs	r3, #40	; 0x28
 8001b3a:	8023      	strh	r3, [r4, #0]
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	24001676 	.word	0x24001676

08001b44 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001b44:	4902      	ldr	r1, [pc, #8]	; (8001b50 <vPUSH_AF+0xc>)
 8001b46:	f101 0008 	add.w	r0, r1, #8
 8001b4a:	f001 bb27 	b.w	800319c <vGBFunctionPUSH>
 8001b4e:	bf00      	nop
 8001b50:	2400166c 	.word	0x2400166c

08001b54 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001b54:	b510      	push	{r4, lr}
 8001b56:	4c04      	ldr	r4, [pc, #16]	; (8001b68 <vRST_30H+0x14>)
 8001b58:	4621      	mov	r1, r4
 8001b5a:	1ea0      	subs	r0, r4, #2
 8001b5c:	f001 fb1e 	bl	800319c <vGBFunctionPUSH>
 8001b60:	2330      	movs	r3, #48	; 0x30
 8001b62:	8023      	strh	r3, [r4, #0]
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	24001676 	.word	0x24001676

08001b6c <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	4c04      	ldr	r4, [pc, #16]	; (8001b80 <vRST_38H+0x14>)
 8001b70:	4621      	mov	r1, r4
 8001b72:	1ea0      	subs	r0, r4, #2
 8001b74:	f001 fb12 	bl	800319c <vGBFunctionPUSH>
 8001b78:	2338      	movs	r3, #56	; 0x38
 8001b7a:	8023      	strh	r3, [r4, #0]
 8001b7c:	bd10      	pop	{r4, pc}
 8001b7e:	bf00      	nop
 8001b80:	24001676 	.word	0x24001676

08001b84 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	4d0d      	ldr	r5, [pc, #52]	; (8001bbc <vJP_Z_a16+0x38>)
 8001b88:	8968      	ldrh	r0, [r5, #10]
 8001b8a:	462c      	mov	r4, r5
 8001b8c:	3802      	subs	r0, #2
 8001b8e:	b280      	uxth	r0, r0
 8001b90:	f001 fd92 	bl	80036b8 <ucGBMemoryRead>
 8001b94:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b98:	4606      	mov	r6, r0
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	b280      	uxth	r0, r0
 8001b9e:	f001 fd8b 	bl	80036b8 <ucGBMemoryRead>
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f001 f877 	bl	8002c98 <concat_16bit_bigEndian>
 8001baa:	4629      	mov	r1, r5
 8001bac:	4602      	mov	r2, r0
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f001 fb24 	bl	80031fc <vGBFunctionJP_Z_a16>
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <vJP_Z_a16+0x3c>)
 8001bb6:	7018      	strb	r0, [r3, #0]
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	bf00      	nop
 8001bbc:	2400166c 	.word	0x2400166c
 8001bc0:	240010a0 	.word	0x240010a0

08001bc4 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <vCALL_Z_a16+0x14>)
 8001bc6:	b508      	push	{r3, lr}
 8001bc8:	f1a2 0108 	sub.w	r1, r2, #8
 8001bcc:	1c90      	adds	r0, r2, #2
 8001bce:	f001 fb1d 	bl	800320c <vGBFunctionCALL_Z_a16>
 8001bd2:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <vCALL_Z_a16+0x18>)
 8001bd4:	7018      	strb	r0, [r3, #0]
 8001bd6:	bd08      	pop	{r3, pc}
 8001bd8:	24001674 	.word	0x24001674
 8001bdc:	240010a0 	.word	0x240010a0

08001be0 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	4d0d      	ldr	r5, [pc, #52]	; (8001c18 <vJP_NC_a16+0x38>)
 8001be4:	8968      	ldrh	r0, [r5, #10]
 8001be6:	462c      	mov	r4, r5
 8001be8:	3802      	subs	r0, #2
 8001bea:	b280      	uxth	r0, r0
 8001bec:	f001 fd64 	bl	80036b8 <ucGBMemoryRead>
 8001bf0:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001bf4:	4606      	mov	r6, r0
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	b280      	uxth	r0, r0
 8001bfa:	f001 fd5d 	bl	80036b8 <ucGBMemoryRead>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4630      	mov	r0, r6
 8001c02:	f001 f849 	bl	8002c98 <concat_16bit_bigEndian>
 8001c06:	4629      	mov	r1, r5
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f001 fb1a 	bl	8003244 <vGBFunctionJP_NC_a16>
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <vJP_NC_a16+0x3c>)
 8001c12:	7018      	strb	r0, [r3, #0]
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
 8001c16:	bf00      	nop
 8001c18:	2400166c 	.word	0x2400166c
 8001c1c:	240010a0 	.word	0x240010a0

08001c20 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <vCALL_NC_a16+0x14>)
 8001c22:	b508      	push	{r3, lr}
 8001c24:	f1a2 0108 	sub.w	r1, r2, #8
 8001c28:	1c90      	adds	r0, r2, #2
 8001c2a:	f001 fb13 	bl	8003254 <vGBFunctionCALL_NC_a16>
 8001c2e:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <vCALL_NC_a16+0x18>)
 8001c30:	7018      	strb	r0, [r3, #0]
 8001c32:	bd08      	pop	{r3, pc}
 8001c34:	24001674 	.word	0x24001674
 8001c38:	240010a0 	.word	0x240010a0

08001c3c <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4d0d      	ldr	r5, [pc, #52]	; (8001c74 <vJP_C_a16+0x38>)
 8001c40:	8968      	ldrh	r0, [r5, #10]
 8001c42:	462c      	mov	r4, r5
 8001c44:	3802      	subs	r0, #2
 8001c46:	b280      	uxth	r0, r0
 8001c48:	f001 fd36 	bl	80036b8 <ucGBMemoryRead>
 8001c4c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001c50:	4606      	mov	r6, r0
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	b280      	uxth	r0, r0
 8001c56:	f001 fd2f 	bl	80036b8 <ucGBMemoryRead>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f001 f81b 	bl	8002c98 <concat_16bit_bigEndian>
 8001c62:	4629      	mov	r1, r5
 8001c64:	4602      	mov	r2, r0
 8001c66:	4620      	mov	r0, r4
 8001c68:	f001 fb10 	bl	800328c <vGBFunctionJP_C_a16>
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <vJP_C_a16+0x3c>)
 8001c6e:	7018      	strb	r0, [r3, #0]
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
 8001c72:	bf00      	nop
 8001c74:	2400166c 	.word	0x2400166c
 8001c78:	240010a0 	.word	0x240010a0

08001c7c <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <vCALL_C_a16+0x14>)
 8001c7e:	b508      	push	{r3, lr}
 8001c80:	f1a2 0108 	sub.w	r1, r2, #8
 8001c84:	1c90      	adds	r0, r2, #2
 8001c86:	f001 fb09 	bl	800329c <vGBFunctionCALL_C_a16>
 8001c8a:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <vCALL_C_a16+0x18>)
 8001c8c:	7018      	strb	r0, [r3, #0]
 8001c8e:	bd08      	pop	{r3, pc}
 8001c90:	24001674 	.word	0x24001674
 8001c94:	240010a0 	.word	0x240010a0

08001c98 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4c07      	ldr	r4, [pc, #28]	; (8001cb8 <vADDs_SP_r8+0x20>)
 8001c9c:	8960      	ldrh	r0, [r4, #10]
 8001c9e:	3801      	subs	r0, #1
 8001ca0:	b280      	uxth	r0, r0
 8001ca2:	f001 fd09 	bl	80036b8 <ucGBMemoryRead>
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f104 0008 	add.w	r0, r4, #8
 8001cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cb2:	f001 bb0f 	b.w	80032d4 <vGBFunctionADD_SP_r8>
 8001cb6:	bf00      	nop
 8001cb8:	2400166c 	.word	0x2400166c

08001cbc <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4c07      	ldr	r4, [pc, #28]	; (8001cdc <vLDs_HL_SP_r8+0x20>)
 8001cc0:	8960      	ldrh	r0, [r4, #10]
 8001cc2:	3801      	subs	r0, #1
 8001cc4:	b280      	uxth	r0, r0
 8001cc6:	f001 fcf7 	bl	80036b8 <ucGBMemoryRead>
 8001cca:	4622      	mov	r2, r4
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f104 0108 	add.w	r1, r4, #8
 8001cd2:	1da0      	adds	r0, r4, #6
 8001cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd8:	f001 bb24 	b.w	8003324 <vGBFunctionLD_HL_SP_r8>
 8001cdc:	2400166c 	.word	0x2400166c

08001ce0 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4c03      	ldr	r4, [pc, #12]	; (8001cf0 <vRLC_B+0x10>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	78e0      	ldrb	r0, [r4, #3]
 8001ce8:	f001 fb44 	bl	8003374 <ucGBFunctionRLC>
 8001cec:	70e0      	strb	r0, [r4, #3]
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	2400166c 	.word	0x2400166c

08001cf4 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4c03      	ldr	r4, [pc, #12]	; (8001d04 <vRLC_C+0x10>)
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	78a0      	ldrb	r0, [r4, #2]
 8001cfc:	f001 fb3a 	bl	8003374 <ucGBFunctionRLC>
 8001d00:	70a0      	strb	r0, [r4, #2]
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	2400166c 	.word	0x2400166c

08001d08 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4c03      	ldr	r4, [pc, #12]	; (8001d18 <vRLC_D+0x10>)
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	7960      	ldrb	r0, [r4, #5]
 8001d10:	f001 fb30 	bl	8003374 <ucGBFunctionRLC>
 8001d14:	7160      	strb	r0, [r4, #5]
 8001d16:	bd10      	pop	{r4, pc}
 8001d18:	2400166c 	.word	0x2400166c

08001d1c <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4c03      	ldr	r4, [pc, #12]	; (8001d2c <vRLC_E+0x10>)
 8001d20:	4621      	mov	r1, r4
 8001d22:	7920      	ldrb	r0, [r4, #4]
 8001d24:	f001 fb26 	bl	8003374 <ucGBFunctionRLC>
 8001d28:	7120      	strb	r0, [r4, #4]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	2400166c 	.word	0x2400166c

08001d30 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4c03      	ldr	r4, [pc, #12]	; (8001d40 <vRLC_H+0x10>)
 8001d34:	4621      	mov	r1, r4
 8001d36:	79e0      	ldrb	r0, [r4, #7]
 8001d38:	f001 fb1c 	bl	8003374 <ucGBFunctionRLC>
 8001d3c:	71e0      	strb	r0, [r4, #7]
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	2400166c 	.word	0x2400166c

08001d44 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4c03      	ldr	r4, [pc, #12]	; (8001d54 <vRLC_L+0x10>)
 8001d48:	4621      	mov	r1, r4
 8001d4a:	79a0      	ldrb	r0, [r4, #6]
 8001d4c:	f001 fb12 	bl	8003374 <ucGBFunctionRLC>
 8001d50:	71a0      	strb	r0, [r4, #6]
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	2400166c 	.word	0x2400166c

08001d58 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d07      	ldr	r5, [pc, #28]	; (8001d78 <vRLC_HL+0x20>)
 8001d5c:	88ec      	ldrh	r4, [r5, #6]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f001 fcaa 	bl	80036b8 <ucGBMemoryRead>
 8001d64:	4629      	mov	r1, r5
 8001d66:	f001 fb05 	bl	8003374 <ucGBFunctionRLC>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d72:	f001 bcc9 	b.w	8003708 <vGBMemoryWrite>
 8001d76:	bf00      	nop
 8001d78:	2400166c 	.word	0x2400166c

08001d7c <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4c03      	ldr	r4, [pc, #12]	; (8001d8c <vRLC_A+0x10>)
 8001d80:	4621      	mov	r1, r4
 8001d82:	7860      	ldrb	r0, [r4, #1]
 8001d84:	f001 faf6 	bl	8003374 <ucGBFunctionRLC>
 8001d88:	7060      	strb	r0, [r4, #1]
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	2400166c 	.word	0x2400166c

08001d90 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4c03      	ldr	r4, [pc, #12]	; (8001da0 <vRRC_B+0x10>)
 8001d94:	4621      	mov	r1, r4
 8001d96:	78e0      	ldrb	r0, [r4, #3]
 8001d98:	f001 fb08 	bl	80033ac <ucGBFunctionRRC>
 8001d9c:	70e0      	strb	r0, [r4, #3]
 8001d9e:	bd10      	pop	{r4, pc}
 8001da0:	2400166c 	.word	0x2400166c

08001da4 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4c03      	ldr	r4, [pc, #12]	; (8001db4 <vRRC_C+0x10>)
 8001da8:	4621      	mov	r1, r4
 8001daa:	78a0      	ldrb	r0, [r4, #2]
 8001dac:	f001 fafe 	bl	80033ac <ucGBFunctionRRC>
 8001db0:	70a0      	strb	r0, [r4, #2]
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	2400166c 	.word	0x2400166c

08001db8 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4c03      	ldr	r4, [pc, #12]	; (8001dc8 <vRRC_D+0x10>)
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	7960      	ldrb	r0, [r4, #5]
 8001dc0:	f001 faf4 	bl	80033ac <ucGBFunctionRRC>
 8001dc4:	7160      	strb	r0, [r4, #5]
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	2400166c 	.word	0x2400166c

08001dcc <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4c03      	ldr	r4, [pc, #12]	; (8001ddc <vRRC_E+0x10>)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	7920      	ldrb	r0, [r4, #4]
 8001dd4:	f001 faea 	bl	80033ac <ucGBFunctionRRC>
 8001dd8:	7120      	strb	r0, [r4, #4]
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	2400166c 	.word	0x2400166c

08001de0 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4c03      	ldr	r4, [pc, #12]	; (8001df0 <vRRC_H+0x10>)
 8001de4:	4621      	mov	r1, r4
 8001de6:	79e0      	ldrb	r0, [r4, #7]
 8001de8:	f001 fae0 	bl	80033ac <ucGBFunctionRRC>
 8001dec:	71e0      	strb	r0, [r4, #7]
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	2400166c 	.word	0x2400166c

08001df4 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4c03      	ldr	r4, [pc, #12]	; (8001e04 <vRRC_L+0x10>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	79a0      	ldrb	r0, [r4, #6]
 8001dfc:	f001 fad6 	bl	80033ac <ucGBFunctionRRC>
 8001e00:	71a0      	strb	r0, [r4, #6]
 8001e02:	bd10      	pop	{r4, pc}
 8001e04:	2400166c 	.word	0x2400166c

08001e08 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	; (8001e28 <vRRC_HL+0x20>)
 8001e0c:	88ec      	ldrh	r4, [r5, #6]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f001 fc52 	bl	80036b8 <ucGBMemoryRead>
 8001e14:	4629      	mov	r1, r5
 8001e16:	f001 fac9 	bl	80033ac <ucGBFunctionRRC>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e22:	f001 bc71 	b.w	8003708 <vGBMemoryWrite>
 8001e26:	bf00      	nop
 8001e28:	2400166c 	.word	0x2400166c

08001e2c <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4c03      	ldr	r4, [pc, #12]	; (8001e3c <vRRC_A+0x10>)
 8001e30:	4621      	mov	r1, r4
 8001e32:	7860      	ldrb	r0, [r4, #1]
 8001e34:	f001 faba 	bl	80033ac <ucGBFunctionRRC>
 8001e38:	7060      	strb	r0, [r4, #1]
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	2400166c 	.word	0x2400166c

08001e40 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4c03      	ldr	r4, [pc, #12]	; (8001e50 <vRL_B+0x10>)
 8001e44:	4621      	mov	r1, r4
 8001e46:	78e0      	ldrb	r0, [r4, #3]
 8001e48:	f001 facc 	bl	80033e4 <ucGBFunctionRL>
 8001e4c:	70e0      	strb	r0, [r4, #3]
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	2400166c 	.word	0x2400166c

08001e54 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4c03      	ldr	r4, [pc, #12]	; (8001e64 <vRL_C+0x10>)
 8001e58:	4621      	mov	r1, r4
 8001e5a:	78a0      	ldrb	r0, [r4, #2]
 8001e5c:	f001 fac2 	bl	80033e4 <ucGBFunctionRL>
 8001e60:	70a0      	strb	r0, [r4, #2]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	2400166c 	.word	0x2400166c

08001e68 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4c03      	ldr	r4, [pc, #12]	; (8001e78 <vRL_D+0x10>)
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	7960      	ldrb	r0, [r4, #5]
 8001e70:	f001 fab8 	bl	80033e4 <ucGBFunctionRL>
 8001e74:	7160      	strb	r0, [r4, #5]
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	2400166c 	.word	0x2400166c

08001e7c <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4c03      	ldr	r4, [pc, #12]	; (8001e8c <vRL_E+0x10>)
 8001e80:	4621      	mov	r1, r4
 8001e82:	7920      	ldrb	r0, [r4, #4]
 8001e84:	f001 faae 	bl	80033e4 <ucGBFunctionRL>
 8001e88:	7120      	strb	r0, [r4, #4]
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	2400166c 	.word	0x2400166c

08001e90 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4c03      	ldr	r4, [pc, #12]	; (8001ea0 <vRL_H+0x10>)
 8001e94:	4621      	mov	r1, r4
 8001e96:	79e0      	ldrb	r0, [r4, #7]
 8001e98:	f001 faa4 	bl	80033e4 <ucGBFunctionRL>
 8001e9c:	71e0      	strb	r0, [r4, #7]
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	2400166c 	.word	0x2400166c

08001ea4 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4c03      	ldr	r4, [pc, #12]	; (8001eb4 <vRL_L+0x10>)
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	79a0      	ldrb	r0, [r4, #6]
 8001eac:	f001 fa9a 	bl	80033e4 <ucGBFunctionRL>
 8001eb0:	71a0      	strb	r0, [r4, #6]
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	2400166c 	.word	0x2400166c

08001eb8 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d07      	ldr	r5, [pc, #28]	; (8001ed8 <vRL_HL+0x20>)
 8001ebc:	88ec      	ldrh	r4, [r5, #6]
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f001 fbfa 	bl	80036b8 <ucGBMemoryRead>
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f001 fa8d 	bl	80033e4 <ucGBFunctionRL>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4620      	mov	r0, r4
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed2:	f001 bc19 	b.w	8003708 <vGBMemoryWrite>
 8001ed6:	bf00      	nop
 8001ed8:	2400166c 	.word	0x2400166c

08001edc <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4c03      	ldr	r4, [pc, #12]	; (8001eec <vRL_A+0x10>)
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	7860      	ldrb	r0, [r4, #1]
 8001ee4:	f001 fa7e 	bl	80033e4 <ucGBFunctionRL>
 8001ee8:	7060      	strb	r0, [r4, #1]
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	2400166c 	.word	0x2400166c

08001ef0 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4c03      	ldr	r4, [pc, #12]	; (8001f00 <vRR_B+0x10>)
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	78e0      	ldrb	r0, [r4, #3]
 8001ef8:	f001 fa8e 	bl	8003418 <ucGBFunctionRR>
 8001efc:	70e0      	strb	r0, [r4, #3]
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	2400166c 	.word	0x2400166c

08001f04 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4c03      	ldr	r4, [pc, #12]	; (8001f14 <vRR_C+0x10>)
 8001f08:	4621      	mov	r1, r4
 8001f0a:	78a0      	ldrb	r0, [r4, #2]
 8001f0c:	f001 fa84 	bl	8003418 <ucGBFunctionRR>
 8001f10:	70a0      	strb	r0, [r4, #2]
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	2400166c 	.word	0x2400166c

08001f18 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4c03      	ldr	r4, [pc, #12]	; (8001f28 <vRR_D+0x10>)
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	7960      	ldrb	r0, [r4, #5]
 8001f20:	f001 fa7a 	bl	8003418 <ucGBFunctionRR>
 8001f24:	7160      	strb	r0, [r4, #5]
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	2400166c 	.word	0x2400166c

08001f2c <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4c03      	ldr	r4, [pc, #12]	; (8001f3c <vRR_E+0x10>)
 8001f30:	4621      	mov	r1, r4
 8001f32:	7920      	ldrb	r0, [r4, #4]
 8001f34:	f001 fa70 	bl	8003418 <ucGBFunctionRR>
 8001f38:	7120      	strb	r0, [r4, #4]
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	2400166c 	.word	0x2400166c

08001f40 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4c03      	ldr	r4, [pc, #12]	; (8001f50 <vRR_H+0x10>)
 8001f44:	4621      	mov	r1, r4
 8001f46:	79e0      	ldrb	r0, [r4, #7]
 8001f48:	f001 fa66 	bl	8003418 <ucGBFunctionRR>
 8001f4c:	71e0      	strb	r0, [r4, #7]
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	2400166c 	.word	0x2400166c

08001f54 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4c03      	ldr	r4, [pc, #12]	; (8001f64 <vRR_L+0x10>)
 8001f58:	4621      	mov	r1, r4
 8001f5a:	79a0      	ldrb	r0, [r4, #6]
 8001f5c:	f001 fa5c 	bl	8003418 <ucGBFunctionRR>
 8001f60:	71a0      	strb	r0, [r4, #6]
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	2400166c 	.word	0x2400166c

08001f68 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4d07      	ldr	r5, [pc, #28]	; (8001f88 <vRR_HL+0x20>)
 8001f6c:	88ec      	ldrh	r4, [r5, #6]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f001 fba2 	bl	80036b8 <ucGBMemoryRead>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f001 fa4f 	bl	8003418 <ucGBFunctionRR>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f82:	f001 bbc1 	b.w	8003708 <vGBMemoryWrite>
 8001f86:	bf00      	nop
 8001f88:	2400166c 	.word	0x2400166c

08001f8c <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4c03      	ldr	r4, [pc, #12]	; (8001f9c <vRR_A+0x10>)
 8001f90:	4621      	mov	r1, r4
 8001f92:	7860      	ldrb	r0, [r4, #1]
 8001f94:	f001 fa40 	bl	8003418 <ucGBFunctionRR>
 8001f98:	7060      	strb	r0, [r4, #1]
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	2400166c 	.word	0x2400166c

08001fa0 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4c03      	ldr	r4, [pc, #12]	; (8001fb0 <vSLA_B+0x10>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	78e0      	ldrb	r0, [r4, #3]
 8001fa8:	f001 fa52 	bl	8003450 <ucGBFunctionSLA>
 8001fac:	70e0      	strb	r0, [r4, #3]
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	2400166c 	.word	0x2400166c

08001fb4 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4c03      	ldr	r4, [pc, #12]	; (8001fc4 <vSLA_C+0x10>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	78a0      	ldrb	r0, [r4, #2]
 8001fbc:	f001 fa48 	bl	8003450 <ucGBFunctionSLA>
 8001fc0:	70a0      	strb	r0, [r4, #2]
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	2400166c 	.word	0x2400166c

08001fc8 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4c03      	ldr	r4, [pc, #12]	; (8001fd8 <vSLA_D+0x10>)
 8001fcc:	4621      	mov	r1, r4
 8001fce:	7960      	ldrb	r0, [r4, #5]
 8001fd0:	f001 fa3e 	bl	8003450 <ucGBFunctionSLA>
 8001fd4:	7160      	strb	r0, [r4, #5]
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	2400166c 	.word	0x2400166c

08001fdc <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4c03      	ldr	r4, [pc, #12]	; (8001fec <vSLA_E+0x10>)
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	7920      	ldrb	r0, [r4, #4]
 8001fe4:	f001 fa34 	bl	8003450 <ucGBFunctionSLA>
 8001fe8:	7120      	strb	r0, [r4, #4]
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	2400166c 	.word	0x2400166c

08001ff0 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4c03      	ldr	r4, [pc, #12]	; (8002000 <vSLA_H+0x10>)
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	79e0      	ldrb	r0, [r4, #7]
 8001ff8:	f001 fa2a 	bl	8003450 <ucGBFunctionSLA>
 8001ffc:	71e0      	strb	r0, [r4, #7]
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	2400166c 	.word	0x2400166c

08002004 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8002004:	b510      	push	{r4, lr}
 8002006:	4c03      	ldr	r4, [pc, #12]	; (8002014 <vSLA_L+0x10>)
 8002008:	4621      	mov	r1, r4
 800200a:	79a0      	ldrb	r0, [r4, #6]
 800200c:	f001 fa20 	bl	8003450 <ucGBFunctionSLA>
 8002010:	71a0      	strb	r0, [r4, #6]
 8002012:	bd10      	pop	{r4, pc}
 8002014:	2400166c 	.word	0x2400166c

08002018 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <vSLA_HL+0x20>)
 800201c:	88ec      	ldrh	r4, [r5, #6]
 800201e:	4620      	mov	r0, r4
 8002020:	f001 fb4a 	bl	80036b8 <ucGBMemoryRead>
 8002024:	4629      	mov	r1, r5
 8002026:	f001 fa13 	bl	8003450 <ucGBFunctionSLA>
 800202a:	4601      	mov	r1, r0
 800202c:	4620      	mov	r0, r4
 800202e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002032:	f001 bb69 	b.w	8003708 <vGBMemoryWrite>
 8002036:	bf00      	nop
 8002038:	2400166c 	.word	0x2400166c

0800203c <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 800203c:	b510      	push	{r4, lr}
 800203e:	4c03      	ldr	r4, [pc, #12]	; (800204c <vSLA_A+0x10>)
 8002040:	4621      	mov	r1, r4
 8002042:	7860      	ldrb	r0, [r4, #1]
 8002044:	f001 fa04 	bl	8003450 <ucGBFunctionSLA>
 8002048:	7060      	strb	r0, [r4, #1]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	2400166c 	.word	0x2400166c

08002050 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8002050:	b510      	push	{r4, lr}
 8002052:	4c03      	ldr	r4, [pc, #12]	; (8002060 <vSRA_B+0x10>)
 8002054:	4621      	mov	r1, r4
 8002056:	78e0      	ldrb	r0, [r4, #3]
 8002058:	f001 fa12 	bl	8003480 <ucGBFunctionSRA>
 800205c:	70e0      	strb	r0, [r4, #3]
 800205e:	bd10      	pop	{r4, pc}
 8002060:	2400166c 	.word	0x2400166c

08002064 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8002064:	b510      	push	{r4, lr}
 8002066:	4c03      	ldr	r4, [pc, #12]	; (8002074 <vSRA_C+0x10>)
 8002068:	4621      	mov	r1, r4
 800206a:	78a0      	ldrb	r0, [r4, #2]
 800206c:	f001 fa08 	bl	8003480 <ucGBFunctionSRA>
 8002070:	70a0      	strb	r0, [r4, #2]
 8002072:	bd10      	pop	{r4, pc}
 8002074:	2400166c 	.word	0x2400166c

08002078 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8002078:	b510      	push	{r4, lr}
 800207a:	4c03      	ldr	r4, [pc, #12]	; (8002088 <vSRA_D+0x10>)
 800207c:	4621      	mov	r1, r4
 800207e:	7960      	ldrb	r0, [r4, #5]
 8002080:	f001 f9fe 	bl	8003480 <ucGBFunctionSRA>
 8002084:	7160      	strb	r0, [r4, #5]
 8002086:	bd10      	pop	{r4, pc}
 8002088:	2400166c 	.word	0x2400166c

0800208c <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 800208c:	b510      	push	{r4, lr}
 800208e:	4c03      	ldr	r4, [pc, #12]	; (800209c <vSRA_E+0x10>)
 8002090:	4621      	mov	r1, r4
 8002092:	7920      	ldrb	r0, [r4, #4]
 8002094:	f001 f9f4 	bl	8003480 <ucGBFunctionSRA>
 8002098:	7120      	strb	r0, [r4, #4]
 800209a:	bd10      	pop	{r4, pc}
 800209c:	2400166c 	.word	0x2400166c

080020a0 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4c03      	ldr	r4, [pc, #12]	; (80020b0 <vSRA_H+0x10>)
 80020a4:	4621      	mov	r1, r4
 80020a6:	79e0      	ldrb	r0, [r4, #7]
 80020a8:	f001 f9ea 	bl	8003480 <ucGBFunctionSRA>
 80020ac:	71e0      	strb	r0, [r4, #7]
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	2400166c 	.word	0x2400166c

080020b4 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4c03      	ldr	r4, [pc, #12]	; (80020c4 <vSRA_L+0x10>)
 80020b8:	4621      	mov	r1, r4
 80020ba:	79a0      	ldrb	r0, [r4, #6]
 80020bc:	f001 f9e0 	bl	8003480 <ucGBFunctionSRA>
 80020c0:	71a0      	strb	r0, [r4, #6]
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	2400166c 	.word	0x2400166c

080020c8 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4d07      	ldr	r5, [pc, #28]	; (80020e8 <vSRA_HL+0x20>)
 80020cc:	88ec      	ldrh	r4, [r5, #6]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f001 faf2 	bl	80036b8 <ucGBMemoryRead>
 80020d4:	4629      	mov	r1, r5
 80020d6:	f001 f9d3 	bl	8003480 <ucGBFunctionSRA>
 80020da:	4601      	mov	r1, r0
 80020dc:	4620      	mov	r0, r4
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f001 bb11 	b.w	8003708 <vGBMemoryWrite>
 80020e6:	bf00      	nop
 80020e8:	2400166c 	.word	0x2400166c

080020ec <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4c03      	ldr	r4, [pc, #12]	; (80020fc <vSRA_A+0x10>)
 80020f0:	4621      	mov	r1, r4
 80020f2:	7860      	ldrb	r0, [r4, #1]
 80020f4:	f001 f9c4 	bl	8003480 <ucGBFunctionSRA>
 80020f8:	7060      	strb	r0, [r4, #1]
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	2400166c 	.word	0x2400166c

08002100 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002100:	b510      	push	{r4, lr}
 8002102:	4c03      	ldr	r4, [pc, #12]	; (8002110 <vSWAP_B+0x10>)
 8002104:	4621      	mov	r1, r4
 8002106:	78e0      	ldrb	r0, [r4, #3]
 8002108:	f001 f9d4 	bl	80034b4 <ucGBFunctionSWAP>
 800210c:	70e0      	strb	r0, [r4, #3]
 800210e:	bd10      	pop	{r4, pc}
 8002110:	2400166c 	.word	0x2400166c

08002114 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002114:	b510      	push	{r4, lr}
 8002116:	4c03      	ldr	r4, [pc, #12]	; (8002124 <vSWAP_C+0x10>)
 8002118:	4621      	mov	r1, r4
 800211a:	78a0      	ldrb	r0, [r4, #2]
 800211c:	f001 f9ca 	bl	80034b4 <ucGBFunctionSWAP>
 8002120:	70a0      	strb	r0, [r4, #2]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	2400166c 	.word	0x2400166c

08002128 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002128:	b510      	push	{r4, lr}
 800212a:	4c03      	ldr	r4, [pc, #12]	; (8002138 <vSWAP_D+0x10>)
 800212c:	4621      	mov	r1, r4
 800212e:	7960      	ldrb	r0, [r4, #5]
 8002130:	f001 f9c0 	bl	80034b4 <ucGBFunctionSWAP>
 8002134:	7160      	strb	r0, [r4, #5]
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2400166c 	.word	0x2400166c

0800213c <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 800213c:	b510      	push	{r4, lr}
 800213e:	4c03      	ldr	r4, [pc, #12]	; (800214c <vSWAP_E+0x10>)
 8002140:	4621      	mov	r1, r4
 8002142:	7920      	ldrb	r0, [r4, #4]
 8002144:	f001 f9b6 	bl	80034b4 <ucGBFunctionSWAP>
 8002148:	7120      	strb	r0, [r4, #4]
 800214a:	bd10      	pop	{r4, pc}
 800214c:	2400166c 	.word	0x2400166c

08002150 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 8002150:	b510      	push	{r4, lr}
 8002152:	4c03      	ldr	r4, [pc, #12]	; (8002160 <vSWAP_H+0x10>)
 8002154:	4621      	mov	r1, r4
 8002156:	79e0      	ldrb	r0, [r4, #7]
 8002158:	f001 f9ac 	bl	80034b4 <ucGBFunctionSWAP>
 800215c:	71e0      	strb	r0, [r4, #7]
 800215e:	bd10      	pop	{r4, pc}
 8002160:	2400166c 	.word	0x2400166c

08002164 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002164:	b510      	push	{r4, lr}
 8002166:	4c03      	ldr	r4, [pc, #12]	; (8002174 <vSWAP_L+0x10>)
 8002168:	4621      	mov	r1, r4
 800216a:	79a0      	ldrb	r0, [r4, #6]
 800216c:	f001 f9a2 	bl	80034b4 <ucGBFunctionSWAP>
 8002170:	71a0      	strb	r0, [r4, #6]
 8002172:	bd10      	pop	{r4, pc}
 8002174:	2400166c 	.word	0x2400166c

08002178 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d07      	ldr	r5, [pc, #28]	; (8002198 <vSWAP_HL+0x20>)
 800217c:	88ec      	ldrh	r4, [r5, #6]
 800217e:	4620      	mov	r0, r4
 8002180:	f001 fa9a 	bl	80036b8 <ucGBMemoryRead>
 8002184:	4629      	mov	r1, r5
 8002186:	f001 f995 	bl	80034b4 <ucGBFunctionSWAP>
 800218a:	4601      	mov	r1, r0
 800218c:	4620      	mov	r0, r4
 800218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002192:	f001 bab9 	b.w	8003708 <vGBMemoryWrite>
 8002196:	bf00      	nop
 8002198:	2400166c 	.word	0x2400166c

0800219c <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 800219c:	b510      	push	{r4, lr}
 800219e:	4c03      	ldr	r4, [pc, #12]	; (80021ac <vSWAP_A+0x10>)
 80021a0:	4621      	mov	r1, r4
 80021a2:	7860      	ldrb	r0, [r4, #1]
 80021a4:	f001 f986 	bl	80034b4 <ucGBFunctionSWAP>
 80021a8:	7060      	strb	r0, [r4, #1]
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	2400166c 	.word	0x2400166c

080021b0 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80021b0:	b510      	push	{r4, lr}
 80021b2:	4c03      	ldr	r4, [pc, #12]	; (80021c0 <vSRL_B+0x10>)
 80021b4:	4621      	mov	r1, r4
 80021b6:	78e0      	ldrb	r0, [r4, #3]
 80021b8:	f001 f992 	bl	80034e0 <ucGBFunctionSRL>
 80021bc:	70e0      	strb	r0, [r4, #3]
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	2400166c 	.word	0x2400166c

080021c4 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4c03      	ldr	r4, [pc, #12]	; (80021d4 <vSRL_C+0x10>)
 80021c8:	4621      	mov	r1, r4
 80021ca:	78a0      	ldrb	r0, [r4, #2]
 80021cc:	f001 f988 	bl	80034e0 <ucGBFunctionSRL>
 80021d0:	70a0      	strb	r0, [r4, #2]
 80021d2:	bd10      	pop	{r4, pc}
 80021d4:	2400166c 	.word	0x2400166c

080021d8 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 80021d8:	b510      	push	{r4, lr}
 80021da:	4c03      	ldr	r4, [pc, #12]	; (80021e8 <vSRL_D+0x10>)
 80021dc:	4621      	mov	r1, r4
 80021de:	7960      	ldrb	r0, [r4, #5]
 80021e0:	f001 f97e 	bl	80034e0 <ucGBFunctionSRL>
 80021e4:	7160      	strb	r0, [r4, #5]
 80021e6:	bd10      	pop	{r4, pc}
 80021e8:	2400166c 	.word	0x2400166c

080021ec <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4c03      	ldr	r4, [pc, #12]	; (80021fc <vSRL_E+0x10>)
 80021f0:	4621      	mov	r1, r4
 80021f2:	7920      	ldrb	r0, [r4, #4]
 80021f4:	f001 f974 	bl	80034e0 <ucGBFunctionSRL>
 80021f8:	7120      	strb	r0, [r4, #4]
 80021fa:	bd10      	pop	{r4, pc}
 80021fc:	2400166c 	.word	0x2400166c

08002200 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002200:	b510      	push	{r4, lr}
 8002202:	4c03      	ldr	r4, [pc, #12]	; (8002210 <vSRL_H+0x10>)
 8002204:	4621      	mov	r1, r4
 8002206:	79e0      	ldrb	r0, [r4, #7]
 8002208:	f001 f96a 	bl	80034e0 <ucGBFunctionSRL>
 800220c:	71e0      	strb	r0, [r4, #7]
 800220e:	bd10      	pop	{r4, pc}
 8002210:	2400166c 	.word	0x2400166c

08002214 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002214:	b510      	push	{r4, lr}
 8002216:	4c03      	ldr	r4, [pc, #12]	; (8002224 <vSRL_L+0x10>)
 8002218:	4621      	mov	r1, r4
 800221a:	79a0      	ldrb	r0, [r4, #6]
 800221c:	f001 f960 	bl	80034e0 <ucGBFunctionSRL>
 8002220:	71a0      	strb	r0, [r4, #6]
 8002222:	bd10      	pop	{r4, pc}
 8002224:	2400166c 	.word	0x2400166c

08002228 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4d07      	ldr	r5, [pc, #28]	; (8002248 <vSRL_HL+0x20>)
 800222c:	88ec      	ldrh	r4, [r5, #6]
 800222e:	4620      	mov	r0, r4
 8002230:	f001 fa42 	bl	80036b8 <ucGBMemoryRead>
 8002234:	4629      	mov	r1, r5
 8002236:	f001 f953 	bl	80034e0 <ucGBFunctionSRL>
 800223a:	4601      	mov	r1, r0
 800223c:	4620      	mov	r0, r4
 800223e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002242:	f001 ba61 	b.w	8003708 <vGBMemoryWrite>
 8002246:	bf00      	nop
 8002248:	2400166c 	.word	0x2400166c

0800224c <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 800224c:	b510      	push	{r4, lr}
 800224e:	4c03      	ldr	r4, [pc, #12]	; (800225c <vSRL_A+0x10>)
 8002250:	4621      	mov	r1, r4
 8002252:	7860      	ldrb	r0, [r4, #1]
 8002254:	f001 f944 	bl	80034e0 <ucGBFunctionSRL>
 8002258:	7060      	strb	r0, [r4, #1]
 800225a:	bd10      	pop	{r4, pc}
 800225c:	2400166c 	.word	0x2400166c

08002260 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <vBIT_0_B+0xc>)
 8002262:	2100      	movs	r1, #0
 8002264:	78d0      	ldrb	r0, [r2, #3]
 8002266:	f001 b94f 	b.w	8003508 <vGBFunctionBIT>
 800226a:	bf00      	nop
 800226c:	2400166c 	.word	0x2400166c

08002270 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 8002270:	4a02      	ldr	r2, [pc, #8]	; (800227c <vBIT_0_C+0xc>)
 8002272:	2100      	movs	r1, #0
 8002274:	7890      	ldrb	r0, [r2, #2]
 8002276:	f001 b947 	b.w	8003508 <vGBFunctionBIT>
 800227a:	bf00      	nop
 800227c:	2400166c 	.word	0x2400166c

08002280 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 8002280:	4a02      	ldr	r2, [pc, #8]	; (800228c <vBIT_0_D+0xc>)
 8002282:	2100      	movs	r1, #0
 8002284:	7950      	ldrb	r0, [r2, #5]
 8002286:	f001 b93f 	b.w	8003508 <vGBFunctionBIT>
 800228a:	bf00      	nop
 800228c:	2400166c 	.word	0x2400166c

08002290 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <vBIT_0_E+0xc>)
 8002292:	2100      	movs	r1, #0
 8002294:	7910      	ldrb	r0, [r2, #4]
 8002296:	f001 b937 	b.w	8003508 <vGBFunctionBIT>
 800229a:	bf00      	nop
 800229c:	2400166c 	.word	0x2400166c

080022a0 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <vBIT_0_H+0xc>)
 80022a2:	2100      	movs	r1, #0
 80022a4:	79d0      	ldrb	r0, [r2, #7]
 80022a6:	f001 b92f 	b.w	8003508 <vGBFunctionBIT>
 80022aa:	bf00      	nop
 80022ac:	2400166c 	.word	0x2400166c

080022b0 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <vBIT_0_L+0xc>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	7990      	ldrb	r0, [r2, #6]
 80022b6:	f001 b927 	b.w	8003508 <vGBFunctionBIT>
 80022ba:	bf00      	nop
 80022bc:	2400166c 	.word	0x2400166c

080022c0 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80022c0:	b510      	push	{r4, lr}
 80022c2:	4c05      	ldr	r4, [pc, #20]	; (80022d8 <vBIT_0_HL+0x18>)
 80022c4:	88e0      	ldrh	r0, [r4, #6]
 80022c6:	f001 f9f7 	bl	80036b8 <ucGBMemoryRead>
 80022ca:	4622      	mov	r2, r4
 80022cc:	2100      	movs	r1, #0
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022d2:	f001 b919 	b.w	8003508 <vGBFunctionBIT>
 80022d6:	bf00      	nop
 80022d8:	2400166c 	.word	0x2400166c

080022dc <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 80022dc:	4a02      	ldr	r2, [pc, #8]	; (80022e8 <vBIT_0_A+0xc>)
 80022de:	2100      	movs	r1, #0
 80022e0:	7850      	ldrb	r0, [r2, #1]
 80022e2:	f001 b911 	b.w	8003508 <vGBFunctionBIT>
 80022e6:	bf00      	nop
 80022e8:	2400166c 	.word	0x2400166c

080022ec <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 80022ec:	4a02      	ldr	r2, [pc, #8]	; (80022f8 <vBIT_1_B+0xc>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	78d0      	ldrb	r0, [r2, #3]
 80022f2:	f001 b909 	b.w	8003508 <vGBFunctionBIT>
 80022f6:	bf00      	nop
 80022f8:	2400166c 	.word	0x2400166c

080022fc <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <vBIT_1_C+0xc>)
 80022fe:	2101      	movs	r1, #1
 8002300:	7890      	ldrb	r0, [r2, #2]
 8002302:	f001 b901 	b.w	8003508 <vGBFunctionBIT>
 8002306:	bf00      	nop
 8002308:	2400166c 	.word	0x2400166c

0800230c <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <vBIT_1_D+0xc>)
 800230e:	2101      	movs	r1, #1
 8002310:	7950      	ldrb	r0, [r2, #5]
 8002312:	f001 b8f9 	b.w	8003508 <vGBFunctionBIT>
 8002316:	bf00      	nop
 8002318:	2400166c 	.word	0x2400166c

0800231c <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 800231c:	4a02      	ldr	r2, [pc, #8]	; (8002328 <vBIT_1_E+0xc>)
 800231e:	2101      	movs	r1, #1
 8002320:	7910      	ldrb	r0, [r2, #4]
 8002322:	f001 b8f1 	b.w	8003508 <vGBFunctionBIT>
 8002326:	bf00      	nop
 8002328:	2400166c 	.word	0x2400166c

0800232c <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 800232c:	4a02      	ldr	r2, [pc, #8]	; (8002338 <vBIT_1_H+0xc>)
 800232e:	2101      	movs	r1, #1
 8002330:	79d0      	ldrb	r0, [r2, #7]
 8002332:	f001 b8e9 	b.w	8003508 <vGBFunctionBIT>
 8002336:	bf00      	nop
 8002338:	2400166c 	.word	0x2400166c

0800233c <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 800233c:	4a02      	ldr	r2, [pc, #8]	; (8002348 <vBIT_1_L+0xc>)
 800233e:	2101      	movs	r1, #1
 8002340:	7990      	ldrb	r0, [r2, #6]
 8002342:	f001 b8e1 	b.w	8003508 <vGBFunctionBIT>
 8002346:	bf00      	nop
 8002348:	2400166c 	.word	0x2400166c

0800234c <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 800234c:	b510      	push	{r4, lr}
 800234e:	4c05      	ldr	r4, [pc, #20]	; (8002364 <vBIT_1_HL+0x18>)
 8002350:	88e0      	ldrh	r0, [r4, #6]
 8002352:	f001 f9b1 	bl	80036b8 <ucGBMemoryRead>
 8002356:	4622      	mov	r2, r4
 8002358:	2101      	movs	r1, #1
 800235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235e:	f001 b8d3 	b.w	8003508 <vGBFunctionBIT>
 8002362:	bf00      	nop
 8002364:	2400166c 	.word	0x2400166c

08002368 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002368:	4a02      	ldr	r2, [pc, #8]	; (8002374 <vBIT_1_A+0xc>)
 800236a:	2101      	movs	r1, #1
 800236c:	7850      	ldrb	r0, [r2, #1]
 800236e:	f001 b8cb 	b.w	8003508 <vGBFunctionBIT>
 8002372:	bf00      	nop
 8002374:	2400166c 	.word	0x2400166c

08002378 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 8002378:	4a02      	ldr	r2, [pc, #8]	; (8002384 <vBIT_2_B+0xc>)
 800237a:	2102      	movs	r1, #2
 800237c:	78d0      	ldrb	r0, [r2, #3]
 800237e:	f001 b8c3 	b.w	8003508 <vGBFunctionBIT>
 8002382:	bf00      	nop
 8002384:	2400166c 	.word	0x2400166c

08002388 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 8002388:	4a02      	ldr	r2, [pc, #8]	; (8002394 <vBIT_2_C+0xc>)
 800238a:	2102      	movs	r1, #2
 800238c:	7890      	ldrb	r0, [r2, #2]
 800238e:	f001 b8bb 	b.w	8003508 <vGBFunctionBIT>
 8002392:	bf00      	nop
 8002394:	2400166c 	.word	0x2400166c

08002398 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 8002398:	4a02      	ldr	r2, [pc, #8]	; (80023a4 <vBIT_2_D+0xc>)
 800239a:	2102      	movs	r1, #2
 800239c:	7950      	ldrb	r0, [r2, #5]
 800239e:	f001 b8b3 	b.w	8003508 <vGBFunctionBIT>
 80023a2:	bf00      	nop
 80023a4:	2400166c 	.word	0x2400166c

080023a8 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80023a8:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <vBIT_2_E+0xc>)
 80023aa:	2102      	movs	r1, #2
 80023ac:	7910      	ldrb	r0, [r2, #4]
 80023ae:	f001 b8ab 	b.w	8003508 <vGBFunctionBIT>
 80023b2:	bf00      	nop
 80023b4:	2400166c 	.word	0x2400166c

080023b8 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <vBIT_2_H+0xc>)
 80023ba:	2102      	movs	r1, #2
 80023bc:	79d0      	ldrb	r0, [r2, #7]
 80023be:	f001 b8a3 	b.w	8003508 <vGBFunctionBIT>
 80023c2:	bf00      	nop
 80023c4:	2400166c 	.word	0x2400166c

080023c8 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <vBIT_2_L+0xc>)
 80023ca:	2102      	movs	r1, #2
 80023cc:	7990      	ldrb	r0, [r2, #6]
 80023ce:	f001 b89b 	b.w	8003508 <vGBFunctionBIT>
 80023d2:	bf00      	nop
 80023d4:	2400166c 	.word	0x2400166c

080023d8 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 80023d8:	b510      	push	{r4, lr}
 80023da:	4c05      	ldr	r4, [pc, #20]	; (80023f0 <vBIT_2_HL+0x18>)
 80023dc:	88e0      	ldrh	r0, [r4, #6]
 80023de:	f001 f96b 	bl	80036b8 <ucGBMemoryRead>
 80023e2:	4622      	mov	r2, r4
 80023e4:	2102      	movs	r1, #2
 80023e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ea:	f001 b88d 	b.w	8003508 <vGBFunctionBIT>
 80023ee:	bf00      	nop
 80023f0:	2400166c 	.word	0x2400166c

080023f4 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 80023f4:	4a02      	ldr	r2, [pc, #8]	; (8002400 <vBIT_2_A+0xc>)
 80023f6:	2102      	movs	r1, #2
 80023f8:	7850      	ldrb	r0, [r2, #1]
 80023fa:	f001 b885 	b.w	8003508 <vGBFunctionBIT>
 80023fe:	bf00      	nop
 8002400:	2400166c 	.word	0x2400166c

08002404 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002404:	4a02      	ldr	r2, [pc, #8]	; (8002410 <vBIT_3_B+0xc>)
 8002406:	2103      	movs	r1, #3
 8002408:	78d0      	ldrb	r0, [r2, #3]
 800240a:	f001 b87d 	b.w	8003508 <vGBFunctionBIT>
 800240e:	bf00      	nop
 8002410:	2400166c 	.word	0x2400166c

08002414 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <vBIT_3_C+0xc>)
 8002416:	2103      	movs	r1, #3
 8002418:	7890      	ldrb	r0, [r2, #2]
 800241a:	f001 b875 	b.w	8003508 <vGBFunctionBIT>
 800241e:	bf00      	nop
 8002420:	2400166c 	.word	0x2400166c

08002424 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002424:	4a02      	ldr	r2, [pc, #8]	; (8002430 <vBIT_3_D+0xc>)
 8002426:	2103      	movs	r1, #3
 8002428:	7950      	ldrb	r0, [r2, #5]
 800242a:	f001 b86d 	b.w	8003508 <vGBFunctionBIT>
 800242e:	bf00      	nop
 8002430:	2400166c 	.word	0x2400166c

08002434 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <vBIT_3_E+0xc>)
 8002436:	2103      	movs	r1, #3
 8002438:	7910      	ldrb	r0, [r2, #4]
 800243a:	f001 b865 	b.w	8003508 <vGBFunctionBIT>
 800243e:	bf00      	nop
 8002440:	2400166c 	.word	0x2400166c

08002444 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002444:	4a02      	ldr	r2, [pc, #8]	; (8002450 <vBIT_3_H+0xc>)
 8002446:	2103      	movs	r1, #3
 8002448:	79d0      	ldrb	r0, [r2, #7]
 800244a:	f001 b85d 	b.w	8003508 <vGBFunctionBIT>
 800244e:	bf00      	nop
 8002450:	2400166c 	.word	0x2400166c

08002454 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <vBIT_3_L+0xc>)
 8002456:	2103      	movs	r1, #3
 8002458:	7990      	ldrb	r0, [r2, #6]
 800245a:	f001 b855 	b.w	8003508 <vGBFunctionBIT>
 800245e:	bf00      	nop
 8002460:	2400166c 	.word	0x2400166c

08002464 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 8002464:	b510      	push	{r4, lr}
 8002466:	4c05      	ldr	r4, [pc, #20]	; (800247c <vBIT_3_HL+0x18>)
 8002468:	88e0      	ldrh	r0, [r4, #6]
 800246a:	f001 f925 	bl	80036b8 <ucGBMemoryRead>
 800246e:	4622      	mov	r2, r4
 8002470:	2103      	movs	r1, #3
 8002472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002476:	f001 b847 	b.w	8003508 <vGBFunctionBIT>
 800247a:	bf00      	nop
 800247c:	2400166c 	.word	0x2400166c

08002480 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 8002480:	4a02      	ldr	r2, [pc, #8]	; (800248c <vBIT_3_A+0xc>)
 8002482:	2103      	movs	r1, #3
 8002484:	7850      	ldrb	r0, [r2, #1]
 8002486:	f001 b83f 	b.w	8003508 <vGBFunctionBIT>
 800248a:	bf00      	nop
 800248c:	2400166c 	.word	0x2400166c

08002490 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 8002490:	4a02      	ldr	r2, [pc, #8]	; (800249c <vBIT_4_B+0xc>)
 8002492:	2104      	movs	r1, #4
 8002494:	78d0      	ldrb	r0, [r2, #3]
 8002496:	f001 b837 	b.w	8003508 <vGBFunctionBIT>
 800249a:	bf00      	nop
 800249c:	2400166c 	.word	0x2400166c

080024a0 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80024a0:	4a02      	ldr	r2, [pc, #8]	; (80024ac <vBIT_4_C+0xc>)
 80024a2:	2104      	movs	r1, #4
 80024a4:	7890      	ldrb	r0, [r2, #2]
 80024a6:	f001 b82f 	b.w	8003508 <vGBFunctionBIT>
 80024aa:	bf00      	nop
 80024ac:	2400166c 	.word	0x2400166c

080024b0 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <vBIT_4_D+0xc>)
 80024b2:	2104      	movs	r1, #4
 80024b4:	7950      	ldrb	r0, [r2, #5]
 80024b6:	f001 b827 	b.w	8003508 <vGBFunctionBIT>
 80024ba:	bf00      	nop
 80024bc:	2400166c 	.word	0x2400166c

080024c0 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <vBIT_4_E+0xc>)
 80024c2:	2104      	movs	r1, #4
 80024c4:	7910      	ldrb	r0, [r2, #4]
 80024c6:	f001 b81f 	b.w	8003508 <vGBFunctionBIT>
 80024ca:	bf00      	nop
 80024cc:	2400166c 	.word	0x2400166c

080024d0 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80024d0:	4a02      	ldr	r2, [pc, #8]	; (80024dc <vBIT_4_H+0xc>)
 80024d2:	2104      	movs	r1, #4
 80024d4:	79d0      	ldrb	r0, [r2, #7]
 80024d6:	f001 b817 	b.w	8003508 <vGBFunctionBIT>
 80024da:	bf00      	nop
 80024dc:	2400166c 	.word	0x2400166c

080024e0 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 80024e0:	4a02      	ldr	r2, [pc, #8]	; (80024ec <vBIT_4_L+0xc>)
 80024e2:	2104      	movs	r1, #4
 80024e4:	7990      	ldrb	r0, [r2, #6]
 80024e6:	f001 b80f 	b.w	8003508 <vGBFunctionBIT>
 80024ea:	bf00      	nop
 80024ec:	2400166c 	.word	0x2400166c

080024f0 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 80024f0:	b510      	push	{r4, lr}
 80024f2:	4c05      	ldr	r4, [pc, #20]	; (8002508 <vBIT_4_HL+0x18>)
 80024f4:	88e0      	ldrh	r0, [r4, #6]
 80024f6:	f001 f8df 	bl	80036b8 <ucGBMemoryRead>
 80024fa:	4622      	mov	r2, r4
 80024fc:	2104      	movs	r1, #4
 80024fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002502:	f001 b801 	b.w	8003508 <vGBFunctionBIT>
 8002506:	bf00      	nop
 8002508:	2400166c 	.word	0x2400166c

0800250c <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <vBIT_4_A+0xc>)
 800250e:	2104      	movs	r1, #4
 8002510:	7850      	ldrb	r0, [r2, #1]
 8002512:	f000 bff9 	b.w	8003508 <vGBFunctionBIT>
 8002516:	bf00      	nop
 8002518:	2400166c 	.word	0x2400166c

0800251c <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 800251c:	4a02      	ldr	r2, [pc, #8]	; (8002528 <vBIT_5_B+0xc>)
 800251e:	2105      	movs	r1, #5
 8002520:	78d0      	ldrb	r0, [r2, #3]
 8002522:	f000 bff1 	b.w	8003508 <vGBFunctionBIT>
 8002526:	bf00      	nop
 8002528:	2400166c 	.word	0x2400166c

0800252c <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <vBIT_5_C+0xc>)
 800252e:	2105      	movs	r1, #5
 8002530:	7890      	ldrb	r0, [r2, #2]
 8002532:	f000 bfe9 	b.w	8003508 <vGBFunctionBIT>
 8002536:	bf00      	nop
 8002538:	2400166c 	.word	0x2400166c

0800253c <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 800253c:	4a02      	ldr	r2, [pc, #8]	; (8002548 <vBIT_5_D+0xc>)
 800253e:	2105      	movs	r1, #5
 8002540:	7950      	ldrb	r0, [r2, #5]
 8002542:	f000 bfe1 	b.w	8003508 <vGBFunctionBIT>
 8002546:	bf00      	nop
 8002548:	2400166c 	.word	0x2400166c

0800254c <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <vBIT_5_E+0xc>)
 800254e:	2105      	movs	r1, #5
 8002550:	7910      	ldrb	r0, [r2, #4]
 8002552:	f000 bfd9 	b.w	8003508 <vGBFunctionBIT>
 8002556:	bf00      	nop
 8002558:	2400166c 	.word	0x2400166c

0800255c <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 800255c:	4a02      	ldr	r2, [pc, #8]	; (8002568 <vBIT_5_H+0xc>)
 800255e:	2105      	movs	r1, #5
 8002560:	79d0      	ldrb	r0, [r2, #7]
 8002562:	f000 bfd1 	b.w	8003508 <vGBFunctionBIT>
 8002566:	bf00      	nop
 8002568:	2400166c 	.word	0x2400166c

0800256c <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <vBIT_5_L+0xc>)
 800256e:	2105      	movs	r1, #5
 8002570:	7990      	ldrb	r0, [r2, #6]
 8002572:	f000 bfc9 	b.w	8003508 <vGBFunctionBIT>
 8002576:	bf00      	nop
 8002578:	2400166c 	.word	0x2400166c

0800257c <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 800257c:	b510      	push	{r4, lr}
 800257e:	4c05      	ldr	r4, [pc, #20]	; (8002594 <vBIT_5_HL+0x18>)
 8002580:	88e0      	ldrh	r0, [r4, #6]
 8002582:	f001 f899 	bl	80036b8 <ucGBMemoryRead>
 8002586:	4622      	mov	r2, r4
 8002588:	2105      	movs	r1, #5
 800258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800258e:	f000 bfbb 	b.w	8003508 <vGBFunctionBIT>
 8002592:	bf00      	nop
 8002594:	2400166c 	.word	0x2400166c

08002598 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 8002598:	4a02      	ldr	r2, [pc, #8]	; (80025a4 <vBIT_5_A+0xc>)
 800259a:	2105      	movs	r1, #5
 800259c:	7850      	ldrb	r0, [r2, #1]
 800259e:	f000 bfb3 	b.w	8003508 <vGBFunctionBIT>
 80025a2:	bf00      	nop
 80025a4:	2400166c 	.word	0x2400166c

080025a8 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80025a8:	4a02      	ldr	r2, [pc, #8]	; (80025b4 <vBIT_6_B+0xc>)
 80025aa:	2106      	movs	r1, #6
 80025ac:	78d0      	ldrb	r0, [r2, #3]
 80025ae:	f000 bfab 	b.w	8003508 <vGBFunctionBIT>
 80025b2:	bf00      	nop
 80025b4:	2400166c 	.word	0x2400166c

080025b8 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80025b8:	4a02      	ldr	r2, [pc, #8]	; (80025c4 <vBIT_6_C+0xc>)
 80025ba:	2106      	movs	r1, #6
 80025bc:	7890      	ldrb	r0, [r2, #2]
 80025be:	f000 bfa3 	b.w	8003508 <vGBFunctionBIT>
 80025c2:	bf00      	nop
 80025c4:	2400166c 	.word	0x2400166c

080025c8 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80025c8:	4a02      	ldr	r2, [pc, #8]	; (80025d4 <vBIT_6_D+0xc>)
 80025ca:	2106      	movs	r1, #6
 80025cc:	7950      	ldrb	r0, [r2, #5]
 80025ce:	f000 bf9b 	b.w	8003508 <vGBFunctionBIT>
 80025d2:	bf00      	nop
 80025d4:	2400166c 	.word	0x2400166c

080025d8 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <vBIT_6_E+0xc>)
 80025da:	2106      	movs	r1, #6
 80025dc:	7910      	ldrb	r0, [r2, #4]
 80025de:	f000 bf93 	b.w	8003508 <vGBFunctionBIT>
 80025e2:	bf00      	nop
 80025e4:	2400166c 	.word	0x2400166c

080025e8 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 80025e8:	4a02      	ldr	r2, [pc, #8]	; (80025f4 <vBIT_6_H+0xc>)
 80025ea:	2106      	movs	r1, #6
 80025ec:	79d0      	ldrb	r0, [r2, #7]
 80025ee:	f000 bf8b 	b.w	8003508 <vGBFunctionBIT>
 80025f2:	bf00      	nop
 80025f4:	2400166c 	.word	0x2400166c

080025f8 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <vBIT_6_L+0xc>)
 80025fa:	2106      	movs	r1, #6
 80025fc:	7990      	ldrb	r0, [r2, #6]
 80025fe:	f000 bf83 	b.w	8003508 <vGBFunctionBIT>
 8002602:	bf00      	nop
 8002604:	2400166c 	.word	0x2400166c

08002608 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002608:	b510      	push	{r4, lr}
 800260a:	4c05      	ldr	r4, [pc, #20]	; (8002620 <vBIT_6_HL+0x18>)
 800260c:	88e0      	ldrh	r0, [r4, #6]
 800260e:	f001 f853 	bl	80036b8 <ucGBMemoryRead>
 8002612:	4622      	mov	r2, r4
 8002614:	2106      	movs	r1, #6
 8002616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261a:	f000 bf75 	b.w	8003508 <vGBFunctionBIT>
 800261e:	bf00      	nop
 8002620:	2400166c 	.word	0x2400166c

08002624 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002624:	4a02      	ldr	r2, [pc, #8]	; (8002630 <vBIT_6_A+0xc>)
 8002626:	2106      	movs	r1, #6
 8002628:	7850      	ldrb	r0, [r2, #1]
 800262a:	f000 bf6d 	b.w	8003508 <vGBFunctionBIT>
 800262e:	bf00      	nop
 8002630:	2400166c 	.word	0x2400166c

08002634 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002634:	4a02      	ldr	r2, [pc, #8]	; (8002640 <vBIT_7_B+0xc>)
 8002636:	2107      	movs	r1, #7
 8002638:	78d0      	ldrb	r0, [r2, #3]
 800263a:	f000 bf65 	b.w	8003508 <vGBFunctionBIT>
 800263e:	bf00      	nop
 8002640:	2400166c 	.word	0x2400166c

08002644 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002644:	4a02      	ldr	r2, [pc, #8]	; (8002650 <vBIT_7_C+0xc>)
 8002646:	2107      	movs	r1, #7
 8002648:	7890      	ldrb	r0, [r2, #2]
 800264a:	f000 bf5d 	b.w	8003508 <vGBFunctionBIT>
 800264e:	bf00      	nop
 8002650:	2400166c 	.word	0x2400166c

08002654 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 8002654:	4a02      	ldr	r2, [pc, #8]	; (8002660 <vBIT_7_D+0xc>)
 8002656:	2107      	movs	r1, #7
 8002658:	7950      	ldrb	r0, [r2, #5]
 800265a:	f000 bf55 	b.w	8003508 <vGBFunctionBIT>
 800265e:	bf00      	nop
 8002660:	2400166c 	.word	0x2400166c

08002664 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <vBIT_7_E+0xc>)
 8002666:	2107      	movs	r1, #7
 8002668:	7910      	ldrb	r0, [r2, #4]
 800266a:	f000 bf4d 	b.w	8003508 <vGBFunctionBIT>
 800266e:	bf00      	nop
 8002670:	2400166c 	.word	0x2400166c

08002674 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 8002674:	4a02      	ldr	r2, [pc, #8]	; (8002680 <vBIT_7_H+0xc>)
 8002676:	2107      	movs	r1, #7
 8002678:	79d0      	ldrb	r0, [r2, #7]
 800267a:	f000 bf45 	b.w	8003508 <vGBFunctionBIT>
 800267e:	bf00      	nop
 8002680:	2400166c 	.word	0x2400166c

08002684 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 8002684:	4a02      	ldr	r2, [pc, #8]	; (8002690 <vBIT_7_L+0xc>)
 8002686:	2107      	movs	r1, #7
 8002688:	7990      	ldrb	r0, [r2, #6]
 800268a:	f000 bf3d 	b.w	8003508 <vGBFunctionBIT>
 800268e:	bf00      	nop
 8002690:	2400166c 	.word	0x2400166c

08002694 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 8002694:	b510      	push	{r4, lr}
 8002696:	4c05      	ldr	r4, [pc, #20]	; (80026ac <vBIT_7_HL+0x18>)
 8002698:	88e0      	ldrh	r0, [r4, #6]
 800269a:	f001 f80d 	bl	80036b8 <ucGBMemoryRead>
 800269e:	4622      	mov	r2, r4
 80026a0:	2107      	movs	r1, #7
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a6:	f000 bf2f 	b.w	8003508 <vGBFunctionBIT>
 80026aa:	bf00      	nop
 80026ac:	2400166c 	.word	0x2400166c

080026b0 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80026b0:	4a02      	ldr	r2, [pc, #8]	; (80026bc <vBIT_7_A+0xc>)
 80026b2:	2107      	movs	r1, #7
 80026b4:	7850      	ldrb	r0, [r2, #1]
 80026b6:	f000 bf27 	b.w	8003508 <vGBFunctionBIT>
 80026ba:	bf00      	nop
 80026bc:	2400166c 	.word	0x2400166c

080026c0 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vRES_0_HL+0x1c>)
 80026c2:	2100      	movs	r1, #0
 80026c4:	b510      	push	{r4, lr}
 80026c6:	88dc      	ldrh	r4, [r3, #6]
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 ff35 	bl	8003538 <ucGBFunctionRESHL>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4620      	mov	r0, r4
 80026d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d6:	f001 b817 	b.w	8003708 <vGBMemoryWrite>
 80026da:	bf00      	nop
 80026dc:	2400166c 	.word	0x2400166c

080026e0 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <vRES_1_HL+0x1c>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	b510      	push	{r4, lr}
 80026e6:	88dc      	ldrh	r4, [r3, #6]
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 ff25 	bl	8003538 <ucGBFunctionRESHL>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4620      	mov	r0, r4
 80026f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f6:	f001 b807 	b.w	8003708 <vGBMemoryWrite>
 80026fa:	bf00      	nop
 80026fc:	2400166c 	.word	0x2400166c

08002700 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <vRES_2_HL+0x1c>)
 8002702:	2102      	movs	r1, #2
 8002704:	b510      	push	{r4, lr}
 8002706:	88dc      	ldrh	r4, [r3, #6]
 8002708:	4620      	mov	r0, r4
 800270a:	f000 ff15 	bl	8003538 <ucGBFunctionRESHL>
 800270e:	4601      	mov	r1, r0
 8002710:	4620      	mov	r0, r4
 8002712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002716:	f000 bff7 	b.w	8003708 <vGBMemoryWrite>
 800271a:	bf00      	nop
 800271c:	2400166c 	.word	0x2400166c

08002720 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <vRES_3_HL+0x1c>)
 8002722:	2103      	movs	r1, #3
 8002724:	b510      	push	{r4, lr}
 8002726:	88dc      	ldrh	r4, [r3, #6]
 8002728:	4620      	mov	r0, r4
 800272a:	f000 ff05 	bl	8003538 <ucGBFunctionRESHL>
 800272e:	4601      	mov	r1, r0
 8002730:	4620      	mov	r0, r4
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002736:	f000 bfe7 	b.w	8003708 <vGBMemoryWrite>
 800273a:	bf00      	nop
 800273c:	2400166c 	.word	0x2400166c

08002740 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <vRES_4_HL+0x1c>)
 8002742:	2104      	movs	r1, #4
 8002744:	b510      	push	{r4, lr}
 8002746:	88dc      	ldrh	r4, [r3, #6]
 8002748:	4620      	mov	r0, r4
 800274a:	f000 fef5 	bl	8003538 <ucGBFunctionRESHL>
 800274e:	4601      	mov	r1, r0
 8002750:	4620      	mov	r0, r4
 8002752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002756:	f000 bfd7 	b.w	8003708 <vGBMemoryWrite>
 800275a:	bf00      	nop
 800275c:	2400166c 	.word	0x2400166c

08002760 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <vRES_5_HL+0x1c>)
 8002762:	2105      	movs	r1, #5
 8002764:	b510      	push	{r4, lr}
 8002766:	88dc      	ldrh	r4, [r3, #6]
 8002768:	4620      	mov	r0, r4
 800276a:	f000 fee5 	bl	8003538 <ucGBFunctionRESHL>
 800276e:	4601      	mov	r1, r0
 8002770:	4620      	mov	r0, r4
 8002772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002776:	f000 bfc7 	b.w	8003708 <vGBMemoryWrite>
 800277a:	bf00      	nop
 800277c:	2400166c 	.word	0x2400166c

08002780 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <vRES_6_HL+0x1c>)
 8002782:	2106      	movs	r1, #6
 8002784:	b510      	push	{r4, lr}
 8002786:	88dc      	ldrh	r4, [r3, #6]
 8002788:	4620      	mov	r0, r4
 800278a:	f000 fed5 	bl	8003538 <ucGBFunctionRESHL>
 800278e:	4601      	mov	r1, r0
 8002790:	4620      	mov	r0, r4
 8002792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002796:	f000 bfb7 	b.w	8003708 <vGBMemoryWrite>
 800279a:	bf00      	nop
 800279c:	2400166c 	.word	0x2400166c

080027a0 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <vRES_7_HL+0x1c>)
 80027a2:	2107      	movs	r1, #7
 80027a4:	b510      	push	{r4, lr}
 80027a6:	88dc      	ldrh	r4, [r3, #6]
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 fec5 	bl	8003538 <ucGBFunctionRESHL>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4620      	mov	r0, r4
 80027b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b6:	f000 bfa7 	b.w	8003708 <vGBMemoryWrite>
 80027ba:	bf00      	nop
 80027bc:	2400166c 	.word	0x2400166c

080027c0 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <vSET_0_HL+0x1c>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	b510      	push	{r4, lr}
 80027c6:	88dc      	ldrh	r4, [r3, #6]
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 fec1 	bl	8003550 <ucGBFunctionSETHL>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4620      	mov	r0, r4
 80027d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d6:	f000 bf97 	b.w	8003708 <vGBMemoryWrite>
 80027da:	bf00      	nop
 80027dc:	2400166c 	.word	0x2400166c

080027e0 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <vSET_1_HL+0x1c>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	b510      	push	{r4, lr}
 80027e6:	88dc      	ldrh	r4, [r3, #6]
 80027e8:	4620      	mov	r0, r4
 80027ea:	f000 feb1 	bl	8003550 <ucGBFunctionSETHL>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4620      	mov	r0, r4
 80027f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f6:	f000 bf87 	b.w	8003708 <vGBMemoryWrite>
 80027fa:	bf00      	nop
 80027fc:	2400166c 	.word	0x2400166c

08002800 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <vSET_2_HL+0x1c>)
 8002802:	2102      	movs	r1, #2
 8002804:	b510      	push	{r4, lr}
 8002806:	88dc      	ldrh	r4, [r3, #6]
 8002808:	4620      	mov	r0, r4
 800280a:	f000 fea1 	bl	8003550 <ucGBFunctionSETHL>
 800280e:	4601      	mov	r1, r0
 8002810:	4620      	mov	r0, r4
 8002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002816:	f000 bf77 	b.w	8003708 <vGBMemoryWrite>
 800281a:	bf00      	nop
 800281c:	2400166c 	.word	0x2400166c

08002820 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <vSET_3_HL+0x1c>)
 8002822:	2103      	movs	r1, #3
 8002824:	b510      	push	{r4, lr}
 8002826:	88dc      	ldrh	r4, [r3, #6]
 8002828:	4620      	mov	r0, r4
 800282a:	f000 fe91 	bl	8003550 <ucGBFunctionSETHL>
 800282e:	4601      	mov	r1, r0
 8002830:	4620      	mov	r0, r4
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002836:	f000 bf67 	b.w	8003708 <vGBMemoryWrite>
 800283a:	bf00      	nop
 800283c:	2400166c 	.word	0x2400166c

08002840 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <vSET_4_HL+0x1c>)
 8002842:	2104      	movs	r1, #4
 8002844:	b510      	push	{r4, lr}
 8002846:	88dc      	ldrh	r4, [r3, #6]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 fe81 	bl	8003550 <ucGBFunctionSETHL>
 800284e:	4601      	mov	r1, r0
 8002850:	4620      	mov	r0, r4
 8002852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002856:	f000 bf57 	b.w	8003708 <vGBMemoryWrite>
 800285a:	bf00      	nop
 800285c:	2400166c 	.word	0x2400166c

08002860 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <vSET_5_HL+0x1c>)
 8002862:	2105      	movs	r1, #5
 8002864:	b510      	push	{r4, lr}
 8002866:	88dc      	ldrh	r4, [r3, #6]
 8002868:	4620      	mov	r0, r4
 800286a:	f000 fe71 	bl	8003550 <ucGBFunctionSETHL>
 800286e:	4601      	mov	r1, r0
 8002870:	4620      	mov	r0, r4
 8002872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002876:	f000 bf47 	b.w	8003708 <vGBMemoryWrite>
 800287a:	bf00      	nop
 800287c:	2400166c 	.word	0x2400166c

08002880 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <vSET_6_HL+0x1c>)
 8002882:	2106      	movs	r1, #6
 8002884:	b510      	push	{r4, lr}
 8002886:	88dc      	ldrh	r4, [r3, #6]
 8002888:	4620      	mov	r0, r4
 800288a:	f000 fe61 	bl	8003550 <ucGBFunctionSETHL>
 800288e:	4601      	mov	r1, r0
 8002890:	4620      	mov	r0, r4
 8002892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002896:	f000 bf37 	b.w	8003708 <vGBMemoryWrite>
 800289a:	bf00      	nop
 800289c:	2400166c 	.word	0x2400166c

080028a0 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <vSET_7_HL+0x1c>)
 80028a2:	2107      	movs	r1, #7
 80028a4:	b510      	push	{r4, lr}
 80028a6:	88dc      	ldrh	r4, [r3, #6]
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 fe51 	bl	8003550 <ucGBFunctionSETHL>
 80028ae:	4601      	mov	r1, r0
 80028b0:	4620      	mov	r0, r4
 80028b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b6:	f000 bf27 	b.w	8003708 <vGBMemoryWrite>
 80028ba:	bf00      	nop
 80028bc:	2400166c 	.word	0x2400166c

080028c0 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 80028c0:	b510      	push	{r4, lr}
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <vCCF+0x38>)
 80028c4:	2106      	movs	r1, #6
 80028c6:	4620      	mov	r0, r4
 80028c8:	f000 f9f2 	bl	8002cb0 <resetbit>
 80028cc:	4620      	mov	r0, r4
 80028ce:	2105      	movs	r1, #5
 80028d0:	f000 f9ee 	bl	8002cb0 <resetbit>
 80028d4:	7820      	ldrb	r0, [r4, #0]
 80028d6:	2104      	movs	r1, #4
 80028d8:	f000 f9f2 	bl	8002cc0 <checkbit>
 80028dc:	b128      	cbz	r0, 80028ea <vCCF+0x2a>
 80028de:	4620      	mov	r0, r4
 80028e0:	2104      	movs	r1, #4
 80028e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e6:	f000 b9e3 	b.w	8002cb0 <resetbit>
 80028ea:	4620      	mov	r0, r4
 80028ec:	2104      	movs	r1, #4
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	f000 b9d5 	b.w	8002ca0 <setbit>
 80028f6:	bf00      	nop
 80028f8:	2400166c 	.word	0x2400166c

080028fc <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028fc:	4901      	ldr	r1, [pc, #4]	; (8002904 <vRET_C.part.0+0x8>)
 80028fe:	1e88      	subs	r0, r1, #2
 8002900:	f000 bc2e 	b.w	8003160 <vGBFunctionRET>
 8002904:	24001676 	.word	0x24001676

08002908 <vRET_NZ>:
 8002908:	b510      	push	{r4, lr}
 800290a:	4c0b      	ldr	r4, [pc, #44]	; (8002938 <vRET_NZ+0x30>)
 800290c:	2107      	movs	r1, #7
 800290e:	7820      	ldrb	r0, [r4, #0]
 8002910:	f000 f9d6 	bl	8002cc0 <checkbit>
 8002914:	2800      	cmp	r0, #0
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <vRET_NZ+0x34>)
 8002918:	f04f 0107 	mov.w	r1, #7
 800291c:	bf14      	ite	ne
 800291e:	2208      	movne	r2, #8
 8002920:	2214      	moveq	r2, #20
 8002922:	7820      	ldrb	r0, [r4, #0]
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	f000 f9cb 	bl	8002cc0 <checkbit>
 800292a:	b100      	cbz	r0, 800292e <vRET_NZ+0x26>
 800292c:	bd10      	pop	{r4, pc}
 800292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002932:	f7ff bfe3 	b.w	80028fc <vRET_C.part.0>
 8002936:	bf00      	nop
 8002938:	2400166c 	.word	0x2400166c
 800293c:	240010a0 	.word	0x240010a0

08002940 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002940:	b510      	push	{r4, lr}
 8002942:	4c0b      	ldr	r4, [pc, #44]	; (8002970 <vRET_Z+0x30>)
 8002944:	2107      	movs	r1, #7
 8002946:	7820      	ldrb	r0, [r4, #0]
 8002948:	f000 f9ba 	bl	8002cc0 <checkbit>
 800294c:	2800      	cmp	r0, #0
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <vRET_Z+0x34>)
 8002950:	f04f 0107 	mov.w	r1, #7
 8002954:	bf14      	ite	ne
 8002956:	2214      	movne	r2, #20
 8002958:	2208      	moveq	r2, #8
 800295a:	7820      	ldrb	r0, [r4, #0]
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	f000 f9af 	bl	8002cc0 <checkbit>
 8002962:	b900      	cbnz	r0, 8002966 <vRET_Z+0x26>
 8002964:	bd10      	pop	{r4, pc}
 8002966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800296a:	f7ff bfc7 	b.w	80028fc <vRET_C.part.0>
 800296e:	bf00      	nop
 8002970:	2400166c 	.word	0x2400166c
 8002974:	240010a0 	.word	0x240010a0

08002978 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002978:	b510      	push	{r4, lr}
 800297a:	4c0b      	ldr	r4, [pc, #44]	; (80029a8 <vRET_NC+0x30>)
 800297c:	2104      	movs	r1, #4
 800297e:	7820      	ldrb	r0, [r4, #0]
 8002980:	f000 f99e 	bl	8002cc0 <checkbit>
 8002984:	2800      	cmp	r0, #0
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <vRET_NC+0x34>)
 8002988:	f04f 0104 	mov.w	r1, #4
 800298c:	bf14      	ite	ne
 800298e:	2208      	movne	r2, #8
 8002990:	2214      	moveq	r2, #20
 8002992:	7820      	ldrb	r0, [r4, #0]
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	f000 f993 	bl	8002cc0 <checkbit>
 800299a:	b100      	cbz	r0, 800299e <vRET_NC+0x26>
 800299c:	bd10      	pop	{r4, pc}
 800299e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029a2:	f7ff bfab 	b.w	80028fc <vRET_C.part.0>
 80029a6:	bf00      	nop
 80029a8:	2400166c 	.word	0x2400166c
 80029ac:	240010a0 	.word	0x240010a0

080029b0 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4c0b      	ldr	r4, [pc, #44]	; (80029e0 <vRET_C+0x30>)
 80029b4:	2104      	movs	r1, #4
 80029b6:	7820      	ldrb	r0, [r4, #0]
 80029b8:	f000 f982 	bl	8002cc0 <checkbit>
 80029bc:	2800      	cmp	r0, #0
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <vRET_C+0x34>)
 80029c0:	f04f 0104 	mov.w	r1, #4
 80029c4:	bf14      	ite	ne
 80029c6:	2214      	movne	r2, #20
 80029c8:	2208      	moveq	r2, #8
 80029ca:	7820      	ldrb	r0, [r4, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	f000 f977 	bl	8002cc0 <checkbit>
 80029d2:	b900      	cbnz	r0, 80029d6 <vRET_C+0x26>
 80029d4:	bd10      	pop	{r4, pc}
 80029d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029da:	f7ff bf8f 	b.w	80028fc <vRET_C.part.0>
 80029de:	bf00      	nop
 80029e0:	2400166c 	.word	0x2400166c
 80029e4:	240010a0 	.word	0x240010a0

080029e8 <vLD_A_A>:
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <vLD_B_B>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <vLD_C_C>:
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <vLD_D_D>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <vLD_E_E>:
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <vLD_H_H>:
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <vLD_L_L>:
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <ucGetTstate+0x8>)
}
 8002a06:	7818      	ldrb	r0, [r3, #0]
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	240010a9 	.word	0x240010a9

08002a10 <vGBCPUHaltedHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUHaltedHandler(){
 8002a10:	b538      	push	{r3, r4, r5, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002a12:	4c13      	ldr	r4, [pc, #76]	; (8002a60 <vGBCPUHaltedHandler+0x50>)
 8002a14:	7823      	ldrb	r3, [r4, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d002      	beq.n	8002a20 <vGBCPUHaltedHandler+0x10>
				}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
				}
			}

	}else{
		ucOneCycleInterruptDelay++;
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	7023      	strb	r3, [r4, #0]
	}
}
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
			if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002a20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a24:	f000 fe48 	bl	80036b8 <ucGBMemoryRead>
 8002a28:	4605      	mov	r5, r0
 8002a2a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a2e:	f000 fe43 	bl	80036b8 <ucGBMemoryRead>
 8002a32:	4028      	ands	r0, r5
 8002a34:	06c2      	lsls	r2, r0, #27
 8002a36:	d0f2      	beq.n	8002a1e <vGBCPUHaltedHandler+0xe>
				ucInterruptMasterEnable = 0;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <vGBCPUHaltedHandler+0x54>)
 8002a3a:	2500      	movs	r5, #0
				uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
				ucInterruptMasterEnable = 0;
 8002a40:	701d      	strb	r5, [r3, #0]
				ucOneCycleInterruptDelay = 0;
 8002a42:	7025      	strb	r5, [r4, #0]
				uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a44:	f000 fe38 	bl	80036b8 <ucGBMemoryRead>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a4e:	f000 fe33 	bl	80036b8 <ucGBMemoryRead>
 8002a52:	4020      	ands	r0, r4
				}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
 8002a54:	06c3      	lsls	r3, r0, #27
 8002a56:	d0e2      	beq.n	8002a1e <vGBCPUHaltedHandler+0xe>
				if      (InterruptSetandEn &  VBLANK_INTERRUPT){ ucHALTED = 0;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <vGBCPUHaltedHandler+0x58>)
 8002a5a:	701d      	strb	r5, [r3, #0]
}
 8002a5c:	bd38      	pop	{r3, r4, r5, pc}
 8002a5e:	bf00      	nop
 8002a60:	240010ac 	.word	0x240010ac
 8002a64:	240010ab 	.word	0x240010ab
 8002a68:	240010aa 	.word	0x240010aa

08002a6c <vGBCPUInterruptHandler>:

void vGBCPUInterruptHandler(){
 8002a6c:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002a6e:	4d39      	ldr	r5, [pc, #228]	; (8002b54 <vGBCPUInterruptHandler+0xe8>)
 8002a70:	782c      	ldrb	r4, [r5, #0]
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d002      	beq.n	8002a7c <vGBCPUInterruptHandler+0x10>
				tStates += 5*4;
			}
		}

	}else{
		ucOneCycleInterruptDelay++;
 8002a76:	3401      	adds	r4, #1
 8002a78:	702c      	strb	r4, [r5, #0]
	}
}
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002a7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a80:	f000 fe1a 	bl	80036b8 <ucGBMemoryRead>
 8002a84:	4606      	mov	r6, r0
 8002a86:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a8a:	f000 fe15 	bl	80036b8 <ucGBMemoryRead>
 8002a8e:	4030      	ands	r0, r6
 8002a90:	06c6      	lsls	r6, r0, #27
 8002a92:	d0f2      	beq.n	8002a7a <vGBCPUInterruptHandler+0xe>
			ucHALTED = 0;
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <vGBCPUInterruptHandler+0xec>)
			ucInterruptMasterEnable = 0;
 8002a96:	2600      	movs	r6, #0
 8002a98:	4a30      	ldr	r2, [pc, #192]	; (8002b5c <vGBCPUInterruptHandler+0xf0>)
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucHALTED = 0;
 8002a9e:	701e      	strb	r6, [r3, #0]
			ucInterruptMasterEnable = 0;
 8002aa0:	7016      	strb	r6, [r2, #0]
			ucOneCycleInterruptDelay = 0;
 8002aa2:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002aa4:	f000 fe08 	bl	80036b8 <ucGBMemoryRead>
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002aae:	f000 fe03 	bl	80036b8 <ucGBMemoryRead>
 8002ab2:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002ab4:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002ab6:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002ab8:	d418      	bmi.n	8002aec <vGBCPUInterruptHandler+0x80>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002aba:	0798      	lsls	r0, r3, #30
 8002abc:	d423      	bmi.n	8002b06 <vGBCPUInterruptHandler+0x9a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002abe:	0759      	lsls	r1, r3, #29
 8002ac0:	d42e      	bmi.n	8002b20 <vGBCPUInterruptHandler+0xb4>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002ac2:	071a      	lsls	r2, r3, #28
 8002ac4:	d439      	bmi.n	8002b3a <vGBCPUInterruptHandler+0xce>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = JOYPAD_VECTOR;
 8002ac6:	06db      	lsls	r3, r3, #27
 8002ac8:	d5d7      	bpl.n	8002a7a <vGBCPUInterruptHandler+0xe>
 8002aca:	2104      	movs	r1, #4
 8002acc:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002ad0:	f000 fdd0 	bl	8003674 <vGBMemoryResetBit>
 8002ad4:	4922      	ldr	r1, [pc, #136]	; (8002b60 <vGBCPUInterruptHandler+0xf4>)
 8002ad6:	1e88      	subs	r0, r1, #2
 8002ad8:	f000 fb60 	bl	800319c <vGBFunctionPUSH>
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <vGBCPUInterruptHandler+0xf8>)
 8002ade:	2260      	movs	r2, #96	; 0x60
 8002ae0:	815a      	strh	r2, [r3, #10]
				tStates += 5*4;
 8002ae2:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <vGBCPUInterruptHandler+0xfc>)
 8002ae4:	7813      	ldrb	r3, [r2, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	7013      	strb	r3, [r2, #0]
}
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002aec:	4631      	mov	r1, r6
 8002aee:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002af2:	f000 fdbf 	bl	8003674 <vGBMemoryResetBit>
 8002af6:	491a      	ldr	r1, [pc, #104]	; (8002b60 <vGBCPUInterruptHandler+0xf4>)
 8002af8:	1e88      	subs	r0, r1, #2
 8002afa:	f000 fb4f 	bl	800319c <vGBFunctionPUSH>
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <vGBCPUInterruptHandler+0xf8>)
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002b04:	e7ed      	b.n	8002ae2 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002b06:	4621      	mov	r1, r4
 8002b08:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b0c:	f000 fdb2 	bl	8003674 <vGBMemoryResetBit>
 8002b10:	4913      	ldr	r1, [pc, #76]	; (8002b60 <vGBCPUInterruptHandler+0xf4>)
 8002b12:	1e88      	subs	r0, r1, #2
 8002b14:	f000 fb42 	bl	800319c <vGBFunctionPUSH>
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <vGBCPUInterruptHandler+0xf8>)
 8002b1a:	2248      	movs	r2, #72	; 0x48
 8002b1c:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002b1e:	e7e0      	b.n	8002ae2 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002b20:	2102      	movs	r1, #2
 8002b22:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b26:	f000 fda5 	bl	8003674 <vGBMemoryResetBit>
 8002b2a:	490d      	ldr	r1, [pc, #52]	; (8002b60 <vGBCPUInterruptHandler+0xf4>)
 8002b2c:	1e88      	subs	r0, r1, #2
 8002b2e:	f000 fb35 	bl	800319c <vGBFunctionPUSH>
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <vGBCPUInterruptHandler+0xf8>)
 8002b34:	2250      	movs	r2, #80	; 0x50
 8002b36:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002b38:	e7d3      	b.n	8002ae2 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002b40:	f000 fd98 	bl	8003674 <vGBMemoryResetBit>
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <vGBCPUInterruptHandler+0xf4>)
 8002b46:	1e88      	subs	r0, r1, #2
 8002b48:	f000 fb28 	bl	800319c <vGBFunctionPUSH>
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <vGBCPUInterruptHandler+0xf8>)
 8002b4e:	2258      	movs	r2, #88	; 0x58
 8002b50:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002b52:	e7c6      	b.n	8002ae2 <vGBCPUInterruptHandler+0x76>
 8002b54:	240010ac 	.word	0x240010ac
 8002b58:	240010aa 	.word	0x240010aa
 8002b5c:	240010ab 	.word	0x240010ab
 8002b60:	24001676 	.word	0x24001676
 8002b64:	2400166c 	.word	0x2400166c
 8002b68:	240010a9 	.word	0x240010a9

08002b6c <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(reg.PC == pc){
 8002b6e:	4e2b      	ldr	r6, [pc, #172]	; (8002c1c <vGBCPUinstr+0xb0>)
void vGBCPUinstr(uint8_t opcode){
 8002b70:	4604      	mov	r4, r0
	if(reg.PC == pc){
 8002b72:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <vGBCPUinstr+0xb4>)
 8002b74:	8972      	ldrh	r2, [r6, #10]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <vGBCPUinstr+0x18>
		num++;
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <vGBCPUinstr+0xb8>)
 8002b7e:	7813      	ldrb	r3, [r2, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	7013      	strb	r3, [r2, #0]
	}

	if(!ucHALTED){
 8002b84:	4d28      	ldr	r5, [pc, #160]	; (8002c28 <vGBCPUinstr+0xbc>)
 8002b86:	782b      	ldrb	r3, [r5, #0]
 8002b88:	b163      	cbz	r3, 8002ba4 <vGBCPUinstr+0x38>
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <vGBCPUinstr+0xc0>)
 8002b8c:	7818      	ldrb	r0, [r3, #0]
			tStates = instructions[opcode].Tstate;
		}

	}

	vGBMemoryIncTimers(tStates >> 2);
 8002b8e:	0880      	lsrs	r0, r0, #2
 8002b90:	f000 fe66 	bl	8003860 <vGBMemoryIncTimers>

	if(ucInterruptMasterEnable == 1)
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <vGBCPUinstr+0xc4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d01c      	beq.n	8002bd6 <vGBCPUinstr+0x6a>
		vGBCPUInterruptHandler();

	if(ucHALTED == 1)
 8002b9c:	782b      	ldrb	r3, [r5, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d015      	beq.n	8002bce <vGBCPUinstr+0x62>
		vGBCPUHaltedHandler();

}
 8002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vGBMemorySetOP(opcode);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f000 fcdd 	bl	8003564 <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002baa:	2ccb      	cmp	r4, #203	; 0xcb
 8002bac:	d01b      	beq.n	8002be6 <vGBCPUinstr+0x7a>
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <vGBCPUinstr+0xc8>)
 8002bb0:	8971      	ldrh	r1, [r6, #10]
 8002bb2:	eb02 07c4 	add.w	r7, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bb6:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bba:	793b      	ldrb	r3, [r7, #4]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002bc0:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002bc2:	7978      	ldrb	r0, [r7, #5]
 8002bc4:	28ff      	cmp	r0, #255	; 0xff
 8002bc6:	d009      	beq.n	8002bdc <vGBCPUinstr+0x70>
			tStates = instructions[opcode].Tstate;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <vGBCPUinstr+0xc0>)
 8002bca:	7018      	strb	r0, [r3, #0]
 8002bcc:	e7df      	b.n	8002b8e <vGBCPUinstr+0x22>
}
 8002bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		vGBCPUHaltedHandler();
 8002bd2:	f7ff bf1d 	b.w	8002a10 <vGBCPUHaltedHandler>
		vGBCPUInterruptHandler();
 8002bd6:	f7ff ff49 	bl	8002a6c <vGBCPUInterruptHandler>
 8002bda:	e7df      	b.n	8002b9c <vGBCPUinstr+0x30>
			tStates = customDuration;
 8002bdc:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <vGBCPUinstr+0xcc>)
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <vGBCPUinstr+0xc0>)
 8002be0:	7810      	ldrb	r0, [r2, #0]
 8002be2:	7018      	strb	r0, [r3, #0]
 8002be4:	e7d3      	b.n	8002b8e <vGBCPUinstr+0x22>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002be6:	8970      	ldrh	r0, [r6, #10]
 8002be8:	4c14      	ldr	r4, [pc, #80]	; (8002c3c <vGBCPUinstr+0xd0>)
 8002bea:	3001      	adds	r0, #1
 8002bec:	b280      	uxth	r0, r0
 8002bee:	f000 fd63 	bl	80036b8 <ucGBMemoryRead>
 8002bf2:	8971      	ldrh	r1, [r6, #10]
 8002bf4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <vGBCPUinstr+0xc8>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002bfa:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002bfc:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002c00:	440b      	add	r3, r1
 8002c02:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002c04:	4790      	blx	r2
			tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002c06:	8970      	ldrh	r0, [r6, #10]
 8002c08:	3801      	subs	r0, #1
 8002c0a:	b280      	uxth	r0, r0
 8002c0c:	f000 fd54 	bl	80036b8 <ucGBMemoryRead>
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <vGBCPUinstr+0xc0>)
 8002c12:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002c16:	7940      	ldrb	r0, [r0, #5]
 8002c18:	7018      	strb	r0, [r3, #0]
 8002c1a:	e7b8      	b.n	8002b8e <vGBCPUinstr+0x22>
 8002c1c:	2400166c 	.word	0x2400166c
 8002c20:	2400080c 	.word	0x2400080c
 8002c24:	240010a8 	.word	0x240010a8
 8002c28:	240010aa 	.word	0x240010aa
 8002c2c:	240010a9 	.word	0x240010a9
 8002c30:	240010ab 	.word	0x240010ab
 8002c34:	2400000c 	.word	0x2400000c
 8002c38:	240010a0 	.word	0x240010a0
 8002c3c:	24000810 	.word	0x24000810

08002c40 <vGBCPUboot>:
void vGBCPUboot(){
 8002c40:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002c42:	4c12      	ldr	r4, [pc, #72]	; (8002c8c <vGBCPUboot+0x4c>)
 8002c44:	8960      	ldrh	r0, [r4, #10]
 8002c46:	28ff      	cmp	r0, #255	; 0xff
 8002c48:	d90a      	bls.n	8002c60 <vGBCPUboot+0x20>
		numcount++;
 8002c4a:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <vGBCPUboot+0x50>)
		if(n == 0){
 8002c4c:	4d11      	ldr	r5, [pc, #68]	; (8002c94 <vGBCPUboot+0x54>)
		numcount++;
 8002c4e:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002c52:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002c54:	3301      	adds	r3, #1
 8002c56:	f141 0100 	adc.w	r1, r1, #0
 8002c5a:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002c5e:	b12e      	cbz	r6, 8002c6c <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c60:	f000 fd2a 	bl	80036b8 <ucGBMemoryRead>
}
 8002c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c68:	f7ff bf80 	b.w	8002b6c <vGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002c6c:	f001 fa6c 	bl	8004148 <getRomPointer>
 8002c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c74:	f000 fc7c 	bl	8003570 <vGBMemoryLoad>
			n = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	8960      	ldrh	r0, [r4, #10]
 8002c7c:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c7e:	f000 fd1b 	bl	80036b8 <ucGBMemoryRead>
}
 8002c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002c86:	f7ff bf71 	b.w	8002b6c <vGBCPUinstr>
 8002c8a:	bf00      	nop
 8002c8c:	2400166c 	.word	0x2400166c
 8002c90:	24001660 	.word	0x24001660
 8002c94:	240010a4 	.word	0x240010a4

08002c98 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002c98:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002c9c:	b280      	uxth	r0, r0
 8002c9e:	4770      	bx	lr

08002ca0 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	fa03 f101 	lsl.w	r1, r3, r1
 8002ca6:	7803      	ldrb	r3, [r0, #0]
 8002ca8:	4319      	orrs	r1, r3
 8002caa:	7001      	strb	r1, [r0, #0]
}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	fa03 f101 	lsl.w	r1, r3, r1
 8002cb6:	7803      	ldrb	r3, [r0, #0]
 8002cb8:	ea23 0101 	bic.w	r1, r3, r1
 8002cbc:	7001      	strb	r1, [r0, #0]
}
 8002cbe:	4770      	bx	lr

08002cc0 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002cc0:	4108      	asrs	r0, r1
}
 8002cc2:	f000 0001 	and.w	r0, r0, #1
 8002cc6:	4770      	bx	lr

08002cc8 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002cc8:	7803      	ldrb	r3, [r0, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002cd0:	780b      	ldrb	r3, [r1, #0]
 8002cd2:	bf0c      	ite	eq
 8002cd4:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002cd8:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002cdc:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002cde:	7803      	ldrb	r3, [r0, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ce4:	f991 2000 	ldrsb.w	r2, [r1]
 8002ce8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002cec:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002cee:	7800      	ldrb	r0, [r0, #0]
 8002cf0:	b118      	cbz	r0, 8002cfa <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002cf2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002cf6:	700b      	strb	r3, [r1, #0]
}
 8002cf8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	700b      	strb	r3, [r1, #0]
}
 8002d02:	4770      	bx	lr

08002d04 <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002d04:	7803      	ldrb	r3, [r0, #0]
 8002d06:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002d0a:	780b      	ldrb	r3, [r1, #0]
 8002d0c:	bf14      	ite	ne
 8002d0e:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002d12:	f043 0320 	orreq.w	r3, r3, #32
 8002d16:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002d18:	7803      	ldrb	r3, [r0, #0]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002d1e:	f991 3000 	ldrsb.w	r3, [r1]
 8002d22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d26:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d28:	7802      	ldrb	r2, [r0, #0]
 8002d2a:	b12a      	cbz	r2, 8002d38 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	700b      	strb	r3, [r1, #0]
}
 8002d36:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002d38:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	700b      	strb	r3, [r1, #0]
}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002d44:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d46:	09d3      	lsrs	r3, r2, #7
 8002d48:	bf0c      	ite	eq
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	2310      	movne	r3, #16
 8002d4e:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002d50:	7803      	ldrb	r3, [r0, #0]
 8002d52:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002d54:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002d58:	7003      	strb	r3, [r0, #0]
}
 8002d5a:	4770      	bx	lr

08002d5c <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002d5c:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d5e:	f013 0301 	ands.w	r3, r3, #1
 8002d62:	d007      	beq.n	8002d74 <vGBFunctionRRCA+0x18>
 8002d64:	2310      	movs	r3, #16
 8002d66:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d68:	7803      	ldrb	r3, [r0, #0]
 8002d6a:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d70:	7003      	strb	r3, [r0, #0]
}
 8002d72:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002d74:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002d76:	7803      	ldrb	r3, [r0, #0]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002d80:	8803      	ldrh	r3, [r0, #0]
 8002d82:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002d84:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002d86:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002d88:	d517      	bpl.n	8002dba <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002d8a:	f992 3000 	ldrsb.w	r3, [r2]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	b2dc      	uxtb	r4, r3
 8002d94:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d96:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002d9a:	8804      	ldrh	r4, [r0, #0]
 8002d9c:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002da0:	42a5      	cmp	r5, r4
 8002da2:	d211      	bcs.n	8002dc8 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002dac:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002dae:	7813      	ldrb	r3, [r2, #0]
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002db4:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002db6:	7013      	strb	r3, [r2, #0]
}
 8002db8:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002dba:	f992 4000 	ldrsb.w	r4, [r2]
 8002dbe:	f024 0310 	bic.w	r3, r4, #16
 8002dc2:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002dc6:	e7e5      	b.n	8002d94 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002dc8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002dcc:	e7ed      	b.n	8002daa <vGBFunction16bitADD+0x2a>
 8002dce:	bf00      	nop

08002dd0 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dd0:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002dd4:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002dd6:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002dd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002ddc:	f002 0210 	and.w	r2, r2, #16
 8002de0:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002de2:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002de4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002de8:	7003      	strb	r3, [r0, #0]
}
 8002dea:	4770      	bx	lr

08002dec <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dec:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002dee:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002df0:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002df2:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002df4:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002df8:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002dfa:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002dfc:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002dfe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002e02:	7003      	strb	r3, [r0, #0]
}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002e08:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e0a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002e0c:	09c9      	lsrs	r1, r1, #7
 8002e0e:	d105      	bne.n	8002e1c <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002e10:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e12:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e14:	fa41 f282 	sxtab	r2, r1, r2
 8002e18:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e1a:	4770      	bx	lr
		return 8;
 8002e1c:	2008      	movs	r0, #8
	}
}
 8002e1e:	4770      	bx	lr

08002e20 <vGBFunctionDAA>:

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002e20:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002e22:	b410      	push	{r4}
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002e24:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002e28:	7804      	ldrb	r4, [r0, #0]
 8002e2a:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002e2c:	d012      	beq.n	8002e54 <vGBFunctionDAA+0x34>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002e2e:	0694      	lsls	r4, r2, #26
 8002e30:	bf48      	it	mi
 8002e32:	33fa      	addmi	r3, #250	; 0xfa
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e34:	06d2      	lsls	r2, r2, #27
 8002e36:	d425      	bmi.n	8002e84 <vGBFunctionDAA+0x64>
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
		}else{ resetbit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002e38:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e3a:	f991 2000 	ldrsb.w	r2, [r1]
 8002e3e:	f022 0320 	bic.w	r3, r2, #32
 8002e42:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e44:	7800      	ldrb	r0, [r0, #0]
 8002e46:	b1b0      	cbz	r0, 8002e76 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002e48:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e50:	700b      	strb	r3, [r1, #0]
 8002e52:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e54:	f012 0f20 	tst.w	r2, #32
 8002e58:	d017      	beq.n	8002e8a <vGBFunctionDAA+0x6a>
 8002e5a:	3306      	adds	r3, #6
 8002e5c:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002e5e:	06d4      	lsls	r4, r2, #27
 8002e60:	d403      	bmi.n	8002e6a <vGBFunctionDAA+0x4a>
 8002e62:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002e66:	2c90      	cmp	r4, #144	; 0x90
 8002e68:	d914      	bls.n	8002e94 <vGBFunctionDAA+0x74>
 8002e6a:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002e6c:	f042 0210 	orr.w	r2, r2, #16
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002e70:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002e72:	700a      	strb	r2, [r1, #0]
}
 8002e74:	e7e0      	b.n	8002e38 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	700b      	strb	r3, [r1, #0]
}
 8002e82:	4770      	bx	lr
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002e84:	33a0      	adds	r3, #160	; 0xa0
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	e7d6      	b.n	8002e38 <vGBFunctionDAA+0x18>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002e8a:	f004 040f 	and.w	r4, r4, #15
 8002e8e:	2c09      	cmp	r4, #9
 8002e90:	d9e5      	bls.n	8002e5e <vGBFunctionDAA+0x3e>
 8002e92:	e7e2      	b.n	8002e5a <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	700a      	strb	r2, [r1, #0]
}
 8002e9a:	e7cd      	b.n	8002e38 <vGBFunctionDAA+0x18>

08002e9c <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002e9c:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e9e:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002ea0:	09c9      	lsrs	r1, r1, #7
 8002ea2:	d005      	beq.n	8002eb0 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002ea4:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002ea6:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ea8:	fa41 f282 	sxtab	r2, r1, r2
 8002eac:	801a      	strh	r2, [r3, #0]
		return 12;
 8002eae:	4770      	bx	lr
	}else{
		return 8;
 8002eb0:	2008      	movs	r0, #8
	}
}
 8002eb2:	4770      	bx	lr

08002eb4 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002eb4:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002eb6:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002eb8:	06c9      	lsls	r1, r1, #27
 8002eba:	d405      	bmi.n	8002ec8 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002ebc:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002ebe:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ec0:	fa41 f282 	sxtab	r2, r1, r2
 8002ec4:	801a      	strh	r2, [r3, #0]
		return 12;
 8002ec6:	4770      	bx	lr
		return 8;
 8002ec8:	2008      	movs	r0, #8
	}
}
 8002eca:	4770      	bx	lr

08002ecc <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	460c      	mov	r4, r1
 8002ed0:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ed2:	f000 fbf1 	bl	80036b8 <ucGBMemoryRead>
 8002ed6:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002eda:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002edc:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002ede:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002ee0:	bf0c      	ite	eq
 8002ee2:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ee6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002eea:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002eec:	f000 fbe4 	bl	80036b8 <ucGBMemoryRead>
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	3101      	adds	r1, #1
 8002ef6:	b2c9      	uxtb	r1, r1
 8002ef8:	f000 fc06 	bl	8003708 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002efc:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002efe:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f06:	f000 fbd7 	bl	80036b8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002f0a:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f0c:	b118      	cbz	r0, 8002f16 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f12:	7023      	strb	r3, [r4, #0]
}
 8002f14:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	7023      	strb	r3, [r4, #0]
}
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
 8002f1e:	bf00      	nop

08002f20 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	460c      	mov	r4, r1
 8002f24:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002f26:	f000 fbc7 	bl	80036b8 <ucGBMemoryRead>
 8002f2a:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002f2c:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f2e:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002f30:	bf14      	ite	ne
 8002f32:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002f36:	f043 0320 	orreq.w	r3, r3, #32
 8002f3a:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002f3c:	f000 fbbc 	bl	80036b8 <ucGBMemoryRead>
 8002f40:	4601      	mov	r1, r0
 8002f42:	4628      	mov	r0, r5
 8002f44:	3901      	subs	r1, #1
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	f000 fbde 	bl	8003708 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002f4c:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f4e:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f54:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f56:	f000 fbaf 	bl	80036b8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002f5a:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f5c:	b118      	cbz	r0, 8002f66 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f62:	7023      	strb	r3, [r4, #0]
}
 8002f64:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6a:	7023      	strb	r3, [r4, #0]
}
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
 8002f6e:	bf00      	nop

08002f70 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002f70:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002f72:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002f74:	06c9      	lsls	r1, r1, #27
 8002f76:	d505      	bpl.n	8002f84 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002f78:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002f7a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002f7c:	fa41 f282 	sxtab	r2, r1, r2
 8002f80:	801a      	strh	r2, [r3, #0]
		return 12;
 8002f82:	4770      	bx	lr
	}else{
		return 8;
 8002f84:	2008      	movs	r0, #8
	}
}
 8002f86:	4770      	bx	lr

08002f88 <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002f88:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f8a:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f8c:	f002 050f 	and.w	r5, r2, #15
 8002f90:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002f94:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f96:	1963      	adds	r3, r4, r5
 8002f98:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002f9a:	f991 3000 	ldrsb.w	r3, [r1]
 8002f9e:	bfcc      	ite	gt
 8002fa0:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fa4:	f023 0320 	bicle.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002fa8:	2aff      	cmp	r2, #255	; 0xff
 8002faa:	dd0d      	ble.n	8002fc8 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002fac:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002fb0:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002fb2:	f043 0310 	orr.w	r3, r3, #16
 8002fb6:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002fb8:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002fba:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002fbc:	b162      	cbz	r2, 8002fd8 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fc2:	bc30      	pop	{r4, r5}
 8002fc4:	700b      	strb	r3, [r1, #0]
 8002fc6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002fc8:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	700b      	strb	r3, [r1, #0]
 8002fd0:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002fd2:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f2      	bne.n	8002fbe <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002fdc:	bc30      	pop	{r4, r5}
 8002fde:	700b      	strb	r3, [r1, #0]
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002fe4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002fe6:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002fe8:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002fec:	7804      	ldrb	r4, [r0, #0]
 8002fee:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002ff2:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ff4:	f004 070f 	and.w	r7, r4, #15
 8002ff8:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002ffa:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ffc:	19e2      	adds	r2, r4, r7
 8002ffe:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8003000:	bfcc      	ite	gt
 8003002:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8003006:	f025 0520 	bicle.w	r5, r5, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 800300a:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 800300c:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 800300e:	dd0d      	ble.n	800302c <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8003010:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8003014:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8003016:	f045 0510 	orr.w	r5, r5, #16
 800301a:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 800301c:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800301e:	b163      	cbz	r3, 800303a <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8003020:	780b      	ldrb	r3, [r1, #0]
 8003022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003026:	bcf0      	pop	{r4, r5, r6, r7}
 8003028:	700b      	strb	r3, [r1, #0]
 800302a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800302c:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8003030:	b2db      	uxtb	r3, r3
 8003032:	700d      	strb	r5, [r1, #0]
 8003034:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 800303a:	780b      	ldrb	r3, [r1, #0]
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8003040:	bcf0      	pop	{r4, r5, r6, r7}
 8003042:	700b      	strb	r3, [r1, #0]
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003048:	7803      	ldrb	r3, [r0, #0]
 800304a:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 800304c:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800304e:	d21d      	bcs.n	800308c <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8003050:	f991 3000 	ldrsb.w	r3, [r1]
 8003054:	f043 0310 	orr.w	r3, r3, #16
 8003058:	b2dc      	uxtb	r4, r3
 800305a:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800305c:	f002 050f 	and.w	r5, r2, #15
 8003060:	7804      	ldrb	r4, [r0, #0]
 8003062:	f004 040f 	and.w	r4, r4, #15
 8003066:	42a5      	cmp	r5, r4
 8003068:	d920      	bls.n	80030ac <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 800306a:	f043 0320 	orr.w	r3, r3, #32
 800306e:	b2db      	uxtb	r3, r3
 8003070:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8003072:	7803      	ldrb	r3, [r0, #0]
 8003074:	1a9a      	subs	r2, r3, r2
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800307a:	b172      	cbz	r2, 800309a <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 800307c:	780b      	ldrb	r3, [r1, #0]
 800307e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8003086:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003088:	700b      	strb	r3, [r1, #0]
}
 800308a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800308c:	f991 4000 	ldrsb.w	r4, [r1]
 8003090:	f024 0310 	bic.w	r3, r4, #16
 8003094:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8003098:	e7df      	b.n	800305a <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 800309a:	f991 3000 	ldrsb.w	r3, [r1]
 800309e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80030a6:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 80030a8:	700b      	strb	r3, [r1, #0]
}
 80030aa:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80030ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 80030b0:	e7de      	b.n	8003070 <vGBFunctionSUB+0x28>
 80030b2:	bf00      	nop

080030b4 <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + checkbit(*flagReg, C_FLAG);
 80030b4:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 80030b6:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 80030b8:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) < 0x0) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 80030bc:	7804      	ldrb	r4, [r0, #0]
 80030be:	f002 060f 	and.w	r6, r2, #15
 80030c2:	f004 040f 	and.w	r4, r4, #15
 80030c6:	442e      	add	r6, r5
 80030c8:	1ba4      	subs	r4, r4, r6
 80030ca:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 80030cc:	bfb4      	ite	lt
 80030ce:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80030d2:	f023 0320 	bicge.w	r3, r3, #32
 80030d6:	700b      	strb	r3, [r1, #0]
 80030d8:	b25e      	sxtb	r6, r3
	(*regA - regValue - checkbit(*flagReg, C_FLAG) < 0 ) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80030da:	7804      	ldrb	r4, [r0, #0]
 80030dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030e0:	1aa4      	subs	r4, r4, r2
 80030e2:	1ae3      	subs	r3, r4, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db19      	blt.n	800311c <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 80030e8:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 80030ec:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 80030ee:	7804      	ldrb	r4, [r0, #0]
 80030f0:	1aa3      	subs	r3, r4, r2
 80030f2:	1b5b      	subs	r3, r3, r5
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 80030f8:	b13b      	cbz	r3, 800310a <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 80030fa:	780b      	ldrb	r3, [r1, #0]
 80030fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8003104:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003106:	700b      	strb	r3, [r1, #0]
}
 8003108:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 800310a:	f991 3000 	ldrsb.w	r3, [r1]
 800310e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8003116:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003118:	700b      	strb	r3, [r1, #0]
}
 800311a:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 800311c:	f046 0310 	orr.w	r3, r6, #16
 8003120:	b2db      	uxtb	r3, r3
}
 8003122:	e7e3      	b.n	80030ec <vGBFunctionSBC+0x38>

08003124 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8003124:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003128:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 800312a:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800312c:	f002 040f 	and.w	r4, r2, #15
 8003130:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8003134:	bf8c      	ite	hi
 8003136:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800313a:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800313e:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8003140:	bf8c      	ite	hi
 8003142:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003146:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800314a:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 800314c:	bf0c      	ite	eq
 800314e:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003152:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 800315a:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 800315c:	700b      	strb	r3, [r1, #0]
}
 800315e:	4770      	bx	lr

08003160 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003164:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003166:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003168:	f000 faa6 	bl	80036b8 <ucGBMemoryRead>
 800316c:	8823      	ldrh	r3, [r4, #0]
 800316e:	4605      	mov	r5, r0
 8003170:	1c58      	adds	r0, r3, #1
 8003172:	b280      	uxth	r0, r0
 8003174:	f000 faa0 	bl	80036b8 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003178:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 800317c:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 800317e:	8823      	ldrh	r3, [r4, #0]
 8003180:	3302      	adds	r3, #2
 8003182:	8023      	strh	r3, [r4, #0]
}
 8003184:	bd70      	pop	{r4, r5, r6, pc}
 8003186:	bf00      	nop

08003188 <vGBFunctionPOP>:
 8003188:	f7ff bfea 	b.w	8003160 <vGBFunctionRET>

0800318c <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 800318c:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800318e:	09db      	lsrs	r3, r3, #7
 8003190:	d102      	bne.n	8003198 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003192:	8002      	strh	r2, [r0, #0]
		return 16;
 8003194:	2010      	movs	r0, #16
 8003196:	4770      	bx	lr
		return 12;
 8003198:	200c      	movs	r0, #12
	}
}
 800319a:	4770      	bx	lr

0800319c <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 80031a0:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 80031a2:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 80031a4:	8809      	ldrh	r1, [r1, #0]
 80031a6:	3801      	subs	r0, #1
 80031a8:	0a09      	lsrs	r1, r1, #8
 80031aa:	b280      	uxth	r0, r0
 80031ac:	f000 faac 	bl	8003708 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 80031b0:	8820      	ldrh	r0, [r4, #0]
 80031b2:	7829      	ldrb	r1, [r5, #0]
 80031b4:	3802      	subs	r0, #2
 80031b6:	b280      	uxth	r0, r0
 80031b8:	f000 faa6 	bl	8003708 <vGBMemoryWrite>
	*regSP -= 2;
 80031bc:	8823      	ldrh	r3, [r4, #0]
 80031be:	3b02      	subs	r3, #2
 80031c0:	8023      	strh	r3, [r4, #0]
}
 80031c2:	bd38      	pop	{r3, r4, r5, pc}

080031c4 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031c4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031c6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80031c8:	09db      	lsrs	r3, r3, #7
 80031ca:	d001      	beq.n	80031d0 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 80031cc:	200c      	movs	r0, #12
}
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031d0:	4604      	mov	r4, r0
 80031d2:	4610      	mov	r0, r2
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7ff ffe1 	bl	800319c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031da:	8820      	ldrh	r0, [r4, #0]
 80031dc:	3802      	subs	r0, #2
 80031de:	b280      	uxth	r0, r0
 80031e0:	f000 fa6a 	bl	80036b8 <ucGBMemoryRead>
 80031e4:	8823      	ldrh	r3, [r4, #0]
 80031e6:	4605      	mov	r5, r0
 80031e8:	1e58      	subs	r0, r3, #1
 80031ea:	b280      	uxth	r0, r0
 80031ec:	f000 fa64 	bl	80036b8 <ucGBMemoryRead>
 80031f0:	4603      	mov	r3, r0
		return 24;
 80031f2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031f4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031f8:	8025      	strh	r5, [r4, #0]
}
 80031fa:	bd38      	pop	{r3, r4, r5, pc}

080031fc <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80031fc:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80031fe:	09db      	lsrs	r3, r3, #7
 8003200:	d002      	beq.n	8003208 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 8003202:	8002      	strh	r2, [r0, #0]
		return 16;
 8003204:	2010      	movs	r0, #16
 8003206:	4770      	bx	lr
	}else{
		return 12;
 8003208:	200c      	movs	r0, #12
	}
}
 800320a:	4770      	bx	lr

0800320c <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800320c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800320e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003210:	09db      	lsrs	r3, r3, #7
 8003212:	d101      	bne.n	8003218 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003214:	200c      	movs	r0, #12
	}
}
 8003216:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003218:	4604      	mov	r4, r0
 800321a:	4610      	mov	r0, r2
 800321c:	4621      	mov	r1, r4
 800321e:	f7ff ffbd 	bl	800319c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003222:	8820      	ldrh	r0, [r4, #0]
 8003224:	3802      	subs	r0, #2
 8003226:	b280      	uxth	r0, r0
 8003228:	f000 fa46 	bl	80036b8 <ucGBMemoryRead>
 800322c:	8823      	ldrh	r3, [r4, #0]
 800322e:	4605      	mov	r5, r0
 8003230:	1e58      	subs	r0, r3, #1
 8003232:	b280      	uxth	r0, r0
 8003234:	f000 fa40 	bl	80036b8 <ucGBMemoryRead>
 8003238:	4603      	mov	r3, r0
		return 24;
 800323a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800323c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003240:	8025      	strh	r5, [r4, #0]
}
 8003242:	bd38      	pop	{r3, r4, r5, pc}

08003244 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8003244:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003246:	06db      	lsls	r3, r3, #27
 8003248:	d402      	bmi.n	8003250 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800324a:	8002      	strh	r2, [r0, #0]
		return 16;
 800324c:	2010      	movs	r0, #16
 800324e:	4770      	bx	lr
		return 12;
 8003250:	200c      	movs	r0, #12
	}
}
 8003252:	4770      	bx	lr

08003254 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003254:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003256:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003258:	06db      	lsls	r3, r3, #27
 800325a:	d501      	bpl.n	8003260 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 800325c:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 800325e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003260:	4604      	mov	r4, r0
 8003262:	4610      	mov	r0, r2
 8003264:	4621      	mov	r1, r4
 8003266:	f7ff ff99 	bl	800319c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800326a:	8820      	ldrh	r0, [r4, #0]
 800326c:	3802      	subs	r0, #2
 800326e:	b280      	uxth	r0, r0
 8003270:	f000 fa22 	bl	80036b8 <ucGBMemoryRead>
 8003274:	8823      	ldrh	r3, [r4, #0]
 8003276:	4605      	mov	r5, r0
 8003278:	1e58      	subs	r0, r3, #1
 800327a:	b280      	uxth	r0, r0
 800327c:	f000 fa1c 	bl	80036b8 <ucGBMemoryRead>
 8003280:	4603      	mov	r3, r0
		return 24;
 8003282:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003284:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003288:	8025      	strh	r5, [r4, #0]
}
 800328a:	bd38      	pop	{r3, r4, r5, pc}

0800328c <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 800328c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 800328e:	06db      	lsls	r3, r3, #27
 8003290:	d502      	bpl.n	8003298 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 8003292:	8002      	strh	r2, [r0, #0]
		return 16;
 8003294:	2010      	movs	r0, #16
 8003296:	4770      	bx	lr
	}else{
		return 12;
 8003298:	200c      	movs	r0, #12
	}
}
 800329a:	4770      	bx	lr

0800329c <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800329c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800329e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80032a0:	06db      	lsls	r3, r3, #27
 80032a2:	d401      	bmi.n	80032a8 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80032a4:	200c      	movs	r0, #12
	}
}
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80032a8:	4604      	mov	r4, r0
 80032aa:	4610      	mov	r0, r2
 80032ac:	4621      	mov	r1, r4
 80032ae:	f7ff ff75 	bl	800319c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80032b2:	8820      	ldrh	r0, [r4, #0]
 80032b4:	3802      	subs	r0, #2
 80032b6:	b280      	uxth	r0, r0
 80032b8:	f000 f9fe 	bl	80036b8 <ucGBMemoryRead>
 80032bc:	8823      	ldrh	r3, [r4, #0]
 80032be:	4605      	mov	r5, r0
 80032c0:	1e58      	subs	r0, r3, #1
 80032c2:	b280      	uxth	r0, r0
 80032c4:	f000 f9f8 	bl	80036b8 <ucGBMemoryRead>
 80032c8:	4603      	mov	r3, r0
		return 24;
 80032ca:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80032cc:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80032d0:	8025      	strh	r5, [r4, #0]
}
 80032d2:	bd38      	pop	{r3, r4, r5, pc}

080032d4 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 80032d4:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80032d6:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 80032d8:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	b2e5      	uxtb	r5, r4
 80032de:	429d      	cmp	r5, r3
 80032e0:	d219      	bcs.n	8003316 <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80032e2:	f991 3000 	ldrsb.w	r3, [r1]
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	b2dd      	uxtb	r5, r3
 80032ec:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80032ee:	f004 040f 	and.w	r4, r4, #15
 80032f2:	8805      	ldrh	r5, [r0, #0]
 80032f4:	f005 050f 	and.w	r5, r5, #15
 80032f8:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80032fa:	bf34      	ite	cc
 80032fc:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003300:	f023 0320 	biccs.w	r3, r3, #32
 8003304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003308:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 800330a:	8803      	ldrh	r3, [r0, #0]
 800330c:	fa43 f282 	sxtab	r2, r3, r2
}
 8003310:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 8003312:	8002      	strh	r2, [r0, #0]
}
 8003314:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003316:	f991 5000 	ldrsb.w	r5, [r1]
 800331a:	f025 0310 	bic.w	r3, r5, #16
 800331e:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 8003322:	e7e3      	b.n	80032ec <vGBFunctionADD_SP_r8+0x18>

08003324 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003324:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 8003326:	880c      	ldrh	r4, [r1, #0]
 8003328:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800332a:	b2e4      	uxtb	r4, r4
 800332c:	b2ee      	uxtb	r6, r5
 800332e:	42a6      	cmp	r6, r4
 8003330:	d219      	bcs.n	8003366 <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 8003332:	f992 4000 	ldrsb.w	r4, [r2]
 8003336:	f044 0410 	orr.w	r4, r4, #16
 800333a:	b2e6      	uxtb	r6, r4
 800333c:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800333e:	f005 050f 	and.w	r5, r5, #15
 8003342:	880e      	ldrh	r6, [r1, #0]
 8003344:	f006 060f 	and.w	r6, r6, #15
 8003348:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 800334a:	bf34      	ite	cc
 800334c:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 8003350:	f024 0420 	biccs.w	r4, r4, #32
 8003354:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003358:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 800335a:	880a      	ldrh	r2, [r1, #0]
 800335c:	fa42 f383 	sxtab	r3, r2, r3
}
 8003360:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 8003362:	8003      	strh	r3, [r0, #0]
}
 8003364:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003366:	f992 6000 	ldrsb.w	r6, [r2]
 800336a:	f026 0410 	bic.w	r4, r6, #16
 800336e:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 8003372:	e7e3      	b.n	800333c <vGBFunctionLD_HL_SP_r8+0x18>

08003374 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 8003374:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 8003376:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003378:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800337c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003380:	d10a      	bne.n	8003398 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 8003382:	f991 3000 	ldrsb.w	r3, [r1]
 8003386:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800338a:	b152      	cbz	r2, 80033a2 <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 800338c:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003390:	f043 0310 	orr.w	r3, r3, #16
 8003394:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003396:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003398:	780b      	ldrb	r3, [r1, #0]
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d1f4      	bne.n	800338c <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 80033a2:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80033a6:	700b      	strb	r3, [r1, #0]
}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 80033ac:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 80033ae:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 80033b2:	d509      	bpl.n	80033c8 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 80033b4:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 80033b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 80033ba:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 80033be:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 80033c0:	f043 0310 	orr.w	r3, r3, #16
 80033c4:	700b      	strb	r3, [r1, #0]
}
 80033c6:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033c8:	b942      	cbnz	r2, 80033dc <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 80033ca:	f991 3000 	ldrsb.w	r3, [r1]
 80033ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80033d2:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 80033d6:	4610      	mov	r0, r2
 80033d8:	700b      	strb	r3, [r1, #0]
 80033da:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033dc:	780b      	ldrb	r3, [r1, #0]
 80033de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80033e2:	e7f6      	b.n	80033d2 <ucGBFunctionRRC+0x26>

080033e4 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 80033e4:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80033e6:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80033ea:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80033ee:	bf14      	ite	ne
 80033f0:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033f4:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80033f8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80033fc:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033fe:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003402:	d105      	bne.n	8003410 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 8003404:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800340e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	700b      	strb	r3, [r1, #0]
}
 8003416:	4770      	bx	lr

08003418 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003418:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800341a:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800341e:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 8003422:	bf14      	ite	ne
 8003424:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003428:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 800342c:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800342e:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 8003430:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003434:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003438:	d105      	bne.n	8003446 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 800343a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800343e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003442:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003444:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	700b      	strb	r3, [r1, #0]
}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003450:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 8003452:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 8003456:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 800345a:	bf4c      	ite	mi
 800345c:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003460:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003464:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003468:	d105      	bne.n	8003476 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 800346a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800346e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003472:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003474:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	700b      	strb	r3, [r1, #0]
}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 8003480:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003484:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003488:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 800348c:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003490:	bf14      	ite	ne
 8003492:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003496:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800349a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800349e:	d105      	bne.n	80034ac <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 80034a0:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 80034a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a8:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80034aa:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034ac:	f002 031f 	and.w	r3, r2, #31
 80034b0:	700b      	strb	r3, [r1, #0]
}
 80034b2:	4770      	bx	lr

080034b4 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 80034b4:	0903      	lsrs	r3, r0, #4
 80034b6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80034ba:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80034be:	d107      	bne.n	80034d0 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 80034c0:	f991 3000 	ldrsb.w	r3, [r1]
 80034c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 80034ce:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80034d0:	780b      	ldrb	r3, [r1, #0]
 80034d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	700b      	strb	r3, [r1, #0]
}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80034e0:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 80034e2:	f991 3000 	ldrsb.w	r3, [r1]
 80034e6:	bf4c      	ite	mi
 80034e8:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80034ec:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80034f0:	0840      	lsrs	r0, r0, #1
 80034f2:	d105      	bne.n	8003500 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80034f4:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80034fe:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	700b      	strb	r3, [r1, #0]
}
 8003506:	4770      	bx	lr

08003508 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 8003508:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800350c:	07cb      	lsls	r3, r1, #31
 800350e:	d508      	bpl.n	8003522 <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 8003510:	7813      	ldrb	r3, [r2, #0]
 8003512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 8003520:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003522:	f992 3000 	ldrsb.w	r3, [r2]
 8003526:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800352a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	7013      	strb	r3, [r2, #0]
}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003538:	b510      	push	{r4, lr}
 800353a:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 800353c:	f000 f8bc 	bl	80036b8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8003540:	2301      	movs	r3, #1
 8003542:	fa03 f104 	lsl.w	r1, r3, r4
 8003546:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 800354a:	b2c0      	uxtb	r0, r0
 800354c:	bd10      	pop	{r4, pc}
 800354e:	bf00      	nop

08003550 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 8003550:	b510      	push	{r4, lr}
 8003552:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003554:	f000 f8b0 	bl	80036b8 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003558:	2301      	movs	r3, #1
 800355a:	fa03 f104 	lsl.w	r1, r3, r4
 800355e:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 8003560:	b2c0      	uxtb	r0, r0
 8003562:	bd10      	pop	{r4, pc}

08003564 <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
	current_op = op;
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <vGBMemorySetOP+0x8>)
 8003566:	7018      	strb	r0, [r3, #0]
}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	24001668 	.word	0x24001668

08003570 <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 8003570:	4603      	mov	r3, r0
 8003572:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 8003574:	4801      	ldr	r0, [pc, #4]	; (800357c <vGBMemoryLoad+0xc>)
 8003576:	4619      	mov	r1, r3
 8003578:	f006 bf72 	b.w	800a460 <memcpy>
 800357c:	2400167c 	.word	0x2400167c

08003580 <vGBMemoryJoypad>:
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @details
 * @param data data trying to be written to Joypad Register.
 * @return Nothing
 */
uint8_t vGBMemoryJoypad(){
 8003580:	b538      	push	{r3, r4, r5, lr}
	uint32_t value = 0;
	uint8_t mask = 0;

	if(joypadSELdir == 0x10){
 8003582:	4c25      	ldr	r4, [pc, #148]	; (8003618 <vGBMemoryJoypad+0x98>)
 8003584:	7822      	ldrb	r2, [r4, #0]
 8003586:	2a10      	cmp	r2, #16
 8003588:	d009      	beq.n	800359e <vGBMemoryJoypad+0x1e>
		HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
	    value = HAL_ADC_GetValue(&hadc3) >> 12;
	}else if(joypadSELbut == 0x20){
 800358a:	4d24      	ldr	r5, [pc, #144]	; (800361c <vGBMemoryJoypad+0x9c>)
 800358c:	782b      	ldrb	r3, [r5, #0]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d029      	beq.n	80035e6 <vGBMemoryJoypad+0x66>
 8003592:	200e      	movs	r0, #14
		}else{
			mask = (0x1);
		}
	}

	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003594:	4310      	orrs	r0, r2
 8003596:	4318      	orrs	r0, r3
}
 8003598:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 800359c:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc3);
 800359e:	4820      	ldr	r0, [pc, #128]	; (8003620 <vGBMemoryJoypad+0xa0>)
 80035a0:	f003 f948 	bl	8006834 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295
 80035a8:	481d      	ldr	r0, [pc, #116]	; (8003620 <vGBMemoryJoypad+0xa0>)
 80035aa:	f002 fe31 	bl	8006210 <HAL_ADC_PollForConversion>
	    value = HAL_ADC_GetValue(&hadc3) >> 12;
 80035ae:	481c      	ldr	r0, [pc, #112]	; (8003620 <vGBMemoryJoypad+0xa0>)
 80035b0:	f002 feb8 	bl	8006324 <HAL_ADC_GetValue>
 80035b4:	4d19      	ldr	r5, [pc, #100]	; (800361c <vGBMemoryJoypad+0x9c>)
 80035b6:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035b8:	280f      	cmp	r0, #15
 80035ba:	d022      	beq.n	8003602 <vGBMemoryJoypad+0x82>
		if((value >> 3) & 0x1){
 80035bc:	0703      	lsls	r3, r0, #28
 80035be:	d40a      	bmi.n	80035d6 <vGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 80035c0:	f000 0306 	and.w	r3, r0, #6
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	782b      	ldrb	r3, [r5, #0]
 80035c8:	d022      	beq.n	8003610 <vGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 80035ca:	2802      	cmp	r0, #2
 80035cc:	7822      	ldrb	r2, [r4, #0]
 80035ce:	bf8c      	ite	hi
 80035d0:	200d      	movhi	r0, #13
 80035d2:	200e      	movls	r0, #14
 80035d4:	e7de      	b.n	8003594 <vGBMemoryJoypad+0x14>
 80035d6:	7822      	ldrb	r2, [r4, #0]
		if((value >> 3) & 0x1){
 80035d8:	200b      	movs	r0, #11
 80035da:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 80035dc:	4310      	orrs	r0, r2
 80035de:	4318      	orrs	r0, r3
}
 80035e0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc1);
 80035e6:	480f      	ldr	r0, [pc, #60]	; (8003624 <vGBMemoryJoypad+0xa4>)
 80035e8:	f003 f924 	bl	8006834 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <vGBMemoryJoypad+0xa4>)
 80035f2:	f002 fe0d 	bl	8006210 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 80035f6:	480b      	ldr	r0, [pc, #44]	; (8003624 <vGBMemoryJoypad+0xa4>)
 80035f8:	f002 fe94 	bl	8006324 <HAL_ADC_GetValue>
 80035fc:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035fe:	280f      	cmp	r0, #15
 8003600:	d1dc      	bne.n	80035bc <vGBMemoryJoypad+0x3c>
 8003602:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003604:	782b      	ldrb	r3, [r5, #0]
 8003606:	4310      	orrs	r0, r2
 8003608:	4318      	orrs	r0, r3
}
 800360a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 800360e:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 8003610:	2007      	movs	r0, #7
 8003612:	7822      	ldrb	r2, [r4, #0]
 8003614:	e7be      	b.n	8003594 <vGBMemoryJoypad+0x14>
 8003616:	bf00      	nop
 8003618:	24001678 	.word	0x24001678
 800361c:	2401167e 	.word	0x2401167e
 8003620:	240117cc 	.word	0x240117cc
 8003624:	24011768 	.word	0x24011768

08003628 <vGBMemorySetBit>:
 *
 * @param address
 * @param bit
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003628:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800362c:	b29b      	uxth	r3, r3
 800362e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003632:	d302      	bcc.n	800363a <vGBMemorySetBit+0x12>
		mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 8003634:	0403      	lsls	r3, r0, #16
 8003636:	d411      	bmi.n	800365c <vGBMemorySetBit+0x34>
 8003638:	4770      	bx	lr
		mem.ram[address - 0x2000] |= (0x1 << bit);
 800363a:	2301      	movs	r3, #1
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 800363e:	b410      	push	{r4}
		mem.ram[address - 0x2000] |= (0x1 << bit);
 8003640:	fa03 f101 	lsl.w	r1, r3, r1
 8003644:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8003648:	b249      	sxtb	r1, r1
 800364a:	5d13      	ldrb	r3, [r2, r4]
 800364c:	430b      	orrs	r3, r1
 800364e:	5513      	strb	r3, [r2, r4]
		return;

	mem.ram[address] |= (0x1 << bit);
 8003650:	5c13      	ldrb	r3, [r2, r0]
 8003652:	4319      	orrs	r1, r3
 8003654:	5411      	strb	r1, [r2, r0]
}
 8003656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	2301      	movs	r3, #1
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <vGBMemorySetBit+0x48>)
 8003660:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 8003664:	5c13      	ldrb	r3, [r2, r0]
 8003666:	b249      	sxtb	r1, r1
 8003668:	4319      	orrs	r1, r3
 800366a:	5411      	strb	r1, [r2, r0]
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	2400167c 	.word	0x2400167c

08003674 <vGBMemoryResetBit>:
 * @param address
 * @param bit
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003674:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8003678:	b292      	uxth	r2, r2
 800367a:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 800367e:	b430      	push	{r4, r5}
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003680:	d20f      	bcs.n	80036a2 <vGBMemoryResetBit+0x2e>
		mem.ram[address - 0x2000] &= ~(0x1 << bit);
 8003682:	2201      	movs	r2, #1
 8003684:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 8003688:	4c0a      	ldr	r4, [pc, #40]	; (80036b4 <vGBMemoryResetBit+0x40>)
 800368a:	fa02 f101 	lsl.w	r1, r2, r1
 800368e:	5d62      	ldrb	r2, [r4, r5]
 8003690:	43cb      	mvns	r3, r1
 8003692:	b25b      	sxtb	r3, r3
 8003694:	401a      	ands	r2, r3
 8003696:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
		return;

	mem.ram[address] &= ~(0x1 << bit);
 8003698:	5c22      	ldrb	r2, [r4, r0]
 800369a:	4013      	ands	r3, r2
 800369c:	5423      	strb	r3, [r4, r0]
}
 800369e:	bc30      	pop	{r4, r5}
 80036a0:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 80036a2:	0403      	lsls	r3, r0, #16
 80036a4:	d5fb      	bpl.n	800369e <vGBMemoryResetBit+0x2a>
 80036a6:	2201      	movs	r2, #1
 80036a8:	4c02      	ldr	r4, [pc, #8]	; (80036b4 <vGBMemoryResetBit+0x40>)
 80036aa:	fa02 f301 	lsl.w	r3, r2, r1
 80036ae:	43db      	mvns	r3, r3
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	e7f1      	b.n	8003698 <vGBMemoryResetBit+0x24>
 80036b4:	2400167c 	.word	0x2400167c

080036b8 <ucGBMemoryRead>:
 * @param address
 * @return
 */
uint8_t ucGBMemoryRead(uint16_t address){

	if(address >= 0xFF00){
 80036b8:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
uint8_t ucGBMemoryRead(uint16_t address){
 80036bc:	4603      	mov	r3, r0
	if(address >= 0xFF00){
 80036be:	d307      	bcc.n	80036d0 <ucGBMemoryRead+0x18>
		if(address == JOY_ADDR){
 80036c0:	d019      	beq.n	80036f6 <ucGBMemoryRead+0x3e>
			return vGBMemoryJoypad();
		}

		if(address == SB_ADDR){
 80036c2:	f64f 7201 	movw	r2, #65281	; 0xff01
 80036c6:	4290      	cmp	r0, r2
 80036c8:	d017      	beq.n	80036fa <ucGBMemoryRead+0x42>
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <ucGBMemoryRead+0x48>)
	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
		return mem.ram[address - 0x2000];

	return mem.ram[address];
 80036cc:	5cd0      	ldrb	r0, [r2, r3]
 80036ce:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE) && mem.ram[0xFF50] != 0){
 80036d0:	0402      	lsls	r2, r0, #16
 80036d2:	d407      	bmi.n	80036e4 <ucGBMemoryRead+0x2c>
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <ucGBMemoryRead+0x48>)
 80036d6:	f64f 7150 	movw	r1, #65360	; 0xff50
 80036da:	5c51      	ldrb	r1, [r2, r1]
 80036dc:	2900      	cmp	r1, #0
 80036de:	d0f5      	beq.n	80036cc <ucGBMemoryRead+0x14>
		return gbMBCreadBankX(address);
 80036e0:	f7fc be74 	b.w	80003cc <gbMBCreadBankX>
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80036e4:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 80036ee:	d2ec      	bcs.n	80036ca <ucGBMemoryRead+0x12>
		return mem.ram[address - 0x2000];
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <ucGBMemoryRead+0x4c>)
 80036f2:	5c80      	ldrb	r0, [r0, r2]
 80036f4:	4770      	bx	lr
			return vGBMemoryJoypad();
 80036f6:	f7ff bf43 	b.w	8003580 <vGBMemoryJoypad>
			return 0xFF;
 80036fa:	20ff      	movs	r0, #255	; 0xff
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2400167c 	.word	0x2400167c
 8003704:	23fff67c 	.word	0x23fff67c

08003708 <vGBMemoryWrite>:
	if(address >= 0xFF00){
 8003708:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
void vGBMemoryWrite(uint16_t address, uint8_t data){
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	460d      	mov	r5, r1
	if(address >= 0xFF00){
 8003712:	d313      	bcc.n	800373c <vGBMemoryWrite+0x34>
		if(address == JOY_ADDR){
 8003714:	d021      	beq.n	800375a <vGBMemoryWrite+0x52>
		else if(address == DMA_ADDR){
 8003716:	f64f 7346 	movw	r3, #65350	; 0xff46
 800371a:	4298      	cmp	r0, r3
 800371c:	d026      	beq.n	800376c <vGBMemoryWrite+0x64>
		else if(address == DIV_ADDR){
 800371e:	f64f 7304 	movw	r3, #65284	; 0xff04
 8003722:	4298      	cmp	r0, r3
 8003724:	d036      	beq.n	8003794 <vGBMemoryWrite+0x8c>
		else if(address == TAC_ADDR){
 8003726:	f64f 7307 	movw	r3, #65287	; 0xff07
 800372a:	4298      	cmp	r0, r3
 800372c:	d043      	beq.n	80037b6 <vGBMemoryWrite+0xae>
		else if(address == STC_ADDR){
 800372e:	f64f 7302 	movw	r3, #65282	; 0xff02
 8003732:	4298      	cmp	r0, r3
 8003734:	d032      	beq.n	800379c <vGBMemoryWrite+0x94>
	mem.ram[address] = data;
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <vGBMemoryWrite+0xdc>)
 8003738:	551d      	strb	r5, [r3, r4]
}
 800373a:	bd70      	pop	{r4, r5, r6, pc}
	if((address >= CARTROM_BANK0 && address < VRAM_BASE)){
 800373c:	0403      	lsls	r3, r0, #16
 800373e:	d508      	bpl.n	8003752 <vGBMemoryWrite+0x4a>
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 8003740:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003744:	b29b      	uxth	r3, r3
 8003746:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800374a:	d2f4      	bcs.n	8003736 <vGBMemoryWrite+0x2e>
		mem.ram[address - 0x2000] = data;
 800374c:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <vGBMemoryWrite+0xe0>)
 800374e:	54e1      	strb	r1, [r4, r3]
}
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gbMBCwrite(address, data);
 8003756:	f7fc be57 	b.w	8000408 <gbMBCwrite>
			joypadSELdir = data & 0x10;
 800375a:	4a24      	ldr	r2, [pc, #144]	; (80037ec <vGBMemoryWrite+0xe4>)
 800375c:	f001 0110 	and.w	r1, r1, #16
			joypadSELbut = data & 0x20;
 8003760:	f005 0520 	and.w	r5, r5, #32
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <vGBMemoryWrite+0xe8>)
			joypadSELdir = data & 0x10;
 8003766:	7011      	strb	r1, [r2, #0]
			joypadSELbut = data & 0x20;
 8003768:	701d      	strb	r5, [r3, #0]
}
 800376a:	bd70      	pop	{r4, r5, r6, pc}
			for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 800376c:	020d      	lsls	r5, r1, #8
 800376e:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003772:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 8003776:	f505 7500 	add.w	r5, r5, #512	; 0x200
 800377a:	1960      	adds	r0, r4, r5
 800377c:	b280      	uxth	r0, r0
 800377e:	f7ff ff9b 	bl	80036b8 <ucGBMemoryRead>
 8003782:	4601      	mov	r1, r0
 8003784:	4620      	mov	r0, r4
 8003786:	3401      	adds	r4, #1
 8003788:	f7ff ffbe 	bl	8003708 <vGBMemoryWrite>
 800378c:	b2a4      	uxth	r4, r4
 800378e:	42b4      	cmp	r4, r6
 8003790:	d1f3      	bne.n	800377a <vGBMemoryWrite+0x72>
}
 8003792:	bd70      	pop	{r4, r5, r6, pc}
			mem.ram[DIV_ADDR] = 0;
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <vGBMemoryWrite+0xdc>)
 8003796:	2200      	movs	r2, #0
 8003798:	541a      	strb	r2, [r3, r0]
}
 800379a:	bd70      	pop	{r4, r5, r6, pc}
			if(checkbit(data, 7))
 800379c:	2107      	movs	r1, #7
 800379e:	4628      	mov	r0, r5
 80037a0:	f7ff fa8e 	bl	8002cc0 <checkbit>
 80037a4:	b110      	cbz	r0, 80037ac <vGBMemoryWrite+0xa4>
				dataTransFlag = 1;
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <vGBMemoryWrite+0xec>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
			mem.ram[address] = data;
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <vGBMemoryWrite+0xdc>)
 80037ae:	f64f 7302 	movw	r3, #65282	; 0xff02
 80037b2:	54d5      	strb	r5, [r2, r3]
}
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
			timerStopStart = checkbit(data, 2);
 80037b6:	2102      	movs	r1, #2
 80037b8:	4628      	mov	r0, r5
 80037ba:	f7ff fa81 	bl	8002cc0 <checkbit>
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <vGBMemoryWrite+0xf0>)
 80037c0:	4602      	mov	r2, r0
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80037c2:	2101      	movs	r1, #1
 80037c4:	4628      	mov	r0, r5
			timerStopStart = checkbit(data, 2);
 80037c6:	701a      	strb	r2, [r3, #0]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80037c8:	f7ff fa7a 	bl	8002cc0 <checkbit>
 80037cc:	4606      	mov	r6, r0
 80037ce:	2100      	movs	r1, #0
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff fa75 	bl	8002cc0 <checkbit>
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <vGBMemoryWrite+0xf4>)
			mem.ram[address] = data;
 80037d8:	4a02      	ldr	r2, [pc, #8]	; (80037e4 <vGBMemoryWrite+0xdc>)
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80037da:	eb00 0046 	add.w	r0, r0, r6, lsl #1
			mem.ram[address] = data;
 80037de:	5515      	strb	r5, [r2, r4]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80037e0:	7018      	strb	r0, [r3, #0]
}
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	2400167c 	.word	0x2400167c
 80037e8:	23fff67c 	.word	0x23fff67c
 80037ec:	24001678 	.word	0x24001678
 80037f0:	2401167e 	.word	0x2401167e
 80037f4:	240010ae 	.word	0x240010ae
 80037f8:	2401167c 	.word	0x2401167c
 80037fc:	2401167d 	.word	0x2401167d

08003800 <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
	vGBMemoryWrite(address,   data & 0xFF);
 8003806:	b2c9      	uxtb	r1, r1
 8003808:	f7ff ff7e 	bl	8003708 <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 800380c:	1c60      	adds	r0, r4, #1
 800380e:	0a29      	lsrs	r1, r5, #8
 8003810:	b280      	uxth	r0, r0
}
 8003812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 8003816:	f7ff bf77 	b.w	8003708 <vGBMemoryWrite>
 800381a:	bf00      	nop

0800381c <vGBMemoryInit>:
void vGBMemoryInit(){
 800381c:	b538      	push	{r3, r4, r5, lr}
	gbMBCsetControllerType(ucGBMemoryRead(0x147));
 800381e:	f240 1047 	movw	r0, #327	; 0x147
	mem.ram[IF_ADDR] = 0xE1;
 8003822:	25e1      	movs	r5, #225	; 0xe1
	gbMBCsetControllerType(ucGBMemoryRead(0x147));
 8003824:	f7ff ff48 	bl	80036b8 <ucGBMemoryRead>
	mem.ram[JOY_ADDR] = 0xCF;
 8003828:	24cf      	movs	r4, #207	; 0xcf
	gbMBCsetControllerType(ucGBMemoryRead(0x147));
 800382a:	f7fc fdc9 	bl	80003c0 <gbMBCsetControllerType>
	mem.ram[JOY_ADDR] = 0xCF;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <vGBMemoryInit+0x30>)
	mem.ram[IF_ADDR] = 0xE1;
 8003830:	f64f 700f 	movw	r0, #65295	; 0xff0f
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003834:	21f8      	movs	r1, #248	; 0xf8
	mem.ram[JOY_ADDR] = 0xCF;
 8003836:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
	mem.ram[IF_ADDR] = 0xE1;
 800383a:	541d      	strb	r5, [r3, r0]
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 800383c:	f64f 7007 	movw	r0, #65287	; 0xff07
	mem.ram[JOY_ADDR] = 0xCF;
 8003840:	7014      	strb	r4, [r2, #0]
}
 8003842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(TAC_ADDR, 0xF8);
 8003846:	f7ff bf5f 	b.w	8003708 <vGBMemoryWrite>
 800384a:	bf00      	nop
 800384c:	2400167c 	.word	0x2400167c

08003850 <usGBMemoryReadShort>:
 *
 * @param address
 * @return
 */
uint16_t usGBMemoryReadShort(uint16_t address){
	return concat_16bit_bigEndian(mem.ram[address], mem.ram[address+1]);
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <usGBMemoryReadShort+0xc>)
 8003852:	181a      	adds	r2, r3, r0
 8003854:	5c18      	ldrb	r0, [r3, r0]
 8003856:	7851      	ldrb	r1, [r2, #1]
 8003858:	f7ff ba1e 	b.w	8002c98 <concat_16bit_bigEndian>
 800385c:	2400167c 	.word	0x2400167c

08003860 <vGBMemoryIncTimers>:
	static uint8_t timerDIV  = 0;
	static uint8_t timerTIMA = 0;
	static uint8_t oldTIMA   = 0;
	static uint8_t timerDiv8k = 0;

	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003860:	4a3d      	ldr	r2, [pc, #244]	; (8003958 <vGBMemoryIncTimers+0xf8>)
 8003862:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003868:	7813      	ldrb	r3, [r2, #0]
 800386a:	0084      	lsls	r4, r0, #2
 800386c:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8003870:	2dff      	cmp	r5, #255	; 0xff
 8003872:	dd0c      	ble.n	800388e <vGBMemoryIncTimers+0x2e>
		mem.ram[DIV_ADDR]++;
 8003874:	4e39      	ldr	r6, [pc, #228]	; (800395c <vGBMemoryIncTimers+0xfc>)
 8003876:	f64f 7704 	movw	r7, #65284	; 0xff04

		if(dataTransFlag){
 800387a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8003974 <vGBMemoryIncTimers+0x114>
		mem.ram[DIV_ADDR]++;
 800387e:	5df5      	ldrb	r5, [r6, r7]
		if(dataTransFlag){
 8003880:	f89c e000 	ldrb.w	lr, [ip]
		mem.ram[DIV_ADDR]++;
 8003884:	3501      	adds	r5, #1
 8003886:	55f5      	strb	r5, [r6, r7]
		if(dataTransFlag){
 8003888:	f1be 0f00 	cmp.w	lr, #0
 800388c:	d137      	bne.n	80038fe <vGBMemoryIncTimers+0x9e>
		}
	}

	timerDIV += (durationMcycle << 2);

	if(timerStopStart){
 800388e:	4d34      	ldr	r5, [pc, #208]	; (8003960 <vGBMemoryIncTimers+0x100>)
	timerDIV += (durationMcycle << 2);
 8003890:	4423      	add	r3, r4
	if(timerStopStart){
 8003892:	782d      	ldrb	r5, [r5, #0]
	timerDIV += (durationMcycle << 2);
 8003894:	7013      	strb	r3, [r2, #0]
	if(timerStopStart){
 8003896:	2d00      	cmp	r5, #0
 8003898:	d02f      	beq.n	80038fa <vGBMemoryIncTimers+0x9a>
		uint16_t curDuration = 0;

		switch (clockMode) {
 800389a:	4b32      	ldr	r3, [pc, #200]	; (8003964 <vGBMemoryIncTimers+0x104>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d835      	bhi.n	800390e <vGBMemoryIncTimers+0xae>
 80038a2:	e8df f003 	tbb	[pc, r3]
 80038a6:	3c05      	.short	0x3c05
 80038a8:	023f      	.short	0x023f
			case 0x0: curDuration = (durationMcycle << 0);  break;
			case 0x1: curDuration = (durationMcycle << 6);  break;
			case 0x2: curDuration = (durationMcycle << 4);  break;
			case 0x3: curDuration = (durationMcycle << 2);  break;
 80038aa:	b2a1      	uxth	r1, r4
 80038ac:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
			default:  break;
		}

		if(timerTIMA + curDuration > 0xFF){
 80038b0:	4d2d      	ldr	r5, [pc, #180]	; (8003968 <vGBMemoryIncTimers+0x108>)
 80038b2:	782a      	ldrb	r2, [r5, #0]
 80038b4:	4411      	add	r1, r2
 80038b6:	29ff      	cmp	r1, #255	; 0xff
 80038b8:	dd2c      	ble.n	8003914 <vGBMemoryIncTimers+0xb4>
			mem.ram[TIMA_ADDR]++;
 80038ba:	4c28      	ldr	r4, [pc, #160]	; (800395c <vGBMemoryIncTimers+0xfc>)
 80038bc:	f64f 7605 	movw	r6, #65285	; 0xff05
		}

		if(timerTIMA + curDuration > 0x1FE){
 80038c0:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
			mem.ram[TIMA_ADDR]++;
 80038c4:	5da3      	ldrb	r3, [r4, r6]
 80038c6:	bfd4      	ite	le
 80038c8:	3301      	addle	r3, #1
			mem.ram[TIMA_ADDR]++;
 80038ca:	3302      	addgt	r3, #2
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	55a3      	strb	r3, [r4, r6]
		}

		timerTIMA += curDuration;
 80038d0:	4410      	add	r0, r2


		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <vGBMemoryIncTimers+0x10c>)
		timerTIMA += curDuration;
 80038d6:	7028      	strb	r0, [r5, #0]
		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80038d8:	d80e      	bhi.n	80038f8 <vGBMemoryIncTimers+0x98>
 80038da:	7811      	ldrb	r1, [r2, #0]
 80038dc:	29ff      	cmp	r1, #255	; 0xff
 80038de:	d10b      	bne.n	80038f8 <vGBMemoryIncTimers+0x98>
	mem.ram[address] |= (0x1 << bit);
 80038e0:	f64f 700f 	movw	r0, #65295	; 0xff0f
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038e4:	f64f 7306 	movw	r3, #65286	; 0xff06
 80038e8:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 80038ec:	5c21      	ldrb	r1, [r4, r0]
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038ee:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 80038f0:	f041 0104 	orr.w	r1, r1, #4
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80038f4:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 80038f6:	5421      	strb	r1, [r4, r0]
			vGBMemorySetBit(IF_ADDR, 2);
		}

		oldTIMA = mem.ram[TIMA_ADDR];
 80038f8:	7013      	strb	r3, [r2, #0]
	}

}
 80038fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			timerDiv8k++;
 80038fe:	4f1c      	ldr	r7, [pc, #112]	; (8003970 <vGBMemoryIncTimers+0x110>)
 8003900:	783d      	ldrb	r5, [r7, #0]
 8003902:	3501      	adds	r5, #1
 8003904:	b2ed      	uxtb	r5, r5
			if(timerDiv8k == 0x10){
 8003906:	2d10      	cmp	r5, #16
 8003908:	d00f      	beq.n	800392a <vGBMemoryIncTimers+0xca>
			timerDiv8k++;
 800390a:	703d      	strb	r5, [r7, #0]
 800390c:	e7bf      	b.n	800388e <vGBMemoryIncTimers+0x2e>
		if(timerTIMA + curDuration > 0xFF){
 800390e:	4d16      	ldr	r5, [pc, #88]	; (8003968 <vGBMemoryIncTimers+0x108>)
 8003910:	2000      	movs	r0, #0
 8003912:	782a      	ldrb	r2, [r5, #0]
 8003914:	4c11      	ldr	r4, [pc, #68]	; (800395c <vGBMemoryIncTimers+0xfc>)
 8003916:	f64f 7305 	movw	r3, #65285	; 0xff05
 800391a:	5ce3      	ldrb	r3, [r4, r3]
 800391c:	e7d8      	b.n	80038d0 <vGBMemoryIncTimers+0x70>
			case 0x1: curDuration = (durationMcycle << 6);  break;
 800391e:	0181      	lsls	r1, r0, #6
 8003920:	b2c8      	uxtb	r0, r1
 8003922:	e7c5      	b.n	80038b0 <vGBMemoryIncTimers+0x50>
			case 0x2: curDuration = (durationMcycle << 4);  break;
 8003924:	0101      	lsls	r1, r0, #4
 8003926:	b2c8      	uxtb	r0, r1
 8003928:	e7c2      	b.n	80038b0 <vGBMemoryIncTimers+0x50>
	mem.ram[address] &= ~(0x1 << bit);
 800392a:	f64f 7902 	movw	r9, #65282	; 0xff02
	mem.ram[address] |= (0x1 << bit);
 800392e:	f64f 780f 	movw	r8, #65295	; 0xff0f
				timerDiv8k = 0;
 8003932:	f04f 0a00 	mov.w	sl, #0
	mem.ram[address] &= ~(0x1 << bit);
 8003936:	f816 e009 	ldrb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 800393a:	f816 5008 	ldrb.w	r5, [r6, r8]
	mem.ram[address] &= ~(0x1 << bit);
 800393e:	f00e 0e7f 	and.w	lr, lr, #127	; 0x7f
				timerDiv8k = 0;
 8003942:	f887 a000 	strb.w	sl, [r7]
	mem.ram[address] |= (0x1 << bit);
 8003946:	f045 0508 	orr.w	r5, r5, #8
				dataTransFlag = 0;
 800394a:	f88c a000 	strb.w	sl, [ip]
	mem.ram[address] &= ~(0x1 << bit);
 800394e:	f806 e009 	strb.w	lr, [r6, r9]
	mem.ram[address] |= (0x1 << bit);
 8003952:	f806 5008 	strb.w	r5, [r6, r8]
 8003956:	e79a      	b.n	800388e <vGBMemoryIncTimers+0x2e>
 8003958:	240010b0 	.word	0x240010b0
 800395c:	2400167c 	.word	0x2400167c
 8003960:	2401167c 	.word	0x2401167c
 8003964:	2401167d 	.word	0x2401167d
 8003968:	240010b2 	.word	0x240010b2
 800396c:	240010af 	.word	0x240010af
 8003970:	240010b1 	.word	0x240010b1
 8003974:	240010ae 	.word	0x240010ae

08003978 <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003978:	2101      	movs	r1, #1
 800397a:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 800397e:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003980:	f7ff fe78 	bl	8003674 <vGBMemoryResetBit>
 8003984:	2100      	movs	r1, #0
 8003986:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 800398a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800398e:	f7ff be71 	b.w	8003674 <vGBMemoryResetBit>
 8003992:	bf00      	nop

08003994 <vSetFrameBuffer>:
	memset(gb_frame, 0, 160 * 144 * 4 * scaleAmount);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <vSetFrameBuffer+0x18>)
 8003996:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <vSetFrameBuffer+0x1c>)
 800399c:	2100      	movs	r1, #0
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	6800      	ldr	r0, [r0, #0]
 80039a2:	fb02 f203 	mul.w	r2, r2, r3
 80039a6:	f006 bd69 	b.w	800a47c <memset>
 80039aa:	bf00      	nop
 80039ac:	24001014 	.word	0x24001014
 80039b0:	24001010 	.word	0x24001010

080039b4 <vCheckBGP>:
void vCheckBGP(){
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039b6:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: BGPColorToPalette[i] = 3;  break;
 80039ba:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039bc:	f7ff fe7c 	bl	80036b8 <ucGBMemoryRead>
			case 3: BGPColorToPalette[i] = 4;  break;
 80039c0:	2604      	movs	r6, #4
 80039c2:	490c      	ldr	r1, [pc, #48]	; (80039f4 <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80039c4:	2200      	movs	r2, #0
			case 1: BGPColorToPalette[i] = 2;  break;
 80039c6:	2502      	movs	r5, #2
			case 0: BGPColorToPalette[i] = 1;  break;
 80039c8:	2401      	movs	r4, #1
		switch ((BGP >> (i*2)) & 0x03) {
 80039ca:	fa40 f302 	asr.w	r3, r0, r2
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d00c      	beq.n	80039f0 <vCheckBGP+0x3c>
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d008      	beq.n	80039ec <vCheckBGP+0x38>
 80039da:	2b01      	cmp	r3, #1
			case 0: BGPColorToPalette[i] = 1;  break;
 80039dc:	bf14      	ite	ne
 80039de:	700c      	strbne	r4, [r1, #0]
			case 1: BGPColorToPalette[i] = 2;  break;
 80039e0:	700d      	strbeq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 80039e2:	3202      	adds	r2, #2
 80039e4:	3101      	adds	r1, #1
 80039e6:	2a08      	cmp	r2, #8
 80039e8:	d1ef      	bne.n	80039ca <vCheckBGP+0x16>
}
 80039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: BGPColorToPalette[i] = 4;  break;
 80039ec:	700e      	strb	r6, [r1, #0]
 80039ee:	e7f8      	b.n	80039e2 <vCheckBGP+0x2e>
			case 2: BGPColorToPalette[i] = 3;  break;
 80039f0:	700f      	strb	r7, [r1, #0]
 80039f2:	e7f6      	b.n	80039e2 <vCheckBGP+0x2e>
 80039f4:	24011680 	.word	0x24011680

080039f8 <vCheckOBP0>:
void vCheckOBP0(){
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 80039fa:	f64f 7048 	movw	r0, #65352	; 0xff48
			case 2: OBP0ColorToPalette[i] = 3;    break;
 80039fe:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003a00:	f7ff fe5a 	bl	80036b8 <ucGBMemoryRead>
 8003a04:	2200      	movs	r2, #0
 8003a06:	490c      	ldr	r1, [pc, #48]	; (8003a38 <vCheckOBP0+0x40>)
			case 3: OBP0ColorToPalette[i] = 4;    break;
 8003a08:	2504      	movs	r5, #4
			case 0: OBP0ColorToPalette[i] = 0;    break;
 8003a0a:	4616      	mov	r6, r2
			case 1: OBP0ColorToPalette[i] = 2;    break;
 8003a0c:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 8003a0e:	fa40 f302 	asr.w	r3, r0, r2
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d00c      	beq.n	8003a34 <vCheckOBP0+0x3c>
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d008      	beq.n	8003a30 <vCheckOBP0+0x38>
 8003a1e:	2b01      	cmp	r3, #1
			case 0: OBP0ColorToPalette[i] = 0;    break;
 8003a20:	bf14      	ite	ne
 8003a22:	700e      	strbne	r6, [r1, #0]
			case 1: OBP0ColorToPalette[i] = 2;    break;
 8003a24:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 8003a26:	3202      	adds	r2, #2
 8003a28:	3101      	adds	r1, #1
 8003a2a:	2a08      	cmp	r2, #8
 8003a2c:	d1ef      	bne.n	8003a0e <vCheckOBP0+0x16>
}
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP0ColorToPalette[i] = 4;    break;
 8003a30:	700d      	strb	r5, [r1, #0]
 8003a32:	e7f8      	b.n	8003a26 <vCheckOBP0+0x2e>
			case 2: OBP0ColorToPalette[i] = 3;    break;
 8003a34:	700f      	strb	r7, [r1, #0]
 8003a36:	e7f6      	b.n	8003a26 <vCheckOBP0+0x2e>
 8003a38:	2401169c 	.word	0x2401169c

08003a3c <vCheckOBP1>:
void vCheckOBP1(){
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a3e:	f64f 7049 	movw	r0, #65353	; 0xff49
			case 2: OBP1ColorToPalette[i] = 3;  break;
 8003a42:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003a44:	f7ff fe38 	bl	80036b8 <ucGBMemoryRead>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	490c      	ldr	r1, [pc, #48]	; (8003a7c <vCheckOBP1+0x40>)
			case 3: OBP1ColorToPalette[i] = 4;  break;
 8003a4c:	2504      	movs	r5, #4
			case 0: OBP1ColorToPalette[i] = 0;  break;
 8003a4e:	4616      	mov	r6, r2
			case 1: OBP1ColorToPalette[i] = 2;  break;
 8003a50:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 8003a52:	fa40 f302 	asr.w	r3, r0, r2
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d00c      	beq.n	8003a78 <vCheckOBP1+0x3c>
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d008      	beq.n	8003a74 <vCheckOBP1+0x38>
 8003a62:	2b01      	cmp	r3, #1
			case 0: OBP1ColorToPalette[i] = 0;  break;
 8003a64:	bf14      	ite	ne
 8003a66:	700e      	strbne	r6, [r1, #0]
			case 1: OBP1ColorToPalette[i] = 2;  break;
 8003a68:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 8003a6a:	3202      	adds	r2, #2
 8003a6c:	3101      	adds	r1, #1
 8003a6e:	2a08      	cmp	r2, #8
 8003a70:	d1ef      	bne.n	8003a52 <vCheckOBP1+0x16>
}
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP1ColorToPalette[i] = 4;  break;
 8003a74:	700d      	strb	r5, [r1, #0]
 8003a76:	e7f8      	b.n	8003a6a <vCheckOBP1+0x2e>
			case 2: OBP1ColorToPalette[i] = 3;  break;
 8003a78:	700f      	strb	r7, [r1, #0]
 8003a7a:	e7f6      	b.n	8003a6a <vCheckOBP1+0x2e>
 8003a7c:	24011684 	.word	0x24011684

08003a80 <getTileLineData>:
	if (TileDataAddr == 0x8000){
 8003a80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	460d      	mov	r5, r1
	if (TileDataAddr == 0x8000){
 8003a88:	d00e      	beq.n	8003aa8 <getTileLineData+0x28>
		int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 8003a8a:	4418      	add	r0, r3
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	b280      	uxth	r0, r0
 8003a90:	f7ff fe12 	bl	80036b8 <ucGBMemoryRead>
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a94:	1961      	adds	r1, r4, r5
		uint16_t temp2 =( temp + 128) * 0x10;
 8003a96:	b240      	sxtb	r0, r0
 8003a98:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003a9a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003aa2:	b280      	uxth	r0, r0
 8003aa4:	f7ff bed4 	b.w	8003850 <usGBMemoryReadShort>
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003aa8:	4418      	add	r0, r3
 8003aaa:	b280      	uxth	r0, r0
 8003aac:	f7ff fe04 	bl	80036b8 <ucGBMemoryRead>
 8003ab0:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 8003ab4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003abc:	b280      	uxth	r0, r0
 8003abe:	f7ff bec7 	b.w	8003850 <usGBMemoryReadShort>
 8003ac2:	bf00      	nop

08003ac4 <LYC_check>:
void LYC_check(uint8_t ly){
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003ac8:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003acc:	f7ff fdf4 	bl	80036b8 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 8003ad0:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003ad2:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 8003ad4:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003ad8:	d003      	beq.n	8003ae2 <LYC_check+0x1e>
}
 8003ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 8003ade:	f7ff bdc9 	b.w	8003674 <vGBMemoryResetBit>
		vGBMemorySetBit(STAT_ADDR, 2);
 8003ae2:	f7ff fda1 	bl	8003628 <vGBMemorySetBit>
		if(checkbit(ucGBMemoryRead(STAT_ADDR), 6))
 8003ae6:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003aea:	f7ff fde5 	bl	80036b8 <ucGBMemoryRead>
 8003aee:	2106      	movs	r1, #6
 8003af0:	f7ff f8e6 	bl	8002cc0 <checkbit>
 8003af4:	b900      	cbnz	r0, 8003af8 <LYC_check+0x34>
}
 8003af6:	bd10      	pop	{r4, pc}
			vGBMemorySetBit(IF_ADDR, 1);
 8003af8:	2101      	movs	r1, #1
 8003afa:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vGBMemorySetBit(IF_ADDR, 1);
 8003b02:	f7ff bd91 	b.w	8003628 <vGBMemorySetBit>
 8003b06:	bf00      	nop

08003b08 <setMode>:
void setMode(uint8_t mode){
 8003b08:	b508      	push	{r3, lr}
	Mode = mode;
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <setMode+0x64>)
 8003b0c:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 8003b0e:	2803      	cmp	r0, #3
 8003b10:	d82b      	bhi.n	8003b6a <setMode+0x62>
 8003b12:	e8df f000 	tbb	[pc, r0]
 8003b16:	1202      	.short	0x1202
 8003b18:	061e      	.short	0x061e
}
 8003b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b1e:	f7ff bf2b 	b.w	8003978 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003b22:	2101      	movs	r1, #1
 8003b24:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b28:	f7ff fd7e 	bl	8003628 <vGBMemorySetBit>
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003b36:	f7ff bd77 	b.w	8003628 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b40:	f7ff fd98 	bl	8003674 <vGBMemoryResetBit>
 8003b44:	2100      	movs	r1, #0
 8003b46:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003b4e:	f7ff bd6b 	b.w	8003628 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003b52:	2101      	movs	r1, #1
 8003b54:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003b58:	f7ff fd66 	bl	8003628 <vGBMemorySetBit>
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003b66:	f7ff bd85 	b.w	8003674 <vGBMemoryResetBit>
}
 8003b6a:	bd08      	pop	{r3, pc}
 8003b6c:	2401168c 	.word	0x2401168c

08003b70 <updateBufferObj>:

void updateBufferObj(uint8_t data, int pixelPos){
 8003b70:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	pixelPos *= scaleAmount;
 8003b74:	4f10      	ldr	r7, [pc, #64]	; (8003bb8 <updateBufferObj+0x48>)
 8003b76:	783b      	ldrb	r3, [r7, #0]
 8003b78:	fb01 f103 	mul.w	r1, r1, r3
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003b7c:	b1cb      	cbz	r3, 8003bb2 <updateBufferObj+0x42>
 8003b7e:	2601      	movs	r6, #1
 8003b80:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003bc0 <updateBufferObj+0x50>
 8003b84:	4d0d      	ldr	r5, [pc, #52]	; (8003bbc <updateBufferObj+0x4c>)
 8003b86:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8003bc4 <updateBufferObj+0x54>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003b8a:	2200      	movs	r2, #0
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 8003b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b90:	682c      	ldr	r4, [r5, #0]
 8003b92:	440b      	add	r3, r1
 8003b94:	4413      	add	r3, r2
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003b96:	3201      	adds	r2, #1
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 8003b98:	fb04 3306 	mla	r3, r4, r6, r3
 8003b9c:	f8dc 4000 	ldr.w	r4, [ip]
 8003ba0:	5518      	strb	r0, [r3, r4]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003ba2:	783b      	ldrb	r3, [r7, #0]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	dcf1      	bgt.n	8003b8c <updateBufferObj+0x1c>
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003ba8:	3601      	adds	r6, #1
 8003baa:	42b3      	cmp	r3, r6
 8003bac:	db01      	blt.n	8003bb2 <updateBufferObj+0x42>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1eb      	bne.n	8003b8a <updateBufferObj+0x1a>
		}
	}
}
 8003bb2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003bb6:	4770      	bx	lr
 8003bb8:	24001014 	.word	0x24001014
 8003bbc:	24011690 	.word	0x24011690
 8003bc0:	24001010 	.word	0x24001010
 8003bc4:	24011694 	.word	0x24011694

08003bc8 <vGBPPUDrawLineWindow.part.0>:

void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
	if(WY > ly || WY > 143 || WX > 166)
		return;

	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003bc8:	1a82      	subs	r2, r0, r2
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003bca:	4250      	negs	r0, r2
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003bd0:	f000 0007 	and.w	r0, r0, #7
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003bd4:	f1a1 0507 	sub.w	r5, r1, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003bd8:	f002 0107 	and.w	r1, r2, #7
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003bdc:	f3c2 06c4 	ubfx	r6, r2, #3, #5
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003be0:	bf58      	it	pl
 8003be2:	4241      	negpl	r1, r0
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003be4:	426f      	negs	r7, r5
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003be6:	ea4f 1646 	mov.w	r6, r6, lsl #5
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003bea:	f005 0407 	and.w	r4, r5, #7
 8003bee:	f007 0707 	and.w	r7, r7, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003bf2:	ea4f 0141 	mov.w	r1, r1, lsl #1

	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003bf6:	461a      	mov	r2, r3
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003bf8:	469a      	mov	sl, r3
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003bfa:	bf58      	it	pl
 8003bfc:	427c      	negpl	r4, r7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003bfe:	b2c9      	uxtb	r1, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003c00:	4630      	mov	r0, r6

	for(int j = (WX - 7); j < 160; j++){
		uint8_t pixelData = 0;

		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c02:	f248 0780 	movw	r7, #32896	; 0x8080
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003c06:	b2e4      	uxtb	r4, r4
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003c08:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003c90 <vGBPPUDrawLineWindow.part.0+0xc8>
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c0c:	ed2d 8b02 	vpush	{d8}
 8003c10:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003c14:	ee08 1a10 	vmov	s16, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003c18:	465b      	mov	r3, fp
 8003c1a:	f7ff ff31 	bl	8003a80 <getTileLineData>
 8003c1e:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003c20:	e00d      	b.n	8003c3e <vGBPPUDrawLineWindow.part.0+0x76>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d11c      	bne.n	8003c60 <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003c26:	f899 0001 	ldrb.w	r0, [r9, #1]
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
		}
		updateBufferObj(pixelData, j);
			pixl_offset++;
 8003c2a:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f7ff ff9f 	bl	8003b70 <updateBufferObj>
			pixl_offset++;
 8003c32:	b2e4      	uxtb	r4, r4

			if(pixl_offset == 8){
 8003c34:	2c08      	cmp	r4, #8
 8003c36:	d015      	beq.n	8003c64 <vGBPPUDrawLineWindow.part.0+0x9c>
	for(int j = (WX - 7); j < 160; j++){
 8003c38:	3501      	adds	r5, #1
 8003c3a:	2da0      	cmp	r5, #160	; 0xa0
 8003c3c:	d020      	beq.n	8003c80 <vGBPPUDrawLineWindow.part.0+0xb8>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c3e:	fa08 f304 	lsl.w	r3, r8, r4
 8003c42:	403b      	ands	r3, r7
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d01e      	beq.n	8003c88 <vGBPPUDrawLineWindow.part.0+0xc0>
 8003c4a:	dc04      	bgt.n	8003c56 <vGBPPUDrawLineWindow.part.0+0x8e>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e8      	bne.n	8003c22 <vGBPPUDrawLineWindow.part.0+0x5a>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003c50:	f899 0000 	ldrb.w	r0, [r9]
 8003c54:	e7e9      	b.n	8003c2a <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c56:	42bb      	cmp	r3, r7
 8003c58:	d102      	bne.n	8003c60 <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003c5a:	f899 0003 	ldrb.w	r0, [r9, #3]
 8003c5e:	e7e4      	b.n	8003c2a <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7e2      	b.n	8003c2a <vGBPPUDrawLineWindow.part.0+0x62>
				tile_offset++;
 8003c64:	3601      	adds	r6, #1
	for(int j = (WX - 7); j < 160; j++){
 8003c66:	3501      	adds	r5, #1
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c68:	465b      	mov	r3, fp
 8003c6a:	4652      	mov	r2, sl
				tile_offset++;
 8003c6c:	b2b6      	uxth	r6, r6
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c6e:	ee18 1a10 	vmov	r1, s16
				pixl_offset = 0;
 8003c72:	2400      	movs	r4, #0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c74:	4630      	mov	r0, r6
 8003c76:	f7ff ff03 	bl	8003a80 <getTileLineData>
	for(int j = (WX - 7); j < 160; j++){
 8003c7a:	2da0      	cmp	r5, #160	; 0xa0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003c7c:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003c7e:	d1de      	bne.n	8003c3e <vGBPPUDrawLineWindow.part.0+0x76>

			}

		}
}
 8003c80:	ecbd 8b02 	vpop	{d8}
 8003c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003c88:	f899 0002 	ldrb.w	r0, [r9, #2]
 8003c8c:	e7cd      	b.n	8003c2a <vGBPPUDrawLineWindow.part.0+0x62>
 8003c8e:	bf00      	nop
 8003c90:	24011680 	.word	0x24011680

08003c94 <vGBPPUDrawLineBackground>:
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003c94:	4402      	add	r2, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003c9a:	f002 0007 	and.w	r0, r2, #7
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003c9e:	ea4f 08d1 	mov.w	r8, r1, lsr #3
 8003ca2:	f3c2 05c4 	ubfx	r5, r2, #3, #5
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ca6:	469a      	mov	sl, r3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003ca8:	0040      	lsls	r0, r0, #1
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003caa:	f001 0407 	and.w	r4, r1, #7
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003cae:	4652      	mov	r2, sl
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cb0:	f248 0780 	movw	r7, #32896	; 0x8080
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003cb4:	4601      	mov	r1, r0
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003cb6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003d7c <vGBPPUDrawLineBackground+0xe8>
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cba:	ed2d 8b02 	vpush	{d8}
 8003cbe:	b083      	sub	sp, #12
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003cc0:	ee08 0a10 	vmov	s16, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003cc4:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
	uint16_t first_tile = tile_offset % 32;
 8003cc8:	f8cd 8004 	str.w	r8, [sp, #4]
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003ccc:	eb08 1845 	add.w	r8, r8, r5, lsl #5
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003cd0:	465b      	mov	r3, fp
	for(int j = 0; j < 160; j++){
 8003cd2:	2500      	movs	r5, #0
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	f7ff fed3 	bl	8003a80 <getTileLineData>
 8003cda:	4606      	mov	r6, r0
	for(int j = 0; j < 160; j++){
 8003cdc:	e00d      	b.n	8003cfa <vGBPPUDrawLineBackground+0x66>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d13a      	bne.n	8003d58 <vGBPPUDrawLineBackground+0xc4>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003ce2:	f899 0001 	ldrb.w	r0, [r9, #1]
		pixl_offset++;
 8003ce6:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7ff ff41 	bl	8003b70 <updateBufferObj>
		pixl_offset++;
 8003cee:	b2e4      	uxtb	r4, r4
		if(pixl_offset == 8){
 8003cf0:	2c08      	cmp	r4, #8
 8003cf2:	d013      	beq.n	8003d1c <vGBPPUDrawLineBackground+0x88>
	for(int j = 0; j < 160; j++){
 8003cf4:	3501      	adds	r5, #1
 8003cf6:	2da0      	cmp	r5, #160	; 0xa0
 8003cf8:	d029      	beq.n	8003d4e <vGBPPUDrawLineBackground+0xba>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003cfa:	fa06 f304 	lsl.w	r3, r6, r4
 8003cfe:	403b      	ands	r3, r7
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d02a      	beq.n	8003d5c <vGBPPUDrawLineBackground+0xc8>
 8003d06:	dc04      	bgt.n	8003d12 <vGBPPUDrawLineBackground+0x7e>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e8      	bne.n	8003cde <vGBPPUDrawLineBackground+0x4a>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003d0c:	f899 0000 	ldrb.w	r0, [r9]
 8003d10:	e7e9      	b.n	8003ce6 <vGBPPUDrawLineBackground+0x52>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d12:	42bb      	cmp	r3, r7
 8003d14:	d120      	bne.n	8003d58 <vGBPPUDrawLineBackground+0xc4>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003d16:	f899 0003 	ldrb.w	r0, [r9, #3]
 8003d1a:	e7e4      	b.n	8003ce6 <vGBPPUDrawLineBackground+0x52>
			tile_offset++;
 8003d1c:	f108 0401 	add.w	r4, r8, #1
			if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d20:	9901      	ldr	r1, [sp, #4]
 8003d22:	f004 031f 	and.w	r3, r4, #31
			tile_offset++;
 8003d26:	b2a4      	uxth	r4, r4
			if(first_tile + (tile_offset % 32) >= 12 && (tile_offset % 32) < first_tile)
 8003d28:	18ca      	adds	r2, r1, r3
 8003d2a:	2a0b      	cmp	r2, #11
 8003d2c:	dd01      	ble.n	8003d32 <vGBPPUDrawLineBackground+0x9e>
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d817      	bhi.n	8003d62 <vGBPPUDrawLineBackground+0xce>
	for(int j = 0; j < 160; j++){
 8003d32:	3501      	adds	r5, #1
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d34:	4620      	mov	r0, r4
 8003d36:	465b      	mov	r3, fp
 8003d38:	4652      	mov	r2, sl
 8003d3a:	ee18 1a10 	vmov	r1, s16
			tile_offset++;
 8003d3e:	46a0      	mov	r8, r4
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d40:	f7ff fe9e 	bl	8003a80 <getTileLineData>
	for(int j = 0; j < 160; j++){
 8003d44:	2da0      	cmp	r5, #160	; 0xa0
			pixl_offset = 0;
 8003d46:	f04f 0400 	mov.w	r4, #0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003d4a:	4606      	mov	r6, r0
	for(int j = 0; j < 160; j++){
 8003d4c:	d1d5      	bne.n	8003cfa <vGBPPUDrawLineBackground+0x66>
}
 8003d4e:	b003      	add	sp, #12
 8003d50:	ecbd 8b02 	vpop	{d8}
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e7c4      	b.n	8003ce6 <vGBPPUDrawLineBackground+0x52>
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003d5c:	f899 0002 	ldrb.w	r0, [r9, #2]
 8003d60:	e7c1      	b.n	8003ce6 <vGBPPUDrawLineBackground+0x52>
				tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d62:	f1a8 001f 	sub.w	r0, r8, #31
 8003d66:	465b      	mov	r3, fp
 8003d68:	4652      	mov	r2, sl
 8003d6a:	ee18 1a10 	vmov	r1, s16
 8003d6e:	b280      	uxth	r0, r0
			tile_offset++;
 8003d70:	46a0      	mov	r8, r4
				tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d72:	f7ff fe85 	bl	8003a80 <getTileLineData>
			pixl_offset = 0;
 8003d76:	2400      	movs	r4, #0
				tile_data = getTileLineData(tile_offset - 32, line_offset, TileDataAddr, DisplayAddr);
 8003d78:	4606      	mov	r6, r0
 8003d7a:	e7bb      	b.n	8003cf4 <vGBPPUDrawLineBackground+0x60>
 8003d7c:	24011680 	.word	0x24011680

08003d80 <vGBPPUDrawLineObjects>:

void vGBPPUDrawLineObjects(uint8_t ly){
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003d88:	b083      	sub	sp, #12
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	e006      	b.n	8003d9c <vGBPPUDrawLineObjects+0x1c>
	for(int obj = 0; obj < 40; obj++){
 8003d8e:	3404      	adds	r4, #4
 8003d90:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003d94:	b2a4      	uxth	r4, r4
 8003d96:	429c      	cmp	r4, r3
 8003d98:	f000 8088 	beq.w	8003eac <vGBPPUDrawLineObjects+0x12c>
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003d9c:	4620      	mov	r0, r4
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003d9e:	1ce7      	adds	r7, r4, #3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003da0:	f7ff fc8a 	bl	80036b8 <ucGBMemoryRead>
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003da4:	1c63      	adds	r3, r4, #1
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003da6:	f1a0 0210 	sub.w	r2, r0, #16
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003daa:	b2bf      	uxth	r7, r7
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003dac:	b298      	uxth	r0, r3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003dae:	fa5f f982 	uxtb.w	r9, r2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003db2:	f7ff fc81 	bl	80036b8 <ucGBMemoryRead>
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003db6:	1ca3      	adds	r3, r4, #2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003db8:	4606      	mov	r6, r0
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003dba:	b298      	uxth	r0, r3
 8003dbc:	f7ff fc7c 	bl	80036b8 <ucGBMemoryRead>
 8003dc0:	4605      	mov	r5, r0
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7ff fc78 	bl	80036b8 <ucGBMemoryRead>
 8003dc8:	2107      	movs	r1, #7
 8003dca:	f7fe ff79 	bl	8002cc0 <checkbit>
		uint8_t objYFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f7ff fc72 	bl	80036b8 <ucGBMemoryRead>
 8003dd4:	2106      	movs	r1, #6
 8003dd6:	f7fe ff73 	bl	8002cc0 <checkbit>
 8003dda:	4683      	mov	fp, r0
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f7ff fc6b 	bl	80036b8 <ucGBMemoryRead>
 8003de2:	2105      	movs	r1, #5
 8003de4:	f7fe ff6c 	bl	8002cc0 <checkbit>
 8003de8:	4603      	mov	r3, r0
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003dea:	4638      	mov	r0, r7
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003dec:	461f      	mov	r7, r3
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003dee:	f7ff fc63 	bl	80036b8 <ucGBMemoryRead>
 8003df2:	2104      	movs	r1, #4
 8003df4:	f7fe ff64 	bl	8002cc0 <checkbit>

		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003df8:	45c1      	cmp	r9, r8
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003dfa:	4682      	mov	sl, r0
		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003dfc:	d8c7      	bhi.n	8003d8e <vGBPPUDrawLineObjects+0xe>
 8003dfe:	f109 0107 	add.w	r1, r9, #7
 8003e02:	4541      	cmp	r1, r8
 8003e04:	dbc3      	blt.n	8003d8e <vGBPPUDrawLineObjects+0xe>

			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003e06:	eba8 0009 	sub.w	r0, r8, r9
 8003e0a:	f1bb 0f00 	cmp.w	fp, #0
 8003e0e:	d04a      	beq.n	8003ea6 <vGBPPUDrawLineObjects+0x126>
 8003e10:	f1c0 0007 	rsb	r0, r0, #7
 8003e14:	0040      	lsls	r0, r0, #1
 8003e16:	b2c0      	uxtb	r0, r0
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e18:	f505 6200 	add.w	r2, r5, #2048	; 0x800
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];

			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003e1c:	2500      	movs	r5, #0
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003e1e:	3e08      	subs	r6, #8

				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
				uint8_t pixelData = 0;

				switch (colorInfo) {
 8003e20:	f248 0b80 	movw	fp, #32896	; 0x8080
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e24:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8003e28:	b2f6      	uxtb	r6, r6
 8003e2a:	b280      	uxth	r0, r0
 8003e2c:	f7ff fd10 	bl	8003850 <usGBMemoryReadShort>
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003e30:	4920      	ldr	r1, [pc, #128]	; (8003eb4 <vGBPPUDrawLineObjects+0x134>)
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <vGBPPUDrawLineObjects+0x138>)
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003e34:	4602      	mov	r2, r0
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003e36:	45aa      	cmp	sl, r5
 8003e38:	bf08      	it	eq
 8003e3a:	460b      	moveq	r3, r1
 8003e3c:	469a      	mov	sl, r3
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003e3e:	b1bf      	cbz	r7, 8003e70 <vGBPPUDrawLineObjects+0xf0>
 8003e40:	fa42 f105 	asr.w	r1, r2, r5
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <vGBPPUDrawLineObjects+0x13c>)
 8003e46:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
 8003e4a:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003e4c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e50:	d018      	beq.n	8003e84 <vGBPPUDrawLineObjects+0x104>
 8003e52:	d81a      	bhi.n	8003e8a <vGBPPUDrawLineObjects+0x10a>
 8003e54:	b1f1      	cbz	r1, 8003e94 <vGBPPUDrawLineObjects+0x114>
 8003e56:	2980      	cmp	r1, #128	; 0x80
 8003e58:	d104      	bne.n	8003e64 <vGBPPUDrawLineObjects+0xe4>
					case 0x0000: pixelData = palette[0]; break;
					case 0x0080: pixelData = palette[1]; break;
 8003e5a:	f89a 0001 	ldrb.w	r0, [sl, #1]
					case 0x8000: pixelData = palette[2]; break;
					case 0x8080: pixelData = palette[3]; break;
				}

				if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003e5e:	b108      	cbz	r0, 8003e64 <vGBPPUDrawLineObjects+0xe4>
 8003e60:	2e9f      	cmp	r6, #159	; 0x9f
 8003e62:	dd1a      	ble.n	8003e9a <vGBPPUDrawLineObjects+0x11a>
			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003e64:	3501      	adds	r5, #1
 8003e66:	3601      	adds	r6, #1
 8003e68:	2d08      	cmp	r5, #8
 8003e6a:	d090      	beq.n	8003d8e <vGBPPUDrawLineObjects+0xe>
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003e6c:	2f00      	cmp	r7, #0
 8003e6e:	d1e7      	bne.n	8003e40 <vGBPPUDrawLineObjects+0xc0>
 8003e70:	fa02 f105 	lsl.w	r1, r2, r5
 8003e74:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8003e78:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003e7c:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003e7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e82:	d1e6      	bne.n	8003e52 <vGBPPUDrawLineObjects+0xd2>
					case 0x8000: pixelData = palette[2]; break;
 8003e84:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8003e88:	e7e9      	b.n	8003e5e <vGBPPUDrawLineObjects+0xde>
				switch (colorInfo) {
 8003e8a:	4559      	cmp	r1, fp
 8003e8c:	d1ea      	bne.n	8003e64 <vGBPPUDrawLineObjects+0xe4>
					case 0x8080: pixelData = palette[3]; break;
 8003e8e:	f89a 0003 	ldrb.w	r0, [sl, #3]
 8003e92:	e7e4      	b.n	8003e5e <vGBPPUDrawLineObjects+0xde>
					case 0x0000: pixelData = palette[0]; break;
 8003e94:	f89a 0000 	ldrb.w	r0, [sl]
 8003e98:	e7e1      	b.n	8003e5e <vGBPPUDrawLineObjects+0xde>
					updateBufferObj(pixelData, xCoordinate + pixelNum);
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	9201      	str	r2, [sp, #4]
 8003e9e:	f7ff fe67 	bl	8003b70 <updateBufferObj>
 8003ea2:	9a01      	ldr	r2, [sp, #4]
 8003ea4:	e7de      	b.n	8003e64 <vGBPPUDrawLineObjects+0xe4>
			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003ea6:	0040      	lsls	r0, r0, #1
 8003ea8:	b2c0      	uxtb	r0, r0
 8003eaa:	e7b5      	b.n	8003e18 <vGBPPUDrawLineObjects+0x98>
				}
			}

		}
	}
}
 8003eac:	b003      	add	sp, #12
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2401169c 	.word	0x2401169c
 8003eb8:	24011684 	.word	0x24011684
 8003ebc:	ffff8080 	.word	0xffff8080

08003ec0 <vGBPPUDrawLine>:
 * @param ly lY Register Data
 * @param SCX Scroll X Register
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	460e      	mov	r6, r1
 8003eca:	4617      	mov	r7, r2
	// update Palettes
	vCheckBGP();
 8003ecc:	f7ff fd72 	bl	80039b4 <vCheckBGP>
	vCheckOBP0();
 8003ed0:	f7ff fd92 	bl	80039f8 <vCheckOBP0>
	vCheckOBP1();
 8003ed4:	f7ff fdb2 	bl	8003a3c <vCheckOBP1>
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003ed8:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003edc:	f7ff fbec 	bl	80036b8 <ucGBMemoryRead>
	uint16_t TileDataAddr = usGetBackWinTileDataSel();
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003ee0:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <vGBPPUDrawLine+0x104>)
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003ee2:	4602      	mov	r2, r0
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003ee4:	4938      	ldr	r1, [pc, #224]	; (8003fc8 <vGBPPUDrawLine+0x108>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
	lineadd = scaleAmount * 160;

	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003ee8:	f64f 7040 	movw	r0, #65344	; 0xff40
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003eec:	f012 0f10 	tst.w	r2, #16
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003ef0:	fb15 f403 	smulbb	r4, r5, r3
	lineadd = scaleAmount * 160;
 8003ef4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003ef8:	bf14      	ite	ne
 8003efa:	f44f 4800 	movne.w	r8, #32768	; 0x8000
 8003efe:	f44f 4808 	moveq.w	r8, #34816	; 0x8800
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003f02:	fb03 f304 	mul.w	r3, r3, r4
	lineadd = scaleAmount * 160;
 8003f06:	0152      	lsls	r2, r2, #5
 8003f08:	4c30      	ldr	r4, [pc, #192]	; (8003fcc <vGBPPUDrawLine+0x10c>)
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	lineadd = scaleAmount * 160;
 8003f0e:	6022      	str	r2, [r4, #0]
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003f10:	015b      	lsls	r3, r3, #5
 8003f12:	600b      	str	r3, [r1, #0]
	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003f14:	f7ff fbd0 	bl	80036b8 <ucGBMemoryRead>
 8003f18:	f010 0401 	ands.w	r4, r0, #1
 8003f1c:	d10f      	bne.n	8003f3e <vGBPPUDrawLine+0x7e>
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
	}else{
		for(int j = 0; j < 160; j++){
			updateBufferObj(1, j);
 8003f1e:	4621      	mov	r1, r4
		for(int j = 0; j < 160; j++){
 8003f20:	3401      	adds	r4, #1
			updateBufferObj(1, j);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff fe24 	bl	8003b70 <updateBufferObj>
		for(int j = 0; j < 160; j++){
 8003f28:	2ca0      	cmp	r4, #160	; 0xa0
 8003f2a:	d1f8      	bne.n	8003f1e <vGBPPUDrawLine+0x5e>
		}
	}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003f2c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f30:	f7ff fbc2 	bl	80036b8 <ucGBMemoryRead>
 8003f34:	0783      	lsls	r3, r0, #30
 8003f36:	d43f      	bmi.n	8003fb8 <vGBPPUDrawLine+0xf8>
		vGBPPUDrawLineObjects(ly);

}
 8003f38:	b002      	add	sp, #8
 8003f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003f3e:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f42:	f7ff fbb9 	bl	80036b8 <ucGBMemoryRead>
 8003f46:	f010 0f08 	tst.w	r0, #8
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003f4a:	463a      	mov	r2, r7
 8003f4c:	4631      	mov	r1, r6
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003f4e:	bf14      	ite	ne
 8003f50:	f44f 441c 	movne.w	r4, #39936	; 0x9c00
 8003f54:	f44f 4418 	moveq.w	r4, #38912	; 0x9800
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003f58:	4643      	mov	r3, r8
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	9400      	str	r4, [sp, #0]
 8003f5e:	f7ff fe99 	bl	8003c94 <vGBPPUDrawLineBackground>
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 8003f62:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f66:	f7ff fba7 	bl	80036b8 <ucGBMemoryRead>
 8003f6a:	0682      	lsls	r2, r0, #26
 8003f6c:	d5de      	bpl.n	8003f2c <vGBPPUDrawLine+0x6c>
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
 8003f6e:	f64f 704b 	movw	r0, #65355	; 0xff4b
 8003f72:	f7ff fba1 	bl	80036b8 <ucGBMemoryRead>
 8003f76:	4604      	mov	r4, r0
 8003f78:	f64f 704a 	movw	r0, #65354	; 0xff4a
 8003f7c:	f7ff fb9c 	bl	80036b8 <ucGBMemoryRead>
 8003f80:	4606      	mov	r6, r0
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003f82:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003f86:	f7ff fb97 	bl	80036b8 <ucGBMemoryRead>
 8003f8a:	f010 0f40 	tst.w	r0, #64	; 0x40
	if(WY > ly || WY > 143 || WX > 166)
 8003f8e:	462a      	mov	r2, r5
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003f90:	bf14      	ite	ne
 8003f92:	f44f 431c 	movne.w	r3, #39936	; 0x9c00
 8003f96:	f44f 4318 	moveq.w	r3, #38912	; 0x9800
	if(WY > ly || WY > 143 || WX > 166)
 8003f9a:	2d8f      	cmp	r5, #143	; 0x8f
 8003f9c:	bf28      	it	cs
 8003f9e:	228f      	movcs	r2, #143	; 0x8f
 8003fa0:	4296      	cmp	r6, r2
 8003fa2:	d8c3      	bhi.n	8003f2c <vGBPPUDrawLine+0x6c>
 8003fa4:	2ca6      	cmp	r4, #166	; 0xa6
 8003fa6:	d8c1      	bhi.n	8003f2c <vGBPPUDrawLine+0x6c>
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4632      	mov	r2, r6
 8003fac:	4643      	mov	r3, r8
 8003fae:	4621      	mov	r1, r4
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f7ff fe09 	bl	8003bc8 <vGBPPUDrawLineWindow.part.0>
 8003fb6:	e7b9      	b.n	8003f2c <vGBPPUDrawLine+0x6c>
		vGBPPUDrawLineObjects(ly);
 8003fb8:	4628      	mov	r0, r5
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		vGBPPUDrawLineObjects(ly);
 8003fc0:	f7ff bede 	b.w	8003d80 <vGBPPUDrawLineObjects>
 8003fc4:	24001014 	.word	0x24001014
 8003fc8:	24011694 	.word	0x24011694
 8003fcc:	24011690 	.word	0x24011690

08003fd0 <gbPPUStep>:
void gbPPUStep(){
 8003fd0:	b570      	push	{r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003fd2:	f64f 7040 	movw	r0, #65344	; 0xff40
void gbPPUStep(){
 8003fd6:	b082      	sub	sp, #8
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003fd8:	f7ff fb6e 	bl	80036b8 <ucGBMemoryRead>
 8003fdc:	0603      	lsls	r3, r0, #24
 8003fde:	d409      	bmi.n	8003ff4 <gbPPUStep+0x24>
		ly = 0;
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <gbPPUStep+0x160>)
		vGBMemoryWrite(LY_ADDR, ly);
 8003fe4:	f64f 7044 	movw	r0, #65348	; 0xff44
		ly = 0;
 8003fe8:	7019      	strb	r1, [r3, #0]
}
 8003fea:	b002      	add	sp, #8
 8003fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBMemoryWrite(LY_ADDR, ly);
 8003ff0:	f7ff bb8a 	b.w	8003708 <vGBMemoryWrite>
		tStatesTotal += ucGetTstate();
 8003ff4:	4c4f      	ldr	r4, [pc, #316]	; (8004134 <gbPPUStep+0x164>)
 8003ff6:	f7fe fd05 	bl	8002a04 <ucGetTstate>
			ly++;
 8003ffa:	4d4d      	ldr	r5, [pc, #308]	; (8004130 <gbPPUStep+0x160>)
		tStatesTotal += ucGetTstate();
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 8004000:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8004004:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 8004006:	d845      	bhi.n	8004094 <gbPPUStep+0xc4>
		if (ly > 143){													// vblank
 8004008:	782e      	ldrb	r6, [r5, #0]
 800400a:	2e8f      	cmp	r6, #143	; 0x8f
 800400c:	d905      	bls.n	800401a <gbPPUStep+0x4a>
			if(Mode != MODE_1){
 800400e:	4b4a      	ldr	r3, [pc, #296]	; (8004138 <gbPPUStep+0x168>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d127      	bne.n	8004066 <gbPPUStep+0x96>
}
 8004016:	b002      	add	sp, #8
 8004018:	bd70      	pop	{r4, r5, r6, pc}
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	2b50      	cmp	r3, #80	; 0x50
 800401e:	d809      	bhi.n	8004034 <gbPPUStep+0x64>
 8004020:	4b45      	ldr	r3, [pc, #276]	; (8004138 <gbPPUStep+0x168>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d0f6      	beq.n	8004016 <gbPPUStep+0x46>
				setMode(MODE_2);
 8004028:	2002      	movs	r0, #2
}
 800402a:	b002      	add	sp, #8
 800402c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				setMode(MODE_3);
 8004030:	f7ff bd6a 	b.w	8003b08 <setMode>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 8004034:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8004038:	2aab      	cmp	r2, #171	; 0xab
 800403a:	d83d      	bhi.n	80040b8 <gbPPUStep+0xe8>
 800403c:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <gbPPUStep+0x168>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d0e8      	beq.n	8004016 <gbPPUStep+0x46>
					vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8004044:	f64f 7043 	movw	r0, #65347	; 0xff43
 8004048:	f7ff fb36 	bl	80036b8 <ucGBMemoryRead>
 800404c:	4601      	mov	r1, r0
 800404e:	f64f 7042 	movw	r0, #65346	; 0xff42
 8004052:	9101      	str	r1, [sp, #4]
 8004054:	f7ff fb30 	bl	80036b8 <ucGBMemoryRead>
 8004058:	9901      	ldr	r1, [sp, #4]
 800405a:	4602      	mov	r2, r0
 800405c:	4630      	mov	r0, r6
 800405e:	f7ff ff2f 	bl	8003ec0 <vGBPPUDrawLine>
				setMode(MODE_3);
 8004062:	2003      	movs	r0, #3
 8004064:	e7e1      	b.n	800402a <gbPPUStep+0x5a>
				setMode(MODE_1);
 8004066:	2001      	movs	r0, #1
 8004068:	f7ff fd4e 	bl	8003b08 <setMode>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 4))
 800406c:	f64f 7041 	movw	r0, #65345	; 0xff41
 8004070:	f7ff fb22 	bl	80036b8 <ucGBMemoryRead>
 8004074:	2104      	movs	r1, #4
 8004076:	f7fe fe23 	bl	8002cc0 <checkbit>
 800407a:	2800      	cmp	r0, #0
 800407c:	d14b      	bne.n	8004116 <gbPPUStep+0x146>
				if(ly == 0x90){
 800407e:	782b      	ldrb	r3, [r5, #0]
 8004080:	2b90      	cmp	r3, #144	; 0x90
 8004082:	d1c8      	bne.n	8004016 <gbPPUStep+0x46>
					vGBMemorySetBit(IF_ADDR, 0);
 8004084:	2100      	movs	r1, #0
					vGBMemorySetBit(IF_ADDR, 1);
 8004086:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 800408a:	b002      	add	sp, #8
 800408c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vGBMemorySetBit(IF_ADDR, 1);
 8004090:	f7ff baca 	b.w	8003628 <vGBMemorySetBit>
			ly++;
 8004094:	7828      	ldrb	r0, [r5, #0]
 8004096:	3001      	adds	r0, #1
 8004098:	b2c0      	uxtb	r0, r0
 800409a:	7028      	strb	r0, [r5, #0]
			LYC_check(ly);
 800409c:	f7ff fd12 	bl	8003ac4 <LYC_check>
			if(ly > 153){												// end of vblank
 80040a0:	7829      	ldrb	r1, [r5, #0]
 80040a2:	2999      	cmp	r1, #153	; 0x99
 80040a4:	d81e      	bhi.n	80040e4 <gbPPUStep+0x114>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 80040a6:	f64f 7044 	movw	r0, #65348	; 0xff44
 80040aa:	f7ff fb2d 	bl	8003708 <vGBMemoryWrite>
			tStatesTotal -= 456;
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	e7a7      	b.n	8004008 <gbPPUStep+0x38>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0){										// hblank
 80040b8:	3bfd      	subs	r3, #253	; 0xfd
 80040ba:	2bcb      	cmp	r3, #203	; 0xcb
 80040bc:	d8ab      	bhi.n	8004016 <gbPPUStep+0x46>
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <gbPPUStep+0x168>)
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	d0a7      	beq.n	8004016 <gbPPUStep+0x46>
	Mode = mode;
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 80040ca:	f7ff fc55 	bl	8003978 <setMode.part.0>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 3))
 80040ce:	f64f 7041 	movw	r0, #65345	; 0xff41
 80040d2:	f7ff faf1 	bl	80036b8 <ucGBMemoryRead>
 80040d6:	2103      	movs	r1, #3
 80040d8:	f7fe fdf2 	bl	8002cc0 <checkbit>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d09a      	beq.n	8004016 <gbPPUStep+0x46>
					vGBMemorySetBit(IF_ADDR, 1);
 80040e0:	2101      	movs	r1, #1
 80040e2:	e7d0      	b.n	8004086 <gbPPUStep+0xb6>
					displayFrameBuffer(gb_frame, scaleAmount);
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <gbPPUStep+0x16c>)
 80040e6:	4b16      	ldr	r3, [pc, #88]	; (8004140 <gbPPUStep+0x170>)
 80040e8:	7811      	ldrb	r1, [r2, #0]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	f000 fb20 	bl	8004730 <displayFrameBuffer>
				n++;
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <gbPPUStep+0x174>)
				setMode(MODE_2);
 80040f2:	2002      	movs	r0, #2
				n++;
 80040f4:	6813      	ldr	r3, [r2, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	6013      	str	r3, [r2, #0]
				setMode(MODE_2);
 80040fa:	f7ff fd05 	bl	8003b08 <setMode>
				ly = 0;
 80040fe:	2300      	movs	r3, #0
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8004100:	f64f 7041 	movw	r0, #65345	; 0xff41
				ly = 0;
 8004104:	702b      	strb	r3, [r5, #0]
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8004106:	f7ff fad7 	bl	80036b8 <ucGBMemoryRead>
 800410a:	2105      	movs	r1, #5
 800410c:	f7fe fdd8 	bl	8002cc0 <checkbit>
 8004110:	b938      	cbnz	r0, 8004122 <gbPPUStep+0x152>
 8004112:	7829      	ldrb	r1, [r5, #0]
 8004114:	e7c7      	b.n	80040a6 <gbPPUStep+0xd6>
					vGBMemorySetBit(IF_ADDR, 1);
 8004116:	2101      	movs	r1, #1
 8004118:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800411c:	f7ff fa84 	bl	8003628 <vGBMemorySetBit>
 8004120:	e7ad      	b.n	800407e <gbPPUStep+0xae>
					vGBMemorySetBit(IF_ADDR, 1);
 8004122:	2101      	movs	r1, #1
 8004124:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8004128:	f7ff fa7e 	bl	8003628 <vGBMemorySetBit>
 800412c:	e7f1      	b.n	8004112 <gbPPUStep+0x142>
 800412e:	bf00      	nop
 8004130:	240010b3 	.word	0x240010b3
 8004134:	24011688 	.word	0x24011688
 8004138:	2401168c 	.word	0x2401168c
 800413c:	24001014 	.word	0x24001014
 8004140:	24001010 	.word	0x24001010
 8004144:	240010b4 	.word	0x240010b4

08004148 <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <getRomPointer+0x8>)
}
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	24001018 	.word	0x24001018

08004154 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8004154:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004156:	2004      	movs	r0, #4
{
 8004158:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800415a:	f004 f825 	bl	80081a8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <SystemClock_Config+0xc8>)
 8004160:	2300      	movs	r3, #0
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <SystemClock_Config+0xcc>)
 8004168:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800416c:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800416e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004170:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004172:	f002 0201 	and.w	r2, r2, #1
 8004176:	9201      	str	r2, [sp, #4]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800417e:	619a      	str	r2, [r3, #24]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800418a:	6983      	ldr	r3, [r0, #24]
 800418c:	049b      	lsls	r3, r3, #18
 800418e:	d5fc      	bpl.n	800418a <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004190:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004192:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004196:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004198:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 800419a:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 800419c:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800419e:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041a0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 80041a2:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041a4:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80041a6:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80041a8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80041aa:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80041ac:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041ae:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 80041b0:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80041b2:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041b4:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041b8:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80041bc:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80041c0:	f004 f82e 	bl	8008220 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80041c4:	b108      	cbz	r0, 80041ca <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041c8:	e7fe      	b.n	80041c8 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80041ca:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80041cc:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ce:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80041d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80041d4:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80041d6:	2104      	movs	r1, #4
 80041d8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80041da:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80041e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80041e4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80041e8:	f004 fbb0 	bl	800894c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80041ec:	b108      	cbz	r0, 80041f2 <SystemClock_Config+0x9e>
 80041ee:	b672      	cpsid	i
  while (1)
 80041f0:	e7fe      	b.n	80041f0 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <SystemClock_Config+0xd0>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041fa:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80041fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004200:	f042 0202 	orr.w	r2, r2, #2
 8004204:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004214:	f001 fff4 	bl	8006200 <HAL_EnableCompensationCell>
}
 8004218:	b01e      	add	sp, #120	; 0x78
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	58000400 	.word	0x58000400
 8004220:	58024800 	.word	0x58024800
 8004224:	58024400 	.word	0x58024400

08004228 <PeriphCommonClock_Config>:
{
 8004228:	b530      	push	{r4, r5, lr}
 800422a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800422c:	229c      	movs	r2, #156	; 0x9c
 800422e:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8004230:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004232:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004234:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004236:	f006 f921 	bl	800a47c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800423a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800423e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004240:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004242:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004244:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004246:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8004248:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800424a:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800424c:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800424e:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004250:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004254:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004258:	f004 fdbc 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 800425c:	b108      	cbz	r0, 8004262 <PeriphCommonClock_Config+0x3a>
 800425e:	b672      	cpsid	i
  while (1)
 8004260:	e7fe      	b.n	8004260 <PeriphCommonClock_Config+0x38>
}
 8004262:	b031      	add	sp, #196	; 0xc4
 8004264:	bd30      	pop	{r4, r5, pc}
 8004266:	bf00      	nop

08004268 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8004268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800426c:	49bb      	ldr	r1, [pc, #748]	; (800455c <main+0x2f4>)
 800426e:	e002      	b.n	8004276 <main+0xe>
 8004270:	3b01      	subs	r3, #1
 8004272:	f000 811e 	beq.w	80044b2 <main+0x24a>
 8004276:	680a      	ldr	r2, [r1, #0]
 8004278:	0410      	lsls	r0, r2, #16
 800427a:	d4f9      	bmi.n	8004270 <main+0x8>
{
 800427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	b092      	sub	sp, #72	; 0x48
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004282:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 8004284:	f002 fe02 	bl	8006e8c <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004288:	4ab5      	ldr	r2, [pc, #724]	; (8004560 <main+0x2f8>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800428a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800428e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004292:	a80b      	add	r0, sp, #44	; 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004294:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004298:	930e      	str	r3, [sp, #56]	; 0x38
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800429a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800429e:	f002 fe17 	bl	8006ed0 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80042a2:	2004      	movs	r0, #4
 80042a4:	f002 fe02 	bl	8006eac <HAL_MPU_Enable>
  HAL_Init();
 80042a8:	f001 ff46 	bl	8006138 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80042ac:	4aad      	ldr	r2, [pc, #692]	; (8004564 <main+0x2fc>)
 80042ae:	6953      	ldr	r3, [r2, #20]
 80042b0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80042b4:	d111      	bne.n	80042da <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042ba:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80042be:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80042c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80042ca:	6953      	ldr	r3, [r2, #20]
 80042cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80042d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80042da:	4aa2      	ldr	r2, [pc, #648]	; (8004564 <main+0x2fc>)
 80042dc:	6953      	ldr	r3, [r2, #20]
 80042de:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80042e2:	d124      	bne.n	800432e <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80042e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80042e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80042ec:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80042f0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80042f4:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80042f8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80042fc:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80042fe:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004302:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004304:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004308:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800430a:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	d1f8      	bne.n	8004304 <main+0x9c>
    } while(sets-- != 0U);
 8004312:	3820      	subs	r0, #32
 8004314:	f110 0f20 	cmn.w	r0, #32
 8004318:	d1f1      	bne.n	80042fe <main+0x96>
 800431a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800431e:	6953      	ldr	r3, [r2, #20]
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6153      	str	r3, [r2, #20]
 8004326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800432a:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 800432e:	4c8b      	ldr	r4, [pc, #556]	; (800455c <main+0x2f4>)
  SystemClock_Config();
 8004330:	f7ff ff10 	bl	8004154 <SystemClock_Config>
  PeriphCommonClock_Config();
 8004334:	f7ff ff78 	bl	8004228 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8004338:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 800433a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800433e:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8004340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004344:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8004348:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8004354:	f003 fcb2 	bl	8007cbc <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8004358:	2100      	movs	r1, #0
 800435a:	4608      	mov	r0, r1
 800435c:	f003 fcbc 	bl	8007cd8 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8004360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004364:	e002      	b.n	800436c <main+0x104>
 8004366:	3b01      	subs	r3, #1
 8004368:	f000 80a5 	beq.w	80044b6 <main+0x24e>
 800436c:	682a      	ldr	r2, [r5, #0]
 800436e:	0412      	lsls	r2, r2, #16
 8004370:	d5f9      	bpl.n	8004366 <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004372:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004376:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004380:	f44f 7880 	mov.w	r8, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004384:	a90b      	add	r1, sp, #44	; 0x2c
 8004386:	4878      	ldr	r0, [pc, #480]	; (8004568 <main+0x300>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004388:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800438c:	f44f 2900 	mov.w	r9, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004390:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004394:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 8004396:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800457c <main+0x314>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	4033      	ands	r3, r6
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80043aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043ae:	4013      	ands	r3, r2
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80043c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	9304      	str	r3, [sp, #16]
 80043ca:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80043d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	9305      	str	r3, [sp, #20]
 80043e2:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ec:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80043f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	9306      	str	r3, [sp, #24]
 80043fa:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004400:	f043 0320 	orr.w	r3, r3, #32
 8004404:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004408:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440c:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800440e:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004412:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004416:	9307      	str	r3, [sp, #28]
 8004418:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800441e:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004420:	f003 fb20 	bl	8007a64 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004426:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800442a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800442e:	a90b      	add	r1, sp, #44	; 0x2c
 8004430:	484e      	ldr	r0, [pc, #312]	; (800456c <main+0x304>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004432:	ea43 0308 	orr.w	r3, r3, r8
 8004436:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800443a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800443e:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004440:	ea03 0308 	and.w	r3, r3, r8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004446:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444c:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800444e:	f003 fb09 	bl	8007a64 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	a90b      	add	r1, sp, #44	; 0x2c
 8004458:	4845      	ldr	r0, [pc, #276]	; (8004570 <main+0x308>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800445a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004462:	f003 faff 	bl	8007a64 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004468:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800446a:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 800446e:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004470:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8004472:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004476:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800447a:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800447e:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004482:	f8ca 7010 	str.w	r7, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004486:	e9ca 3900 	strd	r3, r9, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 800448a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800448e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8004492:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8004496:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800449a:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800449e:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80044a2:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044a6:	f002 fb09 	bl	8006abc <HAL_ADC_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	b128      	cbz	r0, 80044ba <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 80044ae:	b672      	cpsid	i
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <main+0x248>
 80044b2:	b672      	cpsid	i
 80044b4:	e7fe      	b.n	80044b4 <main+0x24c>
 80044b6:	b672      	cpsid	i
 80044b8:	e7fe      	b.n	80044b8 <main+0x250>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80044ba:	a908      	add	r1, sp, #32
 80044bc:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80044be:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80044c0:	f002 fc08 	bl	8006cd4 <HAL_ADCEx_MultiModeConfigChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	b108      	cbz	r0, 80044cc <main+0x264>
 80044c8:	b672      	cpsid	i
  while (1)
 80044ca:	e7fe      	b.n	80044ca <main+0x262>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044cc:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80044ce:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044d2:	4650      	mov	r0, sl
 80044d4:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80044d6:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 80044d8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 80044dc:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044de:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80044e0:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 80044e2:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044e6:	f001 ff21 	bl	800632c <HAL_ADC_ConfigChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	b108      	cbz	r0, 80044f2 <main+0x28a>
 80044ee:	b672      	cpsid	i
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <main+0x288>
  hadc3.Instance = ADC3;
 80044f2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8004580 <main+0x318>
 80044f6:	4a20      	ldr	r2, [pc, #128]	; (8004578 <main+0x310>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80044f8:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80044fa:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80044fc:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004500:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004504:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8004508:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800450c:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8004510:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004514:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004518:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800451c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8004520:	e9ca 9301 	strd	r9, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004524:	e9ca 3703 	strd	r3, r7, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004528:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800452c:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004530:	f002 fac4 	bl	8006abc <HAL_ADC_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	b108      	cbz	r0, 800453c <main+0x2d4>
 8004538:	b672      	cpsid	i
  while (1)
 800453a:	e7fe      	b.n	800453a <main+0x2d2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800453c:	a90b      	add	r1, sp, #44	; 0x2c
 800453e:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 8004540:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004544:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004548:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 800454c:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004550:	f001 feec 	bl	800632c <HAL_ADC_ConfigChannel>
 8004554:	4604      	mov	r4, r0
 8004556:	b1a8      	cbz	r0, 8004584 <main+0x31c>
 8004558:	b672      	cpsid	i
  while (1)
 800455a:	e7fe      	b.n	800455a <main+0x2f2>
 800455c:	58024400 	.word	0x58024400
 8004560:	03000018 	.word	0x03000018
 8004564:	e000ed00 	.word	0xe000ed00
 8004568:	58020000 	.word	0x58020000
 800456c:	58022000 	.word	0x58022000
 8004570:	58020800 	.word	0x58020800
 8004574:	40022000 	.word	0x40022000
 8004578:	58026000 	.word	0x58026000
 800457c:	24011768 	.word	0x24011768
 8004580:	240117cc 	.word	0x240117cc
  stm32h7_displaySetPalette();
 8004584:	f000 f836 	bl	80045f4 <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8004588:	4631      	mov	r1, r6
 800458a:	4620      	mov	r0, r4
 800458c:	f001 fc72 	bl	8005e74 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8004590:	4813      	ldr	r0, [pc, #76]	; (80045e0 <main+0x378>)
 8004592:	f005 feab 	bl	800a2ec <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8004596:	4620      	mov	r0, r4
 8004598:	f005 feda 	bl	800a350 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	f005 ff2a 	bl	800a3f8 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	f005 feea 	bl	800a380 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80045ac:	480d      	ldr	r0, [pc, #52]	; (80045e4 <main+0x37c>)
 80045ae:	f005 fedf 	bl	800a370 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 80045b2:	480d      	ldr	r0, [pc, #52]	; (80045e8 <main+0x380>)
 80045b4:	f005 feec 	bl	800a390 <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <main+0x384>)
 80045ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f7fe ffd6 	bl	8003570 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 80045c4:	4641      	mov	r1, r8
 80045c6:	480a      	ldr	r0, [pc, #40]	; (80045f0 <main+0x388>)
 80045c8:	f7fe ffd2 	bl	8003570 <vGBMemoryLoad>
  vGBMemoryInit();
 80045cc:	f7ff f926 	bl	800381c <vGBMemoryInit>
  vSetFrameBuffer();
 80045d0:	f7ff f9e0 	bl	8003994 <vSetFrameBuffer>
	  vGBCPUboot();
 80045d4:	f7fe fb34 	bl	8002c40 <vGBCPUboot>
	  gbPPUStep();
 80045d8:	f7ff fcfa 	bl	8003fd0 <gbPPUStep>
  while (1)
 80045dc:	e7fa      	b.n	80045d4 <main+0x36c>
 80045de:	bf00      	nop
 80045e0:	08012728 	.word	0x08012728
 80045e4:	ff0000ff 	.word	0xff0000ff
 80045e8:	24001074 	.word	0x24001074
 80045ec:	24001018 	.word	0x24001018
 80045f0:	080124b4 	.word	0x080124b4

080045f4 <stm32h7_displaySetPalette>:
};

static uint32_t clut_argb8888[256];
DMA2D_CLUTCfgTypeDef clut_cfg;

void stm32h7_displaySetPalette(){
 80045f4:	b430      	push	{r4, r5}

	clut_argb8888[1] = LIGHTEST_GREEN;
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <stm32h7_displaySetPalette+0x24>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80045f8:	2000      	movs	r0, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 80045fa:	4c08      	ldr	r4, [pc, #32]	; (800461c <stm32h7_displaySetPalette+0x28>)
	clut_cfg.Size = 255;
 80045fc:	21ff      	movs	r1, #255	; 0xff
	clut_argb8888[2] = LIGHT_GREEN;
 80045fe:	4a08      	ldr	r2, [pc, #32]	; (8004620 <stm32h7_displaySetPalette+0x2c>)
	clut_argb8888[3] = DARK_GREEN;
 8004600:	4d08      	ldr	r5, [pc, #32]	; (8004624 <stm32h7_displaySetPalette+0x30>)
	clut_argb8888[1] = LIGHTEST_GREEN;
 8004602:	605c      	str	r4, [r3, #4]
	clut_argb8888[2] = LIGHT_GREEN;
 8004604:	609a      	str	r2, [r3, #8]
	clut_argb8888[4] = DARKEST_GREEN;
 8004606:	4c08      	ldr	r4, [pc, #32]	; (8004628 <stm32h7_displaySetPalette+0x34>)
	clut_cfg.pCLUT = clut_argb8888;
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <stm32h7_displaySetPalette+0x38>)
	clut_argb8888[4] = DARKEST_GREEN;
 800460a:	e9c3 5403 	strd	r5, r4, [r3, #12]
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 800460e:	e9c2 3000 	strd	r3, r0, [r2]
}
 8004612:	bc30      	pop	{r4, r5}
	clut_cfg.Size = 255;
 8004614:	6091      	str	r1, [r2, #8]
}
 8004616:	4770      	bx	lr
 8004618:	240010b8 	.word	0x240010b8
 800461c:	ff9bbc0f 	.word	0xff9bbc0f
 8004620:	ff8bac0f 	.word	0xff8bac0f
 8004624:	ff306230 	.word	0xff306230
 8004628:	ff0f380f 	.word	0xff0f380f
 800462c:	24011884 	.word	0x24011884

08004630 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_LTDC_LineEventCallback+0x3c>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	2a00      	cmp	r2, #0
 8004636:	db15      	blt.n	8004664 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004638:	490d      	ldr	r1, [pc, #52]	; (8004670 <HAL_LTDC_LineEventCallback+0x40>)
 800463a:	6802      	ldr	r2, [r0, #0]
{
 800463c:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800463e:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8004640:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004644:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8004648:	4d0a      	ldr	r5, [pc, #40]	; (8004674 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800464a:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 800464e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004650:	f041 0101 	orr.w	r1, r1, #1
 8004654:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004656:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 800465c:	601c      	str	r4, [r3, #0]
}
 800465e:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004660:	f003 bce6 	b.w	8008030 <HAL_LTDC_ProgramLineEvent>
 8004664:	2100      	movs	r1, #0
 8004666:	f003 bce3 	b.w	8008030 <HAL_LTDC_ProgramLineEvent>
 800466a:	bf00      	nop
 800466c:	2400101c 	.word	0x2400101c
 8004670:	080125b4 	.word	0x080125b4
 8004674:	240014b8 	.word	0x240014b8

08004678 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 800467e:	4c29      	ldr	r4, [pc, #164]	; (8004724 <CopyBuffer+0xac>)
 8004680:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004684:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8004688:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 800468c:	f04f 0c05 	mov.w	ip, #5
{
 8004690:	461e      	mov	r6, r3
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <CopyBuffer+0xb0>)
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004694:	f5ca 7548 	rsb	r5, sl, #800	; 0x320
{
 8004698:	4680      	mov	r8, r0

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800469a:	4620      	mov	r0, r4
{
 800469c:	460f      	mov	r7, r1
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 800469e:	60e5      	str	r5, [r4, #12]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80046a0:	2500      	movs	r5, #0
{
 80046a2:	4691      	mov	r9, r2
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80046a4:	f8c4 b004 	str.w	fp, [r4, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80046a8:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 80046aa:	6225      	str	r5, [r4, #32]
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80046ac:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputOffset = 0;
 80046ae:	6465      	str	r5, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80046b0:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80046b4:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
  hdma2d.Instance          = DMA2D;
 80046b8:	6023      	str	r3, [r4, #0]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80046ba:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 80046be:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 80046c2:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80046c6:	f002 fc79 	bl	8006fbc <HAL_DMA2D_Init>
 80046ca:	b110      	cbz	r0, 80046d2 <CopyBuffer+0x5a>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
		  }
    }
    }
  }
}
 80046cc:	b003      	add	sp, #12
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 80046d2:	2101      	movs	r1, #1
 80046d4:	4620      	mov	r0, r4
 80046d6:	f002 fd93 	bl	8007200 <HAL_DMA2D_ConfigLayer>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d1f6      	bne.n	80046cc <CopyBuffer+0x54>
      if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 80046de:	2201      	movs	r2, #1
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <CopyBuffer+0xb4>)
 80046e2:	4620      	mov	r0, r4
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e8:	f002 fcc6 	bl	8007078 <HAL_DMA2D_CLUTLoad>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1ed      	bne.n	80046cc <CopyBuffer+0x54>
    	  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80046f0:	210a      	movs	r1, #10
 80046f2:	4620      	mov	r0, r4
 80046f4:	f002 fcfe 	bl	80070f4 <HAL_DMA2D_PollForTransfer>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 80046f8:	f44f 7248 	mov.w	r2, #800	; 0x320
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 80046fc:	4653      	mov	r3, sl
 80046fe:	4641      	mov	r1, r8
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004700:	fb02 9206 	mla	r2, r2, r6, r9
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8004704:	4620      	mov	r0, r4
 8004706:	9500      	str	r5, [sp, #0]
 8004708:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800470c:	f002 fc98 	bl	8007040 <HAL_DMA2D_Start>
 8004710:	2800      	cmp	r0, #0
 8004712:	d1db      	bne.n	80046cc <CopyBuffer+0x54>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004714:	4620      	mov	r0, r4
 8004716:	210a      	movs	r1, #10
}
 8004718:	b003      	add	sp, #12
 800471a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800471e:	f002 bce9 	b.w	80070f4 <HAL_DMA2D_PollForTransfer>
 8004722:	bf00      	nop
 8004724:	240014bc 	.word	0x240014bc
 8004728:	52001000 	.word	0x52001000
 800472c:	24011884 	.word	0x24011884

08004730 <displayFrameBuffer>:

void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount){
 8004730:	b530      	push	{r4, r5, lr}
 8004732:	460c      	mov	r4, r1
 8004734:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 8004736:	2318      	movs	r3, #24
 8004738:	2200      	movs	r2, #0
 800473a:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800473e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004742:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004746:	012d      	lsls	r5, r5, #4
 8004748:	0164      	lsls	r4, r4, #5
 800474a:	e9cd 4500 	strd	r4, r5, [sp]
 800474e:	f7ff ff93 	bl	8004678 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <displayFrameBuffer+0x34>)
 8004754:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 800475e:	b003      	add	sp, #12
 8004760:	bd30      	pop	{r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	24011890 	.word	0x24011890

08004768 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_MspInit+0x20>)
{
 800476a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004770:	f042 0202 	orr.w	r2, r2, #2
 8004774:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004784:	b002      	add	sp, #8
 8004786:	4770      	bx	lr
 8004788:	58024400 	.word	0x58024400

0800478c <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800478c:	4938      	ldr	r1, [pc, #224]	; (8004870 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8004790:	6802      	ldr	r2, [r0, #0]
{
 8004792:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8004794:	428a      	cmp	r2, r1
{
 8004796:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800479c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80047a0:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80047a2:	d004      	beq.n	80047ae <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80047a4:	4933      	ldr	r1, [pc, #204]	; (8004874 <HAL_ADC_MspInit+0xe8>)
 80047a6:	428a      	cmp	r2, r1
 80047a8:	d026      	beq.n	80047f8 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80047aa:	b00a      	add	sp, #40	; 0x28
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047ae:	4b32      	ldr	r3, [pc, #200]	; (8004878 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80047b0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047b4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80047b8:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047ba:	f042 0220 	orr.w	r2, r2, #32
 80047be:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80047c2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80047c6:	f002 0220 	and.w	r2, r2, #32
 80047ca:	9200      	str	r2, [sp, #0]
 80047cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80047da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80047e6:	f001 fd01 	bl	80061ec <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80047ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047ee:	4608      	mov	r0, r1
 80047f0:	f001 fcfc 	bl	80061ec <HAL_SYSCFG_AnalogSwitchConfig>
}
 80047f4:	b00a      	add	sp, #40	; 0x28
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 80047fa:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047fe:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004800:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004802:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004806:	481d      	ldr	r0, [pc, #116]	; (800487c <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004808:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800480c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004810:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004814:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8004818:	9402      	str	r4, [sp, #8]
 800481a:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800481c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004820:	f044 0420 	orr.w	r4, r4, #32
 8004824:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004828:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800482c:	f004 0420 	and.w	r4, r4, #32
 8004830:	9403      	str	r4, [sp, #12]
 8004832:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004834:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004838:	f044 0404 	orr.w	r4, r4, #4
 800483c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004840:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004846:	f002 0204 	and.w	r2, r2, #4
 800484a:	9204      	str	r2, [sp, #16]
 800484c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800484e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004852:	f003 f907 	bl	8007a64 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004856:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800485a:	4608      	mov	r0, r1
 800485c:	f001 fcc6 	bl	80061ec <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004860:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004864:	4608      	mov	r0, r1
 8004866:	f001 fcc1 	bl	80061ec <HAL_SYSCFG_AnalogSwitchConfig>
}
 800486a:	b00a      	add	sp, #40	; 0x28
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	bf00      	nop
 8004870:	40022000 	.word	0x40022000
 8004874:	58026000 	.word	0x58026000
 8004878:	58024400 	.word	0x58024400
 800487c:	58021400 	.word	0x58021400

08004880 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004884:	4c05      	ldr	r4, [pc, #20]	; (800489c <HardFault_Handler+0x18>)
{
 8004886:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004888:	4620      	mov	r0, r4
 800488a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800488e:	f003 fa0b 	bl	8007ca8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004896:	f001 fc91 	bl	80061bc <HAL_Delay>
  while (1)
 800489a:	e7f5      	b.n	8004888 <HardFault_Handler+0x4>
 800489c:	58022000 	.word	0x58022000

080048a0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <MemManage_Handler>
 80048a2:	bf00      	nop

080048a4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <BusFault_Handler>
 80048a6:	bf00      	nop

080048a8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80048a8:	e7fe      	b.n	80048a8 <UsageFault_Handler>
 80048aa:	bf00      	nop

080048ac <SVC_Handler>:
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <DebugMon_Handler>:
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <PendSV_Handler>:
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80048b8:	f001 bc6e 	b.w	8006198 <HAL_IncTick>

080048bc <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <LTDC_IRQHandler+0x8>)
 80048be:	f003 bb25 	b.w	8007f0c <HAL_LTDC_IRQHandler>
 80048c2:	bf00      	nop
 80048c4:	24011890 	.word	0x24011890

080048c8 <LTDC_ER_IRQHandler>:
 80048c8:	f7ff bff8 	b.w	80048bc <LTDC_IRQHandler>

080048cc <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80048cc:	4801      	ldr	r0, [pc, #4]	; (80048d4 <DSI_IRQHandler+0x8>)
 80048ce:	f002 bdeb 	b.w	80074a8 <HAL_DSI_IRQHandler>
 80048d2:	bf00      	nop
 80048d4:	24011954 	.word	0x24011954

080048d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80048d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004910 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048dc:	f7fb fcfc 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048e0:	480c      	ldr	r0, [pc, #48]	; (8004914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048e2:	490d      	ldr	r1, [pc, #52]	; (8004918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048e8:	e002      	b.n	80048f0 <LoopCopyDataInit>

080048ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ee:	3304      	adds	r3, #4

080048f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048f4:	d3f9      	bcc.n	80048ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048f8:	4c0a      	ldr	r4, [pc, #40]	; (8004924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048fc:	e001      	b.n	8004902 <LoopFillZerobss>

080048fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004900:	3204      	adds	r2, #4

08004902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004904:	d3fb      	bcc.n	80048fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004906:	f005 fd87 	bl	800a418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800490a:	f7ff fcad 	bl	8004268 <main>
  bx  lr
 800490e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004910:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004914:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004918:	2400107c 	.word	0x2400107c
  ldr r2, =_sidata
 800491c:	08014214 	.word	0x08014214
  ldr r2, =_sbss
 8004920:	24001080 	.word	0x24001080
  ldr r4, =_ebss
 8004924:	24011a10 	.word	0x24011a10

08004928 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004928:	e7fe      	b.n	8004928 <ADC3_IRQHandler>
	...

0800492c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800492e:	4c0e      	ldr	r4, [pc, #56]	; (8004968 <IS42S32800J_ModeRegConfig+0x3c>)
 8004930:	2304      	movs	r3, #4
{
 8004932:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004934:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004936:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004938:	69d7      	ldr	r7, [r2, #28]
 800493a:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800493e:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004940:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004942:	6955      	ldr	r5, [r2, #20]
 8004944:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004946:	6995      	ldr	r5, [r2, #24]
 8004948:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800494a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800494c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8004950:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004952:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004954:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004956:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004958:	f005 fbe4 	bl	800a124 <HAL_SDRAM_SendCommand>
 800495c:	3800      	subs	r0, #0
 800495e:	bf18      	it	ne
 8004960:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004962:	4240      	negs	r0, r0
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004966:	bf00      	nop
 8004968:	24001524 	.word	0x24001524

0800496c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800496c:	680a      	ldr	r2, [r1, #0]
{
 800496e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004970:	4c22      	ldr	r4, [pc, #136]	; (80049fc <IS42S32800J_Init+0x90>)
 8004972:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004974:	2700      	movs	r7, #0
{
 8004976:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004978:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800497a:	4621      	mov	r1, r4
 800497c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004980:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8004982:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004984:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004986:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004988:	f005 fbcc 	bl	800a124 <HAL_SDRAM_SendCommand>
 800498c:	2800      	cmp	r0, #0
 800498e:	d132      	bne.n	80049f6 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004990:	f001 fc0e 	bl	80061b0 <HAL_GetTick>
 8004994:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004996:	f001 fc0b 	bl	80061b0 <HAL_GetTick>
 800499a:	4287      	cmp	r7, r0
 800499c:	d0fb      	beq.n	8004996 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800499e:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80049a0:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 80049a2:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 80049a4:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80049a6:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80049ac:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049ae:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 80049b0:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049b2:	4912      	ldr	r1, [pc, #72]	; (80049fc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80049b4:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049b6:	f005 fbb5 	bl	800a124 <HAL_SDRAM_SendCommand>
 80049ba:	4603      	mov	r3, r0
 80049bc:	b9d8      	cbnz	r0, 80049f6 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80049be:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 80049c0:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 80049c2:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 80049c8:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049ca:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 80049cc:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049ce:	490b      	ldr	r1, [pc, #44]	; (80049fc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80049d0:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 80049d2:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80049d4:	f005 fba6 	bl	800a124 <HAL_SDRAM_SendCommand>
 80049d8:	b968      	cbnz	r0, 80049f6 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	f7ff ffa5 	bl	800492c <IS42S32800J_ModeRegConfig>
 80049e2:	b940      	cbnz	r0, 80049f6 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80049e4:	68a9      	ldr	r1, [r5, #8]
 80049e6:	4630      	mov	r0, r6
 80049e8:	f005 fbbc 	bl	800a164 <HAL_SDRAM_ProgramRefreshRate>
 80049ec:	3800      	subs	r0, #0
 80049ee:	bf18      	it	ne
 80049f0:	2001      	movne	r0, #1
 80049f2:	4240      	negs	r0, r0
}
 80049f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80049fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049fc:	24001524 	.word	0x24001524

08004a00 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop

08004a08 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8004a0a:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	600b      	str	r3, [r1, #0]
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	24001534 	.word	0x24001534

08004a18 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8004a1a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	600b      	str	r3, [r1, #0]
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	24001534 	.word	0x24001534

08004a28 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <OTM8009A_GetXSize+0x1c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b123      	cbz	r3, 8004a38 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8004a2e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004a32:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004a34:	600b      	str	r3, [r1, #0]
}
 8004a36:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004a38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004a3c:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8004a3e:	600b      	str	r3, [r1, #0]
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	24001534 	.word	0x24001534

08004a48 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <OTM8009A_GetYSize+0x1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b123      	cbz	r3, 8004a58 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004a4e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004a52:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004a54:	600b      	str	r3, [r1, #0]
}
 8004a56:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004a58:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004a5c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004a5e:	600b      	str	r3, [r1, #0]
}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	24001534 	.word	0x24001534

08004a68 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004a98:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a9a:	6884      	ldr	r4, [r0, #8]
 8004a9c:	8800      	ldrh	r0, [r0, #0]
 8004a9e:	46a4      	mov	ip, r4
}
 8004aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004aa4:	4760      	bx	ip
 8004aa6:	bf00      	nop

08004aa8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004aa8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004aaa:	6844      	ldr	r4, [r0, #4]
 8004aac:	8800      	ldrh	r0, [r0, #0]
 8004aae:	46a4      	mov	ip, r4
}
 8004ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ab4:	4760      	bx	ip
 8004ab6:	bf00      	nop

08004ab8 <OTM8009A_Init>:
{
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004abc:	2300      	movs	r3, #0
 8004abe:	f100 0710 	add.w	r7, r0, #16
{
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	4689      	mov	r9, r1
 8004ac8:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004aca:	4619      	mov	r1, r3
 8004acc:	4ae0      	ldr	r2, [pc, #896]	; (8004e50 <OTM8009A_Init+0x398>)
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f000 fcd6 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004ad4:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ad6:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004ad8:	4ade      	ldr	r2, [pc, #888]	; (8004e54 <OTM8009A_Init+0x39c>)
 8004ada:	21ff      	movs	r1, #255	; 0xff
 8004adc:	4638      	mov	r0, r7
 8004ade:	f000 fccf 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ae2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004ae4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ae6:	4adc      	ldr	r2, [pc, #880]	; (8004e58 <OTM8009A_Init+0x3a0>)
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 fcc8 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004af0:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004af2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004af4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004af6:	4ad9      	ldr	r2, [pc, #868]	; (8004e5c <OTM8009A_Init+0x3a4>)
 8004af8:	21ff      	movs	r1, #255	; 0xff
 8004afa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004afc:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004afe:	f000 fcbf 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b06:	4ad4      	ldr	r2, [pc, #848]	; (8004e58 <OTM8009A_Init+0x3a0>)
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f000 fcb8 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004b10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b12:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b14:	2300      	movs	r3, #0
 8004b16:	4ad2      	ldr	r2, [pc, #840]	; (8004e60 <OTM8009A_Init+0x3a8>)
 8004b18:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b1a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f000 fcaf 	bl	8005480 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004b22:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004b26:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004b28:	4798      	blx	r3
 8004b2a:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004b2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004b30:	4798      	blx	r3
 8004b32:	1b00      	subs	r0, r0, r4
 8004b34:	2809      	cmp	r0, #9
 8004b36:	d9f9      	bls.n	8004b2c <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4aca      	ldr	r2, [pc, #808]	; (8004e64 <OTM8009A_Init+0x3ac>)
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f000 fc9e 	bl	8005480 <otm8009a_write_reg>
 8004b44:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004b46:	2300      	movs	r3, #0
 8004b48:	4ac7      	ldr	r2, [pc, #796]	; (8004e68 <OTM8009A_Init+0x3b0>)
 8004b4a:	21c4      	movs	r1, #196	; 0xc4
 8004b4c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004b4e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004b50:	f000 fc96 	bl	8005480 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004b54:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004b58:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004b5a:	4798      	blx	r3
 8004b5c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004b62:	4798      	blx	r3
 8004b64:	1b40      	subs	r0, r0, r5
 8004b66:	2809      	cmp	r0, #9
 8004b68:	d9f9      	bls.n	8004b5e <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4abf      	ldr	r2, [pc, #764]	; (8004e6c <OTM8009A_Init+0x3b4>)
 8004b6e:	4638      	mov	r0, r7
 8004b70:	4619      	mov	r1, r3
 8004b72:	f000 fc85 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004b76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004b78:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004b7a:	4abd      	ldr	r2, [pc, #756]	; (8004e70 <OTM8009A_Init+0x3b8>)
 8004b7c:	21c5      	movs	r1, #197	; 0xc5
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f000 fc7e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004b84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004b86:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004b88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4ab9      	ldr	r2, [pc, #740]	; (8004e74 <OTM8009A_Init+0x3bc>)
 8004b8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004b90:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004b92:	f000 fc75 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004b98:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b9a:	4ab7      	ldr	r2, [pc, #732]	; (8004e78 <OTM8009A_Init+0x3c0>)
 8004b9c:	21c5      	movs	r1, #197	; 0xc5
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f000 fc6e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ba4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ba6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ba8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004baa:	4619      	mov	r1, r3
 8004bac:	4ab3      	ldr	r2, [pc, #716]	; (8004e7c <OTM8009A_Init+0x3c4>)
 8004bae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004bb0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004bb2:	f000 fc65 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004bb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004bb8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004bba:	4ab1      	ldr	r2, [pc, #708]	; (8004e80 <OTM8009A_Init+0x3c8>)
 8004bbc:	21c0      	movs	r1, #192	; 0xc0
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f000 fc5e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004bc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004bc8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4aa0      	ldr	r2, [pc, #640]	; (8004e50 <OTM8009A_Init+0x398>)
 8004bce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004bd0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bd2:	f000 fc55 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004bd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bd8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004bda:	4aaa      	ldr	r2, [pc, #680]	; (8004e84 <OTM8009A_Init+0x3cc>)
 8004bdc:	21d9      	movs	r1, #217	; 0xd9
 8004bde:	4638      	mov	r0, r7
 8004be0:	f000 fc4e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004be4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004be6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004be8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004bea:	4619      	mov	r1, r3
 8004bec:	4aa6      	ldr	r2, [pc, #664]	; (8004e88 <OTM8009A_Init+0x3d0>)
 8004bee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004bf0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004bf2:	f000 fc45 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004bf8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004bfa:	4aa4      	ldr	r2, [pc, #656]	; (8004e8c <OTM8009A_Init+0x3d4>)
 8004bfc:	21c1      	movs	r1, #193	; 0xc1
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f000 fc3e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4aa0      	ldr	r2, [pc, #640]	; (8004e90 <OTM8009A_Init+0x3d8>)
 8004c0e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004c10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c12:	f000 fc35 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c18:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c1a:	4a9e      	ldr	r2, [pc, #632]	; (8004e94 <OTM8009A_Init+0x3dc>)
 8004c1c:	21c1      	movs	r1, #193	; 0xc1
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f000 fc2e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c26:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4a9a      	ldr	r2, [pc, #616]	; (8004e98 <OTM8009A_Init+0x3e0>)
 8004c2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004c30:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c32:	f000 fc25 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004c36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004c3a:	4a98      	ldr	r2, [pc, #608]	; (8004e9c <OTM8009A_Init+0x3e4>)
 8004c3c:	21c5      	movs	r1, #197	; 0xc5
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f000 fc1e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004c44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004c46:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004c48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4a94      	ldr	r2, [pc, #592]	; (8004ea0 <OTM8009A_Init+0x3e8>)
 8004c4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004c50:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004c52:	f000 fc15 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004c58:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c5a:	4a87      	ldr	r2, [pc, #540]	; (8004e78 <OTM8009A_Init+0x3c0>)
 8004c5c:	21c5      	movs	r1, #197	; 0xc5
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f000 fc0e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004c66:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4a78      	ldr	r2, [pc, #480]	; (8004e50 <OTM8009A_Init+0x398>)
 8004c6e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c70:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c72:	f000 fc05 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004c76:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c78:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004c7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ea4 <OTM8009A_Init+0x3ec>)
 8004c7c:	21d8      	movs	r1, #216	; 0xd8
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f000 fbfe 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004c84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c86:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004c88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4a86      	ldr	r2, [pc, #536]	; (8004ea8 <OTM8009A_Init+0x3f0>)
 8004c8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004c90:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004c92:	f000 fbf5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004c96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004c98:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004c9a:	4a84      	ldr	r2, [pc, #528]	; (8004eac <OTM8009A_Init+0x3f4>)
 8004c9c:	21c5      	movs	r1, #197	; 0xc5
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f000 fbee 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ca4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ca6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004ca8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004caa:	4619      	mov	r1, r3
 8004cac:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <OTM8009A_Init+0x3f8>)
 8004cae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004cb0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004cb2:	f000 fbe5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004cb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004cb8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004cba:	4a7e      	ldr	r2, [pc, #504]	; (8004eb4 <OTM8009A_Init+0x3fc>)
 8004cbc:	21c0      	movs	r1, #192	; 0xc0
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f000 fbde 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004cc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004cc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004cc8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4a7a      	ldr	r2, [pc, #488]	; (8004eb8 <OTM8009A_Init+0x400>)
 8004cce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004cd0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004cd2:	f000 fbd5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004cd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004cd8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004cda:	4a78      	ldr	r2, [pc, #480]	; (8004ebc <OTM8009A_Init+0x404>)
 8004cdc:	21c5      	movs	r1, #197	; 0xc5
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f000 fbce 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ce4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ce6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ce8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004cea:	4619      	mov	r1, r3
 8004cec:	4a66      	ldr	r2, [pc, #408]	; (8004e88 <OTM8009A_Init+0x3d0>)
 8004cee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004cf0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004cf2:	f000 fbc5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004cf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004cf8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004cfa:	4a71      	ldr	r2, [pc, #452]	; (8004ec0 <OTM8009A_Init+0x408>)
 8004cfc:	21c4      	movs	r1, #196	; 0xc4
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 fbbe 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4a60      	ldr	r2, [pc, #384]	; (8004e90 <OTM8009A_Init+0x3d8>)
 8004d0e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004d10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d12:	f000 fbb5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d18:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d1a:	4a6a      	ldr	r2, [pc, #424]	; (8004ec4 <OTM8009A_Init+0x40c>)
 8004d1c:	21c1      	movs	r1, #193	; 0xc1
 8004d1e:	4638      	mov	r0, r7
 8004d20:	f000 fbae 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d26:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4a66      	ldr	r2, [pc, #408]	; (8004ec8 <OTM8009A_Init+0x410>)
 8004d2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004d30:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d32:	f000 fba5 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004d36:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004d3a:	4a64      	ldr	r2, [pc, #400]	; (8004ecc <OTM8009A_Init+0x414>)
 8004d3c:	21b3      	movs	r1, #179	; 0xb3
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f000 fb9e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004d46:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004d48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4a42      	ldr	r2, [pc, #264]	; (8004e58 <OTM8009A_Init+0x3a0>)
 8004d4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004d50:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d52:	f000 fb95 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004d56:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d58:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <OTM8009A_Init+0x418>)
 8004d5c:	21ce      	movs	r1, #206	; 0xce
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f000 fb8e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d66:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004d68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4a59      	ldr	r2, [pc, #356]	; (8004ed4 <OTM8009A_Init+0x41c>)
 8004d6e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004d70:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d72:	f000 fb85 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004d76:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d78:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004d7a:	4a57      	ldr	r2, [pc, #348]	; (8004ed8 <OTM8009A_Init+0x420>)
 8004d7c:	21ce      	movs	r1, #206	; 0xce
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f000 fb7e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d86:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004d88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4a53      	ldr	r2, [pc, #332]	; (8004edc <OTM8009A_Init+0x424>)
 8004d8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004d90:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d92:	f000 fb75 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004d96:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d98:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004d9a:	4a51      	ldr	r2, [pc, #324]	; (8004ee0 <OTM8009A_Init+0x428>)
 8004d9c:	21ce      	movs	r1, #206	; 0xce
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f000 fb6e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004da4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004da6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004da8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004daa:	4619      	mov	r1, r3
 8004dac:	4a4d      	ldr	r2, [pc, #308]	; (8004ee4 <OTM8009A_Init+0x42c>)
 8004dae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004db0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004db2:	f000 fb65 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004db6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004db8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004dba:	4a4b      	ldr	r2, [pc, #300]	; (8004ee8 <OTM8009A_Init+0x430>)
 8004dbc:	21cf      	movs	r1, #207	; 0xcf
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f000 fb5e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004dc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004dc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004dc8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4a47      	ldr	r2, [pc, #284]	; (8004eec <OTM8009A_Init+0x434>)
 8004dce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004dd0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004dd2:	f000 fb55 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004dd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004dd8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004dda:	4a45      	ldr	r2, [pc, #276]	; (8004ef0 <OTM8009A_Init+0x438>)
 8004ddc:	21cf      	movs	r1, #207	; 0xcf
 8004dde:	4638      	mov	r0, r7
 8004de0:	f000 fb4e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004de4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004de6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004de8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dea:	4619      	mov	r1, r3
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <OTM8009A_Init+0x3a0>)
 8004dee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004df0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df2:	f000 fb45 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004df6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004dfa:	4a3e      	ldr	r2, [pc, #248]	; (8004ef4 <OTM8009A_Init+0x43c>)
 8004dfc:	21cb      	movs	r1, #203	; 0xcb
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f000 fb3e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4a3a      	ldr	r2, [pc, #232]	; (8004ef8 <OTM8009A_Init+0x440>)
 8004e0e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e12:	f000 fb35 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e16:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e18:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e1a:	4a38      	ldr	r2, [pc, #224]	; (8004efc <OTM8009A_Init+0x444>)
 8004e1c:	21cb      	movs	r1, #203	; 0xcb
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f000 fb2e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e26:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <OTM8009A_Init+0x41c>)
 8004e2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e30:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e32:	f000 fb25 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004e36:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004e3a:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <OTM8009A_Init+0x448>)
 8004e3c:	21cb      	movs	r1, #203	; 0xcb
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f000 fb1e 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e46:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004e48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	e05a      	b.n	8004f04 <OTM8009A_Init+0x44c>
 8004e4e:	bf00      	nop
 8004e50:	080126f5 	.word	0x080126f5
 8004e54:	080125c4 	.word	0x080125c4
 8004e58:	080126f6 	.word	0x080126f6
 8004e5c:	08012650 	.word	0x08012650
 8004e60:	080126f7 	.word	0x080126f7
 8004e64:	080126f8 	.word	0x080126f8
 8004e68:	080126f9 	.word	0x080126f9
 8004e6c:	080126fa 	.word	0x080126fa
 8004e70:	080126fb 	.word	0x080126fb
 8004e74:	080126fc 	.word	0x080126fc
 8004e78:	080126fd 	.word	0x080126fd
 8004e7c:	080126fe 	.word	0x080126fe
 8004e80:	080126ff 	.word	0x080126ff
 8004e84:	08012700 	.word	0x08012700
 8004e88:	08012701 	.word	0x08012701
 8004e8c:	08012702 	.word	0x08012702
 8004e90:	08012703 	.word	0x08012703
 8004e94:	08012704 	.word	0x08012704
 8004e98:	08012705 	.word	0x08012705
 8004e9c:	08012706 	.word	0x08012706
 8004ea0:	08012707 	.word	0x08012707
 8004ea4:	080126c4 	.word	0x080126c4
 8004ea8:	08012708 	.word	0x08012708
 8004eac:	08012709 	.word	0x08012709
 8004eb0:	0801270a 	.word	0x0801270a
 8004eb4:	0801270b 	.word	0x0801270b
 8004eb8:	0801270c 	.word	0x0801270c
 8004ebc:	0801270d 	.word	0x0801270d
 8004ec0:	0801270e 	.word	0x0801270e
 8004ec4:	0801270f 	.word	0x0801270f
 8004ec8:	08012710 	.word	0x08012710
 8004ecc:	080126c8 	.word	0x080126c8
 8004ed0:	080126cc 	.word	0x080126cc
 8004ed4:	08012711 	.word	0x08012711
 8004ed8:	080126d4 	.word	0x080126d4
 8004edc:	08012712 	.word	0x08012712
 8004ee0:	080126e4 	.word	0x080126e4
 8004ee4:	08012713 	.word	0x08012713
 8004ee8:	080125c8 	.word	0x080125c8
 8004eec:	08012714 	.word	0x08012714
 8004ef0:	08012721 	.word	0x08012721
 8004ef4:	080125d4 	.word	0x080125d4
 8004ef8:	08012715 	.word	0x08012715
 8004efc:	080125e0 	.word	0x080125e0
 8004f00:	080125f0 	.word	0x080125f0
 8004f04:	4ad1      	ldr	r2, [pc, #836]	; (800524c <OTM8009A_Init+0x794>)
 8004f06:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f08:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f0a:	f000 fab9 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f0e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f10:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f12:	4acf      	ldr	r2, [pc, #828]	; (8005250 <OTM8009A_Init+0x798>)
 8004f14:	21cb      	movs	r1, #203	; 0xcb
 8004f16:	4638      	mov	r0, r7
 8004f18:	f000 fab2 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f1e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f20:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f22:	4619      	mov	r1, r3
 8004f24:	4acb      	ldr	r2, [pc, #812]	; (8005254 <OTM8009A_Init+0x79c>)
 8004f26:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f28:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f2a:	f000 faa9 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f2e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f30:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f32:	4ac9      	ldr	r2, [pc, #804]	; (8005258 <OTM8009A_Init+0x7a0>)
 8004f34:	21cb      	movs	r1, #203	; 0xcb
 8004f36:	4638      	mov	r0, r7
 8004f38:	f000 faa2 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f3e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f40:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f42:	4619      	mov	r1, r3
 8004f44:	4ac5      	ldr	r2, [pc, #788]	; (800525c <OTM8009A_Init+0x7a4>)
 8004f46:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f48:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f4a:	f000 fa99 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f4e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f50:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f52:	4ac3      	ldr	r2, [pc, #780]	; (8005260 <OTM8009A_Init+0x7a8>)
 8004f54:	21cb      	movs	r1, #203	; 0xcb
 8004f56:	4638      	mov	r0, r7
 8004f58:	f000 fa92 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f5e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f62:	4619      	mov	r1, r3
 8004f64:	4abf      	ldr	r2, [pc, #764]	; (8005264 <OTM8009A_Init+0x7ac>)
 8004f66:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f68:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f6a:	f000 fa89 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f6e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f70:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f72:	4abd      	ldr	r2, [pc, #756]	; (8005268 <OTM8009A_Init+0x7b0>)
 8004f74:	21cb      	movs	r1, #203	; 0xcb
 8004f76:	4638      	mov	r0, r7
 8004f78:	f000 fa82 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f7e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f82:	4619      	mov	r1, r3
 8004f84:	4ab9      	ldr	r2, [pc, #740]	; (800526c <OTM8009A_Init+0x7b4>)
 8004f86:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f88:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f8a:	f000 fa79 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004f8e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f90:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004f92:	4ab7      	ldr	r2, [pc, #732]	; (8005270 <OTM8009A_Init+0x7b8>)
 8004f94:	21cb      	movs	r1, #203	; 0xcb
 8004f96:	4638      	mov	r0, r7
 8004f98:	f000 fa72 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f9e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fa0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4ab3      	ldr	r2, [pc, #716]	; (8005274 <OTM8009A_Init+0x7bc>)
 8004fa6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fa8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004faa:	f000 fa69 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004fae:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fb0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004fb2:	4ab1      	ldr	r2, [pc, #708]	; (8005278 <OTM8009A_Init+0x7c0>)
 8004fb4:	21cc      	movs	r1, #204	; 0xcc
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f000 fa62 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fbc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fbe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004fc0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4aad      	ldr	r2, [pc, #692]	; (800527c <OTM8009A_Init+0x7c4>)
 8004fc6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004fc8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fca:	f000 fa59 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004fce:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fd0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004fd2:	4aab      	ldr	r2, [pc, #684]	; (8005280 <OTM8009A_Init+0x7c8>)
 8004fd4:	21cc      	movs	r1, #204	; 0xcc
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f000 fa52 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fde:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004fe0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4aa7      	ldr	r2, [pc, #668]	; (8005284 <OTM8009A_Init+0x7cc>)
 8004fe6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004fe8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fea:	f000 fa49 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004fee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ff0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004ff2:	4aa5      	ldr	r2, [pc, #660]	; (8005288 <OTM8009A_Init+0x7d0>)
 8004ff4:	21cc      	movs	r1, #204	; 0xcc
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f000 fa42 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ffc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ffe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005000:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005002:	4619      	mov	r1, r3
 8005004:	4a91      	ldr	r2, [pc, #580]	; (800524c <OTM8009A_Init+0x794>)
 8005006:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005008:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800500a:	f000 fa39 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800500e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005010:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005012:	4a9e      	ldr	r2, [pc, #632]	; (800528c <OTM8009A_Init+0x7d4>)
 8005014:	21cc      	movs	r1, #204	; 0xcc
 8005016:	4638      	mov	r0, r7
 8005018:	f000 fa32 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800501c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800501e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005020:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005022:	4619      	mov	r1, r3
 8005024:	4a8b      	ldr	r2, [pc, #556]	; (8005254 <OTM8009A_Init+0x79c>)
 8005026:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005028:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800502a:	f000 fa29 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800502e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005030:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005032:	4a97      	ldr	r2, [pc, #604]	; (8005290 <OTM8009A_Init+0x7d8>)
 8005034:	21cc      	movs	r1, #204	; 0xcc
 8005036:	4638      	mov	r0, r7
 8005038:	f000 fa22 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800503c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800503e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005040:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005042:	4619      	mov	r1, r3
 8005044:	4a85      	ldr	r2, [pc, #532]	; (800525c <OTM8009A_Init+0x7a4>)
 8005046:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005048:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800504a:	f000 fa19 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800504e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005050:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005052:	4a90      	ldr	r2, [pc, #576]	; (8005294 <OTM8009A_Init+0x7dc>)
 8005054:	21cc      	movs	r1, #204	; 0xcc
 8005056:	4638      	mov	r0, r7
 8005058:	f000 fa12 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800505c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800505e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005060:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005062:	4619      	mov	r1, r3
 8005064:	4a8c      	ldr	r2, [pc, #560]	; (8005298 <OTM8009A_Init+0x7e0>)
 8005066:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005068:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800506a:	f000 fa09 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800506e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005070:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005072:	4a8a      	ldr	r2, [pc, #552]	; (800529c <OTM8009A_Init+0x7e4>)
 8005074:	21c5      	movs	r1, #197	; 0xc5
 8005076:	4638      	mov	r0, r7
 8005078:	f000 fa02 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800507c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800507e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005080:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005082:	4619      	mov	r1, r3
 8005084:	4a86      	ldr	r2, [pc, #536]	; (80052a0 <OTM8009A_Init+0x7e8>)
 8005086:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005088:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800508a:	f000 f9f9 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800508e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005090:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005092:	4a84      	ldr	r2, [pc, #528]	; (80052a4 <OTM8009A_Init+0x7ec>)
 8005094:	21f5      	movs	r1, #245	; 0xf5
 8005096:	4638      	mov	r0, r7
 8005098:	f000 f9f2 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800509c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800509e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050a0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80050a2:	4619      	mov	r1, r3
 80050a4:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <OTM8009A_Init+0x7f0>)
 80050a6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050a8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80050aa:	f000 f9e9 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80050ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80050b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80050b2:	4a7e      	ldr	r2, [pc, #504]	; (80052ac <OTM8009A_Init+0x7f4>)
 80050b4:	21c6      	movs	r1, #198	; 0xc6
 80050b6:	4638      	mov	r0, r7
 80050b8:	f000 f9e2 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80050be:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80050c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050c2:	4619      	mov	r1, r3
 80050c4:	4a7a      	ldr	r2, [pc, #488]	; (80052b0 <OTM8009A_Init+0x7f8>)
 80050c6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80050c8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050ca:	f000 f9d9 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80050ce:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80050d2:	4a78      	ldr	r2, [pc, #480]	; (80052b4 <OTM8009A_Init+0x7fc>)
 80050d4:	21ff      	movs	r1, #255	; 0xff
 80050d6:	4638      	mov	r0, r7
 80050d8:	f000 f9d2 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050de:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050e0:	4a73      	ldr	r2, [pc, #460]	; (80052b0 <OTM8009A_Init+0x7f8>)
 80050e2:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80050e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050e6:	4638      	mov	r0, r7
 80050e8:	f000 f9ca 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80050ee:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050f2:	4619      	mov	r1, r3
 80050f4:	4a6e      	ldr	r2, [pc, #440]	; (80052b0 <OTM8009A_Init+0x7f8>)
 80050f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050f8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80050fa:	f000 f9c1 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80050fe:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005100:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005102:	4a6d      	ldr	r2, [pc, #436]	; (80052b8 <OTM8009A_Init+0x800>)
 8005104:	21e1      	movs	r1, #225	; 0xe1
 8005106:	4638      	mov	r0, r7
 8005108:	f000 f9ba 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800510c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800510e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005110:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005112:	4619      	mov	r1, r3
 8005114:	4a66      	ldr	r2, [pc, #408]	; (80052b0 <OTM8009A_Init+0x7f8>)
 8005116:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005118:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800511a:	f000 f9b1 	bl	8005480 <otm8009a_write_reg>
 800511e:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005120:	2310      	movs	r3, #16
 8005122:	4a66      	ldr	r2, [pc, #408]	; (80052bc <OTM8009A_Init+0x804>)
 8005124:	21e2      	movs	r1, #226	; 0xe2
 8005126:	4638      	mov	r0, r7
 8005128:	f000 f9aa 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800512c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800512e:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005130:	2300      	movs	r3, #0
 8005132:	4a63      	ldr	r2, [pc, #396]	; (80052c0 <OTM8009A_Init+0x808>)
 8005134:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005136:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005138:	4638      	mov	r0, r7
 800513a:	f000 f9a1 	bl	8005480 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 800513e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005142:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8005144:	4798      	blx	r3
 8005146:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800514c:	4798      	blx	r3
 800514e:	1b40      	subs	r0, r0, r5
 8005150:	2877      	cmp	r0, #119	; 0x77
 8005152:	d9f9      	bls.n	8005148 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	d074      	beq.n	8005244 <OTM8009A_Init+0x78c>
 800515a:	f1b9 0f02 	cmp.w	r9, #2
 800515e:	d14f      	bne.n	8005200 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005160:	2300      	movs	r3, #0
 8005162:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005164:	213a      	movs	r1, #58	; 0x3a
 8005166:	4638      	mov	r0, r7
 8005168:	f000 f98a 	bl	8005480 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800516c:	4d56      	ldr	r5, [pc, #344]	; (80052c8 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800516e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005172:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005174:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005178:	d046      	beq.n	8005208 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800517a:	2300      	movs	r3, #0
 800517c:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800517e:	2300      	movs	r3, #0
 8005180:	4a52      	ldr	r2, [pc, #328]	; (80052cc <OTM8009A_Init+0x814>)
 8005182:	2151      	movs	r1, #81	; 0x51
 8005184:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005186:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005188:	f000 f97a 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800518e:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005192:	4653      	mov	r3, sl
 8005194:	2153      	movs	r1, #83	; 0x53
 8005196:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005198:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800519c:	f000 f970 	bl	8005480 <otm8009a_write_reg>
 80051a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80051a2:	4653      	mov	r3, sl
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <OTM8009A_Init+0x81c>)
 80051a6:	2155      	movs	r1, #85	; 0x55
 80051a8:	4638      	mov	r0, r7
 80051aa:	f000 f969 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80051ae:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80051b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80051b2:	4653      	mov	r3, sl
 80051b4:	4a48      	ldr	r2, [pc, #288]	; (80052d8 <OTM8009A_Init+0x820>)
 80051b6:	215e      	movs	r1, #94	; 0x5e
 80051b8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80051ba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80051bc:	f000 f960 	bl	8005480 <otm8009a_write_reg>
 80051c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80051c2:	4653      	mov	r3, sl
 80051c4:	4a45      	ldr	r2, [pc, #276]	; (80052dc <OTM8009A_Init+0x824>)
 80051c6:	2129      	movs	r1, #41	; 0x29
 80051c8:	4638      	mov	r0, r7
 80051ca:	f000 f959 	bl	8005480 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80051ce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80051d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d2:	4653      	mov	r3, sl
 80051d4:	4651      	mov	r1, sl
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <OTM8009A_Init+0x7f8>)
 80051d8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80051da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051dc:	f000 f950 	bl	8005480 <otm8009a_write_reg>
 80051e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80051e2:	4653      	mov	r3, sl
 80051e4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80051e8:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <OTM8009A_Init+0x828>)
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	f000 f948 	bl	8005480 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80051f0:	42c4      	cmn	r4, r0
}
 80051f2:	bf14      	ite	ne
 80051f4:	f04f 30ff 	movne.w	r0, #4294967295
 80051f8:	4650      	moveq	r0, sl
 80051fa:	b002      	add	sp, #8
 80051fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005200:	f1ba 0f01 	cmp.w	sl, #1
 8005204:	4d30      	ldr	r5, [pc, #192]	; (80052c8 <OTM8009A_Init+0x810>)
 8005206:	d1b8      	bne.n	800517a <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005208:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800520a:	2300      	movs	r3, #0
 800520c:	f10d 0207 	add.w	r2, sp, #7
 8005210:	2136      	movs	r1, #54	; 0x36
 8005212:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005214:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005218:	f000 f932 	bl	8005480 <otm8009a_write_reg>
 800521c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800521e:	2304      	movs	r3, #4
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <OTM8009A_Init+0x82c>)
 8005222:	212a      	movs	r1, #42	; 0x2a
 8005224:	4638      	mov	r0, r7
 8005226:	f000 f92b 	bl	8005480 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800522a:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800522c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800522e:	2304      	movs	r3, #4
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <OTM8009A_Init+0x830>)
 8005232:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005234:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005236:	4638      	mov	r0, r7
 8005238:	f000 f922 	bl	8005480 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800523c:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005240:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005242:	e79c      	b.n	800517e <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005244:	464b      	mov	r3, r9
 8005246:	4a29      	ldr	r2, [pc, #164]	; (80052ec <OTM8009A_Init+0x834>)
 8005248:	e78c      	b.n	8005164 <OTM8009A_Init+0x6ac>
 800524a:	bf00      	nop
 800524c:	08012712 	.word	0x08012712
 8005250:	08012600 	.word	0x08012600
 8005254:	08012713 	.word	0x08012713
 8005258:	0801260c 	.word	0x0801260c
 800525c:	08012714 	.word	0x08012714
 8005260:	0801261c 	.word	0x0801261c
 8005264:	08012716 	.word	0x08012716
 8005268:	0801262c 	.word	0x0801262c
 800526c:	08012717 	.word	0x08012717
 8005270:	08012638 	.word	0x08012638
 8005274:	080126f6 	.word	0x080126f6
 8005278:	08012644 	.word	0x08012644
 800527c:	08012715 	.word	0x08012715
 8005280:	08012654 	.word	0x08012654
 8005284:	08012711 	.word	0x08012711
 8005288:	08012664 	.word	0x08012664
 800528c:	08012674 	.word	0x08012674
 8005290:	08012680 	.word	0x08012680
 8005294:	08012690 	.word	0x08012690
 8005298:	08012701 	.word	0x08012701
 800529c:	08012722 	.word	0x08012722
 80052a0:	08012723 	.word	0x08012723
 80052a4:	08012724 	.word	0x08012724
 80052a8:	08012725 	.word	0x08012725
 80052ac:	08012726 	.word	0x08012726
 80052b0:	080126f5 	.word	0x080126f5
 80052b4:	080126a0 	.word	0x080126a0
 80052b8:	080126a4 	.word	0x080126a4
 80052bc:	080126b4 	.word	0x080126b4
 80052c0:	08012718 	.word	0x08012718
 80052c4:	08012719 	.word	0x08012719
 80052c8:	24001534 	.word	0x24001534
 80052cc:	0801271b 	.word	0x0801271b
 80052d0:	0801271c 	.word	0x0801271c
 80052d4:	0801271d 	.word	0x0801271d
 80052d8:	0801271e 	.word	0x0801271e
 80052dc:	0801271f 	.word	0x0801271f
 80052e0:	08012720 	.word	0x08012720
 80052e4:	080125bc 	.word	0x080125bc
 80052e8:	080125c0 	.word	0x080125c0
 80052ec:	0801271a 	.word	0x0801271a

080052f0 <OTM8009A_SetBrightness>:
{
 80052f0:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80052f2:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80052f6:	4e0b      	ldr	r6, [pc, #44]	; (8005324 <OTM8009A_SetBrightness+0x34>)
{
 80052f8:	b082      	sub	sp, #8
 80052fa:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80052fc:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8005300:	2300      	movs	r3, #0
 8005302:	f10d 0207 	add.w	r2, sp, #7
 8005306:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005308:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800530a:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800530c:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8005310:	f000 f8b6 	bl	8005480 <otm8009a_write_reg>
 8005314:	b918      	cbnz	r0, 800531e <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <OTM8009A_SetBrightness+0x38>)
 8005318:	609d      	str	r5, [r3, #8]
}
 800531a:	b002      	add	sp, #8
 800531c:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005322:	e7fa      	b.n	800531a <OTM8009A_SetBrightness+0x2a>
 8005324:	51eb851f 	.word	0x51eb851f
 8005328:	24001534 	.word	0x24001534

0800532c <OTM8009A_DisplayOn>:
{
 800532c:	b500      	push	{lr}
 800532e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005330:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8005332:	2129      	movs	r1, #41	; 0x29
 8005334:	3010      	adds	r0, #16
 8005336:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800533a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800533e:	f000 f89f 	bl	8005480 <otm8009a_write_reg>
 8005342:	3800      	subs	r0, #0
 8005344:	bf18      	it	ne
 8005346:	2001      	movne	r0, #1
}
 8005348:	4240      	negs	r0, r0
 800534a:	b003      	add	sp, #12
 800534c:	f85d fb04 	ldr.w	pc, [sp], #4

08005350 <OTM8009A_DisplayOff>:
{
 8005350:	b500      	push	{lr}
 8005352:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005354:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005356:	2128      	movs	r1, #40	; 0x28
 8005358:	3010      	adds	r0, #16
 800535a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800535e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005362:	f000 f88d 	bl	8005480 <otm8009a_write_reg>
 8005366:	3800      	subs	r0, #0
 8005368:	bf18      	it	ne
 800536a:	2001      	movne	r0, #1
}
 800536c:	4240      	negs	r0, r0
 800536e:	b003      	add	sp, #12
 8005370:	f85d fb04 	ldr.w	pc, [sp], #4

08005374 <OTM8009A_SetOrientation>:
{
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005376:	2360      	movs	r3, #96	; 0x60
{
 8005378:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800537a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800537c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800537e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8005382:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005386:	d83e      	bhi.n	8005406 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005388:	d020      	beq.n	80053cc <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800538a:	f100 0510 	add.w	r5, r0, #16
 800538e:	4633      	mov	r3, r6
 8005390:	f10d 0207 	add.w	r2, sp, #7
 8005394:	2136      	movs	r1, #54	; 0x36
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f872 	bl	8005480 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800539c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800539e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80053a0:	4a1a      	ldr	r2, [pc, #104]	; (800540c <OTM8009A_SetOrientation+0x98>)
 80053a2:	212a      	movs	r1, #42	; 0x2a
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f86b 	bl	8005480 <otm8009a_write_reg>
 80053aa:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80053ac:	2304      	movs	r3, #4
 80053ae:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80053b0:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80053b2:	4a17      	ldr	r2, [pc, #92]	; (8005410 <OTM8009A_SetOrientation+0x9c>)
 80053b4:	212b      	movs	r1, #43	; 0x2b
 80053b6:	f000 f863 	bl	8005480 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80053bc:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80053be:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 80053c0:	3800      	subs	r0, #0
 80053c2:	bf18      	it	ne
 80053c4:	2001      	movne	r0, #1
 80053c6:	4240      	negs	r0, r0
}
 80053c8:	b003      	add	sp, #12
 80053ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80053cc:	f100 0510 	add.w	r5, r0, #16
 80053d0:	4633      	mov	r3, r6
 80053d2:	460f      	mov	r7, r1
 80053d4:	f10d 0206 	add.w	r2, sp, #6
 80053d8:	2136      	movs	r1, #54	; 0x36
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f850 	bl	8005480 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80053e0:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80053e2:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80053e4:	4a09      	ldr	r2, [pc, #36]	; (800540c <OTM8009A_SetOrientation+0x98>)
 80053e6:	212a      	movs	r1, #42	; 0x2a
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f849 	bl	8005480 <otm8009a_write_reg>
 80053ee:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80053f0:	2304      	movs	r3, #4
 80053f2:	4628      	mov	r0, r5
 80053f4:	4a06      	ldr	r2, [pc, #24]	; (8005410 <OTM8009A_SetOrientation+0x9c>)
 80053f6:	212b      	movs	r1, #43	; 0x2b
 80053f8:	f000 f842 	bl	8005480 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80053fc:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005400:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005402:	601f      	str	r7, [r3, #0]
 8005404:	e7dc      	b.n	80053c0 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800540a:	e7dd      	b.n	80053c8 <OTM8009A_SetOrientation+0x54>
 800540c:	080125bc 	.word	0x080125bc
 8005410:	080125c0 	.word	0x080125c0
 8005414:	24001534 	.word	0x24001534

08005418 <OTM8009A_ReadID>:
{ 
 8005418:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800541a:	3010      	adds	r0, #16
 800541c:	21da      	movs	r1, #218	; 0xda
{ 
 800541e:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8005420:	2300      	movs	r3, #0
 8005422:	f000 f825 	bl	8005470 <otm8009a_read_reg>
 8005426:	3800      	subs	r0, #0
 8005428:	bf18      	it	ne
 800542a:	2001      	movne	r0, #1
}  
 800542c:	4240      	negs	r0, r0
 800542e:	bd08      	pop	{r3, pc}

08005430 <OTM8009A_DrawVLine>:
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop

08005438 <OTM8009A_GetPixel>:
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop

08005440 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005440:	b178      	cbz	r0, 8005462 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005442:	684a      	ldr	r2, [r1, #4]
 8005444:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8005446:	2000      	movs	r0, #0
{
 8005448:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800544a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800544e:	4906      	ldr	r1, [pc, #24]	; (8005468 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005450:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005452:	4a06      	ldr	r2, [pc, #24]	; (800546c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8005454:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005458:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 800545c:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800545e:	611a      	str	r2, [r3, #16]
}
 8005460:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005466:	4770      	bx	lr
 8005468:	08004a99 	.word	0x08004a99
 800546c:	08004aa9 	.word	0x08004aa9

08005470 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8005470:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005472:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005476:	46a4      	mov	ip, r4
}
 8005478:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800547c:	4760      	bx	ip
 800547e:	bf00      	nop

08005480 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005480:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005482:	6804      	ldr	r4, [r0, #0]
 8005484:	6880      	ldr	r0, [r0, #8]
 8005486:	46a4      	mov	ip, r4
}
 8005488:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800548c:	4760      	bx	ip
 800548e:	bf00      	nop

08005490 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8005490:	f000 be8e 	b.w	80061b0 <HAL_GetTick>

08005494 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005494:	b910      	cbnz	r0, 800549c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005496:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <BSP_LCD_SetActiveLayer+0x10>)
 8005498:	6099      	str	r1, [r3, #8]
 800549a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800549c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	24011938 	.word	0x24011938

080054a8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80054a8:	b918      	cbnz	r0, 80054b2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80054aa:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <BSP_LCD_GetPixelFormat+0x10>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80054b2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80054b6:	4770      	bx	lr
 80054b8:	24011938 	.word	0x24011938

080054bc <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80054bc:	b948      	cbnz	r0, 80054d2 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <BSP_LCD_GetXSize+0x1c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	b11b      	cbz	r3, 80054ce <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <BSP_LCD_GetXSize+0x20>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	600b      	str	r3, [r1, #0]
 80054cc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80054ce:	4618      	mov	r0, r3
  }

  return ret;
}
 80054d0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80054d2:	f06f 0001 	mvn.w	r0, #1
 80054d6:	4770      	bx	lr
 80054d8:	24001544 	.word	0x24001544
 80054dc:	24011938 	.word	0x24011938

080054e0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80054e0:	b948      	cbnz	r0, 80054f6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <BSP_LCD_GetYSize+0x1c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e8:	b11b      	cbz	r3, 80054f2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <BSP_LCD_GetYSize+0x20>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	600b      	str	r3, [r1, #0]
 80054f0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80054f2:	4618      	mov	r0, r3
  }

  return ret;
}
 80054f4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80054f6:	f06f 0001 	mvn.w	r0, #1
 80054fa:	4770      	bx	lr
 80054fc:	24001544 	.word	0x24001544
 8005500:	24011938 	.word	0x24011938

08005504 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005508:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800550c:	b39c      	cbz	r4, 8005576 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800550e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005512:	4d1a      	ldr	r5, [pc, #104]	; (800557c <BSP_LCD_FillRGBRect+0x78>)
 8005514:	eb04 0802 	add.w	r8, r4, r2
 8005518:	eb0b 0e01 	add.w	lr, fp, r1
 800551c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8005520:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005580 <BSP_LCD_FillRGBRect+0x7c>
 8005524:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8005526:	f1bb 0f00 	cmp.w	fp, #0
 800552a:	d021      	beq.n	8005570 <BSP_LCD_FillRGBRect+0x6c>
 800552c:	460c      	mov	r4, r1
 800552e:	e00a      	b.n	8005546 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005530:	682e      	ldr	r6, [r5, #0]
 8005532:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005534:	fb06 4602 	mla	r6, r6, r2, r4
 8005538:	3401      	adds	r4, #1
 800553a:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 800553e:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8005540:	6928      	ldr	r0, [r5, #16]
 8005542:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8005544:	d014      	beq.n	8005570 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005546:	68a8      	ldr	r0, [r5, #8]
 8005548:	f8d3 9000 	ldr.w	r9, [r3]
 800554c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005550:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005554:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8005556:	2e00      	cmp	r6, #0
 8005558:	d0ea      	beq.n	8005530 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800555a:	682e      	ldr	r6, [r5, #0]
 800555c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800555e:	fb06 4602 	mla	r6, r6, r2, r4
 8005562:	3401      	adds	r4, #1
 8005564:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8005568:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 800556a:	6928      	ldr	r0, [r5, #16]
 800556c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800556e:	d1ea      	bne.n	8005546 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8005570:	3201      	adds	r2, #1
 8005572:	4542      	cmp	r2, r8
 8005574:	d1d7      	bne.n	8005526 <BSP_LCD_FillRGBRect+0x22>
}
 8005576:	2000      	movs	r0, #0
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	24011938 	.word	0x24011938
 8005580:	24011890 	.word	0x24011890

08005584 <BSP_LCD_ReadPixel>:
{
 8005584:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005586:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800558a:	4e10      	ldr	r6, [pc, #64]	; (80055cc <BSP_LCD_ReadPixel+0x48>)
 800558c:	4f10      	ldr	r7, [pc, #64]	; (80055d0 <BSP_LCD_ReadPixel+0x4c>)
 800558e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005592:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005596:	0080      	lsls	r0, r0, #2
 8005598:	68ac      	ldr	r4, [r5, #8]
 800559a:	fb0c 7404 	mla	r4, ip, r4, r7
 800559e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80055a0:	b94d      	cbnz	r5, 80055b6 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80055a2:	5830      	ldr	r0, [r6, r0]
 80055a4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80055a6:	fb00 1202 	mla	r2, r0, r2, r1
}
 80055aa:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80055ac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 80055b0:	bcf0      	pop	{r4, r5, r6, r7}
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80055b6:	5835      	ldr	r5, [r6, r0]
 80055b8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80055ba:	fb05 1202 	mla	r2, r5, r2, r1
 80055be:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 80055c2:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80055c4:	b292      	uxth	r2, r2
}
 80055c6:	bcf0      	pop	{r4, r5, r6, r7}
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	4770      	bx	lr
 80055cc:	24011938 	.word	0x24011938
 80055d0:	24011890 	.word	0x24011890

080055d4 <BSP_LCD_WritePixel>:
{
 80055d4:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80055da:	4e0f      	ldr	r6, [pc, #60]	; (8005618 <BSP_LCD_WritePixel+0x44>)
 80055dc:	4f0f      	ldr	r7, [pc, #60]	; (800561c <BSP_LCD_WritePixel+0x48>)
 80055de:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80055e2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80055e6:	0080      	lsls	r0, r0, #2
 80055e8:	68ac      	ldr	r4, [r5, #8]
 80055ea:	fb0c 7404 	mla	r4, ip, r4, r7
 80055ee:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80055f0:	b945      	cbnz	r5, 8005604 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055f2:	5830      	ldr	r0, [r6, r0]
 80055f4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80055f6:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80055fa:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80055fc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8005600:	bcf0      	pop	{r4, r5, r6, r7}
 8005602:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005604:	5835      	ldr	r5, [r6, r0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800560a:	fb05 1202 	mla	r2, r5, r2, r1
}
 800560e:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005610:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8005614:	2000      	movs	r0, #0
 8005616:	4770      	bx	lr
 8005618:	24011938 	.word	0x24011938
 800561c:	24011890 	.word	0x24011890

08005620 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8005620:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005622:	2406      	movs	r4, #6
{
 8005624:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005626:	9101      	str	r1, [sp, #4]
 8005628:	4601      	mov	r1, r0
 800562a:	9202      	str	r2, [sp, #8]
 800562c:	9400      	str	r4, [sp, #0]
 800562e:	4805      	ldr	r0, [pc, #20]	; (8005644 <DSI_IO_Read+0x24>)
 8005630:	f002 f990 	bl	8007954 <HAL_DSI_Read>
 8005634:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8005636:	bf14      	ite	ne
 8005638:	f06f 0007 	mvnne.w	r0, #7
 800563c:	2000      	moveq	r0, #0
 800563e:	b004      	add	sp, #16
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	24011954 	.word	0x24011954

08005648 <BSP_LCD_DrawBitmap>:
{
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800564c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005650:	4e4f      	ldr	r6, [pc, #316]	; (8005790 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005652:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005654:	f04f 0934 	mov.w	r9, #52	; 0x34
 8005658:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800565c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8005660:	f8df e138 	ldr.w	lr, [pc, #312]	; 800579c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005664:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005666:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800566a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800566e:	68b9      	ldr	r1, [r7, #8]
{
 8005670:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005672:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005674:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005678:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800567c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005680:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005684:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005686:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800568a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800568e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005692:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005694:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005698:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800569c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056a0:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80056a2:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056a6:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80056aa:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056ae:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80056b0:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 80056b4:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80056b6:	4465      	add	r5, ip
 80056b8:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80056ba:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056bc:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80056be:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 80056c2:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80056c6:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056c8:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 80056cc:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80056ce:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80056d2:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80056d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 80056d8:	d957      	bls.n	800578a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 80056da:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 80056de:	2c08      	cmp	r4, #8
 80056e0:	bf34      	ite	cc
 80056e2:	f04f 0b02 	movcc.w	fp, #2
 80056e6:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80056ea:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80056ee:	9c03      	ldr	r4, [sp, #12]
 80056f0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80056f4:	fb04 f909 	mul.w	r9, r4, r9
 80056f8:	fb09 1505 	mla	r5, r9, r5, r1
 80056fc:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	d03e      	beq.n	8005782 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005704:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8005706:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800570a:	2700      	movs	r7, #0
 800570c:	4c21      	ldr	r4, [pc, #132]	; (8005794 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800570e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005712:	e006      	b.n	8005722 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005714:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8005716:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005718:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800571a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800571c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8005720:	d02f      	beq.n	8005782 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005722:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8005724:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005726:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800572a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800572e:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8005730:	4919      	ldr	r1, [pc, #100]	; (8005798 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8005732:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8005736:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800573a:	bf18      	it	ne
 800573c:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800573e:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005740:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005742:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005746:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800574a:	4812      	ldr	r0, [pc, #72]	; (8005794 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800574c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005750:	f001 fc34 	bl	8006fbc <HAL_DMA2D_Init>
 8005754:	2800      	cmp	r0, #0
 8005756:	d1dd      	bne.n	8005714 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005758:	2101      	movs	r1, #1
 800575a:	480e      	ldr	r0, [pc, #56]	; (8005794 <BSP_LCD_DrawBitmap+0x14c>)
 800575c:	f001 fd50 	bl	8007200 <HAL_DMA2D_ConfigLayer>
 8005760:	2800      	cmp	r0, #0
 8005762:	d1d7      	bne.n	8005714 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005764:	2001      	movs	r0, #1
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	4642      	mov	r2, r8
 800576a:	4629      	mov	r1, r5
 800576c:	9000      	str	r0, [sp, #0]
 800576e:	4809      	ldr	r0, [pc, #36]	; (8005794 <BSP_LCD_DrawBitmap+0x14c>)
 8005770:	f001 fc66 	bl	8007040 <HAL_DMA2D_Start>
 8005774:	2800      	cmp	r0, #0
 8005776:	d1cd      	bne.n	8005714 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005778:	2132      	movs	r1, #50	; 0x32
 800577a:	4806      	ldr	r0, [pc, #24]	; (8005794 <BSP_LCD_DrawBitmap+0x14c>)
 800577c:	f001 fcba 	bl	80070f4 <HAL_DMA2D_PollForTransfer>
 8005780:	e7c8      	b.n	8005714 <BSP_LCD_DrawBitmap+0xcc>
}
 8005782:	2000      	movs	r0, #0
 8005784:	b005      	add	sp, #20
 8005786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800578a:	f04f 0b00 	mov.w	fp, #0
 800578e:	e7ac      	b.n	80056ea <BSP_LCD_DrawBitmap+0xa2>
 8005790:	24011938 	.word	0x24011938
 8005794:	24011970 	.word	0x24011970
 8005798:	52001000 	.word	0x52001000
 800579c:	24011890 	.word	0x24011890

080057a0 <LL_FillBuffer>:
{
 80057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80057a8:	4c28      	ldr	r4, [pc, #160]	; (800584c <LL_FillBuffer+0xac>)
{
 80057aa:	4617      	mov	r7, r2
 80057ac:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057ae:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 80057b2:	4698      	mov	r8, r3
 80057b4:	460e      	mov	r6, r1
 80057b6:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057b8:	68c2      	ldr	r2, [r0, #12]
{
 80057ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 80057bc:	2a02      	cmp	r2, #2
 80057be:	d00f      	beq.n	80057e0 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80057c0:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80057c2:	4c23      	ldr	r4, [pc, #140]	; (8005850 <LL_FillBuffer+0xb0>)
 80057c4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 80057c8:	4922      	ldr	r1, [pc, #136]	; (8005854 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80057ca:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80057cc:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80057ce:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 80057d0:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80057d4:	f001 fbf2 	bl	8006fbc <HAL_DMA2D_Init>
 80057d8:	b308      	cbz	r0, 800581e <LL_FillBuffer+0x7e>
}
 80057da:	b002      	add	sp, #8
 80057dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 80057e0:	f3c5 1045 	ubfx	r0, r5, #5, #6
 80057e4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 80057e8:	f005 041f 	and.w	r4, r5, #31
 80057ec:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 80057f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80057f4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80057f8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80057fc:	3521      	adds	r5, #33	; 0x21
 80057fe:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8005802:	3117      	adds	r1, #23
 8005804:	09ad      	lsrs	r5, r5, #6
 8005806:	0989      	lsrs	r1, r1, #6
 8005808:	022d      	lsls	r5, r5, #8
 800580a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800580e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005812:	3017      	adds	r0, #23
 8005814:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005818:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800581c:	e7d1      	b.n	80057c2 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800581e:	2101      	movs	r1, #1
 8005820:	4620      	mov	r0, r4
 8005822:	f001 fced 	bl	8007200 <HAL_DMA2D_ConfigLayer>
 8005826:	2800      	cmp	r0, #0
 8005828:	d1d7      	bne.n	80057da <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800582a:	463b      	mov	r3, r7
 800582c:	4632      	mov	r2, r6
 800582e:	4629      	mov	r1, r5
 8005830:	4620      	mov	r0, r4
 8005832:	f8cd 8000 	str.w	r8, [sp]
 8005836:	f001 fc03 	bl	8007040 <HAL_DMA2D_Start>
 800583a:	2800      	cmp	r0, #0
 800583c:	d1cd      	bne.n	80057da <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800583e:	4620      	mov	r0, r4
 8005840:	2119      	movs	r1, #25
}
 8005842:	b002      	add	sp, #8
 8005844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005848:	f001 bc54 	b.w	80070f4 <HAL_DMA2D_PollForTransfer>
 800584c:	24011938 	.word	0x24011938
 8005850:	24011970 	.word	0x24011970
 8005854:	52001000 	.word	0x52001000

08005858 <BSP_LCD_DrawHLine>:
{
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800585c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005860:	4f12      	ldr	r7, [pc, #72]	; (80058ac <BSP_LCD_DrawHLine+0x54>)
{
 8005862:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005864:	f8df e048 	ldr.w	lr, [pc, #72]	; 80058b0 <BSP_LCD_DrawHLine+0x58>
 8005868:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 800586c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005870:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005874:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005878:	688d      	ldr	r5, [r1, #8]
{
 800587a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800587c:	690e      	ldr	r6, [r1, #16]
 800587e:	fb02 4207 	mla	r2, r2, r7, r4
 8005882:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005886:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005888:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800588a:	bf38      	it	cc
 800588c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800588e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005890:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005894:	9a08      	ldr	r2, [sp, #32]
 8005896:	9400      	str	r4, [sp, #0]
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	461a      	mov	r2, r3
 800589c:	2301      	movs	r3, #1
 800589e:	f7ff ff7f 	bl	80057a0 <LL_FillBuffer>
}
 80058a2:	4620      	mov	r0, r4
 80058a4:	b002      	add	sp, #8
 80058a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058aa:	bf00      	nop
 80058ac:	24011938 	.word	0x24011938
 80058b0:	24011890 	.word	0x24011890

080058b4 <BSP_LCD_DrawVLine>:
{
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80058b8:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80058bc:	4c11      	ldr	r4, [pc, #68]	; (8005904 <BSP_LCD_DrawVLine+0x50>)
 80058be:	4d12      	ldr	r5, [pc, #72]	; (8005908 <BSP_LCD_DrawVLine+0x54>)
 80058c0:	f04f 0834 	mov.w	r8, #52	; 0x34
 80058c4:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 80058c8:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80058cc:	eb02 0c03 	add.w	ip, r2, r3
{
 80058d0:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80058d2:	68be      	ldr	r6, [r7, #8]
 80058d4:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80058d8:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80058da:	fb08 5606 	mla	r6, r8, r6, r5
 80058de:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80058e0:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80058e2:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80058e4:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80058e6:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80058ea:	bf88      	it	hi
 80058ec:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80058ee:	9a08      	ldr	r2, [sp, #32]
 80058f0:	e9cd 4200 	strd	r4, r2, [sp]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f7ff ff53 	bl	80057a0 <LL_FillBuffer>
}
 80058fa:	2000      	movs	r0, #0
 80058fc:	b002      	add	sp, #8
 80058fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005902:	bf00      	nop
 8005904:	24011938 	.word	0x24011938
 8005908:	24011890 	.word	0x24011890

0800590c <BSP_LCD_FillRect>:
{
 800590c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800590e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005912:	4f0e      	ldr	r7, [pc, #56]	; (800594c <BSP_LCD_FillRect+0x40>)
 8005914:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005918:	4d0d      	ldr	r5, [pc, #52]	; (8005950 <BSP_LCD_FillRect+0x44>)
 800591a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800591e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8005922:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005924:	68b7      	ldr	r7, [r6, #8]
 8005926:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800592a:	1ae4      	subs	r4, r4, r3
 800592c:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800592e:	fb0e 5507 	mla	r5, lr, r7, r5
 8005932:	6937      	ldr	r7, [r6, #16]
{
 8005934:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005936:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005938:	9400      	str	r4, [sp, #0]
 800593a:	fb07 3101 	mla	r1, r7, r1, r3
 800593e:	9b08      	ldr	r3, [sp, #32]
 8005940:	9601      	str	r6, [sp, #4]
 8005942:	f7ff ff2d 	bl	80057a0 <LL_FillBuffer>
}
 8005946:	2000      	movs	r0, #0
 8005948:	b003      	add	sp, #12
 800594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594c:	24011938 	.word	0x24011938
 8005950:	24011890 	.word	0x24011890

08005954 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005954:	4b0d      	ldr	r3, [pc, #52]	; (800598c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005956:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005958:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800595c:	f042 0208 	orr.w	r2, r2, #8
 8005960:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005964:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005968:	f002 0208 	and.w	r2, r2, #8
 800596c:	9201      	str	r2, [sp, #4]
 800596e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8005970:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005974:	f042 0208 	orr.w	r2, r2, #8
 8005978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800597c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005980:	f022 0208 	bic.w	r2, r2, #8
 8005984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005988:	b002      	add	sp, #8
 800598a:	4770      	bx	lr
 800598c:	58024400 	.word	0x58024400

08005990 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005992:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005994:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005998:	f042 0210 	orr.w	r2, r2, #16
 800599c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80059a0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80059a4:	f002 0210 	and.w	r2, r2, #16
 80059a8:	9201      	str	r2, [sp, #4]
 80059aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80059ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80059ae:	f042 0210 	orr.w	r2, r2, #16
 80059b2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80059b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80059b6:	f022 0210 	bic.w	r2, r2, #16
 80059ba:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80059bc:	b002      	add	sp, #8
 80059be:	4770      	bx	lr
 80059c0:	58024400 	.word	0x58024400

080059c4 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 80059c6:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 80059c8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80059cc:	f042 0210 	orr.w	r2, r2, #16
 80059d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80059d4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80059d8:	f002 0210 	and.w	r2, r2, #16
 80059dc:	9201      	str	r2, [sp, #4]
 80059de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 80059e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059e4:	f042 0210 	orr.w	r2, r2, #16
 80059e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80059ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059f0:	f022 0210 	bic.w	r2, r2, #16
 80059f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80059f8:	b002      	add	sp, #8
 80059fa:	4770      	bx	lr
 80059fc:	58024400 	.word	0x58024400

08005a00 <DSI_IO_Write>:
  if(Size <= 1U)
 8005a00:	2b01      	cmp	r3, #1
{
 8005a02:	b530      	push	{r4, r5, lr}
 8005a04:	460d      	mov	r5, r1
 8005a06:	b083      	sub	sp, #12
 8005a08:	4601      	mov	r1, r0
  if(Size <= 1U)
 8005a0a:	d909      	bls.n	8005a20 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8005a0c:	480a      	ldr	r0, [pc, #40]	; (8005a38 <DSI_IO_Write+0x38>)
 8005a0e:	e9cd 5200 	strd	r5, r2, [sp]
 8005a12:	2239      	movs	r2, #57	; 0x39
 8005a14:	f001 ff32 	bl	800787c <HAL_DSI_LongWrite>
 8005a18:	b958      	cbnz	r0, 8005a32 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8005a1a:	2000      	movs	r0, #0
}
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005a20:	5cd0      	ldrb	r0, [r2, r3]
 8005a22:	462b      	mov	r3, r5
 8005a24:	2215      	movs	r2, #21
 8005a26:	9000      	str	r0, [sp, #0]
 8005a28:	4803      	ldr	r0, [pc, #12]	; (8005a38 <DSI_IO_Write+0x38>)
 8005a2a:	f001 ff13 	bl	8007854 <HAL_DSI_ShortWrite>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0f3      	beq.n	8005a1a <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005a32:	f06f 0007 	mvn.w	r0, #7
 8005a36:	e7f1      	b.n	8005a1c <DSI_IO_Write+0x1c>
 8005a38:	24011954 	.word	0x24011954

08005a3c <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <BSP_LCD_Reset+0x5c>)
 8005a3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005a46:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005a48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8005a4c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8005a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005a52:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005a54:	4c11      	ldr	r4, [pc, #68]	; (8005a9c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005a56:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005a66:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a68:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005a6a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005a6e:	f001 fff9 	bl	8007a64 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005a72:	4629      	mov	r1, r5
 8005a74:	4620      	mov	r0, r4
 8005a76:	2200      	movs	r2, #0
 8005a78:	f002 f912 	bl	8007ca0 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8005a7c:	2014      	movs	r0, #20
 8005a7e:	f000 fb9d 	bl	80061bc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005a82:	4632      	mov	r2, r6
 8005a84:	4629      	mov	r1, r5
 8005a86:	4620      	mov	r0, r4
 8005a88:	f002 f90a 	bl	8007ca0 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8005a8c:	200a      	movs	r0, #10
 8005a8e:	f000 fb95 	bl	80061bc <HAL_Delay>
}
 8005a92:	b007      	add	sp, #28
 8005a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	58021800 	.word	0x58021800

08005aa0 <MX_DSIHOST_DSI_Init>:
{
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005aa4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005aa8:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8005aaa:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8005aac:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005ab0:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005ab2:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005ab6:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8005aba:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005abc:	60c6      	str	r6, [r0, #12]
{
 8005abe:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005ac0:	4669      	mov	r1, sp
{
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4690      	mov	r8, r2
 8005ac6:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005ac8:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8005aca:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005ace:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005ad2:	f001 fc27 	bl	8007324 <HAL_DSI_Init>
 8005ad6:	b118      	cbz	r0, 8005ae0 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005ad8:	4630      	mov	r0, r6
}
 8005ada:	b01e      	add	sp, #120	; 0x78
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005ae0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ae4:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <MX_DSIHOST_DSI_Init+0xd0>)
 8005ae6:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005ae8:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005aea:	fb03 2207 	mla	r2, r3, r7, r2
 8005aee:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005af0:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005af2:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005af4:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005af8:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005afc:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005b00:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b04:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005b06:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005b08:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005b0a:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8005b0c:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005b0e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005b12:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005b16:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8005b1a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005b1c:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005b22:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005b24:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005b28:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8005b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8005b2e:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005b32:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005b36:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005b3a:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8005b3c:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005b40:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005b42:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005b46:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005b4a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005b4e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005b50:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005b54:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005b58:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005b5c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005b60:	f001 fd18 	bl	8007594 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005b64:	3800      	subs	r0, #0
 8005b66:	bf18      	it	ne
 8005b68:	2001      	movne	r0, #1
}
 8005b6a:	b01e      	add	sp, #120	; 0x78
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	0042c1d8 	.word	0x0042c1d8
 8005b74:	4c751ce3 	.word	0x4c751ce3

08005b78 <MX_LTDC_Init>:
{
 8005b78:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8005b7a:	4d0e      	ldr	r5, [pc, #56]	; (8005bb4 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005b7c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005b80:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005b82:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005b84:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005b86:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005b88:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005b8a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005b8c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005b8e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005b90:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005b92:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005b94:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005b96:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005b98:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005b9a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8005b9c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8005b9e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005ba2:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005ba4:	6181      	str	r1, [r0, #24]
}
 8005ba6:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005ba8:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005bac:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005bb0:	f002 b934 	b.w	8007e1c <HAL_LTDC_Init>
 8005bb4:	50001000 	.word	0x50001000

08005bb8 <MX_LTDC_ConfigLayer>:
{
 8005bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bba:	4613      	mov	r3, r2
 8005bbc:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8005bbe:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005bc0:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005bc2:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005bc4:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005bc6:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005bc8:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8005bcc:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8005bce:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005bd0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005bd4:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005bd8:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8005bdc:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005bde:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005be0:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005be2:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005be4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005be6:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005be8:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8005bea:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005bec:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8005bee:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005bf2:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005bf6:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005bf8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005bfa:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005bfc:	f002 f9e8 	bl	8007fd0 <HAL_LTDC_ConfigLayer>
}
 8005c00:	b00f      	add	sp, #60	; 0x3c
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c04 <MX_LTDC_ClockConfig>:
{
 8005c04:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005c06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005c0a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005c0c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005c0e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005c14:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005c16:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005c18:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005c1a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005c1c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005c1e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005c20:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005c22:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005c26:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005c2a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005c2e:	f003 f8d1 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005c32:	b031      	add	sp, #196	; 0xc4
 8005c34:	bd30      	pop	{r4, r5, pc}
 8005c36:	bf00      	nop

08005c38 <BSP_LCD_InitEx>:
{
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005c3c:	2901      	cmp	r1, #1
{
 8005c3e:	b093      	sub	sp, #76	; 0x4c
 8005c40:	461d      	mov	r5, r3
 8005c42:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005c46:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005c48:	f200 80f2 	bhi.w	8005e30 <BSP_LCD_InitEx+0x1f8>
 8005c4c:	1e03      	subs	r3, r0, #0
 8005c4e:	bf18      	it	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f040 80ec 	bne.w	8005e30 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005c58:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005c5a:	2901      	cmp	r1, #1
 8005c5c:	f200 80e8 	bhi.w	8005e30 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005c60:	2a02      	cmp	r2, #2
 8005c62:	f000 80ab 	beq.w	8005dbc <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005c66:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005c68:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005c6a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005c6c:	4c72      	ldr	r4, [pc, #456]	; (8005e38 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005c6e:	2000      	movs	r0, #0
 8005c70:	4f72      	ldr	r7, [pc, #456]	; (8005e3c <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c72:	2600      	movs	r6, #0
 8005c74:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005c76:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005c7a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005c7c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005c80:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005c82:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005c86:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005c88:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005c8c:	f7ff fed6 	bl	8005a3c <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005c90:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005c94:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005c96:	a90c      	add	r1, sp, #48	; 0x30
 8005c98:	4869      	ldr	r0, [pc, #420]	; (8005e40 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005c9a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8005c9e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005ca2:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005ca6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005caa:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005cae:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005cb0:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005cb2:	f8cd c014 	str.w	ip, [sp, #20]
 8005cb6:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005cba:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005cbe:	f001 fed1 	bl	8007a64 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	485e      	ldr	r0, [pc, #376]	; (8005e40 <BSP_LCD_InitEx+0x208>)
 8005cc8:	f001 ffea 	bl	8007ca0 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8005ccc:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005cd0:	a90c      	add	r1, sp, #48	; 0x30
 8005cd2:	485b      	ldr	r0, [pc, #364]	; (8005e40 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005cd4:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005cd8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005e70 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8005cdc:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005ce0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005ce4:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005ce6:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005cea:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005cee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005cf2:	9406      	str	r4, [sp, #24]
 8005cf4:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005cf6:	f001 feb5 	bl	8007a64 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	4850      	ldr	r0, [pc, #320]	; (8005e40 <BSP_LCD_InitEx+0x208>)
 8005d00:	f001 ffce 	bl	8007ca0 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005d04:	4632      	mov	r2, r6
 8005d06:	210f      	movs	r1, #15
 8005d08:	2058      	movs	r0, #88	; 0x58
 8005d0a:	f001 f85f 	bl	8006dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005d0e:	2058      	movs	r0, #88	; 0x58
 8005d10:	f001 f896 	bl	8006e40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005d14:	4632      	mov	r2, r6
 8005d16:	210f      	movs	r1, #15
 8005d18:	205a      	movs	r0, #90	; 0x5a
 8005d1a:	f001 f857 	bl	8006dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005d1e:	205a      	movs	r0, #90	; 0x5a
 8005d20:	f001 f88e 	bl	8006e40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005d24:	4632      	mov	r2, r6
 8005d26:	210f      	movs	r1, #15
 8005d28:	207b      	movs	r0, #123	; 0x7b
 8005d2a:	f001 f84f 	bl	8006dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005d2e:	207b      	movs	r0, #123	; 0x7b
 8005d30:	f001 f886 	bl	8006e40 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005d34:	4c43      	ldr	r4, [pc, #268]	; (8005e44 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005d36:	4844      	ldr	r0, [pc, #272]	; (8005e48 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005d38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005d3c:	4943      	ldr	r1, [pc, #268]	; (8005e4c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005d3e:	4e44      	ldr	r6, [pc, #272]	; (8005e50 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005d40:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005d42:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005d44:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005d48:	f7ff fe04 	bl	8005954 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	4282      	cmp	r2, r0
 8005d54:	d03a      	beq.n	8005dcc <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005d56:	680a      	ldr	r2, [r1, #0]
 8005d58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005d5c:	d031      	beq.n	8005dc2 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005d5e:	4642      	mov	r2, r8
 8005d60:	4629      	mov	r1, r5
 8005d62:	483a      	ldr	r0, [pc, #232]	; (8005e4c <BSP_LCD_InitEx+0x214>)
 8005d64:	f7ff fe9c 	bl	8005aa0 <MX_DSIHOST_DSI_Init>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d15c      	bne.n	8005e26 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005d6c:	4835      	ldr	r0, [pc, #212]	; (8005e44 <BSP_LCD_InitEx+0x20c>)
 8005d6e:	f7ff ff49 	bl	8005c04 <MX_LTDC_ClockConfig>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d157      	bne.n	8005e26 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005d76:	4642      	mov	r2, r8
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4832      	ldr	r0, [pc, #200]	; (8005e44 <BSP_LCD_InitEx+0x20c>)
 8005d7c:	f7ff fefc 	bl	8005b78 <MX_LTDC_Init>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d150      	bne.n	8005e26 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005d84:	f000 f8b2 	bl	8005eec <BSP_SDRAM_Init>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d14c      	bne.n	8005e26 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005d8c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005d8e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005d92:	4601      	mov	r1, r0
      config.X0          = 0;
 8005d94:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005d96:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005d98:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8005d9c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005da0:	4828      	ldr	r0, [pc, #160]	; (8005e44 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005da2:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005da6:	f7ff ff07 	bl	8005bb8 <MX_LTDC_ConfigLayer>
 8005daa:	4604      	mov	r4, r0
 8005dac:	b190      	cbz	r0, 8005dd4 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005dae:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005db2:	2301      	movs	r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
}
 8005db6:	b013      	add	sp, #76	; 0x4c
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8005dbc:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8005dbe:	9201      	str	r2, [sp, #4]
 8005dc0:	e754      	b.n	8005c6c <BSP_LCD_InitEx+0x34>
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	f7ff fdfe 	bl	80059c4 <DSI_MspInit.part.0>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	e7c8      	b.n	8005d5e <BSP_LCD_InitEx+0x126>
 8005dcc:	f7ff fde0 	bl	8005990 <DMA2D_MspInit.part.0>
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	e7c0      	b.n	8005d56 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005dd4:	481d      	ldr	r0, [pc, #116]	; (8005e4c <BSP_LCD_InitEx+0x214>)
 8005dd6:	f001 fd15 	bl	8007804 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8005dda:	2104      	movs	r1, #4
 8005ddc:	481b      	ldr	r0, [pc, #108]	; (8005e4c <BSP_LCD_InitEx+0x214>)
 8005dde:	f001 fcfd 	bl	80077dc <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005de4:	4d1c      	ldr	r5, [pc, #112]	; (8005e58 <BSP_LCD_InitEx+0x220>)
 8005de6:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005de8:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8005dea:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005dec:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005df0:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005df4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005df8:	f7ff fb22 	bl	8005440 <OTM8009A_RegisterBusIO>
 8005dfc:	b980      	cbnz	r0, 8005e20 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005dfe:	4c19      	ldr	r4, [pc, #100]	; (8005e64 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005e00:	4628      	mov	r0, r5
 8005e02:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005e04:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005e06:	f7ff fb07 	bl	8005418 <OTM8009A_ReadID>
 8005e0a:	b948      	cbnz	r0, 8005e20 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005e0c:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <BSP_LCD_InitEx+0x230>)
 8005e0e:	4d17      	ldr	r5, [pc, #92]	; (8005e6c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	9a03      	ldr	r2, [sp, #12]
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005e18:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005e1a:	47a0      	blx	r4
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d0c8      	beq.n	8005db2 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e20:	f06f 0006 	mvn.w	r0, #6
 8005e24:	e7c5      	b.n	8005db2 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005e26:	f06f 0003 	mvn.w	r0, #3
}
 8005e2a:	b013      	add	sp, #76	; 0x4c
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005e30:	f06f 0001 	mvn.w	r0, #1
 8005e34:	e7bf      	b.n	8005db6 <BSP_LCD_InitEx+0x17e>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	24011938 	.word	0x24011938
 8005e40:	58022400 	.word	0x58022400
 8005e44:	24011890 	.word	0x24011890
 8005e48:	52001000 	.word	0x52001000
 8005e4c:	24011954 	.word	0x24011954
 8005e50:	50001000 	.word	0x50001000
 8005e54:	08005491 	.word	0x08005491
 8005e58:	24001548 	.word	0x24001548
 8005e5c:	08005a01 	.word	0x08005a01
 8005e60:	08005621 	.word	0x08005621
 8005e64:	24001540 	.word	0x24001540
 8005e68:	24001020 	.word	0x24001020
 8005e6c:	24001544 	.word	0x24001544
 8005e70:	24011970 	.word	0x24011970

08005e74 <BSP_LCD_Init>:
{
 8005e74:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005e76:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005e7a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005e7c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005e80:	2201      	movs	r2, #1
 8005e82:	9400      	str	r4, [sp, #0]
 8005e84:	f7ff fed8 	bl	8005c38 <BSP_LCD_InitEx>
}
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005e8e:	4915      	ldr	r1, [pc, #84]	; (8005ee4 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005e90:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005e92:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005e98:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8005e9c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005ea0:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005ea4:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005ea6:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005ea8:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005eaa:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005eac:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005eae:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005eb0:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005eb2:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005eb4:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005eb6:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005eb8:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005eba:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005ebc:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8005ebe:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005ec0:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005ec2:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005ec4:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005ec6:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005ec8:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005ecc:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005ed0:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005ed2:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005ed6:	f004 f8fb 	bl	800a0d0 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8005eda:	1b40      	subs	r0, r0, r5
 8005edc:	bf18      	it	ne
 8005ede:	2001      	movne	r0, #1
 8005ee0:	b009      	add	sp, #36	; 0x24
 8005ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee4:	52004140 	.word	0x52004140
 8005ee8:	240119d8 	.word	0x240119d8

08005eec <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f040 80e1 	bne.w	80060b4 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ef2:	4b73      	ldr	r3, [pc, #460]	; (80060c0 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ef4:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ef6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005efa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005efe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f00:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005f04:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005f0a:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005f0c:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005f0e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f14:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005f16:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005f1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005f22:	430a      	orrs	r2, r1
 8005f24:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005f28:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	9202      	str	r2, [sp, #8]
 8005f30:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f42:	f002 0208 	and.w	r2, r2, #8
 8005f46:	9203      	str	r2, [sp, #12]
 8005f48:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f4e:	f042 0210 	orr.w	r2, r2, #16
 8005f52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f5a:	f002 0210 	and.w	r2, r2, #16
 8005f5e:	9204      	str	r2, [sp, #16]
 8005f60:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f66:	f042 0220 	orr.w	r2, r2, #32
 8005f6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f72:	f002 0220 	and.w	r2, r2, #32
 8005f76:	9205      	str	r2, [sp, #20]
 8005f78:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f8a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f8e:	9206      	str	r2, [sp, #24]
 8005f90:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fa2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005fa6:	9207      	str	r2, [sp, #28]
 8005fa8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005fb6:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005fbe:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005fc4:	483f      	ldr	r0, [pc, #252]	; (80060c4 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005fc6:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005fc8:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005fca:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005fcc:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005fce:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005fd0:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd2:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005fd4:	f001 fd46 	bl	8007a64 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005fd8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005fdc:	a909      	add	r1, sp, #36	; 0x24
 8005fde:	483a      	ldr	r0, [pc, #232]	; (80060c8 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005fe0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005fe2:	f001 fd3f 	bl	8007a64 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fe6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005fea:	a909      	add	r1, sp, #36	; 0x24
 8005fec:	4837      	ldr	r0, [pc, #220]	; (80060cc <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005ff0:	f001 fd38 	bl	8007a64 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005ff4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005ff8:	a909      	add	r1, sp, #36	; 0x24
 8005ffa:	4835      	ldr	r0, [pc, #212]	; (80060d0 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005ffc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005ffe:	f001 fd31 	bl	8007a64 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006002:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006006:	a909      	add	r1, sp, #36	; 0x24
 8006008:	4832      	ldr	r0, [pc, #200]	; (80060d4 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800600a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800600c:	f001 fd2a 	bl	8007a64 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006010:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006014:	a909      	add	r1, sp, #36	; 0x24
 8006016:	4830      	ldr	r0, [pc, #192]	; (80060d8 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006018:	4c30      	ldr	r4, [pc, #192]	; (80060dc <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800601a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800601c:	f001 fd22 	bl	8007a64 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006024:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800602c:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800602e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006034:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006036:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006038:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800603a:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800603c:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800603e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8006040:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006042:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006044:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006046:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006048:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800604c:	4e25      	ldr	r6, [pc, #148]	; (80060e4 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800604e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006050:	6334      	str	r4, [r6, #48]	; 0x30
 8006052:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006054:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800605c:	f002 f882 	bl	8008164 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8006060:	4620      	mov	r0, r4
 8006062:	f002 f805 	bl	8008070 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006066:	462a      	mov	r2, r5
 8006068:	210f      	movs	r1, #15
 800606a:	207a      	movs	r0, #122	; 0x7a
 800606c:	f000 feae 	bl	8006dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006070:	207a      	movs	r0, #122	; 0x7a
 8006072:	f000 fee5 	bl	8006e40 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ff08 	bl	8005e8c <MX_SDRAM_Init>
 800607c:	4603      	mov	r3, r0
 800607e:	b9e0      	cbnz	r0, 80060ba <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006080:	4919      	ldr	r1, [pc, #100]	; (80060e8 <BSP_SDRAM_Init+0x1fc>)
 8006082:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006086:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800608a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800608e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006090:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006092:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006094:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006096:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006098:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800609a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800609e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80060a0:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80060a2:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80060a4:	f7fe fc62 	bl	800496c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80060a8:	2800      	cmp	r0, #0
 80060aa:	bf18      	it	ne
 80060ac:	f06f 0004 	mvnne.w	r0, #4
}
 80060b0:	b00f      	add	sp, #60	; 0x3c
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80060b4:	f06f 0001 	mvn.w	r0, #1
}
 80060b8:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	e7f7      	b.n	80060b0 <BSP_SDRAM_Init+0x1c4>
 80060c0:	58024400 	.word	0x58024400
 80060c4:	58020c00 	.word	0x58020c00
 80060c8:	58021000 	.word	0x58021000
 80060cc:	58021400 	.word	0x58021400
 80060d0:	58021800 	.word	0x58021800
 80060d4:	58021c00 	.word	0x58021c00
 80060d8:	58022000 	.word	0x58022000
 80060dc:	24001568 	.word	0x24001568
 80060e0:	52000040 	.word	0x52000040
 80060e4:	240119d8 	.word	0x240119d8
 80060e8:	240015d4 	.word	0x240015d4

080060ec <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_InitTick+0x40>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b90b      	cbnz	r3, 80060f6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80060f2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80060f4:	4770      	bx	lr
{
 80060f6:	b510      	push	{r4, lr}
 80060f8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80060fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060fe:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <HAL_InitTick+0x44>)
 8006100:	fbb0 f3f3 	udiv	r3, r0, r3
 8006104:	6810      	ldr	r0, [r2, #0]
 8006106:	fbb0 f0f3 	udiv	r0, r0, r3
 800610a:	f000 fea7 	bl	8006e5c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800610e:	2c0f      	cmp	r4, #15
 8006110:	d800      	bhi.n	8006114 <HAL_InitTick+0x28>
 8006112:	b108      	cbz	r0, 8006118 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006114:	2001      	movs	r0, #1
}
 8006116:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006118:	2200      	movs	r2, #0
 800611a:	4621      	mov	r1, r4
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	f000 fe54 	bl	8006dcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <HAL_InitTick+0x48>)
 8006126:	2000      	movs	r0, #0
 8006128:	601c      	str	r4, [r3, #0]
}
 800612a:	bd10      	pop	{r4, pc}
 800612c:	2400106c 	.word	0x2400106c
 8006130:	24000000 	.word	0x24000000
 8006134:	24001070 	.word	0x24001070

08006138 <HAL_Init>:
{
 8006138:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800613a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800613c:	4c12      	ldr	r4, [pc, #72]	; (8006188 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800613e:	f000 fe31 	bl	8006da4 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006142:	4d12      	ldr	r5, [pc, #72]	; (800618c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006144:	f002 fb62 	bl	800880c <HAL_RCC_GetSysClockFreq>
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_Init+0x58>)
 800614a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800614c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800614e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006150:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006152:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006156:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006158:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800615a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800615c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8006160:	4c0c      	ldr	r4, [pc, #48]	; (8006194 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006162:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006166:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800616c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800616e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006170:	f7ff ffbc 	bl	80060ec <HAL_InitTick>
 8006174:	b110      	cbz	r0, 800617c <HAL_Init+0x44>
    return HAL_ERROR;
 8006176:	2401      	movs	r4, #1
}
 8006178:	4620      	mov	r0, r4
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	4604      	mov	r4, r0
  HAL_MspInit();
 800617e:	f7fe faf3 	bl	8004768 <HAL_MspInit>
}
 8006182:	4620      	mov	r0, r4
 8006184:	bd38      	pop	{r3, r4, r5, pc}
 8006186:	bf00      	nop
 8006188:	0800a4a4 	.word	0x0800a4a4
 800618c:	24000004 	.word	0x24000004
 8006190:	58024400 	.word	0x58024400
 8006194:	24000000 	.word	0x24000000

08006198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006198:	4a03      	ldr	r2, [pc, #12]	; (80061a8 <HAL_IncTick+0x10>)
 800619a:	4b04      	ldr	r3, [pc, #16]	; (80061ac <HAL_IncTick+0x14>)
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	440b      	add	r3, r1
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	24011a0c 	.word	0x24011a0c
 80061ac:	2400106c 	.word	0x2400106c

080061b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <HAL_GetTick+0x8>)
 80061b2:	6818      	ldr	r0, [r3, #0]
}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	24011a0c 	.word	0x24011a0c

080061bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061c0:	f7ff fff6 	bl	80061b0 <HAL_GetTick>
 80061c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061c6:	1c63      	adds	r3, r4, #1
 80061c8:	d002      	beq.n	80061d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ca:	4b04      	ldr	r3, [pc, #16]	; (80061dc <HAL_Delay+0x20>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061d0:	f7ff ffee 	bl	80061b0 <HAL_GetTick>
 80061d4:	1b43      	subs	r3, r0, r5
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	d3fa      	bcc.n	80061d0 <HAL_Delay+0x14>
  {
  }
}
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	2400106c 	.word	0x2400106c

080061e0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80061e0:	4b01      	ldr	r3, [pc, #4]	; (80061e8 <HAL_GetREVID+0x8>)
 80061e2:	6818      	ldr	r0, [r3, #0]
}
 80061e4:	0c00      	lsrs	r0, r0, #16
 80061e6:	4770      	bx	lr
 80061e8:	5c001000 	.word	0x5c001000

080061ec <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80061ee:	6853      	ldr	r3, [r2, #4]
 80061f0:	ea23 0000 	bic.w	r0, r3, r0
 80061f4:	4301      	orrs	r1, r0
 80061f6:	6051      	str	r1, [r2, #4]
}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	58000400 	.word	0x58000400

08006200 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8006200:	4a02      	ldr	r2, [pc, #8]	; (800620c <HAL_EnableCompensationCell+0xc>)
 8006202:	6a13      	ldr	r3, [r2, #32]
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	6213      	str	r3, [r2, #32]
}
 800620a:	4770      	bx	lr
 800620c:	58000400 	.word	0x58000400

08006210 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006210:	4a40      	ldr	r2, [pc, #256]	; (8006314 <HAL_ADC_PollForConversion+0x104>)
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	4293      	cmp	r3, r2
{
 8006216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621a:	4606      	mov	r6, r0
 800621c:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800621e:	d044      	beq.n	80062aa <HAL_ADC_PollForConversion+0x9a>
 8006220:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_ADC_PollForConversion+0x9a>
 8006228:	4a3b      	ldr	r2, [pc, #236]	; (8006318 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800622a:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800622c:	6897      	ldr	r7, [r2, #8]
 800622e:	2c08      	cmp	r4, #8
 8006230:	f007 071f 	and.w	r7, r7, #31
 8006234:	d00a      	beq.n	800624c <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006236:	2f09      	cmp	r7, #9
 8006238:	d84d      	bhi.n	80062d6 <HAL_ADC_PollForConversion+0xc6>
 800623a:	f240 2121 	movw	r1, #545	; 0x221
 800623e:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006240:	07c9      	lsls	r1, r1, #31
 8006242:	d548      	bpl.n	80062d6 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	07da      	lsls	r2, r3, #31
 8006248:	d449      	bmi.n	80062de <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800624a:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800624c:	f7ff ffb0 	bl	80061b0 <HAL_GetTick>
 8006250:	6832      	ldr	r2, [r6, #0]
 8006252:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006254:	e001      	b.n	800625a <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006256:	1c6b      	adds	r3, r5, #1
 8006258:	d129      	bne.n	80062ae <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	4223      	tst	r3, r4
 800625e:	d0fa      	beq.n	8006256 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006260:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006266:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006268:	68d3      	ldr	r3, [r2, #12]
 800626a:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800626e:	d10f      	bne.n	8006290 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006270:	7d73      	ldrb	r3, [r6, #21]
 8006272:	b96b      	cbnz	r3, 8006290 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006274:	6813      	ldr	r3, [r2, #0]
 8006276:	0718      	lsls	r0, r3, #28
 8006278:	d50a      	bpl.n	8006290 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800627a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800627c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006280:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006282:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006284:	04d9      	lsls	r1, r3, #19
 8006286:	d403      	bmi.n	8006290 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006288:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006290:	4b22      	ldr	r3, [pc, #136]	; (800631c <HAL_ADC_PollForConversion+0x10c>)
 8006292:	429a      	cmp	r2, r3
 8006294:	d02e      	beq.n	80062f4 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006296:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006298:	2c08      	cmp	r4, #8
 800629a:	d027      	beq.n	80062ec <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800629c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80062a0:	d134      	bne.n	800630c <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062a2:	230c      	movs	r3, #12
 80062a4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80062a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_ADC_PollForConversion+0x110>)
 80062ac:	e7bd      	b.n	800622a <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80062ae:	f7ff ff7f 	bl	80061b0 <HAL_GetTick>
 80062b2:	eba0 0008 	sub.w	r0, r0, r8
 80062b6:	6832      	ldr	r2, [r6, #0]
 80062b8:	42a8      	cmp	r0, r5
 80062ba:	d801      	bhi.n	80062c0 <HAL_ADC_PollForConversion+0xb0>
 80062bc:	2d00      	cmp	r5, #0
 80062be:	d1cc      	bne.n	800625a <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80062c0:	6813      	ldr	r3, [r2, #0]
 80062c2:	4023      	ands	r3, r4
 80062c4:	d1c9      	bne.n	800625a <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062c6:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80062c8:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80062ca:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062ce:	f042 0204 	orr.w	r2, r2, #4
 80062d2:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80062d4:	e7e7      	b.n	80062a6 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80062d6:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80062d8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80062dc:	d0b5      	beq.n	800624a <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062de:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062e2:	f043 0320 	orr.w	r3, r3, #32
 80062e6:	6573      	str	r3, [r6, #84]	; 0x54
}
 80062e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80062ec:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80062ee:	6014      	str	r4, [r2, #0]
}
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062f4:	2f09      	cmp	r7, #9
 80062f6:	d902      	bls.n	80062fe <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_ADC_PollForConversion+0x104>)
 80062fa:	68d8      	ldr	r0, [r3, #12]
 80062fc:	e7cc      	b.n	8006298 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062fe:	f240 2321 	movw	r3, #545	; 0x221
 8006302:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006306:	07fb      	lsls	r3, r7, #31
 8006308:	d4c5      	bmi.n	8006296 <HAL_ADC_PollForConversion+0x86>
 800630a:	e7f5      	b.n	80062f8 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 800630c:	2000      	movs	r0, #0
}
 800630e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006312:	bf00      	nop
 8006314:	40022000 	.word	0x40022000
 8006318:	58026300 	.word	0x58026300
 800631c:	40022100 	.word	0x40022100
 8006320:	40022300 	.word	0x40022300

08006324 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006324:	6803      	ldr	r3, [r0, #0]
 8006326:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800632c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800632e:	2200      	movs	r2, #0
{
 8006330:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8006332:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006334:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006338:	2a01      	cmp	r2, #1
 800633a:	f000 813a 	beq.w	80065b2 <HAL_ADC_ConfigChannel+0x286>
 800633e:	4603      	mov	r3, r0
 8006340:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006342:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006344:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006348:	6894      	ldr	r4, [r2, #8]
 800634a:	0766      	lsls	r6, r4, #29
 800634c:	f100 8099 	bmi.w	8006482 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006350:	680c      	ldr	r4, [r1, #0]
 8006352:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8006356:	2d00      	cmp	r5, #0
 8006358:	f040 809e 	bne.w	8006498 <HAL_ADC_ConfigChannel+0x16c>
 800635c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006360:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006364:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8006366:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006368:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800636a:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 800636c:	4034      	ands	r4, r6
 800636e:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006370:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8006374:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8006378:	40a6      	lsls	r6, r4
 800637a:	61d0      	str	r0, [r2, #28]
 800637c:	fa0c f404 	lsl.w	r4, ip, r4
 8006380:	5978      	ldr	r0, [r7, r5]
 8006382:	ea20 0006 	bic.w	r0, r0, r6
 8006386:	4320      	orrs	r0, r4
 8006388:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800638a:	6890      	ldr	r0, [r2, #8]
 800638c:	0745      	lsls	r5, r0, #29
 800638e:	f100 8081 	bmi.w	8006494 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006392:	6895      	ldr	r5, [r2, #8]
 8006394:	f015 0508 	ands.w	r5, r5, #8
 8006398:	d157      	bne.n	800644a <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800639a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800639c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80063a0:	2007      	movs	r0, #7
 80063a2:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80063a4:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80063a8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80063ac:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80063b0:	fa00 fe04 	lsl.w	lr, r0, r4
 80063b4:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063b8:	4fc3      	ldr	r7, [pc, #780]	; (80066c8 <HAL_ADC_ConfigChannel+0x39c>)
 80063ba:	f85c 0006 	ldr.w	r0, [ip, r6]
 80063be:	ea20 000e 	bic.w	r0, r0, lr
 80063c2:	4320      	orrs	r0, r4
 80063c4:	f84c 0006 	str.w	r0, [ip, r6]
 80063c8:	6838      	ldr	r0, [r7, #0]
 80063ca:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80063ce:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80063d2:	f000 8098 	beq.w	8006506 <HAL_ADC_ConfigChannel+0x1da>
 80063d6:	68d0      	ldr	r0, [r2, #12]
 80063d8:	68d6      	ldr	r6, [r2, #12]
 80063da:	f010 0f10 	tst.w	r0, #16
 80063de:	6948      	ldr	r0, [r1, #20]
 80063e0:	f040 8107 	bne.w	80065f2 <HAL_ADC_ConfigChannel+0x2c6>
 80063e4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80063e8:	0076      	lsls	r6, r6, #1
 80063ea:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80063ee:	690f      	ldr	r7, [r1, #16]
 80063f0:	2f04      	cmp	r7, #4
 80063f2:	f000 80e1 	beq.w	80065b8 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063f6:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80063fa:	6808      	ldr	r0, [r1, #0]
 80063fc:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8006400:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006404:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006408:	ea40 000c 	orr.w	r0, r0, ip
 800640c:	4330      	orrs	r0, r6
 800640e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006412:	7e4f      	ldrb	r7, [r1, #25]
 8006414:	690e      	ldr	r6, [r1, #16]
 8006416:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006418:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800641c:	bf0c      	ite	eq
 800641e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8006422:	2700      	movne	r7, #0
 8006424:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006428:	4338      	orrs	r0, r7
 800642a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800642e:	7e0c      	ldrb	r4, [r1, #24]
 8006430:	6908      	ldr	r0, [r1, #16]
 8006432:	2c01      	cmp	r4, #1
 8006434:	d104      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x114>
 8006436:	f000 001f 	and.w	r0, r0, #31
 800643a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800643e:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006440:	6910      	ldr	r0, [r2, #16]
 8006442:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8006446:	4305      	orrs	r5, r0
 8006448:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800644a:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800644c:	07c4      	lsls	r4, r0, #31
 800644e:	d416      	bmi.n	800647e <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006450:	68ce      	ldr	r6, [r1, #12]
 8006452:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006454:	f006 0718 	and.w	r7, r6, #24
 8006458:	4c9c      	ldr	r4, [pc, #624]	; (80066cc <HAL_ADC_ConfigChannel+0x3a0>)
 800645a:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800645e:	40fc      	lsrs	r4, r7
 8006460:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006464:	f8df c288 	ldr.w	ip, [pc, #648]	; 80066f0 <HAL_ADC_ConfigChannel+0x3c4>
 8006468:	4004      	ands	r4, r0
 800646a:	ea25 0507 	bic.w	r5, r5, r7
 800646e:	4566      	cmp	r6, ip
 8006470:	ea44 0405 	orr.w	r4, r4, r5
 8006474:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8006478:	d04d      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800647a:	2800      	cmp	r0, #0
 800647c:	db15      	blt.n	80064aa <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800647e:	2000      	movs	r0, #0
 8006480:	e003      	b.n	800648a <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006482:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006484:	f042 0220 	orr.w	r2, r2, #32
 8006488:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006490:	b003      	add	sp, #12
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006494:	6890      	ldr	r0, [r2, #8]
 8006496:	e7d8      	b.n	800644a <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006498:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800649c:	b115      	cbz	r5, 80064a4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800649e:	fab5 f585 	clz	r5, r5
 80064a2:	40a8      	lsls	r0, r5
 80064a4:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80064a8:	e75c      	b.n	8006364 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064aa:	4989      	ldr	r1, [pc, #548]	; (80066d0 <HAL_ADC_ConfigChannel+0x3a4>)
 80064ac:	428a      	cmp	r2, r1
 80064ae:	f000 80c6 	beq.w	800663e <HAL_ADC_ConfigChannel+0x312>
 80064b2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80064b6:	428a      	cmp	r2, r1
 80064b8:	f000 80c1 	beq.w	800663e <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064bc:	4e85      	ldr	r6, [pc, #532]	; (80066d4 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064be:	4d86      	ldr	r5, [pc, #536]	; (80066d8 <HAL_ADC_ConfigChannel+0x3ac>)
 80064c0:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064c2:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064c4:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064c8:	43e4      	mvns	r4, r4
 80064ca:	f004 0401 	and.w	r4, r4, #1
 80064ce:	2c00      	cmp	r4, #0
 80064d0:	f000 80c3 	beq.w	800665a <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064d4:	4c81      	ldr	r4, [pc, #516]	; (80066dc <HAL_ADC_ConfigChannel+0x3b0>)
 80064d6:	42a0      	cmp	r0, r4
 80064d8:	f000 810c 	beq.w	80066f4 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064dc:	4c80      	ldr	r4, [pc, #512]	; (80066e0 <HAL_ADC_ConfigChannel+0x3b4>)
 80064de:	42a0      	cmp	r0, r4
 80064e0:	f000 812b 	beq.w	800673a <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064e4:	4c7f      	ldr	r4, [pc, #508]	; (80066e4 <HAL_ADC_ConfigChannel+0x3b8>)
 80064e6:	42a0      	cmp	r0, r4
 80064e8:	d1c9      	bne.n	800647e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80064ea:	0249      	lsls	r1, r1, #9
 80064ec:	d4c7      	bmi.n	800647e <HAL_ADC_ConfigChannel+0x152>
 80064ee:	4979      	ldr	r1, [pc, #484]	; (80066d4 <HAL_ADC_ConfigChannel+0x3a8>)
 80064f0:	428a      	cmp	r2, r1
 80064f2:	d1c4      	bne.n	800647e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80064f4:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064f6:	2000      	movs	r0, #0
 80064f8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80064fc:	4332      	orrs	r2, r6
 80064fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006502:	60aa      	str	r2, [r5, #8]
}
 8006504:	e7c1      	b.n	800648a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006506:	68d6      	ldr	r6, [r2, #12]
 8006508:	6948      	ldr	r0, [r1, #20]
 800650a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800650e:	0076      	lsls	r6, r6, #1
 8006510:	fa00 f606 	lsl.w	r6, r0, r6
 8006514:	e76b      	b.n	80063ee <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006516:	2f00      	cmp	r7, #0
 8006518:	d071      	beq.n	80065fe <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800651e:	2c00      	cmp	r4, #0
 8006520:	f000 80af 	beq.w	8006682 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8006524:	fab4 f484 	clz	r4, r4
 8006528:	3401      	adds	r4, #1
 800652a:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800652e:	2c09      	cmp	r4, #9
 8006530:	f240 80a7 	bls.w	8006682 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006538:	2d00      	cmp	r5, #0
 800653a:	f000 8112 	beq.w	8006762 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800653e:	fab5 f585 	clz	r5, r5
 8006542:	3501      	adds	r5, #1
 8006544:	06ad      	lsls	r5, r5, #26
 8006546:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800654e:	2c00      	cmp	r4, #0
 8006550:	f000 8105 	beq.w	800675e <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8006554:	2601      	movs	r6, #1
 8006556:	fab4 f484 	clz	r4, r4
 800655a:	4434      	add	r4, r6
 800655c:	f004 041f 	and.w	r4, r4, #31
 8006560:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006564:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006566:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800656a:	2800      	cmp	r0, #0
 800656c:	f000 80f5 	beq.w	800675a <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8006570:	fab0 f480 	clz	r4, r0
 8006574:	3401      	adds	r4, #1
 8006576:	f004 041f 	and.w	r4, r4, #31
 800657a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800657e:	f1a4 001e 	sub.w	r0, r4, #30
 8006582:	0500      	lsls	r0, r0, #20
 8006584:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006588:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 800658a:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800658e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8006592:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006594:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8006596:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800659a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800659e:	fa0c fc00 	lsl.w	ip, ip, r0
 80065a2:	4086      	lsls	r6, r0
 80065a4:	597c      	ldr	r4, [r7, r5]
 80065a6:	ea24 000c 	bic.w	r0, r4, ip
 80065aa:	4330      	orrs	r0, r6
 80065ac:	5178      	str	r0, [r7, r5]
 80065ae:	6808      	ldr	r0, [r1, #0]
}
 80065b0:	e763      	b.n	800647a <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 80065b2:	2002      	movs	r0, #2
}
 80065b4:	b003      	add	sp, #12
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065b8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80065ba:	680d      	ldr	r5, [r1, #0]
 80065bc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80065c0:	06ac      	lsls	r4, r5, #26
 80065c2:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80065c6:	d030      	beq.n	800662a <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065c8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80065ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80065ce:	4284      	cmp	r4, r0
 80065d0:	d026      	beq.n	8006620 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065d2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80065d4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80065d8:	4284      	cmp	r4, r0
 80065da:	d02b      	beq.n	8006634 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065dc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80065de:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80065e2:	4284      	cmp	r4, r0
 80065e4:	f47f af31 	bne.w	800644a <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80065e8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80065ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80065ee:	66d0      	str	r0, [r2, #108]	; 0x6c
 80065f0:	e72b      	b.n	800644a <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065f2:	0876      	lsrs	r6, r6, #1
 80065f4:	f006 0608 	and.w	r6, r6, #8
 80065f8:	fa00 f606 	lsl.w	r6, r0, r6
 80065fc:	e6f7      	b.n	80063ee <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065fe:	0e80      	lsrs	r0, r0, #26
 8006600:	1c44      	adds	r4, r0, #1
 8006602:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006606:	2e09      	cmp	r6, #9
 8006608:	d82d      	bhi.n	8006666 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800660a:	06a5      	lsls	r5, r4, #26
 800660c:	2401      	movs	r4, #1
 800660e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006612:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006616:	fa04 f606 	lsl.w	r6, r4, r6
 800661a:	0500      	lsls	r0, r0, #20
 800661c:	4335      	orrs	r5, r6
 800661e:	e7b3      	b.n	8006588 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006620:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006622:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006626:	6650      	str	r0, [r2, #100]	; 0x64
 8006628:	e7d3      	b.n	80065d2 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800662a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800662c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006630:	6610      	str	r0, [r2, #96]	; 0x60
 8006632:	e7c9      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006634:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006636:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800663a:	6690      	str	r0, [r2, #104]	; 0x68
 800663c:	e7ce      	b.n	80065dc <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800663e:	492a      	ldr	r1, [pc, #168]	; (80066e8 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006640:	4e23      	ldr	r6, [pc, #140]	; (80066d0 <HAL_ADC_ConfigChannel+0x3a4>)
 8006642:	4c2a      	ldr	r4, [pc, #168]	; (80066ec <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006644:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006646:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006648:	68b7      	ldr	r7, [r6, #8]
 800664a:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800664c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006650:	433c      	orrs	r4, r7
 8006652:	43e4      	mvns	r4, r4
 8006654:	f004 0401 	and.w	r4, r4, #1
 8006658:	e739      	b.n	80064ce <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800665a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800665c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800665e:	f042 0220 	orr.w	r2, r2, #32
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006664:	e711      	b.n	800648a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006666:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800666a:	2701      	movs	r7, #1
 800666c:	06a5      	lsls	r5, r4, #26
 800666e:	381e      	subs	r0, #30
 8006670:	fa07 f606 	lsl.w	r6, r7, r6
 8006674:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006678:	0500      	lsls	r0, r0, #20
 800667a:	4335      	orrs	r5, r6
 800667c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006680:	e782      	b.n	8006588 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006686:	2c00      	cmp	r4, #0
 8006688:	d073      	beq.n	8006772 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800668a:	fab4 f484 	clz	r4, r4
 800668e:	3401      	adds	r4, #1
 8006690:	06a4      	lsls	r4, r4, #26
 8006692:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006696:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 800669a:	2e00      	cmp	r6, #0
 800669c:	d067      	beq.n	800676e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800669e:	2501      	movs	r5, #1
 80066a0:	fab6 f686 	clz	r6, r6
 80066a4:	442e      	add	r6, r5
 80066a6:	f006 061f 	and.w	r6, r6, #31
 80066aa:	40b5      	lsls	r5, r6
 80066ac:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ae:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d058      	beq.n	8006768 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80066b6:	fab0 f480 	clz	r4, r0
 80066ba:	3401      	adds	r4, #1
 80066bc:	f004 041f 	and.w	r4, r4, #31
 80066c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80066c4:	0520      	lsls	r0, r4, #20
 80066c6:	e75f      	b.n	8006588 <HAL_ADC_ConfigChannel+0x25c>
 80066c8:	5c001000 	.word	0x5c001000
 80066cc:	000fffff 	.word	0x000fffff
 80066d0:	40022000 	.word	0x40022000
 80066d4:	58026000 	.word	0x58026000
 80066d8:	58026300 	.word	0x58026300
 80066dc:	cb840000 	.word	0xcb840000
 80066e0:	c7520000 	.word	0xc7520000
 80066e4:	cfb80000 	.word	0xcfb80000
 80066e8:	40022300 	.word	0x40022300
 80066ec:	40022100 	.word	0x40022100
 80066f0:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066f4:	0208      	lsls	r0, r1, #8
 80066f6:	f53f aec2 	bmi.w	800647e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066fa:	491f      	ldr	r1, [pc, #124]	; (8006778 <HAL_ADC_ConfigChannel+0x44c>)
 80066fc:	428a      	cmp	r2, r1
 80066fe:	f47f aebe 	bne.w	800647e <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006702:	4a1e      	ldr	r2, [pc, #120]	; (800677c <HAL_ADC_ConfigChannel+0x450>)
 8006704:	481e      	ldr	r0, [pc, #120]	; (8006780 <HAL_ADC_ConfigChannel+0x454>)
 8006706:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006708:	68a9      	ldr	r1, [r5, #8]
 800670a:	0992      	lsrs	r2, r2, #6
 800670c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006710:	fba0 0202 	umull	r0, r2, r0, r2
 8006714:	4331      	orrs	r1, r6
 8006716:	0992      	lsrs	r2, r2, #6
 8006718:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800671c:	3201      	adds	r2, #1
 800671e:	60a9      	str	r1, [r5, #8]
 8006720:	0052      	lsls	r2, r2, #1
 8006722:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006724:	9a01      	ldr	r2, [sp, #4]
 8006726:	2a00      	cmp	r2, #0
 8006728:	f43f aea9 	beq.w	800647e <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 800672c:	9a01      	ldr	r2, [sp, #4]
 800672e:	3a01      	subs	r2, #1
 8006730:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	2a00      	cmp	r2, #0
 8006736:	d1f9      	bne.n	800672c <HAL_ADC_ConfigChannel+0x400>
 8006738:	e6a1      	b.n	800647e <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800673a:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 800673e:	f47f ae9e 	bne.w	800647e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006742:	490d      	ldr	r1, [pc, #52]	; (8006778 <HAL_ADC_ConfigChannel+0x44c>)
 8006744:	428a      	cmp	r2, r1
 8006746:	f47f ae9a 	bne.w	800647e <HAL_ADC_ConfigChannel+0x152>
 800674a:	68aa      	ldr	r2, [r5, #8]
 800674c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006750:	4332      	orrs	r2, r6
 8006752:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006756:	60aa      	str	r2, [r5, #8]
}
 8006758:	e697      	b.n	800648a <HAL_ADC_ConfigChannel+0x15e>
 800675a:	480a      	ldr	r0, [pc, #40]	; (8006784 <HAL_ADC_ConfigChannel+0x458>)
 800675c:	e714      	b.n	8006588 <HAL_ADC_ConfigChannel+0x25c>
 800675e:	2402      	movs	r4, #2
 8006760:	e700      	b.n	8006564 <HAL_ADC_ConfigChannel+0x238>
 8006762:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006766:	e6f0      	b.n	800654a <HAL_ADC_ConfigChannel+0x21e>
 8006768:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800676c:	e70c      	b.n	8006588 <HAL_ADC_ConfigChannel+0x25c>
 800676e:	2502      	movs	r5, #2
 8006770:	e79c      	b.n	80066ac <HAL_ADC_ConfigChannel+0x380>
 8006772:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006776:	e78e      	b.n	8006696 <HAL_ADC_ConfigChannel+0x36a>
 8006778:	58026000 	.word	0x58026000
 800677c:	24000000 	.word	0x24000000
 8006780:	053e2d63 	.word	0x053e2d63
 8006784:	fe500000 	.word	0xfe500000

08006788 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006788:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	07d1      	lsls	r1, r2, #31
 800678e:	d501      	bpl.n	8006794 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006790:	2000      	movs	r0, #0
}
 8006792:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006794:	6899      	ldr	r1, [r3, #8]
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <ADC_Enable+0x94>)
 8006798:	4211      	tst	r1, r2
{
 800679a:	b570      	push	{r4, r5, r6, lr}
 800679c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800679e:	d008      	beq.n	80067b2 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80067a2:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a4:	f043 0310 	orr.w	r3, r3, #16
 80067a8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ac:	4303      	orrs	r3, r0
 80067ae:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80067b0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80067b2:	6899      	ldr	r1, [r3, #8]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <ADC_Enable+0x98>)
 80067b6:	400a      	ands	r2, r1
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80067be:	f7ff fcf7 	bl	80061b0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	4a17      	ldr	r2, [pc, #92]	; (8006824 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80067c6:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01f      	beq.n	800680c <ADC_Enable+0x84>
 80067cc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d01b      	beq.n	800680c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80067d4:	4a14      	ldr	r2, [pc, #80]	; (8006828 <ADC_Enable+0xa0>)
 80067d6:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	07d6      	lsls	r6, r2, #31
 80067dc:	d414      	bmi.n	8006808 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 80067de:	4e10      	ldr	r6, [pc, #64]	; (8006820 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067e0:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067e2:	07d0      	lsls	r0, r2, #31
 80067e4:	d404      	bmi.n	80067f0 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	4032      	ands	r2, r6
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067f0:	f7ff fcde 	bl	80061b0 <HAL_GetTick>
 80067f4:	1b43      	subs	r3, r0, r5
 80067f6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067f8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067fa:	d902      	bls.n	8006802 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	07d1      	lsls	r1, r2, #31
 8006800:	d5ce      	bpl.n	80067a0 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	07d2      	lsls	r2, r2, #31
 8006806:	d5eb      	bpl.n	80067e0 <ADC_Enable+0x58>
  return HAL_OK;
 8006808:	2000      	movs	r0, #0
}
 800680a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800680c:	4a07      	ldr	r2, [pc, #28]	; (800682c <ADC_Enable+0xa4>)
 800680e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006810:	06d2      	lsls	r2, r2, #27
 8006812:	d0e1      	beq.n	80067d8 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006814:	4a06      	ldr	r2, [pc, #24]	; (8006830 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006816:	4293      	cmp	r3, r2
 8006818:	d1de      	bne.n	80067d8 <ADC_Enable+0x50>
 800681a:	e7f5      	b.n	8006808 <ADC_Enable+0x80>
 800681c:	8000003f 	.word	0x8000003f
 8006820:	7fffffc0 	.word	0x7fffffc0
 8006824:	40022000 	.word	0x40022000
 8006828:	58026300 	.word	0x58026300
 800682c:	40022300 	.word	0x40022300
 8006830:	40022100 	.word	0x40022100

08006834 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006834:	4a39      	ldr	r2, [pc, #228]	; (800691c <HAL_ADC_Start+0xe8>)
 8006836:	6803      	ldr	r3, [r0, #0]
 8006838:	4293      	cmp	r3, r2
{
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800683e:	d045      	beq.n	80068cc <HAL_ADC_Start+0x98>
 8006840:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006844:	4293      	cmp	r3, r2
 8006846:	d041      	beq.n	80068cc <HAL_ADC_Start+0x98>
 8006848:	4a35      	ldr	r2, [pc, #212]	; (8006920 <HAL_ADC_Start+0xec>)
 800684a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800684c:	689d      	ldr	r5, [r3, #8]
 800684e:	f015 0504 	ands.w	r5, r5, #4
 8006852:	d141      	bne.n	80068d8 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8006854:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006858:	2b01      	cmp	r3, #1
 800685a:	d03d      	beq.n	80068d8 <HAL_ADC_Start+0xa4>
 800685c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800685e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8006860:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006864:	f7ff ff90 	bl	8006788 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006868:	2800      	cmp	r0, #0
 800686a:	d137      	bne.n	80068dc <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 800686c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800686e:	f006 061f 	and.w	r6, r6, #31
 8006872:	4a2c      	ldr	r2, [pc, #176]	; (8006924 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006874:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8006876:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006878:	492b      	ldr	r1, [pc, #172]	; (8006928 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 800687a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800687e:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 8006880:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006882:	d044      	beq.n	800690e <HAL_ADC_Start+0xda>
 8006884:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006886:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006888:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800688c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800688e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006894:	d03f      	beq.n	8006916 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006896:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006898:	f022 0206 	bic.w	r2, r2, #6
 800689c:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800689e:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 80068a0:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068a2:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068a4:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 80068a6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068aa:	d020      	beq.n	80068ee <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068ac:	2e09      	cmp	r6, #9
 80068ae:	d918      	bls.n	80068e2 <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b6:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80068b8:	68cb      	ldr	r3, [r1, #12]
 80068ba:	019b      	lsls	r3, r3, #6
 80068bc:	d505      	bpl.n	80068ca <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80068be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068c8:	6563      	str	r3, [r4, #84]	; 0x54
}
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_ADC_Start+0xf8>)
 80068ce:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068d0:	689d      	ldr	r5, [r3, #8]
 80068d2:	f015 0504 	ands.w	r5, r5, #4
 80068d6:	d0bd      	beq.n	8006854 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 80068d8:	2002      	movs	r0, #2
}
 80068da:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80068dc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068e2:	f240 2221 	movw	r2, #545	; 0x221
 80068e6:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068ea:	07f5      	lsls	r5, r6, #31
 80068ec:	d5e0      	bpl.n	80068b0 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	0192      	lsls	r2, r2, #6
 80068f2:	d505      	bpl.n	8006900 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80068f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80068f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80068fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068fe:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006900:	6899      	ldr	r1, [r3, #8]
 8006902:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <HAL_ADC_Start+0xfc>)
 8006904:	400a      	ands	r2, r1
 8006906:	f042 0204 	orr.w	r2, r2, #4
 800690a:	609a      	str	r2, [r3, #8]
}
 800690c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800690e:	4903      	ldr	r1, [pc, #12]	; (800691c <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006910:	2e00      	cmp	r6, #0
 8006912:	d0b8      	beq.n	8006886 <HAL_ADC_Start+0x52>
 8006914:	e7bb      	b.n	800688e <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006916:	65a2      	str	r2, [r4, #88]	; 0x58
 8006918:	e7c1      	b.n	800689e <HAL_ADC_Start+0x6a>
 800691a:	bf00      	nop
 800691c:	40022000 	.word	0x40022000
 8006920:	58026300 	.word	0x58026300
 8006924:	fffff0fe 	.word	0xfffff0fe
 8006928:	40022100 	.word	0x40022100
 800692c:	40022300 	.word	0x40022300
 8006930:	7fffffc0 	.word	0x7fffffc0

08006934 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006934:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006936:	4a5a      	ldr	r2, [pc, #360]	; (8006aa0 <ADC_ConfigureBoostMode+0x16c>)
{
 8006938:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800693a:	6803      	ldr	r3, [r0, #0]
 800693c:	4293      	cmp	r3, r2
 800693e:	d029      	beq.n	8006994 <ADC_ConfigureBoostMode+0x60>
 8006940:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006944:	4293      	cmp	r3, r2
 8006946:	d025      	beq.n	8006994 <ADC_ConfigureBoostMode+0x60>
 8006948:	4b56      	ldr	r3, [pc, #344]	; (8006aa4 <ADC_ConfigureBoostMode+0x170>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b333      	cbz	r3, 80069a6 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006958:	f002 f922 	bl	8008ba0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800695c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800695e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006964:	f000 808b 	beq.w	8006a7e <ADC_ConfigureBoostMode+0x14a>
 8006968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800696c:	d06f      	beq.n	8006a4e <ADC_ConfigureBoostMode+0x11a>
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	f000 8084 	beq.w	8006a7e <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006976:	f7ff fc33 	bl	80061e0 <HAL_GetREVID>
 800697a:	f241 0303 	movw	r3, #4099	; 0x1003
 800697e:	4298      	cmp	r0, r3
 8006980:	d84e      	bhi.n	8006a20 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8006982:	4b49      	ldr	r3, [pc, #292]	; (8006aa8 <ADC_ConfigureBoostMode+0x174>)
 8006984:	429d      	cmp	r5, r3
 8006986:	d92d      	bls.n	80069e4 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	6893      	ldr	r3, [r2, #8]
 800698c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006990:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006992:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006994:	4b45      	ldr	r3, [pc, #276]	; (8006aac <ADC_ConfigureBoostMode+0x178>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1d8      	bne.n	8006958 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80069a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80069aa:	f003 fa0d 	bl	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80069ae:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80069b0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80069b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80069b6:	d06c      	beq.n	8006a92 <ADC_ConfigureBoostMode+0x15e>
 80069b8:	d808      	bhi.n	80069cc <ADC_ConfigureBoostMode+0x98>
 80069ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80069be:	d050      	beq.n	8006a62 <ADC_ConfigureBoostMode+0x12e>
 80069c0:	d916      	bls.n	80069f0 <ADC_ConfigureBoostMode+0xbc>
 80069c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c6:	d1d6      	bne.n	8006976 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 80069c8:	0945      	lsrs	r5, r0, #5
        break;
 80069ca:	e7d4      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80069cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80069d0:	d045      	beq.n	8006a5e <ADC_ConfigureBoostMode+0x12a>
 80069d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80069d6:	d1ce      	bne.n	8006976 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80069d8:	f7ff fc02 	bl	80061e0 <HAL_GetREVID>
 80069dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80069e0:	4298      	cmp	r0, r3
 80069e2:	d840      	bhi.n	8006a66 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	6893      	ldr	r3, [r2, #8]
 80069e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ec:	6093      	str	r3, [r2, #8]
}
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80069f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f4:	d006      	beq.n	8006a04 <ADC_ConfigureBoostMode+0xd0>
 80069f6:	d90a      	bls.n	8006a0e <ADC_ConfigureBoostMode+0xda>
 80069f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80069fc:	d002      	beq.n	8006a04 <ADC_ConfigureBoostMode+0xd0>
 80069fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a02:	d1b8      	bne.n	8006976 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a04:	0c9b      	lsrs	r3, r3, #18
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006a0c:	e7b3      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8006a0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a12:	d0f7      	beq.n	8006a04 <ADC_ConfigureBoostMode+0xd0>
 8006a14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a18:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006a1c:	d0f2      	beq.n	8006a04 <ADC_ConfigureBoostMode+0xd0>
 8006a1e:	e7aa      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006a20:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <ADC_ConfigureBoostMode+0x17c>)
 8006a22:	429d      	cmp	r5, r3
 8006a24:	d805      	bhi.n	8006a32 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	6893      	ldr	r3, [r2, #8]
 8006a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2e:	6093      	str	r3, [r2, #8]
}
 8006a30:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006a32:	4b20      	ldr	r3, [pc, #128]	; (8006ab4 <ADC_ConfigureBoostMode+0x180>)
 8006a34:	429d      	cmp	r5, r3
 8006a36:	d91a      	bls.n	8006a6e <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006a38:	4b1f      	ldr	r3, [pc, #124]	; (8006ab8 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006a3a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006a3c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006a3e:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006a40:	d829      	bhi.n	8006a96 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a4a:	6093      	str	r3, [r2, #8]
}
 8006a4c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8006a4e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a50:	f7ff fbc6 	bl	80061e0 <HAL_GetREVID>
 8006a54:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a58:	4298      	cmp	r0, r3
 8006a5a:	d8e1      	bhi.n	8006a20 <ADC_ConfigureBoostMode+0xec>
 8006a5c:	e791      	b.n	8006982 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8006a5e:	09c5      	lsrs	r5, r0, #7
        break;
 8006a60:	e789      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8006a62:	0905      	lsrs	r5, r0, #4
        break;
 8006a64:	e787      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <ADC_ConfigureBoostMode+0x17c>)
 8006a68:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006a6c:	d2db      	bcs.n	8006a26 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	6893      	ldr	r3, [r2, #8]
 8006a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7a:	6093      	str	r3, [r2, #8]
}
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006a84:	f7ff fbac 	bl	80061e0 <HAL_GetREVID>
 8006a88:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a8c:	4298      	cmp	r0, r3
 8006a8e:	d8c7      	bhi.n	8006a20 <ADC_ConfigureBoostMode+0xec>
 8006a90:	e777      	b.n	8006982 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8006a92:	0985      	lsrs	r5, r0, #6
        break;
 8006a94:	e76f      	b.n	8006976 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006a96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a9a:	6093      	str	r3, [r2, #8]
}
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40022000 	.word	0x40022000
 8006aa4:	58026300 	.word	0x58026300
 8006aa8:	01312d00 	.word	0x01312d00
 8006aac:	40022300 	.word	0x40022300
 8006ab0:	00bebc21 	.word	0x00bebc21
 8006ab4:	017d7841 	.word	0x017d7841
 8006ab8:	02faf081 	.word	0x02faf081

08006abc <HAL_ADC_Init>:
{
 8006abc:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006abe:	2300      	movs	r3, #0
{
 8006ac0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006ac2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f000 80d0 	beq.w	8006c6a <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006aca:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006acc:	4604      	mov	r4, r0
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	f000 80ba 	beq.w	8006c48 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006ad4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006ad6:	6893      	ldr	r3, [r2, #8]
 8006ad8:	009d      	lsls	r5, r3, #2
 8006ada:	d503      	bpl.n	8006ae4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006adc:	6891      	ldr	r1, [r2, #8]
 8006ade:	4b71      	ldr	r3, [pc, #452]	; (8006ca4 <HAL_ADC_Init+0x1e8>)
 8006ae0:	400b      	ands	r3, r1
 8006ae2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ae4:	6893      	ldr	r3, [r2, #8]
 8006ae6:	00d8      	lsls	r0, r3, #3
 8006ae8:	d416      	bmi.n	8006b18 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006aea:	4b6f      	ldr	r3, [pc, #444]	; (8006ca8 <HAL_ADC_Init+0x1ec>)
 8006aec:	4d6f      	ldr	r5, [pc, #444]	; (8006cac <HAL_ADC_Init+0x1f0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006af0:	6890      	ldr	r0, [r2, #8]
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	496e      	ldr	r1, [pc, #440]	; (8006cb0 <HAL_ADC_Init+0x1f4>)
 8006af6:	fba5 5303 	umull	r5, r3, r5, r3
 8006afa:	4001      	ands	r1, r0
 8006afc:	099b      	lsrs	r3, r3, #6
 8006afe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006b02:	3301      	adds	r3, #1
 8006b04:	6091      	str	r1, [r2, #8]
 8006b06:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	b12b      	cbz	r3, 8006b18 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f9      	bne.n	8006b0c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b18:	6893      	ldr	r3, [r2, #8]
 8006b1a:	00d9      	lsls	r1, r3, #3
 8006b1c:	d424      	bmi.n	8006b68 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006b20:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b22:	f043 0310 	orr.w	r3, r3, #16
 8006b26:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b2a:	432b      	orrs	r3, r5
 8006b2c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b2e:	6893      	ldr	r3, [r2, #8]
 8006b30:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b36:	d11d      	bne.n	8006b74 <HAL_ADC_Init+0xb8>
 8006b38:	06db      	lsls	r3, r3, #27
 8006b3a:	d41b      	bmi.n	8006b74 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006b3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b3e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006b42:	f043 0302 	orr.w	r3, r3, #2
 8006b46:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b48:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b4a:	07de      	lsls	r6, r3, #31
 8006b4c:	d428      	bmi.n	8006ba0 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b4e:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <HAL_ADC_Init+0x1f8>)
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d017      	beq.n	8006b84 <HAL_ADC_Init+0xc8>
 8006b54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d013      	beq.n	8006b84 <HAL_ADC_Init+0xc8>
 8006b5c:	4b56      	ldr	r3, [pc, #344]	; (8006cb8 <HAL_ADC_Init+0x1fc>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	07d9      	lsls	r1, r3, #31
 8006b62:	d41d      	bmi.n	8006ba0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b64:	4a55      	ldr	r2, [pc, #340]	; (8006cbc <HAL_ADC_Init+0x200>)
 8006b66:	e015      	b.n	8006b94 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b68:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b72:	d0e1      	beq.n	8006b38 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b74:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006b76:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b78:	f043 0310 	orr.w	r3, r3, #16
}
 8006b7c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b80:	b002      	add	sp, #8
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b84:	4a4b      	ldr	r2, [pc, #300]	; (8006cb4 <HAL_ADC_Init+0x1f8>)
 8006b86:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <HAL_ADC_Init+0x204>)
 8006b88:	6892      	ldr	r2, [r2, #8]
 8006b8a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	07d8      	lsls	r0, r3, #31
 8006b90:	d406      	bmi.n	8006ba0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b92:	4a4c      	ldr	r2, [pc, #304]	; (8006cc4 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006b94:	6893      	ldr	r3, [r2, #8]
 8006b96:	6861      	ldr	r1, [r4, #4]
 8006b98:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006ba0:	f7ff fb1e 	bl	80061e0 <HAL_GetREVID>
 8006ba4:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ba8:	68a1      	ldr	r1, [r4, #8]
 8006baa:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006bac:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006bae:	d851      	bhi.n	8006c54 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006bb0:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006bb2:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006bb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006bb6:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006bba:	4302      	orrs	r2, r0
 8006bbc:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d103      	bne.n	8006bca <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006bc2:	6a23      	ldr	r3, [r4, #32]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bcc:	b123      	cbz	r3, 8006bd8 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bce:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006bd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006bd4:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006bd6:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	493b      	ldr	r1, [pc, #236]	; (8006cc8 <HAL_ADC_Init+0x20c>)
 8006bdc:	68d8      	ldr	r0, [r3, #12]
 8006bde:	4001      	ands	r1, r0
 8006be0:	430a      	orrs	r2, r1
 8006be2:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006bea:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bec:	d11c      	bne.n	8006c28 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006bee:	0712      	lsls	r2, r2, #28
 8006bf0:	d41a      	bmi.n	8006c28 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006bf2:	68d9      	ldr	r1, [r3, #12]
 8006bf4:	4a35      	ldr	r2, [pc, #212]	; (8006ccc <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bf6:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bfc:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006c00:	430a      	orrs	r2, r1
 8006c02:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006c04:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	d03a      	beq.n	8006c82 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006c14:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006c16:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006c22:	f7ff fe87 	bl	8006934 <ADC_ConfigureBoostMode>
 8006c26:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c28:	68e2      	ldr	r2, [r4, #12]
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	d021      	beq.n	8006c72 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c30:	f022 020f 	bic.w	r2, r2, #15
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006c38:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c44:	b002      	add	sp, #8
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006c48:	f7fd fda0 	bl	800478c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006c4c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006c4e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006c52:	e73f      	b.n	8006ad4 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006c54:	2910      	cmp	r1, #16
 8006c56:	d1ab      	bne.n	8006bb0 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c58:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006c5a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006c5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c5e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006c62:	430a      	orrs	r2, r1
 8006c64:	f042 021c 	orr.w	r2, r2, #28
 8006c68:	e7a9      	b.n	8006bbe <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006c6a:	2501      	movs	r5, #1
}
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	b002      	add	sp, #8
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c74:	69a2      	ldr	r2, [r4, #24]
 8006c76:	f021 010f 	bic.w	r1, r1, #15
 8006c7a:	3a01      	subs	r2, #1
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c80:	e7d9      	b.n	8006c36 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006c82:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006c86:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006c88:	3901      	subs	r1, #1
 8006c8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c8c:	4332      	orrs	r2, r6
 8006c8e:	691e      	ldr	r6, [r3, #16]
 8006c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006c94:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <HAL_ADC_Init+0x214>)
 8006c96:	4302      	orrs	r2, r0
 8006c98:	4031      	ands	r1, r6
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	e7b7      	b.n	8006c14 <HAL_ADC_Init+0x158>
 8006ca4:	5fffffc0 	.word	0x5fffffc0
 8006ca8:	24000000 	.word	0x24000000
 8006cac:	053e2d63 	.word	0x053e2d63
 8006cb0:	6fffffc0 	.word	0x6fffffc0
 8006cb4:	40022000 	.word	0x40022000
 8006cb8:	58026000 	.word	0x58026000
 8006cbc:	58026300 	.word	0x58026300
 8006cc0:	40022100 	.word	0x40022100
 8006cc4:	40022300 	.word	0x40022300
 8006cc8:	fff0c003 	.word	0xfff0c003
 8006ccc:	ffffbffc 	.word	0xffffbffc
 8006cd0:	fc00f81e 	.word	0xfc00f81e

08006cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006cd4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cd6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006cda:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cdc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006cde:	2a01      	cmp	r2, #1
 8006ce0:	d04d      	beq.n	8006d7e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006ce2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ce4:	4c2b      	ldr	r4, [pc, #172]	; (8006d94 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ce6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006ce8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006cea:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006cec:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006cee:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006cf0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006cf4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006cf6:	d008      	beq.n	8006d0a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cf8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cfe:	f041 0120 	orr.w	r1, r1, #32
 8006d02:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006d04:	b01a      	add	sp, #104	; 0x68
 8006d06:	bcf0      	pop	{r4, r5, r6, r7}
 8006d08:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d0a:	4c23      	ldr	r4, [pc, #140]	; (8006d98 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006d0c:	68a2      	ldr	r2, [r4, #8]
 8006d0e:	0752      	lsls	r2, r2, #29
 8006d10:	d50b      	bpl.n	8006d2a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d12:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006d16:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d18:	f042 0220 	orr.w	r2, r2, #32
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006d24:	b01a      	add	sp, #104	; 0x68
 8006d26:	bcf0      	pop	{r4, r5, r6, r7}
 8006d28:	4770      	bx	lr
 8006d2a:	68a8      	ldr	r0, [r5, #8]
 8006d2c:	f010 0004 	ands.w	r0, r0, #4
 8006d30:	d1f0      	bne.n	8006d14 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d32:	b1c6      	cbz	r6, 8006d66 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006d34:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006da0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006d38:	684f      	ldr	r7, [r1, #4]
 8006d3a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006d3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d42:	433a      	orrs	r2, r7
 8006d44:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d48:	68ad      	ldr	r5, [r5, #8]
 8006d4a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d4c:	432a      	orrs	r2, r5
 8006d4e:	07d4      	lsls	r4, r2, #31
 8006d50:	d413      	bmi.n	8006d7a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006d52:	688a      	ldr	r2, [r1, #8]
 8006d54:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006d58:	4910      	ldr	r1, [pc, #64]	; (8006d9c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006d5a:	4316      	orrs	r6, r2
 8006d5c:	4021      	ands	r1, r4
 8006d5e:	430e      	orrs	r6, r1
 8006d60:	f8cc 6008 	str.w	r6, [ip, #8]
 8006d64:	e7db      	b.n	8006d1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006d66:	490e      	ldr	r1, [pc, #56]	; (8006da0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006d68:	688a      	ldr	r2, [r1, #8]
 8006d6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d6e:	608a      	str	r2, [r1, #8]
 8006d70:	68a8      	ldr	r0, [r5, #8]
 8006d72:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d74:	4302      	orrs	r2, r0
 8006d76:	07d0      	lsls	r0, r2, #31
 8006d78:	d505      	bpl.n	8006d86 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e7cf      	b.n	8006d1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006d7e:	2002      	movs	r0, #2
}
 8006d80:	b01a      	add	sp, #104	; 0x68
 8006d82:	bcf0      	pop	{r4, r5, r6, r7}
 8006d84:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d86:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d88:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d8a:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006d8c:	4022      	ands	r2, r4
 8006d8e:	608a      	str	r2, [r1, #8]
 8006d90:	e7c5      	b.n	8006d1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006d92:	bf00      	nop
 8006d94:	40022000 	.word	0x40022000
 8006d98:	40022100 	.word	0x40022100
 8006d9c:	fffff0e0 	.word	0xfffff0e0
 8006da0:	40022300 	.word	0x40022300

08006da4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da4:	4907      	ldr	r1, [pc, #28]	; (8006dc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006da6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006da8:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006daa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006db0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006db2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006db6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006db8:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dbc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006dbe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006dc0:	60cb      	str	r3, [r1, #12]
 8006dc2:	4770      	bx	lr
 8006dc4:	e000ed00 	.word	0xe000ed00
 8006dc8:	05fa0000 	.word	0x05fa0000

08006dcc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_NVIC_SetPriority+0x68>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dd4:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dd6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dda:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ddc:	2d04      	cmp	r5, #4
 8006dde:	bf28      	it	cs
 8006de0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006de2:	2c06      	cmp	r4, #6
 8006de4:	d919      	bls.n	8006e1a <HAL_NVIC_SetPriority+0x4e>
 8006de6:	3b03      	subs	r3, #3
 8006de8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dec:	409c      	lsls	r4, r3
 8006dee:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006df2:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006df6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006df8:	fa04 f405 	lsl.w	r4, r4, r5
 8006dfc:	ea21 0104 	bic.w	r1, r1, r4
 8006e00:	fa01 f103 	lsl.w	r1, r1, r3
 8006e04:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006e08:	db0a      	blt.n	8006e20 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e0a:	0109      	lsls	r1, r1, #4
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <HAL_NVIC_SetPriority+0x6c>)
 8006e0e:	b2c9      	uxtb	r1, r1
 8006e10:	4403      	add	r3, r0
 8006e12:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e16:	bc30      	pop	{r4, r5}
 8006e18:	4770      	bx	lr
 8006e1a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	e7e8      	b.n	8006df2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e20:	f000 000f 	and.w	r0, r0, #15
 8006e24:	0109      	lsls	r1, r1, #4
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <HAL_NVIC_SetPriority+0x70>)
 8006e28:	b2c9      	uxtb	r1, r1
 8006e2a:	4403      	add	r3, r0
 8006e2c:	7619      	strb	r1, [r3, #24]
 8006e2e:	bc30      	pop	{r4, r5}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	e000ed00 	.word	0xe000ed00
 8006e38:	e000e100 	.word	0xe000e100
 8006e3c:	e000ecfc 	.word	0xe000ecfc

08006e40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e40:	2800      	cmp	r0, #0
 8006e42:	db07      	blt.n	8006e54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e44:	2301      	movs	r3, #1
 8006e46:	f000 011f 	and.w	r1, r0, #31
 8006e4a:	4a03      	ldr	r2, [pc, #12]	; (8006e58 <HAL_NVIC_EnableIRQ+0x18>)
 8006e4c:	0940      	lsrs	r0, r0, #5
 8006e4e:	408b      	lsls	r3, r1
 8006e50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	e000e100 	.word	0xe000e100

08006e5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e5c:	3801      	subs	r0, #1
 8006e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006e62:	d20d      	bcs.n	8006e80 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e66:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e68:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e6a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6c:	25f0      	movs	r5, #240	; 0xf0
 8006e6e:	4c06      	ldr	r4, [pc, #24]	; (8006e88 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e70:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e72:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e74:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e7a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006e7c:	bc30      	pop	{r4, r5}
 8006e7e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006e80:	2001      	movs	r0, #1
 8006e82:	4770      	bx	lr
 8006e84:	e000e010 	.word	0xe000e010
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006e8c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006e90:	4a04      	ldr	r2, [pc, #16]	; (8006ea4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006e92:	2000      	movs	r0, #0
 8006e94:	4904      	ldr	r1, [pc, #16]	; (8006ea8 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006e96:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8006e9e:	6048      	str	r0, [r1, #4]
}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	e000ed00 	.word	0xe000ed00
 8006ea8:	e000ed90 	.word	0xe000ed90

08006eac <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006eac:	4a06      	ldr	r2, [pc, #24]	; (8006ec8 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006eae:	f040 0001 	orr.w	r0, r0, #1
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <HAL_MPU_Enable+0x20>)
 8006eb4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006eb6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ebc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006ec2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006ec6:	4770      	bx	lr
 8006ec8:	e000ed00 	.word	0xe000ed00
 8006ecc:	e000ed90 	.word	0xe000ed90

08006ed0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006ed0:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <HAL_MPU_ConfigRegion+0x4c>)
 8006ed2:	7843      	ldrb	r3, [r0, #1]
 8006ed4:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006ed6:	7801      	ldrb	r1, [r0, #0]
 8006ed8:	b1e9      	cbz	r1, 8006f16 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006eda:	6843      	ldr	r3, [r0, #4]
{
 8006edc:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8006ede:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ee0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ee2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ee4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006ee6:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ee8:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006eea:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006eee:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	7a01      	ldrb	r1, [r0, #8]
 8006ef4:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ef8:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006efa:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006efe:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f00:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006f04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006f08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006f0c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006f10:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f12:	6113      	str	r3, [r2, #16]
}
 8006f14:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8006f16:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006f18:	6111      	str	r1, [r2, #16]
 8006f1a:	4770      	bx	lr
 8006f1c:	e000ed90 	.word	0xe000ed90

08006f20 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006f20:	b470      	push	{r4, r5, r6}
 8006f22:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006f24:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006f28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006f2c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006f2e:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006f32:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8006f36:	ea43 0304 	orr.w	r3, r3, r4
 8006f3a:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006f3c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006f3e:	d008      	beq.n	8006f52 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006f40:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006f44:	d002      	beq.n	8006f4c <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006f46:	60e9      	str	r1, [r5, #12]
  }
}
 8006f48:	bc70      	pop	{r4, r5, r6}
 8006f4a:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006f4c:	6169      	str	r1, [r5, #20]
}
 8006f4e:	bc70      	pop	{r4, r5, r6}
 8006f50:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006f52:	6883      	ldr	r3, [r0, #8]
 8006f54:	b1b3      	cbz	r3, 8006f84 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d017      	beq.n	8006f8a <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006f5a:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006f5c:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006f60:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006f64:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006f66:	d01e      	beq.n	8006fa6 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006f68:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006f6a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006f6e:	d00f      	beq.n	8006f90 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8006f70:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8006f72:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006f74:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8006f76:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006f78:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006f7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006f80:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006f84:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8006f86:	bc70      	pop	{r4, r5, r6}
 8006f88:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8006f8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006f8e:	e7f9      	b.n	8006f84 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006f90:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8006f92:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006f94:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8006f96:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006f98:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8006f9c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8006fa0:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006fa4:	e7ee      	b.n	8006f84 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006fa6:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8006fa8:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006faa:	02c9      	lsls	r1, r1, #11
 8006fac:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006fb0:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006fb4:	e7e6      	b.n	8006f84 <DMA2D_SetConfig+0x64>
 8006fb6:	bf00      	nop

08006fb8 <HAL_DMA2D_MspInit>:
}
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop

08006fbc <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d036      	beq.n	800702e <HAL_DMA2D_Init+0x72>
{
 8006fc0:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006fc2:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006fcc:	b353      	cbz	r3, 8007024 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006fce:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006fd0:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006fd2:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006fd4:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006fd6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006fda:	4916      	ldr	r1, [pc, #88]	; (8007034 <HAL_DMA2D_Init+0x78>)
 8006fdc:	681e      	ldr	r6, [r3, #0]
 8006fde:	6862      	ldr	r2, [r4, #4]
 8006fe0:	4031      	ands	r1, r6
 8006fe2:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006fe4:	4814      	ldr	r0, [pc, #80]	; (8007038 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006fe6:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006fe8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006fea:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006fec:	69a1      	ldr	r1, [r4, #24]
 8006fee:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006ff0:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ff2:	4912      	ldr	r1, [pc, #72]	; (800703c <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006ff4:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006ff6:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006ff8:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ffa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006ffc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007000:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007002:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007004:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007006:	0552      	lsls	r2, r2, #21
 8007008:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800700a:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800700c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800700e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8007012:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007014:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007018:	430a      	orrs	r2, r1
 800701a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800701c:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800701e:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8007022:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8007024:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8007028:	f7ff ffc6 	bl	8006fb8 <HAL_DMA2D_MspInit>
 800702c:	e7cf      	b.n	8006fce <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800702e:	2001      	movs	r0, #1
}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	fff8ffbf 	.word	0xfff8ffbf
 8007038:	fffffef8 	.word	0xfffffef8
 800703c:	ffff0000 	.word	0xffff0000

08007040 <HAL_DMA2D_Start>:
{
 8007040:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8007042:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8007046:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8007048:	2d01      	cmp	r5, #1
 800704a:	d011      	beq.n	8007070 <HAL_DMA2D_Start+0x30>
 800704c:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800704e:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007050:	2502      	movs	r5, #2
 8007052:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007054:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8007056:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800705a:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800705e:	f7ff ff5f 	bl	8006f20 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8007062:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8007064:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8007066:	6813      	ldr	r3, [r2, #0]
 8007068:	4333      	orrs	r3, r6
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	b003      	add	sp, #12
 800706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8007070:	2002      	movs	r0, #2
}
 8007072:	b003      	add	sp, #12
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	bf00      	nop

08007078 <HAL_DMA2D_CLUTLoad>:
{
 8007078:	b430      	push	{r4, r5}
 800707a:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 800707c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8007080:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 8007082:	2c01      	cmp	r4, #1
{
 8007084:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8007088:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 800708c:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 800708e:	d02b      	beq.n	80070e8 <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007090:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8007092:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007094:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007098:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 800709a:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800709e:	b18a      	cbz	r2, 80070c4 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80070a0:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	4c12      	ldr	r4, [pc, #72]	; (80070f0 <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 80070a6:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80070a8:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 80070aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070ae:	69d1      	ldr	r1, [r2, #28]
 80070b0:	400c      	ands	r4, r1
 80070b2:	4323      	orrs	r3, r4
 80070b4:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 80070b6:	69d3      	ldr	r3, [r2, #28]
 80070b8:	f043 0320 	orr.w	r3, r3, #32
 80070bc:	61d3      	str	r3, [r2, #28]
}
 80070be:	b004      	add	sp, #16
 80070c0:	bc30      	pop	{r4, r5}
 80070c2:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80070c4:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	4c09      	ldr	r4, [pc, #36]	; (80070f0 <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 80070ca:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 80070cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070d0:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 80070d2:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 80070d4:	400c      	ands	r4, r1
 80070d6:	4323      	orrs	r3, r4
 80070d8:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 80070da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80070dc:	f043 0320 	orr.w	r3, r3, #32
 80070e0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80070e2:	b004      	add	sp, #16
 80070e4:	bc30      	pop	{r4, r5}
 80070e6:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 80070e8:	2002      	movs	r0, #2
}
 80070ea:	b004      	add	sp, #16
 80070ec:	bc30      	pop	{r4, r5}
 80070ee:	4770      	bx	lr
 80070f0:	ffff00ef 	.word	0xffff00ef

080070f4 <HAL_DMA2D_PollForTransfer>:
{
 80070f4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80070f6:	2300      	movs	r3, #0
{
 80070f8:	b082      	sub	sp, #8
 80070fa:	4605      	mov	r5, r0
 80070fc:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 80070fe:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007100:	6803      	ldr	r3, [r0, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	07d2      	lsls	r2, r2, #31
 8007106:	d40f      	bmi.n	8007128 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007108:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800710a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800710c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800710e:	0692      	lsls	r2, r2, #26
 8007110:	d433      	bmi.n	800717a <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8007112:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007114:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007116:	2101      	movs	r1, #1
  return HAL_OK;
 8007118:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800711a:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800711c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007120:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8007124:	b002      	add	sp, #8
 8007126:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8007128:	f7ff f842 	bl	80061b0 <HAL_GetTick>
 800712c:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	e001      	b.n	8007136 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8007132:	1c60      	adds	r0, r4, #1
 8007134:	d148      	bne.n	80071c8 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	0791      	lsls	r1, r2, #30
 800713a:	d4e5      	bmi.n	8007108 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007140:	9a01      	ldr	r2, [sp, #4]
 8007142:	f012 0f21 	tst.w	r2, #33	; 0x21
 8007146:	d0f4      	beq.n	8007132 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007148:	9a01      	ldr	r2, [sp, #4]
 800714a:	0696      	lsls	r6, r2, #26
 800714c:	d503      	bpl.n	8007156 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800714e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007150:	f042 0202 	orr.w	r2, r2, #2
 8007154:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007156:	9a01      	ldr	r2, [sp, #4]
 8007158:	07d4      	lsls	r4, r2, #31
 800715a:	d503      	bpl.n	8007164 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800715c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007164:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007166:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8007168:	2200      	movs	r2, #0
        return HAL_ERROR;
 800716a:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800716c:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800716e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8007172:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8007176:	b002      	add	sp, #8
 8007178:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800717a:	f7ff f819 	bl	80061b0 <HAL_GetTick>
 800717e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	e001      	b.n	8007188 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8007184:	1c61      	adds	r1, r4, #1
 8007186:	d132      	bne.n	80071ee <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	06d2      	lsls	r2, r2, #27
 800718c:	d4c1      	bmi.n	8007112 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007192:	9a01      	ldr	r2, [sp, #4]
 8007194:	f012 0f29 	tst.w	r2, #41	; 0x29
 8007198:	d0f4      	beq.n	8007184 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800719a:	9a01      	ldr	r2, [sp, #4]
 800719c:	0716      	lsls	r6, r2, #28
 800719e:	d503      	bpl.n	80071a8 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80071a0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80071a2:	f042 0204 	orr.w	r2, r2, #4
 80071a6:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80071a8:	9a01      	ldr	r2, [sp, #4]
 80071aa:	0694      	lsls	r4, r2, #26
 80071ac:	d503      	bpl.n	80071b6 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80071ae:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80071b0:	f042 0202 	orr.w	r2, r2, #2
 80071b4:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80071b6:	9a01      	ldr	r2, [sp, #4]
 80071b8:	07d0      	lsls	r0, r2, #31
 80071ba:	d503      	bpl.n	80071c4 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80071bc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80071c4:	2429      	movs	r4, #41	; 0x29
 80071c6:	e7ce      	b.n	8007166 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071c8:	f7fe fff2 	bl	80061b0 <HAL_GetTick>
 80071cc:	1b80      	subs	r0, r0, r6
 80071ce:	42a0      	cmp	r0, r4
 80071d0:	d801      	bhi.n	80071d6 <HAL_DMA2D_PollForTransfer+0xe2>
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d1ab      	bne.n	800712e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80071d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80071d8:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80071da:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80071dc:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80071e0:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80071e2:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80071e6:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80071e8:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 80071ec:	e79a      	b.n	8007124 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071ee:	f7fe ffdf 	bl	80061b0 <HAL_GetTick>
 80071f2:	1b80      	subs	r0, r0, r6
 80071f4:	42a0      	cmp	r0, r4
 80071f6:	d8ee      	bhi.n	80071d6 <HAL_DMA2D_PollForTransfer+0xe2>
 80071f8:	2c00      	cmp	r4, #0
 80071fa:	d1c1      	bne.n	8007180 <HAL_DMA2D_PollForTransfer+0x8c>
 80071fc:	e7eb      	b.n	80071d6 <HAL_DMA2D_PollForTransfer+0xe2>
 80071fe:	bf00      	nop

08007200 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8007200:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8007204:	2a01      	cmp	r2, #1
 8007206:	d063      	beq.n	80072d0 <HAL_DMA2D_ConfigLayer+0xd0>
 8007208:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800720a:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800720e:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007210:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007214:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007216:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007218:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800721c:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007220:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007222:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8007224:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007226:	0512      	lsls	r2, r2, #20
 8007228:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800722a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800722e:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007232:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007234:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007236:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800723a:	d922      	bls.n	8007282 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800723c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800723e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007242:	b981      	cbnz	r1, 8007266 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	4923      	ldr	r1, [pc, #140]	; (80072d4 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007248:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800724a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800724c:	4029      	ands	r1, r5
 800724e:	430a      	orrs	r2, r1
 8007250:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007252:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8007254:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007256:	2101      	movs	r1, #1
  return HAL_OK;
 8007258:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800725a:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800725e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8007262:	bc70      	pop	{r4, r5, r6}
 8007264:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007266:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007268:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800726a:	d129      	bne.n	80072c0 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800726c:	69e6      	ldr	r6, [r4, #28]
 800726e:	491a      	ldr	r1, [pc, #104]	; (80072d8 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007270:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007272:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007274:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007276:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800727a:	430a      	orrs	r2, r1
 800727c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800727e:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007280:	e7e8      	b.n	8007254 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007282:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007284:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8007288:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800728a:	b161      	cbz	r1, 80072a6 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	4c11      	ldr	r4, [pc, #68]	; (80072d4 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007290:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007292:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007294:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007296:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007298:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800729c:	4322      	orrs	r2, r4
 800729e:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80072a0:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80072a2:	620d      	str	r5, [r1, #32]
 80072a4:	e7d6      	b.n	8007254 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80072a6:	6819      	ldr	r1, [r3, #0]
 80072a8:	4c0a      	ldr	r4, [pc, #40]	; (80072d4 <HAL_DMA2D_ConfigLayer+0xd4>)
 80072aa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80072ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80072ae:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80072b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80072b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80072b6:	4322      	orrs	r2, r4
 80072b8:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80072ba:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80072bc:	6288      	str	r0, [r1, #40]	; 0x28
 80072be:	e7c9      	b.n	8007254 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80072c0:	69e5      	ldr	r5, [r4, #28]
 80072c2:	4904      	ldr	r1, [pc, #16]	; (80072d4 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80072c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80072c6:	4029      	ands	r1, r5
 80072c8:	430a      	orrs	r2, r1
 80072ca:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80072cc:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80072ce:	e7c1      	b.n	8007254 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80072d0:	2002      	movs	r0, #2
}
 80072d2:	4770      	bx	lr
 80072d4:	00ccfff0 	.word	0x00ccfff0
 80072d8:	00c0fff0 	.word	0x00c0fff0

080072dc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	4605      	mov	r5, r0
 80072e2:	4688      	mov	r8, r1
 80072e4:	4617      	mov	r7, r2
 80072e6:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80072e8:	f7fe ff62 	bl	80061b0 <HAL_GetTick>
 80072ec:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80072ee:	e005      	b.n	80072fc <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80072f0:	f7fe ff5e 	bl	80061b0 <HAL_GetTick>
 80072f4:	1b84      	subs	r4, r0, r6
 80072f6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80072fa:	d80e      	bhi.n	800731a <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80072fc:	682c      	ldr	r4, [r5, #0]
 80072fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007300:	07db      	lsls	r3, r3, #31
 8007302:	d5f5      	bpl.n	80072f0 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007304:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8007308:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 800730a:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800730c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007310:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007314:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800731a:	2003      	movs	r0, #3
}
 800731c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007320 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007324:	2800      	cmp	r0, #0
 8007326:	f000 80b3 	beq.w	8007490 <HAL_DSI_Init+0x16c>
{
 800732a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800732c:	7c43      	ldrb	r3, [r0, #17]
{
 800732e:	b083      	sub	sp, #12
 8007330:	460d      	mov	r5, r1
 8007332:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80a8 	beq.w	800748a <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800733a:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800733c:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800733e:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007340:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007342:	9200      	str	r2, [sp, #0]
 8007344:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007348:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800734c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007350:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800735c:	f7fe ff28 	bl	80061b0 <HAL_GetTick>
 8007360:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007362:	e006      	b.n	8007372 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007364:	f7fe ff24 	bl	80061b0 <HAL_GetTick>
 8007368:	1b83      	subs	r3, r0, r6
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736e:	f200 8089 	bhi.w	8007484 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007378:	04d1      	lsls	r1, r2, #19
 800737a:	d5f3      	bpl.n	8007364 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800737c:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800737e:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007380:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007384:	682e      	ldr	r6, [r5, #0]
 8007386:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007388:	4942      	ldr	r1, [pc, #264]	; (8007494 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800738a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800738e:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007390:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007392:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007396:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800739a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800739e:	430a      	orrs	r2, r1
 80073a0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80073a4:	9001      	str	r0, [sp, #4]
 80073a6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80073b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80073be:	f7fe fef7 	bl	80061b0 <HAL_GetTick>
 80073c2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80073c4:	e005      	b.n	80073d2 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80073c6:	f7fe fef3 	bl	80061b0 <HAL_GetTick>
 80073ca:	1b80      	subs	r0, r0, r6
 80073cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80073d0:	d858      	bhi.n	8007484 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80073d8:	05d2      	lsls	r2, r2, #23
 80073da:	d5f4      	bpl.n	80073c6 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80073dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80073e0:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80073e4:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 80073e6:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80073e8:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80073ec:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80073ee:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80073f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80073f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80073fa:	f022 0203 	bic.w	r2, r2, #3
 80073fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007402:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007406:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007408:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800740a:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800740c:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007410:	bf38      	it	cc
 8007412:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007414:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007418:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800741c:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800741e:	f020 0003 	bic.w	r0, r0, #3
 8007422:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007426:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800742a:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800742c:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800742e:	682d      	ldr	r5, [r5, #0]
 8007430:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007434:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007438:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800743a:	fb0c f505 	mul.w	r5, ip, r5
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007440:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007444:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007448:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800744a:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800744c:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800744e:	ea46 060e 	orr.w	r6, r6, lr
 8007452:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8007454:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007456:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800745a:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800745e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8007462:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8007466:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007468:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800746c:	432a      	orrs	r2, r5
 800746e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007472:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007476:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800747a:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800747c:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800747e:	7466      	strb	r6, [r4, #17]
}
 8007480:	b003      	add	sp, #12
 8007482:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007484:	2003      	movs	r0, #3
}
 8007486:	b003      	add	sp, #12
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800748a:	f7ff ff49 	bl	8007320 <HAL_DSI_MspInit>
 800748e:	e754      	b.n	800733a <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8007490:	2001      	movs	r0, #1
}
 8007492:	4770      	bx	lr
 8007494:	fffc8603 	.word	0xfffc8603
 8007498:	003d0900 	.word	0x003d0900

0800749c <HAL_DSI_TearingEffectCallback>:
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop

080074a0 <HAL_DSI_EndOfRefreshCallback>:
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <HAL_DSI_ErrorCallback>:
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80074a8:	6803      	ldr	r3, [r0, #0]
 80074aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80074ae:	07d1      	lsls	r1, r2, #31
{
 80074b0:	b510      	push	{r4, lr}
 80074b2:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80074b4:	d503      	bpl.n	80074be <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80074b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074ba:	07d2      	lsls	r2, r2, #31
 80074bc:	d462      	bmi.n	8007584 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80074be:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80074c2:	0791      	lsls	r1, r2, #30
 80074c4:	d503      	bpl.n	80074ce <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80074c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074ca:	0792      	lsls	r2, r2, #30
 80074cc:	d44f      	bmi.n	800756e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d04b      	beq.n	800756c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80074da:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80074de:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80074e2:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80074e4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80074e8:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80074ea:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80074ec:	b119      	cbz	r1, 80074f6 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80074ee:	6961      	ldr	r1, [r4, #20]
 80074f0:	f041 0101 	orr.w	r1, r1, #1
 80074f4:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80074f6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80074fa:	d003      	beq.n	8007504 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80074fc:	6962      	ldr	r2, [r4, #20]
 80074fe:	f042 0202 	orr.w	r2, r2, #2
 8007502:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007504:	07d8      	lsls	r0, r3, #31
 8007506:	d503      	bpl.n	8007510 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007508:	6962      	ldr	r2, [r4, #20]
 800750a:	f042 0204 	orr.w	r2, r2, #4
 800750e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007510:	0799      	lsls	r1, r3, #30
 8007512:	d503      	bpl.n	800751c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007514:	6962      	ldr	r2, [r4, #20]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800751c:	f013 0f0c 	tst.w	r3, #12
 8007520:	d003      	beq.n	800752a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007522:	6962      	ldr	r2, [r4, #20]
 8007524:	f042 0210 	orr.w	r2, r2, #16
 8007528:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800752a:	06da      	lsls	r2, r3, #27
 800752c:	d503      	bpl.n	8007536 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800752e:	6962      	ldr	r2, [r4, #20]
 8007530:	f042 0220 	orr.w	r2, r2, #32
 8007534:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007536:	0698      	lsls	r0, r3, #26
 8007538:	d503      	bpl.n	8007542 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800753a:	6962      	ldr	r2, [r4, #20]
 800753c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007540:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007542:	0659      	lsls	r1, r3, #25
 8007544:	d503      	bpl.n	800754e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007546:	6962      	ldr	r2, [r4, #20]
 8007548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800754c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800754e:	061a      	lsls	r2, r3, #24
 8007550:	d503      	bpl.n	800755a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007552:	6962      	ldr	r2, [r4, #20]
 8007554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007558:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800755a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800755e:	d003      	beq.n	8007568 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007560:	6963      	ldr	r3, [r4, #20]
 8007562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007566:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007568:	6963      	ldr	r3, [r4, #20]
 800756a:	b93b      	cbnz	r3, 800757c <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800756c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800756e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007570:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007572:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007576:	f7ff ff93 	bl	80074a0 <HAL_DSI_EndOfRefreshCallback>
 800757a:	e7a8      	b.n	80074ce <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800757c:	4620      	mov	r0, r4
 800757e:	f7ff ff91 	bl	80074a4 <HAL_DSI_ErrorCallback>
}
 8007582:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007584:	2201      	movs	r2, #1
 8007586:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800758a:	f7ff ff87 	bl	800749c <HAL_DSI_TearingEffectCallback>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	e795      	b.n	80074be <HAL_DSI_IRQHandler+0x16>
 8007592:	bf00      	nop

08007594 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007594:	7c03      	ldrb	r3, [r0, #16]
 8007596:	2b01      	cmp	r3, #1
 8007598:	f000 8113 	beq.w	80077c2 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800759c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800759e:	2201      	movs	r2, #1
{
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 80075a4:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 80075a6:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80075a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 80075aa:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80075ac:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80075b0:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80075b4:	4e84      	ldr	r6, [pc, #528]	; (80077c8 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80075b6:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80075b8:	4d84      	ldr	r5, [pc, #528]	; (80077cc <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80075ba:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80075be:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80075c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80075cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ce:	f022 0203 	bic.w	r2, r2, #3
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80075d4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80075d6:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80075da:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80075de:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80075e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075e2:	ea06 0602 	and.w	r6, r6, r2
 80075e6:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80075e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ea:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80075ee:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80075f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80075f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f6:	ea02 0205 	and.w	r2, r2, r5
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80075fc:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80075fe:	ea47 0708 	orr.w	r7, r7, r8
 8007602:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007604:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8007606:	ea06 0605 	and.w	r6, r6, r5
 800760a:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800760c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800760e:	ea45 050e 	orr.w	r5, r5, lr
 8007612:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007614:	68dd      	ldr	r5, [r3, #12]
 8007616:	f025 0503 	bic.w	r5, r5, #3
 800761a:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	ea42 020c 	orr.w	r2, r2, ip
 8007622:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007624:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007626:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007628:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800762c:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007630:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007632:	ea42 0206 	orr.w	r2, r2, r6
 8007636:	695d      	ldr	r5, [r3, #20]
 8007638:	ea42 0207 	orr.w	r2, r2, r7
 800763c:	ea42 0205 	orr.w	r2, r2, r5
 8007640:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	f022 020f 	bic.w	r2, r2, #15
 8007648:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	ea42 0200 	orr.w	r2, r2, r0
 8007650:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007652:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007656:	f022 020e 	bic.w	r2, r2, #14
 800765a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800765e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007662:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007666:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800766a:	d107      	bne.n	800767c <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800766c:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800766e:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007670:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8007674:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	432a      	orrs	r2, r5
 800767a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800767c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800767e:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007680:	4a53      	ldr	r2, [pc, #332]	; (80077d0 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007682:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007684:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007686:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800768a:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800768e:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007690:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007692:	4f50      	ldr	r7, [pc, #320]	; (80077d4 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007694:	4305      	orrs	r5, r0
 8007696:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007698:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800769a:	4010      	ands	r0, r2
 800769c:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800769e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80076a0:	484d      	ldr	r0, [pc, #308]	; (80077d8 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80076a2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80076a6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80076aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80076ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076ae:	4017      	ands	r7, r2
 80076b0:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80076b2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80076b4:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80076b8:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80076bc:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80076be:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80076c0:	4005      	ands	r5, r0
 80076c2:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80076c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80076ca:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80076d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076d2:	4002      	ands	r2, r0
 80076d4:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80076d6:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80076d8:	4a3b      	ldr	r2, [pc, #236]	; (80077c8 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80076da:	ea47 070e 	orr.w	r7, r7, lr
 80076de:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80076e0:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80076e2:	4007      	ands	r7, r0

  return HAL_OK;
 80076e4:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80076e6:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80076e8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80076ea:	ea45 050c 	orr.w	r5, r5, ip
 80076ee:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80076f0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80076f2:	402a      	ands	r2, r5
 80076f4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80076f6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80076f8:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80076fa:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80076fe:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007700:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007704:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007706:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007708:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800770c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800770e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007710:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007714:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800771a:	699f      	ldr	r7, [r3, #24]
 800771c:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8007720:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007722:	699d      	ldr	r5, [r3, #24]
 8007724:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007728:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800772c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800772e:	699d      	ldr	r5, [r3, #24]
 8007730:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007734:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800773c:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007740:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8007742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800774a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800774c:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007750:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007754:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8007756:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007758:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800775c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800775e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007760:	ea45 050e 	orr.w	r5, r5, lr
 8007764:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8007766:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007768:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800776c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800776e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007770:	ea42 020c 	orr.w	r2, r2, ip
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007776:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007778:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800777a:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800777e:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007782:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007786:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007788:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800778e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007796:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007798:	ea45 050e 	orr.w	r5, r5, lr
 800779c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800779e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80077a0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80077a4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80077a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80077a8:	ea41 010c 	orr.w	r1, r1, ip
 80077ac:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80077ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80077b0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80077b4:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80077b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b8:	433a      	orrs	r2, r7
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 80077bc:	7426      	strb	r6, [r4, #16]
}
 80077be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 80077c2:	2002      	movs	r0, #2
}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	ffffc000 	.word	0xffffc000
 80077cc:	ffffe000 	.word	0xffffe000
 80077d0:	fffff000 	.word	0xfffff000
 80077d4:	ffff8000 	.word	0xffff8000
 80077d8:	fffffc00 	.word	0xfffffc00

080077dc <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80077dc:	7c02      	ldrb	r2, [r0, #16]
 80077de:	2a01      	cmp	r2, #1
 80077e0:	d00e      	beq.n	8007800 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80077e2:	6802      	ldr	r2, [r0, #0]
 80077e4:	4603      	mov	r3, r0
{
 80077e6:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80077e8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80077ea:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80077ec:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 80077f0:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80077f2:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80077f4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80077f6:	4321      	orrs	r1, r4
 80077f8:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 80077fa:	741d      	strb	r5, [r3, #16]
}
 80077fc:	bc30      	pop	{r4, r5}
 80077fe:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007800:	2002      	movs	r0, #2
}
 8007802:	4770      	bx	lr

08007804 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007804:	7c03      	ldrb	r3, [r0, #16]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d021      	beq.n	800784e <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800780a:	6803      	ldr	r3, [r0, #0]
 800780c:	2100      	movs	r1, #0
 800780e:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007810:	4608      	mov	r0, r1
{
 8007812:	b410      	push	{r4}
 8007814:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8007816:	9100      	str	r1, [sp, #0]
 8007818:	685c      	ldr	r4, [r3, #4]
 800781a:	f044 0401 	orr.w	r4, r4, #1
 800781e:	605c      	str	r4, [r3, #4]
 8007820:	685c      	ldr	r4, [r3, #4]
 8007822:	f004 0401 	and.w	r4, r4, #1
 8007826:	9400      	str	r4, [sp, #0]
 8007828:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800782a:	9101      	str	r1, [sp, #4]
 800782c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8007830:	f044 0408 	orr.w	r4, r4, #8
 8007834:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8007838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800783c:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	9b01      	ldr	r3, [sp, #4]
}
 8007846:	b003      	add	sp, #12
 8007848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800784e:	2002      	movs	r0, #2
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007854:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007856:	7c05      	ldrb	r5, [r0, #16]
{
 8007858:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800785a:	2d01      	cmp	r5, #1
 800785c:	d00a      	beq.n	8007874 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800785e:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8007860:	2501      	movs	r5, #1
 8007862:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007864:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8007866:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007868:	f7ff fd38 	bl	80072dc <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800786c:	2300      	movs	r3, #0
 800786e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007870:	b002      	add	sp, #8
 8007872:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8007874:	2002      	movs	r0, #2
}
 8007876:	b002      	add	sp, #8
 8007878:	bd70      	pop	{r4, r5, r6, pc}
 800787a:	bf00      	nop

0800787c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007882:	7c03      	ldrb	r3, [r0, #16]
{
 8007884:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8007886:	2b01      	cmp	r3, #1
 8007888:	d05e      	beq.n	8007948 <HAL_DSI_LongWrite+0xcc>
 800788a:	2301      	movs	r3, #1
 800788c:	4607      	mov	r7, r0
 800788e:	4689      	mov	r9, r1
 8007890:	4692      	mov	sl, r2
 8007892:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007894:	f7fe fc8c 	bl	80061b0 <HAL_GetTick>
 8007898:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800789a:	e005      	b.n	80078a8 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800789c:	f7fe fc88 	bl	80061b0 <HAL_GetTick>
 80078a0:	1b40      	subs	r0, r0, r5
 80078a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80078a6:	d84b      	bhi.n	8007940 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 80078ac:	f014 0401 	ands.w	r4, r4, #1
 80078b0:	d0f4      	beq.n	800789c <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80078b2:	4640      	mov	r0, r8
 80078b4:	2803      	cmp	r0, #3
 80078b6:	bf28      	it	cs
 80078b8:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 80078ba:	f1b8 0f00 	cmp.w	r8, #0
 80078be:	d046      	beq.n	800794e <HAL_DSI_LongWrite+0xd2>
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	1e5c      	subs	r4, r3, #1
 80078c4:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80078c6:	3301      	adds	r3, #1
 80078c8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80078cc:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 80078ce:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80078d0:	fa02 f205 	lsl.w	r2, r2, r5
 80078d4:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 80078d8:	d3f5      	bcc.n	80078c6 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 80078dc:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 80078de:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80078e0:	ebb8 0000 	subs.w	r0, r8, r0
 80078e4:	d017      	beq.n	8007916 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80078e6:	2804      	cmp	r0, #4
 80078e8:	4684      	mov	ip, r0
 80078ea:	f04f 0500 	mov.w	r5, #0
 80078ee:	bf28      	it	cs
 80078f0:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 80078f4:	462b      	mov	r3, r5
 80078f6:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80078fa:	f816 4b01 	ldrb.w	r4, [r6], #1
 80078fe:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8007900:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007902:	f105 0508 	add.w	r5, r5, #8
 8007906:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 800790a:	d1f6      	bne.n	80078fa <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 800790c:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8007910:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8007912:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8007914:	d1e7      	bne.n	80078e6 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007916:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800791a:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800791e:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007920:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8007924:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007926:	46c8      	mov	r8, r9
 8007928:	fa1f f989 	uxth.w	r9, r9
 800792c:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8007930:	ea43 0309 	orr.w	r3, r3, r9
 8007934:	ea43 0308 	orr.w	r3, r3, r8
 8007938:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800793a:	743a      	strb	r2, [r7, #16]
}
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8007940:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007942:	743c      	strb	r4, [r7, #16]
}
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8007948:	2002      	movs	r0, #2
}
 800794a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800794e:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8007950:	e7e1      	b.n	8007916 <HAL_DSI_LongWrite+0x9a>
 8007952:	bf00      	nop

08007954 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800795a:	7c02      	ldrb	r2, [r0, #16]
{
 800795c:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800795e:	2a01      	cmp	r2, #1
{
 8007960:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 8007962:	d070      	beq.n	8007a46 <HAL_DSI_Read+0xf2>
 8007964:	461e      	mov	r6, r3
 8007966:	2301      	movs	r3, #1
 8007968:	4607      	mov	r7, r0
 800796a:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800796c:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800796e:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007970:	d80d      	bhi.n	800798e <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007972:	2c06      	cmp	r4, #6
 8007974:	d017      	beq.n	80079a6 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007976:	2c04      	cmp	r4, #4
 8007978:	d04f      	beq.n	8007a1a <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800797a:	2c14      	cmp	r4, #20
 800797c:	d067      	beq.n	8007a4e <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800797e:	2c24      	cmp	r4, #36	; 0x24
 8007980:	d052      	beq.n	8007a28 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 8007982:	2300      	movs	r3, #0
      return HAL_ERROR;
 8007984:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007986:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007988:	b002      	add	sp, #8
 800798a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800798e:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8007992:	b2f3      	uxtb	r3, r6
 8007994:	2237      	movs	r2, #55	; 0x37
 8007996:	f8cd c000 	str.w	ip, [sp]
 800799a:	f7ff fc9f 	bl	80072dc <DSI_ShortWrite>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1ef      	bne.n	8007982 <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80079a2:	2c06      	cmp	r4, #6
 80079a4:	d1e7      	bne.n	8007976 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80079a8:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80079aa:	021a      	lsls	r2, r3, #8
 80079ac:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 80079b0:	f043 0306 	orr.w	r3, r3, #6
 80079b4:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80079b6:	f7fe fbfb 	bl	80061b0 <HAL_GetTick>
 80079ba:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 80079bc:	e006      	b.n	80079cc <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80079be:	f7fe fbf7 	bl	80061b0 <HAL_GetTick>
 80079c2:	eba0 0008 	sub.w	r0, r0, r8
 80079c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80079ca:	d81b      	bhi.n	8007a04 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	dd1f      	ble.n	8007a10 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80079d4:	f011 0110 	ands.w	r1, r1, #16
 80079d8:	d1f1      	bne.n	80079be <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80079da:	2e04      	cmp	r6, #4
 80079dc:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 80079de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80079e0:	bf28      	it	cs
 80079e2:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 80079e4:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80079e6:	fa22 f401 	lsr.w	r4, r2, r1
 80079ea:	3108      	adds	r1, #8
 80079ec:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 80079f0:	429d      	cmp	r5, r3
 80079f2:	d1f8      	bne.n	80079e6 <HAL_DSI_Read+0x92>
 80079f4:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80079f6:	f7fe fbdb 	bl	80061b0 <HAL_GetTick>
 80079fa:	eba0 0008 	sub.w	r0, r0, r8
 80079fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007a02:	d9e3      	bls.n	80079cc <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8007a04:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007a06:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007a08:	743b      	strb	r3, [r7, #16]
}
 8007a0a:	b002      	add	sp, #8
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8007a10:	2000      	movs	r0, #0
 8007a12:	7438      	strb	r0, [r7, #16]
}
 8007a14:	b002      	add	sp, #8
 8007a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a1a:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007a1e:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a20:	f043 0304 	orr.w	r3, r3, #4
 8007a24:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007a26:	e7c6      	b.n	80079b6 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a2a:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a30:	7852      	ldrb	r2, [r2, #1]
 8007a32:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a38:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a3e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8007a42:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007a44:	e7b7      	b.n	80079b6 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8007a46:	2002      	movs	r0, #2
}
 8007a48:	b002      	add	sp, #8
 8007a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a50:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007a54:	7811      	ldrb	r1, [r2, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a5c:	f043 0314 	orr.w	r3, r3, #20
 8007a60:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007a62:	e7a8      	b.n	80079b6 <HAL_DSI_Read+0x62>

08007a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a68:	680e      	ldr	r6, [r1, #0]
{
 8007a6a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	f000 80d3 	beq.w	8007c18 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8007a72:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a74:	f8df a220 	ldr.w	sl, [pc, #544]	; 8007c98 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a78:	f8df b220 	ldr.w	fp, [pc, #544]	; 8007c9c <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a7c:	46b1      	mov	r9, r6
 8007a7e:	e020      	b.n	8007ac2 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8007a80:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a82:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a86:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a8a:	f04f 0e0f 	mov.w	lr, #15
 8007a8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a92:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a94:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a98:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8007a9c:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a9e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007aa2:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aa6:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007aaa:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8007aae:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8007ab0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ab2:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ab4:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8007ab6:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8007ab8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aba:	fa39 f203 	lsrs.w	r2, r9, r3
 8007abe:	f000 80ab 	beq.w	8007c18 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007ac6:	ea12 0809 	ands.w	r8, r2, r9
 8007aca:	d0f5      	beq.n	8007ab8 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007acc:	684c      	ldr	r4, [r1, #4]
 8007ace:	005f      	lsls	r7, r3, #1
 8007ad0:	f024 0c10 	bic.w	ip, r4, #16
 8007ad4:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ad8:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ada:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ade:	f200 809e 	bhi.w	8007c1e <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ae2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8007ae6:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aea:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007aec:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aee:	ea2e 0e05 	bic.w	lr, lr, r5
 8007af2:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007af4:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007af6:	68ce      	ldr	r6, [r1, #12]
 8007af8:	40be      	lsls	r6, r7
 8007afa:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007afe:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8007b00:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8007b04:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b08:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b0c:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8007b0e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8007b10:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b12:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b16:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b18:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b1c:	fa02 f207 	lsl.w	r2, r2, r7
 8007b20:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007b24:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b26:	d0ab      	beq.n	8007a80 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8007b28:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b2a:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b2e:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b30:	fa02 f707 	lsl.w	r7, r2, r7
 8007b34:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007b36:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b38:	00e6      	lsls	r6, r4, #3
 8007b3a:	d5bd      	bpl.n	8007ab8 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b3c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8007b40:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b44:	f003 0203 	and.w	r2, r3, #3
 8007b48:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b4a:	f046 0602 	orr.w	r6, r6, #2
 8007b4e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b52:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b54:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8007b58:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007b5c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b60:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b64:	f006 0602 	and.w	r6, r6, #2
 8007b68:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b6a:	4e42      	ldr	r6, [pc, #264]	; (8007c74 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b6c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b6e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8007b70:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b72:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b76:	d020      	beq.n	8007bba <HAL_GPIO_Init+0x156>
 8007b78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007b7c:	42b0      	cmp	r0, r6
 8007b7e:	d056      	beq.n	8007c2e <HAL_GPIO_Init+0x1ca>
 8007b80:	4e3d      	ldr	r6, [pc, #244]	; (8007c78 <HAL_GPIO_Init+0x214>)
 8007b82:	42b0      	cmp	r0, r6
 8007b84:	d058      	beq.n	8007c38 <HAL_GPIO_Init+0x1d4>
 8007b86:	4e3d      	ldr	r6, [pc, #244]	; (8007c7c <HAL_GPIO_Init+0x218>)
 8007b88:	42b0      	cmp	r0, r6
 8007b8a:	d04b      	beq.n	8007c24 <HAL_GPIO_Init+0x1c0>
 8007b8c:	4e3c      	ldr	r6, [pc, #240]	; (8007c80 <HAL_GPIO_Init+0x21c>)
 8007b8e:	42b0      	cmp	r0, r6
 8007b90:	d05c      	beq.n	8007c4c <HAL_GPIO_Init+0x1e8>
 8007b92:	4e3c      	ldr	r6, [pc, #240]	; (8007c84 <HAL_GPIO_Init+0x220>)
 8007b94:	42b0      	cmp	r0, r6
 8007b96:	d05e      	beq.n	8007c56 <HAL_GPIO_Init+0x1f2>
 8007b98:	4e3b      	ldr	r6, [pc, #236]	; (8007c88 <HAL_GPIO_Init+0x224>)
 8007b9a:	42b0      	cmp	r0, r6
 8007b9c:	d051      	beq.n	8007c42 <HAL_GPIO_Init+0x1de>
 8007b9e:	4e3b      	ldr	r6, [pc, #236]	; (8007c8c <HAL_GPIO_Init+0x228>)
 8007ba0:	42b0      	cmp	r0, r6
 8007ba2:	d05d      	beq.n	8007c60 <HAL_GPIO_Init+0x1fc>
 8007ba4:	4e3a      	ldr	r6, [pc, #232]	; (8007c90 <HAL_GPIO_Init+0x22c>)
 8007ba6:	42b0      	cmp	r0, r6
 8007ba8:	d05f      	beq.n	8007c6a <HAL_GPIO_Init+0x206>
 8007baa:	4e3a      	ldr	r6, [pc, #232]	; (8007c94 <HAL_GPIO_Init+0x230>)
 8007bac:	42b0      	cmp	r0, r6
 8007bae:	bf0c      	ite	eq
 8007bb0:	2609      	moveq	r6, #9
 8007bb2:	260a      	movne	r6, #10
 8007bb4:	fa06 f202 	lsl.w	r2, r6, r2
 8007bb8:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bba:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007bbc:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8007bc0:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bc4:	03e5      	lsls	r5, r4, #15
    position++;
 8007bc6:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8007bca:	bf54      	ite	pl
 8007bcc:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007bce:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007bd2:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bd6:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8007bd8:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007be0:	bf54      	ite	pl
 8007be2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007be4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007be8:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8007bea:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007bee:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8007bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007bf4:	bf54      	ite	pl
 8007bf6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007bf8:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bfc:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8007bfe:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8007c02:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8007c04:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8007c06:	bf54      	ite	pl
 8007c08:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007c0a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8007c0e:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c10:	fa39 f203 	lsrs.w	r2, r9, r3
 8007c14:	f47f af55 	bne.w	8007ac2 <HAL_GPIO_Init+0x5e>
  }
}
 8007c18:	b005      	add	sp, #20
 8007c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1e:	40bd      	lsls	r5, r7
 8007c20:	43ed      	mvns	r5, r5
 8007c22:	e775      	b.n	8007b10 <HAL_GPIO_Init+0xac>
 8007c24:	2603      	movs	r6, #3
 8007c26:	fa06 f202 	lsl.w	r2, r6, r2
 8007c2a:	4315      	orrs	r5, r2
 8007c2c:	e7c5      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c2e:	2601      	movs	r6, #1
 8007c30:	fa06 f202 	lsl.w	r2, r6, r2
 8007c34:	4315      	orrs	r5, r2
 8007c36:	e7c0      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c38:	2602      	movs	r6, #2
 8007c3a:	fa06 f202 	lsl.w	r2, r6, r2
 8007c3e:	4315      	orrs	r5, r2
 8007c40:	e7bb      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c42:	2606      	movs	r6, #6
 8007c44:	fa06 f202 	lsl.w	r2, r6, r2
 8007c48:	4315      	orrs	r5, r2
 8007c4a:	e7b6      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c4c:	2604      	movs	r6, #4
 8007c4e:	fa06 f202 	lsl.w	r2, r6, r2
 8007c52:	4315      	orrs	r5, r2
 8007c54:	e7b1      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c56:	2605      	movs	r6, #5
 8007c58:	fa06 f202 	lsl.w	r2, r6, r2
 8007c5c:	4315      	orrs	r5, r2
 8007c5e:	e7ac      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c60:	2607      	movs	r6, #7
 8007c62:	fa06 f202 	lsl.w	r2, r6, r2
 8007c66:	4315      	orrs	r5, r2
 8007c68:	e7a7      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c6a:	2608      	movs	r6, #8
 8007c6c:	fa06 f202 	lsl.w	r2, r6, r2
 8007c70:	4315      	orrs	r5, r2
 8007c72:	e7a2      	b.n	8007bba <HAL_GPIO_Init+0x156>
 8007c74:	58020000 	.word	0x58020000
 8007c78:	58020800 	.word	0x58020800
 8007c7c:	58020c00 	.word	0x58020c00
 8007c80:	58021000 	.word	0x58021000
 8007c84:	58021400 	.word	0x58021400
 8007c88:	58021800 	.word	0x58021800
 8007c8c:	58021c00 	.word	0x58021c00
 8007c90:	58022000 	.word	0x58022000
 8007c94:	58022400 	.word	0x58022400
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	58000080 	.word	0x58000080

08007ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ca0:	b902      	cbnz	r2, 8007ca4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ca2:	0409      	lsls	r1, r1, #16
 8007ca4:	6181      	str	r1, [r0, #24]
  }
}
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ca8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007caa:	ea01 0203 	and.w	r2, r1, r3
 8007cae:	ea21 0103 	bic.w	r1, r1, r3
 8007cb2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cb6:	6181      	str	r1, [r0, #24]
}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop

08007cbc <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007cbc:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <HAL_HSEM_FastTake+0x14>)
 8007cbe:	3020      	adds	r0, #32
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <HAL_HSEM_FastTake+0x18>)
 8007cc2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007cc6:	1ac0      	subs	r0, r0, r3
 8007cc8:	bf18      	it	ne
 8007cca:	2001      	movne	r0, #1
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	58026400 	.word	0x58026400
 8007cd4:	80000300 	.word	0x80000300

08007cd8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <HAL_HSEM_Release+0xc>)
 8007cda:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007cde:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007ce2:	4770      	bx	lr
 8007ce4:	58026400 	.word	0x58026400

08007ce8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ce8:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007cea:	f04f 0c00 	mov.w	ip, #0
{
 8007cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007cf2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007cf4:	6804      	ldr	r4, [r0, #0]
 8007cf6:	6848      	ldr	r0, [r1, #4]
{
 8007cf8:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007cfa:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007cfc:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007cfe:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007d02:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d06:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d0a:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d0c:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007d10:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d14:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d16:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007d1a:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007d1c:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d1e:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007d20:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007d24:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d28:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d2c:	4f38      	ldr	r7, [pc, #224]	; (8007e10 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d2e:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007d30:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007d34:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007d38:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007d3a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007d3e:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007d40:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007d44:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007d48:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007d4a:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007d4e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007d50:	68e5      	ldr	r5, [r4, #12]
 8007d52:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007d56:	444d      	add	r5, r9
 8007d58:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007d5c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007d5e:	691d      	ldr	r5, [r3, #16]
 8007d60:	f025 0507 	bic.w	r5, r5, #7
 8007d64:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007d66:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007d6a:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007d6c:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007d70:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007d74:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007d78:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007d7c:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007d80:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8007d84:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8007d88:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007d8a:	695d      	ldr	r5, [r3, #20]
 8007d8c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007d90:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007d92:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d96:	69dd      	ldr	r5, [r3, #28]
 8007d98:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007d9a:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d9c:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007d9e:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007da2:	4305      	orrs	r5, r0
 8007da4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007da6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007da8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007dac:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007dae:	f1be 0f00 	cmp.w	lr, #0
 8007db2:	d00b      	beq.n	8007dcc <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007db4:	f1be 0f01 	cmp.w	lr, #1
 8007db8:	d026      	beq.n	8007e08 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007dba:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007dbe:	2d02      	cmp	r5, #2
 8007dc0:	d902      	bls.n	8007dc8 <LTDC_SetConfig+0xe0>
 8007dc2:	f1be 0f07 	cmp.w	lr, #7
 8007dc6:	d121      	bne.n	8007e0c <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007dc8:	2702      	movs	r7, #2
 8007dca:	e000      	b.n	8007dce <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8007dcc:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007dce:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007dd0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007dd2:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007dd4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007dd8:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007ddc:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007de0:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007de2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007de4:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007de8:	490a      	ldr	r1, [pc, #40]	; (8007e14 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007dee:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007df2:	4001      	ands	r1, r0
 8007df4:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007df6:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007dfa:	58a3      	ldr	r3, [r4, r2]
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	50a3      	str	r3, [r4, r2]
}
 8007e02:	b003      	add	sp, #12
 8007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8007e08:	2703      	movs	r7, #3
 8007e0a:	e7e0      	b.n	8007dce <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8007e0c:	2701      	movs	r7, #1
 8007e0e:	e7de      	b.n	8007dce <LTDC_SetConfig+0xe6>
 8007e10:	fffff8f8 	.word	0xfffff8f8
 8007e14:	fffff800 	.word	0xfffff800

08007e18 <HAL_LTDC_MspInit>:
}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop

08007e1c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d06d      	beq.n	8007efc <HAL_LTDC_Init+0xe0>
{
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e22:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007e26:	4604      	mov	r4, r0
 8007e28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d060      	beq.n	8007ef2 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e30:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e32:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e34:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007e36:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e38:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e3c:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e3e:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e40:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e48:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e4a:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e4c:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e4e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e52:	4e2b      	ldr	r6, [pc, #172]	; (8007f00 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e54:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e56:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e58:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e5a:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e5c:	4302      	orrs	r2, r0
 8007e5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	4032      	ands	r2, r6
 8007e64:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e66:	6898      	ldr	r0, [r3, #8]
 8007e68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e6c:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e6e:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e72:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e76:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e78:	68d8      	ldr	r0, [r3, #12]
 8007e7a:	4030      	ands	r0, r6
 8007e7c:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e84:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e86:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e8e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	4032      	ands	r2, r6
 8007e94:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e96:	6918      	ldr	r0, [r3, #16]
 8007e98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e9e:	ea40 000c 	orr.w	r0, r0, ip
 8007ea2:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007ea4:	6958      	ldr	r0, [r3, #20]
 8007ea6:	4006      	ands	r6, r0
 8007ea8:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007eaa:	695a      	ldr	r2, [r3, #20]
 8007eac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007eae:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007eb2:	4302      	orrs	r2, r0
 8007eb4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007eb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007eb8:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ebc:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007ec0:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ec4:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ec6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ec8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007ecc:	4302      	orrs	r2, r0
  return HAL_OK;
 8007ece:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ed0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8007ed4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007edc:	f042 0206 	orr.w	r2, r2, #6
 8007ee0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	432a      	orrs	r2, r5
 8007ee6:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ee8:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007eec:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8007ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8007ef2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007ef6:	f7ff ff8f 	bl	8007e18 <HAL_LTDC_MspInit>
 8007efa:	e799      	b.n	8007e30 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8007efc:	2001      	movs	r0, #1
}
 8007efe:	4770      	bx	lr
 8007f00:	f000f800 	.word	0xf000f800

08007f04 <HAL_LTDC_ErrorCallback>:
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop

08007f08 <HAL_LTDC_ReloadEventCallback>:
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <HAL_LTDC_IRQHandler>:
{
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007f0e:	6803      	ldr	r3, [r0, #0]
{
 8007f10:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007f12:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007f14:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007f16:	0769      	lsls	r1, r5, #29
 8007f18:	d501      	bpl.n	8007f1e <HAL_LTDC_IRQHandler+0x12>
 8007f1a:	0772      	lsls	r2, r6, #29
 8007f1c:	d41d      	bmi.n	8007f5a <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007f1e:	07ab      	lsls	r3, r5, #30
 8007f20:	d501      	bpl.n	8007f26 <HAL_LTDC_IRQHandler+0x1a>
 8007f22:	07b7      	lsls	r7, r6, #30
 8007f24:	d42d      	bmi.n	8007f82 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007f26:	07e8      	lsls	r0, r5, #31
 8007f28:	d501      	bpl.n	8007f2e <HAL_LTDC_IRQHandler+0x22>
 8007f2a:	07f1      	lsls	r1, r6, #31
 8007f2c:	d440      	bmi.n	8007fb0 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007f2e:	072a      	lsls	r2, r5, #28
 8007f30:	d501      	bpl.n	8007f36 <HAL_LTDC_IRQHandler+0x2a>
 8007f32:	0733      	lsls	r3, r6, #28
 8007f34:	d400      	bmi.n	8007f38 <HAL_LTDC_IRQHandler+0x2c>
}
 8007f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007f38:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007f3a:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8007f3c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8007f3e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007f42:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007f44:	f022 0208 	bic.w	r2, r2, #8
 8007f48:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007f4a:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007f4c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007f50:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007f54:	f7ff ffd8 	bl	8007f08 <HAL_LTDC_ReloadEventCallback>
}
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f5c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8007f5e:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f60:	f022 0204 	bic.w	r2, r2, #4
 8007f64:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f66:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f68:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007f6c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f78:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007f7c:	f7ff ffc2 	bl	8007f04 <HAL_LTDC_ErrorCallback>
 8007f80:	e7cd      	b.n	8007f1e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f82:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007f84:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f86:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	f022 0202 	bic.w	r2, r2, #2
 8007f8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8007f90:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007f92:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8007f94:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007f96:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007f9a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007fa6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007faa:	f7ff ffab 	bl	8007f04 <HAL_LTDC_ErrorCallback>
 8007fae:	e7ba      	b.n	8007f26 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007fb0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007fb2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8007fb4:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8007fb6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007fc0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007fc2:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007fc6:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007fca:	f7fc fb31 	bl	8004630 <HAL_LTDC_LineEventCallback>
 8007fce:	e7ae      	b.n	8007f2e <HAL_LTDC_IRQHandler+0x22>

08007fd0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8007fd0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d028      	beq.n	800802a <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	4694      	mov	ip, r2
{
 8007fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fe0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007fe2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fe6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fe8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fec:	fb04 0402 	mla	r4, r4, r2, r0
 8007ff0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8007ff2:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	3438      	adds	r4, #56	; 0x38
 8007ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008006:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008008:	4662      	mov	r2, ip
 800800a:	4630      	mov	r0, r6
 800800c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800800e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008010:	f7ff fe6a 	bl	8007ce8 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8008014:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008016:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8008018:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800801a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800801e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008022:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8008026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800802a:	2002      	movs	r0, #2
}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8008030:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8008034:	2a01      	cmp	r2, #1
 8008036:	d017      	beq.n	8008068 <HAL_LTDC_ProgramLineEvent+0x38>
 8008038:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800803a:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800803c:	681a      	ldr	r2, [r3, #0]
{
 800803e:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008040:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8008044:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008046:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8008048:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 800804a:	4e08      	ldr	r6, [pc, #32]	; (800806c <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800804c:	f020 0001 	bic.w	r0, r0, #1
 8008050:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 8008052:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8008054:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008056:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008058:	4329      	orrs	r1, r5
 800805a:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800805c:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008060:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8008064:	bc70      	pop	{r4, r5, r6}
 8008066:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8008068:	2002      	movs	r0, #2
}
 800806a:	4770      	bx	lr
 800806c:	50001000 	.word	0x50001000

08008070 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008074:	f7fe f89c 	bl	80061b0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008078:	2c00      	cmp	r4, #0
 800807a:	d05a      	beq.n	8008132 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800807c:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800807e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008080:	2100      	movs	r1, #0
 8008082:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008084:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8008088:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008094:	e005      	b.n	80080a2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008096:	f7fe f88b 	bl	80061b0 <HAL_GetTick>
 800809a:	1b43      	subs	r3, r0, r5
 800809c:	2b05      	cmp	r3, #5
 800809e:	d841      	bhi.n	8008124 <HAL_MDMA_Init+0xb4>
 80080a0:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	07d2      	lsls	r2, r2, #31
 80080a6:	d4f6      	bmi.n	8008096 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80080a8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80080ac:	69e1      	ldr	r1, [r4, #28]
 80080ae:	4302      	orrs	r2, r0
 80080b0:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080b8:	432a      	orrs	r2, r5
 80080ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80080bc:	4302      	orrs	r2, r0
 80080be:	68a0      	ldr	r0, [r4, #8]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80080c4:	432a      	orrs	r2, r5
 80080c6:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80080c8:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80080ca:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80080cc:	6920      	ldr	r0, [r4, #16]
 80080ce:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80080d0:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80080d2:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80080d6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80080da:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80080dc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80080de:	d103      	bne.n	80080e8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80080e6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80080e8:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80080ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80080ec:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 80080ee:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80080f0:	db30      	blt.n	8008154 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80080f2:	b292      	uxth	r2, r2
 80080f4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80080f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	db1c      	blt.n	8008136 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80080fc:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80080fe:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008102:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8008106:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008108:	d021      	beq.n	800814e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800810a:	b2c9      	uxtb	r1, r1
 800810c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800810e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008110:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8008112:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008114:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008116:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008118:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800811a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800811e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8008122:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008124:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008126:	2303      	movs	r3, #3
      return HAL_ERROR;
 8008128:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800812a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800812c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008130:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008132:	2001      	movs	r0, #1
}
 8008134:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008136:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008138:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800813a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800813e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8008142:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008144:	6a18      	ldr	r0, [r3, #32]
 8008146:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800814a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800814c:	d1dd      	bne.n	800810a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800814e:	2200      	movs	r2, #0
 8008150:	629a      	str	r2, [r3, #40]	; 0x28
 8008152:	e7dc      	b.n	800810e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008154:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008156:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008158:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800815c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800815e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008160:	621a      	str	r2, [r3, #32]
 8008162:	e7c8      	b.n	80080f6 <HAL_MDMA_Init+0x86>

08008164 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008164:	b1f0      	cbz	r0, 80081a4 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8008166:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	4601      	mov	r1, r0
  return HAL_OK;
 800816c:	4618      	mov	r0, r3
{
 800816e:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8008170:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008172:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008174:	f024 0401 	bic.w	r4, r4, #1
 8008178:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800817a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800817c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800817e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008180:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008182:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008184:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008186:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8008188:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800818a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800818c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800818e:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008190:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8008192:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008196:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 800819a:	664b      	str	r3, [r1, #100]	; 0x64
}
 800819c:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 800819e:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 80081a2:	4770      	bx	lr
    return HAL_ERROR;
 80081a4:	2001      	movs	r0, #1
}
 80081a6:	4770      	bx	lr

080081a8 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80081a8:	4a1c      	ldr	r2, [pc, #112]	; (800821c <HAL_PWREx_ConfigSupply+0x74>)
 80081aa:	68d3      	ldr	r3, [r2, #12]
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081b2:	68d3      	ldr	r3, [r2, #12]
{
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80081b8:	d005      	beq.n	80081c6 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081be:	1a18      	subs	r0, r3, r0
 80081c0:	bf18      	it	ne
 80081c2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081ca:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081cc:	4303      	orrs	r3, r0
 80081ce:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80081d0:	f7fd ffee 	bl	80061b0 <HAL_GetTick>
 80081d4:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081d6:	e005      	b.n	80081e4 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081d8:	f7fd ffea 	bl	80061b0 <HAL_GetTick>
 80081dc:	1b43      	subs	r3, r0, r5
 80081de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081e2:	d819      	bhi.n	8008218 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081e4:	6873      	ldr	r3, [r6, #4]
 80081e6:	049a      	lsls	r2, r3, #18
 80081e8:	d5f6      	bpl.n	80081d8 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80081ea:	f1a4 031d 	sub.w	r3, r4, #29
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d905      	bls.n	80081fe <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80081f2:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80081f6:	2801      	cmp	r0, #1
 80081f8:	d901      	bls.n	80081fe <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80081fa:	2000      	movs	r0, #0
}
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80081fe:	f7fd ffd7 	bl	80061b0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008204:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008206:	68eb      	ldr	r3, [r5, #12]
 8008208:	03db      	lsls	r3, r3, #15
 800820a:	d4f6      	bmi.n	80081fa <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800820c:	f7fd ffd0 	bl	80061b0 <HAL_GetTick>
 8008210:	1b00      	subs	r0, r0, r4
 8008212:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008216:	d9f6      	bls.n	8008206 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008218:	2001      	movs	r0, #1
}
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	58024800 	.word	0x58024800

08008220 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008220:	2800      	cmp	r0, #0
 8008222:	f000 81f7 	beq.w	8008614 <HAL_RCC_OscConfig+0x3f4>
{
 8008226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	4604      	mov	r4, r0
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	d52e      	bpl.n	800828e <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008230:	49b4      	ldr	r1, [pc, #720]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 8008232:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008234:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008236:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800823a:	2a10      	cmp	r2, #16
 800823c:	f000 812c 	beq.w	8008498 <HAL_RCC_OscConfig+0x278>
 8008240:	2a18      	cmp	r2, #24
 8008242:	f000 8124 	beq.w	800848e <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824c:	f000 8167 	beq.w	800851e <HAL_RCC_OscConfig+0x2fe>
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 817f 	beq.w	8008554 <HAL_RCC_OscConfig+0x334>
 8008256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800825a:	4baa      	ldr	r3, [pc, #680]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	f000 8278 	beq.w	8008752 <HAL_RCC_OscConfig+0x532>
 8008262:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800826e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008270:	f7fd ff9e 	bl	80061b0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008274:	4ea3      	ldr	r6, [pc, #652]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8008276:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008278:	e005      	b.n	8008286 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800827a:	f7fd ff99 	bl	80061b0 <HAL_GetTick>
 800827e:	1b40      	subs	r0, r0, r5
 8008280:	2864      	cmp	r0, #100	; 0x64
 8008282:	f200 8165 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008286:	6833      	ldr	r3, [r6, #0]
 8008288:	039f      	lsls	r7, r3, #14
 800828a:	d5f6      	bpl.n	800827a <HAL_RCC_OscConfig+0x5a>
 800828c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800828e:	0799      	lsls	r1, r3, #30
 8008290:	d521      	bpl.n	80082d6 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008292:	4a9c      	ldr	r2, [pc, #624]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 8008294:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008296:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008298:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800829c:	f040 80a8 	bne.w	80083f0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082a0:	4b98      	ldr	r3, [pc, #608]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	075b      	lsls	r3, r3, #29
 80082a6:	d503      	bpl.n	80082b0 <HAL_RCC_OscConfig+0x90>
 80082a8:	68e3      	ldr	r3, [r4, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80ed 	beq.w	800848a <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b0:	f7fd ff96 	bl	80061e0 <HAL_GetREVID>
 80082b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80082b8:	4298      	cmp	r0, r3
 80082ba:	f200 8189 	bhi.w	80085d0 <HAL_RCC_OscConfig+0x3b0>
 80082be:	6922      	ldr	r2, [r4, #16]
 80082c0:	2a40      	cmp	r2, #64	; 0x40
 80082c2:	f000 824e 	beq.w	8008762 <HAL_RCC_OscConfig+0x542>
 80082c6:	498f      	ldr	r1, [pc, #572]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 80082c8:	684b      	ldr	r3, [r1, #4]
 80082ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80082d2:	604b      	str	r3, [r1, #4]
 80082d4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082d6:	06d9      	lsls	r1, r3, #27
 80082d8:	d456      	bmi.n	8008388 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082da:	071d      	lsls	r5, r3, #28
 80082dc:	d517      	bpl.n	800830e <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082de:	6963      	ldr	r3, [r4, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80b4 	beq.w	800844e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082e6:	4b87      	ldr	r3, [pc, #540]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 80082e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082ea:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80082ec:	f042 0201 	orr.w	r2, r2, #1
 80082f0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80082f2:	f7fd ff5d 	bl	80061b0 <HAL_GetTick>
 80082f6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082f8:	e005      	b.n	8008306 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082fa:	f7fd ff59 	bl	80061b0 <HAL_GetTick>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	2802      	cmp	r0, #2
 8008302:	f200 8125 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008306:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008308:	0798      	lsls	r0, r3, #30
 800830a:	d5f6      	bpl.n	80082fa <HAL_RCC_OscConfig+0xda>
 800830c:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800830e:	069a      	lsls	r2, r3, #26
 8008310:	d517      	bpl.n	8008342 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8134 	beq.w	8008582 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800831a:	4b7a      	ldr	r3, [pc, #488]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800831c:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800831e:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008324:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008326:	f7fd ff43 	bl	80061b0 <HAL_GetTick>
 800832a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800832c:	e005      	b.n	800833a <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800832e:	f7fd ff3f 	bl	80061b0 <HAL_GetTick>
 8008332:	1b40      	subs	r0, r0, r5
 8008334:	2802      	cmp	r0, #2
 8008336:	f200 810b 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800833a:	6833      	ldr	r3, [r6, #0]
 800833c:	049f      	lsls	r7, r3, #18
 800833e:	d5f6      	bpl.n	800832e <HAL_RCC_OscConfig+0x10e>
 8008340:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008342:	0759      	lsls	r1, r3, #29
 8008344:	f100 80b2 	bmi.w	80084ac <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008348:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800834a:	b1d8      	cbz	r0, 8008384 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800834c:	4b6d      	ldr	r3, [pc, #436]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008354:	2a18      	cmp	r2, #24
 8008356:	f000 81ce 	beq.w	80086f6 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835a:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800835c:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800835e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008360:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008364:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008366:	f000 8161 	beq.w	800862c <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836a:	f7fd ff21 	bl	80061b0 <HAL_GetTick>
 800836e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008370:	e005      	b.n	800837e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008372:	f7fd ff1d 	bl	80061b0 <HAL_GetTick>
 8008376:	1b00      	subs	r0, r0, r4
 8008378:	2802      	cmp	r0, #2
 800837a:	f200 80e9 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	019b      	lsls	r3, r3, #6
 8008382:	d4f6      	bmi.n	8008372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008384:	2000      	movs	r0, #0
}
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008388:	4a5e      	ldr	r2, [pc, #376]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800838a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800838c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008392:	2b08      	cmp	r3, #8
 8008394:	d072      	beq.n	800847c <HAL_RCC_OscConfig+0x25c>
 8008396:	2b18      	cmp	r3, #24
 8008398:	d06c      	beq.n	8008474 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800839a:	69e3      	ldr	r3, [r4, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8103 	beq.w	80085a8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 80083a2:	4b58      	ldr	r3, [pc, #352]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 80083a4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a6:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80083a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083ae:	f7fd feff 	bl	80061b0 <HAL_GetTick>
 80083b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083b4:	e005      	b.n	80083c2 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083b6:	f7fd fefb 	bl	80061b0 <HAL_GetTick>
 80083ba:	1b40      	subs	r0, r0, r5
 80083bc:	2802      	cmp	r0, #2
 80083be:	f200 80c7 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083c2:	6833      	ldr	r3, [r6, #0]
 80083c4:	05db      	lsls	r3, r3, #23
 80083c6:	d5f6      	bpl.n	80083b6 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c8:	f7fd ff0a 	bl	80061e0 <HAL_GetREVID>
 80083cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80083d0:	4298      	cmp	r0, r3
 80083d2:	f200 81e9 	bhi.w	80087a8 <HAL_RCC_OscConfig+0x588>
 80083d6:	6a22      	ldr	r2, [r4, #32]
 80083d8:	6873      	ldr	r3, [r6, #4]
 80083da:	2a20      	cmp	r2, #32
 80083dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083e0:	bf0c      	ite	eq
 80083e2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80083e6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80083ea:	6073      	str	r3, [r6, #4]
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	e774      	b.n	80082da <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083f0:	2b18      	cmp	r3, #24
 80083f2:	f000 810b 	beq.w	800860c <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083f6:	68e2      	ldr	r2, [r4, #12]
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	f000 80f3 	beq.w	80085e4 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083fe:	4941      	ldr	r1, [pc, #260]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 8008400:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008402:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008404:	f023 0319 	bic.w	r3, r3, #25
 8008408:	4313      	orrs	r3, r2
 800840a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800840c:	f7fd fed0 	bl	80061b0 <HAL_GetTick>
 8008410:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008412:	e005      	b.n	8008420 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008414:	f7fd fecc 	bl	80061b0 <HAL_GetTick>
 8008418:	1b40      	subs	r0, r0, r5
 800841a:	2802      	cmp	r0, #2
 800841c:	f200 8098 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	075f      	lsls	r7, r3, #29
 8008424:	d5f6      	bpl.n	8008414 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008426:	f7fd fedb 	bl	80061e0 <HAL_GetREVID>
 800842a:	f241 0303 	movw	r3, #4099	; 0x1003
 800842e:	4298      	cmp	r0, r3
 8008430:	f200 81c3 	bhi.w	80087ba <HAL_RCC_OscConfig+0x59a>
 8008434:	6922      	ldr	r2, [r4, #16]
 8008436:	6873      	ldr	r3, [r6, #4]
 8008438:	2a40      	cmp	r2, #64	; 0x40
 800843a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800843e:	bf0c      	ite	eq
 8008440:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008444:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008448:	6073      	str	r3, [r6, #4]
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	e743      	b.n	80082d6 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 800844e:	4b2d      	ldr	r3, [pc, #180]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 8008450:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008452:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800845a:	f7fd fea9 	bl	80061b0 <HAL_GetTick>
 800845e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008460:	e004      	b.n	800846c <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008462:	f7fd fea5 	bl	80061b0 <HAL_GetTick>
 8008466:	1b40      	subs	r0, r0, r5
 8008468:	2802      	cmp	r0, #2
 800846a:	d871      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800846c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800846e:	0799      	lsls	r1, r3, #30
 8008470:	d4f7      	bmi.n	8008462 <HAL_RCC_OscConfig+0x242>
 8008472:	e74b      	b.n	800830c <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008474:	f002 0203 	and.w	r2, r2, #3
 8008478:	2a01      	cmp	r2, #1
 800847a:	d18e      	bne.n	800839a <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800847c:	4b21      	ldr	r3, [pc, #132]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	05da      	lsls	r2, r3, #23
 8008482:	d552      	bpl.n	800852a <HAL_RCC_OscConfig+0x30a>
 8008484:	69e3      	ldr	r3, [r4, #28]
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d04f      	beq.n	800852a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 800848a:	2001      	movs	r0, #1
}
 800848c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800848e:	f001 0103 	and.w	r1, r1, #3
 8008492:	2902      	cmp	r1, #2
 8008494:	f47f aed7 	bne.w	8008246 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008498:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	0392      	lsls	r2, r2, #14
 800849e:	f57f aef6 	bpl.w	800828e <HAL_RCC_OscConfig+0x6e>
 80084a2:	6862      	ldr	r2, [r4, #4]
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	f47f aef2 	bne.w	800828e <HAL_RCC_OscConfig+0x6e>
 80084aa:	e7ee      	b.n	800848a <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <HAL_RCC_OscConfig+0x2e8>)
 80084ae:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084b0:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80084b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80084b8:	f7fd fe7a 	bl	80061b0 <HAL_GetTick>
 80084bc:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084be:	e004      	b.n	80084ca <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084c0:	f7fd fe76 	bl	80061b0 <HAL_GetTick>
 80084c4:	1b40      	subs	r0, r0, r5
 80084c6:	2864      	cmp	r0, #100	; 0x64
 80084c8:	d842      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084ca:	6833      	ldr	r3, [r6, #0]
 80084cc:	05da      	lsls	r2, r3, #23
 80084ce:	d5f7      	bpl.n	80084c0 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084d0:	68a3      	ldr	r3, [r4, #8]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	f000 817a 	beq.w	80087cc <HAL_RCC_OscConfig+0x5ac>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 814b 	beq.w	8008774 <HAL_RCC_OscConfig+0x554>
 80084de:	2b05      	cmp	r3, #5
 80084e0:	4b08      	ldr	r3, [pc, #32]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
 80084e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084e4:	f000 8187 	beq.w	80087f6 <HAL_RCC_OscConfig+0x5d6>
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	671a      	str	r2, [r3, #112]	; 0x70
 80084ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084f0:	f022 0204 	bic.w	r2, r2, #4
 80084f4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80084f6:	f7fd fe5b 	bl	80061b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084fa:	4e02      	ldr	r6, [pc, #8]	; (8008504 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084fc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008500:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x2f6>
 8008504:	58024400 	.word	0x58024400
 8008508:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800850c:	f7fd fe50 	bl	80061b0 <HAL_GetTick>
 8008510:	1b40      	subs	r0, r0, r5
 8008512:	42b8      	cmp	r0, r7
 8008514:	d81c      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008516:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008518:	079b      	lsls	r3, r3, #30
 800851a:	d5f7      	bpl.n	800850c <HAL_RCC_OscConfig+0x2ec>
 800851c:	e714      	b.n	8008348 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800851e:	4aae      	ldr	r2, [pc, #696]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008526:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008528:	e6a2      	b.n	8008270 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800852a:	f7fd fe59 	bl	80061e0 <HAL_GetREVID>
 800852e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008532:	4298      	cmp	r0, r3
 8008534:	d870      	bhi.n	8008618 <HAL_RCC_OscConfig+0x3f8>
 8008536:	6a22      	ldr	r2, [r4, #32]
 8008538:	2a20      	cmp	r2, #32
 800853a:	f000 8153 	beq.w	80087e4 <HAL_RCC_OscConfig+0x5c4>
 800853e:	49a6      	ldr	r1, [pc, #664]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 8008540:	684b      	ldr	r3, [r1, #4]
 8008542:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008546:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800854a:	604b      	str	r3, [r1, #4]
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	e6c4      	b.n	80082da <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8008550:	2003      	movs	r0, #3
}
 8008552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008554:	4ba0      	ldr	r3, [pc, #640]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 8008556:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008558:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800855a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008566:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008568:	f7fd fe22 	bl	80061b0 <HAL_GetTick>
 800856c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800856e:	e004      	b.n	800857a <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008570:	f7fd fe1e 	bl	80061b0 <HAL_GetTick>
 8008574:	1b40      	subs	r0, r0, r5
 8008576:	2864      	cmp	r0, #100	; 0x64
 8008578:	d8ea      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800857a:	6833      	ldr	r3, [r6, #0]
 800857c:	0398      	lsls	r0, r3, #14
 800857e:	d4f7      	bmi.n	8008570 <HAL_RCC_OscConfig+0x350>
 8008580:	e684      	b.n	800828c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8008582:	4b95      	ldr	r3, [pc, #596]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 8008584:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008586:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8008588:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800858c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800858e:	f7fd fe0f 	bl	80061b0 <HAL_GetTick>
 8008592:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008594:	e004      	b.n	80085a0 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008596:	f7fd fe0b 	bl	80061b0 <HAL_GetTick>
 800859a:	1b40      	subs	r0, r0, r5
 800859c:	2802      	cmp	r0, #2
 800859e:	d8d7      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	0498      	lsls	r0, r3, #18
 80085a4:	d4f7      	bmi.n	8008596 <HAL_RCC_OscConfig+0x376>
 80085a6:	e6cb      	b.n	8008340 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 80085a8:	4b8b      	ldr	r3, [pc, #556]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 80085aa:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085ac:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80085ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80085b4:	f7fd fdfc 	bl	80061b0 <HAL_GetTick>
 80085b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085ba:	e004      	b.n	80085c6 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085bc:	f7fd fdf8 	bl	80061b0 <HAL_GetTick>
 80085c0:	1b40      	subs	r0, r0, r5
 80085c2:	2802      	cmp	r0, #2
 80085c4:	d8c4      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085c6:	6833      	ldr	r3, [r6, #0]
 80085c8:	05df      	lsls	r7, r3, #23
 80085ca:	d4f7      	bmi.n	80085bc <HAL_RCC_OscConfig+0x39c>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	e684      	b.n	80082da <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d0:	4a81      	ldr	r2, [pc, #516]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 80085d2:	6921      	ldr	r1, [r4, #16]
 80085d4:	6853      	ldr	r3, [r2, #4]
 80085d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80085da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80085de:	6053      	str	r3, [r2, #4]
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	e678      	b.n	80082d6 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 80085e4:	4b7c      	ldr	r3, [pc, #496]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 80085e6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085e8:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80085f0:	f7fd fdde 	bl	80061b0 <HAL_GetTick>
 80085f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085f6:	e004      	b.n	8008602 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085f8:	f7fd fdda 	bl	80061b0 <HAL_GetTick>
 80085fc:	1b40      	subs	r0, r0, r5
 80085fe:	2802      	cmp	r0, #2
 8008600:	d8a6      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008602:	6833      	ldr	r3, [r6, #0]
 8008604:	0758      	lsls	r0, r3, #29
 8008606:	d4f7      	bmi.n	80085f8 <HAL_RCC_OscConfig+0x3d8>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	e664      	b.n	80082d6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800860c:	0792      	lsls	r2, r2, #30
 800860e:	f47f aef2 	bne.w	80083f6 <HAL_RCC_OscConfig+0x1d6>
 8008612:	e645      	b.n	80082a0 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008614:	2001      	movs	r0, #1
}
 8008616:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008618:	4a6f      	ldr	r2, [pc, #444]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 800861a:	6a21      	ldr	r1, [r4, #32]
 800861c:	68d3      	ldr	r3, [r2, #12]
 800861e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008622:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008626:	60d3      	str	r3, [r2, #12]
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	e656      	b.n	80082da <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800862c:	f7fd fdc0 	bl	80061b0 <HAL_GetTick>
 8008630:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008632:	e004      	b.n	800863e <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008634:	f7fd fdbc 	bl	80061b0 <HAL_GetTick>
 8008638:	1b80      	subs	r0, r0, r6
 800863a:	2802      	cmp	r0, #2
 800863c:	d888      	bhi.n	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800863e:	682b      	ldr	r3, [r5, #0]
 8008640:	0199      	lsls	r1, r3, #6
 8008642:	d4f7      	bmi.n	8008634 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008644:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008646:	4b65      	ldr	r3, [pc, #404]	; (80087dc <HAL_RCC_OscConfig+0x5bc>)
 8008648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800864a:	4013      	ands	r3, r2
 800864c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800864e:	4964      	ldr	r1, [pc, #400]	; (80087e0 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008650:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008652:	4e61      	ldr	r6, [pc, #388]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008654:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008658:	62ab      	str	r3, [r5, #40]	; 0x28
 800865a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800865c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8008660:	3f01      	subs	r7, #1
 8008662:	1e50      	subs	r0, r2, #1
 8008664:	3b01      	subs	r3, #1
 8008666:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008668:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800866c:	025b      	lsls	r3, r3, #9
 800866e:	0400      	lsls	r0, r0, #16
 8008670:	3a01      	subs	r2, #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008678:	0612      	lsls	r2, r2, #24
 800867a:	4303      	orrs	r3, r0
 800867c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008680:	433b      	orrs	r3, r7
 8008682:	4313      	orrs	r3, r2
 8008684:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008686:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800868e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008692:	4011      	ands	r1, r2
 8008694:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008698:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800869a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800869c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800869e:	f023 030c 	bic.w	r3, r3, #12
 80086a2:	4313      	orrs	r3, r2
 80086a4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80086aa:	f023 0302 	bic.w	r3, r3, #2
 80086ae:	4313      	orrs	r3, r2
 80086b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086c8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80086ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80086da:	f7fd fd69 	bl	80061b0 <HAL_GetTick>
 80086de:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086e0:	e005      	b.n	80086ee <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e2:	f7fd fd65 	bl	80061b0 <HAL_GetTick>
 80086e6:	1b00      	subs	r0, r0, r4
 80086e8:	2802      	cmp	r0, #2
 80086ea:	f63f af31 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ee:	6833      	ldr	r3, [r6, #0]
 80086f0:	019a      	lsls	r2, r3, #6
 80086f2:	d5f6      	bpl.n	80086e2 <HAL_RCC_OscConfig+0x4c2>
 80086f4:	e646      	b.n	8008384 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086fa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086fc:	f43f ae43 	beq.w	8008386 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008700:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008704:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008706:	428b      	cmp	r3, r1
 8008708:	f47f aebf 	bne.w	800848a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800870c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008712:	429a      	cmp	r2, r3
 8008714:	f47f aeb9 	bne.w	800848a <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008718:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800871a:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800871e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	f47f aeb2 	bne.w	800848a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008728:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800872c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800872e:	429a      	cmp	r2, r3
 8008730:	f47f aeab 	bne.w	800848a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008736:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800873a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800873c:	429a      	cmp	r2, r3
 800873e:	f47f aea4 	bne.w	800848a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008742:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008744:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008748:	3801      	subs	r0, #1
  return HAL_OK;
 800874a:	1a28      	subs	r0, r5, r0
 800874c:	bf18      	it	ne
 800874e:	2001      	movne	r0, #1
}
 8008750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008752:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	e586      	b.n	8008270 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008762:	4a1d      	ldr	r2, [pc, #116]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 8008764:	6853      	ldr	r3, [r2, #4]
 8008766:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800876a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876e:	6053      	str	r3, [r2, #4]
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	e5b0      	b.n	80082d6 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008774:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008776:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800877a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800877c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	671a      	str	r2, [r3, #112]	; 0x70
 8008784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008786:	f022 0204 	bic.w	r2, r2, #4
 800878a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800878c:	f7fd fd10 	bl	80061b0 <HAL_GetTick>
 8008790:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008792:	e005      	b.n	80087a0 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008794:	f7fd fd0c 	bl	80061b0 <HAL_GetTick>
 8008798:	1b40      	subs	r0, r0, r5
 800879a:	42b8      	cmp	r0, r7
 800879c:	f63f aed8 	bhi.w	8008550 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087a0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80087a2:	0798      	lsls	r0, r3, #30
 80087a4:	d4f6      	bmi.n	8008794 <HAL_RCC_OscConfig+0x574>
 80087a6:	e5cf      	b.n	8008348 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087a8:	68f3      	ldr	r3, [r6, #12]
 80087aa:	6a22      	ldr	r2, [r4, #32]
 80087ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80087b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80087b4:	60f3      	str	r3, [r6, #12]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	e58f      	b.n	80082da <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ba:	6873      	ldr	r3, [r6, #4]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80087c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80087c6:	6073      	str	r3, [r6, #4]
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	e584      	b.n	80082d6 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087cc:	4a02      	ldr	r2, [pc, #8]	; (80087d8 <HAL_RCC_OscConfig+0x5b8>)
 80087ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087d6:	e68e      	b.n	80084f6 <HAL_RCC_OscConfig+0x2d6>
 80087d8:	58024400 	.word	0x58024400
 80087dc:	fffffc0c 	.word	0xfffffc0c
 80087e0:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087e4:	4a08      	ldr	r2, [pc, #32]	; (8008808 <HAL_RCC_OscConfig+0x5e8>)
 80087e6:	6853      	ldr	r3, [r2, #4]
 80087e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80087ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087f0:	6053      	str	r3, [r2, #4]
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	e571      	b.n	80082da <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087f6:	f042 0204 	orr.w	r2, r2, #4
 80087fa:	671a      	str	r2, [r3, #112]	; 0x70
 80087fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	671a      	str	r2, [r3, #112]	; 0x70
 8008804:	e677      	b.n	80084f6 <HAL_RCC_OscConfig+0x2d6>
 8008806:	bf00      	nop
 8008808:	58024400 	.word	0x58024400

0800880c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800880c:	4a47      	ldr	r2, [pc, #284]	; (800892c <HAL_RCC_GetSysClockFreq+0x120>)
 800880e:	6913      	ldr	r3, [r2, #16]
 8008810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008814:	2b10      	cmp	r3, #16
 8008816:	d004      	beq.n	8008822 <HAL_RCC_GetSysClockFreq+0x16>
 8008818:	2b18      	cmp	r3, #24
 800881a:	d00d      	beq.n	8008838 <HAL_RCC_GetSysClockFreq+0x2c>
 800881c:	b11b      	cbz	r3, 8008826 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800881e:	4844      	ldr	r0, [pc, #272]	; (8008930 <HAL_RCC_GetSysClockFreq+0x124>)
 8008820:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008822:	4844      	ldr	r0, [pc, #272]	; (8008934 <HAL_RCC_GetSysClockFreq+0x128>)
 8008824:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	d54a      	bpl.n	80088c2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	4842      	ldr	r0, [pc, #264]	; (8008938 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008830:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008834:	40d8      	lsrs	r0, r3
 8008836:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008838:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800883a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800883c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800883e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008840:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008844:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008848:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800884a:	d038      	beq.n	80088be <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800884c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008850:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008854:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008858:	fb01 f105 	mul.w	r1, r1, r5
 800885c:	2b01      	cmp	r3, #1
 800885e:	ee07 1a90 	vmov	s15, r1
 8008862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8008866:	d002      	beq.n	800886e <HAL_RCC_GetSysClockFreq+0x62>
 8008868:	2b02      	cmp	r3, #2
 800886a:	d02c      	beq.n	80088c6 <HAL_RCC_GetSysClockFreq+0xba>
 800886c:	b393      	cbz	r3, 80088d4 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800886e:	ee07 0a90 	vmov	s15, r0
 8008872:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800893c <HAL_RCC_GetSysClockFreq+0x130>
 8008876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800887a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800887c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008880:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008940 <HAL_RCC_GetSysClockFreq+0x134>
 8008884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008894:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008898:	ee77 7a86 	vadd.f32	s15, s15, s12
 800889c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80088a0:	4b22      	ldr	r3, [pc, #136]	; (800892c <HAL_RCC_GetSysClockFreq+0x120>)
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80088a8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ba:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80088be:	bc30      	pop	{r4, r5}
 80088c0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088c2:	481d      	ldr	r0, [pc, #116]	; (8008938 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80088c4:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c6:	ee07 0a90 	vmov	s15, r0
 80088ca:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8008944 <HAL_RCC_GetSysClockFreq+0x138>
 80088ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088d2:	e7d2      	b.n	800887a <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d4:	6813      	ldr	r3, [r2, #0]
 80088d6:	069b      	lsls	r3, r3, #26
 80088d8:	d520      	bpl.n	800891c <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088da:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088dc:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e0:	4915      	ldr	r1, [pc, #84]	; (8008938 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e6:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088f0:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088f2:	eddf 4a13 	vldr	s9, [pc, #76]	; 8008940 <HAL_RCC_GetSysClockFreq+0x134>
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	ee06 1a10 	vmov	s12, r1
 80088fe:	ee06 3a90 	vmov	s13, r3
 8008902:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008906:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800890a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800890e:	eee7 6a24 	vfma.f32	s13, s14, s9
 8008912:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008916:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800891a:	e7c1      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800891c:	ee07 0a90 	vmov	s15, r0
 8008920:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008948 <HAL_RCC_GetSysClockFreq+0x13c>
 8008924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008928:	e7a7      	b.n	800887a <HAL_RCC_GetSysClockFreq+0x6e>
 800892a:	bf00      	nop
 800892c:	58024400 	.word	0x58024400
 8008930:	003d0900 	.word	0x003d0900
 8008934:	017d7840 	.word	0x017d7840
 8008938:	03d09000 	.word	0x03d09000
 800893c:	4a742400 	.word	0x4a742400
 8008940:	39000000 	.word	0x39000000
 8008944:	4bbebc20 	.word	0x4bbebc20
 8008948:	4c742400 	.word	0x4c742400

0800894c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800894c:	2800      	cmp	r0, #0
 800894e:	f000 810e 	beq.w	8008b6e <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008952:	4a8d      	ldr	r2, [pc, #564]	; (8008b88 <HAL_RCC_ClockConfig+0x23c>)
 8008954:	6813      	ldr	r3, [r2, #0]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	428b      	cmp	r3, r1
{
 800895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008964:	d20c      	bcs.n	8008980 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008966:	6813      	ldr	r3, [r2, #0]
 8008968:	f023 030f 	bic.w	r3, r3, #15
 800896c:	430b      	orrs	r3, r1
 800896e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008970:	6813      	ldr	r3, [r2, #0]
 8008972:	f003 030f 	and.w	r3, r3, #15
 8008976:	428b      	cmp	r3, r1
 8008978:	d002      	beq.n	8008980 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800897a:	2001      	movs	r0, #1
}
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	075f      	lsls	r7, r3, #29
 8008984:	d50b      	bpl.n	800899e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008986:	4981      	ldr	r1, [pc, #516]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008988:	6920      	ldr	r0, [r4, #16]
 800898a:	698a      	ldr	r2, [r1, #24]
 800898c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008990:	4290      	cmp	r0, r2
 8008992:	d904      	bls.n	800899e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008994:	698a      	ldr	r2, [r1, #24]
 8008996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800899a:	4302      	orrs	r2, r0
 800899c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800899e:	071e      	lsls	r6, r3, #28
 80089a0:	d50b      	bpl.n	80089ba <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089a2:	497a      	ldr	r1, [pc, #488]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 80089a4:	6960      	ldr	r0, [r4, #20]
 80089a6:	69ca      	ldr	r2, [r1, #28]
 80089a8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80089ac:	4290      	cmp	r0, r2
 80089ae:	d904      	bls.n	80089ba <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089b0:	69ca      	ldr	r2, [r1, #28]
 80089b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089b6:	4302      	orrs	r2, r0
 80089b8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ba:	06d8      	lsls	r0, r3, #27
 80089bc:	d50b      	bpl.n	80089d6 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089be:	4973      	ldr	r1, [pc, #460]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 80089c0:	69a0      	ldr	r0, [r4, #24]
 80089c2:	69ca      	ldr	r2, [r1, #28]
 80089c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80089c8:	4290      	cmp	r0, r2
 80089ca:	d904      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089cc:	69ca      	ldr	r2, [r1, #28]
 80089ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089d2:	4302      	orrs	r2, r0
 80089d4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089d6:	0699      	lsls	r1, r3, #26
 80089d8:	d50b      	bpl.n	80089f2 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089da:	496c      	ldr	r1, [pc, #432]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 80089dc:	69e0      	ldr	r0, [r4, #28]
 80089de:	6a0a      	ldr	r2, [r1, #32]
 80089e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80089e4:	4290      	cmp	r0, r2
 80089e6:	d904      	bls.n	80089f2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80089e8:	6a0a      	ldr	r2, [r1, #32]
 80089ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089ee:	4302      	orrs	r2, r0
 80089f0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f2:	079a      	lsls	r2, r3, #30
 80089f4:	f140 80ad 	bpl.w	8008b52 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089f8:	4864      	ldr	r0, [pc, #400]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 80089fa:	68e1      	ldr	r1, [r4, #12]
 80089fc:	6982      	ldr	r2, [r0, #24]
 80089fe:	f002 020f 	and.w	r2, r2, #15
 8008a02:	4291      	cmp	r1, r2
 8008a04:	d904      	bls.n	8008a10 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a06:	6982      	ldr	r2, [r0, #24]
 8008a08:	f022 020f 	bic.w	r2, r2, #15
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a10:	07d8      	lsls	r0, r3, #31
 8008a12:	d531      	bpl.n	8008a78 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a14:	4a5d      	ldr	r2, [pc, #372]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008a16:	68a1      	ldr	r1, [r4, #8]
 8008a18:	6993      	ldr	r3, [r2, #24]
 8008a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a22:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a24:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a26:	2902      	cmp	r1, #2
 8008a28:	f000 80a3 	beq.w	8008b72 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a2c:	2903      	cmp	r1, #3
 8008a2e:	f000 809a 	beq.w	8008b66 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a32:	2901      	cmp	r1, #1
 8008a34:	f000 80a3 	beq.w	8008b7e <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a38:	0758      	lsls	r0, r3, #29
 8008a3a:	d59e      	bpl.n	800897a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a3c:	4a53      	ldr	r2, [pc, #332]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a3e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a42:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a44:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8008a4e:	f7fd fbaf 	bl	80061b0 <HAL_GetTick>
 8008a52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a54:	e005      	b.n	8008a62 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a56:	f7fd fbab 	bl	80061b0 <HAL_GetTick>
 8008a5a:	1b80      	subs	r0, r0, r6
 8008a5c:	4540      	cmp	r0, r8
 8008a5e:	f200 808c 	bhi.w	8008b7a <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6862      	ldr	r2, [r4, #4]
 8008a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a6a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a6e:	d1f2      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	0799      	lsls	r1, r3, #30
 8008a74:	d506      	bpl.n	8008a84 <HAL_RCC_ClockConfig+0x138>
 8008a76:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a78:	4844      	ldr	r0, [pc, #272]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008a7a:	6982      	ldr	r2, [r0, #24]
 8008a7c:	f002 020f 	and.w	r2, r2, #15
 8008a80:	428a      	cmp	r2, r1
 8008a82:	d86a      	bhi.n	8008b5a <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a84:	4940      	ldr	r1, [pc, #256]	; (8008b88 <HAL_RCC_ClockConfig+0x23c>)
 8008a86:	680a      	ldr	r2, [r1, #0]
 8008a88:	f002 020f 	and.w	r2, r2, #15
 8008a8c:	42aa      	cmp	r2, r5
 8008a8e:	d90a      	bls.n	8008aa6 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a90:	680a      	ldr	r2, [r1, #0]
 8008a92:	f022 020f 	bic.w	r2, r2, #15
 8008a96:	432a      	orrs	r2, r5
 8008a98:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9a:	680a      	ldr	r2, [r1, #0]
 8008a9c:	f002 020f 	and.w	r2, r2, #15
 8008aa0:	42aa      	cmp	r2, r5
 8008aa2:	f47f af6a 	bne.w	800897a <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008aa6:	075a      	lsls	r2, r3, #29
 8008aa8:	d50b      	bpl.n	8008ac2 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008aaa:	4938      	ldr	r1, [pc, #224]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008aac:	6920      	ldr	r0, [r4, #16]
 8008aae:	698a      	ldr	r2, [r1, #24]
 8008ab0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008ab4:	4290      	cmp	r0, r2
 8008ab6:	d204      	bcs.n	8008ac2 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ab8:	698a      	ldr	r2, [r1, #24]
 8008aba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008abe:	4302      	orrs	r2, r0
 8008ac0:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac2:	071f      	lsls	r7, r3, #28
 8008ac4:	d50b      	bpl.n	8008ade <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ac6:	4931      	ldr	r1, [pc, #196]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008ac8:	6960      	ldr	r0, [r4, #20]
 8008aca:	69ca      	ldr	r2, [r1, #28]
 8008acc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008ad0:	4290      	cmp	r0, r2
 8008ad2:	d204      	bcs.n	8008ade <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ad4:	69ca      	ldr	r2, [r1, #28]
 8008ad6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ada:	4302      	orrs	r2, r0
 8008adc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ade:	06de      	lsls	r6, r3, #27
 8008ae0:	d50b      	bpl.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ae2:	492a      	ldr	r1, [pc, #168]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	69a0      	ldr	r0, [r4, #24]
 8008ae6:	69ca      	ldr	r2, [r1, #28]
 8008ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008aec:	4290      	cmp	r0, r2
 8008aee:	d204      	bcs.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008af0:	69ca      	ldr	r2, [r1, #28]
 8008af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008af6:	4302      	orrs	r2, r0
 8008af8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008afa:	069d      	lsls	r5, r3, #26
 8008afc:	d50b      	bpl.n	8008b16 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008afe:	4a23      	ldr	r2, [pc, #140]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008b00:	69e1      	ldr	r1, [r4, #28]
 8008b02:	6a13      	ldr	r3, [r2, #32]
 8008b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	d204      	bcs.n	8008b16 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b0c:	6a13      	ldr	r3, [r2, #32]
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b12:	430b      	orrs	r3, r1
 8008b14:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b16:	f7ff fe79 	bl	800880c <HAL_RCC_GetSysClockFreq>
 8008b1a:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <HAL_RCC_ClockConfig+0x240>)
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	481c      	ldr	r0, [pc, #112]	; (8008b90 <HAL_RCC_ClockConfig+0x244>)
 8008b20:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b22:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b24:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008b28:	4d1a      	ldr	r5, [pc, #104]	; (8008b94 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	4c1a      	ldr	r4, [pc, #104]	; (8008b98 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b30:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b32:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b34:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008b38:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b3a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8008b3e:	4d17      	ldr	r5, [pc, #92]	; (8008b9c <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b40:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b42:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008b46:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b48:	6023      	str	r3, [r4, #0]
}
 8008b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008b4e:	f7fd bacd 	b.w	80060ec <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	f53f af5e 	bmi.w	8008a14 <HAL_RCC_ClockConfig+0xc8>
 8008b58:	e794      	b.n	8008a84 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b5a:	6982      	ldr	r2, [r0, #24]
 8008b5c:	f022 020f 	bic.w	r2, r2, #15
 8008b60:	4311      	orrs	r1, r2
 8008b62:	6181      	str	r1, [r0, #24]
 8008b64:	e78e      	b.n	8008a84 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b66:	019f      	lsls	r7, r3, #6
 8008b68:	f53f af68 	bmi.w	8008a3c <HAL_RCC_ClockConfig+0xf0>
 8008b6c:	e705      	b.n	800897a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008b6e:	2001      	movs	r0, #1
}
 8008b70:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b72:	039b      	lsls	r3, r3, #14
 8008b74:	f53f af62 	bmi.w	8008a3c <HAL_RCC_ClockConfig+0xf0>
 8008b78:	e6ff      	b.n	800897a <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008b7a:	2003      	movs	r0, #3
 8008b7c:	e6fe      	b.n	800897c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b7e:	05de      	lsls	r6, r3, #23
 8008b80:	f53f af5c 	bmi.w	8008a3c <HAL_RCC_ClockConfig+0xf0>
 8008b84:	e6f9      	b.n	800897a <HAL_RCC_ClockConfig+0x2e>
 8008b86:	bf00      	nop
 8008b88:	52002000 	.word	0x52002000
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	0800a4a4 	.word	0x0800a4a4
 8008b94:	24001070 	.word	0x24001070
 8008b98:	24000004 	.word	0x24000004
 8008b9c:	24000000 	.word	0x24000000

08008ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ba0:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ba2:	f7ff fe33 	bl	800880c <HAL_RCC_GetSysClockFreq>
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8008ba8:	490b      	ldr	r1, [pc, #44]	; (8008bd8 <HAL_RCC_GetHCLKFreq+0x38>)
 8008baa:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bac:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bae:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bb2:	4c0a      	ldr	r4, [pc, #40]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x3c>)
 8008bb4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bb8:	4d09      	ldr	r5, [pc, #36]	; (8008be0 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bba:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bbc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bbe:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bc2:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bc6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bca:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8008bce:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	0800a4a4 	.word	0x0800a4a4
 8008bdc:	24000004 	.word	0x24000004
 8008be0:	24000000 	.word	0x24000000

08008be4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008be4:	4a3b      	ldr	r2, [pc, #236]	; (8008cd4 <RCCEx_PLL2_Config+0xf0>)
{
 8008be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008be8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d069      	beq.n	8008cc6 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bf2:	6813      	ldr	r3, [r2, #0]
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bf8:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8008bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bfe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c00:	f7fd fad6 	bl	80061b0 <HAL_GetTick>
 8008c04:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c06:	e004      	b.n	8008c12 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c08:	f7fd fad2 	bl	80061b0 <HAL_GetTick>
 8008c0c:	1b43      	subs	r3, r0, r5
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d857      	bhi.n	8008cc2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	011a      	lsls	r2, r3, #4
 8008c16:	d4f7      	bmi.n	8008c08 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c1a:	6832      	ldr	r2, [r6, #0]
 8008c1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c20:	492d      	ldr	r1, [pc, #180]	; (8008cd8 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008c26:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c28:	6875      	ldr	r5, [r6, #4]
 8008c2a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008c2e:	3d01      	subs	r5, #1
 8008c30:	1e50      	subs	r0, r2, #1
 8008c32:	3b01      	subs	r3, #1
 8008c34:	6932      	ldr	r2, [r6, #16]
 8008c36:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008c3a:	025b      	lsls	r3, r3, #9
 8008c3c:	0400      	lsls	r0, r0, #16
 8008c3e:	3a01      	subs	r2, #1
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008c46:	0612      	lsls	r2, r2, #24
 8008c48:	4303      	orrs	r3, r0
 8008c4a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c4e:	432b      	orrs	r3, r5
 8008c50:	4313      	orrs	r3, r2
 8008c52:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c56:	6972      	ldr	r2, [r6, #20]
 8008c58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c62:	69b2      	ldr	r2, [r6, #24]
 8008c64:	f023 0320 	bic.w	r3, r3, #32
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008c76:	69f3      	ldr	r3, [r6, #28]
 8008c78:	4011      	ands	r1, r2
 8008c7a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008c7e:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c82:	f043 0310 	orr.w	r3, r3, #16
 8008c86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c8a:	b1f7      	cbz	r7, 8008cca <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c8c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c8e:	bf0c      	ite	eq
 8008c90:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c94:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008c98:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c9a:	4b0e      	ldr	r3, [pc, #56]	; (8008cd4 <RCCEx_PLL2_Config+0xf0>)
 8008c9c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c9e:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008ca0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008ca4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008ca6:	f7fd fa83 	bl	80061b0 <HAL_GetTick>
 8008caa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cac:	e004      	b.n	8008cb8 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cae:	f7fd fa7f 	bl	80061b0 <HAL_GetTick>
 8008cb2:	1b00      	subs	r0, r0, r4
 8008cb4:	2802      	cmp	r0, #2
 8008cb6:	d804      	bhi.n	8008cc2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	d5f7      	bpl.n	8008cae <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008cbe:	2000      	movs	r0, #0
}
 8008cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008cc2:	2003      	movs	r0, #3
}
 8008cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008cc6:	2001      	movs	r0, #1
}
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cd0:	e7e3      	b.n	8008c9a <RCCEx_PLL2_Config+0xb6>
 8008cd2:	bf00      	nop
 8008cd4:	58024400 	.word	0x58024400
 8008cd8:	ffff0007 	.word	0xffff0007

08008cdc <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cdc:	4a3b      	ldr	r2, [pc, #236]	; (8008dcc <RCCEx_PLL3_Config+0xf0>)
{
 8008cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ce0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d069      	beq.n	8008dbe <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cf0:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008cf8:	f7fd fa5a 	bl	80061b0 <HAL_GetTick>
 8008cfc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cfe:	e004      	b.n	8008d0a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d00:	f7fd fa56 	bl	80061b0 <HAL_GetTick>
 8008d04:	1b43      	subs	r3, r0, r5
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d857      	bhi.n	8008dba <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	009a      	lsls	r2, r3, #2
 8008d0e:	d4f7      	bmi.n	8008d00 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d12:	6832      	ldr	r2, [r6, #0]
 8008d14:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d18:	492d      	ldr	r1, [pc, #180]	; (8008dd0 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d1a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008d1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d20:	6875      	ldr	r5, [r6, #4]
 8008d22:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008d26:	3d01      	subs	r5, #1
 8008d28:	1e50      	subs	r0, r2, #1
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6932      	ldr	r2, [r6, #16]
 8008d2e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008d32:	025b      	lsls	r3, r3, #9
 8008d34:	0400      	lsls	r0, r0, #16
 8008d36:	3a01      	subs	r2, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008d3e:	0612      	lsls	r2, r2, #24
 8008d40:	4303      	orrs	r3, r0
 8008d42:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d46:	432b      	orrs	r3, r5
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d4e:	6972      	ldr	r2, [r6, #20]
 8008d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d54:	4313      	orrs	r3, r2
 8008d56:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d5a:	69b2      	ldr	r2, [r6, #24]
 8008d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d60:	4313      	orrs	r3, r2
 8008d62:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008d6e:	69f3      	ldr	r3, [r6, #28]
 8008d70:	4011      	ands	r1, r2
 8008d72:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008d76:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d82:	b1f7      	cbz	r7, 8008dc2 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d84:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d86:	bf0c      	ite	eq
 8008d88:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d8c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008d90:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d92:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <RCCEx_PLL3_Config+0xf0>)
 8008d94:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d96:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008d98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d9c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008d9e:	f7fd fa07 	bl	80061b0 <HAL_GetTick>
 8008da2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008da4:	e004      	b.n	8008db0 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008da6:	f7fd fa03 	bl	80061b0 <HAL_GetTick>
 8008daa:	1b00      	subs	r0, r0, r4
 8008dac:	2802      	cmp	r0, #2
 8008dae:	d804      	bhi.n	8008dba <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	d5f7      	bpl.n	8008da6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008db6:	2000      	movs	r0, #0
}
 8008db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008dba:	2003      	movs	r0, #3
}
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008dbe:	2001      	movs	r0, #1
}
 8008dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dc8:	e7e3      	b.n	8008d92 <RCCEx_PLL3_Config+0xb6>
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	ffff0007 	.word	0xffff0007

08008dd4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008dd8:	6803      	ldr	r3, [r0, #0]
{
 8008dda:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ddc:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008de0:	d01c      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008de2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8008de4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008de8:	f000 84c7 	beq.w	800977a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008dec:	d823      	bhi.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	f000 842c 	beq.w	800964c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8008df4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008df8:	d120      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	3004      	adds	r0, #4
 8008dfe:	f7ff fef1 	bl	8008be4 <RCCEx_PLL2_Config>
 8008e02:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	f040 84c0 	bne.w	800978a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8008e0a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008e0c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e0e:	48b0      	ldr	r0, [pc, #704]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008e10:	2600      	movs	r6, #0
 8008e12:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008e14:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e1c:	05da      	lsls	r2, r3, #23
 8008e1e:	d511      	bpl.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e20:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008e22:	2a04      	cmp	r2, #4
 8008e24:	f200 8580 	bhi.w	8009928 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8008e28:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008e2c:	04c104ba 	.word	0x04c104ba
 8008e30:	033b04b2 	.word	0x033b04b2
 8008e34:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e36:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008e3a:	d0e8      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e3c:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e3e:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e42:	d4ed      	bmi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e44:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e46:	059f      	lsls	r7, r3, #22
 8008e48:	d51b      	bpl.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008e4c:	2a80      	cmp	r2, #128	; 0x80
 8008e4e:	f000 84b7 	beq.w	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8008e52:	f200 8127 	bhi.w	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	f000 83e6 	beq.w	8009628 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8008e5c:	2a40      	cmp	r2, #64	; 0x40
 8008e5e:	f040 8128 	bne.w	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e62:	2100      	movs	r1, #0
 8008e64:	1d20      	adds	r0, r4, #4
 8008e66:	f7ff febd 	bl	8008be4 <RCCEx_PLL2_Config>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e6e:	2d00      	cmp	r5, #0
 8008e70:	f040 83cc 	bne.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e74:	4996      	ldr	r1, [pc, #600]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008e76:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008e78:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008e7a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008e7e:	4302      	orrs	r2, r0
 8008e80:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e82:	0558      	lsls	r0, r3, #21
 8008e84:	d51f      	bpl.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e86:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008e8a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008e8e:	f000 8462 	beq.w	8009756 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e92:	f200 8111 	bhi.w	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	f000 83c0 	beq.w	800961c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008e9c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008ea0:	f040 8112 	bne.w	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	1d20      	adds	r0, r4, #4
 8008ea8:	f7ff fe9c 	bl	8008be4 <RCCEx_PLL2_Config>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	f040 83b1 	bne.w	8009618 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008eb6:	4986      	ldr	r1, [pc, #536]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008eb8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008ebc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008ebe:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008ec2:	4302      	orrs	r2, r0
 8008ec4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ec6:	0519      	lsls	r1, r3, #20
 8008ec8:	d51f      	bpl.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008eca:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008ece:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008ed2:	f000 8437 	beq.w	8009744 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8008ed6:	f200 80fd 	bhi.w	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	f000 83aa 	beq.w	8009634 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008ee0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008ee4:	f040 80fe 	bne.w	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	1d20      	adds	r0, r4, #4
 8008eec:	f7ff fe7a 	bl	8008be4 <RCCEx_PLL2_Config>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	f040 8387 	bne.w	8009608 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008efa:	4975      	ldr	r1, [pc, #468]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008efc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008f00:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008f02:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008f06:	4302      	orrs	r2, r0
 8008f08:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f0a:	019a      	lsls	r2, r3, #6
 8008f0c:	d518      	bpl.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008f0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008f10:	2a20      	cmp	r2, #32
 8008f12:	f000 840d 	beq.w	8009730 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008f16:	f200 80e8 	bhi.w	80090ea <HAL_RCCEx_PeriphCLKConfig+0x316>
 8008f1a:	b13a      	cbz	r2, 8008f2c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008f1c:	2a10      	cmp	r2, #16
 8008f1e:	f040 80e7 	bne.w	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f22:	496b      	ldr	r1, [pc, #428]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008f24:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008f26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008f2a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	f040 83ba 	bne.w	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f32:	4967      	ldr	r1, [pc, #412]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008f34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f36:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008f38:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008f3c:	4302      	orrs	r2, r0
 8008f3e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f40:	04df      	lsls	r7, r3, #19
 8008f42:	d51d      	bpl.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f44:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008f46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008f4a:	f000 840d 	beq.w	8009768 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8008f4e:	f200 80d2 	bhi.w	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	f000 8374 	beq.w	8009640 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8008f58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008f5c:	f040 80d3 	bne.w	8009106 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f60:	2100      	movs	r1, #0
 8008f62:	1d20      	adds	r0, r4, #4
 8008f64:	f7ff fe3e 	bl	8008be4 <RCCEx_PLL2_Config>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	f040 834f 	bne.w	8009610 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f72:	4957      	ldr	r1, [pc, #348]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008f74:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008f76:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008f78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008f7c:	4302      	orrs	r2, r0
 8008f7e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f80:	0498      	lsls	r0, r3, #18
 8008f82:	d51b      	bpl.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f86:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008f8a:	f000 83bd 	beq.w	8009708 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008f8e:	f200 80bd 	bhi.w	800910c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008f92:	b14a      	cbz	r2, 8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f94:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008f98:	f040 80c2 	bne.w	8009120 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	1d20      	adds	r0, r4, #4
 8008fa0:	f7ff fe20 	bl	8008be4 <RCCEx_PLL2_Config>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	f040 837e 	bne.w	80096aa <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fae:	4948      	ldr	r1, [pc, #288]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008fb0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008fb2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008fb4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008fb8:	4302      	orrs	r2, r0
 8008fba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fbc:	0459      	lsls	r1, r3, #17
 8008fbe:	d51d      	bpl.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fc0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8008fc4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008fc8:	f000 83a8 	beq.w	800971c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8008fcc:	f200 80ab 	bhi.w	8009126 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008fd0:	b14a      	cbz	r2, 8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008fd2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008fd6:	f040 80b0 	bne.w	800913a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fda:	2101      	movs	r1, #1
 8008fdc:	1d20      	adds	r0, r4, #4
 8008fde:	f7ff fe01 	bl	8008be4 <RCCEx_PLL2_Config>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	f040 8363 	bne.w	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fec:	4938      	ldr	r1, [pc, #224]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008fee:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008ff2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008ff4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008ff8:	4302      	orrs	r2, r0
 8008ffa:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	d509      	bpl.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8009000:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009002:	2a00      	cmp	r2, #0
 8009004:	f000 8264 	beq.w	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8009008:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800900c:	f000 825a 	beq.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8009010:	2601      	movs	r6, #1
 8009012:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009014:	041f      	lsls	r7, r3, #16
 8009016:	d50d      	bpl.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8009018:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800901a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800901e:	f000 8420 	beq.w	8009862 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8009022:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009026:	f000 82ce 	beq.w	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800902a:	2a00      	cmp	r2, #0
 800902c:	f000 82d1 	beq.w	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8009030:	2601      	movs	r6, #1
 8009032:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009034:	01d8      	lsls	r0, r3, #7
 8009036:	f100 81cf 	bmi.w	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800903a:	0259      	lsls	r1, r3, #9
 800903c:	f100 81ef 	bmi.w	800941e <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009040:	07df      	lsls	r7, r3, #31
 8009042:	f140 8088 	bpl.w	8009156 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009046:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009048:	2a28      	cmp	r2, #40	; 0x28
 800904a:	f200 81cf 	bhi.w	80093ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 800904e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009052:	007e      	.short	0x007e
 8009054:	01cd01cd 	.word	0x01cd01cd
 8009058:	01cd01cd 	.word	0x01cd01cd
 800905c:	01cd01cd 	.word	0x01cd01cd
 8009060:	03d401cd 	.word	0x03d401cd
 8009064:	01cd01cd 	.word	0x01cd01cd
 8009068:	01cd01cd 	.word	0x01cd01cd
 800906c:	01cd01cd 	.word	0x01cd01cd
 8009070:	007701cd 	.word	0x007701cd
 8009074:	01cd01cd 	.word	0x01cd01cd
 8009078:	01cd01cd 	.word	0x01cd01cd
 800907c:	01cd01cd 	.word	0x01cd01cd
 8009080:	007e01cd 	.word	0x007e01cd
 8009084:	01cd01cd 	.word	0x01cd01cd
 8009088:	01cd01cd 	.word	0x01cd01cd
 800908c:	01cd01cd 	.word	0x01cd01cd
 8009090:	007e01cd 	.word	0x007e01cd
 8009094:	01cd01cd 	.word	0x01cd01cd
 8009098:	01cd01cd 	.word	0x01cd01cd
 800909c:	01cd01cd 	.word	0x01cd01cd
 80090a0:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 80090a4:	2ac0      	cmp	r2, #192	; 0xc0
 80090a6:	f43f aee2 	beq.w	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80090aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80090ae:	f43f aede 	beq.w	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80090b2:	2601      	movs	r6, #1
 80090b4:	4635      	mov	r5, r6
 80090b6:	e6e4      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80090b8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80090bc:	f43f aef8 	beq.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80090c0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80090c4:	f43f aef4 	beq.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80090c8:	2601      	movs	r6, #1
 80090ca:	4635      	mov	r5, r6
 80090cc:	e6fb      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80090ce:	bf00      	nop
 80090d0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 80090d4:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80090d8:	f43f af0c 	beq.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80090dc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80090e0:	f43f af08 	beq.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80090e4:	2601      	movs	r6, #1
 80090e6:	4635      	mov	r5, r6
 80090e8:	e70f      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80090ea:	2a30      	cmp	r2, #48	; 0x30
 80090ec:	f43f af1e 	beq.w	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x158>
 80090f0:	2601      	movs	r6, #1
 80090f2:	4635      	mov	r5, r6
 80090f4:	e724      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80090f6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80090fa:	f43f af37 	beq.w	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80090fe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009102:	f43f af33 	beq.w	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009106:	2601      	movs	r6, #1
 8009108:	4635      	mov	r5, r6
 800910a:	e739      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 800910c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8009110:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009114:	f43f af48 	beq.w	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009118:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800911c:	f43f af44 	beq.w	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009120:	2601      	movs	r6, #1
 8009122:	4635      	mov	r5, r6
 8009124:	e74a      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009126:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800912a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800912e:	f43f af5a 	beq.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009132:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009136:	f43f af56 	beq.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800913a:	2601      	movs	r6, #1
 800913c:	4635      	mov	r5, r6
 800913e:	e75d      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009140:	2101      	movs	r1, #1
 8009142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009146:	f7ff fdc9 	bl	8008cdc <RCCEx_PLL3_Config>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800914e:	2d00      	cmp	r5, #0
 8009150:	f000 82c0 	beq.w	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8009154:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009156:	0798      	lsls	r0, r3, #30
 8009158:	d516      	bpl.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800915a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800915c:	2a05      	cmp	r2, #5
 800915e:	f200 83e6 	bhi.w	800992e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8009162:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009166:	000d      	.short	0x000d
 8009168:	00060336 	.word	0x00060336
 800916c:	000d000d 	.word	0x000d000d
 8009170:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009172:	2101      	movs	r1, #1
 8009174:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009178:	f7ff fdb0 	bl	8008cdc <RCCEx_PLL3_Config>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009180:	2d00      	cmp	r5, #0
 8009182:	f000 8279 	beq.w	8009678 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009186:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009188:	0759      	lsls	r1, r3, #29
 800918a:	d517      	bpl.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800918c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009190:	2a05      	cmp	r2, #5
 8009192:	f200 83c6 	bhi.w	8009922 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8009196:	e8df f012 	tbh	[pc, r2, lsl #1]
 800919a:	000d      	.short	0x000d
 800919c:	00060326 	.word	0x00060326
 80091a0:	000d000d 	.word	0x000d000d
 80091a4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091a6:	2101      	movs	r1, #1
 80091a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091ac:	f7ff fd96 	bl	8008cdc <RCCEx_PLL3_Config>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	f000 826a 	beq.w	800968e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80091ba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091bc:	069a      	lsls	r2, r3, #26
 80091be:	d51d      	bpl.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80091c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80091c4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80091c8:	f000 8340 	beq.w	800984c <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80091cc:	f200 81af 	bhi.w	800952e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80091d0:	b14a      	cbz	r2, 80091e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 80091d2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80091d6:	f040 81b4 	bne.w	8009542 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091da:	2100      	movs	r1, #0
 80091dc:	1d20      	adds	r0, r4, #4
 80091de:	f7ff fd01 	bl	8008be4 <RCCEx_PLL2_Config>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	f040 823c 	bne.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091ec:	49b3      	ldr	r1, [pc, #716]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091ee:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80091f2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80091f4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80091f8:	4302      	orrs	r2, r0
 80091fa:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091fc:	065f      	lsls	r7, r3, #25
 80091fe:	d51d      	bpl.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009200:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009204:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009208:	f000 8334 	beq.w	8009874 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800920c:	f200 817f 	bhi.w	800950e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009210:	b14a      	cbz	r2, 8009226 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009212:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009216:	f040 8184 	bne.w	8009522 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800921a:	2100      	movs	r1, #0
 800921c:	1d20      	adds	r0, r4, #4
 800921e:	f7ff fce1 	bl	8008be4 <RCCEx_PLL2_Config>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009226:	2d00      	cmp	r5, #0
 8009228:	f040 8221 	bne.w	800966e <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800922c:	49a3      	ldr	r1, [pc, #652]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800922e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009232:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009234:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009238:	4302      	orrs	r2, r0
 800923a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800923c:	0618      	lsls	r0, r3, #24
 800923e:	d51d      	bpl.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009240:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009244:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009248:	f000 831f 	beq.w	800988a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800924c:	f200 814f 	bhi.w	80094ee <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8009250:	b14a      	cbz	r2, 8009266 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009252:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009256:	f040 8154 	bne.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800925a:	2100      	movs	r1, #0
 800925c:	1d20      	adds	r0, r4, #4
 800925e:	f7ff fcc1 	bl	8008be4 <RCCEx_PLL2_Config>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009266:	2d00      	cmp	r5, #0
 8009268:	f040 81f7 	bne.w	800965a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800926c:	4993      	ldr	r1, [pc, #588]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800926e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8009272:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009274:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009278:	4302      	orrs	r2, r0
 800927a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800927c:	0719      	lsls	r1, r3, #28
 800927e:	d50b      	bpl.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009280:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009284:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009288:	f000 831e 	beq.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800928c:	488b      	ldr	r0, [pc, #556]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800928e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009290:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009294:	430a      	orrs	r2, r1
 8009296:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009298:	06da      	lsls	r2, r3, #27
 800929a:	d50b      	bpl.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800929c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80092a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80092a4:	f000 8305 	beq.w	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092a8:	4884      	ldr	r0, [pc, #528]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80092aa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80092ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80092b0:	430a      	orrs	r2, r1
 80092b2:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092b4:	031f      	lsls	r7, r3, #12
 80092b6:	d50e      	bpl.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80092b8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80092bc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80092c0:	f000 816b 	beq.w	800959a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80092c4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80092c8:	f000 816e 	beq.w	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80092cc:	2900      	cmp	r1, #0
 80092ce:	f000 82e7 	beq.w	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80092d2:	2601      	movs	r6, #1
 80092d4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092d6:	0358      	lsls	r0, r3, #13
 80092d8:	d50f      	bpl.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 80092da:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80092de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80092e2:	f000 8144 	beq.w	800956e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80092e6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80092ea:	f000 8147 	beq.w	800957c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80092ee:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80092f2:	f000 82a2 	beq.w	800983a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80092f6:	2601      	movs	r6, #1
 80092f8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092fa:	03d9      	lsls	r1, r3, #15
 80092fc:	d517      	bpl.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80092fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009300:	2a00      	cmp	r2, #0
 8009302:	f000 8288 	beq.w	8009816 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8009306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800930a:	f040 817a 	bne.w	8009602 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800930e:	2102      	movs	r1, #2
 8009310:	1d20      	adds	r0, r4, #4
 8009312:	f7ff fc67 	bl	8008be4 <RCCEx_PLL2_Config>
 8009316:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	2d00      	cmp	r5, #0
 800931c:	f040 81e5 	bne.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009320:	4966      	ldr	r1, [pc, #408]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009322:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009324:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009326:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800932a:	4302      	orrs	r2, r0
 800932c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800932e:	009a      	lsls	r2, r3, #2
 8009330:	f100 815c 	bmi.w	80095ec <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009334:	039f      	lsls	r7, r3, #14
 8009336:	d43f      	bmi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009338:	1e30      	subs	r0, r6, #0
 800933a:	bf18      	it	ne
 800933c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800933e:	02de      	lsls	r6, r3, #11
 8009340:	d506      	bpl.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009342:	495e      	ldr	r1, [pc, #376]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009344:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009346:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009348:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800934c:	432a      	orrs	r2, r5
 800934e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009350:	00dd      	lsls	r5, r3, #3
 8009352:	d507      	bpl.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009354:	4959      	ldr	r1, [pc, #356]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009356:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800935a:	690a      	ldr	r2, [r1, #16]
 800935c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009360:	432a      	orrs	r2, r5
 8009362:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009364:	0299      	lsls	r1, r3, #10
 8009366:	d506      	bpl.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009368:	4954      	ldr	r1, [pc, #336]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800936a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800936c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800936e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009372:	432a      	orrs	r2, r5
 8009374:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009376:	005a      	lsls	r2, r3, #1
 8009378:	d509      	bpl.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800937a:	4a50      	ldr	r2, [pc, #320]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800937c:	6911      	ldr	r1, [r2, #16]
 800937e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009382:	6111      	str	r1, [r2, #16]
 8009384:	6911      	ldr	r1, [r2, #16]
 8009386:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800938a:	4329      	orrs	r1, r5
 800938c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800938e:	2b00      	cmp	r3, #0
 8009390:	da06      	bge.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009392:	494a      	ldr	r1, [pc, #296]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009394:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009396:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800939c:	432a      	orrs	r2, r5
 800939e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	d507      	bpl.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a4:	4a45      	ldr	r2, [pc, #276]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80093a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80093aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80093ac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80093b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80093b8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80093bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80093c0:	f000 8232 	beq.w	8009828 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80093c4:	f240 80c3 	bls.w	800954e <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80093c8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80093cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80093d0:	f000 80c0 	beq.w	8009554 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80093d4:	2001      	movs	r0, #1
 80093d6:	e7b2      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 80093d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80093da:	2a03      	cmp	r2, #3
 80093dc:	f200 82aa 	bhi.w	8009934 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80093e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80093e4:	018a0010 	.word	0x018a0010
 80093e8:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 80093ec:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093ee:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 80093f0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093f2:	f57f aec9 	bpl.w	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80093f6:	e6b0      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093f8:	2102      	movs	r1, #2
 80093fa:	1d20      	adds	r0, r4, #4
 80093fc:	f7ff fbf2 	bl	8008be4 <RCCEx_PLL2_Config>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009404:	2d00      	cmp	r5, #0
 8009406:	f040 8152 	bne.w	80096ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800940a:	492c      	ldr	r1, [pc, #176]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800940c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800940e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009410:	f022 0203 	bic.w	r2, r2, #3
 8009414:	4302      	orrs	r2, r0
 8009416:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009418:	0259      	lsls	r1, r3, #9
 800941a:	f57f ae11 	bpl.w	8009040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800941e:	4b28      	ldr	r3, [pc, #160]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8009420:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009422:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009428:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800942a:	f7fc fec1 	bl	80061b0 <HAL_GetTick>
 800942e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009430:	e005      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009432:	f7fc febd 	bl	80061b0 <HAL_GetTick>
 8009436:	1bc0      	subs	r0, r0, r7
 8009438:	2864      	cmp	r0, #100	; 0x64
 800943a:	f200 81e8 	bhi.w	800980e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943e:	f8d8 3000 	ldr.w	r3, [r8]
 8009442:	05da      	lsls	r2, r3, #23
 8009444:	d5f5      	bpl.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009446:	2d00      	cmp	r5, #0
 8009448:	f040 8267 	bne.w	800991a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800944c:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800944e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009452:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009454:	4059      	eors	r1, r3
 8009456:	f411 7f40 	tst.w	r1, #768	; 0x300
 800945a:	d00b      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800945c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800945e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009460:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009464:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009468:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800946a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800946c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009470:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009472:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009478:	f000 8231 	beq.w	80098de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800947c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009480:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009484:	f000 823f 	beq.w	8009906 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8009488:	490c      	ldr	r1, [pc, #48]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800948a:	690a      	ldr	r2, [r1, #16]
 800948c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009490:	610a      	str	r2, [r1, #16]
 8009492:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009498:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800949a:	430b      	orrs	r3, r1
 800949c:	6713      	str	r3, [r2, #112]	; 0x70
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	e5ce      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80094a2:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	f040 80b5 	bne.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094aa:	4904      	ldr	r1, [pc, #16]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80094ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80094b0:	f022 0207 	bic.w	r2, r2, #7
 80094b4:	4302      	orrs	r2, r0
 80094b6:	650a      	str	r2, [r1, #80]	; 0x50
 80094b8:	e4c5      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
 80094c0:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094c4:	2101      	movs	r1, #1
 80094c6:	1d20      	adds	r0, r4, #4
 80094c8:	f7ff fb8c 	bl	8008be4 <RCCEx_PLL2_Config>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	f040 810c 	bne.w	80096ee <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80094d6:	49b9      	ldr	r1, [pc, #740]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094d8:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80094da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80094dc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80094de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094e2:	ea42 0200 	orr.w	r2, r2, r0
 80094e6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094e8:	f57f ada4 	bpl.w	8009034 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80094ec:	e594      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094ee:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80094f2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80094f6:	f43f aeb6 	beq.w	8009266 <HAL_RCCEx_PeriphCLKConfig+0x492>
 80094fa:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80094fe:	f43f aeb2 	beq.w	8009266 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009502:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009504:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009506:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009508:	f57f aec6 	bpl.w	8009298 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800950c:	e6b8      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800950e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009512:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009516:	f43f ae86 	beq.w	8009226 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800951a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800951e:	f43f ae82 	beq.w	8009226 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009522:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009524:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009526:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009528:	f57f aea8 	bpl.w	800927c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800952c:	e688      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800952e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009532:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009536:	f43f ae56 	beq.w	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 800953a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800953e:	f43f ae52 	beq.w	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009542:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009544:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009546:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009548:	f57f ae78 	bpl.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
 800954c:	e658      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 800954e:	2a00      	cmp	r2, #0
 8009550:	f47f af40 	bne.w	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8009554:	2d00      	cmp	r5, #0
 8009556:	f47f af3d 	bne.w	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800955a:	4d98      	ldr	r5, [pc, #608]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800955c:	1e30      	subs	r0, r6, #0
 800955e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009560:	bf18      	it	ne
 8009562:	2001      	movne	r0, #1
 8009564:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009568:	430a      	orrs	r2, r1
 800956a:	656a      	str	r2, [r5, #84]	; 0x54
 800956c:	e6e7      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800956e:	2101      	movs	r1, #1
 8009570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009574:	f7ff fbb2 	bl	8008cdc <RCCEx_PLL3_Config>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800957c:	2d00      	cmp	r5, #0
 800957e:	f040 80a4 	bne.w	80096ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009582:	498e      	ldr	r1, [pc, #568]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009584:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009588:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800958a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800958e:	4302      	orrs	r2, r0
 8009590:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009592:	03d9      	lsls	r1, r3, #15
 8009594:	f57f aecb 	bpl.w	800932e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009598:	e6b1      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800959a:	2102      	movs	r1, #2
 800959c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095a0:	f7ff fb9c 	bl	8008cdc <RCCEx_PLL3_Config>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	f040 8089 	bne.w	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095ae:	4983      	ldr	r1, [pc, #524]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80095b0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80095b4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80095b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80095ba:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095bc:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095be:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095c0:	f57f ae9b 	bpl.w	80092fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 80095c4:	e689      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095c6:	2101      	movs	r1, #1
 80095c8:	1d20      	adds	r0, r4, #4
 80095ca:	f7ff fb0b 	bl	8008be4 <RCCEx_PLL2_Config>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	d16f      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095d6:	4979      	ldr	r1, [pc, #484]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80095d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80095da:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80095dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095e0:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095e2:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095e4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095e6:	f57f ad28 	bpl.w	800903a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80095ea:	e6f5      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80095ec:	2102      	movs	r1, #2
 80095ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095f2:	f7ff fb73 	bl	8008cdc <RCCEx_PLL3_Config>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	2800      	cmp	r0, #0
 80095fa:	f43f ae9b 	beq.w	8009334 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 80095fe:	2601      	movs	r6, #1
 8009600:	e698      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009602:	2601      	movs	r6, #1
 8009604:	4635      	mov	r5, r6
 8009606:	e692      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009608:	462e      	mov	r6, r5
 800960a:	e47e      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800960c:	462e      	mov	r6, r5
 800960e:	e438      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009610:	462e      	mov	r6, r5
 8009612:	e4b5      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009614:	462e      	mov	r6, r5
 8009616:	e416      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009618:	462e      	mov	r6, r5
 800961a:	e454      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800961c:	4967      	ldr	r1, [pc, #412]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800961e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009620:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009624:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009626:	e443      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009628:	4964      	ldr	r1, [pc, #400]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800962a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800962c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009630:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009632:	e41c      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009634:	4961      	ldr	r1, [pc, #388]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009636:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009638:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800963c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800963e:	e459      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009640:	495e      	ldr	r1, [pc, #376]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009642:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009644:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009648:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800964a:	e48f      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800964c:	485b      	ldr	r0, [pc, #364]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800964e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009650:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009654:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009656:	f7ff bbda 	b.w	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800965a:	0719      	lsls	r1, r3, #28
 800965c:	462e      	mov	r6, r5
 800965e:	f57f ae1b 	bpl.w	8009298 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009662:	e60d      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009664:	065f      	lsls	r7, r3, #25
 8009666:	462e      	mov	r6, r5
 8009668:	f57f ade8 	bpl.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
 800966c:	e5c8      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800966e:	0618      	lsls	r0, r3, #24
 8009670:	462e      	mov	r6, r5
 8009672:	f57f ae03 	bpl.w	800927c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009676:	e5e3      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009678:	4950      	ldr	r1, [pc, #320]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800967a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800967c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800967e:	f022 0207 	bic.w	r2, r2, #7
 8009682:	4302      	orrs	r2, r0
 8009684:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009686:	0759      	lsls	r1, r3, #29
 8009688:	f57f ad98 	bpl.w	80091bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800968c:	e57e      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800968e:	494b      	ldr	r1, [pc, #300]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009690:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009694:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009696:	f022 0207 	bic.w	r2, r2, #7
 800969a:	4302      	orrs	r2, r0
 800969c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800969e:	069a      	lsls	r2, r3, #26
 80096a0:	f57f adac 	bpl.w	80091fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80096a4:	e58c      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80096a6:	462e      	mov	r6, r5
 80096a8:	e44a      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80096aa:	462e      	mov	r6, r5
 80096ac:	e486      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80096ae:	462e      	mov	r6, r5
 80096b0:	e4c3      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80096b2:	462e      	mov	r6, r5
 80096b4:	e4a2      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096b6:	01d8      	lsls	r0, r3, #7
 80096b8:	462e      	mov	r6, r5
 80096ba:	f57f acbe 	bpl.w	800903a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80096be:	e68b      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096c0:	0358      	lsls	r0, r3, #13
 80096c2:	462e      	mov	r6, r5
 80096c4:	f57f ae19 	bpl.w	80092fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 80096c8:	e607      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096ca:	03d9      	lsls	r1, r3, #15
 80096cc:	462e      	mov	r6, r5
 80096ce:	f57f ae2e 	bpl.w	800932e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80096d2:	e614      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096d4:	4939      	ldr	r1, [pc, #228]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80096d8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80096da:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80096de:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096e0:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096e2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096e4:	f57f ad50 	bpl.w	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80096e8:	e537      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x386>
 80096ea:	462e      	mov	r6, r5
 80096ec:	e61f      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096ee:	041f      	lsls	r7, r3, #16
 80096f0:	462e      	mov	r6, r5
 80096f2:	f57f ac9f 	bpl.w	8009034 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80096f6:	e48f      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f8:	4930      	ldr	r1, [pc, #192]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009700:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009702:	2d00      	cmp	r5, #0
 8009704:	d1d3      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8009706:	e680      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009708:	2101      	movs	r1, #1
 800970a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800970e:	f7ff fae5 	bl	8008cdc <RCCEx_PLL3_Config>
 8009712:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	2d00      	cmp	r5, #0
 8009718:	d1c7      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800971a:	e448      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800971c:	2101      	movs	r1, #1
 800971e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009722:	f7ff fadb 	bl	8008cdc <RCCEx_PLL3_Config>
 8009726:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	2d00      	cmp	r5, #0
 800972c:	d1c1      	bne.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800972e:	e45d      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009730:	2102      	movs	r1, #2
 8009732:	1d20      	adds	r0, r4, #4
 8009734:	f7ff fa56 	bl	8008be4 <RCCEx_PLL2_Config>
 8009738:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	2d00      	cmp	r5, #0
 800973e:	d1b2      	bne.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8009740:	f7ff bbf7 	b.w	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009744:	2100      	movs	r1, #0
 8009746:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800974a:	f7ff fac7 	bl	8008cdc <RCCEx_PLL3_Config>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	4605      	mov	r5, r0
      break;
 8009752:	f7ff bbcf 	b.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009756:	2100      	movs	r1, #0
 8009758:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800975c:	f7ff fabe 	bl	8008cdc <RCCEx_PLL3_Config>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	4605      	mov	r5, r0
      break;
 8009764:	f7ff bba4 	b.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009768:	2100      	movs	r1, #0
 800976a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800976e:	f7ff fab5 	bl	8008cdc <RCCEx_PLL3_Config>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	4605      	mov	r5, r0
      break;
 8009776:	f7ff bbf9 	b.w	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800977a:	2102      	movs	r1, #2
 800977c:	3024      	adds	r0, #36	; 0x24
 800977e:	f7ff faad 	bl	8008cdc <RCCEx_PLL3_Config>
 8009782:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009784:	2e00      	cmp	r6, #0
 8009786:	f43f ab40 	beq.w	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x36>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	f7ff bb46 	b.w	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009790:	2100      	movs	r1, #0
 8009792:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009796:	f7ff faa1 	bl	8008cdc <RCCEx_PLL3_Config>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	4605      	mov	r5, r0
      break;
 800979e:	e681      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4906      	ldr	r1, [pc, #24]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 80097a2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80097a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80097aa:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80097ac:	e67a      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ae:	2100      	movs	r1, #0
 80097b0:	1d20      	adds	r0, r4, #4
 80097b2:	f7ff fa17 	bl	8008be4 <RCCEx_PLL2_Config>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	4605      	mov	r5, r0
      break;
 80097ba:	e673      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80097bc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097c0:	2100      	movs	r1, #0
 80097c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097c6:	f7ff fa89 	bl	8008cdc <RCCEx_PLL3_Config>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	4605      	mov	r5, r0
      break;
 80097ce:	f7ff bb4e 	b.w	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097d2:	2101      	movs	r1, #1
 80097d4:	1d20      	adds	r0, r4, #4
 80097d6:	f7ff fa05 	bl	8008be4 <RCCEx_PLL2_Config>
 80097da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	2d00      	cmp	r5, #0
 80097e0:	f47f acd1 	bne.w	8009186 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80097e4:	e748      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097e6:	2101      	movs	r1, #1
 80097e8:	1d20      	adds	r0, r4, #4
 80097ea:	f7ff f9fb 	bl	8008be4 <RCCEx_PLL2_Config>
 80097ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	f47f ace1 	bne.w	80091ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80097f8:	e749      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097fa:	2101      	movs	r1, #1
 80097fc:	1d20      	adds	r0, r4, #4
 80097fe:	f7ff f9f1 	bl	8008be4 <RCCEx_PLL2_Config>
 8009802:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	2d00      	cmp	r5, #0
 8009808:	f47f aca4 	bne.w	8009154 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800980c:	e762      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 800980e:	2603      	movs	r6, #3
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	4635      	mov	r5, r6
 8009814:	e414      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009816:	4949      	ldr	r1, [pc, #292]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009818:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800981a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800981e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009820:	2d00      	cmp	r5, #0
 8009822:	f47f af62 	bne.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009826:	e57b      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009828:	4844      	ldr	r0, [pc, #272]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800982a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800982c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009830:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009832:	2d00      	cmp	r5, #0
 8009834:	f47f adce 	bne.w	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8009838:	e68f      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983a:	4940      	ldr	r1, [pc, #256]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800983c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800983e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009842:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009844:	2d00      	cmp	r5, #0
 8009846:	f47f af40 	bne.w	80096ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800984a:	e69a      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800984c:	2102      	movs	r1, #2
 800984e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009852:	f7ff fa43 	bl	8008cdc <RCCEx_PLL3_Config>
 8009856:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	2d00      	cmp	r5, #0
 800985c:	f47f af02 	bne.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8009860:	e4c4      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009862:	4936      	ldr	r1, [pc, #216]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009864:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009866:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800986a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800986c:	2d00      	cmp	r5, #0
 800986e:	f47f af22 	bne.w	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009872:	e6b0      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009874:	2102      	movs	r1, #2
 8009876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800987a:	f7ff fa2f 	bl	8008cdc <RCCEx_PLL3_Config>
 800987e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	2d00      	cmp	r5, #0
 8009884:	f47f aef3 	bne.w	800966e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009888:	e4d0      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800988a:	2102      	movs	r1, #2
 800988c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009890:	f7ff fa24 	bl	8008cdc <RCCEx_PLL3_Config>
 8009894:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	2d00      	cmp	r5, #0
 800989a:	f47f aede 	bne.w	800965a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800989e:	e4e5      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a0:	1d20      	adds	r0, r4, #4
 80098a2:	f7ff f99f 	bl	8008be4 <RCCEx_PLL2_Config>
 80098a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	2d00      	cmp	r5, #0
 80098ac:	f47f af08 	bne.w	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80098b0:	e67d      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098b2:	2102      	movs	r1, #2
 80098b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098b8:	f7ff fa10 	bl	8008cdc <RCCEx_PLL3_Config>
 80098bc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80098c0:	b100      	cbz	r0, 80098c4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 80098c2:	2601      	movs	r6, #1
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	e4ef      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098c8:	2102      	movs	r1, #2
 80098ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098ce:	f7ff fa05 	bl	8008cdc <RCCEx_PLL3_Config>
 80098d2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80098d6:	b100      	cbz	r0, 80098da <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 80098d8:	2601      	movs	r6, #1
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	e4d6      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 80098de:	f7fc fc67 	bl	80061b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098e2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80098ea:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098ec:	e004      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098ee:	f7fc fc5f 	bl	80061b0 <HAL_GetTick>
 80098f2:	1bc0      	subs	r0, r0, r7
 80098f4:	4548      	cmp	r0, r9
 80098f6:	d88a      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098f8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80098fc:	079b      	lsls	r3, r3, #30
 80098fe:	d5f6      	bpl.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009900:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009904:	e5ba      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009906:	480d      	ldr	r0, [pc, #52]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009908:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800990a:	6901      	ldr	r1, [r0, #16]
 800990c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009910:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8009914:	430a      	orrs	r2, r1
 8009916:	6102      	str	r2, [r0, #16]
 8009918:	e5bb      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800991a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800991c:	462e      	mov	r6, r5
 800991e:	f7ff bb8f 	b.w	8009040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009922:	2601      	movs	r6, #1
 8009924:	4635      	mov	r5, r6
 8009926:	e449      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009928:	2601      	movs	r6, #1
 800992a:	f7ff ba8b 	b.w	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800992e:	2601      	movs	r6, #1
 8009930:	4635      	mov	r5, r6
 8009932:	e429      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8009934:	2601      	movs	r6, #1
 8009936:	4635      	mov	r5, r6
 8009938:	f7ff bb7f 	b.w	800903a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800993c:	58024400 	.word	0x58024400
 8009940:	00ffffcf 	.word	0x00ffffcf

08009944 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009944:	4b58      	ldr	r3, [pc, #352]	; (8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8009946:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009948:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800994a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800994c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800994e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009952:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009956:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8009958:	d05c      	beq.n	8009a14 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800995a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800995e:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009962:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009966:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800996a:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800996c:	ee07 4a90 	vmov	s15, r4
 8009970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009974:	d003      	beq.n	800997e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8009976:	2902      	cmp	r1, #2
 8009978:	d075      	beq.n	8009a66 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800997a:	2900      	cmp	r1, #0
 800997c:	d04f      	beq.n	8009a1e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800997e:	ee07 2a90 	vmov	s15, r2
 8009982:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8009986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009990:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009998:	ee06 3a90 	vmov	s13, r3
 800999c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80099a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099a4:	eee7 6a05 	vfma.f32	s13, s14, s10
 80099a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80099ac:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099b0:	4a3d      	ldr	r2, [pc, #244]	; (8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 80099b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80099b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80099b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80099bc:	ee07 3a10 	vmov	s14, r3
 80099c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80099c4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80099d8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80099dc:	ee07 3a10 	vmov	s14, r3
 80099e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80099f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80099f6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a02:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009a0e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009a12:	4770      	bx	lr
 8009a14:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a16:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a1a:	6082      	str	r2, [r0, #8]
}
 8009a1c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a1e:	6819      	ldr	r1, [r3, #0]
 8009a20:	0689      	lsls	r1, r1, #26
 8009a22:	d527      	bpl.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a24:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a26:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a2a:	4a22      	ldr	r2, [pc, #136]	; (8009ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a2c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a30:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a3a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a3c:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a44:	ee06 2a10 	vmov	s12, r2
 8009a48:	ee06 3a90 	vmov	s13, r3
 8009a4c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009a50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a54:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009a58:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009a5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009a60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009a64:	e7a4      	b.n	80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a66:	ee07 2a90 	vmov	s15, r2
 8009a6a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 8009a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a72:	e78a      	b.n	800998a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a74:	ee07 2a90 	vmov	s15, r2
 8009a78:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8009abc <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a86:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009a9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009aa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009aa6:	e783      	b.n	80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	4a742400 	.word	0x4a742400
 8009ab0:	39000000 	.word	0x39000000
 8009ab4:	03d09000 	.word	0x03d09000
 8009ab8:	4bbebc20 	.word	0x4bbebc20
 8009abc:	4c742400 	.word	0x4c742400

08009ac0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ac0:	4b58      	ldr	r3, [pc, #352]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 8009ac2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ac4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ac6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ac8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8009aca:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ace:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ad2:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009ad4:	d05c      	beq.n	8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ad6:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ada:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ade:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ae2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009ae6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ae8:	ee07 4a90 	vmov	s15, r4
 8009aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009af0:	d003      	beq.n	8009afa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009af2:	2902      	cmp	r1, #2
 8009af4:	d075      	beq.n	8009be2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8009af6:	2900      	cmp	r1, #0
 8009af8:	d04f      	beq.n	8009b9a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009afa:	ee07 2a90 	vmov	s15, r2
 8009afe:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8009b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009b0c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b14:	ee06 3a90 	vmov	s13, r3
 8009b18:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009b1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b20:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009b24:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009b28:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b2c:	4a3d      	ldr	r2, [pc, #244]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 8009b2e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009b32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b34:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b38:	ee07 3a10 	vmov	s14, r3
 8009b3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009b40:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009b52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b54:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b58:	ee07 3a10 	vmov	s14, r3
 8009b5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009b70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b72:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b8a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b8e:	4770      	bx	lr
 8009b90:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b92:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b96:	6082      	str	r2, [r0, #8]
}
 8009b98:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b9a:	6819      	ldr	r1, [r3, #0]
 8009b9c:	0689      	lsls	r1, r1, #26
 8009b9e:	d527      	bpl.n	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba0:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ba2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba6:	4a22      	ldr	r2, [pc, #136]	; (8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ba8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bb6:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bb8:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc0:	ee06 2a10 	vmov	s12, r2
 8009bc4:	ee06 3a90 	vmov	s13, r3
 8009bc8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009bcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009bd0:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009bd4:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009bd8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009bdc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009be0:	e7a4      	b.n	8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009be2:	ee07 2a90 	vmov	s15, r2
 8009be6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8009bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bee:	e78a      	b.n	8009b06 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bf0:	ee07 2a90 	vmov	s15, r2
 8009bf4:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8009c38 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c02:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c16:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009c1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009c22:	e783      	b.n	8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c24:	58024400 	.word	0x58024400
 8009c28:	4a742400 	.word	0x4a742400
 8009c2c:	39000000 	.word	0x39000000
 8009c30:	03d09000 	.word	0x03d09000
 8009c34:	4bbebc20 	.word	0x4bbebc20
 8009c38:	4c742400 	.word	0x4c742400

08009c3c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c3c:	4b5c      	ldr	r3, [pc, #368]	; (8009db0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 8009c3e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c40:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c42:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c44:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009c46:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c4a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c4e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009c50:	d05c      	beq.n	8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c52:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c56:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c5a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c5e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009c62:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c64:	ee07 4a90 	vmov	s15, r4
 8009c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009c6c:	d07e      	beq.n	8009d6c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009c6e:	2902      	cmp	r1, #2
 8009c70:	d075      	beq.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d04f      	beq.n	8009d16 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c76:	ee07 2a90 	vmov	s15, r2
 8009c7a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009db4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009c88:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c90:	ee06 3a90 	vmov	s13, r3
 8009c94:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009c98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c9c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009ca0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009ca4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ca8:	4a41      	ldr	r2, [pc, #260]	; (8009db0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 8009caa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009cae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009cb0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009cb4:	ee07 3a10 	vmov	s14, r3
 8009cb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009cbc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009cbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cca:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009cce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009cd0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009cd4:	ee07 3a10 	vmov	s14, r3
 8009cd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009cec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009cee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d02:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009d06:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009d0a:	4770      	bx	lr
 8009d0c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d0e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d12:	6082      	str	r2, [r0, #8]
}
 8009d14:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d16:	6819      	ldr	r1, [r3, #0]
 8009d18:	0689      	lsls	r1, r1, #26
 8009d1a:	d52e      	bpl.n	8009d7a <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d1c:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d1e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d22:	4a26      	ldr	r2, [pc, #152]	; (8009dbc <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d24:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d28:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d32:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d34:	eddf 4a20 	vldr	s9, [pc, #128]	; 8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3c:	ee06 2a10 	vmov	s12, r2
 8009d40:	ee06 3a90 	vmov	s13, r3
 8009d44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009d48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009d4c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009d50:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009d54:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009d58:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009d5c:	e7a4      	b.n	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d5e:	ee07 2a90 	vmov	s15, r2
 8009d62:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 8009d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d6a:	e78a      	b.n	8009c82 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d6c:	ee07 2a90 	vmov	s15, r2
 8009d70:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d78:	e783      	b.n	8009c82 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d7a:	ee07 2a90 	vmov	s15, r2
 8009d7e:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8009db4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d8c:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d94:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009da0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009da4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009da8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009dac:	e77c      	b.n	8009ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 8009dae:	bf00      	nop
 8009db0:	58024400 	.word	0x58024400
 8009db4:	4c742400 	.word	0x4c742400
 8009db8:	39000000 	.word	0x39000000
 8009dbc:	03d09000 	.word	0x03d09000
 8009dc0:	4bbebc20 	.word	0x4bbebc20
 8009dc4:	4a742400 	.word	0x4a742400

08009dc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009dc8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009dcc:	b500      	push	{lr}
 8009dce:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009dd0:	d077      	beq.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009dd2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009dd6:	d02e      	beq.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009dd8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009ddc:	f000 80cf 	beq.w	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009de0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009de4:	f000 8080 	beq.w	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009de8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009dec:	d05a      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009dee:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009df2:	f000 8105 	beq.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009df6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009dfa:	f000 8110 	beq.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009dfe:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009e02:	f000 80e2 	beq.w	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009e0a:	d13a      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009e0c:	4ba9      	ldr	r3, [pc, #676]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e18:	f000 808e 	beq.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e20:	f000 812e 	beq.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009e24:	bb6b      	cbnz	r3, 8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e26:	4aa3      	ldr	r2, [pc, #652]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009e28:	4ba3      	ldr	r3, [pc, #652]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e2a:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009e2c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009e30:	bf18      	it	ne
 8009e32:	4618      	movne	r0, r3
 8009e34:	e042      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009e36:	4a9f      	ldr	r2, [pc, #636]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009e3e:	2b80      	cmp	r3, #128	; 0x80
 8009e40:	f000 8098 	beq.w	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009e44:	d921      	bls.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009e46:	2bc0      	cmp	r3, #192	; 0xc0
 8009e48:	d037      	beq.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4e:	d118      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e52:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e58:	0749      	lsls	r1, r1, #29
 8009e5a:	d502      	bpl.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80ae 	beq.w	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e62:	4a94      	ldr	r2, [pc, #592]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	05d0      	lsls	r0, r2, #23
 8009e68:	d503      	bpl.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e6e:	f000 80fb 	beq.w	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e72:	4a90      	ldr	r2, [pc, #576]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e74:	6812      	ldr	r2, [r2, #0]
 8009e76:	0391      	lsls	r1, r2, #14
 8009e78:	d503      	bpl.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e7e:	f000 80bd 	beq.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009e82:	2000      	movs	r0, #0
}
 8009e84:	b005      	add	sp, #20
 8009e86:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d04b      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d1f7      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e92:	6810      	ldr	r0, [r2, #0]
 8009e94:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e98:	d010      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e9a:	a801      	add	r0, sp, #4
 8009e9c:	f7ff fd52 	bl	8009944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ea0:	9801      	ldr	r0, [sp, #4]
 8009ea2:	e00b      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009ea4:	4a83      	ldr	r2, [pc, #524]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ea6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ea8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb0:	d060      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009eb2:	d936      	bls.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009eb8:	d178      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009eba:	4880      	ldr	r0, [pc, #512]	; (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009ebc:	b005      	add	sp, #20
 8009ebe:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009ec2:	4b7c      	ldr	r3, [pc, #496]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d8d9      	bhi.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009f39 	.word	0x08009f39
 8009ed8:	08009f5d 	.word	0x08009f5d
 8009edc:	08009f49 	.word	0x08009f49
 8009ee0:	08009ebb 	.word	0x08009ebb
 8009ee4:	08009f45 	.word	0x08009f45
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009ee8:	4a72      	ldr	r2, [pc, #456]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009eea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009eec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef4:	d03e      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009ef6:	d937      	bls.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009efc:	d0dd      	beq.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f02:	d1be      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f04:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f06:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f0c:	0752      	lsls	r2, r2, #29
 8009f0e:	d5a8      	bpl.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1a6      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f14:	4b67      	ldr	r3, [pc, #412]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f16:	486a      	ldr	r0, [pc, #424]	; (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009f1e:	40d8      	lsrs	r0, r3
 8009f20:	e7cc      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d146      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f26:	6810      	ldr	r0, [r2, #0]
 8009f28:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009f2c:	d0c6      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f2e:	a801      	add	r0, sp, #4
 8009f30:	f7ff fe84 	bl	8009c3c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f34:	9802      	ldr	r0, [sp, #8]
 8009f36:	e7c1      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f38:	4b5e      	ldr	r3, [pc, #376]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009f40:	d0bc      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f42:	e7f4      	b.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f44:	4a5b      	ldr	r2, [pc, #364]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f46:	e783      	b.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f48:	4b5a      	ldr	r3, [pc, #360]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009f50:	d0b4      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f52:	a801      	add	r0, sp, #4
 8009f54:	f7ff fdb4 	bl	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f58:	9801      	ldr	r0, [sp, #4]
 8009f5a:	e7af      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f5c:	4b55      	ldr	r3, [pc, #340]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009f64:	d0aa      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f66:	e798      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0dc      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f70:	d08f      	beq.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009f72:	e786      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f74:	6810      	ldr	r0, [r2, #0]
 8009f76:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009f7a:	d09f      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f7c:	e7e9      	b.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009f7e:	4a4d      	ldr	r2, [pc, #308]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f80:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f8a:	d0f3      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009f8c:	d806      	bhi.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0c9      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f96:	f43f af7c 	beq.w	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009f9a:	e772      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009f9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fa0:	d08b      	beq.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009fa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fa6:	f43f af53 	beq.w	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009faa:	e76a      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fb0:	d0a8      	beq.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009fb2:	e766      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	f43f af6b 	beq.w	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009fbc:	e761      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	483f      	ldr	r0, [pc, #252]	; (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009fc6:	40d8      	lsrs	r0, r3
 8009fc8:	e778      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009fca:	4a3a      	ldr	r2, [pc, #232]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009fcc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fd6:	d066      	beq.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009fd8:	d82f      	bhi.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fde:	d04f      	beq.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe4:	d131      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fe6:	4b33      	ldr	r3, [pc, #204]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009fee:	f43f af65 	beq.w	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff2:	a801      	add	r0, sp, #4
 8009ff4:	f7ff fd64 	bl	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ff8:	9802      	ldr	r0, [sp, #8]
 8009ffa:	e75f      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009ffc:	482e      	ldr	r0, [pc, #184]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009ffe:	e75d      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a000:	4a2c      	ldr	r2, [pc, #176]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a002:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d02e      	beq.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800a00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a012:	f43f af77 	beq.w	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a016:	2b00      	cmp	r3, #0
 800a018:	f47f af33 	bne.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a01c:	e739      	b.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a01e:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800a022:	03d2      	lsls	r2, r2, #15
 800a024:	d589      	bpl.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a02c:	f43f af46 	beq.w	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a030:	a801      	add	r0, sp, #4
 800a032:	f7ff fc87 	bl	8009944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a036:	9803      	ldr	r0, [sp, #12]
 800a038:	e740      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d02a      	beq.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800a040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a044:	f43f aeef 	beq.w	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800a048:	e71b      	b.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f47f af19 	bne.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a050:	f7fe fda6 	bl	8008ba0 <HAL_RCC_GetHCLKFreq>
 800a054:	4b17      	ldr	r3, [pc, #92]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a056:	4a1b      	ldr	r2, [pc, #108]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a05e:	5cd3      	ldrb	r3, [r2, r3]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	40d8      	lsrs	r0, r3
          break;
 800a066:	e729      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800a068:	4817      	ldr	r0, [pc, #92]	; (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a06a:	e727      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a06c:	6810      	ldr	r0, [r2, #0]
 800a06e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a072:	f43f af23 	beq.w	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a076:	a801      	add	r0, sp, #4
 800a078:	f7ff fd22 	bl	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a07c:	9803      	ldr	r0, [sp, #12]
 800a07e:	e71d      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a080:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a088:	f43f af18 	beq.w	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08c:	a801      	add	r0, sp, #4
 800a08e:	f7ff fc59 	bl	8009944 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a092:	9802      	ldr	r0, [sp, #8]
 800a094:	e712      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a096:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800a098:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a09a:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800a09c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a0a0:	bf18      	it	ne
 800a0a2:	4618      	movne	r0, r3
 800a0a4:	e70a      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0a6:	6810      	ldr	r0, [r2, #0]
 800a0a8:	f010 0004 	ands.w	r0, r0, #4
 800a0ac:	f43f af06 	beq.w	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a0b0:	e730      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	017d7840 	.word	0x017d7840
 800a0bc:	00bb8000 	.word	0x00bb8000
 800a0c0:	03d09000 	.word	0x03d09000
 800a0c4:	0800a4a4 	.word	0x0800a4a4
 800a0c8:	003d0900 	.word	0x003d0900

0800a0cc <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800a0d0:	b318      	cbz	r0, 800a11a <HAL_SDRAM_Init+0x4a>
{
 800a0d2:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a0d8:	460d      	mov	r5, r1
 800a0da:	4604      	mov	r4, r0
 800a0dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0e0:	b1b3      	cbz	r3, 800a110 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0e2:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0e4:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0ea:	f851 0b04 	ldr.w	r0, [r1], #4
 800a0ee:	f000 f851 	bl	800a194 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	e9d4 0200 	ldrd	r0, r2, [r4]
 800a0f8:	f000 f888 	bl	800a20c <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800a0fc:	4a08      	ldr	r2, [pc, #32]	; (800a120 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0fe:	2101      	movs	r1, #1
  return HAL_OK;
 800a100:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a108:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a10a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a110:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a114:	f7ff ffda 	bl	800a0cc <HAL_SDRAM_MspInit>
 800a118:	e7e3      	b.n	800a0e2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a11a:	2001      	movs	r0, #1
}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	52004000 	.word	0x52004000

0800a124 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a124:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a126:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a12a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a12c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a12e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a130:	d004      	beq.n	800a13c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a132:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a136:	2c01      	cmp	r4, #1
 800a138:	d001      	beq.n	800a13e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a13a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a13e:	2302      	movs	r3, #2
 800a140:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a142:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a144:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a148:	f000 f8ac 	bl	800a2a4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a14c:	6833      	ldr	r3, [r6, #0]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d003      	beq.n	800a15a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a152:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a154:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 800a158:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a15a:	2305      	movs	r3, #5
  return HAL_OK;
 800a15c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a15e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800a162:	bd70      	pop	{r4, r5, r6, pc}

0800a164 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a164:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a166:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a16a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	b2d8      	uxtb	r0, r3
 800a170:	d005      	beq.n	800a17e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a172:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a176:	2b01      	cmp	r3, #1
 800a178:	b2dd      	uxtb	r5, r3
 800a17a:	d001      	beq.n	800a180 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a17c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a180:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a182:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a184:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a188:	f000 f8a2 	bl	800a2d0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a18c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a18e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a192:	bd38      	pop	{r3, r4, r5, pc}

0800a194 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a194:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a196:	6802      	ldr	r2, [r0, #0]
{
 800a198:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a19a:	b9c3      	cbnz	r3, 800a1ce <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a19c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800a1a0:	684c      	ldr	r4, [r1, #4]
 800a1a2:	698e      	ldr	r6, [r1, #24]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a1aa:	4323      	orrs	r3, r4
 800a1ac:	690c      	ldr	r4, [r1, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	694a      	ldr	r2, [r1, #20]
 800a1b2:	432b      	orrs	r3, r5
 800a1b4:	69cd      	ldr	r5, [r1, #28]
 800a1b6:	4323      	orrs	r3, r4
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	4333      	orrs	r3, r6
 800a1bc:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800a1c0:	432b      	orrs	r3, r5
 800a1c2:	4323      	orrs	r3, r4
 800a1c4:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a1c6:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1c8:	6003      	str	r3, [r0, #0]
}
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1ce:	69cb      	ldr	r3, [r1, #28]
 800a1d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1d4:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1d6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1da:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800a1de:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1e0:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1e2:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1e4:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1e6:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1e8:	6842      	ldr	r2, [r0, #4]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	432b      	orrs	r3, r5
 800a1ee:	690d      	ldr	r5, [r1, #16]
 800a1f0:	4323      	orrs	r3, r4
 800a1f2:	4333      	orrs	r3, r6
 800a1f4:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800a1f8:	432b      	orrs	r3, r5
 800a1fa:	4323      	orrs	r3, r4
 800a1fc:	4313      	orrs	r3, r2
}
 800a1fe:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a200:	6043      	str	r3, [r0, #4]
}
 800a202:	2000      	movs	r0, #0
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	ffff8000 	.word	0xffff8000

0800a20c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a20c:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a20e:	bb0a      	cbnz	r2, 800a254 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a210:	684c      	ldr	r4, [r1, #4]
 800a212:	6882      	ldr	r2, [r0, #8]
 800a214:	680d      	ldr	r5, [r1, #0]
 800a216:	1e63      	subs	r3, r4, #1
 800a218:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a21c:	688c      	ldr	r4, [r1, #8]
 800a21e:	1e6e      	subs	r6, r5, #1
 800a220:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800a224:	1e65      	subs	r5, r4, #1
 800a226:	68cc      	ldr	r4, [r1, #12]
 800a228:	4333      	orrs	r3, r6
 800a22a:	690a      	ldr	r2, [r1, #16]
 800a22c:	1e66      	subs	r6, r4, #1
 800a22e:	694c      	ldr	r4, [r1, #20]
 800a230:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a234:	1e55      	subs	r5, r2, #1
 800a236:	698a      	ldr	r2, [r1, #24]
 800a238:	1e61      	subs	r1, r4, #1
 800a23a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800a23e:	3a01      	subs	r2, #1
 800a240:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a244:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a248:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a24c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a24e:	6083      	str	r3, [r0, #8]
}
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a254:	6882      	ldr	r2, [r0, #8]
 800a256:	68cb      	ldr	r3, [r1, #12]
 800a258:	4c11      	ldr	r4, [pc, #68]	; (800a2a0 <FMC_SDRAM_Timing_Init+0x94>)
 800a25a:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a25c:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a25e:	4014      	ands	r4, r2
 800a260:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a262:	1e5e      	subs	r6, r3, #1
 800a264:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a266:	3a01      	subs	r2, #1
 800a268:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a26c:	688d      	ldr	r5, [r1, #8]
 800a26e:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a270:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a274:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a276:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a278:	68c2      	ldr	r2, [r0, #12]
 800a27a:	690c      	ldr	r4, [r1, #16]
 800a27c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a280:	6989      	ldr	r1, [r1, #24]
 800a282:	3c01      	subs	r4, #1
 800a284:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800a288:	3901      	subs	r1, #1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a290:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a294:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800a298:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a29a:	60c3      	str	r3, [r0, #12]
}
 800a29c:	2000      	movs	r0, #0
 800a29e:	4770      	bx	lr
 800a2a0:	ff0f0fff 	.word	0xff0f0fff

0800a2a4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a2a4:	b470      	push	{r4, r5, r6}
 800a2a6:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a2a8:	68ce      	ldr	r6, [r1, #12]
 800a2aa:	4c08      	ldr	r4, [pc, #32]	; (800a2cc <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a2ac:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a2ae:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a2b2:	6889      	ldr	r1, [r1, #8]
 800a2b4:	432b      	orrs	r3, r5
 800a2b6:	6915      	ldr	r5, [r2, #16]
 800a2b8:	3901      	subs	r1, #1
 800a2ba:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800a2be:	402c      	ands	r4, r5
 800a2c0:	4323      	orrs	r3, r4
 800a2c2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800a2c6:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a2c8:	6113      	str	r3, [r2, #16]
}
 800a2ca:	4770      	bx	lr
 800a2cc:	ffc00000 	.word	0xffc00000

0800a2d0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a2d0:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800a2d4:	2000      	movs	r0, #0
{
 800a2d6:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a2d8:	6954      	ldr	r4, [r2, #20]
 800a2da:	4023      	ands	r3, r4
}
 800a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a2e0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a2e4:	6151      	str	r1, [r2, #20]
}
 800a2e6:	4770      	bx	lr
 800a2e8:	ffffc001 	.word	0xffffc001

0800a2ec <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800a2f2:	4c15      	ldr	r4, [pc, #84]	; (800a348 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	4e15      	ldr	r6, [pc, #84]	; (800a34c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800a2fe:	e9d3 7200 	ldrd	r7, r2, [r3]
 800a302:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a306:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800a30a:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a30c:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a310:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800a312:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a314:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800a316:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800a31a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800a31e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800a322:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a328:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a32a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a32c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a32e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800a330:	6a23      	ldr	r3, [r4, #32]
 800a332:	f106 0118 	add.w	r1, r6, #24
 800a336:	4628      	mov	r0, r5
 800a338:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a33a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a33c:	f106 011c 	add.w	r1, r6, #28
 800a340:	4628      	mov	r0, r5
}
 800a342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a346:	4718      	bx	r3
 800a348:	24001634 	.word	0x24001634
 800a34c:	240015f4 	.word	0x240015f4

0800a350 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800a350:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <UTIL_LCD_SetLayer+0x18>)
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	b133      	cbz	r3, 800a366 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800a358:	4d04      	ldr	r5, [pc, #16]	; (800a36c <UTIL_LCD_SetLayer+0x1c>)
 800a35a:	4604      	mov	r4, r0
 800a35c:	4601      	mov	r1, r0
 800a35e:	6928      	ldr	r0, [r5, #16]
 800a360:	4798      	blx	r3
 800a362:	b900      	cbnz	r0, 800a366 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800a364:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	24001634 	.word	0x24001634
 800a36c:	240015f4 	.word	0x240015f4

0800a370 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800a370:	4a02      	ldr	r2, [pc, #8]	; (800a37c <UTIL_LCD_SetTextColor+0xc>)
 800a372:	68d3      	ldr	r3, [r2, #12]
 800a374:	015b      	lsls	r3, r3, #5
 800a376:	50d0      	str	r0, [r2, r3]
}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	240015f4 	.word	0x240015f4

0800a380 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <UTIL_LCD_SetBackColor+0xc>)
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a388:	6058      	str	r0, [r3, #4]
}
 800a38a:	4770      	bx	lr
 800a38c:	240015f4 	.word	0x240015f4

0800a390 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800a390:	4b02      	ldr	r3, [pc, #8]	; (800a39c <UTIL_LCD_SetFont+0xc>)
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a398:	6098      	str	r0, [r3, #8]
}
 800a39a:	4770      	bx	lr
 800a39c:	240015f4 	.word	0x240015f4

0800a3a0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a3a2:	4e13      	ldr	r6, [pc, #76]	; (800a3f0 <UTIL_LCD_FillRect+0x50>)
{
 800a3a4:	4615      	mov	r5, r2
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a3aa:	69f7      	ldr	r7, [r6, #28]
{
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	460a      	mov	r2, r1
 800a3b0:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a3b2:	2f02      	cmp	r7, #2
 800a3b4:	d008      	beq.n	800a3c8 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800a3b6:	4f0f      	ldr	r7, [pc, #60]	; (800a3f4 <UTIL_LCD_FillRect+0x54>)
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	e9cd 4500 	strd	r4, r5, [sp]
 800a3be:	693c      	ldr	r4, [r7, #16]
 800a3c0:	6930      	ldr	r0, [r6, #16]
 800a3c2:	47a0      	blx	r4
  }
}
 800a3c4:	b003      	add	sp, #12
 800a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800a3c8:	096f      	lsrs	r7, r5, #5
 800a3ca:	9400      	str	r4, [sp, #0]
 800a3cc:	0a29      	lsrs	r1, r5, #8
 800a3ce:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800a3d2:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800a3d6:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800a3da:	4601      	mov	r1, r0
 800a3dc:	6930      	ldr	r0, [r6, #16]
 800a3de:	433c      	orrs	r4, r7
 800a3e0:	4e04      	ldr	r6, [pc, #16]	; (800a3f4 <UTIL_LCD_FillRect+0x54>)
 800a3e2:	4325      	orrs	r5, r4
 800a3e4:	6934      	ldr	r4, [r6, #16]
 800a3e6:	9501      	str	r5, [sp, #4]
 800a3e8:	47a0      	blx	r4
}
 800a3ea:	b003      	add	sp, #12
 800a3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	240015f4 	.word	0x240015f4
 800a3f4:	24001634 	.word	0x24001634

0800a3f8 <UTIL_LCD_Clear>:
{
 800a3f8:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a3fa:	2100      	movs	r1, #0
{
 800a3fc:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a3fe:	4a05      	ldr	r2, [pc, #20]	; (800a414 <UTIL_LCD_Clear+0x1c>)
 800a400:	9000      	str	r0, [sp, #0]
 800a402:	4608      	mov	r0, r1
 800a404:	6993      	ldr	r3, [r2, #24]
 800a406:	6952      	ldr	r2, [r2, #20]
 800a408:	f7ff ffca 	bl	800a3a0 <UTIL_LCD_FillRect>
}
 800a40c:	b003      	add	sp, #12
 800a40e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a412:	bf00      	nop
 800a414:	240015f4 	.word	0x240015f4

0800a418 <__libc_init_array>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	4d0d      	ldr	r5, [pc, #52]	; (800a450 <__libc_init_array+0x38>)
 800a41c:	4c0d      	ldr	r4, [pc, #52]	; (800a454 <__libc_init_array+0x3c>)
 800a41e:	1b64      	subs	r4, r4, r5
 800a420:	10a4      	asrs	r4, r4, #2
 800a422:	2600      	movs	r6, #0
 800a424:	42a6      	cmp	r6, r4
 800a426:	d109      	bne.n	800a43c <__libc_init_array+0x24>
 800a428:	4d0b      	ldr	r5, [pc, #44]	; (800a458 <__libc_init_array+0x40>)
 800a42a:	4c0c      	ldr	r4, [pc, #48]	; (800a45c <__libc_init_array+0x44>)
 800a42c:	f000 f82e 	bl	800a48c <_init>
 800a430:	1b64      	subs	r4, r4, r5
 800a432:	10a4      	asrs	r4, r4, #2
 800a434:	2600      	movs	r6, #0
 800a436:	42a6      	cmp	r6, r4
 800a438:	d105      	bne.n	800a446 <__libc_init_array+0x2e>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a440:	4798      	blx	r3
 800a442:	3601      	adds	r6, #1
 800a444:	e7ee      	b.n	800a424 <__libc_init_array+0xc>
 800a446:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44a:	4798      	blx	r3
 800a44c:	3601      	adds	r6, #1
 800a44e:	e7f2      	b.n	800a436 <__libc_init_array+0x1e>
 800a450:	0801420c 	.word	0x0801420c
 800a454:	0801420c 	.word	0x0801420c
 800a458:	0801420c 	.word	0x0801420c
 800a45c:	08014210 	.word	0x08014210

0800a460 <memcpy>:
 800a460:	440a      	add	r2, r1
 800a462:	4291      	cmp	r1, r2
 800a464:	f100 33ff 	add.w	r3, r0, #4294967295
 800a468:	d100      	bne.n	800a46c <memcpy+0xc>
 800a46a:	4770      	bx	lr
 800a46c:	b510      	push	{r4, lr}
 800a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a476:	4291      	cmp	r1, r2
 800a478:	d1f9      	bne.n	800a46e <memcpy+0xe>
 800a47a:	bd10      	pop	{r4, pc}

0800a47c <memset>:
 800a47c:	4402      	add	r2, r0
 800a47e:	4603      	mov	r3, r0
 800a480:	4293      	cmp	r3, r2
 800a482:	d100      	bne.n	800a486 <memset+0xa>
 800a484:	4770      	bx	lr
 800a486:	f803 1b01 	strb.w	r1, [r3], #1
 800a48a:	e7f9      	b.n	800a480 <memset+0x4>

0800a48c <_init>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	bf00      	nop
 800a490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a492:	bc08      	pop	{r3}
 800a494:	469e      	mov	lr, r3
 800a496:	4770      	bx	lr

0800a498 <_fini>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr
