
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  080083c4  080083c4  000183c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  0002906c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a12c  0800a12c  0002906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a12c  0800a12c  0002906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000906c  24000000  0800a134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001038c  24009070  080131a0  00029070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240193fc  080131a0  000293fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043f01  00000000  00000000  0002909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006387  00000000  00000000  0006cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000152b9  00000000  00000000  00073322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002330  00000000  00000000  000885e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035e0  00000000  00000000  0008a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044c79  00000000  00000000  0008def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027520  00000000  00000000  000d2b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b8588  00000000  00000000  000fa089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b2611  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006534  00000000  00000000  002b2664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24009070 	.word	0x24009070
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080083ac 	.word	0x080083ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24009074 	.word	0x24009074
 80002d4:	080083ac 	.word	0x080083ac

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24009254 	.word	0x24009254

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	24009254 	.word	0x24009254

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	2400909a 	.word	0x2400909a

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	24009254 	.word	0x24009254

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	24009254 	.word	0x24009254

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	24009254 	.word	0x24009254

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	24009254 	.word	0x24009254

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	24009254 	.word	0x24009254

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24009254 	.word	0x24009254

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	24009254 	.word	0x24009254

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	24009254 	.word	0x24009254

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	24009254 	.word	0x24009254

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	24009254 	.word	0x24009254

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	24009254 	.word	0x24009254

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	24009254 	.word	0x24009254

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	24009254 	.word	0x24009254

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	24009254 	.word	0x24009254

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	24009254 	.word	0x24009254

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	24009254 	.word	0x24009254

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	24009254 	.word	0x24009254

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	24009254 	.word	0x24009254

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	24009254 	.word	0x24009254

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	24009254 	.word	0x24009254

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	24009254 	.word	0x24009254

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	24009254 	.word	0x24009254

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	24009254 	.word	0x24009254

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	24009254 	.word	0x24009254

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	24009254 	.word	0x24009254

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	24009254 	.word	0x24009254

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	24009254 	.word	0x24009254

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	24009254 	.word	0x24009254

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	24009254 	.word	0x24009254

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	24009254 	.word	0x24009254

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	24009254 	.word	0x24009254

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	24009254 	.word	0x24009254

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	24009254 	.word	0x24009254

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	24009254 	.word	0x24009254

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	24009254 	.word	0x24009254

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	24009254 	.word	0x24009254

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	24009254 	.word	0x24009254

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	24009254 	.word	0x24009254

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	24009254 	.word	0x24009254

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	24009254 	.word	0x24009254

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	24009254 	.word	0x24009254

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	24009254 	.word	0x24009254

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	24009097 	.word	0x24009097

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	24009254 	.word	0x24009254

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	24009254 	.word	0x24009254

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	24009254 	.word	0x24009254

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	24009254 	.word	0x24009254

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	24009254 	.word	0x24009254

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	24009254 	.word	0x24009254

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	24009254 	.word	0x24009254

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	24009254 	.word	0x24009254

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24009254 	.word	0x24009254

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24009254 	.word	0x24009254

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24009254 	.word	0x24009254

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	24009254 	.word	0x24009254

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	24009254 	.word	0x24009254

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	24009254 	.word	0x24009254

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	24009254 	.word	0x24009254

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	24009254 	.word	0x24009254

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	24009254 	.word	0x24009254

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	24009254 	.word	0x24009254

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	24009254 	.word	0x24009254

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	24009254 	.word	0x24009254

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	24009254 	.word	0x24009254

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	24009254 	.word	0x24009254

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24009254 	.word	0x24009254

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24009254 	.word	0x24009254

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24009254 	.word	0x24009254

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	24009254 	.word	0x24009254

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	24009254 	.word	0x24009254

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	24009254 	.word	0x24009254

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	24009098 	.word	0x24009098

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	24009254 	.word	0x24009254

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	24009098 	.word	0x24009098

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fdf5 	bl	80034a8 <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	24009254 	.word	0x24009254

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fdeb 	bl	80034a8 <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	24009254 	.word	0x24009254

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 fddf 	bl	80034a8 <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	24009254 	.word	0x24009254

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 fdd3 	bl	80034a8 <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	24009254 	.word	0x24009254

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fdc7 	bl	80034a8 <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	24009254 	.word	0x24009254

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fdbb 	bl	80034a8 <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	24009254 	.word	0x24009254

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fdaf 	bl	80034a8 <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	24009254 	.word	0x24009254

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fda3 	bl	80034a8 <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	24009254 	.word	0x24009254

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fd99 	bl	80034a8 <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	24009254 	.word	0x24009254

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fd8b 	bl	80034a8 <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	24009254 	.word	0x24009254

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fd81 	bl	80034a8 <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	24009254 	.word	0x24009254

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fd73 	bl	80034a8 <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	24009254 	.word	0x24009254

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fd69 	bl	80034a8 <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	24009254 	.word	0x24009254

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fd5f 	bl	80034a8 <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	24009254 	.word	0x24009254

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fd55 	bl	80034a8 <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	24009254 	.word	0x24009254

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fd4b 	bl	80034a8 <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	24009254 	.word	0x24009254

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fd41 	bl	80034a8 <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24009254 	.word	0x24009254

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fd37 	bl	80034a8 <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	24009254 	.word	0x24009254

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fd2d 	bl	80034a8 <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	24009254 	.word	0x24009254

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fd23 	bl	80034a8 <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	24009254 	.word	0x24009254

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fd13 	bl	80034a8 <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	24009254 	.word	0x24009254

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fd01 	bl	80034a8 <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	24009254 	.word	0x24009254

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fced 	bl	80034a8 <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	24009254 	.word	0x24009254
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fcdb 	bl	80034a8 <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	24009254 	.word	0x24009254

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fcc9 	bl	80034a8 <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24009254 	.word	0x24009254

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fcb5 	bl	80034a8 <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fcb0 	bl	80034a8 <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	24009254 	.word	0x24009254

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fca4 	bl	80034a8 <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	24009254 	.word	0x24009254

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fc99 	bl	80034a8 <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24009254 	.word	0x24009254

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fc85 	bl	80034a8 <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fc7f 	bl	80034a8 <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 ffcf 	bl	8002b50 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24009254 	.word	0x24009254

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fc6f 	bl	80034a8 <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fc69 	bl	80034a8 <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f001 ffb9 	bl	8002b50 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	24009254 	.word	0x24009254

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fc59 	bl	80034a8 <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fc53 	bl	80034a8 <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ffa3 	bl	8002b50 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	24009254 	.word	0x24009254

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fc43 	bl	80034a8 <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fc3d 	bl	80034a8 <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ff8d 	bl	8002b50 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24009254 	.word	0x24009254

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fc2d 	bl	80034a8 <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fc27 	bl	80034a8 <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ff77 	bl	8002b50 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	24009254 	.word	0x24009254

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fc17 	bl	80034a8 <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fc11 	bl	80034a8 <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ff61 	bl	8002b50 <concat_16bit_bigEndian>
 8000c8e:	f002 fc0b 	bl	80034a8 <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	24009254 	.word	0x24009254

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bbb5 	b.w	8003410 <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	24009254 	.word	0x24009254

08000cac <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <vLDs_a16_SP+0x2c>)
 8000cb0:	8960      	ldrh	r0, [r4, #10]
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	f002 fbf7 	bl	80034a8 <ucGBMemoryRead>
 8000cba:	8963      	ldrh	r3, [r4, #10]
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	1e58      	subs	r0, r3, #1
 8000cc0:	b280      	uxth	r0, r0
 8000cc2:	f002 fbf1 	bl	80034a8 <ucGBMemoryRead>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f001 ff41 	bl	8002b50 <concat_16bit_bigEndian>
 8000cce:	7a21      	ldrb	r1, [r4, #8]
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f002 bb9c 	b.w	8003410 <vGBMemoryWrite>
 8000cd8:	24009254 	.word	0x24009254

08000cdc <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <vLD_DE_A+0xc>)
 8000cde:	7859      	ldrb	r1, [r3, #1]
 8000ce0:	8898      	ldrh	r0, [r3, #4]
 8000ce2:	f002 bb95 	b.w	8003410 <vGBMemoryWrite>
 8000ce6:	bf00      	nop
 8000ce8:	24009254 	.word	0x24009254

08000cec <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4c04      	ldr	r4, [pc, #16]	; (8000d00 <vLD_HLI_A+0x14>)
 8000cf0:	7861      	ldrb	r1, [r4, #1]
 8000cf2:	88e0      	ldrh	r0, [r4, #6]
 8000cf4:	f002 fb8c 	bl	8003410 <vGBMemoryWrite>
 8000cf8:	88e3      	ldrh	r3, [r4, #6]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	80e3      	strh	r3, [r4, #6]
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	24009254 	.word	0x24009254

08000d04 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4c04      	ldr	r4, [pc, #16]	; (8000d18 <vLD_HLD_A+0x14>)
 8000d08:	7861      	ldrb	r1, [r4, #1]
 8000d0a:	88e0      	ldrh	r0, [r4, #6]
 8000d0c:	f002 fb80 	bl	8003410 <vGBMemoryWrite>
 8000d10:	88e3      	ldrh	r3, [r4, #6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	80e3      	strh	r3, [r4, #6]
 8000d16:	bd10      	pop	{r4, pc}
 8000d18:	24009254 	.word	0x24009254

08000d1c <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <vLD_HL_d8+0x1c>)
 8000d1e:	8958      	ldrh	r0, [r3, #10]
 8000d20:	3801      	subs	r0, #1
 8000d22:	b510      	push	{r4, lr}
 8000d24:	88dc      	ldrh	r4, [r3, #6]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	f002 fbbe 	bl	80034a8 <ucGBMemoryRead>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d34:	f002 bb6c 	b.w	8003410 <vGBMemoryWrite>
 8000d38:	24009254 	.word	0x24009254

08000d3c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_B+0xc>)
 8000d3e:	78d9      	ldrb	r1, [r3, #3]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bb65 	b.w	8003410 <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	24009254 	.word	0x24009254

08000d4c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_C+0xc>)
 8000d4e:	7899      	ldrb	r1, [r3, #2]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bb5d 	b.w	8003410 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	24009254 	.word	0x24009254

08000d5c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_D+0xc>)
 8000d5e:	7959      	ldrb	r1, [r3, #5]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bb55 	b.w	8003410 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	24009254 	.word	0x24009254

08000d6c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_E+0xc>)
 8000d6e:	7919      	ldrb	r1, [r3, #4]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bb4d 	b.w	8003410 <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	24009254 	.word	0x24009254

08000d7c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <vLD_HL_H+0xc>)
 8000d7e:	79d9      	ldrb	r1, [r3, #7]
 8000d80:	88d8      	ldrh	r0, [r3, #6]
 8000d82:	f002 bb45 	b.w	8003410 <vGBMemoryWrite>
 8000d86:	bf00      	nop
 8000d88:	24009254 	.word	0x24009254

08000d8c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <vLD_HL_L+0xc>)
 8000d8e:	7999      	ldrb	r1, [r3, #6]
 8000d90:	88d8      	ldrh	r0, [r3, #6]
 8000d92:	f002 bb3d 	b.w	8003410 <vGBMemoryWrite>
 8000d96:	bf00      	nop
 8000d98:	24009254 	.word	0x24009254

08000d9c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <vLD_HL_A+0xc>)
 8000d9e:	7859      	ldrb	r1, [r3, #1]
 8000da0:	88d8      	ldrh	r0, [r3, #6]
 8000da2:	f002 bb35 	b.w	8003410 <vGBMemoryWrite>
 8000da6:	bf00      	nop
 8000da8:	24009254 	.word	0x24009254

08000dac <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4c07      	ldr	r4, [pc, #28]	; (8000dcc <vLDH_a8_A+0x20>)
 8000db0:	8960      	ldrh	r0, [r4, #10]
 8000db2:	3801      	subs	r0, #1
 8000db4:	b280      	uxth	r0, r0
 8000db6:	f002 fb77 	bl	80034a8 <ucGBMemoryRead>
 8000dba:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dbe:	7861      	ldrb	r1, [r4, #1]
 8000dc0:	b280      	uxth	r0, r0
 8000dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc6:	f002 bb23 	b.w	8003410 <vGBMemoryWrite>
 8000dca:	bf00      	nop
 8000dcc:	24009254 	.word	0x24009254

08000dd0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <vLD_fC_A+0x10>)
 8000dd2:	7898      	ldrb	r0, [r3, #2]
 8000dd4:	7859      	ldrb	r1, [r3, #1]
 8000dd6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	f002 bb18 	b.w	8003410 <vGBMemoryWrite>
 8000de0:	24009254 	.word	0x24009254

08000de4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <vLD_a16_A+0x2c>)
 8000de8:	8960      	ldrh	r0, [r4, #10]
 8000dea:	3802      	subs	r0, #2
 8000dec:	b280      	uxth	r0, r0
 8000dee:	f002 fb5b 	bl	80034a8 <ucGBMemoryRead>
 8000df2:	8963      	ldrh	r3, [r4, #10]
 8000df4:	4605      	mov	r5, r0
 8000df6:	1e58      	subs	r0, r3, #1
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	f002 fb55 	bl	80034a8 <ucGBMemoryRead>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4628      	mov	r0, r5
 8000e02:	f001 fea5 	bl	8002b50 <concat_16bit_bigEndian>
 8000e06:	7861      	ldrb	r1, [r4, #1]
 8000e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e0c:	f002 bb00 	b.w	8003410 <vGBMemoryWrite>
 8000e10:	24009254 	.word	0x24009254

08000e14 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_B+0x8>)
 8000e16:	1cc8      	adds	r0, r1, #3
 8000e18:	f001 beb2 	b.w	8002b80 <v8bitRegisterINC>
 8000e1c:	24009254 	.word	0x24009254

08000e20 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_C+0x8>)
 8000e22:	1c88      	adds	r0, r1, #2
 8000e24:	f001 beac 	b.w	8002b80 <v8bitRegisterINC>
 8000e28:	24009254 	.word	0x24009254

08000e2c <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_D+0x8>)
 8000e2e:	1d48      	adds	r0, r1, #5
 8000e30:	f001 bea6 	b.w	8002b80 <v8bitRegisterINC>
 8000e34:	24009254 	.word	0x24009254

08000e38 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vINC_E+0x8>)
 8000e3a:	1d08      	adds	r0, r1, #4
 8000e3c:	f001 bea0 	b.w	8002b80 <v8bitRegisterINC>
 8000e40:	24009254 	.word	0x24009254

08000e44 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vINC_H+0x8>)
 8000e46:	1dc8      	adds	r0, r1, #7
 8000e48:	f001 be9a 	b.w	8002b80 <v8bitRegisterINC>
 8000e4c:	24009254 	.word	0x24009254

08000e50 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vINC_L+0x8>)
 8000e52:	1d88      	adds	r0, r1, #6
 8000e54:	f001 be94 	b.w	8002b80 <v8bitRegisterINC>
 8000e58:	24009254 	.word	0x24009254

08000e5c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vINC_A+0x8>)
 8000e5e:	1c48      	adds	r0, r1, #1
 8000e60:	f001 be8e 	b.w	8002b80 <v8bitRegisterINC>
 8000e64:	24009254 	.word	0x24009254

08000e68 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_B+0x8>)
 8000e6a:	1cc8      	adds	r0, r1, #3
 8000e6c:	f001 bea6 	b.w	8002bbc <v8bitRegisterDEC>
 8000e70:	24009254 	.word	0x24009254

08000e74 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_C+0x8>)
 8000e76:	1c88      	adds	r0, r1, #2
 8000e78:	f001 bea0 	b.w	8002bbc <v8bitRegisterDEC>
 8000e7c:	24009254 	.word	0x24009254

08000e80 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_D+0x8>)
 8000e82:	1d48      	adds	r0, r1, #5
 8000e84:	f001 be9a 	b.w	8002bbc <v8bitRegisterDEC>
 8000e88:	24009254 	.word	0x24009254

08000e8c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vDEC_E+0x8>)
 8000e8e:	1d08      	adds	r0, r1, #4
 8000e90:	f001 be94 	b.w	8002bbc <v8bitRegisterDEC>
 8000e94:	24009254 	.word	0x24009254

08000e98 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e98:	4901      	ldr	r1, [pc, #4]	; (8000ea0 <vDEC_H+0x8>)
 8000e9a:	1dc8      	adds	r0, r1, #7
 8000e9c:	f001 be8e 	b.w	8002bbc <v8bitRegisterDEC>
 8000ea0:	24009254 	.word	0x24009254

08000ea4 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000ea4:	4901      	ldr	r1, [pc, #4]	; (8000eac <vDEC_L+0x8>)
 8000ea6:	1d88      	adds	r0, r1, #6
 8000ea8:	f001 be88 	b.w	8002bbc <v8bitRegisterDEC>
 8000eac:	24009254 	.word	0x24009254

08000eb0 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000eb0:	4901      	ldr	r1, [pc, #4]	; (8000eb8 <vDEC_A+0x8>)
 8000eb2:	1c48      	adds	r0, r1, #1
 8000eb4:	f001 be82 	b.w	8002bbc <v8bitRegisterDEC>
 8000eb8:	24009254 	.word	0x24009254

08000ebc <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000ebc:	4901      	ldr	r1, [pc, #4]	; (8000ec4 <vRLCA+0x8>)
 8000ebe:	1c48      	adds	r0, r1, #1
 8000ec0:	f001 be9c 	b.w	8002bfc <vGBFunctionRLCA>
 8000ec4:	24009254 	.word	0x24009254

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 beb3 	b.w	8002c38 <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	24009254 	.word	0x24009254

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 beab 	b.w	8002c38 <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	24009254 	.word	0x24009254

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 bea2 	b.w	8002c38 <vGBFunction16bitADD>
 8000ef4:	24009254 	.word	0x24009254

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 be9b 	b.w	8002c38 <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	24009254 	.word	0x24009254

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 be82 	b.w	8002c14 <vGBFunctionRRCA>
 8000f10:	24009254 	.word	0x24009254

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 beb6 	b.w	8002c88 <vGBFunctionRLA>
 8000f1c:	24009254 	.word	0x24009254

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 bebe 	b.w	8002ca4 <vGBFunctionRRA>
 8000f28:	24009254 	.word	0x24009254

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 fab5 	bl	80034a8 <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 febc 	bl	8002cc0 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	24009254 	.word	0x24009254
 8000f54:	2400908c 	.word	0x2400908c

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 bebc 	b.w	8002cd8 <vGBFunctionDAA>
 8000f60:	24009254 	.word	0x24009254

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 fa99 	bl	80034a8 <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 fee0 	bl	8002d40 <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	24009254 	.word	0x24009254
 8000f8c:	2400908c 	.word	0x2400908c

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fddb 	bl	8002b58 <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 bdd5 	b.w	8002b58 <setbit>
 8000fae:	bf00      	nop
 8000fb0:	24009254 	.word	0x24009254

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 bdce 	b.w	8002b58 <setbit>
 8000fbc:	24009257 	.word	0x24009257

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 bdc8 	b.w	8002b58 <setbit>
 8000fc8:	24009256 	.word	0x24009256

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 bdc2 	b.w	8002b58 <setbit>
 8000fd4:	24009259 	.word	0x24009259

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 bdbc 	b.w	8002b58 <setbit>
 8000fe0:	24009258 	.word	0x24009258

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 bdb6 	b.w	8002b58 <setbit>
 8000fec:	2400925b 	.word	0x2400925b

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bdb0 	b.w	8002b58 <setbit>
 8000ff8:	2400925a 	.word	0x2400925a

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bdaa 	b.w	8002b58 <setbit>
 8001004:	24009255 	.word	0x24009255

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bda4 	b.w	8002b58 <setbit>
 8001010:	24009257 	.word	0x24009257

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bd9e 	b.w	8002b58 <setbit>
 800101c:	24009256 	.word	0x24009256

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bd98 	b.w	8002b58 <setbit>
 8001028:	24009259 	.word	0x24009259

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bd92 	b.w	8002b58 <setbit>
 8001034:	24009258 	.word	0x24009258

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bd8c 	b.w	8002b58 <setbit>
 8001040:	2400925b 	.word	0x2400925b

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bd86 	b.w	8002b58 <setbit>
 800104c:	2400925a 	.word	0x2400925a

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bd80 	b.w	8002b58 <setbit>
 8001058:	24009255 	.word	0x24009255

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bd7a 	b.w	8002b58 <setbit>
 8001064:	24009257 	.word	0x24009257

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bd74 	b.w	8002b58 <setbit>
 8001070:	24009256 	.word	0x24009256

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bd6e 	b.w	8002b58 <setbit>
 800107c:	24009259 	.word	0x24009259

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bd68 	b.w	8002b58 <setbit>
 8001088:	24009258 	.word	0x24009258

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bd62 	b.w	8002b58 <setbit>
 8001094:	2400925b 	.word	0x2400925b

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bd5c 	b.w	8002b58 <setbit>
 80010a0:	2400925a 	.word	0x2400925a

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bd56 	b.w	8002b58 <setbit>
 80010ac:	24009255 	.word	0x24009255

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd50 	b.w	8002b58 <setbit>
 80010b8:	24009257 	.word	0x24009257

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd4a 	b.w	8002b58 <setbit>
 80010c4:	24009256 	.word	0x24009256

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd44 	b.w	8002b58 <setbit>
 80010d0:	24009259 	.word	0x24009259

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd3e 	b.w	8002b58 <setbit>
 80010dc:	24009258 	.word	0x24009258

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd38 	b.w	8002b58 <setbit>
 80010e8:	2400925b 	.word	0x2400925b

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd32 	b.w	8002b58 <setbit>
 80010f4:	2400925a 	.word	0x2400925a

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd2c 	b.w	8002b58 <setbit>
 8001100:	24009255 	.word	0x24009255

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd26 	b.w	8002b58 <setbit>
 800110c:	24009257 	.word	0x24009257

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd20 	b.w	8002b58 <setbit>
 8001118:	24009256 	.word	0x24009256

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd1a 	b.w	8002b58 <setbit>
 8001124:	24009259 	.word	0x24009259

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd14 	b.w	8002b58 <setbit>
 8001130:	24009258 	.word	0x24009258

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd0e 	b.w	8002b58 <setbit>
 800113c:	2400925b 	.word	0x2400925b

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd08 	b.w	8002b58 <setbit>
 8001148:	2400925a 	.word	0x2400925a

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bd02 	b.w	8002b58 <setbit>
 8001154:	24009255 	.word	0x24009255

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bcfc 	b.w	8002b58 <setbit>
 8001160:	24009257 	.word	0x24009257

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bcf6 	b.w	8002b58 <setbit>
 800116c:	24009256 	.word	0x24009256

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bcf0 	b.w	8002b58 <setbit>
 8001178:	24009259 	.word	0x24009259

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bcea 	b.w	8002b58 <setbit>
 8001184:	24009258 	.word	0x24009258

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bce4 	b.w	8002b58 <setbit>
 8001190:	2400925b 	.word	0x2400925b

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bcde 	b.w	8002b58 <setbit>
 800119c:	2400925a 	.word	0x2400925a

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bcd8 	b.w	8002b58 <setbit>
 80011a8:	24009255 	.word	0x24009255

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bcd2 	b.w	8002b58 <setbit>
 80011b4:	24009257 	.word	0x24009257

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bccc 	b.w	8002b58 <setbit>
 80011c0:	24009256 	.word	0x24009256

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bcc6 	b.w	8002b58 <setbit>
 80011cc:	24009259 	.word	0x24009259

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bcc0 	b.w	8002b58 <setbit>
 80011d8:	24009258 	.word	0x24009258

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bcba 	b.w	8002b58 <setbit>
 80011e4:	2400925b 	.word	0x2400925b

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bcb4 	b.w	8002b58 <setbit>
 80011f0:	2400925a 	.word	0x2400925a

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bcae 	b.w	8002b58 <setbit>
 80011fc:	24009255 	.word	0x24009255

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bca8 	b.w	8002b58 <setbit>
 8001208:	24009257 	.word	0x24009257

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bca2 	b.w	8002b58 <setbit>
 8001214:	24009256 	.word	0x24009256

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bc9c 	b.w	8002b58 <setbit>
 8001220:	24009259 	.word	0x24009259

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bc96 	b.w	8002b58 <setbit>
 800122c:	24009258 	.word	0x24009258

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bc90 	b.w	8002b58 <setbit>
 8001238:	2400925b 	.word	0x2400925b

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bc8a 	b.w	8002b58 <setbit>
 8001244:	2400925a 	.word	0x2400925a

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bc84 	b.w	8002b58 <setbit>
 8001250:	24009255 	.word	0x24009255

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f921 	bl	80034a8 <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fd74 	bl	8002d58 <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	24009254 	.word	0x24009254
 800127c:	2400908c 	.word	0x2400908c

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bd74 	b.w	8002d70 <vMemoryLocationINC>
 8001288:	24009254 	.word	0x24009254

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bd98 	b.w	8002dc4 <vMemoryLocationDEC>
 8001294:	24009254 	.word	0x24009254

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fc63 	bl	8002b68 <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fc5f 	bl	8002b68 <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc51 	b.w	8002b58 <setbit>
 80012b6:	bf00      	nop
 80012b8:	24009254 	.word	0x24009254

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc52 	b.w	8002b68 <resetbit>
 80012c4:	24009257 	.word	0x24009257

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc4c 	b.w	8002b68 <resetbit>
 80012d0:	24009256 	.word	0x24009256

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc46 	b.w	8002b68 <resetbit>
 80012dc:	24009259 	.word	0x24009259

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc40 	b.w	8002b68 <resetbit>
 80012e8:	24009258 	.word	0x24009258

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc3a 	b.w	8002b68 <resetbit>
 80012f4:	2400925b 	.word	0x2400925b

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc34 	b.w	8002b68 <resetbit>
 8001300:	2400925a 	.word	0x2400925a

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc2e 	b.w	8002b68 <resetbit>
 800130c:	24009255 	.word	0x24009255

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc28 	b.w	8002b68 <resetbit>
 8001318:	24009257 	.word	0x24009257

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc22 	b.w	8002b68 <resetbit>
 8001324:	24009256 	.word	0x24009256

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc1c 	b.w	8002b68 <resetbit>
 8001330:	24009259 	.word	0x24009259

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc16 	b.w	8002b68 <resetbit>
 800133c:	24009258 	.word	0x24009258

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc10 	b.w	8002b68 <resetbit>
 8001348:	2400925b 	.word	0x2400925b

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc0a 	b.w	8002b68 <resetbit>
 8001354:	2400925a 	.word	0x2400925a

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bc04 	b.w	8002b68 <resetbit>
 8001360:	24009255 	.word	0x24009255

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bbfe 	b.w	8002b68 <resetbit>
 800136c:	24009257 	.word	0x24009257

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bbf8 	b.w	8002b68 <resetbit>
 8001378:	24009256 	.word	0x24009256

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bbf2 	b.w	8002b68 <resetbit>
 8001384:	24009259 	.word	0x24009259

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bbec 	b.w	8002b68 <resetbit>
 8001390:	24009258 	.word	0x24009258

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bbe6 	b.w	8002b68 <resetbit>
 800139c:	2400925b 	.word	0x2400925b

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bbe0 	b.w	8002b68 <resetbit>
 80013a8:	2400925a 	.word	0x2400925a

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bbda 	b.w	8002b68 <resetbit>
 80013b4:	24009255 	.word	0x24009255

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bbd4 	b.w	8002b68 <resetbit>
 80013c0:	24009257 	.word	0x24009257

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bbce 	b.w	8002b68 <resetbit>
 80013cc:	24009256 	.word	0x24009256

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bbc8 	b.w	8002b68 <resetbit>
 80013d8:	24009259 	.word	0x24009259

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bbc2 	b.w	8002b68 <resetbit>
 80013e4:	24009258 	.word	0x24009258

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bbbc 	b.w	8002b68 <resetbit>
 80013f0:	2400925b 	.word	0x2400925b

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bbb6 	b.w	8002b68 <resetbit>
 80013fc:	2400925a 	.word	0x2400925a

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bbb0 	b.w	8002b68 <resetbit>
 8001408:	24009255 	.word	0x24009255

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bbaa 	b.w	8002b68 <resetbit>
 8001414:	24009257 	.word	0x24009257

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bba4 	b.w	8002b68 <resetbit>
 8001420:	24009256 	.word	0x24009256

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bb9e 	b.w	8002b68 <resetbit>
 800142c:	24009259 	.word	0x24009259

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bb98 	b.w	8002b68 <resetbit>
 8001438:	24009258 	.word	0x24009258

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bb92 	b.w	8002b68 <resetbit>
 8001444:	2400925b 	.word	0x2400925b

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bb8c 	b.w	8002b68 <resetbit>
 8001450:	2400925a 	.word	0x2400925a

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bb86 	b.w	8002b68 <resetbit>
 800145c:	24009255 	.word	0x24009255

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bb80 	b.w	8002b68 <resetbit>
 8001468:	24009257 	.word	0x24009257

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bb7a 	b.w	8002b68 <resetbit>
 8001474:	24009256 	.word	0x24009256

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bb74 	b.w	8002b68 <resetbit>
 8001480:	24009259 	.word	0x24009259

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bb6e 	b.w	8002b68 <resetbit>
 800148c:	24009258 	.word	0x24009258

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bb68 	b.w	8002b68 <resetbit>
 8001498:	2400925b 	.word	0x2400925b

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bb62 	b.w	8002b68 <resetbit>
 80014a4:	2400925a 	.word	0x2400925a

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bb5c 	b.w	8002b68 <resetbit>
 80014b0:	24009255 	.word	0x24009255

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bb56 	b.w	8002b68 <resetbit>
 80014bc:	24009257 	.word	0x24009257

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb50 	b.w	8002b68 <resetbit>
 80014c8:	24009256 	.word	0x24009256

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb4a 	b.w	8002b68 <resetbit>
 80014d4:	24009259 	.word	0x24009259

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb44 	b.w	8002b68 <resetbit>
 80014e0:	24009258 	.word	0x24009258

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb3e 	b.w	8002b68 <resetbit>
 80014ec:	2400925b 	.word	0x2400925b

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb38 	b.w	8002b68 <resetbit>
 80014f8:	2400925a 	.word	0x2400925a

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb32 	b.w	8002b68 <resetbit>
 8001504:	24009255 	.word	0x24009255

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb2c 	b.w	8002b68 <resetbit>
 8001510:	24009257 	.word	0x24009257

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb26 	b.w	8002b68 <resetbit>
 800151c:	24009256 	.word	0x24009256

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb20 	b.w	8002b68 <resetbit>
 8001528:	24009259 	.word	0x24009259

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb1a 	b.w	8002b68 <resetbit>
 8001534:	24009258 	.word	0x24009258

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb14 	b.w	8002b68 <resetbit>
 8001540:	2400925b 	.word	0x2400925b

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb0e 	b.w	8002b68 <resetbit>
 800154c:	2400925a 	.word	0x2400925a

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb08 	b.w	8002b68 <resetbit>
 8001558:	24009255 	.word	0x24009255

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f001 ff9d 	bl	80034a8 <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fc4e 	bl	8002e14 <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	24009254 	.word	0x24009254
 8001584:	2400908c 	.word	0x2400908c

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bc4d 	b.w	8002e2c <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	24009254 	.word	0x24009254

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc45 	b.w	8002e2c <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	24009254 	.word	0x24009254

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc3d 	b.w	8002e2c <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	24009254 	.word	0x24009254

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc35 	b.w	8002e2c <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	24009254 	.word	0x24009254

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc2d 	b.w	8002e2c <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	24009254 	.word	0x24009254

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc25 	b.w	8002e2c <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	24009254 	.word	0x24009254

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f001 ff5b 	bl	80034a8 <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc16 	b.w	8002e2c <vGBFunctionADD>
 8001600:	24009254 	.word	0x24009254

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc0e 	b.w	8002e2c <vGBFunctionADD>
 8001610:	24009254 	.word	0x24009254

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f001 ff43 	bl	80034a8 <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bbfe 	b.w	8002e2c <vGBFunctionADD>
 8001630:	24009254 	.word	0x24009254

08001634 <vADC_A_d8>:
 8001634:	f7ff bfee 	b.w	8001614 <vADD_A_d8>

08001638 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001638:	4902      	ldr	r1, [pc, #8]	; (8001644 <vADC_A_B+0xc>)
 800163a:	78ca      	ldrb	r2, [r1, #3]
 800163c:	1c48      	adds	r0, r1, #1
 800163e:	f001 bc19 	b.w	8002e74 <vGBFunctionADC>
 8001642:	bf00      	nop
 8001644:	24009254 	.word	0x24009254

08001648 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001648:	4902      	ldr	r1, [pc, #8]	; (8001654 <vADC_A_C+0xc>)
 800164a:	788a      	ldrb	r2, [r1, #2]
 800164c:	1c48      	adds	r0, r1, #1
 800164e:	f001 bc11 	b.w	8002e74 <vGBFunctionADC>
 8001652:	bf00      	nop
 8001654:	24009254 	.word	0x24009254

08001658 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001658:	4902      	ldr	r1, [pc, #8]	; (8001664 <vADC_A_D+0xc>)
 800165a:	794a      	ldrb	r2, [r1, #5]
 800165c:	1c48      	adds	r0, r1, #1
 800165e:	f001 bc09 	b.w	8002e74 <vGBFunctionADC>
 8001662:	bf00      	nop
 8001664:	24009254 	.word	0x24009254

08001668 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001668:	4902      	ldr	r1, [pc, #8]	; (8001674 <vADC_A_E+0xc>)
 800166a:	790a      	ldrb	r2, [r1, #4]
 800166c:	1c48      	adds	r0, r1, #1
 800166e:	f001 bc01 	b.w	8002e74 <vGBFunctionADC>
 8001672:	bf00      	nop
 8001674:	24009254 	.word	0x24009254

08001678 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001678:	4902      	ldr	r1, [pc, #8]	; (8001684 <vADC_A_H+0xc>)
 800167a:	79ca      	ldrb	r2, [r1, #7]
 800167c:	1c48      	adds	r0, r1, #1
 800167e:	f001 bbf9 	b.w	8002e74 <vGBFunctionADC>
 8001682:	bf00      	nop
 8001684:	24009254 	.word	0x24009254

08001688 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001688:	4902      	ldr	r1, [pc, #8]	; (8001694 <vADC_A_L+0xc>)
 800168a:	798a      	ldrb	r2, [r1, #6]
 800168c:	1c48      	adds	r0, r1, #1
 800168e:	f001 bbf1 	b.w	8002e74 <vGBFunctionADC>
 8001692:	bf00      	nop
 8001694:	24009254 	.word	0x24009254

08001698 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001698:	b510      	push	{r4, lr}
 800169a:	4c05      	ldr	r4, [pc, #20]	; (80016b0 <vADC_A_HL+0x18>)
 800169c:	88e0      	ldrh	r0, [r4, #6]
 800169e:	f001 ff03 	bl	80034a8 <ucGBMemoryRead>
 80016a2:	4621      	mov	r1, r4
 80016a4:	4602      	mov	r2, r0
 80016a6:	1c60      	adds	r0, r4, #1
 80016a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ac:	f001 bbe2 	b.w	8002e74 <vGBFunctionADC>
 80016b0:	24009254 	.word	0x24009254

080016b4 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <vADC_A_A+0xc>)
 80016b6:	4601      	mov	r1, r0
 80016b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016bc:	f001 bbda 	b.w	8002e74 <vGBFunctionADC>
 80016c0:	24009254 	.word	0x24009254

080016c4 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016c4:	4902      	ldr	r1, [pc, #8]	; (80016d0 <vSUB_B+0xc>)
 80016c6:	78ca      	ldrb	r2, [r1, #3]
 80016c8:	1c48      	adds	r0, r1, #1
 80016ca:	f001 bbf9 	b.w	8002ec0 <vGBFunctionSUB>
 80016ce:	bf00      	nop
 80016d0:	24009254 	.word	0x24009254

080016d4 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016d4:	4902      	ldr	r1, [pc, #8]	; (80016e0 <vSUB_C+0xc>)
 80016d6:	788a      	ldrb	r2, [r1, #2]
 80016d8:	1c48      	adds	r0, r1, #1
 80016da:	f001 bbf1 	b.w	8002ec0 <vGBFunctionSUB>
 80016de:	bf00      	nop
 80016e0:	24009254 	.word	0x24009254

080016e4 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80016e4:	4902      	ldr	r1, [pc, #8]	; (80016f0 <vSUB_D+0xc>)
 80016e6:	794a      	ldrb	r2, [r1, #5]
 80016e8:	1c48      	adds	r0, r1, #1
 80016ea:	f001 bbe9 	b.w	8002ec0 <vGBFunctionSUB>
 80016ee:	bf00      	nop
 80016f0:	24009254 	.word	0x24009254

080016f4 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80016f4:	4902      	ldr	r1, [pc, #8]	; (8001700 <vSUB_E+0xc>)
 80016f6:	790a      	ldrb	r2, [r1, #4]
 80016f8:	1c48      	adds	r0, r1, #1
 80016fa:	f001 bbe1 	b.w	8002ec0 <vGBFunctionSUB>
 80016fe:	bf00      	nop
 8001700:	24009254 	.word	0x24009254

08001704 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001704:	4902      	ldr	r1, [pc, #8]	; (8001710 <vSUB_H+0xc>)
 8001706:	79ca      	ldrb	r2, [r1, #7]
 8001708:	1c48      	adds	r0, r1, #1
 800170a:	f001 bbd9 	b.w	8002ec0 <vGBFunctionSUB>
 800170e:	bf00      	nop
 8001710:	24009254 	.word	0x24009254

08001714 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001714:	4902      	ldr	r1, [pc, #8]	; (8001720 <vSUB_L+0xc>)
 8001716:	798a      	ldrb	r2, [r1, #6]
 8001718:	1c48      	adds	r0, r1, #1
 800171a:	f001 bbd1 	b.w	8002ec0 <vGBFunctionSUB>
 800171e:	bf00      	nop
 8001720:	24009254 	.word	0x24009254

08001724 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001724:	b510      	push	{r4, lr}
 8001726:	4c05      	ldr	r4, [pc, #20]	; (800173c <vSUB_HL+0x18>)
 8001728:	88e0      	ldrh	r0, [r4, #6]
 800172a:	f001 febd 	bl	80034a8 <ucGBMemoryRead>
 800172e:	4621      	mov	r1, r4
 8001730:	4602      	mov	r2, r0
 8001732:	1c60      	adds	r0, r4, #1
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001738:	f001 bbc2 	b.w	8002ec0 <vGBFunctionSUB>
 800173c:	24009254 	.word	0x24009254

08001740 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <vSUB_A+0xc>)
 8001742:	4601      	mov	r1, r0
 8001744:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001748:	f001 bbba 	b.w	8002ec0 <vGBFunctionSUB>
 800174c:	24009254 	.word	0x24009254

08001750 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001750:	b510      	push	{r4, lr}
 8001752:	4c06      	ldr	r4, [pc, #24]	; (800176c <vSUB_d8+0x1c>)
 8001754:	8960      	ldrh	r0, [r4, #10]
 8001756:	3801      	subs	r0, #1
 8001758:	b280      	uxth	r0, r0
 800175a:	f001 fea5 	bl	80034a8 <ucGBMemoryRead>
 800175e:	4621      	mov	r1, r4
 8001760:	4602      	mov	r2, r0
 8001762:	1c60      	adds	r0, r4, #1
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001768:	f001 bbaa 	b.w	8002ec0 <vGBFunctionSUB>
 800176c:	24009254 	.word	0x24009254

08001770 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001770:	4902      	ldr	r1, [pc, #8]	; (800177c <vSBC_A_B+0xc>)
 8001772:	78ca      	ldrb	r2, [r1, #3]
 8001774:	1c48      	adds	r0, r1, #1
 8001776:	f001 bbd9 	b.w	8002f2c <vGBFunctionSBC>
 800177a:	bf00      	nop
 800177c:	24009254 	.word	0x24009254

08001780 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001780:	4902      	ldr	r1, [pc, #8]	; (800178c <vSBC_A_C+0xc>)
 8001782:	788a      	ldrb	r2, [r1, #2]
 8001784:	1c48      	adds	r0, r1, #1
 8001786:	f001 bbd1 	b.w	8002f2c <vGBFunctionSBC>
 800178a:	bf00      	nop
 800178c:	24009254 	.word	0x24009254

08001790 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001790:	4902      	ldr	r1, [pc, #8]	; (800179c <vSBC_A_D+0xc>)
 8001792:	794a      	ldrb	r2, [r1, #5]
 8001794:	1c48      	adds	r0, r1, #1
 8001796:	f001 bbc9 	b.w	8002f2c <vGBFunctionSBC>
 800179a:	bf00      	nop
 800179c:	24009254 	.word	0x24009254

080017a0 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017a0:	4902      	ldr	r1, [pc, #8]	; (80017ac <vSBC_A_E+0xc>)
 80017a2:	790a      	ldrb	r2, [r1, #4]
 80017a4:	1c48      	adds	r0, r1, #1
 80017a6:	f001 bbc1 	b.w	8002f2c <vGBFunctionSBC>
 80017aa:	bf00      	nop
 80017ac:	24009254 	.word	0x24009254

080017b0 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017b0:	4902      	ldr	r1, [pc, #8]	; (80017bc <vSBC_A_H+0xc>)
 80017b2:	79ca      	ldrb	r2, [r1, #7]
 80017b4:	1c48      	adds	r0, r1, #1
 80017b6:	f001 bbb9 	b.w	8002f2c <vGBFunctionSBC>
 80017ba:	bf00      	nop
 80017bc:	24009254 	.word	0x24009254

080017c0 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017c0:	4902      	ldr	r1, [pc, #8]	; (80017cc <vSBC_A_L+0xc>)
 80017c2:	798a      	ldrb	r2, [r1, #6]
 80017c4:	1c48      	adds	r0, r1, #1
 80017c6:	f001 bbb1 	b.w	8002f2c <vGBFunctionSBC>
 80017ca:	bf00      	nop
 80017cc:	24009254 	.word	0x24009254

080017d0 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4c05      	ldr	r4, [pc, #20]	; (80017e8 <vSBC_A_HL+0x18>)
 80017d4:	88e0      	ldrh	r0, [r4, #6]
 80017d6:	f001 fe67 	bl	80034a8 <ucGBMemoryRead>
 80017da:	4621      	mov	r1, r4
 80017dc:	4602      	mov	r2, r0
 80017de:	1c60      	adds	r0, r4, #1
 80017e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e4:	f001 bba2 	b.w	8002f2c <vGBFunctionSBC>
 80017e8:	24009254 	.word	0x24009254

080017ec <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <vSBC_A_A+0xc>)
 80017ee:	4601      	mov	r1, r0
 80017f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80017f4:	f001 bb9a 	b.w	8002f2c <vGBFunctionSBC>
 80017f8:	24009254 	.word	0x24009254

080017fc <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4c06      	ldr	r4, [pc, #24]	; (8001818 <vSBC_A_d8+0x1c>)
 8001800:	8960      	ldrh	r0, [r4, #10]
 8001802:	3801      	subs	r0, #1
 8001804:	b280      	uxth	r0, r0
 8001806:	f001 fe4f 	bl	80034a8 <ucGBMemoryRead>
 800180a:	4621      	mov	r1, r4
 800180c:	4602      	mov	r2, r0
 800180e:	1c60      	adds	r0, r4, #1
 8001810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001814:	f001 bb8a 	b.w	8002f2c <vGBFunctionSBC>
 8001818:	24009254 	.word	0x24009254

0800181c <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 800181c:	4902      	ldr	r1, [pc, #8]	; (8001828 <vCP_B+0xc>)
 800181e:	78ca      	ldrb	r2, [r1, #3]
 8001820:	7848      	ldrb	r0, [r1, #1]
 8001822:	f001 bbb7 	b.w	8002f94 <vGBFunctionCP>
 8001826:	bf00      	nop
 8001828:	24009254 	.word	0x24009254

0800182c <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 800182c:	4902      	ldr	r1, [pc, #8]	; (8001838 <vCP_C+0xc>)
 800182e:	788a      	ldrb	r2, [r1, #2]
 8001830:	7848      	ldrb	r0, [r1, #1]
 8001832:	f001 bbaf 	b.w	8002f94 <vGBFunctionCP>
 8001836:	bf00      	nop
 8001838:	24009254 	.word	0x24009254

0800183c <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 800183c:	4902      	ldr	r1, [pc, #8]	; (8001848 <vCP_D+0xc>)
 800183e:	794a      	ldrb	r2, [r1, #5]
 8001840:	7848      	ldrb	r0, [r1, #1]
 8001842:	f001 bba7 	b.w	8002f94 <vGBFunctionCP>
 8001846:	bf00      	nop
 8001848:	24009254 	.word	0x24009254

0800184c <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 800184c:	4902      	ldr	r1, [pc, #8]	; (8001858 <vCP_E+0xc>)
 800184e:	790a      	ldrb	r2, [r1, #4]
 8001850:	7848      	ldrb	r0, [r1, #1]
 8001852:	f001 bb9f 	b.w	8002f94 <vGBFunctionCP>
 8001856:	bf00      	nop
 8001858:	24009254 	.word	0x24009254

0800185c <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 800185c:	4902      	ldr	r1, [pc, #8]	; (8001868 <vCP_H+0xc>)
 800185e:	79ca      	ldrb	r2, [r1, #7]
 8001860:	7848      	ldrb	r0, [r1, #1]
 8001862:	f001 bb97 	b.w	8002f94 <vGBFunctionCP>
 8001866:	bf00      	nop
 8001868:	24009254 	.word	0x24009254

0800186c <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 800186c:	4902      	ldr	r1, [pc, #8]	; (8001878 <vCP_L+0xc>)
 800186e:	798a      	ldrb	r2, [r1, #6]
 8001870:	7848      	ldrb	r0, [r1, #1]
 8001872:	f001 bb8f 	b.w	8002f94 <vGBFunctionCP>
 8001876:	bf00      	nop
 8001878:	24009254 	.word	0x24009254

0800187c <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4c06      	ldr	r4, [pc, #24]	; (8001898 <vCP_HL+0x1c>)
 8001880:	7865      	ldrb	r5, [r4, #1]
 8001882:	88e0      	ldrh	r0, [r4, #6]
 8001884:	f001 fe10 	bl	80034a8 <ucGBMemoryRead>
 8001888:	4621      	mov	r1, r4
 800188a:	4602      	mov	r2, r0
 800188c:	4628      	mov	r0, r5
 800188e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001892:	f001 bb7f 	b.w	8002f94 <vGBFunctionCP>
 8001896:	bf00      	nop
 8001898:	24009254 	.word	0x24009254

0800189c <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 800189c:	4902      	ldr	r1, [pc, #8]	; (80018a8 <vCP_A+0xc>)
 800189e:	784a      	ldrb	r2, [r1, #1]
 80018a0:	4610      	mov	r0, r2
 80018a2:	f001 bb77 	b.w	8002f94 <vGBFunctionCP>
 80018a6:	bf00      	nop
 80018a8:	24009254 	.word	0x24009254

080018ac <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4c07      	ldr	r4, [pc, #28]	; (80018cc <vCP_d8+0x20>)
 80018b0:	8960      	ldrh	r0, [r4, #10]
 80018b2:	7865      	ldrb	r5, [r4, #1]
 80018b4:	3801      	subs	r0, #1
 80018b6:	b280      	uxth	r0, r0
 80018b8:	f001 fdf6 	bl	80034a8 <ucGBMemoryRead>
 80018bc:	4621      	mov	r1, r4
 80018be:	4602      	mov	r2, r0
 80018c0:	4628      	mov	r0, r5
 80018c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c6:	f001 bb65 	b.w	8002f94 <vGBFunctionCP>
 80018ca:	bf00      	nop
 80018cc:	24009254 	.word	0x24009254

080018d0 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018d0:	4901      	ldr	r1, [pc, #4]	; (80018d8 <vRET+0x8>)
 80018d2:	1e88      	subs	r0, r1, #2
 80018d4:	f001 bb7c 	b.w	8002fd0 <vGBFunctionRET>
 80018d8:	2400925e 	.word	0x2400925e

080018dc <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <vRETI+0x10>)
 80018de:	2201      	movs	r2, #1
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <vRETI+0x14>)
 80018e2:	1e88      	subs	r0, r1, #2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	f001 bb73 	b.w	8002fd0 <vGBFunctionRET>
 80018ea:	bf00      	nop
 80018ec:	2400925e 	.word	0x2400925e
 80018f0:	24009098 	.word	0x24009098

080018f4 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80018f4:	4901      	ldr	r1, [pc, #4]	; (80018fc <vPOP_BC+0x8>)
 80018f6:	1d88      	adds	r0, r1, #6
 80018f8:	f001 bb7e 	b.w	8002ff8 <vGBFunctionPOP>
 80018fc:	24009256 	.word	0x24009256

08001900 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 8001900:	4901      	ldr	r1, [pc, #4]	; (8001908 <vPOP_DE+0x8>)
 8001902:	1d08      	adds	r0, r1, #4
 8001904:	f001 bb78 	b.w	8002ff8 <vGBFunctionPOP>
 8001908:	24009258 	.word	0x24009258

0800190c <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 800190c:	4901      	ldr	r1, [pc, #4]	; (8001914 <vPOP_HL+0x8>)
 800190e:	1c88      	adds	r0, r1, #2
 8001910:	f001 bb72 	b.w	8002ff8 <vGBFunctionPOP>
 8001914:	2400925a 	.word	0x2400925a

08001918 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001918:	b510      	push	{r4, lr}
 800191a:	4c05      	ldr	r4, [pc, #20]	; (8001930 <vPOP_AF+0x18>)
 800191c:	4621      	mov	r1, r4
 800191e:	f104 0008 	add.w	r0, r4, #8
 8001922:	f001 fb69 	bl	8002ff8 <vGBFunctionPOP>
 8001926:	8823      	ldrh	r3, [r4, #0]
 8001928:	f023 030f 	bic.w	r3, r3, #15
 800192c:	8023      	strh	r3, [r4, #0]
 800192e:	bd10      	pop	{r4, pc}
 8001930:	24009254 	.word	0x24009254

08001934 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	4d0d      	ldr	r5, [pc, #52]	; (800196c <vJP_NZ_a16+0x38>)
 8001938:	8968      	ldrh	r0, [r5, #10]
 800193a:	462c      	mov	r4, r5
 800193c:	3802      	subs	r0, #2
 800193e:	b280      	uxth	r0, r0
 8001940:	f001 fdb2 	bl	80034a8 <ucGBMemoryRead>
 8001944:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001948:	4606      	mov	r6, r0
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	b280      	uxth	r0, r0
 800194e:	f001 fdab 	bl	80034a8 <ucGBMemoryRead>
 8001952:	4601      	mov	r1, r0
 8001954:	4630      	mov	r0, r6
 8001956:	f001 f8fb 	bl	8002b50 <concat_16bit_bigEndian>
 800195a:	4629      	mov	r1, r5
 800195c:	4602      	mov	r2, r0
 800195e:	4620      	mov	r0, r4
 8001960:	f001 fb4c 	bl	8002ffc <vGBFunctionJP_NZ_a16>
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <vJP_NZ_a16+0x3c>)
 8001966:	7018      	strb	r0, [r3, #0]
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	bf00      	nop
 800196c:	24009254 	.word	0x24009254
 8001970:	2400908c 	.word	0x2400908c

08001974 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <vCALL_NZ_a16+0x14>)
 8001976:	b508      	push	{r3, lr}
 8001978:	f1a2 0108 	sub.w	r1, r2, #8
 800197c:	1c90      	adds	r0, r2, #2
 800197e:	f001 fb59 	bl	8003034 <vGBFunctionCALL_NZ_a16>
 8001982:	4b02      	ldr	r3, [pc, #8]	; (800198c <vCALL_NZ_a16+0x18>)
 8001984:	7018      	strb	r0, [r3, #0]
 8001986:	bd08      	pop	{r3, pc}
 8001988:	2400925c 	.word	0x2400925c
 800198c:	2400908c 	.word	0x2400908c

08001990 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001990:	4901      	ldr	r1, [pc, #4]	; (8001998 <vPUSH_BC+0x8>)
 8001992:	1d88      	adds	r0, r1, #6
 8001994:	f001 bb3a 	b.w	800300c <vGBFunctionPUSH>
 8001998:	24009256 	.word	0x24009256

0800199c <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 800199c:	b510      	push	{r4, lr}
 800199e:	4c04      	ldr	r4, [pc, #16]	; (80019b0 <vRST_00H+0x14>)
 80019a0:	4621      	mov	r1, r4
 80019a2:	1ea0      	subs	r0, r4, #2
 80019a4:	f001 fb32 	bl	800300c <vGBFunctionPUSH>
 80019a8:	3c0a      	subs	r4, #10
 80019aa:	2300      	movs	r3, #0
 80019ac:	8163      	strh	r3, [r4, #10]
 80019ae:	bd10      	pop	{r4, pc}
 80019b0:	2400925e 	.word	0x2400925e

080019b4 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019b4:	490b      	ldr	r1, [pc, #44]	; (80019e4 <vCALL_a16+0x30>)
 80019b6:	b538      	push	{r3, r4, r5, lr}
 80019b8:	460c      	mov	r4, r1
 80019ba:	1e88      	subs	r0, r1, #2
 80019bc:	f001 fb26 	bl	800300c <vGBFunctionPUSH>
 80019c0:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019c4:	3802      	subs	r0, #2
 80019c6:	b280      	uxth	r0, r0
 80019c8:	f001 fd6e 	bl	80034a8 <ucGBMemoryRead>
 80019cc:	8963      	ldrh	r3, [r4, #10]
 80019ce:	4605      	mov	r5, r0
 80019d0:	1e58      	subs	r0, r3, #1
 80019d2:	b280      	uxth	r0, r0
 80019d4:	f001 fd68 	bl	80034a8 <ucGBMemoryRead>
 80019d8:	4601      	mov	r1, r0
 80019da:	4628      	mov	r0, r5
 80019dc:	f001 f8b8 	bl	8002b50 <concat_16bit_bigEndian>
 80019e0:	8160      	strh	r0, [r4, #10]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	2400925e 	.word	0x2400925e

080019e8 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4c04      	ldr	r4, [pc, #16]	; (80019fc <vRST_08H+0x14>)
 80019ec:	4621      	mov	r1, r4
 80019ee:	1ea0      	subs	r0, r4, #2
 80019f0:	f001 fb0c 	bl	800300c <vGBFunctionPUSH>
 80019f4:	2308      	movs	r3, #8
 80019f6:	8023      	strh	r3, [r4, #0]
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	bf00      	nop
 80019fc:	2400925e 	.word	0x2400925e

08001a00 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a00:	4901      	ldr	r1, [pc, #4]	; (8001a08 <vPUSH_DE+0x8>)
 8001a02:	1d08      	adds	r0, r1, #4
 8001a04:	f001 bb02 	b.w	800300c <vGBFunctionPUSH>
 8001a08:	24009258 	.word	0x24009258

08001a0c <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4c04      	ldr	r4, [pc, #16]	; (8001a20 <vRST_10H+0x14>)
 8001a10:	4621      	mov	r1, r4
 8001a12:	1ea0      	subs	r0, r4, #2
 8001a14:	f001 fafa 	bl	800300c <vGBFunctionPUSH>
 8001a18:	2310      	movs	r3, #16
 8001a1a:	8023      	strh	r3, [r4, #0]
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	bf00      	nop
 8001a20:	2400925e 	.word	0x2400925e

08001a24 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4c04      	ldr	r4, [pc, #16]	; (8001a38 <vRST_18H+0x14>)
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1ea0      	subs	r0, r4, #2
 8001a2c:	f001 faee 	bl	800300c <vGBFunctionPUSH>
 8001a30:	2318      	movs	r3, #24
 8001a32:	8023      	strh	r3, [r4, #0]
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	2400925e 	.word	0x2400925e

08001a3c <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a3c:	4901      	ldr	r1, [pc, #4]	; (8001a44 <vPUSH_HL+0x8>)
 8001a3e:	1c88      	adds	r0, r1, #2
 8001a40:	f001 bae4 	b.w	800300c <vGBFunctionPUSH>
 8001a44:	2400925a 	.word	0x2400925a

08001a48 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4c04      	ldr	r4, [pc, #16]	; (8001a5c <vRST20H+0x14>)
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	1ea0      	subs	r0, r4, #2
 8001a50:	f001 fadc 	bl	800300c <vGBFunctionPUSH>
 8001a54:	2320      	movs	r3, #32
 8001a56:	8023      	strh	r3, [r4, #0]
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2400925e 	.word	0x2400925e

08001a60 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4c04      	ldr	r4, [pc, #16]	; (8001a74 <vRST_28H+0x14>)
 8001a64:	4621      	mov	r1, r4
 8001a66:	1ea0      	subs	r0, r4, #2
 8001a68:	f001 fad0 	bl	800300c <vGBFunctionPUSH>
 8001a6c:	2328      	movs	r3, #40	; 0x28
 8001a6e:	8023      	strh	r3, [r4, #0]
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	2400925e 	.word	0x2400925e

08001a78 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a78:	4902      	ldr	r1, [pc, #8]	; (8001a84 <vPUSH_AF+0xc>)
 8001a7a:	f101 0008 	add.w	r0, r1, #8
 8001a7e:	f001 bac5 	b.w	800300c <vGBFunctionPUSH>
 8001a82:	bf00      	nop
 8001a84:	24009254 	.word	0x24009254

08001a88 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4c04      	ldr	r4, [pc, #16]	; (8001a9c <vRST_30H+0x14>)
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	1ea0      	subs	r0, r4, #2
 8001a90:	f001 fabc 	bl	800300c <vGBFunctionPUSH>
 8001a94:	2330      	movs	r3, #48	; 0x30
 8001a96:	8023      	strh	r3, [r4, #0]
 8001a98:	bd10      	pop	{r4, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2400925e 	.word	0x2400925e

08001aa0 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4c04      	ldr	r4, [pc, #16]	; (8001ab4 <vRST_38H+0x14>)
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	1ea0      	subs	r0, r4, #2
 8001aa8:	f001 fab0 	bl	800300c <vGBFunctionPUSH>
 8001aac:	2338      	movs	r3, #56	; 0x38
 8001aae:	8023      	strh	r3, [r4, #0]
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2400925e 	.word	0x2400925e

08001ab8 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4d0d      	ldr	r5, [pc, #52]	; (8001af0 <vJP_Z_a16+0x38>)
 8001abc:	8968      	ldrh	r0, [r5, #10]
 8001abe:	462c      	mov	r4, r5
 8001ac0:	3802      	subs	r0, #2
 8001ac2:	b280      	uxth	r0, r0
 8001ac4:	f001 fcf0 	bl	80034a8 <ucGBMemoryRead>
 8001ac8:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001acc:	4606      	mov	r6, r0
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	b280      	uxth	r0, r0
 8001ad2:	f001 fce9 	bl	80034a8 <ucGBMemoryRead>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f001 f839 	bl	8002b50 <concat_16bit_bigEndian>
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f001 fac2 	bl	800306c <vGBFunctionJP_Z_a16>
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <vJP_Z_a16+0x3c>)
 8001aea:	7018      	strb	r0, [r3, #0]
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	bf00      	nop
 8001af0:	24009254 	.word	0x24009254
 8001af4:	2400908c 	.word	0x2400908c

08001af8 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <vCALL_Z_a16+0x14>)
 8001afa:	b508      	push	{r3, lr}
 8001afc:	f1a2 0108 	sub.w	r1, r2, #8
 8001b00:	1c90      	adds	r0, r2, #2
 8001b02:	f001 fabb 	bl	800307c <vGBFunctionCALL_Z_a16>
 8001b06:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vCALL_Z_a16+0x18>)
 8001b08:	7018      	strb	r0, [r3, #0]
 8001b0a:	bd08      	pop	{r3, pc}
 8001b0c:	2400925c 	.word	0x2400925c
 8001b10:	2400908c 	.word	0x2400908c

08001b14 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4d0d      	ldr	r5, [pc, #52]	; (8001b4c <vJP_NC_a16+0x38>)
 8001b18:	8968      	ldrh	r0, [r5, #10]
 8001b1a:	462c      	mov	r4, r5
 8001b1c:	3802      	subs	r0, #2
 8001b1e:	b280      	uxth	r0, r0
 8001b20:	f001 fcc2 	bl	80034a8 <ucGBMemoryRead>
 8001b24:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b28:	4606      	mov	r6, r0
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	b280      	uxth	r0, r0
 8001b2e:	f001 fcbb 	bl	80034a8 <ucGBMemoryRead>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4630      	mov	r0, r6
 8001b36:	f001 f80b 	bl	8002b50 <concat_16bit_bigEndian>
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f001 fab8 	bl	80030b4 <vGBFunctionJP_NC_a16>
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <vJP_NC_a16+0x3c>)
 8001b46:	7018      	strb	r0, [r3, #0]
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24009254 	.word	0x24009254
 8001b50:	2400908c 	.word	0x2400908c

08001b54 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <vCALL_NC_a16+0x14>)
 8001b56:	b508      	push	{r3, lr}
 8001b58:	f1a2 0108 	sub.w	r1, r2, #8
 8001b5c:	1c90      	adds	r0, r2, #2
 8001b5e:	f001 fab1 	bl	80030c4 <vGBFunctionCALL_NC_a16>
 8001b62:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vCALL_NC_a16+0x18>)
 8001b64:	7018      	strb	r0, [r3, #0]
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	2400925c 	.word	0x2400925c
 8001b6c:	2400908c 	.word	0x2400908c

08001b70 <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4d0d      	ldr	r5, [pc, #52]	; (8001ba8 <vJP_C_a16+0x38>)
 8001b74:	8968      	ldrh	r0, [r5, #10]
 8001b76:	462c      	mov	r4, r5
 8001b78:	3802      	subs	r0, #2
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	f001 fc94 	bl	80034a8 <ucGBMemoryRead>
 8001b80:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b84:	4606      	mov	r6, r0
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	f001 fc8d 	bl	80034a8 <ucGBMemoryRead>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 ffdd 	bl	8002b50 <concat_16bit_bigEndian>
 8001b96:	4629      	mov	r1, r5
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f001 faae 	bl	80030fc <vGBFunctionJP_C_a16>
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <vJP_C_a16+0x3c>)
 8001ba2:	7018      	strb	r0, [r3, #0]
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	bf00      	nop
 8001ba8:	24009254 	.word	0x24009254
 8001bac:	2400908c 	.word	0x2400908c

08001bb0 <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <vCALL_C_a16+0x14>)
 8001bb2:	b508      	push	{r3, lr}
 8001bb4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bb8:	1c90      	adds	r0, r2, #2
 8001bba:	f001 faa7 	bl	800310c <vGBFunctionCALL_C_a16>
 8001bbe:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vCALL_C_a16+0x18>)
 8001bc0:	7018      	strb	r0, [r3, #0]
 8001bc2:	bd08      	pop	{r3, pc}
 8001bc4:	2400925c 	.word	0x2400925c
 8001bc8:	2400908c 	.word	0x2400908c

08001bcc <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4c07      	ldr	r4, [pc, #28]	; (8001bec <vADDs_SP_r8+0x20>)
 8001bd0:	8960      	ldrh	r0, [r4, #10]
 8001bd2:	3801      	subs	r0, #1
 8001bd4:	b280      	uxth	r0, r0
 8001bd6:	f001 fc67 	bl	80034a8 <ucGBMemoryRead>
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f104 0008 	add.w	r0, r4, #8
 8001be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be6:	f001 baad 	b.w	8003144 <vGBFunctionADD_SP_r8>
 8001bea:	bf00      	nop
 8001bec:	24009254 	.word	0x24009254

08001bf0 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	4c07      	ldr	r4, [pc, #28]	; (8001c10 <vLDs_HL_SP_r8+0x20>)
 8001bf4:	8960      	ldrh	r0, [r4, #10]
 8001bf6:	3801      	subs	r0, #1
 8001bf8:	b280      	uxth	r0, r0
 8001bfa:	f001 fc55 	bl	80034a8 <ucGBMemoryRead>
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4603      	mov	r3, r0
 8001c02:	f104 0108 	add.w	r1, r4, #8
 8001c06:	1da0      	adds	r0, r4, #6
 8001c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0c:	f001 bac2 	b.w	8003194 <vGBFunctionLD_HL_SP_r8>
 8001c10:	24009254 	.word	0x24009254

08001c14 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4c03      	ldr	r4, [pc, #12]	; (8001c24 <vRLC_B+0x10>)
 8001c18:	4621      	mov	r1, r4
 8001c1a:	78e0      	ldrb	r0, [r4, #3]
 8001c1c:	f001 fae2 	bl	80031e4 <ucGBFunctionRLC>
 8001c20:	70e0      	strb	r0, [r4, #3]
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	24009254 	.word	0x24009254

08001c28 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4c03      	ldr	r4, [pc, #12]	; (8001c38 <vRLC_C+0x10>)
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	78a0      	ldrb	r0, [r4, #2]
 8001c30:	f001 fad8 	bl	80031e4 <ucGBFunctionRLC>
 8001c34:	70a0      	strb	r0, [r4, #2]
 8001c36:	bd10      	pop	{r4, pc}
 8001c38:	24009254 	.word	0x24009254

08001c3c <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	4c03      	ldr	r4, [pc, #12]	; (8001c4c <vRLC_D+0x10>)
 8001c40:	4621      	mov	r1, r4
 8001c42:	7960      	ldrb	r0, [r4, #5]
 8001c44:	f001 face 	bl	80031e4 <ucGBFunctionRLC>
 8001c48:	7160      	strb	r0, [r4, #5]
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	24009254 	.word	0x24009254

08001c50 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4c03      	ldr	r4, [pc, #12]	; (8001c60 <vRLC_E+0x10>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	7920      	ldrb	r0, [r4, #4]
 8001c58:	f001 fac4 	bl	80031e4 <ucGBFunctionRLC>
 8001c5c:	7120      	strb	r0, [r4, #4]
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	24009254 	.word	0x24009254

08001c64 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4c03      	ldr	r4, [pc, #12]	; (8001c74 <vRLC_H+0x10>)
 8001c68:	4621      	mov	r1, r4
 8001c6a:	79e0      	ldrb	r0, [r4, #7]
 8001c6c:	f001 faba 	bl	80031e4 <ucGBFunctionRLC>
 8001c70:	71e0      	strb	r0, [r4, #7]
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	24009254 	.word	0x24009254

08001c78 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4c03      	ldr	r4, [pc, #12]	; (8001c88 <vRLC_L+0x10>)
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	79a0      	ldrb	r0, [r4, #6]
 8001c80:	f001 fab0 	bl	80031e4 <ucGBFunctionRLC>
 8001c84:	71a0      	strb	r0, [r4, #6]
 8001c86:	bd10      	pop	{r4, pc}
 8001c88:	24009254 	.word	0x24009254

08001c8c <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	4d07      	ldr	r5, [pc, #28]	; (8001cac <vRLC_HL+0x20>)
 8001c90:	88ec      	ldrh	r4, [r5, #6]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f001 fc08 	bl	80034a8 <ucGBMemoryRead>
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f001 faa3 	bl	80031e4 <ucGBFunctionRLC>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca6:	f001 bbb3 	b.w	8003410 <vGBMemoryWrite>
 8001caa:	bf00      	nop
 8001cac:	24009254 	.word	0x24009254

08001cb0 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4c03      	ldr	r4, [pc, #12]	; (8001cc0 <vRLC_A+0x10>)
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	7860      	ldrb	r0, [r4, #1]
 8001cb8:	f001 fa94 	bl	80031e4 <ucGBFunctionRLC>
 8001cbc:	7060      	strb	r0, [r4, #1]
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	24009254 	.word	0x24009254

08001cc4 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4c03      	ldr	r4, [pc, #12]	; (8001cd4 <vRRC_B+0x10>)
 8001cc8:	4621      	mov	r1, r4
 8001cca:	78e0      	ldrb	r0, [r4, #3]
 8001ccc:	f001 faa6 	bl	800321c <ucGBFunctionRRC>
 8001cd0:	70e0      	strb	r0, [r4, #3]
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	24009254 	.word	0x24009254

08001cd8 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4c03      	ldr	r4, [pc, #12]	; (8001ce8 <vRRC_C+0x10>)
 8001cdc:	4621      	mov	r1, r4
 8001cde:	78a0      	ldrb	r0, [r4, #2]
 8001ce0:	f001 fa9c 	bl	800321c <ucGBFunctionRRC>
 8001ce4:	70a0      	strb	r0, [r4, #2]
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	24009254 	.word	0x24009254

08001cec <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4c03      	ldr	r4, [pc, #12]	; (8001cfc <vRRC_D+0x10>)
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	7960      	ldrb	r0, [r4, #5]
 8001cf4:	f001 fa92 	bl	800321c <ucGBFunctionRRC>
 8001cf8:	7160      	strb	r0, [r4, #5]
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	24009254 	.word	0x24009254

08001d00 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4c03      	ldr	r4, [pc, #12]	; (8001d10 <vRRC_E+0x10>)
 8001d04:	4621      	mov	r1, r4
 8001d06:	7920      	ldrb	r0, [r4, #4]
 8001d08:	f001 fa88 	bl	800321c <ucGBFunctionRRC>
 8001d0c:	7120      	strb	r0, [r4, #4]
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	24009254 	.word	0x24009254

08001d14 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d14:	b510      	push	{r4, lr}
 8001d16:	4c03      	ldr	r4, [pc, #12]	; (8001d24 <vRRC_H+0x10>)
 8001d18:	4621      	mov	r1, r4
 8001d1a:	79e0      	ldrb	r0, [r4, #7]
 8001d1c:	f001 fa7e 	bl	800321c <ucGBFunctionRRC>
 8001d20:	71e0      	strb	r0, [r4, #7]
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	24009254 	.word	0x24009254

08001d28 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4c03      	ldr	r4, [pc, #12]	; (8001d38 <vRRC_L+0x10>)
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	79a0      	ldrb	r0, [r4, #6]
 8001d30:	f001 fa74 	bl	800321c <ucGBFunctionRRC>
 8001d34:	71a0      	strb	r0, [r4, #6]
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	24009254 	.word	0x24009254

08001d3c <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d07      	ldr	r5, [pc, #28]	; (8001d5c <vRRC_HL+0x20>)
 8001d40:	88ec      	ldrh	r4, [r5, #6]
 8001d42:	4620      	mov	r0, r4
 8001d44:	f001 fbb0 	bl	80034a8 <ucGBMemoryRead>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f001 fa67 	bl	800321c <ucGBFunctionRRC>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4620      	mov	r0, r4
 8001d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d56:	f001 bb5b 	b.w	8003410 <vGBMemoryWrite>
 8001d5a:	bf00      	nop
 8001d5c:	24009254 	.word	0x24009254

08001d60 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4c03      	ldr	r4, [pc, #12]	; (8001d70 <vRRC_A+0x10>)
 8001d64:	4621      	mov	r1, r4
 8001d66:	7860      	ldrb	r0, [r4, #1]
 8001d68:	f001 fa58 	bl	800321c <ucGBFunctionRRC>
 8001d6c:	7060      	strb	r0, [r4, #1]
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	24009254 	.word	0x24009254

08001d74 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4c03      	ldr	r4, [pc, #12]	; (8001d84 <vRL_B+0x10>)
 8001d78:	4621      	mov	r1, r4
 8001d7a:	78e0      	ldrb	r0, [r4, #3]
 8001d7c:	f001 fa6a 	bl	8003254 <ucGBFunctionRL>
 8001d80:	70e0      	strb	r0, [r4, #3]
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	24009254 	.word	0x24009254

08001d88 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	4c03      	ldr	r4, [pc, #12]	; (8001d98 <vRL_C+0x10>)
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	78a0      	ldrb	r0, [r4, #2]
 8001d90:	f001 fa60 	bl	8003254 <ucGBFunctionRL>
 8001d94:	70a0      	strb	r0, [r4, #2]
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	24009254 	.word	0x24009254

08001d9c <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4c03      	ldr	r4, [pc, #12]	; (8001dac <vRL_D+0x10>)
 8001da0:	4621      	mov	r1, r4
 8001da2:	7960      	ldrb	r0, [r4, #5]
 8001da4:	f001 fa56 	bl	8003254 <ucGBFunctionRL>
 8001da8:	7160      	strb	r0, [r4, #5]
 8001daa:	bd10      	pop	{r4, pc}
 8001dac:	24009254 	.word	0x24009254

08001db0 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4c03      	ldr	r4, [pc, #12]	; (8001dc0 <vRL_E+0x10>)
 8001db4:	4621      	mov	r1, r4
 8001db6:	7920      	ldrb	r0, [r4, #4]
 8001db8:	f001 fa4c 	bl	8003254 <ucGBFunctionRL>
 8001dbc:	7120      	strb	r0, [r4, #4]
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	24009254 	.word	0x24009254

08001dc4 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4c03      	ldr	r4, [pc, #12]	; (8001dd4 <vRL_H+0x10>)
 8001dc8:	4621      	mov	r1, r4
 8001dca:	79e0      	ldrb	r0, [r4, #7]
 8001dcc:	f001 fa42 	bl	8003254 <ucGBFunctionRL>
 8001dd0:	71e0      	strb	r0, [r4, #7]
 8001dd2:	bd10      	pop	{r4, pc}
 8001dd4:	24009254 	.word	0x24009254

08001dd8 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4c03      	ldr	r4, [pc, #12]	; (8001de8 <vRL_L+0x10>)
 8001ddc:	4621      	mov	r1, r4
 8001dde:	79a0      	ldrb	r0, [r4, #6]
 8001de0:	f001 fa38 	bl	8003254 <ucGBFunctionRL>
 8001de4:	71a0      	strb	r0, [r4, #6]
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	24009254 	.word	0x24009254

08001dec <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4d07      	ldr	r5, [pc, #28]	; (8001e0c <vRL_HL+0x20>)
 8001df0:	88ec      	ldrh	r4, [r5, #6]
 8001df2:	4620      	mov	r0, r4
 8001df4:	f001 fb58 	bl	80034a8 <ucGBMemoryRead>
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f001 fa2b 	bl	8003254 <ucGBFunctionRL>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	4620      	mov	r0, r4
 8001e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e06:	f001 bb03 	b.w	8003410 <vGBMemoryWrite>
 8001e0a:	bf00      	nop
 8001e0c:	24009254 	.word	0x24009254

08001e10 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4c03      	ldr	r4, [pc, #12]	; (8001e20 <vRL_A+0x10>)
 8001e14:	4621      	mov	r1, r4
 8001e16:	7860      	ldrb	r0, [r4, #1]
 8001e18:	f001 fa1c 	bl	8003254 <ucGBFunctionRL>
 8001e1c:	7060      	strb	r0, [r4, #1]
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	24009254 	.word	0x24009254

08001e24 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4c03      	ldr	r4, [pc, #12]	; (8001e34 <vRR_B+0x10>)
 8001e28:	4621      	mov	r1, r4
 8001e2a:	78e0      	ldrb	r0, [r4, #3]
 8001e2c:	f001 fa2c 	bl	8003288 <ucGBFunctionRR>
 8001e30:	70e0      	strb	r0, [r4, #3]
 8001e32:	bd10      	pop	{r4, pc}
 8001e34:	24009254 	.word	0x24009254

08001e38 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4c03      	ldr	r4, [pc, #12]	; (8001e48 <vRR_C+0x10>)
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	78a0      	ldrb	r0, [r4, #2]
 8001e40:	f001 fa22 	bl	8003288 <ucGBFunctionRR>
 8001e44:	70a0      	strb	r0, [r4, #2]
 8001e46:	bd10      	pop	{r4, pc}
 8001e48:	24009254 	.word	0x24009254

08001e4c <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4c03      	ldr	r4, [pc, #12]	; (8001e5c <vRR_D+0x10>)
 8001e50:	4621      	mov	r1, r4
 8001e52:	7960      	ldrb	r0, [r4, #5]
 8001e54:	f001 fa18 	bl	8003288 <ucGBFunctionRR>
 8001e58:	7160      	strb	r0, [r4, #5]
 8001e5a:	bd10      	pop	{r4, pc}
 8001e5c:	24009254 	.word	0x24009254

08001e60 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4c03      	ldr	r4, [pc, #12]	; (8001e70 <vRR_E+0x10>)
 8001e64:	4621      	mov	r1, r4
 8001e66:	7920      	ldrb	r0, [r4, #4]
 8001e68:	f001 fa0e 	bl	8003288 <ucGBFunctionRR>
 8001e6c:	7120      	strb	r0, [r4, #4]
 8001e6e:	bd10      	pop	{r4, pc}
 8001e70:	24009254 	.word	0x24009254

08001e74 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4c03      	ldr	r4, [pc, #12]	; (8001e84 <vRR_H+0x10>)
 8001e78:	4621      	mov	r1, r4
 8001e7a:	79e0      	ldrb	r0, [r4, #7]
 8001e7c:	f001 fa04 	bl	8003288 <ucGBFunctionRR>
 8001e80:	71e0      	strb	r0, [r4, #7]
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	24009254 	.word	0x24009254

08001e88 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4c03      	ldr	r4, [pc, #12]	; (8001e98 <vRR_L+0x10>)
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	79a0      	ldrb	r0, [r4, #6]
 8001e90:	f001 f9fa 	bl	8003288 <ucGBFunctionRR>
 8001e94:	71a0      	strb	r0, [r4, #6]
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	24009254 	.word	0x24009254

08001e9c <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4d07      	ldr	r5, [pc, #28]	; (8001ebc <vRR_HL+0x20>)
 8001ea0:	88ec      	ldrh	r4, [r5, #6]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f001 fb00 	bl	80034a8 <ucGBMemoryRead>
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f001 f9ed 	bl	8003288 <ucGBFunctionRR>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb6:	f001 baab 	b.w	8003410 <vGBMemoryWrite>
 8001eba:	bf00      	nop
 8001ebc:	24009254 	.word	0x24009254

08001ec0 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4c03      	ldr	r4, [pc, #12]	; (8001ed0 <vRR_A+0x10>)
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	7860      	ldrb	r0, [r4, #1]
 8001ec8:	f001 f9de 	bl	8003288 <ucGBFunctionRR>
 8001ecc:	7060      	strb	r0, [r4, #1]
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	24009254 	.word	0x24009254

08001ed4 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4c03      	ldr	r4, [pc, #12]	; (8001ee4 <vSLA_B+0x10>)
 8001ed8:	4621      	mov	r1, r4
 8001eda:	78e0      	ldrb	r0, [r4, #3]
 8001edc:	f001 f9f0 	bl	80032c0 <ucGBFunctionSLA>
 8001ee0:	70e0      	strb	r0, [r4, #3]
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	24009254 	.word	0x24009254

08001ee8 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4c03      	ldr	r4, [pc, #12]	; (8001ef8 <vSLA_C+0x10>)
 8001eec:	4621      	mov	r1, r4
 8001eee:	78a0      	ldrb	r0, [r4, #2]
 8001ef0:	f001 f9e6 	bl	80032c0 <ucGBFunctionSLA>
 8001ef4:	70a0      	strb	r0, [r4, #2]
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	24009254 	.word	0x24009254

08001efc <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4c03      	ldr	r4, [pc, #12]	; (8001f0c <vSLA_D+0x10>)
 8001f00:	4621      	mov	r1, r4
 8001f02:	7960      	ldrb	r0, [r4, #5]
 8001f04:	f001 f9dc 	bl	80032c0 <ucGBFunctionSLA>
 8001f08:	7160      	strb	r0, [r4, #5]
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	24009254 	.word	0x24009254

08001f10 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4c03      	ldr	r4, [pc, #12]	; (8001f20 <vSLA_E+0x10>)
 8001f14:	4621      	mov	r1, r4
 8001f16:	7920      	ldrb	r0, [r4, #4]
 8001f18:	f001 f9d2 	bl	80032c0 <ucGBFunctionSLA>
 8001f1c:	7120      	strb	r0, [r4, #4]
 8001f1e:	bd10      	pop	{r4, pc}
 8001f20:	24009254 	.word	0x24009254

08001f24 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4c03      	ldr	r4, [pc, #12]	; (8001f34 <vSLA_H+0x10>)
 8001f28:	4621      	mov	r1, r4
 8001f2a:	79e0      	ldrb	r0, [r4, #7]
 8001f2c:	f001 f9c8 	bl	80032c0 <ucGBFunctionSLA>
 8001f30:	71e0      	strb	r0, [r4, #7]
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	24009254 	.word	0x24009254

08001f38 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4c03      	ldr	r4, [pc, #12]	; (8001f48 <vSLA_L+0x10>)
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	79a0      	ldrb	r0, [r4, #6]
 8001f40:	f001 f9be 	bl	80032c0 <ucGBFunctionSLA>
 8001f44:	71a0      	strb	r0, [r4, #6]
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	24009254 	.word	0x24009254

08001f4c <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	4d07      	ldr	r5, [pc, #28]	; (8001f6c <vSLA_HL+0x20>)
 8001f50:	88ec      	ldrh	r4, [r5, #6]
 8001f52:	4620      	mov	r0, r4
 8001f54:	f001 faa8 	bl	80034a8 <ucGBMemoryRead>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f001 f9b1 	bl	80032c0 <ucGBFunctionSLA>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4620      	mov	r0, r4
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f001 ba53 	b.w	8003410 <vGBMemoryWrite>
 8001f6a:	bf00      	nop
 8001f6c:	24009254 	.word	0x24009254

08001f70 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4c03      	ldr	r4, [pc, #12]	; (8001f80 <vSLA_A+0x10>)
 8001f74:	4621      	mov	r1, r4
 8001f76:	7860      	ldrb	r0, [r4, #1]
 8001f78:	f001 f9a2 	bl	80032c0 <ucGBFunctionSLA>
 8001f7c:	7060      	strb	r0, [r4, #1]
 8001f7e:	bd10      	pop	{r4, pc}
 8001f80:	24009254 	.word	0x24009254

08001f84 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4c03      	ldr	r4, [pc, #12]	; (8001f94 <vSRA_B+0x10>)
 8001f88:	4621      	mov	r1, r4
 8001f8a:	78e0      	ldrb	r0, [r4, #3]
 8001f8c:	f001 f9b0 	bl	80032f0 <ucGBFunctionSRA>
 8001f90:	70e0      	strb	r0, [r4, #3]
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	24009254 	.word	0x24009254

08001f98 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4c03      	ldr	r4, [pc, #12]	; (8001fa8 <vSRA_C+0x10>)
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	78a0      	ldrb	r0, [r4, #2]
 8001fa0:	f001 f9a6 	bl	80032f0 <ucGBFunctionSRA>
 8001fa4:	70a0      	strb	r0, [r4, #2]
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	24009254 	.word	0x24009254

08001fac <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4c03      	ldr	r4, [pc, #12]	; (8001fbc <vSRA_D+0x10>)
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	7960      	ldrb	r0, [r4, #5]
 8001fb4:	f001 f99c 	bl	80032f0 <ucGBFunctionSRA>
 8001fb8:	7160      	strb	r0, [r4, #5]
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	24009254 	.word	0x24009254

08001fc0 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4c03      	ldr	r4, [pc, #12]	; (8001fd0 <vSRA_E+0x10>)
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	7920      	ldrb	r0, [r4, #4]
 8001fc8:	f001 f992 	bl	80032f0 <ucGBFunctionSRA>
 8001fcc:	7120      	strb	r0, [r4, #4]
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	24009254 	.word	0x24009254

08001fd4 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4c03      	ldr	r4, [pc, #12]	; (8001fe4 <vSRA_H+0x10>)
 8001fd8:	4621      	mov	r1, r4
 8001fda:	79e0      	ldrb	r0, [r4, #7]
 8001fdc:	f001 f988 	bl	80032f0 <ucGBFunctionSRA>
 8001fe0:	71e0      	strb	r0, [r4, #7]
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	24009254 	.word	0x24009254

08001fe8 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	4c03      	ldr	r4, [pc, #12]	; (8001ff8 <vSRA_L+0x10>)
 8001fec:	4621      	mov	r1, r4
 8001fee:	79a0      	ldrb	r0, [r4, #6]
 8001ff0:	f001 f97e 	bl	80032f0 <ucGBFunctionSRA>
 8001ff4:	71a0      	strb	r0, [r4, #6]
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	24009254 	.word	0x24009254

08001ffc <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	; (800201c <vSRA_HL+0x20>)
 8002000:	88ec      	ldrh	r4, [r5, #6]
 8002002:	4620      	mov	r0, r4
 8002004:	f001 fa50 	bl	80034a8 <ucGBMemoryRead>
 8002008:	4629      	mov	r1, r5
 800200a:	f001 f971 	bl	80032f0 <ucGBFunctionSRA>
 800200e:	4601      	mov	r1, r0
 8002010:	4620      	mov	r0, r4
 8002012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002016:	f001 b9fb 	b.w	8003410 <vGBMemoryWrite>
 800201a:	bf00      	nop
 800201c:	24009254 	.word	0x24009254

08002020 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 8002020:	b510      	push	{r4, lr}
 8002022:	4c03      	ldr	r4, [pc, #12]	; (8002030 <vSRA_A+0x10>)
 8002024:	4621      	mov	r1, r4
 8002026:	7860      	ldrb	r0, [r4, #1]
 8002028:	f001 f962 	bl	80032f0 <ucGBFunctionSRA>
 800202c:	7060      	strb	r0, [r4, #1]
 800202e:	bd10      	pop	{r4, pc}
 8002030:	24009254 	.word	0x24009254

08002034 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002034:	b510      	push	{r4, lr}
 8002036:	4c03      	ldr	r4, [pc, #12]	; (8002044 <vSWAP_B+0x10>)
 8002038:	4621      	mov	r1, r4
 800203a:	78e0      	ldrb	r0, [r4, #3]
 800203c:	f001 f972 	bl	8003324 <ucGBFunctionSWAP>
 8002040:	70e0      	strb	r0, [r4, #3]
 8002042:	bd10      	pop	{r4, pc}
 8002044:	24009254 	.word	0x24009254

08002048 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002048:	b510      	push	{r4, lr}
 800204a:	4c03      	ldr	r4, [pc, #12]	; (8002058 <vSWAP_C+0x10>)
 800204c:	4621      	mov	r1, r4
 800204e:	78a0      	ldrb	r0, [r4, #2]
 8002050:	f001 f968 	bl	8003324 <ucGBFunctionSWAP>
 8002054:	70a0      	strb	r0, [r4, #2]
 8002056:	bd10      	pop	{r4, pc}
 8002058:	24009254 	.word	0x24009254

0800205c <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 800205c:	b510      	push	{r4, lr}
 800205e:	4c03      	ldr	r4, [pc, #12]	; (800206c <vSWAP_D+0x10>)
 8002060:	4621      	mov	r1, r4
 8002062:	7960      	ldrb	r0, [r4, #5]
 8002064:	f001 f95e 	bl	8003324 <ucGBFunctionSWAP>
 8002068:	7160      	strb	r0, [r4, #5]
 800206a:	bd10      	pop	{r4, pc}
 800206c:	24009254 	.word	0x24009254

08002070 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002070:	b510      	push	{r4, lr}
 8002072:	4c03      	ldr	r4, [pc, #12]	; (8002080 <vSWAP_E+0x10>)
 8002074:	4621      	mov	r1, r4
 8002076:	7920      	ldrb	r0, [r4, #4]
 8002078:	f001 f954 	bl	8003324 <ucGBFunctionSWAP>
 800207c:	7120      	strb	r0, [r4, #4]
 800207e:	bd10      	pop	{r4, pc}
 8002080:	24009254 	.word	0x24009254

08002084 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 8002084:	b510      	push	{r4, lr}
 8002086:	4c03      	ldr	r4, [pc, #12]	; (8002094 <vSWAP_H+0x10>)
 8002088:	4621      	mov	r1, r4
 800208a:	79e0      	ldrb	r0, [r4, #7]
 800208c:	f001 f94a 	bl	8003324 <ucGBFunctionSWAP>
 8002090:	71e0      	strb	r0, [r4, #7]
 8002092:	bd10      	pop	{r4, pc}
 8002094:	24009254 	.word	0x24009254

08002098 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002098:	b510      	push	{r4, lr}
 800209a:	4c03      	ldr	r4, [pc, #12]	; (80020a8 <vSWAP_L+0x10>)
 800209c:	4621      	mov	r1, r4
 800209e:	79a0      	ldrb	r0, [r4, #6]
 80020a0:	f001 f940 	bl	8003324 <ucGBFunctionSWAP>
 80020a4:	71a0      	strb	r0, [r4, #6]
 80020a6:	bd10      	pop	{r4, pc}
 80020a8:	24009254 	.word	0x24009254

080020ac <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d07      	ldr	r5, [pc, #28]	; (80020cc <vSWAP_HL+0x20>)
 80020b0:	88ec      	ldrh	r4, [r5, #6]
 80020b2:	4620      	mov	r0, r4
 80020b4:	f001 f9f8 	bl	80034a8 <ucGBMemoryRead>
 80020b8:	4629      	mov	r1, r5
 80020ba:	f001 f933 	bl	8003324 <ucGBFunctionSWAP>
 80020be:	4601      	mov	r1, r0
 80020c0:	4620      	mov	r0, r4
 80020c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020c6:	f001 b9a3 	b.w	8003410 <vGBMemoryWrite>
 80020ca:	bf00      	nop
 80020cc:	24009254 	.word	0x24009254

080020d0 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4c03      	ldr	r4, [pc, #12]	; (80020e0 <vSWAP_A+0x10>)
 80020d4:	4621      	mov	r1, r4
 80020d6:	7860      	ldrb	r0, [r4, #1]
 80020d8:	f001 f924 	bl	8003324 <ucGBFunctionSWAP>
 80020dc:	7060      	strb	r0, [r4, #1]
 80020de:	bd10      	pop	{r4, pc}
 80020e0:	24009254 	.word	0x24009254

080020e4 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4c03      	ldr	r4, [pc, #12]	; (80020f4 <vSRL_B+0x10>)
 80020e8:	4621      	mov	r1, r4
 80020ea:	78e0      	ldrb	r0, [r4, #3]
 80020ec:	f001 f930 	bl	8003350 <ucGBFunctionSRL>
 80020f0:	70e0      	strb	r0, [r4, #3]
 80020f2:	bd10      	pop	{r4, pc}
 80020f4:	24009254 	.word	0x24009254

080020f8 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4c03      	ldr	r4, [pc, #12]	; (8002108 <vSRL_C+0x10>)
 80020fc:	4621      	mov	r1, r4
 80020fe:	78a0      	ldrb	r0, [r4, #2]
 8002100:	f001 f926 	bl	8003350 <ucGBFunctionSRL>
 8002104:	70a0      	strb	r0, [r4, #2]
 8002106:	bd10      	pop	{r4, pc}
 8002108:	24009254 	.word	0x24009254

0800210c <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 800210c:	b510      	push	{r4, lr}
 800210e:	4c03      	ldr	r4, [pc, #12]	; (800211c <vSRL_D+0x10>)
 8002110:	4621      	mov	r1, r4
 8002112:	7960      	ldrb	r0, [r4, #5]
 8002114:	f001 f91c 	bl	8003350 <ucGBFunctionSRL>
 8002118:	7160      	strb	r0, [r4, #5]
 800211a:	bd10      	pop	{r4, pc}
 800211c:	24009254 	.word	0x24009254

08002120 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 8002120:	b510      	push	{r4, lr}
 8002122:	4c03      	ldr	r4, [pc, #12]	; (8002130 <vSRL_E+0x10>)
 8002124:	4621      	mov	r1, r4
 8002126:	7920      	ldrb	r0, [r4, #4]
 8002128:	f001 f912 	bl	8003350 <ucGBFunctionSRL>
 800212c:	7120      	strb	r0, [r4, #4]
 800212e:	bd10      	pop	{r4, pc}
 8002130:	24009254 	.word	0x24009254

08002134 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002134:	b510      	push	{r4, lr}
 8002136:	4c03      	ldr	r4, [pc, #12]	; (8002144 <vSRL_H+0x10>)
 8002138:	4621      	mov	r1, r4
 800213a:	79e0      	ldrb	r0, [r4, #7]
 800213c:	f001 f908 	bl	8003350 <ucGBFunctionSRL>
 8002140:	71e0      	strb	r0, [r4, #7]
 8002142:	bd10      	pop	{r4, pc}
 8002144:	24009254 	.word	0x24009254

08002148 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002148:	b510      	push	{r4, lr}
 800214a:	4c03      	ldr	r4, [pc, #12]	; (8002158 <vSRL_L+0x10>)
 800214c:	4621      	mov	r1, r4
 800214e:	79a0      	ldrb	r0, [r4, #6]
 8002150:	f001 f8fe 	bl	8003350 <ucGBFunctionSRL>
 8002154:	71a0      	strb	r0, [r4, #6]
 8002156:	bd10      	pop	{r4, pc}
 8002158:	24009254 	.word	0x24009254

0800215c <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4d07      	ldr	r5, [pc, #28]	; (800217c <vSRL_HL+0x20>)
 8002160:	88ec      	ldrh	r4, [r5, #6]
 8002162:	4620      	mov	r0, r4
 8002164:	f001 f9a0 	bl	80034a8 <ucGBMemoryRead>
 8002168:	4629      	mov	r1, r5
 800216a:	f001 f8f1 	bl	8003350 <ucGBFunctionSRL>
 800216e:	4601      	mov	r1, r0
 8002170:	4620      	mov	r0, r4
 8002172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002176:	f001 b94b 	b.w	8003410 <vGBMemoryWrite>
 800217a:	bf00      	nop
 800217c:	24009254 	.word	0x24009254

08002180 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002180:	b510      	push	{r4, lr}
 8002182:	4c03      	ldr	r4, [pc, #12]	; (8002190 <vSRL_A+0x10>)
 8002184:	4621      	mov	r1, r4
 8002186:	7860      	ldrb	r0, [r4, #1]
 8002188:	f001 f8e2 	bl	8003350 <ucGBFunctionSRL>
 800218c:	7060      	strb	r0, [r4, #1]
 800218e:	bd10      	pop	{r4, pc}
 8002190:	24009254 	.word	0x24009254

08002194 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <vBIT_0_B+0xc>)
 8002196:	2100      	movs	r1, #0
 8002198:	78d0      	ldrb	r0, [r2, #3]
 800219a:	f001 b8ed 	b.w	8003378 <vGBFunctionBIT>
 800219e:	bf00      	nop
 80021a0:	24009254 	.word	0x24009254

080021a4 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021a4:	4a02      	ldr	r2, [pc, #8]	; (80021b0 <vBIT_0_C+0xc>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	7890      	ldrb	r0, [r2, #2]
 80021aa:	f001 b8e5 	b.w	8003378 <vGBFunctionBIT>
 80021ae:	bf00      	nop
 80021b0:	24009254 	.word	0x24009254

080021b4 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021b4:	4a02      	ldr	r2, [pc, #8]	; (80021c0 <vBIT_0_D+0xc>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	7950      	ldrb	r0, [r2, #5]
 80021ba:	f001 b8dd 	b.w	8003378 <vGBFunctionBIT>
 80021be:	bf00      	nop
 80021c0:	24009254 	.word	0x24009254

080021c4 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021c4:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <vBIT_0_E+0xc>)
 80021c6:	2100      	movs	r1, #0
 80021c8:	7910      	ldrb	r0, [r2, #4]
 80021ca:	f001 b8d5 	b.w	8003378 <vGBFunctionBIT>
 80021ce:	bf00      	nop
 80021d0:	24009254 	.word	0x24009254

080021d4 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <vBIT_0_H+0xc>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	79d0      	ldrb	r0, [r2, #7]
 80021da:	f001 b8cd 	b.w	8003378 <vGBFunctionBIT>
 80021de:	bf00      	nop
 80021e0:	24009254 	.word	0x24009254

080021e4 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80021e4:	4a02      	ldr	r2, [pc, #8]	; (80021f0 <vBIT_0_L+0xc>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	7990      	ldrb	r0, [r2, #6]
 80021ea:	f001 b8c5 	b.w	8003378 <vGBFunctionBIT>
 80021ee:	bf00      	nop
 80021f0:	24009254 	.word	0x24009254

080021f4 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4c05      	ldr	r4, [pc, #20]	; (800220c <vBIT_0_HL+0x18>)
 80021f8:	88e0      	ldrh	r0, [r4, #6]
 80021fa:	f001 f955 	bl	80034a8 <ucGBMemoryRead>
 80021fe:	4622      	mov	r2, r4
 8002200:	2100      	movs	r1, #0
 8002202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002206:	f001 b8b7 	b.w	8003378 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	24009254 	.word	0x24009254

08002210 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002210:	4a02      	ldr	r2, [pc, #8]	; (800221c <vBIT_0_A+0xc>)
 8002212:	2101      	movs	r1, #1
 8002214:	7850      	ldrb	r0, [r2, #1]
 8002216:	f001 b8af 	b.w	8003378 <vGBFunctionBIT>
 800221a:	bf00      	nop
 800221c:	24009254 	.word	0x24009254

08002220 <vBIT_1_A>:
 8002220:	f7ff bff6 	b.w	8002210 <vBIT_0_A>

08002224 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <vBIT_1_B+0xc>)
 8002226:	2101      	movs	r1, #1
 8002228:	78d0      	ldrb	r0, [r2, #3]
 800222a:	f001 b8a5 	b.w	8003378 <vGBFunctionBIT>
 800222e:	bf00      	nop
 8002230:	24009254 	.word	0x24009254

08002234 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <vBIT_1_C+0xc>)
 8002236:	2101      	movs	r1, #1
 8002238:	7890      	ldrb	r0, [r2, #2]
 800223a:	f001 b89d 	b.w	8003378 <vGBFunctionBIT>
 800223e:	bf00      	nop
 8002240:	24009254 	.word	0x24009254

08002244 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 8002244:	4a02      	ldr	r2, [pc, #8]	; (8002250 <vBIT_1_D+0xc>)
 8002246:	2101      	movs	r1, #1
 8002248:	7950      	ldrb	r0, [r2, #5]
 800224a:	f001 b895 	b.w	8003378 <vGBFunctionBIT>
 800224e:	bf00      	nop
 8002250:	24009254 	.word	0x24009254

08002254 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <vBIT_1_E+0xc>)
 8002256:	2101      	movs	r1, #1
 8002258:	7910      	ldrb	r0, [r2, #4]
 800225a:	f001 b88d 	b.w	8003378 <vGBFunctionBIT>
 800225e:	bf00      	nop
 8002260:	24009254 	.word	0x24009254

08002264 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 8002264:	4a02      	ldr	r2, [pc, #8]	; (8002270 <vBIT_1_H+0xc>)
 8002266:	2101      	movs	r1, #1
 8002268:	79d0      	ldrb	r0, [r2, #7]
 800226a:	f001 b885 	b.w	8003378 <vGBFunctionBIT>
 800226e:	bf00      	nop
 8002270:	24009254 	.word	0x24009254

08002274 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002274:	4a02      	ldr	r2, [pc, #8]	; (8002280 <vBIT_1_L+0xc>)
 8002276:	2101      	movs	r1, #1
 8002278:	7990      	ldrb	r0, [r2, #6]
 800227a:	f001 b87d 	b.w	8003378 <vGBFunctionBIT>
 800227e:	bf00      	nop
 8002280:	24009254 	.word	0x24009254

08002284 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002284:	b510      	push	{r4, lr}
 8002286:	4c05      	ldr	r4, [pc, #20]	; (800229c <vBIT_1_HL+0x18>)
 8002288:	88e0      	ldrh	r0, [r4, #6]
 800228a:	f001 f90d 	bl	80034a8 <ucGBMemoryRead>
 800228e:	4622      	mov	r2, r4
 8002290:	2101      	movs	r1, #1
 8002292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002296:	f001 b86f 	b.w	8003378 <vGBFunctionBIT>
 800229a:	bf00      	nop
 800229c:	24009254 	.word	0x24009254

080022a0 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <vBIT_2_B+0xc>)
 80022a2:	2102      	movs	r1, #2
 80022a4:	78d0      	ldrb	r0, [r2, #3]
 80022a6:	f001 b867 	b.w	8003378 <vGBFunctionBIT>
 80022aa:	bf00      	nop
 80022ac:	24009254 	.word	0x24009254

080022b0 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <vBIT_2_C+0xc>)
 80022b2:	2102      	movs	r1, #2
 80022b4:	7890      	ldrb	r0, [r2, #2]
 80022b6:	f001 b85f 	b.w	8003378 <vGBFunctionBIT>
 80022ba:	bf00      	nop
 80022bc:	24009254 	.word	0x24009254

080022c0 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <vBIT_2_D+0xc>)
 80022c2:	2102      	movs	r1, #2
 80022c4:	7950      	ldrb	r0, [r2, #5]
 80022c6:	f001 b857 	b.w	8003378 <vGBFunctionBIT>
 80022ca:	bf00      	nop
 80022cc:	24009254 	.word	0x24009254

080022d0 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022d0:	4a02      	ldr	r2, [pc, #8]	; (80022dc <vBIT_2_E+0xc>)
 80022d2:	2102      	movs	r1, #2
 80022d4:	7910      	ldrb	r0, [r2, #4]
 80022d6:	f001 b84f 	b.w	8003378 <vGBFunctionBIT>
 80022da:	bf00      	nop
 80022dc:	24009254 	.word	0x24009254

080022e0 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <vBIT_2_H+0xc>)
 80022e2:	2102      	movs	r1, #2
 80022e4:	79d0      	ldrb	r0, [r2, #7]
 80022e6:	f001 b847 	b.w	8003378 <vGBFunctionBIT>
 80022ea:	bf00      	nop
 80022ec:	24009254 	.word	0x24009254

080022f0 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80022f0:	4a02      	ldr	r2, [pc, #8]	; (80022fc <vBIT_2_L+0xc>)
 80022f2:	2102      	movs	r1, #2
 80022f4:	7990      	ldrb	r0, [r2, #6]
 80022f6:	f001 b83f 	b.w	8003378 <vGBFunctionBIT>
 80022fa:	bf00      	nop
 80022fc:	24009254 	.word	0x24009254

08002300 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002300:	b510      	push	{r4, lr}
 8002302:	4c05      	ldr	r4, [pc, #20]	; (8002318 <vBIT_2_HL+0x18>)
 8002304:	88e0      	ldrh	r0, [r4, #6]
 8002306:	f001 f8cf 	bl	80034a8 <ucGBMemoryRead>
 800230a:	4622      	mov	r2, r4
 800230c:	2102      	movs	r1, #2
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002312:	f001 b831 	b.w	8003378 <vGBFunctionBIT>
 8002316:	bf00      	nop
 8002318:	24009254 	.word	0x24009254

0800231c <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 800231c:	4a02      	ldr	r2, [pc, #8]	; (8002328 <vBIT_2_A+0xc>)
 800231e:	2102      	movs	r1, #2
 8002320:	7850      	ldrb	r0, [r2, #1]
 8002322:	f001 b829 	b.w	8003378 <vGBFunctionBIT>
 8002326:	bf00      	nop
 8002328:	24009254 	.word	0x24009254

0800232c <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 800232c:	4a02      	ldr	r2, [pc, #8]	; (8002338 <vBIT_3_B+0xc>)
 800232e:	2103      	movs	r1, #3
 8002330:	78d0      	ldrb	r0, [r2, #3]
 8002332:	f001 b821 	b.w	8003378 <vGBFunctionBIT>
 8002336:	bf00      	nop
 8002338:	24009254 	.word	0x24009254

0800233c <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 800233c:	4a02      	ldr	r2, [pc, #8]	; (8002348 <vBIT_3_C+0xc>)
 800233e:	2103      	movs	r1, #3
 8002340:	7890      	ldrb	r0, [r2, #2]
 8002342:	f001 b819 	b.w	8003378 <vGBFunctionBIT>
 8002346:	bf00      	nop
 8002348:	24009254 	.word	0x24009254

0800234c <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 800234c:	4a02      	ldr	r2, [pc, #8]	; (8002358 <vBIT_3_D+0xc>)
 800234e:	2103      	movs	r1, #3
 8002350:	7950      	ldrb	r0, [r2, #5]
 8002352:	f001 b811 	b.w	8003378 <vGBFunctionBIT>
 8002356:	bf00      	nop
 8002358:	24009254 	.word	0x24009254

0800235c <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <vBIT_3_E+0xc>)
 800235e:	2103      	movs	r1, #3
 8002360:	7910      	ldrb	r0, [r2, #4]
 8002362:	f001 b809 	b.w	8003378 <vGBFunctionBIT>
 8002366:	bf00      	nop
 8002368:	24009254 	.word	0x24009254

0800236c <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <vBIT_3_H+0xc>)
 800236e:	2103      	movs	r1, #3
 8002370:	79d0      	ldrb	r0, [r2, #7]
 8002372:	f001 b801 	b.w	8003378 <vGBFunctionBIT>
 8002376:	bf00      	nop
 8002378:	24009254 	.word	0x24009254

0800237c <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 800237c:	4a02      	ldr	r2, [pc, #8]	; (8002388 <vBIT_3_L+0xc>)
 800237e:	2103      	movs	r1, #3
 8002380:	7990      	ldrb	r0, [r2, #6]
 8002382:	f000 bff9 	b.w	8003378 <vGBFunctionBIT>
 8002386:	bf00      	nop
 8002388:	24009254 	.word	0x24009254

0800238c <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 800238c:	b510      	push	{r4, lr}
 800238e:	4c05      	ldr	r4, [pc, #20]	; (80023a4 <vBIT_3_HL+0x18>)
 8002390:	88e0      	ldrh	r0, [r4, #6]
 8002392:	f001 f889 	bl	80034a8 <ucGBMemoryRead>
 8002396:	4622      	mov	r2, r4
 8002398:	2103      	movs	r1, #3
 800239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239e:	f000 bfeb 	b.w	8003378 <vGBFunctionBIT>
 80023a2:	bf00      	nop
 80023a4:	24009254 	.word	0x24009254

080023a8 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023a8:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <vBIT_3_A+0xc>)
 80023aa:	2103      	movs	r1, #3
 80023ac:	7850      	ldrb	r0, [r2, #1]
 80023ae:	f000 bfe3 	b.w	8003378 <vGBFunctionBIT>
 80023b2:	bf00      	nop
 80023b4:	24009254 	.word	0x24009254

080023b8 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <vBIT_4_B+0xc>)
 80023ba:	2104      	movs	r1, #4
 80023bc:	78d0      	ldrb	r0, [r2, #3]
 80023be:	f000 bfdb 	b.w	8003378 <vGBFunctionBIT>
 80023c2:	bf00      	nop
 80023c4:	24009254 	.word	0x24009254

080023c8 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <vBIT_4_C+0xc>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	7890      	ldrb	r0, [r2, #2]
 80023ce:	f000 bfd3 	b.w	8003378 <vGBFunctionBIT>
 80023d2:	bf00      	nop
 80023d4:	24009254 	.word	0x24009254

080023d8 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80023d8:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <vBIT_4_D+0xc>)
 80023da:	2104      	movs	r1, #4
 80023dc:	7950      	ldrb	r0, [r2, #5]
 80023de:	f000 bfcb 	b.w	8003378 <vGBFunctionBIT>
 80023e2:	bf00      	nop
 80023e4:	24009254 	.word	0x24009254

080023e8 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80023e8:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <vBIT_4_E+0xc>)
 80023ea:	2104      	movs	r1, #4
 80023ec:	7910      	ldrb	r0, [r2, #4]
 80023ee:	f000 bfc3 	b.w	8003378 <vGBFunctionBIT>
 80023f2:	bf00      	nop
 80023f4:	24009254 	.word	0x24009254

080023f8 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80023f8:	4a02      	ldr	r2, [pc, #8]	; (8002404 <vBIT_4_H+0xc>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	79d0      	ldrb	r0, [r2, #7]
 80023fe:	f000 bfbb 	b.w	8003378 <vGBFunctionBIT>
 8002402:	bf00      	nop
 8002404:	24009254 	.word	0x24009254

08002408 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <vBIT_4_L+0xc>)
 800240a:	2104      	movs	r1, #4
 800240c:	7990      	ldrb	r0, [r2, #6]
 800240e:	f000 bfb3 	b.w	8003378 <vGBFunctionBIT>
 8002412:	bf00      	nop
 8002414:	24009254 	.word	0x24009254

08002418 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002418:	b510      	push	{r4, lr}
 800241a:	4c05      	ldr	r4, [pc, #20]	; (8002430 <vBIT_4_HL+0x18>)
 800241c:	88e0      	ldrh	r0, [r4, #6]
 800241e:	f001 f843 	bl	80034a8 <ucGBMemoryRead>
 8002422:	4622      	mov	r2, r4
 8002424:	2104      	movs	r1, #4
 8002426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242a:	f000 bfa5 	b.w	8003378 <vGBFunctionBIT>
 800242e:	bf00      	nop
 8002430:	24009254 	.word	0x24009254

08002434 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <vBIT_4_A+0xc>)
 8002436:	2104      	movs	r1, #4
 8002438:	7850      	ldrb	r0, [r2, #1]
 800243a:	f000 bf9d 	b.w	8003378 <vGBFunctionBIT>
 800243e:	bf00      	nop
 8002440:	24009254 	.word	0x24009254

08002444 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 8002444:	4a02      	ldr	r2, [pc, #8]	; (8002450 <vBIT_5_B+0xc>)
 8002446:	2105      	movs	r1, #5
 8002448:	78d0      	ldrb	r0, [r2, #3]
 800244a:	f000 bf95 	b.w	8003378 <vGBFunctionBIT>
 800244e:	bf00      	nop
 8002450:	24009254 	.word	0x24009254

08002454 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <vBIT_5_C+0xc>)
 8002456:	2105      	movs	r1, #5
 8002458:	7890      	ldrb	r0, [r2, #2]
 800245a:	f000 bf8d 	b.w	8003378 <vGBFunctionBIT>
 800245e:	bf00      	nop
 8002460:	24009254 	.word	0x24009254

08002464 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002464:	4a02      	ldr	r2, [pc, #8]	; (8002470 <vBIT_5_D+0xc>)
 8002466:	2105      	movs	r1, #5
 8002468:	7950      	ldrb	r0, [r2, #5]
 800246a:	f000 bf85 	b.w	8003378 <vGBFunctionBIT>
 800246e:	bf00      	nop
 8002470:	24009254 	.word	0x24009254

08002474 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002474:	4a02      	ldr	r2, [pc, #8]	; (8002480 <vBIT_5_E+0xc>)
 8002476:	2105      	movs	r1, #5
 8002478:	7910      	ldrb	r0, [r2, #4]
 800247a:	f000 bf7d 	b.w	8003378 <vGBFunctionBIT>
 800247e:	bf00      	nop
 8002480:	24009254 	.word	0x24009254

08002484 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <vBIT_5_H+0xc>)
 8002486:	2105      	movs	r1, #5
 8002488:	79d0      	ldrb	r0, [r2, #7]
 800248a:	f000 bf75 	b.w	8003378 <vGBFunctionBIT>
 800248e:	bf00      	nop
 8002490:	24009254 	.word	0x24009254

08002494 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <vBIT_5_L+0xc>)
 8002496:	2105      	movs	r1, #5
 8002498:	7990      	ldrb	r0, [r2, #6]
 800249a:	f000 bf6d 	b.w	8003378 <vGBFunctionBIT>
 800249e:	bf00      	nop
 80024a0:	24009254 	.word	0x24009254

080024a4 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4c05      	ldr	r4, [pc, #20]	; (80024bc <vBIT_5_HL+0x18>)
 80024a8:	88e0      	ldrh	r0, [r4, #6]
 80024aa:	f000 fffd 	bl	80034a8 <ucGBMemoryRead>
 80024ae:	4622      	mov	r2, r4
 80024b0:	2105      	movs	r1, #5
 80024b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b6:	f000 bf5f 	b.w	8003378 <vGBFunctionBIT>
 80024ba:	bf00      	nop
 80024bc:	24009254 	.word	0x24009254

080024c0 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <vBIT_5_A+0xc>)
 80024c2:	2105      	movs	r1, #5
 80024c4:	7850      	ldrb	r0, [r2, #1]
 80024c6:	f000 bf57 	b.w	8003378 <vGBFunctionBIT>
 80024ca:	bf00      	nop
 80024cc:	24009254 	.word	0x24009254

080024d0 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024d0:	4a02      	ldr	r2, [pc, #8]	; (80024dc <vBIT_6_B+0xc>)
 80024d2:	2106      	movs	r1, #6
 80024d4:	78d0      	ldrb	r0, [r2, #3]
 80024d6:	f000 bf4f 	b.w	8003378 <vGBFunctionBIT>
 80024da:	bf00      	nop
 80024dc:	24009254 	.word	0x24009254

080024e0 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80024e0:	4a02      	ldr	r2, [pc, #8]	; (80024ec <vBIT_6_C+0xc>)
 80024e2:	2106      	movs	r1, #6
 80024e4:	7890      	ldrb	r0, [r2, #2]
 80024e6:	f000 bf47 	b.w	8003378 <vGBFunctionBIT>
 80024ea:	bf00      	nop
 80024ec:	24009254 	.word	0x24009254

080024f0 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <vBIT_6_D+0xc>)
 80024f2:	2106      	movs	r1, #6
 80024f4:	7950      	ldrb	r0, [r2, #5]
 80024f6:	f000 bf3f 	b.w	8003378 <vGBFunctionBIT>
 80024fa:	bf00      	nop
 80024fc:	24009254 	.word	0x24009254

08002500 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002500:	4a02      	ldr	r2, [pc, #8]	; (800250c <vBIT_6_E+0xc>)
 8002502:	2106      	movs	r1, #6
 8002504:	7910      	ldrb	r0, [r2, #4]
 8002506:	f000 bf37 	b.w	8003378 <vGBFunctionBIT>
 800250a:	bf00      	nop
 800250c:	24009254 	.word	0x24009254

08002510 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002510:	4a02      	ldr	r2, [pc, #8]	; (800251c <vBIT_6_H+0xc>)
 8002512:	2106      	movs	r1, #6
 8002514:	79d0      	ldrb	r0, [r2, #7]
 8002516:	f000 bf2f 	b.w	8003378 <vGBFunctionBIT>
 800251a:	bf00      	nop
 800251c:	24009254 	.word	0x24009254

08002520 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <vBIT_6_L+0xc>)
 8002522:	2106      	movs	r1, #6
 8002524:	7990      	ldrb	r0, [r2, #6]
 8002526:	f000 bf27 	b.w	8003378 <vGBFunctionBIT>
 800252a:	bf00      	nop
 800252c:	24009254 	.word	0x24009254

08002530 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002530:	b510      	push	{r4, lr}
 8002532:	4c05      	ldr	r4, [pc, #20]	; (8002548 <vBIT_6_HL+0x18>)
 8002534:	88e0      	ldrh	r0, [r4, #6]
 8002536:	f000 ffb7 	bl	80034a8 <ucGBMemoryRead>
 800253a:	4622      	mov	r2, r4
 800253c:	2106      	movs	r1, #6
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002542:	f000 bf19 	b.w	8003378 <vGBFunctionBIT>
 8002546:	bf00      	nop
 8002548:	24009254 	.word	0x24009254

0800254c <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <vBIT_6_A+0xc>)
 800254e:	2106      	movs	r1, #6
 8002550:	7850      	ldrb	r0, [r2, #1]
 8002552:	f000 bf11 	b.w	8003378 <vGBFunctionBIT>
 8002556:	bf00      	nop
 8002558:	24009254 	.word	0x24009254

0800255c <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 800255c:	4a02      	ldr	r2, [pc, #8]	; (8002568 <vBIT_7_B+0xc>)
 800255e:	2107      	movs	r1, #7
 8002560:	78d0      	ldrb	r0, [r2, #3]
 8002562:	f000 bf09 	b.w	8003378 <vGBFunctionBIT>
 8002566:	bf00      	nop
 8002568:	24009254 	.word	0x24009254

0800256c <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <vBIT_7_C+0xc>)
 800256e:	2107      	movs	r1, #7
 8002570:	7890      	ldrb	r0, [r2, #2]
 8002572:	f000 bf01 	b.w	8003378 <vGBFunctionBIT>
 8002576:	bf00      	nop
 8002578:	24009254 	.word	0x24009254

0800257c <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <vBIT_7_D+0xc>)
 800257e:	2107      	movs	r1, #7
 8002580:	7950      	ldrb	r0, [r2, #5]
 8002582:	f000 bef9 	b.w	8003378 <vGBFunctionBIT>
 8002586:	bf00      	nop
 8002588:	24009254 	.word	0x24009254

0800258c <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <vBIT_7_E+0xc>)
 800258e:	2107      	movs	r1, #7
 8002590:	7910      	ldrb	r0, [r2, #4]
 8002592:	f000 bef1 	b.w	8003378 <vGBFunctionBIT>
 8002596:	bf00      	nop
 8002598:	24009254 	.word	0x24009254

0800259c <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <vBIT_7_H+0xc>)
 800259e:	2107      	movs	r1, #7
 80025a0:	79d0      	ldrb	r0, [r2, #7]
 80025a2:	f000 bee9 	b.w	8003378 <vGBFunctionBIT>
 80025a6:	bf00      	nop
 80025a8:	24009254 	.word	0x24009254

080025ac <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <vBIT_7_L+0xc>)
 80025ae:	2107      	movs	r1, #7
 80025b0:	7990      	ldrb	r0, [r2, #6]
 80025b2:	f000 bee1 	b.w	8003378 <vGBFunctionBIT>
 80025b6:	bf00      	nop
 80025b8:	24009254 	.word	0x24009254

080025bc <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025bc:	b510      	push	{r4, lr}
 80025be:	4c05      	ldr	r4, [pc, #20]	; (80025d4 <vBIT_7_HL+0x18>)
 80025c0:	88e0      	ldrh	r0, [r4, #6]
 80025c2:	f000 ff71 	bl	80034a8 <ucGBMemoryRead>
 80025c6:	4622      	mov	r2, r4
 80025c8:	2107      	movs	r1, #7
 80025ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ce:	f000 bed3 	b.w	8003378 <vGBFunctionBIT>
 80025d2:	bf00      	nop
 80025d4:	24009254 	.word	0x24009254

080025d8 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <vBIT_7_A+0xc>)
 80025da:	2107      	movs	r1, #7
 80025dc:	7850      	ldrb	r0, [r2, #1]
 80025de:	f000 becb 	b.w	8003378 <vGBFunctionBIT>
 80025e2:	bf00      	nop
 80025e4:	24009254 	.word	0x24009254

080025e8 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <vRES_0_HL+0x1c>)
 80025ea:	2100      	movs	r1, #0
 80025ec:	b510      	push	{r4, lr}
 80025ee:	88dc      	ldrh	r4, [r3, #6]
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fed9 	bl	80033a8 <ucGBFunctionRESHL>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4620      	mov	r0, r4
 80025fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025fe:	f000 bf07 	b.w	8003410 <vGBMemoryWrite>
 8002602:	bf00      	nop
 8002604:	24009254 	.word	0x24009254

08002608 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <vRES_1_HL+0x1c>)
 800260a:	2101      	movs	r1, #1
 800260c:	b510      	push	{r4, lr}
 800260e:	88dc      	ldrh	r4, [r3, #6]
 8002610:	4620      	mov	r0, r4
 8002612:	f000 fec9 	bl	80033a8 <ucGBFunctionRESHL>
 8002616:	4601      	mov	r1, r0
 8002618:	4620      	mov	r0, r4
 800261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261e:	f000 bef7 	b.w	8003410 <vGBMemoryWrite>
 8002622:	bf00      	nop
 8002624:	24009254 	.word	0x24009254

08002628 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <vRES_2_HL+0x1c>)
 800262a:	2102      	movs	r1, #2
 800262c:	b510      	push	{r4, lr}
 800262e:	88dc      	ldrh	r4, [r3, #6]
 8002630:	4620      	mov	r0, r4
 8002632:	f000 feb9 	bl	80033a8 <ucGBFunctionRESHL>
 8002636:	4601      	mov	r1, r0
 8002638:	4620      	mov	r0, r4
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263e:	f000 bee7 	b.w	8003410 <vGBMemoryWrite>
 8002642:	bf00      	nop
 8002644:	24009254 	.word	0x24009254

08002648 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <vRES_3_HL+0x1c>)
 800264a:	2103      	movs	r1, #3
 800264c:	b510      	push	{r4, lr}
 800264e:	88dc      	ldrh	r4, [r3, #6]
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fea9 	bl	80033a8 <ucGBFunctionRESHL>
 8002656:	4601      	mov	r1, r0
 8002658:	4620      	mov	r0, r4
 800265a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265e:	f000 bed7 	b.w	8003410 <vGBMemoryWrite>
 8002662:	bf00      	nop
 8002664:	24009254 	.word	0x24009254

08002668 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <vRES_4_HL+0x1c>)
 800266a:	2104      	movs	r1, #4
 800266c:	b510      	push	{r4, lr}
 800266e:	88dc      	ldrh	r4, [r3, #6]
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fe99 	bl	80033a8 <ucGBFunctionRESHL>
 8002676:	4601      	mov	r1, r0
 8002678:	4620      	mov	r0, r4
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	f000 bec7 	b.w	8003410 <vGBMemoryWrite>
 8002682:	bf00      	nop
 8002684:	24009254 	.word	0x24009254

08002688 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <vRES_5_HL+0x1c>)
 800268a:	2105      	movs	r1, #5
 800268c:	b510      	push	{r4, lr}
 800268e:	88dc      	ldrh	r4, [r3, #6]
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fe89 	bl	80033a8 <ucGBFunctionRESHL>
 8002696:	4601      	mov	r1, r0
 8002698:	4620      	mov	r0, r4
 800269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800269e:	f000 beb7 	b.w	8003410 <vGBMemoryWrite>
 80026a2:	bf00      	nop
 80026a4:	24009254 	.word	0x24009254

080026a8 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <vRES_6_HL+0x1c>)
 80026aa:	2106      	movs	r1, #6
 80026ac:	b510      	push	{r4, lr}
 80026ae:	88dc      	ldrh	r4, [r3, #6]
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fe79 	bl	80033a8 <ucGBFunctionRESHL>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4620      	mov	r0, r4
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026be:	f000 bea7 	b.w	8003410 <vGBMemoryWrite>
 80026c2:	bf00      	nop
 80026c4:	24009254 	.word	0x24009254

080026c8 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <vRES_7_HL+0x1c>)
 80026ca:	2107      	movs	r1, #7
 80026cc:	b510      	push	{r4, lr}
 80026ce:	88dc      	ldrh	r4, [r3, #6]
 80026d0:	4620      	mov	r0, r4
 80026d2:	f000 fe69 	bl	80033a8 <ucGBFunctionRESHL>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4620      	mov	r0, r4
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026de:	f000 be97 	b.w	8003410 <vGBMemoryWrite>
 80026e2:	bf00      	nop
 80026e4:	24009254 	.word	0x24009254

080026e8 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <vSET_0_HL+0x1c>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	b510      	push	{r4, lr}
 80026ee:	88dc      	ldrh	r4, [r3, #6]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 fe65 	bl	80033c0 <ucGBFunctionSETHL>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4620      	mov	r0, r4
 80026fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fe:	f000 be87 	b.w	8003410 <vGBMemoryWrite>
 8002702:	bf00      	nop
 8002704:	24009254 	.word	0x24009254

08002708 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <vSET_1_HL+0x1c>)
 800270a:	2101      	movs	r1, #1
 800270c:	b510      	push	{r4, lr}
 800270e:	88dc      	ldrh	r4, [r3, #6]
 8002710:	4620      	mov	r0, r4
 8002712:	f000 fe55 	bl	80033c0 <ucGBFunctionSETHL>
 8002716:	4601      	mov	r1, r0
 8002718:	4620      	mov	r0, r4
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271e:	f000 be77 	b.w	8003410 <vGBMemoryWrite>
 8002722:	bf00      	nop
 8002724:	24009254 	.word	0x24009254

08002728 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <vSET_2_HL+0x1c>)
 800272a:	2102      	movs	r1, #2
 800272c:	b510      	push	{r4, lr}
 800272e:	88dc      	ldrh	r4, [r3, #6]
 8002730:	4620      	mov	r0, r4
 8002732:	f000 fe45 	bl	80033c0 <ucGBFunctionSETHL>
 8002736:	4601      	mov	r1, r0
 8002738:	4620      	mov	r0, r4
 800273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273e:	f000 be67 	b.w	8003410 <vGBMemoryWrite>
 8002742:	bf00      	nop
 8002744:	24009254 	.word	0x24009254

08002748 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <vSET_3_HL+0x1c>)
 800274a:	2103      	movs	r1, #3
 800274c:	b510      	push	{r4, lr}
 800274e:	88dc      	ldrh	r4, [r3, #6]
 8002750:	4620      	mov	r0, r4
 8002752:	f000 fe35 	bl	80033c0 <ucGBFunctionSETHL>
 8002756:	4601      	mov	r1, r0
 8002758:	4620      	mov	r0, r4
 800275a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275e:	f000 be57 	b.w	8003410 <vGBMemoryWrite>
 8002762:	bf00      	nop
 8002764:	24009254 	.word	0x24009254

08002768 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <vSET_4_HL+0x1c>)
 800276a:	2104      	movs	r1, #4
 800276c:	b510      	push	{r4, lr}
 800276e:	88dc      	ldrh	r4, [r3, #6]
 8002770:	4620      	mov	r0, r4
 8002772:	f000 fe25 	bl	80033c0 <ucGBFunctionSETHL>
 8002776:	4601      	mov	r1, r0
 8002778:	4620      	mov	r0, r4
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277e:	f000 be47 	b.w	8003410 <vGBMemoryWrite>
 8002782:	bf00      	nop
 8002784:	24009254 	.word	0x24009254

08002788 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <vSET_5_HL+0x1c>)
 800278a:	2105      	movs	r1, #5
 800278c:	b510      	push	{r4, lr}
 800278e:	88dc      	ldrh	r4, [r3, #6]
 8002790:	4620      	mov	r0, r4
 8002792:	f000 fe15 	bl	80033c0 <ucGBFunctionSETHL>
 8002796:	4601      	mov	r1, r0
 8002798:	4620      	mov	r0, r4
 800279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279e:	f000 be37 	b.w	8003410 <vGBMemoryWrite>
 80027a2:	bf00      	nop
 80027a4:	24009254 	.word	0x24009254

080027a8 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <vSET_6_HL+0x1c>)
 80027aa:	2106      	movs	r1, #6
 80027ac:	b510      	push	{r4, lr}
 80027ae:	88dc      	ldrh	r4, [r3, #6]
 80027b0:	4620      	mov	r0, r4
 80027b2:	f000 fe05 	bl	80033c0 <ucGBFunctionSETHL>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027be:	f000 be27 	b.w	8003410 <vGBMemoryWrite>
 80027c2:	bf00      	nop
 80027c4:	24009254 	.word	0x24009254

080027c8 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <vSET_7_HL+0x1c>)
 80027ca:	2107      	movs	r1, #7
 80027cc:	b510      	push	{r4, lr}
 80027ce:	88dc      	ldrh	r4, [r3, #6]
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 fdf5 	bl	80033c0 <ucGBFunctionSETHL>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4620      	mov	r0, r4
 80027da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027de:	f000 be17 	b.w	8003410 <vGBMemoryWrite>
 80027e2:	bf00      	nop
 80027e4:	24009254 	.word	0x24009254

080027e8 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <vCCF+0x38>)
 80027ec:	2106      	movs	r1, #6
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f9ba 	bl	8002b68 <resetbit>
 80027f4:	4620      	mov	r0, r4
 80027f6:	2105      	movs	r1, #5
 80027f8:	f000 f9b6 	bl	8002b68 <resetbit>
 80027fc:	7820      	ldrb	r0, [r4, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	f000 f9ba 	bl	8002b78 <checkbit>
 8002804:	b128      	cbz	r0, 8002812 <vCCF+0x2a>
 8002806:	4620      	mov	r0, r4
 8002808:	2104      	movs	r1, #4
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280e:	f000 b9ab 	b.w	8002b68 <resetbit>
 8002812:	4620      	mov	r0, r4
 8002814:	2104      	movs	r1, #4
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	f000 b99d 	b.w	8002b58 <setbit>
 800281e:	bf00      	nop
 8002820:	24009254 	.word	0x24009254

08002824 <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002824:	4901      	ldr	r1, [pc, #4]	; (800282c <vRET_C.part.0+0x8>)
 8002826:	1e88      	subs	r0, r1, #2
 8002828:	f000 bbd2 	b.w	8002fd0 <vGBFunctionRET>
 800282c:	2400925e 	.word	0x2400925e

08002830 <vRET_NZ>:
 8002830:	b510      	push	{r4, lr}
 8002832:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <vRET_NZ+0x30>)
 8002834:	2107      	movs	r1, #7
 8002836:	7820      	ldrb	r0, [r4, #0]
 8002838:	f000 f99e 	bl	8002b78 <checkbit>
 800283c:	2800      	cmp	r0, #0
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <vRET_NZ+0x34>)
 8002840:	f04f 0107 	mov.w	r1, #7
 8002844:	bf14      	ite	ne
 8002846:	2208      	movne	r2, #8
 8002848:	2214      	moveq	r2, #20
 800284a:	7820      	ldrb	r0, [r4, #0]
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	f000 f993 	bl	8002b78 <checkbit>
 8002852:	b100      	cbz	r0, 8002856 <vRET_NZ+0x26>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800285a:	f7ff bfe3 	b.w	8002824 <vRET_C.part.0>
 800285e:	bf00      	nop
 8002860:	24009254 	.word	0x24009254
 8002864:	2400908c 	.word	0x2400908c

08002868 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002868:	b510      	push	{r4, lr}
 800286a:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <vRET_Z+0x30>)
 800286c:	2107      	movs	r1, #7
 800286e:	7820      	ldrb	r0, [r4, #0]
 8002870:	f000 f982 	bl	8002b78 <checkbit>
 8002874:	2800      	cmp	r0, #0
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <vRET_Z+0x34>)
 8002878:	f04f 0107 	mov.w	r1, #7
 800287c:	bf14      	ite	ne
 800287e:	2214      	movne	r2, #20
 8002880:	2208      	moveq	r2, #8
 8002882:	7820      	ldrb	r0, [r4, #0]
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	f000 f977 	bl	8002b78 <checkbit>
 800288a:	b900      	cbnz	r0, 800288e <vRET_Z+0x26>
 800288c:	bd10      	pop	{r4, pc}
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002892:	f7ff bfc7 	b.w	8002824 <vRET_C.part.0>
 8002896:	bf00      	nop
 8002898:	24009254 	.word	0x24009254
 800289c:	2400908c 	.word	0x2400908c

080028a0 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4c0b      	ldr	r4, [pc, #44]	; (80028d0 <vRET_NC+0x30>)
 80028a4:	2104      	movs	r1, #4
 80028a6:	7820      	ldrb	r0, [r4, #0]
 80028a8:	f000 f966 	bl	8002b78 <checkbit>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <vRET_NC+0x34>)
 80028b0:	f04f 0104 	mov.w	r1, #4
 80028b4:	bf14      	ite	ne
 80028b6:	2208      	movne	r2, #8
 80028b8:	2214      	moveq	r2, #20
 80028ba:	7820      	ldrb	r0, [r4, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	f000 f95b 	bl	8002b78 <checkbit>
 80028c2:	b100      	cbz	r0, 80028c6 <vRET_NC+0x26>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ca:	f7ff bfab 	b.w	8002824 <vRET_C.part.0>
 80028ce:	bf00      	nop
 80028d0:	24009254 	.word	0x24009254
 80028d4:	2400908c 	.word	0x2400908c

080028d8 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028d8:	b510      	push	{r4, lr}
 80028da:	4c0b      	ldr	r4, [pc, #44]	; (8002908 <vRET_C+0x30>)
 80028dc:	2104      	movs	r1, #4
 80028de:	7820      	ldrb	r0, [r4, #0]
 80028e0:	f000 f94a 	bl	8002b78 <checkbit>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <vRET_C+0x34>)
 80028e8:	f04f 0104 	mov.w	r1, #4
 80028ec:	bf14      	ite	ne
 80028ee:	2214      	movne	r2, #20
 80028f0:	2208      	moveq	r2, #8
 80028f2:	7820      	ldrb	r0, [r4, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	f000 f93f 	bl	8002b78 <checkbit>
 80028fa:	b900      	cbnz	r0, 80028fe <vRET_C+0x26>
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002902:	f7ff bf8f 	b.w	8002824 <vRET_C.part.0>
 8002906:	bf00      	nop
 8002908:	24009254 	.word	0x24009254
 800290c:	2400908c 	.word	0x2400908c

08002910 <vLD_A_A>:
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <vLD_B_B>:
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <vLD_C_C>:
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <vLD_D_D>:
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <vLD_E_E>:
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <vLD_H_H>:
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <vLD_L_L>:
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 800292c:	4b01      	ldr	r3, [pc, #4]	; (8002934 <ucGetTstate+0x8>)
}
 800292e:	7818      	ldrb	r0, [r3, #0]
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	24009096 	.word	0x24009096

08002938 <vGBCPUInterruptHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUInterruptHandler(){
 8002938:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 800293a:	4d39      	ldr	r5, [pc, #228]	; (8002a20 <vGBCPUInterruptHandler+0xe8>)
 800293c:	782c      	ldrb	r4, [r5, #0]
 800293e:	2c01      	cmp	r4, #1
 8002940:	d002      	beq.n	8002948 <vGBCPUInterruptHandler+0x10>

			tStates += 5*4;
		}

	}else{
		ucOneCycleInterruptDelay++;
 8002942:	3401      	adds	r4, #1
 8002944:	702c      	strb	r4, [r5, #0]
	}
}
 8002946:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800294c:	f000 fdac 	bl	80034a8 <ucGBMemoryRead>
 8002950:	4606      	mov	r6, r0
 8002952:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002956:	f000 fda7 	bl	80034a8 <ucGBMemoryRead>
 800295a:	4030      	ands	r0, r6
 800295c:	06c6      	lsls	r6, r0, #27
 800295e:	d0f2      	beq.n	8002946 <vGBCPUInterruptHandler+0xe>
			ucInterruptMasterEnable = 0;
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <vGBCPUInterruptHandler+0xec>)
 8002962:	2600      	movs	r6, #0
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002964:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucInterruptMasterEnable = 0;
 8002968:	701e      	strb	r6, [r3, #0]
			ucOneCycleInterruptDelay = 0;
 800296a:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800296c:	f000 fd9c 	bl	80034a8 <ucGBMemoryRead>
 8002970:	4605      	mov	r5, r0
 8002972:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002976:	f000 fd97 	bl	80034a8 <ucGBMemoryRead>
 800297a:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800297c:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800297e:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 8002980:	d40c      	bmi.n	800299c <vGBCPUInterruptHandler+0x64>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 8002982:	0798      	lsls	r0, r3, #30
 8002984:	d417      	bmi.n	80029b6 <vGBCPUInterruptHandler+0x7e>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 8002986:	0759      	lsls	r1, r3, #29
 8002988:	d422      	bmi.n	80029d0 <vGBCPUInterruptHandler+0x98>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 800298a:	071a      	lsls	r2, r3, #28
 800298c:	d42d      	bmi.n	80029ea <vGBCPUInterruptHandler+0xb2>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 800298e:	06db      	lsls	r3, r3, #27
 8002990:	d438      	bmi.n	8002a04 <vGBCPUInterruptHandler+0xcc>
			tStates += 5*4;
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <vGBCPUInterruptHandler+0xf0>)
 8002994:	7813      	ldrb	r3, [r2, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	7013      	strb	r3, [r2, #0]
}
 800299a:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800299c:	4631      	mov	r1, r6
 800299e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029a2:	f000 fd65 	bl	8003470 <vGBMemoryResetBit>
 80029a6:	4921      	ldr	r1, [pc, #132]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029a8:	1e88      	subs	r0, r1, #2
 80029aa:	f000 fb2f 	bl	800300c <vGBFunctionPUSH>
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	815a      	strh	r2, [r3, #10]
 80029b4:	e7ed      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029b6:	4621      	mov	r1, r4
 80029b8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029bc:	f000 fd58 	bl	8003470 <vGBMemoryResetBit>
 80029c0:	491a      	ldr	r1, [pc, #104]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029c2:	1e88      	subs	r0, r1, #2
 80029c4:	f000 fb22 	bl	800300c <vGBFunctionPUSH>
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029ca:	2248      	movs	r2, #72	; 0x48
 80029cc:	815a      	strh	r2, [r3, #10]
 80029ce:	e7e0      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029d0:	2102      	movs	r1, #2
 80029d2:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029d6:	f000 fd4b 	bl	8003470 <vGBMemoryResetBit>
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029dc:	1e88      	subs	r0, r1, #2
 80029de:	f000 fb15 	bl	800300c <vGBFunctionPUSH>
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029e4:	2250      	movs	r2, #80	; 0x50
 80029e6:	815a      	strh	r2, [r3, #10]
 80029e8:	e7d3      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 80029ea:	2103      	movs	r1, #3
 80029ec:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029f0:	f000 fd3e 	bl	8003470 <vGBMemoryResetBit>
 80029f4:	490d      	ldr	r1, [pc, #52]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029f6:	1e88      	subs	r0, r1, #2
 80029f8:	f000 fb08 	bl	800300c <vGBFunctionPUSH>
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029fe:	2258      	movs	r2, #88	; 0x58
 8002a00:	815a      	strh	r2, [r3, #10]
 8002a02:	e7c6      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 8002a04:	2104      	movs	r1, #4
 8002a06:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a0a:	f000 fd31 	bl	8003470 <vGBMemoryResetBit>
 8002a0e:	4907      	ldr	r1, [pc, #28]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 8002a10:	1e88      	subs	r0, r1, #2
 8002a12:	f000 fafb 	bl	800300c <vGBFunctionPUSH>
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 8002a18:	2260      	movs	r2, #96	; 0x60
 8002a1a:	815a      	strh	r2, [r3, #10]
 8002a1c:	e7b9      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
 8002a1e:	bf00      	nop
 8002a20:	24009099 	.word	0x24009099
 8002a24:	24009098 	.word	0x24009098
 8002a28:	24009096 	.word	0x24009096
 8002a2c:	2400925e 	.word	0x2400925e
 8002a30:	24009254 	.word	0x24009254

08002a34 <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002a34:	b570      	push	{r4, r5, r6, lr}

	if(reg.PC == 0x40){
 8002a36:	4d28      	ldr	r5, [pc, #160]	; (8002ad8 <vGBCPUinstr+0xa4>)
void vGBCPUinstr(uint8_t opcode){
 8002a38:	4604      	mov	r4, r0
	if(reg.PC == 0x40){
 8002a3a:	896b      	ldrh	r3, [r5, #10]
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d102      	bne.n	8002a46 <vGBCPUinstr+0x12>
		num = 5;
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <vGBCPUinstr+0xa8>)
 8002a42:	2205      	movs	r2, #5
 8002a44:	701a      	strb	r2, [r3, #0]
	}
	vGBMemorySetOP(opcode);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 fcc4 	bl	80033d4 <vGBMemorySetOP>

	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a4c:	2ccb      	cmp	r4, #203	; 0xcb
 8002a4e:	d027      	beq.n	8002aa0 <vGBCPUinstr+0x6c>
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <vGBCPUinstr+0xac>)
 8002a52:	8969      	ldrh	r1, [r5, #10]
 8002a54:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002a58:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a5c:	7933      	ldrb	r3, [r6, #4]
 8002a5e:	440b      	add	r3, r1
 8002a60:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002a62:	4790      	blx	r2

	if (opcode == 0xCB){
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
	}else if(instructions[opcode].Tstate == 255){
 8002a64:	7973      	ldrb	r3, [r6, #5]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d00f      	beq.n	8002a8a <vGBCPUinstr+0x56>
		tStates = customDuration;
	}else{
		tStates = instructions[opcode].Tstate;
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002a6c:	7013      	strb	r3, [r2, #0]
	}

	if(ucInterruptMasterEnable == 1)
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <vGBCPUinstr+0xb4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d011      	beq.n	8002a9a <vGBCPUinstr+0x66>
			vGBCPUInterruptHandler();

	//if( print == 1)
	//	vGBMemoryPrint();

	if(reg.PC == 0x2CA){
 8002a76:	896a      	ldrh	r2, [r5, #10]
 8002a78:	f240 23ca 	movw	r3, #714	; 0x2ca
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d000      	beq.n	8002a82 <vGBCPUinstr+0x4e>
		print = 1;
	}
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
		print = 1;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <vGBCPUinstr+0xb8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
		tStates = customDuration;
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <vGBCPUinstr+0xbc>)
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	701a      	strb	r2, [r3, #0]
	if(ucInterruptMasterEnable == 1)
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <vGBCPUinstr+0xb4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d1ed      	bne.n	8002a76 <vGBCPUinstr+0x42>
			vGBCPUInterruptHandler();
 8002a9a:	f7ff ff4d 	bl	8002938 <vGBCPUInterruptHandler>
 8002a9e:	e7ea      	b.n	8002a76 <vGBCPUinstr+0x42>
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aa0:	8968      	ldrh	r0, [r5, #10]
 8002aa2:	4c14      	ldr	r4, [pc, #80]	; (8002af4 <vGBCPUinstr+0xc0>)
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	b280      	uxth	r0, r0
 8002aa8:	f000 fcfe 	bl	80034a8 <ucGBMemoryRead>
 8002aac:	8969      	ldrh	r1, [r5, #10]
 8002aae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <vGBCPUinstr+0xac>)
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ab4:	7903      	ldrb	r3, [r0, #4]
	((void (*)(void))instructions[opcode].instr)();
 8002ab6:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aba:	440b      	add	r3, r1
 8002abc:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002abe:	4790      	blx	r2
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002ac0:	8968      	ldrh	r0, [r5, #10]
 8002ac2:	3801      	subs	r0, #1
 8002ac4:	b280      	uxth	r0, r0
 8002ac6:	f000 fcef 	bl	80034a8 <ucGBMemoryRead>
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002acc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002ad0:	7942      	ldrb	r2, [r0, #5]
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e7cb      	b.n	8002a6e <vGBCPUinstr+0x3a>
 8002ad6:	bf00      	nop
 8002ad8:	24009254 	.word	0x24009254
 8002adc:	24009094 	.word	0x24009094
 8002ae0:	24000008 	.word	0x24000008
 8002ae4:	24009096 	.word	0x24009096
 8002ae8:	24009098 	.word	0x24009098
 8002aec:	24009095 	.word	0x24009095
 8002af0:	2400908c 	.word	0x2400908c
 8002af4:	24000808 	.word	0x24000808

08002af8 <vGBCPUboot>:
void vGBCPUboot(){
 8002af8:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002afa:	4c11      	ldr	r4, [pc, #68]	; (8002b40 <vGBCPUboot+0x48>)
 8002afc:	8960      	ldrh	r0, [r4, #10]
 8002afe:	28ff      	cmp	r0, #255	; 0xff
 8002b00:	d90a      	bls.n	8002b18 <vGBCPUboot+0x20>
		numcount++;
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <vGBCPUboot+0x4c>)
		if(n == 0){
 8002b04:	4d10      	ldr	r5, [pc, #64]	; (8002b48 <vGBCPUboot+0x50>)
		numcount++;
 8002b06:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002b0a:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f141 0100 	adc.w	r1, r1, #0
 8002b12:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002b16:	b12e      	cbz	r6, 8002b24 <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b18:	f000 fcc6 	bl	80034a8 <ucGBMemoryRead>
}
 8002b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b20:	f7ff bf88 	b.w	8002a34 <vGBCPUinstr>
			vGBMemoryLoad(Tetris_gb, 256);
 8002b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b28:	4808      	ldr	r0, [pc, #32]	; (8002b4c <vGBCPUboot+0x54>)
 8002b2a:	f000 fc69 	bl	8003400 <vGBMemoryLoad>
			n = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	8960      	ldrh	r0, [r4, #10]
 8002b32:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b34:	f000 fcb8 	bl	80034a8 <ucGBMemoryRead>
}
 8002b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b3c:	f7ff bf7a 	b.w	8002a34 <vGBCPUinstr>
 8002b40:	24009254 	.word	0x24009254
 8002b44:	24009248 	.word	0x24009248
 8002b48:	24009090 	.word	0x24009090
 8002b4c:	2400100c 	.word	0x2400100c

08002b50 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002b50:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002b54:	b280      	uxth	r0, r0
 8002b56:	4770      	bx	lr

08002b58 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b5e:	7803      	ldrb	r3, [r0, #0]
 8002b60:	4319      	orrs	r1, r3
 8002b62:	7001      	strb	r1, [r0, #0]
}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002b68:	2301      	movs	r3, #1
 8002b6a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b6e:	7803      	ldrb	r3, [r0, #0]
 8002b70:	ea23 0101 	bic.w	r1, r3, r1
 8002b74:	7001      	strb	r1, [r0, #0]
}
 8002b76:	4770      	bx	lr

08002b78 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002b78:	4108      	asrs	r0, r1
}
 8002b7a:	f000 0001 	and.w	r0, r0, #1
 8002b7e:	4770      	bx	lr

08002b80 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002b80:	7803      	ldrb	r3, [r0, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002b88:	780b      	ldrb	r3, [r1, #0]
 8002b8a:	bf0c      	ite	eq
 8002b8c:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002b90:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002b94:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002b96:	7803      	ldrb	r3, [r0, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002b9c:	f991 2000 	ldrsb.w	r2, [r1]
 8002ba0:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002ba4:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ba6:	7800      	ldrb	r0, [r0, #0]
 8002ba8:	b118      	cbz	r0, 8002bb2 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002baa:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002bae:	700b      	strb	r3, [r1, #0]
}
 8002bb0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	700b      	strb	r3, [r1, #0]
}
 8002bba:	4770      	bx	lr

08002bbc <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002bbc:	7803      	ldrb	r3, [r0, #0]
 8002bbe:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002bc2:	780b      	ldrb	r3, [r1, #0]
 8002bc4:	bf14      	ite	ne
 8002bc6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002bca:	f043 0320 	orreq.w	r3, r3, #32
 8002bce:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002bd0:	7803      	ldrb	r3, [r0, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002bd6:	f991 3000 	ldrsb.w	r3, [r1]
 8002bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bde:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002be0:	7802      	ldrb	r2, [r0, #0]
 8002be2:	b12a      	cbz	r2, 8002bf0 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bec:	700b      	strb	r3, [r1, #0]
}
 8002bee:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002bf0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	700b      	strb	r3, [r1, #0]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002bfc:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002bfe:	09d3      	lsrs	r3, r2, #7
 8002c00:	bf0c      	ite	eq
 8002c02:	2300      	moveq	r3, #0
 8002c04:	2310      	movne	r3, #16
 8002c06:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002c08:	7803      	ldrb	r3, [r0, #0]
 8002c0a:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002c0c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002c10:	7003      	strb	r3, [r0, #0]
}
 8002c12:	4770      	bx	lr

08002c14 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002c14:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c16:	f013 0301 	ands.w	r3, r3, #1
 8002c1a:	d007      	beq.n	8002c2c <vGBFunctionRRCA+0x18>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c20:	7803      	ldrb	r3, [r0, #0]
 8002c22:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c28:	7003      	strb	r3, [r0, #0]
}
 8002c2a:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c2c:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c2e:	7803      	ldrb	r3, [r0, #0]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002c38:	8803      	ldrh	r3, [r0, #0]
 8002c3a:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c3c:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002c3e:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c40:	d517      	bpl.n	8002c72 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002c42:	f992 3000 	ldrsb.w	r3, [r2]
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	b2dc      	uxtb	r4, r3
 8002c4c:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x0FFF) < (*regHL & 0x0FFF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c4e:	f3c1 050b 	ubfx	r5, r1, #0, #12
 8002c52:	8804      	ldrh	r4, [r0, #0]
 8002c54:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8002c58:	42a5      	cmp	r5, r4
 8002c5a:	d211      	bcs.n	8002c80 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002c64:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c66:	7813      	ldrb	r3, [r2, #0]
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002c6c:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002c6e:	7013      	strb	r3, [r2, #0]
}
 8002c70:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002c72:	f992 4000 	ldrsb.w	r4, [r2]
 8002c76:	f024 0310 	bic.w	r3, r4, #16
 8002c7a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002c7e:	e7e5      	b.n	8002c4c <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002c80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002c84:	e7ed      	b.n	8002c62 <vGBFunction16bitADD+0x2a>
 8002c86:	bf00      	nop

08002c88 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c88:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002c8c:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c8e:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002c90:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c94:	f002 0210 	and.w	r2, r2, #16
 8002c98:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002c9a:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002c9c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ca0:	7003      	strb	r3, [r0, #0]
}
 8002ca2:	4770      	bx	lr

08002ca4 <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ca4:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002ca6:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ca8:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002caa:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cac:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002cb0:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cb2:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002cb4:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002cb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002cba:	7003      	strb	r3, [r0, #0]
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002cc0:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002cc2:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002cc4:	09c9      	lsrs	r1, r1, #7
 8002cc6:	d105      	bne.n	8002cd4 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002cc8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002cca:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ccc:	fa41 f282 	sxtab	r2, r1, r2
 8002cd0:	801a      	strh	r2, [r3, #0]
		return 12;
 8002cd2:	4770      	bx	lr
		return 8;
 8002cd4:	2008      	movs	r0, #8
	}
}
 8002cd6:	4770      	bx	lr

08002cd8 <vGBFunctionDAA>:
	return ((n >> bit) & 0x1);
 8002cd8:	780a      	ldrb	r2, [r1, #0]

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002cda:	b410      	push	{r4}
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cdc:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002ce0:	7804      	ldrb	r4, [r0, #0]
 8002ce2:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002ce4:	d019      	beq.n	8002d1a <vGBFunctionDAA+0x42>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort = ( tempShort - 0x06) & 0xFF;
 8002ce6:	0694      	lsls	r4, r2, #26
 8002ce8:	d501      	bpl.n	8002cee <vGBFunctionDAA+0x16>
 8002cea:	3b06      	subs	r3, #6
 8002cec:	b2db      	uxtb	r3, r3
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort -= -0x60;
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002cee:	06d2      	lsls	r2, r2, #27
 8002cf0:	d501      	bpl.n	8002cf6 <vGBFunctionDAA+0x1e>
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	b29b      	uxth	r3, r3
	}
	*regA = tempShort;
 8002cf6:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002cf8:	f991 4000 	ldrsb.w	r4, [r1]
 8002cfc:	f024 0220 	bic.w	r2, r4, #32
 8002d00:	700a      	strb	r2, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d02:	7800      	ldrb	r0, [r0, #0]
 8002d04:	b198      	cbz	r0, 8002d2e <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002d06:	f004 025f 	and.w	r2, r4, #95	; 0x5f
	if(tempShort >= 0x100) setbit(flagReg, C_FLAG);
 8002d0a:	2bff      	cmp	r3, #255	; 0xff
}
 8002d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002d10:	bf88      	it	hi
 8002d12:	f042 0210 	orrhi.w	r2, r2, #16
 8002d16:	700a      	strb	r2, [r1, #0]
}
 8002d18:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d1a:	f012 0f20 	tst.w	r2, #32
 8002d1e:	d00a      	beq.n	8002d36 <vGBFunctionDAA+0x5e>
 8002d20:	3306      	adds	r3, #6
 8002d22:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002d24:	2b9f      	cmp	r3, #159	; 0x9f
 8002d26:	d8e4      	bhi.n	8002cf2 <vGBFunctionDAA+0x1a>
 8002d28:	06d2      	lsls	r2, r2, #27
 8002d2a:	d5e4      	bpl.n	8002cf6 <vGBFunctionDAA+0x1e>
 8002d2c:	e7e1      	b.n	8002cf2 <vGBFunctionDAA+0x1a>
	(*n) |= (0x1 << bit);
 8002d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d32:	b2d2      	uxtb	r2, r2
}
 8002d34:	e7e9      	b.n	8002d0a <vGBFunctionDAA+0x32>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d36:	f004 040f 	and.w	r4, r4, #15
 8002d3a:	2c09      	cmp	r4, #9
 8002d3c:	d9f2      	bls.n	8002d24 <vGBFunctionDAA+0x4c>
 8002d3e:	e7ef      	b.n	8002d20 <vGBFunctionDAA+0x48>

08002d40 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002d40:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d42:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d44:	09c9      	lsrs	r1, r1, #7
 8002d46:	d005      	beq.n	8002d54 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002d48:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d4a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d4c:	fa41 f282 	sxtab	r2, r1, r2
 8002d50:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d52:	4770      	bx	lr
	}else{
		return 8;
 8002d54:	2008      	movs	r0, #8
	}
}
 8002d56:	4770      	bx	lr

08002d58 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002d58:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d5a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002d5c:	06c9      	lsls	r1, r1, #27
 8002d5e:	d405      	bmi.n	8002d6c <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002d60:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d62:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d64:	fa41 f282 	sxtab	r2, r1, r2
 8002d68:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d6a:	4770      	bx	lr
		return 8;
 8002d6c:	2008      	movs	r0, #8
	}
}
 8002d6e:	4770      	bx	lr

08002d70 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	460c      	mov	r4, r1
 8002d74:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d76:	f000 fb97 	bl	80034a8 <ucGBMemoryRead>
 8002d7a:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002d7e:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d80:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d82:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002d84:	bf0c      	ite	eq
 8002d86:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002d8a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002d8e:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d90:	f000 fb8a 	bl	80034a8 <ucGBMemoryRead>
 8002d94:	4601      	mov	r1, r0
 8002d96:	4628      	mov	r0, r5
 8002d98:	3101      	adds	r1, #1
 8002d9a:	b2c9      	uxtb	r1, r1
 8002d9c:	f000 fb38 	bl	8003410 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002da0:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002da2:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002daa:	f000 fb7d 	bl	80034a8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dae:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002db0:	b118      	cbz	r0, 8002dba <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db6:	7023      	strb	r3, [r4, #0]
}
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	7023      	strb	r3, [r4, #0]
}
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
 8002dc2:	bf00      	nop

08002dc4 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002dca:	f000 fb6d 	bl	80034a8 <ucGBMemoryRead>
 8002dce:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002dd0:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002dd2:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002dd4:	bf14      	ite	ne
 8002dd6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002dda:	f043 0320 	orreq.w	r3, r3, #32
 8002dde:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002de0:	f000 fb62 	bl	80034a8 <ucGBMemoryRead>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4628      	mov	r0, r5
 8002de8:	3901      	subs	r1, #1
 8002dea:	b2c9      	uxtb	r1, r1
 8002dec:	f000 fb10 	bl	8003410 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002df0:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002df2:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df8:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dfa:	f000 fb55 	bl	80034a8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dfe:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e00:	b118      	cbz	r0, 8002e0a <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e06:	7023      	strb	r3, [r4, #0]
}
 8002e08:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	7023      	strb	r3, [r4, #0]
}
 8002e10:	bd38      	pop	{r3, r4, r5, pc}
 8002e12:	bf00      	nop

08002e14 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002e14:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e16:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e18:	06c9      	lsls	r1, r1, #27
 8002e1a:	d505      	bpl.n	8002e28 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002e1c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e1e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e20:	fa41 f282 	sxtab	r2, r1, r2
 8002e24:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e26:	4770      	bx	lr
	}else{
		return 8;
 8002e28:	2008      	movs	r0, #8
	}
}
 8002e2a:	4770      	bx	lr

08002e2c <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002e2c:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e2e:	b430      	push	{r4, r5}
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e30:	f002 050f 	and.w	r5, r2, #15
 8002e34:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002e38:	441a      	add	r2, r3
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e3a:	1963      	adds	r3, r4, r5
 8002e3c:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002e3e:	f991 3000 	ldrsb.w	r3, [r1]
 8002e42:	bfc8      	it	gt
 8002e44:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e48:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e4a:	b2d2      	uxtb	r2, r2
	(*n) &= ~(0x1 << bit);
 8002e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e50:	bfc8      	it	gt
 8002e52:	f043 0310 	orrgt.w	r3, r3, #16
 8002e56:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002e58:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e5a:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e5c:	b122      	cbz	r2, 8002e68 <vGBFunctionADD+0x3c>
	(*n) &= ~(0x1 << bit);
 8002e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e62:	bc30      	pop	{r4, r5}
 8002e64:	700b      	strb	r3, [r1, #0]
 8002e66:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002e6c:	bc30      	pop	{r4, r5}
 8002e6e:	700b      	strb	r3, [r1, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e74:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e76:	7804      	ldrb	r4, [r0, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e78:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e7c:	780b      	ldrb	r3, [r1, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e7e:	f004 050f 	and.w	r5, r4, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e82:	4422      	add	r2, r4
 8002e84:	f3c3 1400 	ubfx	r4, r3, #4, #1
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e88:	4435      	add	r5, r6
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e8a:	4422      	add	r2, r4
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e8c:	2d0f      	cmp	r5, #15
	(*n) |= (0x1 << bit);
 8002e8e:	bfc8      	it	gt
 8002e90:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e94:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e96:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002e98:	b25b      	sxtb	r3, r3
	(*n) &= ~(0x1 << bit);
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e9e:	bfc8      	it	gt
 8002ea0:	f043 0310 	orrgt.w	r3, r3, #16
 8002ea4:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002ea6:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ea8:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002eaa:	b122      	cbz	r2, 8002eb6 <vGBFunctionADC+0x42>
	(*n) &= ~(0x1 << bit);
 8002eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002eb0:	bc70      	pop	{r4, r5, r6}
 8002eb2:	700b      	strb	r3, [r1, #0]
 8002eb4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002eba:	bc70      	pop	{r4, r5, r6}
 8002ebc:	700b      	strb	r3, [r1, #0]
 8002ebe:	4770      	bx	lr

08002ec0 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ec0:	7803      	ldrb	r3, [r0, #0]
 8002ec2:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002ec4:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ec6:	d21d      	bcs.n	8002f04 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002ec8:	f991 3000 	ldrsb.w	r3, [r1]
 8002ecc:	f043 0310 	orr.w	r3, r3, #16
 8002ed0:	b2dc      	uxtb	r4, r3
 8002ed2:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ed4:	f002 050f 	and.w	r5, r2, #15
 8002ed8:	7804      	ldrb	r4, [r0, #0]
 8002eda:	f004 040f 	and.w	r4, r4, #15
 8002ede:	42a5      	cmp	r5, r4
 8002ee0:	d920      	bls.n	8002f24 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002eea:	7803      	ldrb	r3, [r0, #0]
 8002eec:	1a9a      	subs	r2, r3, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ef2:	b172      	cbz	r2, 8002f12 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002ef4:	780b      	ldrb	r3, [r1, #0]
 8002ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002efe:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f00:	700b      	strb	r3, [r1, #0]
}
 8002f02:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f04:	f991 4000 	ldrsb.w	r4, [r1]
 8002f08:	f024 0310 	bic.w	r3, r4, #16
 8002f0c:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002f10:	e7df      	b.n	8002ed2 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002f12:	f991 3000 	ldrsb.w	r3, [r1]
 8002f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f1e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f20:	700b      	strb	r3, [r1, #0]
}
 8002f22:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002f28:	e7de      	b.n	8002ee8 <vGBFunctionSUB+0x28>
 8002f2a:	bf00      	nop

08002f2c <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f2c:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f2e:	b430      	push	{r4, r5}
	return ((n >> bit) & 0x1);
 8002f30:	f3c3 1500 	ubfx	r5, r3, #4, #1
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f34:	7804      	ldrb	r4, [r0, #0]
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f36:	442a      	add	r2, r5
 8002f38:	b2d2      	uxtb	r2, r2
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f3a:	4294      	cmp	r4, r2
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f3c:	f002 050f 	and.w	r5, r2, #15
	(*n) |= (0x1 << bit);
 8002f40:	bf34      	ite	cc
 8002f42:	f043 0310 	orrcc.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002f46:	f023 0310 	biccs.w	r3, r3, #16
 8002f4a:	b25c      	sxtb	r4, r3
 8002f4c:	700b      	strb	r3, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f4e:	7803      	ldrb	r3, [r0, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	429d      	cmp	r5, r3
 8002f56:	d910      	bls.n	8002f7a <vGBFunctionSBC+0x4e>
	(*n) |= (0x1 << bit);
 8002f58:	f044 0320 	orr.w	r3, r4, #32
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002f60:	7803      	ldrb	r3, [r0, #0]
 8002f62:	1a9a      	subs	r2, r3, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f68:	b152      	cbz	r2, 8002f80 <vGBFunctionSBC+0x54>
	(*n) &= ~(0x1 << bit);
 8002f6a:	780b      	ldrb	r3, [r1, #0]
 8002f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002f74:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f76:	700b      	strb	r3, [r1, #0]
}
 8002f78:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f7a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
}
 8002f7e:	e7ee      	b.n	8002f5e <vGBFunctionSBC+0x32>
	(*n) |= (0x1 << bit);
 8002f80:	f991 3000 	ldrsb.w	r3, [r1]
 8002f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f8c:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f8e:	700b      	strb	r3, [r1, #0]
}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8002f94:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f98:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8002f9a:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f9c:	f002 040f 	and.w	r4, r2, #15
 8002fa0:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8002fa4:	bf8c      	ite	hi
 8002fa6:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002faa:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002fae:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8002fb0:	bf8c      	ite	hi
 8002fb2:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fb6:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8002fba:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8002fbc:	bf0c      	ite	eq
 8002fbe:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8002fc2:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fca:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002fcc:	700b      	strb	r3, [r1, #0]
}
 8002fce:	4770      	bx	lr

08002fd0 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fd4:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fd6:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fd8:	f000 fa66 	bl	80034a8 <ucGBMemoryRead>
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	4605      	mov	r5, r0
 8002fe0:	1c58      	adds	r0, r3, #1
 8002fe2:	b280      	uxth	r0, r0
 8002fe4:	f000 fa60 	bl	80034a8 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8002fe8:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fec:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8002fee:	8823      	ldrh	r3, [r4, #0]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	8023      	strh	r3, [r4, #0]
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	bf00      	nop

08002ff8 <vGBFunctionPOP>:
 8002ff8:	f7ff bfea 	b.w	8002fd0 <vGBFunctionRET>

08002ffc <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8002ffc:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002ffe:	09db      	lsrs	r3, r3, #7
 8003000:	d102      	bne.n	8003008 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003002:	8002      	strh	r2, [r0, #0]
		return 16;
 8003004:	2010      	movs	r0, #16
 8003006:	4770      	bx	lr
		return 12;
 8003008:	200c      	movs	r0, #12
	}
}
 800300a:	4770      	bx	lr

0800300c <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003010:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003012:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003014:	8809      	ldrh	r1, [r1, #0]
 8003016:	3801      	subs	r0, #1
 8003018:	0a09      	lsrs	r1, r1, #8
 800301a:	b280      	uxth	r0, r0
 800301c:	f000 f9f8 	bl	8003410 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003020:	8820      	ldrh	r0, [r4, #0]
 8003022:	7829      	ldrb	r1, [r5, #0]
 8003024:	3802      	subs	r0, #2
 8003026:	b280      	uxth	r0, r0
 8003028:	f000 f9f2 	bl	8003410 <vGBMemoryWrite>
	*regSP -= 2;
 800302c:	8823      	ldrh	r3, [r4, #0]
 800302e:	3b02      	subs	r3, #2
 8003030:	8023      	strh	r3, [r4, #0]
}
 8003032:	bd38      	pop	{r3, r4, r5, pc}

08003034 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003034:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003036:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003038:	09db      	lsrs	r3, r3, #7
 800303a:	d001      	beq.n	8003040 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 800303c:	200c      	movs	r0, #12
}
 800303e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003040:	4604      	mov	r4, r0
 8003042:	4610      	mov	r0, r2
 8003044:	4621      	mov	r1, r4
 8003046:	f7ff ffe1 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800304a:	8820      	ldrh	r0, [r4, #0]
 800304c:	3802      	subs	r0, #2
 800304e:	b280      	uxth	r0, r0
 8003050:	f000 fa2a 	bl	80034a8 <ucGBMemoryRead>
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	4605      	mov	r5, r0
 8003058:	1e58      	subs	r0, r3, #1
 800305a:	b280      	uxth	r0, r0
 800305c:	f000 fa24 	bl	80034a8 <ucGBMemoryRead>
 8003060:	4603      	mov	r3, r0
		return 24;
 8003062:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003064:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003068:	8025      	strh	r5, [r4, #0]
}
 800306a:	bd38      	pop	{r3, r4, r5, pc}

0800306c <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 800306c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800306e:	09db      	lsrs	r3, r3, #7
 8003070:	d002      	beq.n	8003078 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 8003072:	8002      	strh	r2, [r0, #0]
		return 16;
 8003074:	2010      	movs	r0, #16
 8003076:	4770      	bx	lr
	}else{
		return 12;
 8003078:	200c      	movs	r0, #12
	}
}
 800307a:	4770      	bx	lr

0800307c <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800307c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800307e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003080:	09db      	lsrs	r3, r3, #7
 8003082:	d101      	bne.n	8003088 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003084:	200c      	movs	r0, #12
	}
}
 8003086:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003088:	4604      	mov	r4, r0
 800308a:	4610      	mov	r0, r2
 800308c:	4621      	mov	r1, r4
 800308e:	f7ff ffbd 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003092:	8820      	ldrh	r0, [r4, #0]
 8003094:	3802      	subs	r0, #2
 8003096:	b280      	uxth	r0, r0
 8003098:	f000 fa06 	bl	80034a8 <ucGBMemoryRead>
 800309c:	8823      	ldrh	r3, [r4, #0]
 800309e:	4605      	mov	r5, r0
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	b280      	uxth	r0, r0
 80030a4:	f000 fa00 	bl	80034a8 <ucGBMemoryRead>
 80030a8:	4603      	mov	r3, r0
		return 24;
 80030aa:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030ac:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030b0:	8025      	strh	r5, [r4, #0]
}
 80030b2:	bd38      	pop	{r3, r4, r5, pc}

080030b4 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 80030b4:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030b6:	06db      	lsls	r3, r3, #27
 80030b8:	d402      	bmi.n	80030c0 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 80030ba:	8002      	strh	r2, [r0, #0]
		return 16;
 80030bc:	2010      	movs	r0, #16
 80030be:	4770      	bx	lr
		return 12;
 80030c0:	200c      	movs	r0, #12
	}
}
 80030c2:	4770      	bx	lr

080030c4 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030c4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030c6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030c8:	06db      	lsls	r3, r3, #27
 80030ca:	d501      	bpl.n	80030d0 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 80030cc:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030d0:	4604      	mov	r4, r0
 80030d2:	4610      	mov	r0, r2
 80030d4:	4621      	mov	r1, r4
 80030d6:	f7ff ff99 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030da:	8820      	ldrh	r0, [r4, #0]
 80030dc:	3802      	subs	r0, #2
 80030de:	b280      	uxth	r0, r0
 80030e0:	f000 f9e2 	bl	80034a8 <ucGBMemoryRead>
 80030e4:	8823      	ldrh	r3, [r4, #0]
 80030e6:	4605      	mov	r5, r0
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	b280      	uxth	r0, r0
 80030ec:	f000 f9dc 	bl	80034a8 <ucGBMemoryRead>
 80030f0:	4603      	mov	r3, r0
		return 24;
 80030f2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030f4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030f8:	8025      	strh	r5, [r4, #0]
}
 80030fa:	bd38      	pop	{r3, r4, r5, pc}

080030fc <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 80030fc:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030fe:	06db      	lsls	r3, r3, #27
 8003100:	d502      	bpl.n	8003108 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 8003102:	8002      	strh	r2, [r0, #0]
		return 16;
 8003104:	2010      	movs	r0, #16
 8003106:	4770      	bx	lr
	}else{
		return 12;
 8003108:	200c      	movs	r0, #12
	}
}
 800310a:	4770      	bx	lr

0800310c <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800310c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800310e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003110:	06db      	lsls	r3, r3, #27
 8003112:	d401      	bmi.n	8003118 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003114:	200c      	movs	r0, #12
	}
}
 8003116:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003118:	4604      	mov	r4, r0
 800311a:	4610      	mov	r0, r2
 800311c:	4621      	mov	r1, r4
 800311e:	f7ff ff75 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003122:	8820      	ldrh	r0, [r4, #0]
 8003124:	3802      	subs	r0, #2
 8003126:	b280      	uxth	r0, r0
 8003128:	f000 f9be 	bl	80034a8 <ucGBMemoryRead>
 800312c:	8823      	ldrh	r3, [r4, #0]
 800312e:	4605      	mov	r5, r0
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	b280      	uxth	r0, r0
 8003134:	f000 f9b8 	bl	80034a8 <ucGBMemoryRead>
 8003138:	4603      	mov	r3, r0
		return 24;
 800313a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800313c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003140:	8025      	strh	r5, [r4, #0]
}
 8003142:	bd38      	pop	{r3, r4, r5, pc}

08003144 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003144:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003146:	8805      	ldrh	r5, [r0, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <vGBFunctionADD_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800314a:	fa45 f582 	sxtab	r5, r5, r2
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800314e:	402b      	ands	r3, r5
 8003150:	b1bb      	cbz	r3, 8003182 <vGBFunctionADD_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 8003152:	f991 3000 	ldrsb.w	r3, [r1]
 8003156:	f043 0310 	orr.w	r3, r3, #16
 800315a:	b2dc      	uxtb	r4, r3
 800315c:	700c      	strb	r4, [r1, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800315e:	f002 020f 	and.w	r2, r2, #15
 8003162:	8804      	ldrh	r4, [r0, #0]
 8003164:	f004 040f 	and.w	r4, r4, #15
 8003168:	4422      	add	r2, r4
 800316a:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 800316c:	bfcc      	ite	gt
 800316e:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003172:	f023 0320 	bicle.w	r3, r3, #32
 8003176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317a:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP = tempRes & 0xFFFF;
 800317c:	8005      	strh	r5, [r0, #0]
}
 800317e:	bc30      	pop	{r4, r5}
 8003180:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003182:	f991 4000 	ldrsb.w	r4, [r1]
 8003186:	f024 0310 	bic.w	r3, r4, #16
 800318a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 800318e:	e7e5      	b.n	800315c <vGBFunctionADD_SP_r8+0x18>
 8003190:	ffff0000 	.word	0xffff0000

08003194 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003194:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003196:	880d      	ldrh	r5, [r1, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003198:	4c11      	ldr	r4, [pc, #68]	; (80031e0 <vGBFunctionLD_HL_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800319a:	fa45 f583 	sxtab	r5, r5, r3
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800319e:	402c      	ands	r4, r5
 80031a0:	b1bc      	cbz	r4, 80031d2 <vGBFunctionLD_HL_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 80031a2:	f992 4000 	ldrsb.w	r4, [r2]
 80031a6:	f044 0410 	orr.w	r4, r4, #16
 80031aa:	b2e6      	uxtb	r6, r4
 80031ac:	7016      	strb	r6, [r2, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	8809      	ldrh	r1, [r1, #0]
 80031b4:	f001 010f 	and.w	r1, r1, #15
 80031b8:	440b      	add	r3, r1
 80031ba:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 80031bc:	bfcc      	ite	gt
 80031be:	f044 0420 	orrgt.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 80031c2:	f024 0420 	bicle.w	r4, r4, #32
 80031c6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80031ca:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regHL = tempRes & 0xFFFF;
 80031cc:	8005      	strh	r5, [r0, #0]
}
 80031ce:	bc70      	pop	{r4, r5, r6}
 80031d0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031d2:	f992 6000 	ldrsb.w	r6, [r2]
 80031d6:	f026 0410 	bic.w	r4, r6, #16
 80031da:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 80031de:	e7e5      	b.n	80031ac <vGBFunctionLD_HL_SP_r8+0x18>
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 80031e4:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 80031e6:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 80031e8:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80031ec:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80031f0:	d10a      	bne.n	8003208 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 80031f2:	f991 3000 	ldrsb.w	r3, [r1]
 80031f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031fa:	b152      	cbz	r2, 8003212 <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 80031fc:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003206:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003208:	780b      	ldrb	r3, [r1, #0]
 800320a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800320e:	2a00      	cmp	r2, #0
 8003210:	d1f4      	bne.n	80031fc <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 8003212:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003216:	700b      	strb	r3, [r1, #0]
}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 800321c:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800321e:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 8003222:	d509      	bpl.n	8003238 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003224:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 800322a:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 800322e:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	700b      	strb	r3, [r1, #0]
}
 8003236:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003238:	b942      	cbnz	r2, 800324c <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 800323a:	f991 3000 	ldrsb.w	r3, [r1]
 800323e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003242:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 8003246:	4610      	mov	r0, r2
 8003248:	700b      	strb	r3, [r1, #0]
 800324a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800324c:	780b      	ldrb	r3, [r1, #0]
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003252:	e7f6      	b.n	8003242 <ucGBFunctionRRC+0x26>

08003254 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003254:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003256:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 800325a:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 800325e:	bf14      	ite	ne
 8003260:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003264:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 8003268:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 800326c:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800326e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003272:	d105      	bne.n	8003280 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 8003274:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800327e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	700b      	strb	r3, [r1, #0]
}
 8003286:	4770      	bx	lr

08003288 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003288:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800328a:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800328e:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 8003292:	bf14      	ite	ne
 8003294:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003298:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 800329c:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800329e:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 80032a0:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032a4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032a8:	d105      	bne.n	80032b6 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 80032aa:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032b4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	700b      	strb	r3, [r1, #0]
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop

080032c0 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032c0:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 80032c2:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 80032c6:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 80032ca:	bf4c      	ite	mi
 80032cc:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032d0:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032d4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032d8:	d105      	bne.n	80032e6 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 80032da:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032e4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	700b      	strb	r3, [r1, #0]
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 80032f0:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032f4:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 80032f8:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 80032fc:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003300:	bf14      	ite	ne
 8003302:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003306:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800330a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800330e:	d105      	bne.n	800331c <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003310:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800331a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800331c:	f002 031f 	and.w	r3, r2, #31
 8003320:	700b      	strb	r3, [r1, #0]
}
 8003322:	4770      	bx	lr

08003324 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003324:	0903      	lsrs	r3, r0, #4
 8003326:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800332a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800332e:	d107      	bne.n	8003340 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003330:	f991 3000 	ldrsb.w	r3, [r1]
 8003334:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 800333e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003340:	780b      	ldrb	r3, [r1, #0]
 8003342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	700b      	strb	r3, [r1, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003350:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 8003352:	f991 3000 	ldrsb.w	r3, [r1]
 8003356:	bf4c      	ite	mi
 8003358:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800335c:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003360:	0840      	lsrs	r0, r0, #1
 8003362:	d105      	bne.n	8003370 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 8003364:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800336e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	700b      	strb	r3, [r1, #0]
}
 8003376:	4770      	bx	lr

08003378 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 8003378:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800337c:	07cb      	lsls	r3, r1, #31
 800337e:	d508      	bpl.n	8003392 <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 8003380:	7813      	ldrb	r3, [r2, #0]
 8003382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 8003390:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003392:	f992 3000 	ldrsb.w	r3, [r2]
 8003396:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800339e:	f043 0320 	orr.w	r3, r3, #32
 80033a2:	7013      	strb	r3, [r2, #0]
}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 80033a8:	b510      	push	{r4, lr}
 80033aa:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80033ac:	f000 f87c 	bl	80034a8 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 80033b0:	2301      	movs	r3, #1
 80033b2:	fa03 f104 	lsl.w	r1, r3, r4
 80033b6:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 80033ba:	b2c0      	uxtb	r0, r0
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	bf00      	nop

080033c0 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 80033c0:	b510      	push	{r4, lr}
 80033c2:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80033c4:	f000 f870 	bl	80034a8 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 80033c8:	2301      	movs	r3, #1
 80033ca:	fa03 f104 	lsl.w	r1, r3, r4
 80033ce:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 80033d0:	b2c0      	uxtb	r0, r0
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <vGBMemorySetOP>:
registers reg;
memory mem;
uint8_t current_op;

void vGBMemorySetOP(uint8_t op){
	current_op = op;
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <vGBMemorySetOP+0x8>)
 80033d6:	7018      	strb	r0, [r3, #0]
}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	24009250 	.word	0x24009250

080033e0 <vGBMemoryInit>:

void vGBMemoryInit(){
	mem.ram[0xFF00] = 0xCF;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <vGBMemoryInit+0x1c>)
	mem.ram[0xFF0F] = 0xE1;
 80033e2:	f64f 700f 	movw	r0, #65295	; 0xff0f
	mem.ram[0xFF00] = 0xCF;
 80033e6:	21cf      	movs	r1, #207	; 0xcf
 80033e8:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 80033ec:	b410      	push	{r4}
	mem.ram[0xFF0F] = 0xE1;
 80033ee:	24e1      	movs	r4, #225	; 0xe1
	mem.ram[0xFF00] = 0xCF;
 80033f0:	7011      	strb	r1, [r2, #0]
	mem.ram[0xFF0F] = 0xE1;
 80033f2:	541c      	strb	r4, [r3, r0]
}
 80033f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	24009260 	.word	0x24009260

08003400 <vGBMemoryLoad>:

// loads data into memory map
void vGBMemoryLoad(const void* data, uint32_t size){
 8003400:	4603      	mov	r3, r0
 8003402:	460a      	mov	r2, r1
	memcpy(mem.ram , data, size);
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <vGBMemoryLoad+0xc>)
 8003406:	4619      	mov	r1, r3
 8003408:	f004 bfba 	b.w	8008380 <memcpy>
 800340c:	24009260 	.word	0x24009260

08003410 <vGBMemoryWrite>:
}

void vGBMemoryWrite(uint16_t address, uint8_t data){
	if(address == 0xFF00)
 8003410:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003414:	d008      	beq.n	8003428 <vGBMemoryWrite+0x18>

// reads a location from memory map
uint8_t ucGBMemoryRead(uint16_t address){
//	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
//			return 0xFF;
	return mem.ram[address];
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <vGBMemoryWrite+0x28>)
 8003418:	f64f 7341 	movw	r3, #65345	; 0xff41
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d001      	beq.n	800342a <vGBMemoryWrite+0x1a>
	mem.ram[address] = data;
 8003426:	5411      	strb	r1, [r2, r0]
}
 8003428:	4770      	bx	lr
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 800342a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	d2f8      	bcs.n	8003426 <vGBMemoryWrite+0x16>
 8003434:	e7f8      	b.n	8003428 <vGBMemoryWrite+0x18>
 8003436:	bf00      	nop
 8003438:	24009260 	.word	0x24009260

0800343c <vGBMemorySetBit>:
	return mem.ram[address];
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <vGBMemorySetBit+0x30>)
 800343e:	f64f 7341 	movw	r3, #65345	; 0xff41
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b03      	cmp	r3, #3
 800344a:	d009      	beq.n	8003460 <vGBMemorySetBit+0x24>
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 800344c:	b410      	push	{r4}
	mem.ram[address] |= (0x1 << bit);
 800344e:	2401      	movs	r4, #1
 8003450:	5c13      	ldrb	r3, [r2, r0]
 8003452:	fa04 f101 	lsl.w	r1, r4, r1
 8003456:	4319      	orrs	r1, r3
 8003458:	5411      	strb	r1, [r2, r0]
}
 800345a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345e:	4770      	bx	lr
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 8003460:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003468:	d2f0      	bcs.n	800344c <vGBMemorySetBit+0x10>
 800346a:	4770      	bx	lr
 800346c:	24009260 	.word	0x24009260

08003470 <vGBMemoryResetBit>:
	return mem.ram[address];
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <vGBMemoryResetBit+0x34>)
 8003472:	f64f 7341 	movw	r3, #65345	; 0xff41
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d00a      	beq.n	8003496 <vGBMemoryResetBit+0x26>
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 8003480:	b410      	push	{r4}
	mem.ram[address] &= ~(0x1 << bit);
 8003482:	2401      	movs	r4, #1
 8003484:	5c13      	ldrb	r3, [r2, r0]
 8003486:	fa04 f101 	lsl.w	r1, r4, r1
 800348a:	ea23 0101 	bic.w	r1, r3, r1
 800348e:	5411      	strb	r1, [r2, r0]
}
 8003490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003494:	4770      	bx	lr
	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
 8003496:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d2ef      	bcs.n	8003480 <vGBMemoryResetBit+0x10>
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	24009260 	.word	0x24009260

080034a8 <ucGBMemoryRead>:
	return mem.ram[address];
 80034a8:	4b01      	ldr	r3, [pc, #4]	; (80034b0 <ucGBMemoryRead+0x8>)
}
 80034aa:	5c18      	ldrb	r0, [r3, r0]
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	24009260 	.word	0x24009260

080034b4 <usGBMemoryReadShort>:

uint16_t usGBMemoryReadShort(uint16_t address){
//	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
//			return 0xFFFF;
	return *((uint16_t*) &mem.ram[address]);
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <usGBMemoryReadShort+0x8>)
}
 80034b6:	5a18      	ldrh	r0, [r3, r0]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	24009260 	.word	0x24009260

080034c0 <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80034c0:	2101      	movs	r1, #1
 80034c2:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 80034c6:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80034c8:	f7ff ffd2 	bl	8003470 <vGBMemoryResetBit>
 80034cc:	2100      	movs	r1, #0
 80034ce:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 80034d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80034d6:	f7ff bfcb 	b.w	8003470 <vGBMemoryResetBit>
 80034da:	bf00      	nop

080034dc <vSetFrameBuffer>:
	memset(gb_frame, 0, 160*144*4);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <vSetFrameBuffer+0x10>)
 80034de:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 80034e2:	2100      	movs	r1, #0
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f004 bf59 	b.w	800839c <memset>
 80034ea:	bf00      	nop
 80034ec:	24001008 	.word	0x24001008

080034f0 <vCheckBGP>:
void vCheckBGP(){
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80034f2:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 80034f6:	4f0e      	ldr	r7, [pc, #56]	; (8003530 <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80034f8:	f7ff ffd6 	bl	80034a8 <ucGBMemoryRead>
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 80034fc:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <vCheckBGP+0x44>)
 80034fe:	490e      	ldr	r1, [pc, #56]	; (8003538 <vCheckBGP+0x48>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003500:	2200      	movs	r2, #0
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 8003502:	4d0e      	ldr	r5, [pc, #56]	; (800353c <vCheckBGP+0x4c>)
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003504:	4c0e      	ldr	r4, [pc, #56]	; (8003540 <vCheckBGP+0x50>)
		switch ((BGP >> (i*2)) & 0x03) {
 8003506:	fa40 f302 	asr.w	r3, r0, r2
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d00c      	beq.n	800352c <vCheckBGP+0x3c>
 8003512:	2b03      	cmp	r3, #3
 8003514:	d008      	beq.n	8003528 <vCheckBGP+0x38>
 8003516:	2b01      	cmp	r3, #1
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003518:	bf14      	ite	ne
 800351a:	600c      	strne	r4, [r1, #0]
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 800351c:	600d      	streq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 800351e:	3202      	adds	r2, #2
 8003520:	3104      	adds	r1, #4
 8003522:	2a08      	cmp	r2, #8
 8003524:	d1ef      	bne.n	8003506 <vCheckBGP+0x16>
}
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003528:	600e      	str	r6, [r1, #0]
 800352a:	e7f8      	b.n	800351e <vCheckBGP+0x2e>
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 800352c:	600f      	str	r7, [r1, #0]
 800352e:	e7f6      	b.n	800351e <vCheckBGP+0x2e>
 8003530:	ff306230 	.word	0xff306230
 8003534:	ff0f380f 	.word	0xff0f380f
 8003538:	24019268 	.word	0x24019268
 800353c:	ff8bac0f 	.word	0xff8bac0f
 8003540:	ff9bbc0f 	.word	0xff9bbc0f

08003544 <getTileLineData>:
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 8003544:	b538      	push	{r3, r4, r5, lr}
	if (BackWinTileDataAddr == 0x8000){
 8003546:	4d11      	ldr	r5, [pc, #68]	; (800358c <getTileLineData+0x48>)
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 8003548:	460c      	mov	r4, r1
	if (BackWinTileDataAddr == 0x8000){
 800354a:	882b      	ldrh	r3, [r5, #0]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <getTileLineData+0x4c>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	4418      	add	r0, r3
 8003556:	b280      	uxth	r0, r0
	if (BackWinTileDataAddr == 0x8000){
 8003558:	d00c      	beq.n	8003574 <getTileLineData+0x30>
		int8_t temp  = (int8_t)(ucGBMemoryRead(BackTileDisplayAddr + tile_offset));
 800355a:	f7ff ffa5 	bl	80034a8 <ucGBMemoryRead>
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 800355e:	8829      	ldrh	r1, [r5, #0]
		uint16_t temp2 =( temp + 128) * 0x10;
 8003560:	b240      	sxtb	r0, r0
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 8003562:	440c      	add	r4, r1
		uint16_t temp2 =( temp + 128) * 0x10;
 8003564:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 8003566:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 800356a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 800356e:	b280      	uxth	r0, r0
 8003570:	f7ff bfa0 	b.w	80034b4 <usGBMemoryReadShort>
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 8003574:	f7ff ff98 	bl	80034a8 <ucGBMemoryRead>
 8003578:	8829      	ldrh	r1, [r5, #0]
 800357a:	440c      	add	r4, r1
 800357c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 8003580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 8003584:	b280      	uxth	r0, r0
 8003586:	f7ff bf95 	b.w	80034b4 <usGBMemoryReadShort>
 800358a:	bf00      	nop
 800358c:	24019266 	.word	0x24019266
 8003590:	24019278 	.word	0x24019278

08003594 <LYC_check>:
void LYC_check(uint8_t ly){
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003598:	f64f 7045 	movw	r0, #65349	; 0xff45
 800359c:	f7ff ff84 	bl	80034a8 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 80035a0:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 80035a2:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 80035a4:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 80035a8:	d003      	beq.n	80035b2 <LYC_check+0x1e>
}
 80035aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 80035ae:	f7ff bf5f 	b.w	8003470 <vGBMemoryResetBit>
}
 80035b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemorySetBit(STAT_ADDR, 2);
 80035b6:	f7ff bf41 	b.w	800343c <vGBMemorySetBit>
 80035ba:	bf00      	nop

080035bc <setMode>:
void setMode(uint8_t mode){
 80035bc:	b508      	push	{r3, lr}
	Mode = mode;
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <setMode+0x64>)
 80035c0:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 80035c2:	2803      	cmp	r0, #3
 80035c4:	d82b      	bhi.n	800361e <setMode+0x62>
 80035c6:	e8df f000 	tbb	[pc, r0]
 80035ca:	1202      	.short	0x1202
 80035cc:	061e      	.short	0x061e
}
 80035ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80035d2:	f7ff bf75 	b.w	80034c0 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80035d6:	2101      	movs	r1, #1
 80035d8:	f64f 7041 	movw	r0, #65345	; 0xff41
 80035dc:	f7ff ff2e 	bl	800343c <vGBMemorySetBit>
 80035e0:	2100      	movs	r1, #0
 80035e2:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80035e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80035ea:	f7ff bf27 	b.w	800343c <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 80035ee:	2101      	movs	r1, #1
 80035f0:	f64f 7041 	movw	r0, #65345	; 0xff41
 80035f4:	f7ff ff3c 	bl	8003470 <vGBMemoryResetBit>
 80035f8:	2100      	movs	r1, #0
 80035fa:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80035fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003602:	f7ff bf1b 	b.w	800343c <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003606:	2101      	movs	r1, #1
 8003608:	f64f 7041 	movw	r0, #65345	; 0xff41
 800360c:	f7ff ff16 	bl	800343c <vGBMemorySetBit>
 8003610:	2100      	movs	r1, #0
 8003612:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800361a:	f7ff bf29 	b.w	8003470 <vGBMemoryResetBit>
}
 800361e:	bd08      	pop	{r3, pc}
 8003620:	24019264 	.word	0x24019264

08003624 <update_buffer>:
 * @param res
 * @param j
 * @param amt
 */
void update_buffer(uint16_t res, int pixelPos, uint16_t amt){
	for (int n = 1; n <= amt; n++){
 8003624:	2a00      	cmp	r2, #0
 8003626:	d03a      	beq.n	800369e <update_buffer+0x7a>
 8003628:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		switch (res){
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
				case 0x0080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[1]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[1]; break;
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <update_buffer+0x7c>)
void update_buffer(uint16_t res, int pixelPos, uint16_t amt){
 800362e:	b4f0      	push	{r4, r5, r6, r7}
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 8003630:	4c1c      	ldr	r4, [pc, #112]	; (80036a4 <update_buffer+0x80>)
 8003632:	1c56      	adds	r6, r2, #1
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	ea4f 15cc 	mov.w	r5, ip, lsl #7
 800363a:	7824      	ldrb	r4, [r4, #0]
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
 800363c:	4f1a      	ldr	r7, [pc, #104]	; (80036a8 <update_buffer+0x84>)
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 800363e:	fb02 f404 	mul.w	r4, r2, r4
	for (int n = 1; n <= amt; n++){
 8003642:	2201      	movs	r2, #1
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 8003644:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003648:	eb01 1484 	add.w	r4, r1, r4, lsl #6
		switch (res){
 800364c:	f248 0180 	movw	r1, #32896	; 0x8080
 8003650:	eb04 144c 	add.w	r4, r4, ip, lsl #5
 8003654:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003658:	e008      	b.n	800366c <update_buffer+0x48>
 800365a:	2880      	cmp	r0, #128	; 0x80
 800365c:	d102      	bne.n	8003664 <update_buffer+0x40>
				case 0x0080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[1]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[1]; break;
 800365e:	687c      	ldr	r4, [r7, #4]
 8003660:	e9c3 4400 	strd	r4, r4, [r3]
	for (int n = 1; n <= amt; n++){
 8003664:	3201      	adds	r2, #1
 8003666:	442b      	add	r3, r5
 8003668:	42b2      	cmp	r2, r6
 800366a:	d00c      	beq.n	8003686 <update_buffer+0x62>
		switch (res){
 800366c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003670:	d011      	beq.n	8003696 <update_buffer+0x72>
 8003672:	d80a      	bhi.n	800368a <update_buffer+0x66>
 8003674:	2800      	cmp	r0, #0
 8003676:	d1f0      	bne.n	800365a <update_buffer+0x36>
	for (int n = 1; n <= amt; n++){
 8003678:	3201      	adds	r2, #1
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
 800367a:	683c      	ldr	r4, [r7, #0]
	for (int n = 1; n <= amt; n++){
 800367c:	42b2      	cmp	r2, r6
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
 800367e:	e9c3 4400 	strd	r4, r4, [r3]
	for (int n = 1; n <= amt; n++){
 8003682:	442b      	add	r3, r5
 8003684:	d1f2      	bne.n	800366c <update_buffer+0x48>
				default: break;
			}
	}

}
 8003686:	bcf0      	pop	{r4, r5, r6, r7}
 8003688:	4770      	bx	lr
		switch (res){
 800368a:	4288      	cmp	r0, r1
 800368c:	d1ea      	bne.n	8003664 <update_buffer+0x40>
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 800368e:	68fc      	ldr	r4, [r7, #12]
 8003690:	e9c3 4400 	strd	r4, r4, [r3]
 8003694:	e7e6      	b.n	8003664 <update_buffer+0x40>
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
 8003696:	68bc      	ldr	r4, [r7, #8]
 8003698:	e9c3 4400 	strd	r4, r4, [r3]
 800369c:	e7e2      	b.n	8003664 <update_buffer+0x40>
 800369e:	4770      	bx	lr
 80036a0:	24001008 	.word	0x24001008
 80036a4:	2400909b 	.word	0x2400909b
 80036a8:	24019268 	.word	0x24019268

080036ac <vGBPPUDrawLine>:
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){

	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 80036ac:	4402      	add	r2, r0
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 80036ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 80036b2:	10d3      	asrs	r3, r2, #3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 80036b4:	f002 0207 	and.w	r2, r2, #7
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 80036b8:	08ce      	lsrs	r6, r1, #3
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 80036ba:	f001 0407 	and.w	r4, r1, #7
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 80036be:	ea4f 0842 	mov.w	r8, r2, lsl #1

	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information

		for(int j = 0; j < 160*2; j+= 2){
 80036c2:	f04f 0900 	mov.w	r9, #0
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 80036c6:	eb06 1643 	add.w	r6, r6, r3, lsl #5

			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 80036ca:	4f12      	ldr	r7, [pc, #72]	; (8003714 <vGBPPUDrawLine+0x68>)
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information
 80036cc:	4641      	mov	r1, r8
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7ff ff38 	bl	8003544 <getTileLineData>
 80036d4:	4605      	mov	r5, r0
		for(int j = 0; j < 160*2; j+= 2){
 80036d6:	e002      	b.n	80036de <vGBPPUDrawLine+0x32>
 80036d8:	f5b9 7fa0 	cmp.w	r9, #320	; 0x140
 80036dc:	d017      	beq.n	800370e <vGBPPUDrawLine+0x62>
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 80036de:	fa05 f304 	lsl.w	r3, r5, r4
			pixl_offset++;
 80036e2:	3401      	adds	r4, #1
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 80036e4:	2202      	movs	r2, #2
 80036e6:	4649      	mov	r1, r9
 80036e8:	403b      	ands	r3, r7
			pixl_offset++;
 80036ea:	b2e4      	uxtb	r4, r4
		for(int j = 0; j < 160*2; j+= 2){
 80036ec:	4491      	add	r9, r2
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 80036ee:	b298      	uxth	r0, r3
 80036f0:	f7ff ff98 	bl	8003624 <update_buffer>

			if(pixl_offset == 8){
 80036f4:	2c08      	cmp	r4, #8
 80036f6:	d1ef      	bne.n	80036d8 <vGBPPUDrawLine+0x2c>
				tile_offset++;
 80036f8:	3601      	adds	r6, #1
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset);
 80036fa:	4641      	mov	r1, r8
				pixl_offset = 0;
 80036fc:	2400      	movs	r4, #0
				tile_offset++;
 80036fe:	b2b6      	uxth	r6, r6
				tile_data = getTileLineData(tile_offset, line_offset);
 8003700:	4630      	mov	r0, r6
 8003702:	f7ff ff1f 	bl	8003544 <getTileLineData>
		for(int j = 0; j < 160*2; j+= 2){
 8003706:	f5b9 7fa0 	cmp.w	r9, #320	; 0x140
				tile_data = getTileLineData(tile_offset, line_offset);
 800370a:	4605      	mov	r5, r0
		for(int j = 0; j < 160*2; j+= 2){
 800370c:	d1e7      	bne.n	80036de <vGBPPUDrawLine+0x32>

			}

		}

}
 800370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003712:	bf00      	nop
 8003714:	ffff8080 	.word	0xffff8080

08003718 <gbPPUStep>:
void gbPPUStep(){
 8003718:	b538      	push	{r3, r4, r5, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 800371a:	f64f 7040 	movw	r0, #65344	; 0xff40
 800371e:	f7ff fec3 	bl	80034a8 <ucGBMemoryRead>
 8003722:	0603      	lsls	r3, r0, #24
 8003724:	d400      	bmi.n	8003728 <gbPPUStep+0x10>
}
 8003726:	bd38      	pop	{r3, r4, r5, pc}
		tStatesTotal += ucGetTstate();
 8003728:	4c44      	ldr	r4, [pc, #272]	; (800383c <gbPPUStep+0x124>)
 800372a:	f7ff f8ff 	bl	800292c <ucGetTstate>
			ly++;
 800372e:	4d44      	ldr	r5, [pc, #272]	; (8003840 <gbPPUStep+0x128>)
		tStatesTotal += ucGetTstate();
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003734:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8003738:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 800373a:	d90d      	bls.n	8003758 <gbPPUStep+0x40>
			ly++;
 800373c:	7829      	ldrb	r1, [r5, #0]
 800373e:	3101      	adds	r1, #1
 8003740:	b2c9      	uxtb	r1, r1
			if(ly > 153){												// end of vblank
 8003742:	2999      	cmp	r1, #153	; 0x99
			ly++;
 8003744:	7029      	strb	r1, [r5, #0]
			if(ly > 153){												// end of vblank
 8003746:	d86d      	bhi.n	8003824 <gbPPUStep+0x10c>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 8003748:	f64f 7044 	movw	r0, #65348	; 0xff44
 800374c:	f7ff fe60 	bl	8003410 <vGBMemoryWrite>
			tStatesTotal -= 456;
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003756:	6023      	str	r3, [r4, #0]
		LYC_check(ly);
 8003758:	7828      	ldrb	r0, [r5, #0]
 800375a:	f7ff ff1b 	bl	8003594 <LYC_check>
		if (ly > 143){													// vblank
 800375e:	782b      	ldrb	r3, [r5, #0]
 8003760:	2b8f      	cmp	r3, #143	; 0x8f
 8003762:	d80b      	bhi.n	800377c <gbPPUStep+0x64>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	2b50      	cmp	r3, #80	; 0x50
 8003768:	d812      	bhi.n	8003790 <gbPPUStep+0x78>
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <gbPPUStep+0x12c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d0d9      	beq.n	8003726 <gbPPUStep+0xe>
				setMode(MODE_2);
 8003772:	2002      	movs	r0, #2
}
 8003774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_2);
 8003778:	f7ff bf20 	b.w	80035bc <setMode>
			setMode(MODE_1);
 800377c:	2001      	movs	r0, #1
 800377e:	f7ff ff1d 	bl	80035bc <setMode>
			vGBMemorySetBit(0xFF0F, 0);
 8003782:	2100      	movs	r1, #0
 8003784:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			vGBMemorySetBit(0xFF0F, 0);
 800378c:	f7ff be56 	b.w	800343c <vGBMemorySetBit>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 8003790:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8003794:	2aab      	cmp	r2, #171	; 0xab
 8003796:	d838      	bhi.n	800380a <gbPPUStep+0xf2>
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <gbPPUStep+0x12c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d0c2      	beq.n	8003726 <gbPPUStep+0xe>
				vCheckBGP();
 80037a0:	f7ff fea6 	bl	80034f0 <vCheckBGP>
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80037a4:	f64f 7040 	movw	r0, #65344	; 0xff40
 80037a8:	f7ff fe7e 	bl	80034a8 <ucGBMemoryRead>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <gbPPUStep+0x130>)
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037b0:	f64f 7040 	movw	r0, #65344	; 0xff40
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80037b4:	f012 0f10 	tst.w	r2, #16
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037b8:	4c24      	ldr	r4, [pc, #144]	; (800384c <gbPPUStep+0x134>)
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80037ba:	bf14      	ite	ne
 80037bc:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80037c0:	f44f 4208 	moveq.w	r2, #34816	; 0x8800
 80037c4:	801a      	strh	r2, [r3, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037c6:	f7ff fe6f 	bl	80034a8 <ucGBMemoryRead>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <gbPPUStep+0x138>)
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037ce:	f64f 7042 	movw	r0, #65346	; 0xff42
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80037d2:	f012 0f08 	tst.w	r2, #8
 80037d6:	bf14      	ite	ne
 80037d8:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 80037dc:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
 80037e0:	801a      	strh	r2, [r3, #0]
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037e2:	f7ff fe61 	bl	80034a8 <ucGBMemoryRead>
 80037e6:	4603      	mov	r3, r0
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037e8:	f64f 7043 	movw	r0, #65347	; 0xff43
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 80037ec:	7023      	strb	r3, [r4, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037ee:	f7ff fe5b 	bl	80034a8 <ucGBMemoryRead>
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <gbPPUStep+0x13c>)
 80037f4:	4601      	mov	r1, r0
				vGBPPUDrawLine(ly, ucSCX, ucSCY);
 80037f6:	7822      	ldrb	r2, [r4, #0]
 80037f8:	7828      	ldrb	r0, [r5, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 80037fa:	7019      	strb	r1, [r3, #0]
				vGBPPUDrawLine(ly, ucSCX, ucSCY);
 80037fc:	f7ff ff56 	bl	80036ac <vGBPPUDrawLine>
				setMode(MODE_3);
 8003800:	2003      	movs	r0, #3
}
 8003802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_3);
 8003806:	f7ff bed9 	b.w	80035bc <setMode>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0)										// hblank
 800380a:	3bfd      	subs	r3, #253	; 0xfd
 800380c:	2bcb      	cmp	r3, #203	; 0xcb
 800380e:	d88a      	bhi.n	8003726 <gbPPUStep+0xe>
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <gbPPUStep+0x12c>)
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	2a00      	cmp	r2, #0
 8003816:	d086      	beq.n	8003726 <gbPPUStep+0xe>
	Mode = mode;
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
}
 800381c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003820:	f7ff be4e 	b.w	80034c0 <setMode.part.0>
				dummy2_code(gb_frame);
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <gbPPUStep+0x140>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	f000 f9e2 	bl	8003bf0 <dummy2_code>
				setMode(MODE_2);
 800382c:	2002      	movs	r0, #2
 800382e:	f7ff fec5 	bl	80035bc <setMode>
				ly = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	4619      	mov	r1, r3
 8003836:	702b      	strb	r3, [r5, #0]
 8003838:	e786      	b.n	8003748 <gbPPUStep+0x30>
 800383a:	bf00      	nop
 800383c:	24019260 	.word	0x24019260
 8003840:	2400909b 	.word	0x2400909b
 8003844:	24019264 	.word	0x24019264
 8003848:	24019266 	.word	0x24019266
 800384c:	2401927a 	.word	0x2401927a
 8003850:	24019278 	.word	0x24019278
 8003854:	24019265 	.word	0x24019265
 8003858:	24001008 	.word	0x24001008

0800385c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800385e:	2004      	movs	r0, #4
{
 8003860:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003862:	f003 f817 	bl	8006894 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <SystemClock_Config+0xc8>)
 8003868:	2300      	movs	r3, #0
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <SystemClock_Config+0xcc>)
 8003870:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003874:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003876:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003878:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800387a:	f002 0201 	and.w	r2, r2, #1
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003886:	619a      	str	r2, [r3, #24]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003892:	6983      	ldr	r3, [r0, #24]
 8003894:	049b      	lsls	r3, r3, #18
 8003896:	d5fc      	bpl.n	8003892 <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003898:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800389a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800389e:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 80038a2:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 80038a4:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038a6:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a8:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038aa:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ac:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80038ae:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80038b0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80038b2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80038b4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038b6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038b8:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038ba:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80038bc:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80038c4:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80038c8:	f003 f820 	bl	800690c <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80038cc:	b108      	cbz	r0, 80038d2 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038d0:	e7fe      	b.n	80038d0 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80038d2:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80038d4:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d6:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80038d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80038dc:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80038de:	4629      	mov	r1, r5
 80038e0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80038e2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e4:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80038e8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80038ec:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80038f0:	f003 fba2 	bl	8007038 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80038f4:	b108      	cbz	r0, 80038fa <SystemClock_Config+0x9e>
 80038f6:	b672      	cpsid	i
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <SystemClock_Config+0xd0>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003902:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8003904:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003908:	f042 0202 	orr.w	r2, r2, #2
 800390c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 800391c:	f001 fe38 	bl	8005590 <HAL_EnableCompensationCell>
}
 8003920:	b01f      	add	sp, #124	; 0x7c
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003924:	58000400 	.word	0x58000400
 8003928:	58024800 	.word	0x58024800
 800392c:	58024400 	.word	0x58024400

08003930 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	496f      	ldr	r1, [pc, #444]	; (8003af4 <main+0x1c4>)
 8003936:	e002      	b.n	800393e <main+0xe>
 8003938:	3b01      	subs	r3, #1
 800393a:	f000 80d7 	beq.w	8003aec <main+0x1bc>
 800393e:	680a      	ldr	r2, [r1, #0]
 8003940:	0410      	lsls	r0, r2, #16
 8003942:	d4f9      	bmi.n	8003938 <main+0x8>
{
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8003948:	f001 fdc8 	bl	80054dc <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <main+0x1c8>)
 800394e:	6953      	ldr	r3, [r2, #20]
 8003950:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003954:	d111      	bne.n	800397a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003956:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800395a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800395e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003966:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800396a:	6953      	ldr	r3, [r2, #20]
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003972:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003976:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800397a:	4a5f      	ldr	r2, [pc, #380]	; (8003af8 <main+0x1c8>)
 800397c:	6953      	ldr	r3, [r2, #20]
 800397e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003982:	d124      	bne.n	80039ce <main+0x9e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003984:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003988:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800398c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003990:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003994:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003998:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800399c:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800399e:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039a2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039a4:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80039a8:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80039aa:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	d1f8      	bne.n	80039a4 <main+0x74>
    } while(sets-- != 0U);
 80039b2:	3820      	subs	r0, #32
 80039b4:	f110 0f20 	cmn.w	r0, #32
 80039b8:	d1f1      	bne.n	800399e <main+0x6e>
 80039ba:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80039be:	6953      	ldr	r3, [r2, #20]
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6153      	str	r3, [r2, #20]
 80039c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039ca:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 80039ce:	4c49      	ldr	r4, [pc, #292]	; (8003af4 <main+0x1c4>)
  SystemClock_Config();
 80039d0:	f7ff ff44 	bl	800385c <SystemClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 80039d4:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 80039d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039de:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 80039ee:	f002 fcdb 	bl	80063a8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80039f2:	2100      	movs	r1, #0
 80039f4:	4608      	mov	r0, r1
 80039f6:	f002 fce5 	bl	80063c4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80039fa:	4623      	mov	r3, r4
 80039fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a00:	e001      	b.n	8003a06 <main+0xd6>
 8003a02:	3a01      	subs	r2, #1
 8003a04:	d074      	beq.n	8003af0 <main+0x1c0>
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	0409      	lsls	r1, r1, #16
 8003a0a:	d5fa      	bpl.n	8003a02 <main+0xd2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a10:	2501      	movs	r5, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003a14:	f44f 4070 	mov.w	r0, #61440	; 0xf000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a18:	f042 0204 	orr.w	r2, r2, #4
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a1c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a26:	f002 0204 	and.w	r2, r2, #4
 8003a2a:	9202      	str	r2, [sp, #8]
 8003a2c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a32:	432a      	orrs	r2, r5
 8003a34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a3c:	402a      	ands	r2, r5
 8003a3e:	9203      	str	r2, [sp, #12]
 8003a40:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a52:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a54:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a58:	9204      	str	r2, [sp, #16]
 8003a5a:	9a04      	ldr	r2, [sp, #16]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003a6c:	9005      	str	r0, [sp, #20]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a72:	4822      	ldr	r0, [pc, #136]	; (8003afc <main+0x1cc>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	9407      	str	r4, [sp, #28]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7c:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a7e:	f002 fb67 	bl	8006150 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a86:	a905      	add	r1, sp, #20
 8003a88:	481d      	ldr	r0, [pc, #116]	; (8003b00 <main+0x1d0>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a8a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	e9cd 4406 	strd	r4, r4, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a92:	f002 fb5d 	bl	8006150 <HAL_GPIO_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8003a96:	4629      	mov	r1, r5
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f001 fbbb 	bl	8005214 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8003a9e:	4819      	ldr	r0, [pc, #100]	; (8003b04 <main+0x1d4>)
 8003aa0:	f004 fbb4 	bl	800820c <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f004 fbe3 	bl	8008270 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003aae:	f004 fc33 	bl	8008318 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	f004 fbf3 	bl	80082a0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8003aba:	4813      	ldr	r0, [pc, #76]	; (8003b08 <main+0x1d8>)
 8003abc:	f004 fbe8 	bl	8008290 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8003ac0:	4812      	ldr	r0, [pc, #72]	; (8003b0c <main+0x1dc>)
 8003ac2:	f004 fbf5 	bl	80082b0 <UTIL_LCD_SetFont>
  vGBMemoryLoad(Tetris_gb, 32768);
 8003ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aca:	4811      	ldr	r0, [pc, #68]	; (8003b10 <main+0x1e0>)
 8003acc:	f7ff fc98 	bl	8003400 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into approiate place in memory map
 8003ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ad4:	480f      	ldr	r0, [pc, #60]	; (8003b14 <main+0x1e4>)
 8003ad6:	f7ff fc93 	bl	8003400 <vGBMemoryLoad>
  vGBMemoryInit();
 8003ada:	f7ff fc81 	bl	80033e0 <vGBMemoryInit>
  vSetFrameBuffer();
 8003ade:	f7ff fcfd 	bl	80034dc <vSetFrameBuffer>
		  vGBCPUboot();
 8003ae2:	f7ff f809 	bl	8002af8 <vGBCPUboot>
		  gbPPUStep();
 8003ae6:	f7ff fe17 	bl	8003718 <gbPPUStep>
  while (1)
 8003aea:	e7fa      	b.n	8003ae2 <main+0x1b2>
  __ASM volatile ("cpsid i" : : : "memory");
 8003aec:	b672      	cpsid	i
  while (1)
 8003aee:	e7fe      	b.n	8003aee <main+0x1be>
 8003af0:	b672      	cpsid	i
 8003af2:	e7fe      	b.n	8003af2 <main+0x1c2>
 8003af4:	58024400 	.word	0x58024400
 8003af8:	e000ed00 	.word	0xe000ed00
 8003afc:	58022000 	.word	0x58022000
 8003b00:	58020800 	.word	0x58020800
 8003b04:	08008648 	.word	0x08008648
 8003b08:	ff0000ff 	.word	0xff0000ff
 8003b0c:	24009064 	.word	0x24009064
 8003b10:	2400100c 	.word	0x2400100c
 8003b14:	080083d4 	.word	0x080083d4

08003b18 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_LTDC_LineEventCallback+0x3c>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2a00      	cmp	r2, #0
 8003b1e:	db15      	blt.n	8003b4c <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b20:	490d      	ldr	r1, [pc, #52]	; (8003b58 <HAL_LTDC_LineEventCallback+0x40>)
 8003b22:	6802      	ldr	r2, [r0, #0]
{
 8003b24:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b26:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8003b28:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b2c:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8003b30:	4d0a      	ldr	r5, [pc, #40]	; (8003b5c <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003b32:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003b36:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003b38:	f041 0101 	orr.w	r1, r1, #1
 8003b3c:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003b3e:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8003b44:	601c      	str	r4, [r3, #0]
}
 8003b46:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003b48:	f002 bde8 	b.w	800671c <HAL_LTDC_ProgramLineEvent>
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f002 bde5 	b.w	800671c <HAL_LTDC_ProgramLineEvent>
 8003b52:	bf00      	nop
 8003b54:	2400900c 	.word	0x2400900c
 8003b58:	080084d4 	.word	0x080084d4
 8003b5c:	2400909c 	.word	0x2400909c

08003b60 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003b66:	4c20      	ldr	r4, [pc, #128]	; (8003be8 <CopyBuffer+0x88>)
 8003b68:	2500      	movs	r5, #0
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003b6a:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8003b6e:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8003b72:	4681      	mov	r9, r0
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8003b74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003bec <CopyBuffer+0x8c>

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003b78:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003b7a:	f5ca 7b48 	rsb	fp, sl, #800	; 0x320
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003b7e:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8003b80:	6225      	str	r5, [r4, #32]
{
 8003b82:	460f      	mov	r7, r1
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003b84:	6465      	str	r5, [r4, #68]	; 0x44
{
 8003b86:	4690      	mov	r8, r2
 8003b88:	461e      	mov	r6, r3
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003b8a:	f8c4 b00c 	str.w	fp, [r4, #12]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003b8e:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003b92:	e9c4 c500 	strd	ip, r5, [r4]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8003b96:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003b9a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8003b9e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8003ba2:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003ba6:	f001 fdbd 	bl	8005724 <HAL_DMA2D_Init>
 8003baa:	b110      	cbz	r0, 8003bb2 <CopyBuffer+0x52>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
      }
    }
  }
}
 8003bac:	b003      	add	sp, #12
 8003bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f001 fe99 	bl	80058ec <HAL_DMA2D_ConfigLayer>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d1f6      	bne.n	8003bac <CopyBuffer+0x4c>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003bbe:	f44f 7248 	mov.w	r2, #800	; 0x320
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003bc2:	4653      	mov	r3, sl
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4620      	mov	r0, r4
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003bc8:	fb02 8206 	mla	r2, r2, r6, r8
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003bcc:	9500      	str	r5, [sp, #0]
 8003bce:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003bd2:	f001 fde9 	bl	80057a8 <HAL_DMA2D_Start>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d1e8      	bne.n	8003bac <CopyBuffer+0x4c>
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003bda:	4620      	mov	r0, r4
 8003bdc:	2164      	movs	r1, #100	; 0x64
}
 8003bde:	b003      	add	sp, #12
 8003be0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003be4:	f001 bdfc 	b.w	80057e0 <HAL_DMA2D_PollForTransfer>
 8003be8:	240090a0 	.word	0x240090a0
 8003bec:	52001000 	.word	0x52001000

08003bf0 <dummy2_code>:

void dummy2_code(uint32_t* gb_frame){
 8003bf0:	b510      	push	{r4, lr}
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, 0, 160 * 2, 144 * 2);
 8003bf2:	2300      	movs	r3, #0
void dummy2_code(uint32_t* gb_frame){
 8003bf4:	b082      	sub	sp, #8
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, 0, 160 * 2, 144 * 2);
 8003bf6:	f44f 7490 	mov.w	r4, #288	; 0x120
 8003bfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bfe:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003c02:	e9cd 2400 	strd	r2, r4, [sp]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7ff ffaa 	bl	8003b60 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <dummy2_code+0x2c>)
 8003c0e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd10      	pop	{r4, pc}
 8003c1c:	2401927c 	.word	0x2401927c

08003c20 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003c24:	4c05      	ldr	r4, [pc, #20]	; (8003c3c <HardFault_Handler+0x18>)
{
 8003c26:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c2e:	f002 fbb1 	bl	8006394 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c36:	f001 fc93 	bl	8005560 <HAL_Delay>
  while (1)
 8003c3a:	e7f5      	b.n	8003c28 <HardFault_Handler+0x4>
 8003c3c:	58022000 	.word	0x58022000

08003c40 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <MemManage_Handler>
 8003c42:	bf00      	nop

08003c44 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003c44:	e7fe      	b.n	8003c44 <BusFault_Handler>
 8003c46:	bf00      	nop

08003c48 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <UsageFault_Handler>
 8003c4a:	bf00      	nop

08003c4c <SVC_Handler>:
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop

08003c50 <DebugMon_Handler>:
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <PendSV_Handler>:
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8003c58:	f001 bc70 	b.w	800553c <HAL_IncTick>

08003c5c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8003c5c:	4801      	ldr	r0, [pc, #4]	; (8003c64 <LTDC_IRQHandler+0x8>)
 8003c5e:	f002 bccb 	b.w	80065f8 <HAL_LTDC_IRQHandler>
 8003c62:	bf00      	nop
 8003c64:	2401927c 	.word	0x2401927c

08003c68 <LTDC_ER_IRQHandler>:
 8003c68:	f7ff bff8 	b.w	8003c5c <LTDC_IRQHandler>

08003c6c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <DSI_IRQHandler+0x8>)
 8003c6e:	f001 bf91 	b.w	8005b94 <HAL_DSI_IRQHandler>
 8003c72:	bf00      	nop
 8003c74:	24019340 	.word	0x24019340

08003c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c7c:	f7fc fb2c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c88:	e002      	b.n	8003c90 <LoopCopyDataInit>

08003c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c8e:	3304      	adds	r3, #4

08003c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c94:	d3f9      	bcc.n	8003c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c98:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c9c:	e001      	b.n	8003ca2 <LoopFillZerobss>

08003c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca0:	3204      	adds	r2, #4

08003ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca4:	d3fb      	bcc.n	8003c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ca6:	f004 fb47 	bl	8008338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003caa:	f7ff fe41 	bl	8003930 <main>
  bx  lr
 8003cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cb0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8003cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003cb8:	2400906c 	.word	0x2400906c
  ldr r2, =_sidata
 8003cbc:	0800a134 	.word	0x0800a134
  ldr r2, =_sbss
 8003cc0:	24009070 	.word	0x24009070
  ldr r4, =_ebss
 8003cc4:	240193fc 	.word	0x240193fc

08003cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc8:	e7fe      	b.n	8003cc8 <ADC3_IRQHandler>
	...

08003ccc <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8003cce:	4c0e      	ldr	r4, [pc, #56]	; (8003d08 <IS42S32800J_ModeRegConfig+0x3c>)
 8003cd0:	2304      	movs	r3, #4
{
 8003cd2:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8003cd4:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8003cd6:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003cd8:	69d7      	ldr	r7, [r2, #28]
 8003cda:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003cde:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003ce0:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8003ce2:	6955      	ldr	r5, [r2, #20]
 8003ce4:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8003ce6:	6995      	ldr	r5, [r2, #24]
 8003ce8:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 8003cea:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8003cf0:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003cf2:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8003cf4:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003cf6:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003cf8:	f004 f9a4 	bl	8008044 <HAL_SDRAM_SendCommand>
 8003cfc:	3800      	subs	r0, #0
 8003cfe:	bf18      	it	ne
 8003d00:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8003d02:	4240      	negs	r0, r0
 8003d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	24009108 	.word	0x24009108

08003d0c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8003d0c:	680a      	ldr	r2, [r1, #0]
{
 8003d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8003d10:	4c22      	ldr	r4, [pc, #136]	; (8003d9c <IS42S32800J_Init+0x90>)
 8003d12:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8003d14:	2700      	movs	r7, #0
{
 8003d16:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8003d18:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8003d20:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8003d22:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8003d24:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8003d26:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d28:	f004 f98c 	bl	8008044 <HAL_SDRAM_SendCommand>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d132      	bne.n	8003d96 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003d30:	f001 fc10 	bl	8005554 <HAL_GetTick>
 8003d34:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003d36:	f001 fc0d 	bl	8005554 <HAL_GetTick>
 8003d3a:	4287      	cmp	r7, r0
 8003d3c:	d0fb      	beq.n	8003d36 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8003d3e:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8003d40:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8003d42:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8003d44:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8003d46:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8003d4c:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d4e:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8003d50:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d52:	4912      	ldr	r1, [pc, #72]	; (8003d9c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8003d54:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d56:	f004 f975 	bl	8008044 <HAL_SDRAM_SendCommand>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	b9d8      	cbnz	r0, 8003d96 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8003d5e:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8003d60:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8003d62:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8003d68:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d6a:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8003d6c:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d6e:	490b      	ldr	r1, [pc, #44]	; (8003d9c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8003d70:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8003d72:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8003d74:	f004 f966 	bl	8008044 <HAL_SDRAM_SendCommand>
 8003d78:	b968      	cbnz	r0, 8003d96 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7ff ffa5 	bl	8003ccc <IS42S32800J_ModeRegConfig>
 8003d82:	b940      	cbnz	r0, 8003d96 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8003d84:	68a9      	ldr	r1, [r5, #8]
 8003d86:	4630      	mov	r0, r6
 8003d88:	f004 f97c 	bl	8008084 <HAL_SDRAM_ProgramRefreshRate>
 8003d8c:	3800      	subs	r0, #0
 8003d8e:	bf18      	it	ne
 8003d90:	2001      	movne	r0, #1
 8003d92:	4240      	negs	r0, r0
}
 8003d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9c:	24009108 	.word	0x24009108

08003da0 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8003daa:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	600b      	str	r3, [r1, #0]
}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	24009118 	.word	0x24009118

08003db8 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8003dba:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	600b      	str	r3, [r1, #0]
}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	24009118 	.word	0x24009118

08003dc8 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <OTM8009A_GetXSize+0x1c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b123      	cbz	r3, 8003dd8 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8003dce:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8003dd2:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8003dd4:	600b      	str	r3, [r1, #0]
}
 8003dd6:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8003dd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8003ddc:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8003dde:	600b      	str	r3, [r1, #0]
}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	24009118 	.word	0x24009118

08003de8 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <OTM8009A_GetYSize+0x1c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	b123      	cbz	r3, 8003df8 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003dee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8003df2:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8003df4:	600b      	str	r3, [r1, #0]
}
 8003df6:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003df8:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8003dfc:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8003dfe:	600b      	str	r3, [r1, #0]
}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	24009118 	.word	0x24009118

08003e08 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop

08003e18 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop

08003e20 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop

08003e28 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop

08003e30 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop

08003e38 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003e38:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e3a:	6884      	ldr	r4, [r0, #8]
 8003e3c:	8800      	ldrh	r0, [r0, #0]
 8003e3e:	46a4      	mov	ip, r4
}
 8003e40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e44:	4760      	bx	ip
 8003e46:	bf00      	nop

08003e48 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e48:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e4a:	6844      	ldr	r4, [r0, #4]
 8003e4c:	8800      	ldrh	r0, [r0, #0]
 8003e4e:	46a4      	mov	ip, r4
}
 8003e50:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e54:	4760      	bx	ip
 8003e56:	bf00      	nop

08003e58 <OTM8009A_Init>:
{
 8003e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f100 0710 	add.w	r7, r0, #16
{
 8003e62:	b082      	sub	sp, #8
 8003e64:	4680      	mov	r8, r0
 8003e66:	4689      	mov	r9, r1
 8003e68:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4ae0      	ldr	r2, [pc, #896]	; (80041f0 <OTM8009A_Init+0x398>)
 8003e6e:	4638      	mov	r0, r7
 8003e70:	f000 fcd6 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003e74:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003e76:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003e78:	4ade      	ldr	r2, [pc, #888]	; (80041f4 <OTM8009A_Init+0x39c>)
 8003e7a:	21ff      	movs	r1, #255	; 0xff
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f000 fccf 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003e82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003e84:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003e86:	4adc      	ldr	r2, [pc, #880]	; (80041f8 <OTM8009A_Init+0x3a0>)
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f000 fcc8 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8003e90:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003e92:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003e94:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003e96:	4ad9      	ldr	r2, [pc, #868]	; (80041fc <OTM8009A_Init+0x3a4>)
 8003e98:	21ff      	movs	r1, #255	; 0xff
 8003e9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003e9c:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003e9e:	f000 fcbf 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003ea2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003ea4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003ea6:	4ad4      	ldr	r2, [pc, #848]	; (80041f8 <OTM8009A_Init+0x3a0>)
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f000 fcb8 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8003eb0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003eb2:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4ad2      	ldr	r2, [pc, #840]	; (8004200 <OTM8009A_Init+0x3a8>)
 8003eb8:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003eba:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f000 fcaf 	bl	8004820 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003ec2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8003ec6:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8003ec8:	4798      	blx	r3
 8003eca:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003ecc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003ed0:	4798      	blx	r3
 8003ed2:	1b00      	subs	r0, r0, r4
 8003ed4:	2809      	cmp	r0, #9
 8003ed6:	d9f9      	bls.n	8003ecc <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4aca      	ldr	r2, [pc, #808]	; (8004204 <OTM8009A_Init+0x3ac>)
 8003edc:	4638      	mov	r0, r7
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f000 fc9e 	bl	8004820 <otm8009a_write_reg>
 8003ee4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	4ac7      	ldr	r2, [pc, #796]	; (8004208 <OTM8009A_Init+0x3b0>)
 8003eea:	21c4      	movs	r1, #196	; 0xc4
 8003eec:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003eee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003ef0:	f000 fc96 	bl	8004820 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8003ef4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003ef8:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8003efa:	4798      	blx	r3
 8003efc:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003f02:	4798      	blx	r3
 8003f04:	1b40      	subs	r0, r0, r5
 8003f06:	2809      	cmp	r0, #9
 8003f08:	d9f9      	bls.n	8003efe <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	4abf      	ldr	r2, [pc, #764]	; (800420c <OTM8009A_Init+0x3b4>)
 8003f0e:	4638      	mov	r0, r7
 8003f10:	4619      	mov	r1, r3
 8003f12:	f000 fc85 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f18:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f1a:	4abd      	ldr	r2, [pc, #756]	; (8004210 <OTM8009A_Init+0x3b8>)
 8003f1c:	21c5      	movs	r1, #197	; 0xc5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f000 fc7e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003f26:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f28:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4ab9      	ldr	r2, [pc, #740]	; (8004214 <OTM8009A_Init+0x3bc>)
 8003f2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003f30:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f32:	f000 fc75 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003f36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f38:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003f3a:	4ab7      	ldr	r2, [pc, #732]	; (8004218 <OTM8009A_Init+0x3c0>)
 8003f3c:	21c5      	movs	r1, #197	; 0xc5
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f000 fc6e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003f44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003f46:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003f48:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4ab3      	ldr	r2, [pc, #716]	; (800421c <OTM8009A_Init+0x3c4>)
 8003f4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003f50:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003f52:	f000 fc65 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003f56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003f58:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003f5a:	4ab1      	ldr	r2, [pc, #708]	; (8004220 <OTM8009A_Init+0x3c8>)
 8003f5c:	21c0      	movs	r1, #192	; 0xc0
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f000 fc5e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003f64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003f66:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003f68:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4aa0      	ldr	r2, [pc, #640]	; (80041f0 <OTM8009A_Init+0x398>)
 8003f6e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003f70:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003f72:	f000 fc55 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003f76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003f78:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003f7a:	4aaa      	ldr	r2, [pc, #680]	; (8004224 <OTM8009A_Init+0x3cc>)
 8003f7c:	21d9      	movs	r1, #217	; 0xd9
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f000 fc4e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003f84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003f86:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003f88:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4aa6      	ldr	r2, [pc, #664]	; (8004228 <OTM8009A_Init+0x3d0>)
 8003f8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003f90:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003f92:	f000 fc45 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003f96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003f98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003f9a:	4aa4      	ldr	r2, [pc, #656]	; (800422c <OTM8009A_Init+0x3d4>)
 8003f9c:	21c1      	movs	r1, #193	; 0xc1
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f000 fc3e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003fa4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003fa6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003fa8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003faa:	4619      	mov	r1, r3
 8003fac:	4aa0      	ldr	r2, [pc, #640]	; (8004230 <OTM8009A_Init+0x3d8>)
 8003fae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8003fb0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003fb2:	f000 fc35 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8003fb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003fb8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8003fba:	4a9e      	ldr	r2, [pc, #632]	; (8004234 <OTM8009A_Init+0x3dc>)
 8003fbc:	21c1      	movs	r1, #193	; 0xc1
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f000 fc2e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8003fc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003fc6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8003fc8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4a9a      	ldr	r2, [pc, #616]	; (8004238 <OTM8009A_Init+0x3e0>)
 8003fce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8003fd0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8003fd2:	f000 fc25 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8003fd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8003fd8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8003fda:	4a98      	ldr	r2, [pc, #608]	; (800423c <OTM8009A_Init+0x3e4>)
 8003fdc:	21c5      	movs	r1, #197	; 0xc5
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f000 fc1e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8003fe4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8003fe6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8003fe8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8003fea:	4619      	mov	r1, r3
 8003fec:	4a94      	ldr	r2, [pc, #592]	; (8004240 <OTM8009A_Init+0x3e8>)
 8003fee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8003ff0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8003ff2:	f000 fc15 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003ff6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8003ff8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003ffa:	4a87      	ldr	r2, [pc, #540]	; (8004218 <OTM8009A_Init+0x3c0>)
 8003ffc:	21c5      	movs	r1, #197	; 0xc5
 8003ffe:	4638      	mov	r0, r7
 8004000:	f000 fc0e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004004:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004006:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004008:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800400a:	4619      	mov	r1, r3
 800400c:	4a78      	ldr	r2, [pc, #480]	; (80041f0 <OTM8009A_Init+0x398>)
 800400e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004010:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004012:	f000 fc05 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004016:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004018:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800401a:	4a8a      	ldr	r2, [pc, #552]	; (8004244 <OTM8009A_Init+0x3ec>)
 800401c:	21d8      	movs	r1, #216	; 0xd8
 800401e:	4638      	mov	r0, r7
 8004020:	f000 fbfe 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004024:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004026:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004028:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800402a:	4619      	mov	r1, r3
 800402c:	4a86      	ldr	r2, [pc, #536]	; (8004248 <OTM8009A_Init+0x3f0>)
 800402e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004030:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004032:	f000 fbf5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004036:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004038:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800403a:	4a84      	ldr	r2, [pc, #528]	; (800424c <OTM8009A_Init+0x3f4>)
 800403c:	21c5      	movs	r1, #197	; 0xc5
 800403e:	4638      	mov	r0, r7
 8004040:	f000 fbee 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004044:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004046:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004048:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800404a:	4619      	mov	r1, r3
 800404c:	4a80      	ldr	r2, [pc, #512]	; (8004250 <OTM8009A_Init+0x3f8>)
 800404e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004050:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004052:	f000 fbe5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004056:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004058:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800405a:	4a7e      	ldr	r2, [pc, #504]	; (8004254 <OTM8009A_Init+0x3fc>)
 800405c:	21c0      	movs	r1, #192	; 0xc0
 800405e:	4638      	mov	r0, r7
 8004060:	f000 fbde 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004064:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004066:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004068:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800406a:	4619      	mov	r1, r3
 800406c:	4a7a      	ldr	r2, [pc, #488]	; (8004258 <OTM8009A_Init+0x400>)
 800406e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004070:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004072:	f000 fbd5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004076:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004078:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800407a:	4a78      	ldr	r2, [pc, #480]	; (800425c <OTM8009A_Init+0x404>)
 800407c:	21c5      	movs	r1, #197	; 0xc5
 800407e:	4638      	mov	r0, r7
 8004080:	f000 fbce 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004084:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004086:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004088:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800408a:	4619      	mov	r1, r3
 800408c:	4a66      	ldr	r2, [pc, #408]	; (8004228 <OTM8009A_Init+0x3d0>)
 800408e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004090:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004092:	f000 fbc5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004096:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004098:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800409a:	4a71      	ldr	r2, [pc, #452]	; (8004260 <OTM8009A_Init+0x408>)
 800409c:	21c4      	movs	r1, #196	; 0xc4
 800409e:	4638      	mov	r0, r7
 80040a0:	f000 fbbe 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80040a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80040a6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80040a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80040aa:	4619      	mov	r1, r3
 80040ac:	4a60      	ldr	r2, [pc, #384]	; (8004230 <OTM8009A_Init+0x3d8>)
 80040ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80040b0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80040b2:	f000 fbb5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80040b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80040b8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80040ba:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <OTM8009A_Init+0x40c>)
 80040bc:	21c1      	movs	r1, #193	; 0xc1
 80040be:	4638      	mov	r0, r7
 80040c0:	f000 fbae 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80040c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80040c6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80040c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80040ca:	4619      	mov	r1, r3
 80040cc:	4a66      	ldr	r2, [pc, #408]	; (8004268 <OTM8009A_Init+0x410>)
 80040ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80040d0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80040d2:	f000 fba5 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80040d6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80040d8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80040da:	4a64      	ldr	r2, [pc, #400]	; (800426c <OTM8009A_Init+0x414>)
 80040dc:	21b3      	movs	r1, #179	; 0xb3
 80040de:	4638      	mov	r0, r7
 80040e0:	f000 fb9e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80040e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80040e6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80040e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80040ea:	4619      	mov	r1, r3
 80040ec:	4a42      	ldr	r2, [pc, #264]	; (80041f8 <OTM8009A_Init+0x3a0>)
 80040ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80040f0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80040f2:	f000 fb95 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80040f6:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80040f8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80040fa:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <OTM8009A_Init+0x418>)
 80040fc:	21ce      	movs	r1, #206	; 0xce
 80040fe:	4638      	mov	r0, r7
 8004100:	f000 fb8e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004104:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004106:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004108:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800410a:	4619      	mov	r1, r3
 800410c:	4a59      	ldr	r2, [pc, #356]	; (8004274 <OTM8009A_Init+0x41c>)
 800410e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004110:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004112:	f000 fb85 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004116:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004118:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800411a:	4a57      	ldr	r2, [pc, #348]	; (8004278 <OTM8009A_Init+0x420>)
 800411c:	21ce      	movs	r1, #206	; 0xce
 800411e:	4638      	mov	r0, r7
 8004120:	f000 fb7e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004124:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004126:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004128:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800412a:	4619      	mov	r1, r3
 800412c:	4a53      	ldr	r2, [pc, #332]	; (800427c <OTM8009A_Init+0x424>)
 800412e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004130:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004132:	f000 fb75 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004136:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004138:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800413a:	4a51      	ldr	r2, [pc, #324]	; (8004280 <OTM8009A_Init+0x428>)
 800413c:	21ce      	movs	r1, #206	; 0xce
 800413e:	4638      	mov	r0, r7
 8004140:	f000 fb6e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004144:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004146:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004148:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800414a:	4619      	mov	r1, r3
 800414c:	4a4d      	ldr	r2, [pc, #308]	; (8004284 <OTM8009A_Init+0x42c>)
 800414e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004150:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004152:	f000 fb65 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004156:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004158:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800415a:	4a4b      	ldr	r2, [pc, #300]	; (8004288 <OTM8009A_Init+0x430>)
 800415c:	21cf      	movs	r1, #207	; 0xcf
 800415e:	4638      	mov	r0, r7
 8004160:	f000 fb5e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004164:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004166:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004168:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800416a:	4619      	mov	r1, r3
 800416c:	4a47      	ldr	r2, [pc, #284]	; (800428c <OTM8009A_Init+0x434>)
 800416e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004170:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004172:	f000 fb55 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004176:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004178:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800417a:	4a45      	ldr	r2, [pc, #276]	; (8004290 <OTM8009A_Init+0x438>)
 800417c:	21cf      	movs	r1, #207	; 0xcf
 800417e:	4638      	mov	r0, r7
 8004180:	f000 fb4e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004184:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004186:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004188:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800418a:	4619      	mov	r1, r3
 800418c:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <OTM8009A_Init+0x3a0>)
 800418e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004190:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004192:	f000 fb45 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004196:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004198:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800419a:	4a3e      	ldr	r2, [pc, #248]	; (8004294 <OTM8009A_Init+0x43c>)
 800419c:	21cb      	movs	r1, #203	; 0xcb
 800419e:	4638      	mov	r0, r7
 80041a0:	f000 fb3e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80041a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041a6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80041a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80041aa:	4619      	mov	r1, r3
 80041ac:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <OTM8009A_Init+0x440>)
 80041ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80041b0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80041b2:	f000 fb35 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80041b6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80041b8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80041ba:	4a38      	ldr	r2, [pc, #224]	; (800429c <OTM8009A_Init+0x444>)
 80041bc:	21cb      	movs	r1, #203	; 0xcb
 80041be:	4638      	mov	r0, r7
 80041c0:	f000 fb2e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80041c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80041c6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80041c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80041ca:	4619      	mov	r1, r3
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <OTM8009A_Init+0x41c>)
 80041ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80041d0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80041d2:	f000 fb25 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80041d6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80041d8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80041da:	4a31      	ldr	r2, [pc, #196]	; (80042a0 <OTM8009A_Init+0x448>)
 80041dc:	21cb      	movs	r1, #203	; 0xcb
 80041de:	4638      	mov	r0, r7
 80041e0:	f000 fb1e 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80041e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80041e6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80041e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80041ea:	4619      	mov	r1, r3
 80041ec:	e05a      	b.n	80042a4 <OTM8009A_Init+0x44c>
 80041ee:	bf00      	nop
 80041f0:	08008615 	.word	0x08008615
 80041f4:	080084e4 	.word	0x080084e4
 80041f8:	08008616 	.word	0x08008616
 80041fc:	08008570 	.word	0x08008570
 8004200:	08008617 	.word	0x08008617
 8004204:	08008618 	.word	0x08008618
 8004208:	08008619 	.word	0x08008619
 800420c:	0800861a 	.word	0x0800861a
 8004210:	0800861b 	.word	0x0800861b
 8004214:	0800861c 	.word	0x0800861c
 8004218:	0800861d 	.word	0x0800861d
 800421c:	0800861e 	.word	0x0800861e
 8004220:	0800861f 	.word	0x0800861f
 8004224:	08008620 	.word	0x08008620
 8004228:	08008621 	.word	0x08008621
 800422c:	08008622 	.word	0x08008622
 8004230:	08008623 	.word	0x08008623
 8004234:	08008624 	.word	0x08008624
 8004238:	08008625 	.word	0x08008625
 800423c:	08008626 	.word	0x08008626
 8004240:	08008627 	.word	0x08008627
 8004244:	080085e4 	.word	0x080085e4
 8004248:	08008628 	.word	0x08008628
 800424c:	08008629 	.word	0x08008629
 8004250:	0800862a 	.word	0x0800862a
 8004254:	0800862b 	.word	0x0800862b
 8004258:	0800862c 	.word	0x0800862c
 800425c:	0800862d 	.word	0x0800862d
 8004260:	0800862e 	.word	0x0800862e
 8004264:	0800862f 	.word	0x0800862f
 8004268:	08008630 	.word	0x08008630
 800426c:	080085e8 	.word	0x080085e8
 8004270:	080085ec 	.word	0x080085ec
 8004274:	08008631 	.word	0x08008631
 8004278:	080085f4 	.word	0x080085f4
 800427c:	08008632 	.word	0x08008632
 8004280:	08008604 	.word	0x08008604
 8004284:	08008633 	.word	0x08008633
 8004288:	080084e8 	.word	0x080084e8
 800428c:	08008634 	.word	0x08008634
 8004290:	08008641 	.word	0x08008641
 8004294:	080084f4 	.word	0x080084f4
 8004298:	08008635 	.word	0x08008635
 800429c:	08008500 	.word	0x08008500
 80042a0:	08008510 	.word	0x08008510
 80042a4:	4ad1      	ldr	r2, [pc, #836]	; (80045ec <OTM8009A_Init+0x794>)
 80042a6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80042a8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80042aa:	f000 fab9 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80042ae:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80042b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80042b2:	4acf      	ldr	r2, [pc, #828]	; (80045f0 <OTM8009A_Init+0x798>)
 80042b4:	21cb      	movs	r1, #203	; 0xcb
 80042b6:	4638      	mov	r0, r7
 80042b8:	f000 fab2 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80042bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80042be:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80042c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80042c2:	4619      	mov	r1, r3
 80042c4:	4acb      	ldr	r2, [pc, #812]	; (80045f4 <OTM8009A_Init+0x79c>)
 80042c6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80042c8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80042ca:	f000 faa9 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80042ce:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80042d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80042d2:	4ac9      	ldr	r2, [pc, #804]	; (80045f8 <OTM8009A_Init+0x7a0>)
 80042d4:	21cb      	movs	r1, #203	; 0xcb
 80042d6:	4638      	mov	r0, r7
 80042d8:	f000 faa2 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80042dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80042de:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80042e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80042e2:	4619      	mov	r1, r3
 80042e4:	4ac5      	ldr	r2, [pc, #788]	; (80045fc <OTM8009A_Init+0x7a4>)
 80042e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80042e8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80042ea:	f000 fa99 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80042ee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80042f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80042f2:	4ac3      	ldr	r2, [pc, #780]	; (8004600 <OTM8009A_Init+0x7a8>)
 80042f4:	21cb      	movs	r1, #203	; 0xcb
 80042f6:	4638      	mov	r0, r7
 80042f8:	f000 fa92 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80042fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80042fe:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004300:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004302:	4619      	mov	r1, r3
 8004304:	4abf      	ldr	r2, [pc, #764]	; (8004604 <OTM8009A_Init+0x7ac>)
 8004306:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004308:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800430a:	f000 fa89 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800430e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004310:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004312:	4abd      	ldr	r2, [pc, #756]	; (8004608 <OTM8009A_Init+0x7b0>)
 8004314:	21cb      	movs	r1, #203	; 0xcb
 8004316:	4638      	mov	r0, r7
 8004318:	f000 fa82 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800431c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800431e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004320:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004322:	4619      	mov	r1, r3
 8004324:	4ab9      	ldr	r2, [pc, #740]	; (800460c <OTM8009A_Init+0x7b4>)
 8004326:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004328:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800432a:	f000 fa79 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800432e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004330:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004332:	4ab7      	ldr	r2, [pc, #732]	; (8004610 <OTM8009A_Init+0x7b8>)
 8004334:	21cb      	movs	r1, #203	; 0xcb
 8004336:	4638      	mov	r0, r7
 8004338:	f000 fa72 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800433c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800433e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004340:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004342:	4619      	mov	r1, r3
 8004344:	4ab3      	ldr	r2, [pc, #716]	; (8004614 <OTM8009A_Init+0x7bc>)
 8004346:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004348:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800434a:	f000 fa69 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800434e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004350:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004352:	4ab1      	ldr	r2, [pc, #708]	; (8004618 <OTM8009A_Init+0x7c0>)
 8004354:	21cc      	movs	r1, #204	; 0xcc
 8004356:	4638      	mov	r0, r7
 8004358:	f000 fa62 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800435c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800435e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004360:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004362:	4619      	mov	r1, r3
 8004364:	4aad      	ldr	r2, [pc, #692]	; (800461c <OTM8009A_Init+0x7c4>)
 8004366:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004368:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800436a:	f000 fa59 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800436e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004370:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004372:	4aab      	ldr	r2, [pc, #684]	; (8004620 <OTM8009A_Init+0x7c8>)
 8004374:	21cc      	movs	r1, #204	; 0xcc
 8004376:	4638      	mov	r0, r7
 8004378:	f000 fa52 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800437c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800437e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004380:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004382:	4619      	mov	r1, r3
 8004384:	4aa7      	ldr	r2, [pc, #668]	; (8004624 <OTM8009A_Init+0x7cc>)
 8004386:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004388:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800438a:	f000 fa49 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800438e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004390:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004392:	4aa5      	ldr	r2, [pc, #660]	; (8004628 <OTM8009A_Init+0x7d0>)
 8004394:	21cc      	movs	r1, #204	; 0xcc
 8004396:	4638      	mov	r0, r7
 8004398:	f000 fa42 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800439c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800439e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80043a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80043a2:	4619      	mov	r1, r3
 80043a4:	4a91      	ldr	r2, [pc, #580]	; (80045ec <OTM8009A_Init+0x794>)
 80043a6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80043a8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80043aa:	f000 fa39 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80043ae:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80043b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80043b2:	4a9e      	ldr	r2, [pc, #632]	; (800462c <OTM8009A_Init+0x7d4>)
 80043b4:	21cc      	movs	r1, #204	; 0xcc
 80043b6:	4638      	mov	r0, r7
 80043b8:	f000 fa32 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80043bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80043be:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80043c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80043c2:	4619      	mov	r1, r3
 80043c4:	4a8b      	ldr	r2, [pc, #556]	; (80045f4 <OTM8009A_Init+0x79c>)
 80043c6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80043c8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80043ca:	f000 fa29 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80043ce:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80043d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80043d2:	4a97      	ldr	r2, [pc, #604]	; (8004630 <OTM8009A_Init+0x7d8>)
 80043d4:	21cc      	movs	r1, #204	; 0xcc
 80043d6:	4638      	mov	r0, r7
 80043d8:	f000 fa22 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80043dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80043de:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80043e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80043e2:	4619      	mov	r1, r3
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <OTM8009A_Init+0x7a4>)
 80043e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80043e8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80043ea:	f000 fa19 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80043ee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80043f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80043f2:	4a90      	ldr	r2, [pc, #576]	; (8004634 <OTM8009A_Init+0x7dc>)
 80043f4:	21cc      	movs	r1, #204	; 0xcc
 80043f6:	4638      	mov	r0, r7
 80043f8:	f000 fa12 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80043fe:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004400:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004402:	4619      	mov	r1, r3
 8004404:	4a8c      	ldr	r2, [pc, #560]	; (8004638 <OTM8009A_Init+0x7e0>)
 8004406:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004408:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800440a:	f000 fa09 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800440e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004410:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004412:	4a8a      	ldr	r2, [pc, #552]	; (800463c <OTM8009A_Init+0x7e4>)
 8004414:	21c5      	movs	r1, #197	; 0xc5
 8004416:	4638      	mov	r0, r7
 8004418:	f000 fa02 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800441c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800441e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004420:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004422:	4619      	mov	r1, r3
 8004424:	4a86      	ldr	r2, [pc, #536]	; (8004640 <OTM8009A_Init+0x7e8>)
 8004426:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004428:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800442a:	f000 f9f9 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800442e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004430:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004432:	4a84      	ldr	r2, [pc, #528]	; (8004644 <OTM8009A_Init+0x7ec>)
 8004434:	21f5      	movs	r1, #245	; 0xf5
 8004436:	4638      	mov	r0, r7
 8004438:	f000 f9f2 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800443c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800443e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004440:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004442:	4619      	mov	r1, r3
 8004444:	4a80      	ldr	r2, [pc, #512]	; (8004648 <OTM8009A_Init+0x7f0>)
 8004446:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004448:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800444a:	f000 f9e9 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800444e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004450:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004452:	4a7e      	ldr	r2, [pc, #504]	; (800464c <OTM8009A_Init+0x7f4>)
 8004454:	21c6      	movs	r1, #198	; 0xc6
 8004456:	4638      	mov	r0, r7
 8004458:	f000 f9e2 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800445c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800445e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004460:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004462:	4619      	mov	r1, r3
 8004464:	4a7a      	ldr	r2, [pc, #488]	; (8004650 <OTM8009A_Init+0x7f8>)
 8004466:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004468:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800446a:	f000 f9d9 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800446e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004470:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004472:	4a78      	ldr	r2, [pc, #480]	; (8004654 <OTM8009A_Init+0x7fc>)
 8004474:	21ff      	movs	r1, #255	; 0xff
 8004476:	4638      	mov	r0, r7
 8004478:	f000 f9d2 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800447c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800447e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004480:	4a73      	ldr	r2, [pc, #460]	; (8004650 <OTM8009A_Init+0x7f8>)
 8004482:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004484:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004486:	4638      	mov	r0, r7
 8004488:	f000 f9ca 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800448c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800448e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004490:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004492:	4619      	mov	r1, r3
 8004494:	4a6e      	ldr	r2, [pc, #440]	; (8004650 <OTM8009A_Init+0x7f8>)
 8004496:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004498:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800449a:	f000 f9c1 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800449e:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80044a2:	4a6d      	ldr	r2, [pc, #436]	; (8004658 <OTM8009A_Init+0x800>)
 80044a4:	21e1      	movs	r1, #225	; 0xe1
 80044a6:	4638      	mov	r0, r7
 80044a8:	f000 f9ba 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044ae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80044b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044b2:	4619      	mov	r1, r3
 80044b4:	4a66      	ldr	r2, [pc, #408]	; (8004650 <OTM8009A_Init+0x7f8>)
 80044b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80044b8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044ba:	f000 f9b1 	bl	8004820 <otm8009a_write_reg>
 80044be:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80044c0:	2310      	movs	r3, #16
 80044c2:	4a66      	ldr	r2, [pc, #408]	; (800465c <OTM8009A_Init+0x804>)
 80044c4:	21e2      	movs	r1, #226	; 0xe2
 80044c6:	4638      	mov	r0, r7
 80044c8:	f000 f9aa 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044cc:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80044ce:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80044d0:	2300      	movs	r3, #0
 80044d2:	4a63      	ldr	r2, [pc, #396]	; (8004660 <OTM8009A_Init+0x808>)
 80044d4:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80044d6:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80044d8:	4638      	mov	r0, r7
 80044da:	f000 f9a1 	bl	8004820 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80044de:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80044e2:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80044e4:	4798      	blx	r3
 80044e6:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80044e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80044ec:	4798      	blx	r3
 80044ee:	1b40      	subs	r0, r0, r5
 80044f0:	2877      	cmp	r0, #119	; 0x77
 80044f2:	d9f9      	bls.n	80044e8 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 80044f4:	f1b9 0f00 	cmp.w	r9, #0
 80044f8:	d074      	beq.n	80045e4 <OTM8009A_Init+0x78c>
 80044fa:	f1b9 0f02 	cmp.w	r9, #2
 80044fe:	d14f      	bne.n	80045a0 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004500:	2300      	movs	r3, #0
 8004502:	4a58      	ldr	r2, [pc, #352]	; (8004664 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004504:	213a      	movs	r1, #58	; 0x3a
 8004506:	4638      	mov	r0, r7
 8004508:	f000 f98a 	bl	8004820 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800450c:	4d56      	ldr	r5, [pc, #344]	; (8004668 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800450e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004512:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004514:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004518:	d046      	beq.n	80045a8 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800451a:	2300      	movs	r3, #0
 800451c:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800451e:	2300      	movs	r3, #0
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <OTM8009A_Init+0x814>)
 8004522:	2151      	movs	r1, #81	; 0x51
 8004524:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004526:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004528:	f000 f97a 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800452c:	4a50      	ldr	r2, [pc, #320]	; (8004670 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800452e:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004532:	4653      	mov	r3, sl
 8004534:	2153      	movs	r1, #83	; 0x53
 8004536:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004538:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800453c:	f000 f970 	bl	8004820 <otm8009a_write_reg>
 8004540:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004542:	4653      	mov	r3, sl
 8004544:	4a4b      	ldr	r2, [pc, #300]	; (8004674 <OTM8009A_Init+0x81c>)
 8004546:	2155      	movs	r1, #85	; 0x55
 8004548:	4638      	mov	r0, r7
 800454a:	f000 f969 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800454e:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004550:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004552:	4653      	mov	r3, sl
 8004554:	4a48      	ldr	r2, [pc, #288]	; (8004678 <OTM8009A_Init+0x820>)
 8004556:	215e      	movs	r1, #94	; 0x5e
 8004558:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800455a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800455c:	f000 f960 	bl	8004820 <otm8009a_write_reg>
 8004560:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004562:	4653      	mov	r3, sl
 8004564:	4a45      	ldr	r2, [pc, #276]	; (800467c <OTM8009A_Init+0x824>)
 8004566:	2129      	movs	r1, #41	; 0x29
 8004568:	4638      	mov	r0, r7
 800456a:	f000 f959 	bl	8004820 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800456e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004570:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004572:	4653      	mov	r3, sl
 8004574:	4651      	mov	r1, sl
 8004576:	4a36      	ldr	r2, [pc, #216]	; (8004650 <OTM8009A_Init+0x7f8>)
 8004578:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800457a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800457c:	f000 f950 	bl	8004820 <otm8009a_write_reg>
 8004580:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004582:	4653      	mov	r3, sl
 8004584:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004586:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004588:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <OTM8009A_Init+0x828>)
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	f000 f948 	bl	8004820 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004590:	42c4      	cmn	r4, r0
}
 8004592:	bf14      	ite	ne
 8004594:	f04f 30ff 	movne.w	r0, #4294967295
 8004598:	4650      	moveq	r0, sl
 800459a:	b002      	add	sp, #8
 800459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80045a0:	f1ba 0f01 	cmp.w	sl, #1
 80045a4:	4d30      	ldr	r5, [pc, #192]	; (8004668 <OTM8009A_Init+0x810>)
 80045a6:	d1b8      	bne.n	800451a <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80045a8:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80045aa:	2300      	movs	r3, #0
 80045ac:	f10d 0207 	add.w	r2, sp, #7
 80045b0:	2136      	movs	r1, #54	; 0x36
 80045b2:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80045b4:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80045b8:	f000 f932 	bl	8004820 <otm8009a_write_reg>
 80045bc:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80045be:	2304      	movs	r3, #4
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <OTM8009A_Init+0x82c>)
 80045c2:	212a      	movs	r1, #42	; 0x2a
 80045c4:	4638      	mov	r0, r7
 80045c6:	f000 f92b 	bl	8004820 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80045ca:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80045cc:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80045ce:	2304      	movs	r3, #4
 80045d0:	4a2d      	ldr	r2, [pc, #180]	; (8004688 <OTM8009A_Init+0x830>)
 80045d2:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80045d4:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80045d6:	4638      	mov	r0, r7
 80045d8:	f000 f922 	bl	8004820 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80045dc:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80045e0:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80045e2:	e79c      	b.n	800451e <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80045e4:	464b      	mov	r3, r9
 80045e6:	4a29      	ldr	r2, [pc, #164]	; (800468c <OTM8009A_Init+0x834>)
 80045e8:	e78c      	b.n	8004504 <OTM8009A_Init+0x6ac>
 80045ea:	bf00      	nop
 80045ec:	08008632 	.word	0x08008632
 80045f0:	08008520 	.word	0x08008520
 80045f4:	08008633 	.word	0x08008633
 80045f8:	0800852c 	.word	0x0800852c
 80045fc:	08008634 	.word	0x08008634
 8004600:	0800853c 	.word	0x0800853c
 8004604:	08008636 	.word	0x08008636
 8004608:	0800854c 	.word	0x0800854c
 800460c:	08008637 	.word	0x08008637
 8004610:	08008558 	.word	0x08008558
 8004614:	08008616 	.word	0x08008616
 8004618:	08008564 	.word	0x08008564
 800461c:	08008635 	.word	0x08008635
 8004620:	08008574 	.word	0x08008574
 8004624:	08008631 	.word	0x08008631
 8004628:	08008584 	.word	0x08008584
 800462c:	08008594 	.word	0x08008594
 8004630:	080085a0 	.word	0x080085a0
 8004634:	080085b0 	.word	0x080085b0
 8004638:	08008621 	.word	0x08008621
 800463c:	08008642 	.word	0x08008642
 8004640:	08008643 	.word	0x08008643
 8004644:	08008644 	.word	0x08008644
 8004648:	08008645 	.word	0x08008645
 800464c:	08008646 	.word	0x08008646
 8004650:	08008615 	.word	0x08008615
 8004654:	080085c0 	.word	0x080085c0
 8004658:	080085c4 	.word	0x080085c4
 800465c:	080085d4 	.word	0x080085d4
 8004660:	08008638 	.word	0x08008638
 8004664:	08008639 	.word	0x08008639
 8004668:	24009118 	.word	0x24009118
 800466c:	0800863b 	.word	0x0800863b
 8004670:	0800863c 	.word	0x0800863c
 8004674:	0800863d 	.word	0x0800863d
 8004678:	0800863e 	.word	0x0800863e
 800467c:	0800863f 	.word	0x0800863f
 8004680:	08008640 	.word	0x08008640
 8004684:	080084dc 	.word	0x080084dc
 8004688:	080084e0 	.word	0x080084e0
 800468c:	0800863a 	.word	0x0800863a

08004690 <OTM8009A_SetBrightness>:
{
 8004690:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004692:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8004696:	4e0b      	ldr	r6, [pc, #44]	; (80046c4 <OTM8009A_SetBrightness+0x34>)
{
 8004698:	b082      	sub	sp, #8
 800469a:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800469c:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80046a0:	2300      	movs	r3, #0
 80046a2:	f10d 0207 	add.w	r2, sp, #7
 80046a6:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80046a8:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80046aa:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80046ac:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80046b0:	f000 f8b6 	bl	8004820 <otm8009a_write_reg>
 80046b4:	b918      	cbnz	r0, 80046be <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <OTM8009A_SetBrightness+0x38>)
 80046b8:	609d      	str	r5, [r3, #8]
}
 80046ba:	b002      	add	sp, #8
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80046c2:	e7fa      	b.n	80046ba <OTM8009A_SetBrightness+0x2a>
 80046c4:	51eb851f 	.word	0x51eb851f
 80046c8:	24009118 	.word	0x24009118

080046cc <OTM8009A_DisplayOn>:
{
 80046cc:	b500      	push	{lr}
 80046ce:	b083      	sub	sp, #12
  uint8_t display = 0;
 80046d0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80046d2:	2129      	movs	r1, #41	; 0x29
 80046d4:	3010      	adds	r0, #16
 80046d6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80046da:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80046de:	f000 f89f 	bl	8004820 <otm8009a_write_reg>
 80046e2:	3800      	subs	r0, #0
 80046e4:	bf18      	it	ne
 80046e6:	2001      	movne	r0, #1
}
 80046e8:	4240      	negs	r0, r0
 80046ea:	b003      	add	sp, #12
 80046ec:	f85d fb04 	ldr.w	pc, [sp], #4

080046f0 <OTM8009A_DisplayOff>:
{
 80046f0:	b500      	push	{lr}
 80046f2:	b083      	sub	sp, #12
  uint8_t display = 0;
 80046f4:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80046f6:	2128      	movs	r1, #40	; 0x28
 80046f8:	3010      	adds	r0, #16
 80046fa:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80046fe:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004702:	f000 f88d 	bl	8004820 <otm8009a_write_reg>
 8004706:	3800      	subs	r0, #0
 8004708:	bf18      	it	ne
 800470a:	2001      	movne	r0, #1
}
 800470c:	4240      	negs	r0, r0
 800470e:	b003      	add	sp, #12
 8004710:	f85d fb04 	ldr.w	pc, [sp], #4

08004714 <OTM8009A_SetOrientation>:
{
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004716:	2360      	movs	r3, #96	; 0x60
{
 8004718:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800471a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800471c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800471e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004722:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004726:	d83e      	bhi.n	80047a6 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004728:	d020      	beq.n	800476c <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800472a:	f100 0510 	add.w	r5, r0, #16
 800472e:	4633      	mov	r3, r6
 8004730:	f10d 0207 	add.w	r2, sp, #7
 8004734:	2136      	movs	r1, #54	; 0x36
 8004736:	4628      	mov	r0, r5
 8004738:	f000 f872 	bl	8004820 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800473c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800473e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <OTM8009A_SetOrientation+0x98>)
 8004742:	212a      	movs	r1, #42	; 0x2a
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f86b 	bl	8004820 <otm8009a_write_reg>
 800474a:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800474c:	2304      	movs	r3, #4
 800474e:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004750:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <OTM8009A_SetOrientation+0x9c>)
 8004754:	212b      	movs	r1, #43	; 0x2b
 8004756:	f000 f863 	bl	8004820 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800475c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800475e:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8004760:	3800      	subs	r0, #0
 8004762:	bf18      	it	ne
 8004764:	2001      	movne	r0, #1
 8004766:	4240      	negs	r0, r0
}
 8004768:	b003      	add	sp, #12
 800476a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800476c:	f100 0510 	add.w	r5, r0, #16
 8004770:	4633      	mov	r3, r6
 8004772:	460f      	mov	r7, r1
 8004774:	f10d 0206 	add.w	r2, sp, #6
 8004778:	2136      	movs	r1, #54	; 0x36
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f850 	bl	8004820 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004780:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004782:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004784:	4a09      	ldr	r2, [pc, #36]	; (80047ac <OTM8009A_SetOrientation+0x98>)
 8004786:	212a      	movs	r1, #42	; 0x2a
 8004788:	4628      	mov	r0, r5
 800478a:	f000 f849 	bl	8004820 <otm8009a_write_reg>
 800478e:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004790:	2304      	movs	r3, #4
 8004792:	4628      	mov	r0, r5
 8004794:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <OTM8009A_SetOrientation+0x9c>)
 8004796:	212b      	movs	r1, #43	; 0x2b
 8004798:	f000 f842 	bl	8004820 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800479c:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80047a0:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80047a2:	601f      	str	r7, [r3, #0]
 80047a4:	e7dc      	b.n	8004760 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80047aa:	e7dd      	b.n	8004768 <OTM8009A_SetOrientation+0x54>
 80047ac:	080084dc 	.word	0x080084dc
 80047b0:	080084e0 	.word	0x080084e0
 80047b4:	24009118 	.word	0x24009118

080047b8 <OTM8009A_ReadID>:
{ 
 80047b8:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80047ba:	3010      	adds	r0, #16
 80047bc:	21da      	movs	r1, #218	; 0xda
{ 
 80047be:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80047c0:	2300      	movs	r3, #0
 80047c2:	f000 f825 	bl	8004810 <otm8009a_read_reg>
 80047c6:	3800      	subs	r0, #0
 80047c8:	bf18      	it	ne
 80047ca:	2001      	movne	r0, #1
}  
 80047cc:	4240      	negs	r0, r0
 80047ce:	bd08      	pop	{r3, pc}

080047d0 <OTM8009A_DrawVLine>:
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop

080047d8 <OTM8009A_GetPixel>:
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80047e0:	b178      	cbz	r0, 8004802 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80047e2:	684a      	ldr	r2, [r1, #4]
 80047e4:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 80047e6:	2000      	movs	r0, #0
{
 80047e8:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 80047ea:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80047ee:	4906      	ldr	r1, [pc, #24]	; (8004808 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80047f0:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80047f2:	4a06      	ldr	r2, [pc, #24]	; (800480c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80047f4:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80047f8:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 80047fc:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004806:	4770      	bx	lr
 8004808:	08003e39 	.word	0x08003e39
 800480c:	08003e49 	.word	0x08003e49

08004810 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004810:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004812:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004816:	46a4      	mov	ip, r4
}
 8004818:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800481c:	4760      	bx	ip
 800481e:	bf00      	nop

08004820 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004820:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004822:	6804      	ldr	r4, [r0, #0]
 8004824:	6880      	ldr	r0, [r0, #8]
 8004826:	46a4      	mov	ip, r4
}
 8004828:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800482c:	4760      	bx	ip
 800482e:	bf00      	nop

08004830 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8004830:	f000 be90 	b.w	8005554 <HAL_GetTick>

08004834 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004834:	b910      	cbnz	r0, 800483c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8004836:	4b03      	ldr	r3, [pc, #12]	; (8004844 <BSP_LCD_SetActiveLayer+0x10>)
 8004838:	6099      	str	r1, [r3, #8]
 800483a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800483c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	24019324 	.word	0x24019324

08004848 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004848:	b918      	cbnz	r0, 8004852 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800484a:	4b03      	ldr	r3, [pc, #12]	; (8004858 <BSP_LCD_GetPixelFormat+0x10>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004852:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004856:	4770      	bx	lr
 8004858:	24019324 	.word	0x24019324

0800485c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800485c:	b948      	cbnz	r0, 8004872 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <BSP_LCD_GetXSize+0x1c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	b11b      	cbz	r3, 800486e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <BSP_LCD_GetXSize+0x20>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	600b      	str	r3, [r1, #0]
 800486c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800486e:	4618      	mov	r0, r3
  }

  return ret;
}
 8004870:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004872:	f06f 0001 	mvn.w	r0, #1
 8004876:	4770      	bx	lr
 8004878:	24009128 	.word	0x24009128
 800487c:	24019324 	.word	0x24019324

08004880 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004880:	b948      	cbnz	r0, 8004896 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <BSP_LCD_GetYSize+0x1c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	b11b      	cbz	r3, 8004892 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <BSP_LCD_GetYSize+0x20>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	600b      	str	r3, [r1, #0]
 8004890:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004892:	4618      	mov	r0, r3
  }

  return ret;
}
 8004894:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004896:	f06f 0001 	mvn.w	r0, #1
 800489a:	4770      	bx	lr
 800489c:	24009128 	.word	0x24009128
 80048a0:	24019324 	.word	0x24019324

080048a4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80048ac:	b39c      	cbz	r4, 8004916 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048ae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80048b2:	4d1a      	ldr	r5, [pc, #104]	; (800491c <BSP_LCD_FillRGBRect+0x78>)
 80048b4:	eb04 0802 	add.w	r8, r4, r2
 80048b8:	eb0b 0e01 	add.w	lr, fp, r1
 80048bc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80048c0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004920 <BSP_LCD_FillRGBRect+0x7c>
 80048c4:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 80048c6:	f1bb 0f00 	cmp.w	fp, #0
 80048ca:	d021      	beq.n	8004910 <BSP_LCD_FillRGBRect+0x6c>
 80048cc:	460c      	mov	r4, r1
 80048ce:	e00a      	b.n	80048e6 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80048d0:	682e      	ldr	r6, [r5, #0]
 80048d2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80048d4:	fb06 4602 	mla	r6, r6, r2, r4
 80048d8:	3401      	adds	r4, #1
 80048da:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80048de:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 80048e0:	6928      	ldr	r0, [r5, #16]
 80048e2:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80048e4:	d014      	beq.n	8004910 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048e6:	68a8      	ldr	r0, [r5, #8]
 80048e8:	f8d3 9000 	ldr.w	r9, [r3]
 80048ec:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80048f0:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048f4:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d0ea      	beq.n	80048d0 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80048fa:	682e      	ldr	r6, [r5, #0]
 80048fc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80048fe:	fb06 4602 	mla	r6, r6, r2, r4
 8004902:	3401      	adds	r4, #1
 8004904:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8004908:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 800490a:	6928      	ldr	r0, [r5, #16]
 800490c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800490e:	d1ea      	bne.n	80048e6 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8004910:	3201      	adds	r2, #1
 8004912:	4542      	cmp	r2, r8
 8004914:	d1d7      	bne.n	80048c6 <BSP_LCD_FillRGBRect+0x22>
}
 8004916:	2000      	movs	r0, #0
 8004918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491c:	24019324 	.word	0x24019324
 8004920:	2401927c 	.word	0x2401927c

08004924 <BSP_LCD_ReadPixel>:
{
 8004924:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004926:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800492a:	4e10      	ldr	r6, [pc, #64]	; (800496c <BSP_LCD_ReadPixel+0x48>)
 800492c:	4f10      	ldr	r7, [pc, #64]	; (8004970 <BSP_LCD_ReadPixel+0x4c>)
 800492e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004932:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004936:	0080      	lsls	r0, r0, #2
 8004938:	68ac      	ldr	r4, [r5, #8]
 800493a:	fb0c 7404 	mla	r4, ip, r4, r7
 800493e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004940:	b94d      	cbnz	r5, 8004956 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004942:	5830      	ldr	r0, [r6, r0]
 8004944:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004946:	fb00 1202 	mla	r2, r0, r2, r1
}
 800494a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800494c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8004950:	bcf0      	pop	{r4, r5, r6, r7}
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004956:	5835      	ldr	r5, [r6, r0]
 8004958:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800495a:	fb05 1202 	mla	r2, r5, r2, r1
 800495e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8004962:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004964:	b292      	uxth	r2, r2
}
 8004966:	bcf0      	pop	{r4, r5, r6, r7}
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	4770      	bx	lr
 800496c:	24019324 	.word	0x24019324
 8004970:	2401927c 	.word	0x2401927c

08004974 <BSP_LCD_WritePixel>:
{
 8004974:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004976:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800497a:	4e0f      	ldr	r6, [pc, #60]	; (80049b8 <BSP_LCD_WritePixel+0x44>)
 800497c:	4f0f      	ldr	r7, [pc, #60]	; (80049bc <BSP_LCD_WritePixel+0x48>)
 800497e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004982:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004986:	0080      	lsls	r0, r0, #2
 8004988:	68ac      	ldr	r4, [r5, #8]
 800498a:	fb0c 7404 	mla	r4, ip, r4, r7
 800498e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004990:	b945      	cbnz	r5, 80049a4 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004992:	5830      	ldr	r0, [r6, r0]
 8004994:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004996:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 800499a:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800499c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80049a0:	bcf0      	pop	{r4, r5, r6, r7}
 80049a2:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80049a4:	5835      	ldr	r5, [r6, r0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80049aa:	fb05 1202 	mla	r2, r5, r2, r1
}
 80049ae:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80049b0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80049b4:	2000      	movs	r0, #0
 80049b6:	4770      	bx	lr
 80049b8:	24019324 	.word	0x24019324
 80049bc:	2401927c 	.word	0x2401927c

080049c0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80049c0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80049c2:	2406      	movs	r4, #6
{
 80049c4:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80049c6:	9101      	str	r1, [sp, #4]
 80049c8:	4601      	mov	r1, r0
 80049ca:	9202      	str	r2, [sp, #8]
 80049cc:	9400      	str	r4, [sp, #0]
 80049ce:	4805      	ldr	r0, [pc, #20]	; (80049e4 <DSI_IO_Read+0x24>)
 80049d0:	f001 fb36 	bl	8006040 <HAL_DSI_Read>
 80049d4:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80049d6:	bf14      	ite	ne
 80049d8:	f06f 0007 	mvnne.w	r0, #7
 80049dc:	2000      	moveq	r0, #0
 80049de:	b004      	add	sp, #16
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	24019340 	.word	0x24019340

080049e8 <BSP_LCD_DrawBitmap>:
{
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80049ec:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80049f0:	4e4f      	ldr	r6, [pc, #316]	; (8004b30 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80049f2:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80049f4:	f04f 0934 	mov.w	r9, #52	; 0x34
 80049f8:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80049fc:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8004a00:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004b3c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a04:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a06:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a0a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a0e:	68b9      	ldr	r1, [r7, #8]
{
 8004a10:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a12:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a14:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a18:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a1c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004a20:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a24:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a26:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004a2a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a2e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a32:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a34:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a38:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004a3c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a40:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a42:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a46:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a4a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a4e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a50:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8004a54:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a56:	4465      	add	r5, ip
 8004a58:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a5a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a5c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004a5e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004a62:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a66:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a68:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004a6c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004a6e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004a72:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8004a78:	d957      	bls.n	8004b2a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8004a7a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8004a7e:	2c08      	cmp	r4, #8
 8004a80:	bf34      	ite	cc
 8004a82:	f04f 0b02 	movcc.w	fp, #2
 8004a86:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004a8a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8004a8e:	9c03      	ldr	r4, [sp, #12]
 8004a90:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004a94:	fb04 f909 	mul.w	r9, r4, r9
 8004a98:	fb09 1505 	mla	r5, r9, r5, r1
 8004a9c:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8004a9e:	f1ba 0f00 	cmp.w	sl, #0
 8004aa2:	d03e      	beq.n	8004b22 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004aa4:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8004aa6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8004aaa:	2700      	movs	r7, #0
 8004aac:	4c21      	ldr	r4, [pc, #132]	; (8004b34 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004aae:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004ab2:	e006      	b.n	8004ac2 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004ab4:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8004ab6:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004ab8:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8004aba:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004abc:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8004ac0:	d02f      	beq.n	8004b22 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004ac2:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004ac4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004ac6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004ace:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8004ad0:	4919      	ldr	r1, [pc, #100]	; (8004b38 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004ad2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8004ad6:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004ada:	bf18      	it	ne
 8004adc:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004ade:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004ae0:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004ae2:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004ae6:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004aea:	4812      	ldr	r0, [pc, #72]	; (8004b34 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8004aec:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004af0:	f000 fe18 	bl	8005724 <HAL_DMA2D_Init>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1dd      	bne.n	8004ab4 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004af8:	2101      	movs	r1, #1
 8004afa:	480e      	ldr	r0, [pc, #56]	; (8004b34 <BSP_LCD_DrawBitmap+0x14c>)
 8004afc:	f000 fef6 	bl	80058ec <HAL_DMA2D_ConfigLayer>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d1d7      	bne.n	8004ab4 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004b04:	2001      	movs	r0, #1
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	4642      	mov	r2, r8
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	9000      	str	r0, [sp, #0]
 8004b0e:	4809      	ldr	r0, [pc, #36]	; (8004b34 <BSP_LCD_DrawBitmap+0x14c>)
 8004b10:	f000 fe4a 	bl	80057a8 <HAL_DMA2D_Start>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1cd      	bne.n	8004ab4 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8004b18:	2132      	movs	r1, #50	; 0x32
 8004b1a:	4806      	ldr	r0, [pc, #24]	; (8004b34 <BSP_LCD_DrawBitmap+0x14c>)
 8004b1c:	f000 fe60 	bl	80057e0 <HAL_DMA2D_PollForTransfer>
 8004b20:	e7c8      	b.n	8004ab4 <BSP_LCD_DrawBitmap+0xcc>
}
 8004b22:	2000      	movs	r0, #0
 8004b24:	b005      	add	sp, #20
 8004b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004b2a:	f04f 0b00 	mov.w	fp, #0
 8004b2e:	e7ac      	b.n	8004a8a <BSP_LCD_DrawBitmap+0xa2>
 8004b30:	24019324 	.word	0x24019324
 8004b34:	2401935c 	.word	0x2401935c
 8004b38:	52001000 	.word	0x52001000
 8004b3c:	2401927c 	.word	0x2401927c

08004b40 <LL_FillBuffer>:
{
 8004b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004b48:	4c28      	ldr	r4, [pc, #160]	; (8004bec <LL_FillBuffer+0xac>)
{
 8004b4a:	4617      	mov	r7, r2
 8004b4c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b4e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8004b52:	4698      	mov	r8, r3
 8004b54:	460e      	mov	r6, r1
 8004b56:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b58:	68c2      	ldr	r2, [r0, #12]
{
 8004b5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004b5c:	2a02      	cmp	r2, #2
 8004b5e:	d00f      	beq.n	8004b80 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004b60:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8004b62:	4c23      	ldr	r4, [pc, #140]	; (8004bf0 <LL_FillBuffer+0xb0>)
 8004b64:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8004b68:	4922      	ldr	r1, [pc, #136]	; (8004bf4 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004b6a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004b6c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8004b6e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8004b70:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004b74:	f000 fdd6 	bl	8005724 <HAL_DMA2D_Init>
 8004b78:	b308      	cbz	r0, 8004bbe <LL_FillBuffer+0x7e>
}
 8004b7a:	b002      	add	sp, #8
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004b80:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8004b84:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8004b88:	f005 041f 	and.w	r4, r5, #31
 8004b8c:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8004b90:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8004b94:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004b98:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8004b9c:	3521      	adds	r5, #33	; 0x21
 8004b9e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8004ba2:	3117      	adds	r1, #23
 8004ba4:	09ad      	lsrs	r5, r5, #6
 8004ba6:	0989      	lsrs	r1, r1, #6
 8004ba8:	022d      	lsls	r5, r5, #8
 8004baa:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8004bae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8004bb2:	3017      	adds	r0, #23
 8004bb4:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8004bb8:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8004bbc:	e7d1      	b.n	8004b62 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 fe93 	bl	80058ec <HAL_DMA2D_ConfigLayer>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d1d7      	bne.n	8004b7a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f8cd 8000 	str.w	r8, [sp]
 8004bd6:	f000 fde7 	bl	80057a8 <HAL_DMA2D_Start>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d1cd      	bne.n	8004b7a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004bde:	4620      	mov	r0, r4
 8004be0:	2119      	movs	r1, #25
}
 8004be2:	b002      	add	sp, #8
 8004be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004be8:	f000 bdfa 	b.w	80057e0 <HAL_DMA2D_PollForTransfer>
 8004bec:	24019324 	.word	0x24019324
 8004bf0:	2401935c 	.word	0x2401935c
 8004bf4:	52001000 	.word	0x52001000

08004bf8 <BSP_LCD_DrawHLine>:
{
 8004bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004bfc:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004c00:	4f12      	ldr	r7, [pc, #72]	; (8004c4c <BSP_LCD_DrawHLine+0x54>)
{
 8004c02:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c04:	f8df e048 	ldr.w	lr, [pc, #72]	; 8004c50 <BSP_LCD_DrawHLine+0x58>
 8004c08:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 8004c0c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004c10:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004c14:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c18:	688d      	ldr	r5, [r1, #8]
{
 8004c1a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c1c:	690e      	ldr	r6, [r1, #16]
 8004c1e:	fb02 4207 	mla	r2, r2, r7, r4
 8004c22:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004c26:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c28:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8004c2a:	bf38      	it	cc
 8004c2c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004c2e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004c30:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004c34:	9a08      	ldr	r2, [sp, #32]
 8004c36:	9400      	str	r4, [sp, #0]
 8004c38:	9201      	str	r2, [sp, #4]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f7ff ff7f 	bl	8004b40 <LL_FillBuffer>
}
 8004c42:	4620      	mov	r0, r4
 8004c44:	b002      	add	sp, #8
 8004c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4a:	bf00      	nop
 8004c4c:	24019324 	.word	0x24019324
 8004c50:	2401927c 	.word	0x2401927c

08004c54 <BSP_LCD_DrawVLine>:
{
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004c58:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004c5c:	4c11      	ldr	r4, [pc, #68]	; (8004ca4 <BSP_LCD_DrawVLine+0x50>)
 8004c5e:	4d12      	ldr	r5, [pc, #72]	; (8004ca8 <BSP_LCD_DrawVLine+0x54>)
 8004c60:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004c64:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8004c68:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004c6c:	eb02 0c03 	add.w	ip, r2, r3
{
 8004c70:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004c72:	68be      	ldr	r6, [r7, #8]
 8004c74:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004c78:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004c7a:	fb08 5606 	mla	r6, r8, r6, r5
 8004c7e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004c80:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004c82:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004c84:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004c86:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8004c8a:	bf88      	it	hi
 8004c8c:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004c8e:	9a08      	ldr	r2, [sp, #32]
 8004c90:	e9cd 4200 	strd	r4, r2, [sp]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f7ff ff53 	bl	8004b40 <LL_FillBuffer>
}
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	b002      	add	sp, #8
 8004c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca2:	bf00      	nop
 8004ca4:	24019324 	.word	0x24019324
 8004ca8:	2401927c 	.word	0x2401927c

08004cac <BSP_LCD_FillRect>:
{
 8004cac:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cae:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8004cb2:	4f0e      	ldr	r7, [pc, #56]	; (8004cec <BSP_LCD_FillRect+0x40>)
 8004cb4:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8004cb8:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <BSP_LCD_FillRect+0x44>)
 8004cba:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 8004cbe:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8004cc2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cc4:	68b7      	ldr	r7, [r6, #8]
 8004cc6:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8004cca:	1ae4      	subs	r4, r4, r3
 8004ccc:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cce:	fb0e 5507 	mla	r5, lr, r7, r5
 8004cd2:	6937      	ldr	r7, [r6, #16]
{
 8004cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004cd6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8004cd8:	9400      	str	r4, [sp, #0]
 8004cda:	fb07 3101 	mla	r1, r7, r1, r3
 8004cde:	9b08      	ldr	r3, [sp, #32]
 8004ce0:	9601      	str	r6, [sp, #4]
 8004ce2:	f7ff ff2d 	bl	8004b40 <LL_FillBuffer>
}
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	b003      	add	sp, #12
 8004cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cec:	24019324 	.word	0x24019324
 8004cf0:	2401927c 	.word	0x2401927c

08004cf4 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8004cf6:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004cf8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004d04:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004d08:	f002 0208 	and.w	r2, r2, #8
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8004d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d14:	f042 0208 	orr.w	r2, r2, #8
 8004d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8004d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d20:	f022 0208 	bic.w	r2, r2, #8
 8004d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004d28:	b002      	add	sp, #8
 8004d2a:	4770      	bx	lr
 8004d2c:	58024400 	.word	0x58024400

08004d30 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8004d32:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d34:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004d38:	f042 0210 	orr.w	r2, r2, #16
 8004d3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004d40:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004d44:	f002 0210 	and.w	r2, r2, #16
 8004d48:	9201      	str	r2, [sp, #4]
 8004d4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004d4c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d4e:	f042 0210 	orr.w	r2, r2, #16
 8004d52:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8004d54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d56:	f022 0210 	bic.w	r2, r2, #16
 8004d5a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004d5c:	b002      	add	sp, #8
 8004d5e:	4770      	bx	lr
 8004d60:	58024400 	.word	0x58024400

08004d64 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8004d66:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8004d68:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004d6c:	f042 0210 	orr.w	r2, r2, #16
 8004d70:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004d74:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004d78:	f002 0210 	and.w	r2, r2, #16
 8004d7c:	9201      	str	r2, [sp, #4]
 8004d7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8004d80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d84:	f042 0210 	orr.w	r2, r2, #16
 8004d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8004d8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d90:	f022 0210 	bic.w	r2, r2, #16
 8004d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004d98:	b002      	add	sp, #8
 8004d9a:	4770      	bx	lr
 8004d9c:	58024400 	.word	0x58024400

08004da0 <DSI_IO_Write>:
  if(Size <= 1U)
 8004da0:	2b01      	cmp	r3, #1
{
 8004da2:	b530      	push	{r4, r5, lr}
 8004da4:	460d      	mov	r5, r1
 8004da6:	b083      	sub	sp, #12
 8004da8:	4601      	mov	r1, r0
  if(Size <= 1U)
 8004daa:	d909      	bls.n	8004dc0 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8004dac:	480a      	ldr	r0, [pc, #40]	; (8004dd8 <DSI_IO_Write+0x38>)
 8004dae:	e9cd 5200 	strd	r5, r2, [sp]
 8004db2:	2239      	movs	r2, #57	; 0x39
 8004db4:	f001 f8d8 	bl	8005f68 <HAL_DSI_LongWrite>
 8004db8:	b958      	cbnz	r0, 8004dd2 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8004dba:	2000      	movs	r0, #0
}
 8004dbc:	b003      	add	sp, #12
 8004dbe:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8004dc0:	5cd0      	ldrb	r0, [r2, r3]
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	2215      	movs	r2, #21
 8004dc6:	9000      	str	r0, [sp, #0]
 8004dc8:	4803      	ldr	r0, [pc, #12]	; (8004dd8 <DSI_IO_Write+0x38>)
 8004dca:	f001 f8b9 	bl	8005f40 <HAL_DSI_ShortWrite>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d0f3      	beq.n	8004dba <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8004dd2:	f06f 0007 	mvn.w	r0, #7
 8004dd6:	e7f1      	b.n	8004dbc <DSI_IO_Write+0x1c>
 8004dd8:	24019340 	.word	0x24019340

08004ddc <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <BSP_LCD_Reset+0x5c>)
 8004dde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8004de6:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8004de8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8004dec:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8004dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8004df2:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004df4:	4c11      	ldr	r4, [pc, #68]	; (8004e3c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004df6:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfc:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004dfe:	4620      	mov	r0, r4
 8004e00:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8004e06:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e08:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8004e0a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8004e0e:	f001 f99f 	bl	8006150 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8004e12:	4629      	mov	r1, r5
 8004e14:	4620      	mov	r0, r4
 8004e16:	2200      	movs	r2, #0
 8004e18:	f001 fab8 	bl	800638c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8004e1c:	2014      	movs	r0, #20
 8004e1e:	f000 fb9f 	bl	8005560 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8004e22:	4632      	mov	r2, r6
 8004e24:	4629      	mov	r1, r5
 8004e26:	4620      	mov	r0, r4
 8004e28:	f001 fab0 	bl	800638c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8004e2c:	200a      	movs	r0, #10
 8004e2e:	f000 fb97 	bl	8005560 <HAL_Delay>
}
 8004e32:	b007      	add	sp, #28
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	58021800 	.word	0x58021800

08004e40 <MX_DSIHOST_DSI_Init>:
{
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8004e44:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8004e48:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8004e4a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8004e4c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004e50:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8004e52:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004e56:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8004e5a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004e5c:	60c6      	str	r6, [r0, #12]
{
 8004e5e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8004e60:	4669      	mov	r1, sp
{
 8004e62:	4604      	mov	r4, r0
 8004e64:	4690      	mov	r8, r2
 8004e66:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8004e68:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8004e6a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8004e6e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8004e72:	f000 fdcd 	bl	8005a10 <HAL_DSI_Init>
 8004e76:	b118      	cbz	r0, 8004e80 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8004e78:	4630      	mov	r0, r6
}
 8004e7a:	b01e      	add	sp, #120	; 0x78
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004e80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <MX_DSIHOST_DSI_Init+0xd0>)
 8004e86:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004e88:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004e8a:	fb03 2207 	mla	r2, r3, r7, r2
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8004e90:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8004e92:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004e94:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8004e98:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8004e9c:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8004ea0:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004ea4:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8004ea6:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8004ea8:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8004eaa:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8004eac:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8004eae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8004eb2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8004eb6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8004eba:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8004ebc:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8004ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8004ec2:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8004ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8004ec8:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8004eca:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8004ece:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8004ed2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8004ed6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8004eda:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8004edc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8004ee0:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004ee2:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8004ee6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8004eea:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004eee:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8004ef0:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8004ef4:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8004ef8:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8004efc:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8004f00:	f000 febe 	bl	8005c80 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8004f04:	3800      	subs	r0, #0
 8004f06:	bf18      	it	ne
 8004f08:	2001      	movne	r0, #1
}
 8004f0a:	b01e      	add	sp, #120	; 0x78
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	0042c1d8 	.word	0x0042c1d8
 8004f14:	4c751ce3 	.word	0x4c751ce3

08004f18 <MX_LTDC_Init>:
{
 8004f18:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8004f1a:	4d0e      	ldr	r5, [pc, #56]	; (8004f54 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8004f1c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8004f20:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8004f22:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8004f24:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8004f26:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8004f28:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8004f2a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8004f2c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8004f2e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004f30:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8004f32:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8004f34:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8004f36:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8004f38:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8004f3a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8004f3c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8004f3e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8004f42:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8004f44:	6181      	str	r1, [r0, #24]
}
 8004f46:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004f48:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004f4c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8004f50:	f001 bada 	b.w	8006508 <HAL_LTDC_Init>
 8004f54:	50001000 	.word	0x50001000

08004f58 <MX_LTDC_ConfigLayer>:
{
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8004f5e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8004f60:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8004f62:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8004f64:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8004f66:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004f68:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8004f6c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8004f6e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8004f70:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8004f74:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8004f78:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8004f7c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8004f7e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8004f80:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004f82:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8004f84:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8004f86:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8004f88:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8004f8a:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8004f8c:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8004f8e:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004f92:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8004f96:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8004f98:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8004f9a:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8004f9c:	f001 fb8e 	bl	80066bc <HAL_LTDC_ConfigLayer>
}
 8004fa0:	b00f      	add	sp, #60	; 0x3c
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fa4 <MX_LTDC_ClockConfig>:
{
 8004fa4:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8004fa6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8004faa:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8004fac:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8004fae:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8004fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8004fb4:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8004fb6:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8004fb8:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8004fba:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8004fbc:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004fbe:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8004fc0:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8004fc2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8004fc6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8004fca:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004fce:	f002 fa55 	bl	800747c <HAL_RCCEx_PeriphCLKConfig>
}
 8004fd2:	b031      	add	sp, #196	; 0xc4
 8004fd4:	bd30      	pop	{r4, r5, pc}
 8004fd6:	bf00      	nop

08004fd8 <BSP_LCD_InitEx>:
{
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8004fdc:	2901      	cmp	r1, #1
{
 8004fde:	b093      	sub	sp, #76	; 0x4c
 8004fe0:	461d      	mov	r5, r3
 8004fe2:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004fe6:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8004fe8:	f200 80f2 	bhi.w	80051d0 <BSP_LCD_InitEx+0x1f8>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	bf18      	it	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	f040 80ec 	bne.w	80051d0 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8004ff8:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8004ffa:	2901      	cmp	r1, #1
 8004ffc:	f200 80e8 	bhi.w	80051d0 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005000:	2a02      	cmp	r2, #2
 8005002:	f000 80ab 	beq.w	800515c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005006:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005008:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800500a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800500c:	4c72      	ldr	r4, [pc, #456]	; (80051d8 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 800500e:	2000      	movs	r0, #0
 8005010:	4f72      	ldr	r7, [pc, #456]	; (80051dc <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005012:	2600      	movs	r6, #0
 8005014:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005016:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800501a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800501c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005020:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005022:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005026:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005028:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 800502c:	f7ff fed6 	bl	8004ddc <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005030:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005034:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005036:	a90c      	add	r1, sp, #48	; 0x30
 8005038:	4869      	ldr	r0, [pc, #420]	; (80051e0 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800503a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800503e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005042:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005046:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800504a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800504e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005050:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005052:	f8cd c014 	str.w	ip, [sp, #20]
 8005056:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800505a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800505e:	f001 f877 	bl	8006150 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005062:	2201      	movs	r2, #1
 8005064:	4649      	mov	r1, r9
 8005066:	485e      	ldr	r0, [pc, #376]	; (80051e0 <BSP_LCD_InitEx+0x208>)
 8005068:	f001 f990 	bl	800638c <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800506c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005070:	a90c      	add	r1, sp, #48	; 0x30
 8005072:	485b      	ldr	r0, [pc, #364]	; (80051e0 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005074:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005078:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005210 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 800507c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005080:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005084:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005086:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800508a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800508e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005092:	9406      	str	r4, [sp, #24]
 8005094:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005096:	f001 f85b 	bl	8006150 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800509a:	2201      	movs	r2, #1
 800509c:	4651      	mov	r1, sl
 800509e:	4850      	ldr	r0, [pc, #320]	; (80051e0 <BSP_LCD_InitEx+0x208>)
 80050a0:	f001 f974 	bl	800638c <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 80050a4:	4632      	mov	r2, r6
 80050a6:	210f      	movs	r1, #15
 80050a8:	2058      	movs	r0, #88	; 0x58
 80050aa:	f000 fa8d 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80050ae:	2058      	movs	r0, #88	; 0x58
 80050b0:	f000 fac4 	bl	800563c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 80050b4:	4632      	mov	r2, r6
 80050b6:	210f      	movs	r1, #15
 80050b8:	205a      	movs	r0, #90	; 0x5a
 80050ba:	f000 fa85 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80050be:	205a      	movs	r0, #90	; 0x5a
 80050c0:	f000 fabc 	bl	800563c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 80050c4:	4632      	mov	r2, r6
 80050c6:	210f      	movs	r1, #15
 80050c8:	207b      	movs	r0, #123	; 0x7b
 80050ca:	f000 fa7d 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80050ce:	207b      	movs	r0, #123	; 0x7b
 80050d0:	f000 fab4 	bl	800563c <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 80050d4:	4c43      	ldr	r4, [pc, #268]	; (80051e4 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 80050d6:	4844      	ldr	r0, [pc, #272]	; (80051e8 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 80050d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050dc:	4943      	ldr	r1, [pc, #268]	; (80051ec <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 80050de:	4e44      	ldr	r6, [pc, #272]	; (80051f0 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 80050e0:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 80050e2:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 80050e4:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 80050e8:	f7ff fe04 	bl	8004cf4 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 80050ec:	f8d9 2000 	ldr.w	r2, [r9]
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	4282      	cmp	r2, r0
 80050f4:	d03a      	beq.n	800516c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 80050f6:	680a      	ldr	r2, [r1, #0]
 80050f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80050fc:	d031      	beq.n	8005162 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80050fe:	4642      	mov	r2, r8
 8005100:	4629      	mov	r1, r5
 8005102:	483a      	ldr	r0, [pc, #232]	; (80051ec <BSP_LCD_InitEx+0x214>)
 8005104:	f7ff fe9c 	bl	8004e40 <MX_DSIHOST_DSI_Init>
 8005108:	2800      	cmp	r0, #0
 800510a:	d15c      	bne.n	80051c6 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800510c:	4835      	ldr	r0, [pc, #212]	; (80051e4 <BSP_LCD_InitEx+0x20c>)
 800510e:	f7ff ff49 	bl	8004fa4 <MX_LTDC_ClockConfig>
 8005112:	2800      	cmp	r0, #0
 8005114:	d157      	bne.n	80051c6 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005116:	4642      	mov	r2, r8
 8005118:	4629      	mov	r1, r5
 800511a:	4832      	ldr	r0, [pc, #200]	; (80051e4 <BSP_LCD_InitEx+0x20c>)
 800511c:	f7ff fefc 	bl	8004f18 <MX_LTDC_Init>
 8005120:	2800      	cmp	r0, #0
 8005122:	d150      	bne.n	80051c6 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005124:	f000 f8b2 	bl	800528c <BSP_SDRAM_Init>
 8005128:	2800      	cmp	r0, #0
 800512a:	d14c      	bne.n	80051c6 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 800512c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 800512e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005132:	4601      	mov	r1, r0
      config.X0          = 0;
 8005134:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005136:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005138:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 800513c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005140:	4828      	ldr	r0, [pc, #160]	; (80051e4 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005142:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005146:	f7ff ff07 	bl	8004f58 <MX_LTDC_ConfigLayer>
 800514a:	4604      	mov	r4, r0
 800514c:	b190      	cbz	r0, 8005174 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800514e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
}
 8005156:	b013      	add	sp, #76	; 0x4c
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 800515c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	e754      	b.n	800500c <BSP_LCD_InitEx+0x34>
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	f7ff fdfe 	bl	8004d64 <DSI_MspInit.part.0>
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	e7c8      	b.n	80050fe <BSP_LCD_InitEx+0x126>
 800516c:	f7ff fde0 	bl	8004d30 <DMA2D_MspInit.part.0>
 8005170:	9b02      	ldr	r3, [sp, #8]
 8005172:	e7c0      	b.n	80050f6 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005174:	481d      	ldr	r0, [pc, #116]	; (80051ec <BSP_LCD_InitEx+0x214>)
 8005176:	f000 febb 	bl	8005ef0 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800517a:	2104      	movs	r1, #4
 800517c:	481b      	ldr	r0, [pc, #108]	; (80051ec <BSP_LCD_InitEx+0x214>)
 800517e:	f000 fea3 	bl	8005ec8 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005184:	4d1c      	ldr	r5, [pc, #112]	; (80051f8 <BSP_LCD_InitEx+0x220>)
 8005186:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005188:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 800518a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800518c:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 800518e:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005190:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005194:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005198:	f7ff fb22 	bl	80047e0 <OTM8009A_RegisterBusIO>
 800519c:	b980      	cbnz	r0, 80051c0 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800519e:	4c19      	ldr	r4, [pc, #100]	; (8005204 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80051a0:	4628      	mov	r0, r5
 80051a2:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 80051a4:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80051a6:	f7ff fb07 	bl	80047b8 <OTM8009A_ReadID>
 80051aa:	b948      	cbnz	r0, 80051c0 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <BSP_LCD_InitEx+0x230>)
 80051ae:	4d17      	ldr	r5, [pc, #92]	; (800520c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	9a03      	ldr	r2, [sp, #12]
 80051b4:	9901      	ldr	r1, [sp, #4]
 80051b6:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80051b8:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80051ba:	47a0      	blx	r4
 80051bc:	2800      	cmp	r0, #0
 80051be:	d0c8      	beq.n	8005152 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051c0:	f06f 0006 	mvn.w	r0, #6
 80051c4:	e7c5      	b.n	8005152 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80051c6:	f06f 0003 	mvn.w	r0, #3
}
 80051ca:	b013      	add	sp, #76	; 0x4c
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80051d0:	f06f 0001 	mvn.w	r0, #1
 80051d4:	e7bf      	b.n	8005156 <BSP_LCD_InitEx+0x17e>
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	24019324 	.word	0x24019324
 80051e0:	58022400 	.word	0x58022400
 80051e4:	2401927c 	.word	0x2401927c
 80051e8:	52001000 	.word	0x52001000
 80051ec:	24019340 	.word	0x24019340
 80051f0:	50001000 	.word	0x50001000
 80051f4:	08004831 	.word	0x08004831
 80051f8:	2400912c 	.word	0x2400912c
 80051fc:	08004da1 	.word	0x08004da1
 8005200:	080049c1 	.word	0x080049c1
 8005204:	24009124 	.word	0x24009124
 8005208:	24009010 	.word	0x24009010
 800520c:	24009128 	.word	0x24009128
 8005210:	2401935c 	.word	0x2401935c

08005214 <BSP_LCD_Init>:
{
 8005214:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005216:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800521a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800521c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005220:	2201      	movs	r2, #1
 8005222:	9400      	str	r4, [sp, #0]
 8005224:	f7ff fed8 	bl	8004fd8 <BSP_LCD_InitEx>
}
 8005228:	b002      	add	sp, #8
 800522a:	bd10      	pop	{r4, pc}

0800522c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 800522c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800522e:	4915      	ldr	r1, [pc, #84]	; (8005284 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005230:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005232:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005234:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005238:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 800523c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005240:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005244:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005246:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005248:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800524a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800524c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800524e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005250:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005252:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005254:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005256:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005258:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800525a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800525c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 800525e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005260:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005262:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005264:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005266:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005268:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800526c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005270:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005272:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005276:	f002 febb 	bl	8007ff0 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 800527a:	1b40      	subs	r0, r0, r5
 800527c:	bf18      	it	ne
 800527e:	2001      	movne	r0, #1
 8005280:	b009      	add	sp, #36	; 0x24
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	52004140 	.word	0x52004140
 8005288:	240193c4 	.word	0x240193c4

0800528c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 800528c:	2800      	cmp	r0, #0
 800528e:	f040 80e1 	bne.w	8005454 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005292:	4b73      	ldr	r3, [pc, #460]	; (8005460 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005294:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005296:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800529a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 800529e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80052a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 80052a4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 80052a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80052aa:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052ac:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80052ae:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80052b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80052b6:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 80052ba:	9201      	str	r2, [sp, #4]
 80052bc:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80052be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80052c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80052cc:	400a      	ands	r2, r1
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052d6:	f042 0208 	orr.w	r2, r2, #8
 80052da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052e2:	f002 0208 	and.w	r2, r2, #8
 80052e6:	9203      	str	r2, [sp, #12]
 80052e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052ee:	f042 0210 	orr.w	r2, r2, #16
 80052f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052fa:	f002 0210 	and.w	r2, r2, #16
 80052fe:	9204      	str	r2, [sp, #16]
 8005300:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005302:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005306:	f042 0220 	orr.w	r2, r2, #32
 800530a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800530e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005312:	f002 0220 	and.w	r2, r2, #32
 8005316:	9205      	str	r2, [sp, #20]
 8005318:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800531a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800531e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005322:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005326:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800532a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800532e:	9206      	str	r2, [sp, #24]
 8005330:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005332:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800533a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800533e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005342:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005346:	9207      	str	r2, [sp, #28]
 8005348:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800534a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800534e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005352:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005356:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800535a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800535e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005364:	483f      	ldr	r0, [pc, #252]	; (8005464 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005366:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005368:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800536a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800536c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800536e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005370:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005372:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005374:	f000 feec 	bl	8006150 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005378:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800537c:	a909      	add	r1, sp, #36	; 0x24
 800537e:	483a      	ldr	r0, [pc, #232]	; (8005468 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005380:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005382:	f000 fee5 	bl	8006150 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005386:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800538a:	a909      	add	r1, sp, #36	; 0x24
 800538c:	4837      	ldr	r0, [pc, #220]	; (800546c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005390:	f000 fede 	bl	8006150 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005394:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005398:	a909      	add	r1, sp, #36	; 0x24
 800539a:	4835      	ldr	r0, [pc, #212]	; (8005470 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800539c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800539e:	f000 fed7 	bl	8006150 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80053a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80053a6:	a909      	add	r1, sp, #36	; 0x24
 80053a8:	4832      	ldr	r0, [pc, #200]	; (8005474 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80053aa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80053ac:	f000 fed0 	bl	8006150 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80053b0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80053b4:	a909      	add	r1, sp, #36	; 0x24
 80053b6:	4830      	ldr	r0, [pc, #192]	; (8005478 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80053b8:	4c30      	ldr	r4, [pc, #192]	; (800547c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80053ba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80053bc:	f000 fec8 	bl	8006150 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80053c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80053c4:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80053c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80053cc:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80053ce:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80053d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80053d4:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80053d6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80053d8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80053dc:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80053de:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 80053e0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80053e2:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80053e4:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80053e6:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80053e8:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80053ec:	4e25      	ldr	r6, [pc, #148]	; (8005484 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80053ee:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80053f0:	6334      	str	r4, [r6, #48]	; 0x30
 80053f2:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80053f4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80053f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80053fc:	f001 fa28 	bl	8006850 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005400:	4620      	mov	r0, r4
 8005402:	f001 f9ab 	bl	800675c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005406:	462a      	mov	r2, r5
 8005408:	210f      	movs	r1, #15
 800540a:	207a      	movs	r0, #122	; 0x7a
 800540c:	f000 f8dc 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005410:	207a      	movs	r0, #122	; 0x7a
 8005412:	f000 f913 	bl	800563c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ff08 	bl	800522c <MX_SDRAM_Init>
 800541c:	4603      	mov	r3, r0
 800541e:	b9e0      	cbnz	r0, 800545a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005420:	4919      	ldr	r1, [pc, #100]	; (8005488 <BSP_SDRAM_Init+0x1fc>)
 8005422:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005426:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800542a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800542e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005430:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005432:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005434:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005436:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005438:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800543a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800543e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005440:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005442:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005444:	f7fe fc62 	bl	8003d0c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005448:	2800      	cmp	r0, #0
 800544a:	bf18      	it	ne
 800544c:	f06f 0004 	mvnne.w	r0, #4
}
 8005450:	b00f      	add	sp, #60	; 0x3c
 8005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005454:	f06f 0001 	mvn.w	r0, #1
}
 8005458:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	e7f7      	b.n	8005450 <BSP_SDRAM_Init+0x1c4>
 8005460:	58024400 	.word	0x58024400
 8005464:	58020c00 	.word	0x58020c00
 8005468:	58021000 	.word	0x58021000
 800546c:	58021400 	.word	0x58021400
 8005470:	58021800 	.word	0x58021800
 8005474:	58021c00 	.word	0x58021c00
 8005478:	58022000 	.word	0x58022000
 800547c:	2400914c 	.word	0x2400914c
 8005480:	52000040 	.word	0x52000040
 8005484:	240193c4 	.word	0x240193c4
 8005488:	240091b8 	.word	0x240091b8

0800548c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop

08005490 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <HAL_InitTick+0x40>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b90b      	cbnz	r3, 800549a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005496:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005498:	4770      	bx	lr
{
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800549e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054a2:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <HAL_InitTick+0x44>)
 80054a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80054a8:	6810      	ldr	r0, [r2, #0]
 80054aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80054ae:	f000 f8d3 	bl	8005658 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054b2:	2c0f      	cmp	r4, #15
 80054b4:	d800      	bhi.n	80054b8 <HAL_InitTick+0x28>
 80054b6:	b108      	cbz	r0, 80054bc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80054b8:	2001      	movs	r0, #1
}
 80054ba:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054bc:	2200      	movs	r2, #0
 80054be:	4621      	mov	r1, r4
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	f000 f880 	bl	80055c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_InitTick+0x48>)
 80054ca:	2000      	movs	r0, #0
 80054cc:	601c      	str	r4, [r3, #0]
}
 80054ce:	bd10      	pop	{r4, pc}
 80054d0:	2400905c 	.word	0x2400905c
 80054d4:	24000000 	.word	0x24000000
 80054d8:	24009060 	.word	0x24009060

080054dc <HAL_Init>:
{
 80054dc:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054de:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054e0:	4c12      	ldr	r4, [pc, #72]	; (800552c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054e2:	f000 f85d 	bl	80055a0 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054e6:	4d12      	ldr	r5, [pc, #72]	; (8005530 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054e8:	f001 fd06 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 80054ec:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_Init+0x58>)
 80054ee:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054f0:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f2:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054f4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054fa:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054fc:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054fe:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005500:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005504:	4c0c      	ldr	r4, [pc, #48]	; (8005538 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005506:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800550a:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8005510:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005512:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005514:	f7ff ffbc 	bl	8005490 <HAL_InitTick>
 8005518:	b110      	cbz	r0, 8005520 <HAL_Init+0x44>
    return HAL_ERROR;
 800551a:	2401      	movs	r4, #1
}
 800551c:	4620      	mov	r0, r4
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	4604      	mov	r4, r0
  HAL_MspInit();
 8005522:	f7ff ffb3 	bl	800548c <HAL_MspInit>
}
 8005526:	4620      	mov	r0, r4
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	080083c4 	.word	0x080083c4
 8005530:	24000004 	.word	0x24000004
 8005534:	58024400 	.word	0x58024400
 8005538:	24000000 	.word	0x24000000

0800553c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800553c:	4a03      	ldr	r2, [pc, #12]	; (800554c <HAL_IncTick+0x10>)
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <HAL_IncTick+0x14>)
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	440b      	add	r3, r1
 8005546:	6013      	str	r3, [r2, #0]
}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	240193f8 	.word	0x240193f8
 8005550:	2400905c 	.word	0x2400905c

08005554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <HAL_GetTick+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	240193f8 	.word	0x240193f8

08005560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7ff fff6 	bl	8005554 <HAL_GetTick>
 8005568:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800556a:	1c63      	adds	r3, r4, #1
 800556c:	d002      	beq.n	8005574 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_Delay+0x20>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005574:	f7ff ffee 	bl	8005554 <HAL_GetTick>
 8005578:	1b43      	subs	r3, r0, r5
 800557a:	42a3      	cmp	r3, r4
 800557c:	d3fa      	bcc.n	8005574 <HAL_Delay+0x14>
  {
  }
}
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	2400905c 	.word	0x2400905c

08005584 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <HAL_GetREVID+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
}
 8005588:	0c00      	lsrs	r0, r0, #16
 800558a:	4770      	bx	lr
 800558c:	5c001000 	.word	0x5c001000

08005590 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8005590:	4a02      	ldr	r2, [pc, #8]	; (800559c <HAL_EnableCompensationCell+0xc>)
 8005592:	6a13      	ldr	r3, [r2, #32]
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6213      	str	r3, [r2, #32]
}
 800559a:	4770      	bx	lr
 800559c:	58000400 	.word	0x58000400

080055a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055a0:	4907      	ldr	r1, [pc, #28]	; (80055c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055a6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ac:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ae:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80055b2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80055b4:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055b8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80055ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80055bc:	60cb      	str	r3, [r1, #12]
 80055be:	4770      	bx	lr
 80055c0:	e000ed00 	.word	0xe000ed00
 80055c4:	05fa0000 	.word	0x05fa0000

080055c8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_NVIC_SetPriority+0x68>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d0:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055d6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d8:	2d04      	cmp	r5, #4
 80055da:	bf28      	it	cs
 80055dc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055de:	2c06      	cmp	r4, #6
 80055e0:	d919      	bls.n	8005616 <HAL_NVIC_SetPriority+0x4e>
 80055e2:	3b03      	subs	r3, #3
 80055e4:	f04f 34ff 	mov.w	r4, #4294967295
 80055e8:	409c      	lsls	r4, r3
 80055ea:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ee:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80055f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	fa04 f405 	lsl.w	r4, r4, r5
 80055f8:	ea21 0104 	bic.w	r1, r1, r4
 80055fc:	fa01 f103 	lsl.w	r1, r1, r3
 8005600:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005604:	db0a      	blt.n	800561c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005606:	0109      	lsls	r1, r1, #4
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_NVIC_SetPriority+0x6c>)
 800560a:	b2c9      	uxtb	r1, r1
 800560c:	4403      	add	r3, r0
 800560e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005612:	bc30      	pop	{r4, r5}
 8005614:	4770      	bx	lr
 8005616:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005618:	4613      	mov	r3, r2
 800561a:	e7e8      	b.n	80055ee <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561c:	f000 000f 	and.w	r0, r0, #15
 8005620:	0109      	lsls	r1, r1, #4
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_NVIC_SetPriority+0x70>)
 8005624:	b2c9      	uxtb	r1, r1
 8005626:	4403      	add	r3, r0
 8005628:	7619      	strb	r1, [r3, #24]
 800562a:	bc30      	pop	{r4, r5}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000ed00 	.word	0xe000ed00
 8005634:	e000e100 	.word	0xe000e100
 8005638:	e000ecfc 	.word	0xe000ecfc

0800563c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800563c:	2800      	cmp	r0, #0
 800563e:	db07      	blt.n	8005650 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005640:	2301      	movs	r3, #1
 8005642:	f000 011f 	and.w	r1, r0, #31
 8005646:	4a03      	ldr	r2, [pc, #12]	; (8005654 <HAL_NVIC_EnableIRQ+0x18>)
 8005648:	0940      	lsrs	r0, r0, #5
 800564a:	408b      	lsls	r3, r1
 800564c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	e000e100 	.word	0xe000e100

08005658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005658:	3801      	subs	r0, #1
 800565a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800565e:	d20d      	bcs.n	800567c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005662:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005664:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005666:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005668:	25f0      	movs	r5, #240	; 0xf0
 800566a:	4c06      	ldr	r4, [pc, #24]	; (8005684 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800566c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800566e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005670:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005676:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8005678:	bc30      	pop	{r4, r5}
 800567a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800567c:	2001      	movs	r0, #1
 800567e:	4770      	bx	lr
 8005680:	e000e010 	.word	0xe000e010
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005688:	b470      	push	{r4, r5, r6}
 800568a:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800568c:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005690:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8005694:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005696:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800569a:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800569e:	ea43 0304 	orr.w	r3, r3, r4
 80056a2:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80056a4:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056a6:	d008      	beq.n	80056ba <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80056a8:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80056ac:	d002      	beq.n	80056b4 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80056ae:	60e9      	str	r1, [r5, #12]
  }
}
 80056b0:	bc70      	pop	{r4, r5, r6}
 80056b2:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80056b4:	6169      	str	r1, [r5, #20]
}
 80056b6:	bc70      	pop	{r4, r5, r6}
 80056b8:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056ba:	6883      	ldr	r3, [r0, #8]
 80056bc:	b1b3      	cbz	r3, 80056ec <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d017      	beq.n	80056f2 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056c2:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056c4:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056c8:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056cc:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056ce:	d01e      	beq.n	800570e <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056d0:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80056d2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056d6:	d00f      	beq.n	80056f8 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80056d8:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80056da:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80056dc:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80056de:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80056e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80056e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80056e8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80056ec:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80056ee:	bc70      	pop	{r4, r5, r6}
 80056f0:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 80056f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80056f6:	e7f9      	b.n	80056ec <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 80056f8:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 80056fa:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056fc:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 80056fe:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005700:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8005704:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8005708:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800570c:	e7ee      	b.n	80056ec <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 800570e:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8005710:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005712:	02c9      	lsls	r1, r1, #11
 8005714:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8005718:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800571c:	e7e6      	b.n	80056ec <DMA2D_SetConfig+0x64>
 800571e:	bf00      	nop

08005720 <HAL_DMA2D_MspInit>:
}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop

08005724 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8005724:	2800      	cmp	r0, #0
 8005726:	d036      	beq.n	8005796 <HAL_DMA2D_Init+0x72>
{
 8005728:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800572a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800572e:	4604      	mov	r4, r0
 8005730:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005734:	b353      	cbz	r3, 800578c <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005736:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005738:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800573a:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800573c:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800573e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005742:	4916      	ldr	r1, [pc, #88]	; (800579c <HAL_DMA2D_Init+0x78>)
 8005744:	681e      	ldr	r6, [r3, #0]
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	4031      	ands	r1, r6
 800574a:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800574c:	4814      	ldr	r0, [pc, #80]	; (80057a0 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800574e:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005750:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005752:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005754:	69a1      	ldr	r1, [r4, #24]
 8005756:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005758:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800575a:	4912      	ldr	r1, [pc, #72]	; (80057a4 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800575c:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800575e:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005760:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005762:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005764:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005768:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800576a:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800576c:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800576e:	0552      	lsls	r2, r2, #21
 8005770:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005772:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005776:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800577a:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800577c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005780:	430a      	orrs	r2, r1
 8005782:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005784:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005786:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800578a:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800578c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8005790:	f7ff ffc6 	bl	8005720 <HAL_DMA2D_MspInit>
 8005794:	e7cf      	b.n	8005736 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8005796:	2001      	movs	r0, #1
}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	fff8ffbf 	.word	0xfff8ffbf
 80057a0:	fffffef8 	.word	0xfffffef8
 80057a4:	ffff0000 	.word	0xffff0000

080057a8 <HAL_DMA2D_Start>:
{
 80057a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80057aa:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 80057ae:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80057b0:	2d01      	cmp	r5, #1
 80057b2:	d011      	beq.n	80057d8 <HAL_DMA2D_Start+0x30>
 80057b4:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057b6:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057b8:	2502      	movs	r5, #2
 80057ba:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057bc:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80057be:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057c2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057c6:	f7ff ff5f 	bl	8005688 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80057ca:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80057cc:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	4333      	orrs	r3, r6
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	b003      	add	sp, #12
 80057d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80057d8:	2002      	movs	r0, #2
}
 80057da:	b003      	add	sp, #12
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057de:	bf00      	nop

080057e0 <HAL_DMA2D_PollForTransfer>:
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80057e2:	2300      	movs	r3, #0
{
 80057e4:	b082      	sub	sp, #8
 80057e6:	4605      	mov	r5, r0
 80057e8:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 80057ea:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80057ec:	6803      	ldr	r3, [r0, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	07d2      	lsls	r2, r2, #31
 80057f2:	d40f      	bmi.n	8005814 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80057f4:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80057f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057f8:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 80057fa:	0692      	lsls	r2, r2, #26
 80057fc:	d433      	bmi.n	8005866 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 80057fe:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005800:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005802:	2101      	movs	r1, #1
  return HAL_OK;
 8005804:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005806:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8005808:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800580c:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8005810:	b002      	add	sp, #8
 8005812:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8005814:	f7ff fe9e 	bl	8005554 <HAL_GetTick>
 8005818:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	e001      	b.n	8005822 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 800581e:	1c60      	adds	r0, r4, #1
 8005820:	d148      	bne.n	80058b4 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	0791      	lsls	r1, r2, #30
 8005826:	d4e5      	bmi.n	80057f4 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800582c:	9a01      	ldr	r2, [sp, #4]
 800582e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8005832:	d0f4      	beq.n	800581e <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005834:	9a01      	ldr	r2, [sp, #4]
 8005836:	0696      	lsls	r6, r2, #26
 8005838:	d503      	bpl.n	8005842 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800583a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800583c:	f042 0202 	orr.w	r2, r2, #2
 8005840:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005842:	9a01      	ldr	r2, [sp, #4]
 8005844:	07d4      	lsls	r4, r2, #31
 8005846:	d503      	bpl.n	8005850 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005848:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005850:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005852:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8005854:	2200      	movs	r2, #0
        return HAL_ERROR;
 8005856:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005858:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800585a:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800585e:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8005862:	b002      	add	sp, #8
 8005864:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8005866:	f7ff fe75 	bl	8005554 <HAL_GetTick>
 800586a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	e001      	b.n	8005874 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8005870:	1c61      	adds	r1, r4, #1
 8005872:	d132      	bne.n	80058da <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	06d2      	lsls	r2, r2, #27
 8005878:	d4c1      	bmi.n	80057fe <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800587e:	9a01      	ldr	r2, [sp, #4]
 8005880:	f012 0f29 	tst.w	r2, #41	; 0x29
 8005884:	d0f4      	beq.n	8005870 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005886:	9a01      	ldr	r2, [sp, #4]
 8005888:	0716      	lsls	r6, r2, #28
 800588a:	d503      	bpl.n	8005894 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800588c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800588e:	f042 0204 	orr.w	r2, r2, #4
 8005892:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005894:	9a01      	ldr	r2, [sp, #4]
 8005896:	0694      	lsls	r4, r2, #26
 8005898:	d503      	bpl.n	80058a2 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800589a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800589c:	f042 0202 	orr.w	r2, r2, #2
 80058a0:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058a2:	9a01      	ldr	r2, [sp, #4]
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d503      	bpl.n	80058b0 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058a8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058b0:	2429      	movs	r4, #41	; 0x29
 80058b2:	e7ce      	b.n	8005852 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7ff fe4e 	bl	8005554 <HAL_GetTick>
 80058b8:	1b80      	subs	r0, r0, r6
 80058ba:	42a0      	cmp	r0, r4
 80058bc:	d801      	bhi.n	80058c2 <HAL_DMA2D_PollForTransfer+0xe2>
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d1ab      	bne.n	800581a <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058c4:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80058c6:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058c8:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80058cc:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80058ce:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058d2:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058d4:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 80058d8:	e79a      	b.n	8005810 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058da:	f7ff fe3b 	bl	8005554 <HAL_GetTick>
 80058de:	1b80      	subs	r0, r0, r6
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d8ee      	bhi.n	80058c2 <HAL_DMA2D_PollForTransfer+0xe2>
 80058e4:	2c00      	cmp	r4, #0
 80058e6:	d1c1      	bne.n	800586c <HAL_DMA2D_PollForTransfer+0x8c>
 80058e8:	e7eb      	b.n	80058c2 <HAL_DMA2D_PollForTransfer+0xe2>
 80058ea:	bf00      	nop

080058ec <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80058ec:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	d063      	beq.n	80059bc <HAL_DMA2D_ConfigLayer+0xd0>
 80058f4:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058f6:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058fa:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8005900:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8005902:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005904:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8005908:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800590c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800590e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005910:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005912:	0512      	lsls	r2, r2, #20
 8005914:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005916:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800591a:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800591e:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005920:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005922:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005926:	d922      	bls.n	800596e <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005928:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800592a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800592e:	b981      	cbnz	r1, 8005952 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	4923      	ldr	r1, [pc, #140]	; (80059c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 8005934:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005936:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005938:	4029      	ands	r1, r5
 800593a:	430a      	orrs	r2, r1
 800593c:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800593e:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8005940:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005942:	2101      	movs	r1, #1
  return HAL_OK;
 8005944:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005946:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800594a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800594e:	bc70      	pop	{r4, r5, r6}
 8005950:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005952:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005954:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005956:	d129      	bne.n	80059ac <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005958:	69e6      	ldr	r6, [r4, #28]
 800595a:	491a      	ldr	r1, [pc, #104]	; (80059c4 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800595c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800595e:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005960:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005962:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8005966:	430a      	orrs	r2, r1
 8005968:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800596a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800596c:	e7e8      	b.n	8005940 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800596e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005970:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8005974:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005976:	b161      	cbz	r1, 8005992 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	4c11      	ldr	r4, [pc, #68]	; (80059c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 800597c:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800597e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005980:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005982:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005984:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005988:	4322      	orrs	r2, r4
 800598a:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800598c:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800598e:	620d      	str	r5, [r1, #32]
 8005990:	e7d6      	b.n	8005940 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	4c0a      	ldr	r4, [pc, #40]	; (80059c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 8005996:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005998:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800599a:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800599c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800599e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059a2:	4322      	orrs	r2, r4
 80059a4:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059a6:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059a8:	6288      	str	r0, [r1, #40]	; 0x28
 80059aa:	e7c9      	b.n	8005940 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059ac:	69e5      	ldr	r5, [r4, #28]
 80059ae:	4904      	ldr	r1, [pc, #16]	; (80059c0 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059b2:	4029      	ands	r1, r5
 80059b4:	430a      	orrs	r2, r1
 80059b6:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059b8:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059ba:	e7c1      	b.n	8005940 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80059bc:	2002      	movs	r0, #2
}
 80059be:	4770      	bx	lr
 80059c0:	00ccfff0 	.word	0x00ccfff0
 80059c4:	00c0fff0 	.word	0x00c0fff0

080059c8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4605      	mov	r5, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4617      	mov	r7, r2
 80059d2:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80059d4:	f7ff fdbe 	bl	8005554 <HAL_GetTick>
 80059d8:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80059da:	e005      	b.n	80059e8 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80059dc:	f7ff fdba 	bl	8005554 <HAL_GetTick>
 80059e0:	1b84      	subs	r4, r0, r6
 80059e2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80059e6:	d80e      	bhi.n	8005a06 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80059e8:	682c      	ldr	r4, [r5, #0]
 80059ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80059ec:	07db      	lsls	r3, r3, #31
 80059ee:	d5f5      	bpl.n	80059dc <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80059f0:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 80059f4:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 80059f6:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80059f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80059fc:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8005a00:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005a06:	2003      	movs	r0, #3
}
 8005a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a0c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f000 80b3 	beq.w	8005b7c <HAL_DSI_Init+0x16c>
{
 8005a16:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005a18:	7c43      	ldrb	r3, [r0, #17]
{
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a8 	beq.w	8005b76 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a26:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005a28:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a2a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005a2c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a2e:	9200      	str	r2, [sp, #0]
 8005a30:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005a34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005a38:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005a3c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8005a48:	f7ff fd84 	bl	8005554 <HAL_GetTick>
 8005a4c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005a4e:	e006      	b.n	8005a5e <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005a50:	f7ff fd80 	bl	8005554 <HAL_GetTick>
 8005a54:	1b83      	subs	r3, r0, r6
 8005a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a5a:	f200 8089 	bhi.w	8005b70 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005a64:	04d1      	lsls	r1, r2, #19
 8005a66:	d5f3      	bpl.n	8005a50 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005a68:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005a6a:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005a6c:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005a70:	682e      	ldr	r6, [r5, #0]
 8005a72:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005a74:	4942      	ldr	r1, [pc, #264]	; (8005b80 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005a76:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8005a7a:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005a7c:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005a7e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005a82:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005a86:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005a90:	9001      	str	r0, [sp, #4]
 8005a92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005a9e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8005aaa:	f7ff fd53 	bl	8005554 <HAL_GetTick>
 8005aae:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005ab0:	e005      	b.n	8005abe <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005ab2:	f7ff fd4f 	bl	8005554 <HAL_GetTick>
 8005ab6:	1b80      	subs	r0, r0, r6
 8005ab8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005abc:	d858      	bhi.n	8005b70 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005ac4:	05d2      	lsls	r2, r2, #23
 8005ac6:	d5f4      	bpl.n	8005ab2 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005ac8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005acc:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005ad0:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8005ad2:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005ad4:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005ad8:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005ada:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005ade:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005ae2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005ae6:	f022 0203 	bic.w	r2, r2, #3
 8005aea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005aee:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005af2:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005af4:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005af6:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005af8:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005afc:	bf38      	it	cc
 8005afe:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b00:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005b04:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b08:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005b0a:	f020 0003 	bic.w	r0, r0, #3
 8005b0e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b12:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b16:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b18:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b1a:	682d      	ldr	r5, [r5, #0]
 8005b1c:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005b20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b24:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b26:	fb0c f505 	mul.w	r5, ip, r5
 8005b2a:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b2c:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b30:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005b34:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005b36:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b38:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005b3a:	ea46 060e 	orr.w	r6, r6, lr
 8005b3e:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8005b40:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005b42:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005b46:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005b4a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8005b4e:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8005b52:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005b54:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8005b58:	432a      	orrs	r2, r5
 8005b5a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8005b5e:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005b62:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005b66:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8005b68:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8005b6a:	7466      	strb	r6, [r4, #17]
}
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8005b70:	2003      	movs	r0, #3
}
 8005b72:	b003      	add	sp, #12
 8005b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8005b76:	f7ff ff49 	bl	8005a0c <HAL_DSI_MspInit>
 8005b7a:	e754      	b.n	8005a26 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8005b7c:	2001      	movs	r0, #1
}
 8005b7e:	4770      	bx	lr
 8005b80:	fffc8603 	.word	0xfffc8603
 8005b84:	003d0900 	.word	0x003d0900

08005b88 <HAL_DSI_TearingEffectCallback>:
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop

08005b8c <HAL_DSI_EndOfRefreshCallback>:
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <HAL_DSI_ErrorCallback>:
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop

08005b94 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005b94:	6803      	ldr	r3, [r0, #0]
 8005b96:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005b9a:	07d1      	lsls	r1, r2, #31
{
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005ba0:	d503      	bpl.n	8005baa <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005ba2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005ba6:	07d2      	lsls	r2, r2, #31
 8005ba8:	d462      	bmi.n	8005c70 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005baa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005bae:	0791      	lsls	r1, r2, #30
 8005bb0:	d503      	bpl.n	8005bba <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005bb2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005bb6:	0792      	lsls	r2, r2, #30
 8005bb8:	d44f      	bmi.n	8005c5a <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005bba:	69a3      	ldr	r3, [r4, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d04b      	beq.n	8005c58 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005bc6:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005bca:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005bce:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005bd0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005bd4:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005bd6:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005bd8:	b119      	cbz	r1, 8005be2 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8005bda:	6961      	ldr	r1, [r4, #20]
 8005bdc:	f041 0101 	orr.w	r1, r1, #1
 8005be0:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8005be2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8005be6:	d003      	beq.n	8005bf0 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8005be8:	6962      	ldr	r2, [r4, #20]
 8005bea:	f042 0202 	orr.w	r2, r2, #2
 8005bee:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8005bf0:	07d8      	lsls	r0, r3, #31
 8005bf2:	d503      	bpl.n	8005bfc <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8005bf4:	6962      	ldr	r2, [r4, #20]
 8005bf6:	f042 0204 	orr.w	r2, r2, #4
 8005bfa:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8005bfc:	0799      	lsls	r1, r3, #30
 8005bfe:	d503      	bpl.n	8005c08 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8005c00:	6962      	ldr	r2, [r4, #20]
 8005c02:	f042 0208 	orr.w	r2, r2, #8
 8005c06:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005c08:	f013 0f0c 	tst.w	r3, #12
 8005c0c:	d003      	beq.n	8005c16 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8005c0e:	6962      	ldr	r2, [r4, #20]
 8005c10:	f042 0210 	orr.w	r2, r2, #16
 8005c14:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8005c16:	06da      	lsls	r2, r3, #27
 8005c18:	d503      	bpl.n	8005c22 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005c1a:	6962      	ldr	r2, [r4, #20]
 8005c1c:	f042 0220 	orr.w	r2, r2, #32
 8005c20:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005c22:	0698      	lsls	r0, r3, #26
 8005c24:	d503      	bpl.n	8005c2e <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005c26:	6962      	ldr	r2, [r4, #20]
 8005c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005c2e:	0659      	lsls	r1, r3, #25
 8005c30:	d503      	bpl.n	8005c3a <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005c32:	6962      	ldr	r2, [r4, #20]
 8005c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c38:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005c3a:	061a      	lsls	r2, r3, #24
 8005c3c:	d503      	bpl.n	8005c46 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005c3e:	6962      	ldr	r2, [r4, #20]
 8005c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c44:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005c46:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8005c4a:	d003      	beq.n	8005c54 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005c4c:	6963      	ldr	r3, [r4, #20]
 8005c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c52:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005c54:	6963      	ldr	r3, [r4, #20]
 8005c56:	b93b      	cbnz	r3, 8005c68 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005c58:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005c5a:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005c5c:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005c5e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005c62:	f7ff ff93 	bl	8005b8c <HAL_DSI_EndOfRefreshCallback>
 8005c66:	e7a8      	b.n	8005bba <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ff91 	bl	8005b90 <HAL_DSI_ErrorCallback>
}
 8005c6e:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005c70:	2201      	movs	r2, #1
 8005c72:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8005c76:	f7ff ff87 	bl	8005b88 <HAL_DSI_TearingEffectCallback>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	e795      	b.n	8005baa <HAL_DSI_IRQHandler+0x16>
 8005c7e:	bf00      	nop

08005c80 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c80:	7c03      	ldrb	r3, [r0, #16]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	f000 8113 	beq.w	8005eae <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005c88:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8005c8a:	2201      	movs	r2, #1
{
 8005c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8005c90:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005c92:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005c96:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005c98:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005c9c:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005ca0:	4e84      	ldr	r6, [pc, #528]	; (8005eb4 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005ca2:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005ca4:	4d84      	ldr	r5, [pc, #528]	; (8005eb8 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005ca6:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005caa:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005cac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8005cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cba:	f022 0203 	bic.w	r2, r2, #3
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005cc0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005cc2:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005cc6:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005cca:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cce:	ea06 0602 	and.w	r6, r6, r2
 8005cd2:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005cda:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005cde:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce2:	ea02 0205 	and.w	r2, r2, r5
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005ce8:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8005cea:	ea47 0708 	orr.w	r7, r7, r8
 8005cee:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8005cf0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8005cf2:	ea06 0605 	and.w	r6, r6, r5
 8005cf6:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005cf8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8005cfa:	ea45 050e 	orr.w	r5, r5, lr
 8005cfe:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005d00:	68dd      	ldr	r5, [r3, #12]
 8005d02:	f025 0503 	bic.w	r5, r5, #3
 8005d06:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	ea42 020c 	orr.w	r2, r2, ip
 8005d0e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d10:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d12:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d14:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d18:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005d1c:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d1e:	ea42 0206 	orr.w	r2, r2, r6
 8005d22:	695d      	ldr	r5, [r3, #20]
 8005d24:	ea42 0207 	orr.w	r2, r2, r7
 8005d28:	ea42 0205 	orr.w	r2, r2, r5
 8005d2c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	f022 020f 	bic.w	r2, r2, #15
 8005d34:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	ea42 0200 	orr.w	r2, r2, r0
 8005d3c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005d3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005d42:	f022 020e 	bic.w	r2, r2, #14
 8005d46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005d4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005d4e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8005d52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005d56:	d107      	bne.n	8005d68 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005d58:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005d5a:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005d5c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005d60:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	432a      	orrs	r2, r5
 8005d66:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005d68:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d6a:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005d6c:	4a53      	ldr	r2, [pc, #332]	; (8005ebc <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005d6e:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005d70:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005d72:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005d76:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005d7a:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005d7c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005d7e:	4f50      	ldr	r7, [pc, #320]	; (8005ec0 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005d80:	4305      	orrs	r5, r0
 8005d82:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005d84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005d86:	4010      	ands	r0, r2
 8005d88:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005d8c:	484d      	ldr	r0, [pc, #308]	; (8005ec4 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005d8e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005d92:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d9a:	4017      	ands	r7, r2
 8005d9c:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005d9e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8005da0:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005da4:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005da8:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005daa:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005dac:	4005      	ands	r5, r0
 8005dae:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005db6:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dbe:	4002      	ands	r2, r0
 8005dc0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005dc2:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005dc4:	4a3b      	ldr	r2, [pc, #236]	; (8005eb4 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005dc6:	ea47 070e 	orr.w	r7, r7, lr
 8005dca:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005dcc:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8005dce:	4007      	ands	r7, r0

  return HAL_OK;
 8005dd0:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005dd2:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005dd4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8005dd6:	ea45 050c 	orr.w	r5, r5, ip
 8005dda:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005ddc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8005dde:	402a      	ands	r2, r5
 8005de0:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005de2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8005de4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005de6:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005dea:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005dec:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005df0:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005df2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005df4:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8005df8:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e00:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005e06:	699f      	ldr	r7, [r3, #24]
 8005e08:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8005e0c:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005e0e:	699d      	ldr	r5, [r3, #24]
 8005e10:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005e14:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005e18:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005e1a:	699d      	ldr	r5, [r3, #24]
 8005e1c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005e20:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005e28:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005e2c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005e36:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005e38:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005e3c:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005e40:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005e42:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8005e44:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8005e48:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005e4a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005e4c:	ea45 050e 	orr.w	r5, r5, lr
 8005e50:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005e52:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005e54:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8005e58:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5c:	ea42 020c 	orr.w	r2, r2, ip
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005e62:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005e64:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005e66:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005e6a:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005e6e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005e74:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005e82:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005e84:	ea45 050e 	orr.w	r5, r5, lr
 8005e88:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005e8a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005e8c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005e90:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005e92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005e94:	ea41 010c 	orr.w	r1, r1, ip
 8005e98:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005e9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005e9c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005ea0:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea4:	433a      	orrs	r2, r7
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8005ea8:	7426      	strb	r6, [r4, #16]
}
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8005eae:	2002      	movs	r0, #2
}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	ffffc000 	.word	0xffffc000
 8005eb8:	ffffe000 	.word	0xffffe000
 8005ebc:	fffff000 	.word	0xfffff000
 8005ec0:	ffff8000 	.word	0xffff8000
 8005ec4:	fffffc00 	.word	0xfffffc00

08005ec8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ec8:	7c02      	ldrb	r2, [r0, #16]
 8005eca:	2a01      	cmp	r2, #1
 8005ecc:	d00e      	beq.n	8005eec <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005ece:	6802      	ldr	r2, [r0, #0]
 8005ed0:	4603      	mov	r3, r0
{
 8005ed2:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005ed4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ed6:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005ed8:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8005edc:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005ede:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005ee0:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005ee2:	4321      	orrs	r1, r4
 8005ee4:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8005ee6:	741d      	strb	r5, [r3, #16]
}
 8005ee8:	bc30      	pop	{r4, r5}
 8005eea:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005eec:	2002      	movs	r0, #2
}
 8005eee:	4770      	bx	lr

08005ef0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ef0:	7c03      	ldrb	r3, [r0, #16]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d021      	beq.n	8005f3a <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005ef6:	6803      	ldr	r3, [r0, #0]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8005efc:	4608      	mov	r0, r1
{
 8005efe:	b410      	push	{r4}
 8005f00:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8005f02:	9100      	str	r1, [sp, #0]
 8005f04:	685c      	ldr	r4, [r3, #4]
 8005f06:	f044 0401 	orr.w	r4, r4, #1
 8005f0a:	605c      	str	r4, [r3, #4]
 8005f0c:	685c      	ldr	r4, [r3, #4]
 8005f0e:	f004 0401 	and.w	r4, r4, #1
 8005f12:	9400      	str	r4, [sp, #0]
 8005f14:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005f16:	9101      	str	r1, [sp, #4]
 8005f18:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8005f1c:	f044 0408 	orr.w	r4, r4, #8
 8005f20:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8005f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8005f28:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	9b01      	ldr	r3, [sp, #4]
}
 8005f32:	b003      	add	sp, #12
 8005f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f38:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005f3a:	2002      	movs	r0, #2
}
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005f40:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f42:	7c05      	ldrb	r5, [r0, #16]
{
 8005f44:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8005f46:	2d01      	cmp	r5, #1
 8005f48:	d00a      	beq.n	8005f60 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005f4a:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8005f4c:	2501      	movs	r5, #1
 8005f4e:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005f50:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8005f52:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005f54:	f7ff fd38 	bl	80059c8 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	7423      	strb	r3, [r4, #16]

  return status;
}
 8005f5c:	b002      	add	sp, #8
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8005f60:	2002      	movs	r0, #2
}
 8005f62:	b002      	add	sp, #8
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	bf00      	nop

08005f68 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f6e:	7c03      	ldrb	r3, [r0, #16]
{
 8005f70:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d05e      	beq.n	8006034 <HAL_DSI_LongWrite+0xcc>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4607      	mov	r7, r0
 8005f7a:	4689      	mov	r9, r1
 8005f7c:	4692      	mov	sl, r2
 8005f7e:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f80:	f7ff fae8 	bl	8005554 <HAL_GetTick>
 8005f84:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005f86:	e005      	b.n	8005f94 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005f88:	f7ff fae4 	bl	8005554 <HAL_GetTick>
 8005f8c:	1b40      	subs	r0, r0, r5
 8005f8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f92:	d84b      	bhi.n	800602c <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8005f98:	f014 0401 	ands.w	r4, r4, #1
 8005f9c:	d0f4      	beq.n	8005f88 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	2803      	cmp	r0, #3
 8005fa2:	bf28      	it	cs
 8005fa4:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8005fa6:	f1b8 0f00 	cmp.w	r8, #0
 8005faa:	d046      	beq.n	800603a <HAL_DSI_LongWrite+0xd2>
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	1e5c      	subs	r4, r3, #1
 8005fb0:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005fb8:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8005fba:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005fbc:	fa02 f205 	lsl.w	r2, r2, r5
 8005fc0:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8005fc4:	d3f5      	bcc.n	8005fb2 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8005fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8005fc8:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8005fca:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005fcc:	ebb8 0000 	subs.w	r0, r8, r0
 8005fd0:	d017      	beq.n	8006002 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005fd2:	2804      	cmp	r0, #4
 8005fd4:	4684      	mov	ip, r0
 8005fd6:	f04f 0500 	mov.w	r5, #0
 8005fda:	bf28      	it	cs
 8005fdc:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005fe6:	f816 4b01 	ldrb.w	r4, [r6], #1
 8005fea:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8005fec:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005fee:	f105 0508 	add.w	r5, r5, #8
 8005ff2:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8005ff6:	d1f6      	bne.n	8005fe6 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8005ff8:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8005ffc:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8005ffe:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006000:	d1e7      	bne.n	8005fd2 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006002:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006006:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800600a:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800600c:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8006010:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006012:	46c8      	mov	r8, r9
 8006014:	fa1f f989 	uxth.w	r9, r9
 8006018:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 800601c:	ea43 0309 	orr.w	r3, r3, r9
 8006020:	ea43 0308 	orr.w	r3, r3, r8
 8006024:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006026:	743a      	strb	r2, [r7, #16]
}
 8006028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 800602c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800602e:	743c      	strb	r4, [r7, #16]
}
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8006034:	2002      	movs	r0, #2
}
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800603a:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 800603c:	e7e1      	b.n	8006002 <HAL_DSI_LongWrite+0x9a>
 800603e:	bf00      	nop

08006040 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006046:	7c02      	ldrb	r2, [r0, #16]
{
 8006048:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800604a:	2a01      	cmp	r2, #1
{
 800604c:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 800604e:	d070      	beq.n	8006132 <HAL_DSI_Read+0xf2>
 8006050:	461e      	mov	r6, r3
 8006052:	2301      	movs	r3, #1
 8006054:	4607      	mov	r7, r0
 8006056:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006058:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800605a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800605c:	d80d      	bhi.n	800607a <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800605e:	2c06      	cmp	r4, #6
 8006060:	d017      	beq.n	8006092 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006062:	2c04      	cmp	r4, #4
 8006064:	d04f      	beq.n	8006106 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006066:	2c14      	cmp	r4, #20
 8006068:	d067      	beq.n	800613a <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800606a:	2c24      	cmp	r4, #36	; 0x24
 800606c:	d052      	beq.n	8006114 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 800606e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8006070:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006072:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006074:	b002      	add	sp, #8
 8006076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800607a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800607e:	b2f3      	uxtb	r3, r6
 8006080:	2237      	movs	r2, #55	; 0x37
 8006082:	f8cd c000 	str.w	ip, [sp]
 8006086:	f7ff fc9f 	bl	80059c8 <DSI_ShortWrite>
 800608a:	2800      	cmp	r0, #0
 800608c:	d1ef      	bne.n	800606e <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800608e:	2c06      	cmp	r4, #6
 8006090:	d1e7      	bne.n	8006062 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006094:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 800609c:	f043 0306 	orr.w	r3, r3, #6
 80060a0:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80060a2:	f7ff fa57 	bl	8005554 <HAL_GetTick>
 80060a6:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 80060a8:	e006      	b.n	80060b8 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80060aa:	f7ff fa53 	bl	8005554 <HAL_GetTick>
 80060ae:	eba0 0008 	sub.w	r0, r0, r8
 80060b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80060b6:	d81b      	bhi.n	80060f0 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 80060b8:	2e00      	cmp	r6, #0
 80060ba:	dd1f      	ble.n	80060fc <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80060c0:	f011 0110 	ands.w	r1, r1, #16
 80060c4:	d1f1      	bne.n	80060aa <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80060c6:	2e04      	cmp	r6, #4
 80060c8:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 80060ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80060cc:	bf28      	it	cs
 80060ce:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 80060d0:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80060d2:	fa22 f401 	lsr.w	r4, r2, r1
 80060d6:	3108      	adds	r1, #8
 80060d8:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 80060dc:	429d      	cmp	r5, r3
 80060de:	d1f8      	bne.n	80060d2 <HAL_DSI_Read+0x92>
 80060e0:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80060e2:	f7ff fa37 	bl	8005554 <HAL_GetTick>
 80060e6:	eba0 0008 	sub.w	r0, r0, r8
 80060ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80060ee:	d9e3      	bls.n	80060b8 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 80060f0:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80060f2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80060f4:	743b      	strb	r3, [r7, #16]
}
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 80060fc:	2000      	movs	r0, #0
 80060fe:	7438      	strb	r0, [r7, #16]
}
 8006100:	b002      	add	sp, #8
 8006102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006106:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800610a:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800610c:	f043 0304 	orr.w	r3, r3, #4
 8006110:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006112:	e7c6      	b.n	80060a2 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006116:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800611a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800611c:	7852      	ldrb	r2, [r2, #1]
 800611e:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006124:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006126:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800612a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800612e:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006130:	e7b7      	b.n	80060a2 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8006132:	2002      	movs	r0, #2
}
 8006134:	b002      	add	sp, #8
 8006136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800613a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800613c:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006140:	7811      	ldrb	r1, [r2, #0]
 8006142:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006144:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006148:	f043 0314 	orr.w	r3, r3, #20
 800614c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800614e:	e7a8      	b.n	80060a2 <HAL_DSI_Read+0x62>

08006150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006154:	680e      	ldr	r6, [r1, #0]
{
 8006156:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006158:	2e00      	cmp	r6, #0
 800615a:	f000 80d3 	beq.w	8006304 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800615e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006160:	f8df a220 	ldr.w	sl, [pc, #544]	; 8006384 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006164:	f8df b220 	ldr.w	fp, [pc, #544]	; 8006388 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006168:	46b1      	mov	r9, r6
 800616a:	e020      	b.n	80061ae <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800616c:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800616e:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006172:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006176:	f04f 0e0f 	mov.w	lr, #15
 800617a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800617e:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006180:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006184:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8006188:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800618a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800618e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006192:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006196:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800619a:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800619c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800619e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a0:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80061a2:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 80061a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061a6:	fa39 f203 	lsrs.w	r2, r9, r3
 80061aa:	f000 80ab 	beq.w	8006304 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061ae:	2201      	movs	r2, #1
 80061b0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80061b2:	ea12 0809 	ands.w	r8, r2, r9
 80061b6:	d0f5      	beq.n	80061a4 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061b8:	684c      	ldr	r4, [r1, #4]
 80061ba:	005f      	lsls	r7, r3, #1
 80061bc:	f024 0c10 	bic.w	ip, r4, #16
 80061c0:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061c4:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061c6:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061ca:	f200 809e 	bhi.w	800630a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 80061d2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061d6:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061d8:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061da:	ea2e 0e05 	bic.w	lr, lr, r5
 80061de:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061e0:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061e2:	68ce      	ldr	r6, [r1, #12]
 80061e4:	40be      	lsls	r6, r7
 80061e6:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061ea:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 80061ec:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80061f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061f4:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061f8:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80061fa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80061fc:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061fe:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006202:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006204:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006208:	fa02 f207 	lsl.w	r2, r2, r7
 800620c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8006210:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006212:	d0ab      	beq.n	800616c <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8006214:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006216:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800621a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800621c:	fa02 f707 	lsl.w	r7, r2, r7
 8006220:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8006222:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006224:	00e6      	lsls	r6, r4, #3
 8006226:	d5bd      	bpl.n	80061a4 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006228:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800622c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006230:	f003 0203 	and.w	r2, r3, #3
 8006234:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006236:	f046 0602 	orr.w	r6, r6, #2
 800623a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800623e:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006240:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8006244:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006248:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800624c:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006250:	f006 0602 	and.w	r6, r6, #2
 8006254:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006256:	4e42      	ldr	r6, [pc, #264]	; (8006360 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006258:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800625a:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800625c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800625e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006262:	d020      	beq.n	80062a6 <HAL_GPIO_Init+0x156>
 8006264:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006268:	42b0      	cmp	r0, r6
 800626a:	d056      	beq.n	800631a <HAL_GPIO_Init+0x1ca>
 800626c:	4e3d      	ldr	r6, [pc, #244]	; (8006364 <HAL_GPIO_Init+0x214>)
 800626e:	42b0      	cmp	r0, r6
 8006270:	d058      	beq.n	8006324 <HAL_GPIO_Init+0x1d4>
 8006272:	4e3d      	ldr	r6, [pc, #244]	; (8006368 <HAL_GPIO_Init+0x218>)
 8006274:	42b0      	cmp	r0, r6
 8006276:	d04b      	beq.n	8006310 <HAL_GPIO_Init+0x1c0>
 8006278:	4e3c      	ldr	r6, [pc, #240]	; (800636c <HAL_GPIO_Init+0x21c>)
 800627a:	42b0      	cmp	r0, r6
 800627c:	d05c      	beq.n	8006338 <HAL_GPIO_Init+0x1e8>
 800627e:	4e3c      	ldr	r6, [pc, #240]	; (8006370 <HAL_GPIO_Init+0x220>)
 8006280:	42b0      	cmp	r0, r6
 8006282:	d05e      	beq.n	8006342 <HAL_GPIO_Init+0x1f2>
 8006284:	4e3b      	ldr	r6, [pc, #236]	; (8006374 <HAL_GPIO_Init+0x224>)
 8006286:	42b0      	cmp	r0, r6
 8006288:	d051      	beq.n	800632e <HAL_GPIO_Init+0x1de>
 800628a:	4e3b      	ldr	r6, [pc, #236]	; (8006378 <HAL_GPIO_Init+0x228>)
 800628c:	42b0      	cmp	r0, r6
 800628e:	d05d      	beq.n	800634c <HAL_GPIO_Init+0x1fc>
 8006290:	4e3a      	ldr	r6, [pc, #232]	; (800637c <HAL_GPIO_Init+0x22c>)
 8006292:	42b0      	cmp	r0, r6
 8006294:	d05f      	beq.n	8006356 <HAL_GPIO_Init+0x206>
 8006296:	4e3a      	ldr	r6, [pc, #232]	; (8006380 <HAL_GPIO_Init+0x230>)
 8006298:	42b0      	cmp	r0, r6
 800629a:	bf0c      	ite	eq
 800629c:	2609      	moveq	r6, #9
 800629e:	260a      	movne	r6, #10
 80062a0:	fa06 f202 	lsl.w	r2, r6, r2
 80062a4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062a6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80062a8:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80062ac:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062b0:	03e5      	lsls	r5, r4, #15
    position++;
 80062b2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 80062b6:	bf54      	ite	pl
 80062b8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80062ba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80062be:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062c2:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 80062c4:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80062c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80062cc:	bf54      	ite	pl
 80062ce:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80062d0:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062d4:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 80062d6:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80062da:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 80062dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80062e0:	bf54      	ite	pl
 80062e2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80062e4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062e8:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 80062ea:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 80062ee:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 80062f0:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80062f2:	bf54      	ite	pl
 80062f4:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80062f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80062fa:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062fc:	fa39 f203 	lsrs.w	r2, r9, r3
 8006300:	f47f af55 	bne.w	80061ae <HAL_GPIO_Init+0x5e>
  }
}
 8006304:	b005      	add	sp, #20
 8006306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630a:	40bd      	lsls	r5, r7
 800630c:	43ed      	mvns	r5, r5
 800630e:	e775      	b.n	80061fc <HAL_GPIO_Init+0xac>
 8006310:	2603      	movs	r6, #3
 8006312:	fa06 f202 	lsl.w	r2, r6, r2
 8006316:	4315      	orrs	r5, r2
 8006318:	e7c5      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 800631a:	2601      	movs	r6, #1
 800631c:	fa06 f202 	lsl.w	r2, r6, r2
 8006320:	4315      	orrs	r5, r2
 8006322:	e7c0      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 8006324:	2602      	movs	r6, #2
 8006326:	fa06 f202 	lsl.w	r2, r6, r2
 800632a:	4315      	orrs	r5, r2
 800632c:	e7bb      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 800632e:	2606      	movs	r6, #6
 8006330:	fa06 f202 	lsl.w	r2, r6, r2
 8006334:	4315      	orrs	r5, r2
 8006336:	e7b6      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 8006338:	2604      	movs	r6, #4
 800633a:	fa06 f202 	lsl.w	r2, r6, r2
 800633e:	4315      	orrs	r5, r2
 8006340:	e7b1      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 8006342:	2605      	movs	r6, #5
 8006344:	fa06 f202 	lsl.w	r2, r6, r2
 8006348:	4315      	orrs	r5, r2
 800634a:	e7ac      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 800634c:	2607      	movs	r6, #7
 800634e:	fa06 f202 	lsl.w	r2, r6, r2
 8006352:	4315      	orrs	r5, r2
 8006354:	e7a7      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 8006356:	2608      	movs	r6, #8
 8006358:	fa06 f202 	lsl.w	r2, r6, r2
 800635c:	4315      	orrs	r5, r2
 800635e:	e7a2      	b.n	80062a6 <HAL_GPIO_Init+0x156>
 8006360:	58020000 	.word	0x58020000
 8006364:	58020800 	.word	0x58020800
 8006368:	58020c00 	.word	0x58020c00
 800636c:	58021000 	.word	0x58021000
 8006370:	58021400 	.word	0x58021400
 8006374:	58021800 	.word	0x58021800
 8006378:	58021c00 	.word	0x58021c00
 800637c:	58022000 	.word	0x58022000
 8006380:	58022400 	.word	0x58022400
 8006384:	58024400 	.word	0x58024400
 8006388:	58000080 	.word	0x58000080

0800638c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800638c:	b902      	cbnz	r2, 8006390 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800638e:	0409      	lsls	r1, r1, #16
 8006390:	6181      	str	r1, [r0, #24]
  }
}
 8006392:	4770      	bx	lr

08006394 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006394:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006396:	ea01 0203 	and.w	r2, r1, r3
 800639a:	ea21 0103 	bic.w	r1, r1, r3
 800639e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063a2:	6181      	str	r1, [r0, #24]
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063a8:	4a04      	ldr	r2, [pc, #16]	; (80063bc <HAL_HSEM_FastTake+0x14>)
 80063aa:	3020      	adds	r0, #32
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <HAL_HSEM_FastTake+0x18>)
 80063ae:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80063b2:	1ac0      	subs	r0, r0, r3
 80063b4:	bf18      	it	ne
 80063b6:	2001      	movne	r0, #1
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	58026400 	.word	0x58026400
 80063c0:	80000300 	.word	0x80000300

080063c4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <HAL_HSEM_Release+0xc>)
 80063c6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80063ca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80063ce:	4770      	bx	lr
 80063d0:	58026400 	.word	0x58026400

080063d4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063d4:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80063d6:	f04f 0c00 	mov.w	ip, #0
{
 80063da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063de:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80063e0:	6804      	ldr	r4, [r0, #0]
 80063e2:	6848      	ldr	r0, [r1, #4]
{
 80063e4:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063e6:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80063e8:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063ee:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80063f2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063f6:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80063f8:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063fc:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006400:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006402:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006406:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006408:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800640a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800640c:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006410:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006414:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006418:	4f38      	ldr	r7, [pc, #224]	; (80064fc <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800641a:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800641c:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006420:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8006424:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006426:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800642a:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800642c:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006430:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006434:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006436:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800643a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800643c:	68e5      	ldr	r5, [r4, #12]
 800643e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8006442:	444d      	add	r5, r9
 8006444:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8006448:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800644a:	691d      	ldr	r5, [r3, #16]
 800644c:	f025 0507 	bic.w	r5, r5, #7
 8006450:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006452:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006456:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006458:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800645c:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006460:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006464:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8006468:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 800646c:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8006470:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8006474:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006476:	695d      	ldr	r5, [r3, #20]
 8006478:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800647c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800647e:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006482:	69dd      	ldr	r5, [r3, #28]
 8006484:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006486:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006488:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800648a:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 800648e:	4305      	orrs	r5, r0
 8006490:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006492:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006494:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006498:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800649a:	f1be 0f00 	cmp.w	lr, #0
 800649e:	d00b      	beq.n	80064b8 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064a0:	f1be 0f01 	cmp.w	lr, #1
 80064a4:	d026      	beq.n	80064f4 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064a6:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064aa:	2d02      	cmp	r5, #2
 80064ac:	d902      	bls.n	80064b4 <LTDC_SetConfig+0xe0>
 80064ae:	f1be 0f07 	cmp.w	lr, #7
 80064b2:	d121      	bne.n	80064f8 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80064b4:	2702      	movs	r7, #2
 80064b6:	e000      	b.n	80064ba <LTDC_SetConfig+0xe6>
    tmp = 4U;
 80064b8:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064ba:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064bc:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064be:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064c0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064c4:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064c8:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064cc:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064ce:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064d0:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064d4:	490a      	ldr	r1, [pc, #40]	; (8006500 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80064d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80064da:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064de:	4001      	ands	r1, r0
 80064e0:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064e2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80064e6:	58a3      	ldr	r3, [r4, r2]
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	50a3      	str	r3, [r4, r2]
}
 80064ee:	b003      	add	sp, #12
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 80064f4:	2703      	movs	r7, #3
 80064f6:	e7e0      	b.n	80064ba <LTDC_SetConfig+0xe6>
    tmp = 1U;
 80064f8:	2701      	movs	r7, #1
 80064fa:	e7de      	b.n	80064ba <LTDC_SetConfig+0xe6>
 80064fc:	fffff8f8 	.word	0xfffff8f8
 8006500:	fffff800 	.word	0xfffff800

08006504 <HAL_LTDC_MspInit>:
}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop

08006508 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8006508:	2800      	cmp	r0, #0
 800650a:	d06d      	beq.n	80065e8 <HAL_LTDC_Init+0xe0>
{
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800650e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006512:	4604      	mov	r4, r0
 8006514:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006518:	2b00      	cmp	r3, #0
 800651a:	d060      	beq.n	80065de <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800651c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800651e:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006520:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006522:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006524:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006528:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800652a:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800652c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006530:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006534:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006536:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006538:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800653a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800653e:	4e2b      	ldr	r6, [pc, #172]	; (80065ec <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006540:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006542:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006544:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006546:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006548:	4302      	orrs	r2, r0
 800654a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	4032      	ands	r2, r6
 8006550:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006552:	6898      	ldr	r0, [r3, #8]
 8006554:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006558:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800655a:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800655e:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006562:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006564:	68d8      	ldr	r0, [r3, #12]
 8006566:	4030      	ands	r0, r6
 8006568:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006570:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006572:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006576:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800657a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	4032      	ands	r2, r6
 8006580:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006582:	6918      	ldr	r0, [r3, #16]
 8006584:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006588:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800658a:	ea40 000c 	orr.w	r0, r0, ip
 800658e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006590:	6958      	ldr	r0, [r3, #20]
 8006592:	4006      	ands	r6, r0
 8006594:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800659a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800659e:	4302      	orrs	r2, r0
 80065a0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80065a4:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065a8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80065ac:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065b0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065b4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80065b8:	4302      	orrs	r2, r0
  return HAL_OK;
 80065ba:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065bc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80065c0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80065c4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c8:	f042 0206 	orr.w	r2, r2, #6
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	432a      	orrs	r2, r5
 80065d2:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065d4:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80065d8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 80065dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80065de:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80065e2:	f7ff ff8f 	bl	8006504 <HAL_LTDC_MspInit>
 80065e6:	e799      	b.n	800651c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80065e8:	2001      	movs	r0, #1
}
 80065ea:	4770      	bx	lr
 80065ec:	f000f800 	.word	0xf000f800

080065f0 <HAL_LTDC_ErrorCallback>:
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <HAL_LTDC_ReloadEventCallback>:
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop

080065f8 <HAL_LTDC_IRQHandler>:
{
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065fa:	6803      	ldr	r3, [r0, #0]
{
 80065fc:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065fe:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006600:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006602:	0769      	lsls	r1, r5, #29
 8006604:	d501      	bpl.n	800660a <HAL_LTDC_IRQHandler+0x12>
 8006606:	0772      	lsls	r2, r6, #29
 8006608:	d41d      	bmi.n	8006646 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800660a:	07ab      	lsls	r3, r5, #30
 800660c:	d501      	bpl.n	8006612 <HAL_LTDC_IRQHandler+0x1a>
 800660e:	07b7      	lsls	r7, r6, #30
 8006610:	d42d      	bmi.n	800666e <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006612:	07e8      	lsls	r0, r5, #31
 8006614:	d501      	bpl.n	800661a <HAL_LTDC_IRQHandler+0x22>
 8006616:	07f1      	lsls	r1, r6, #31
 8006618:	d440      	bmi.n	800669c <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800661a:	072a      	lsls	r2, r5, #28
 800661c:	d501      	bpl.n	8006622 <HAL_LTDC_IRQHandler+0x2a>
 800661e:	0733      	lsls	r3, r6, #28
 8006620:	d400      	bmi.n	8006624 <HAL_LTDC_IRQHandler+0x2c>
}
 8006622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006624:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006626:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8006628:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800662a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800662c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800662e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006630:	f022 0208 	bic.w	r2, r2, #8
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006636:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006638:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800663c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006640:	f7ff ffd8 	bl	80065f4 <HAL_LTDC_ReloadEventCallback>
}
 8006644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006648:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800664a:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800664c:	f022 0204 	bic.w	r2, r2, #4
 8006650:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006652:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006654:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006658:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006664:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8006668:	f7ff ffc2 	bl	80065f0 <HAL_LTDC_ErrorCallback>
 800666c:	e7cd      	b.n	800660a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800666e:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006670:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006672:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006676:	f022 0202 	bic.w	r2, r2, #2
 800667a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800667c:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800667e:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8006680:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006682:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006686:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800668a:	f043 0302 	orr.w	r3, r3, #2
 800668e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006692:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8006696:	f7ff ffab 	bl	80065f0 <HAL_LTDC_ErrorCallback>
 800669a:	e7ba      	b.n	8006612 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800669c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800669e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80066a0:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80066a2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80066a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80066ac:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80066ae:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80066b2:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80066b6:	f7fd fa2f 	bl	8003b18 <HAL_LTDC_LineEventCallback>
 80066ba:	e7ae      	b.n	800661a <HAL_LTDC_IRQHandler+0x22>

080066bc <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80066bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d028      	beq.n	8006716 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066c4:	2302      	movs	r3, #2
 80066c6:	4694      	mov	ip, r2
{
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066cc:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80066ce:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066d2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066d4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066d8:	fb04 0402 	mla	r4, r4, r2, r0
 80066dc:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80066de:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066e2:	460f      	mov	r7, r1
 80066e4:	3438      	adds	r4, #56	; 0x38
 80066e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80066f4:	4662      	mov	r2, ip
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066fa:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80066fc:	f7ff fe6a 	bl	80063d4 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8006700:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006702:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8006704:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006706:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800670a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800670e:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8006712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8006716:	2002      	movs	r0, #2
}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800671c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8006720:	2a01      	cmp	r2, #1
 8006722:	d017      	beq.n	8006754 <HAL_LTDC_ProgramLineEvent+0x38>
 8006724:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006726:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006728:	681a      	ldr	r2, [r3, #0]
{
 800672a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800672c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8006730:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006732:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8006734:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 8006736:	4e08      	ldr	r6, [pc, #32]	; (8006758 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006738:	f020 0001 	bic.w	r0, r0, #1
 800673c:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 800673e:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8006740:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006742:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006744:	4329      	orrs	r1, r5
 8006746:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8006748:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800674c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8006750:	bc70      	pop	{r4, r5, r6}
 8006752:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8006754:	2002      	movs	r0, #2
}
 8006756:	4770      	bx	lr
 8006758:	50001000 	.word	0x50001000

0800675c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006760:	f7fe fef8 	bl	8005554 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006764:	2c00      	cmp	r4, #0
 8006766:	d05a      	beq.n	800681e <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006768:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800676a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800676c:	2100      	movs	r1, #0
 800676e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006770:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8006774:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006780:	e005      	b.n	800678e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006782:	f7fe fee7 	bl	8005554 <HAL_GetTick>
 8006786:	1b43      	subs	r3, r0, r5
 8006788:	2b05      	cmp	r3, #5
 800678a:	d841      	bhi.n	8006810 <HAL_MDMA_Init+0xb4>
 800678c:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	07d2      	lsls	r2, r2, #31
 8006792:	d4f6      	bmi.n	8006782 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006794:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8006798:	69e1      	ldr	r1, [r4, #28]
 800679a:	4302      	orrs	r2, r0
 800679c:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067a4:	432a      	orrs	r2, r5
 80067a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80067a8:	4302      	orrs	r2, r0
 80067aa:	68a0      	ldr	r0, [r4, #8]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80067b0:	432a      	orrs	r2, r5
 80067b2:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80067b4:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80067b6:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80067b8:	6920      	ldr	r0, [r4, #16]
 80067ba:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80067bc:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80067be:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80067c2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80067c6:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80067c8:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80067ca:	d103      	bne.n	80067d4 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80067d2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80067d4:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80067d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067d8:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 80067da:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80067dc:	db30      	blt.n	8006840 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80067de:	b292      	uxth	r2, r2
 80067e0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80067e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	db1c      	blt.n	8006822 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067e8:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80067ea:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067ee:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80067f2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80067f4:	d021      	beq.n	800683a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80067f6:	b2c9      	uxtb	r1, r1
 80067f8:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80067fa:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80067fc:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8006800:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006802:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8006804:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8006806:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800680a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800680e:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006810:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006812:	2303      	movs	r3, #3
      return HAL_ERROR;
 8006814:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006816:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800681c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800681e:	2001      	movs	r0, #1
}
 8006820:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006822:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8006824:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006826:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800682a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800682e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006830:	6a18      	ldr	r0, [r3, #32]
 8006832:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8006836:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006838:	d1dd      	bne.n	80067f6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800683a:	2200      	movs	r2, #0
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
 800683e:	e7dc      	b.n	80067fa <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006840:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006842:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006844:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8006848:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800684a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800684c:	621a      	str	r2, [r3, #32]
 800684e:	e7c8      	b.n	80067e2 <HAL_MDMA_Init+0x86>

08006850 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8006850:	b1f0      	cbz	r0, 8006890 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8006852:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	4601      	mov	r1, r0
  return HAL_OK;
 8006858:	4618      	mov	r0, r3
{
 800685a:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 800685c:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800685e:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8006860:	f024 0401 	bic.w	r4, r4, #1
 8006864:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8006866:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8006868:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800686a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800686c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800686e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8006870:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8006872:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8006874:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8006876:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8006878:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800687a:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800687c:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 800687e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8006882:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8006886:	664b      	str	r3, [r1, #100]	; 0x64
}
 8006888:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 800688a:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 800688e:	4770      	bx	lr
    return HAL_ERROR;
 8006890:	2001      	movs	r0, #1
}
 8006892:	4770      	bx	lr

08006894 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006894:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <HAL_PWREx_ConfigSupply+0x74>)
 8006896:	68d3      	ldr	r3, [r2, #12]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800689e:	68d3      	ldr	r3, [r2, #12]
{
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80068a4:	d005      	beq.n	80068b2 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068aa:	1a18      	subs	r0, r3, r0
 80068ac:	bf18      	it	ne
 80068ae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068b6:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068b8:	4303      	orrs	r3, r0
 80068ba:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80068bc:	f7fe fe4a 	bl	8005554 <HAL_GetTick>
 80068c0:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068c2:	e005      	b.n	80068d0 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068c4:	f7fe fe46 	bl	8005554 <HAL_GetTick>
 80068c8:	1b43      	subs	r3, r0, r5
 80068ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ce:	d819      	bhi.n	8006904 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068d0:	6873      	ldr	r3, [r6, #4]
 80068d2:	049a      	lsls	r2, r3, #18
 80068d4:	d5f6      	bpl.n	80068c4 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068d6:	f1a4 031d 	sub.w	r3, r4, #29
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d905      	bls.n	80068ea <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80068de:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068e2:	2801      	cmp	r0, #1
 80068e4:	d901      	bls.n	80068ea <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80068e6:	2000      	movs	r0, #0
}
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80068ea:	f7fe fe33 	bl	8005554 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068ee:	4d06      	ldr	r5, [pc, #24]	; (8006908 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80068f0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068f2:	68eb      	ldr	r3, [r5, #12]
 80068f4:	03db      	lsls	r3, r3, #15
 80068f6:	d4f6      	bmi.n	80068e6 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068f8:	f7fe fe2c 	bl	8005554 <HAL_GetTick>
 80068fc:	1b00      	subs	r0, r0, r4
 80068fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006902:	d9f6      	bls.n	80068f2 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8006904:	2001      	movs	r0, #1
}
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	58024800 	.word	0x58024800

0800690c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800690c:	2800      	cmp	r0, #0
 800690e:	f000 81f7 	beq.w	8006d00 <HAL_RCC_OscConfig+0x3f4>
{
 8006912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006914:	6803      	ldr	r3, [r0, #0]
 8006916:	4604      	mov	r4, r0
 8006918:	07d9      	lsls	r1, r3, #31
 800691a:	d52e      	bpl.n	800697a <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800691c:	49b4      	ldr	r1, [pc, #720]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 800691e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006920:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006922:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006926:	2a10      	cmp	r2, #16
 8006928:	f000 812c 	beq.w	8006b84 <HAL_RCC_OscConfig+0x278>
 800692c:	2a18      	cmp	r2, #24
 800692e:	f000 8124 	beq.w	8006b7a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	f000 8167 	beq.w	8006c0a <HAL_RCC_OscConfig+0x2fe>
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 817f 	beq.w	8006c40 <HAL_RCC_OscConfig+0x334>
 8006942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006946:	4baa      	ldr	r3, [pc, #680]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	f000 8278 	beq.w	8006e3e <HAL_RCC_OscConfig+0x532>
 800694e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800695a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fe fdfa 	bl	8005554 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006960:	4ea3      	ldr	r6, [pc, #652]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8006962:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006964:	e005      	b.n	8006972 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006966:	f7fe fdf5 	bl	8005554 <HAL_GetTick>
 800696a:	1b40      	subs	r0, r0, r5
 800696c:	2864      	cmp	r0, #100	; 0x64
 800696e:	f200 8165 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	039f      	lsls	r7, r3, #14
 8006976:	d5f6      	bpl.n	8006966 <HAL_RCC_OscConfig+0x5a>
 8006978:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800697a:	0799      	lsls	r1, r3, #30
 800697c:	d521      	bpl.n	80069c2 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800697e:	4a9c      	ldr	r2, [pc, #624]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006980:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006982:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006984:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006988:	f040 80a8 	bne.w	8006adc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698c:	4b98      	ldr	r3, [pc, #608]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	075b      	lsls	r3, r3, #29
 8006992:	d503      	bpl.n	800699c <HAL_RCC_OscConfig+0x90>
 8006994:	68e3      	ldr	r3, [r4, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80ed 	beq.w	8006b76 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	f7fe fdf2 	bl	8005584 <HAL_GetREVID>
 80069a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80069a4:	4298      	cmp	r0, r3
 80069a6:	f200 8189 	bhi.w	8006cbc <HAL_RCC_OscConfig+0x3b0>
 80069aa:	6922      	ldr	r2, [r4, #16]
 80069ac:	2a40      	cmp	r2, #64	; 0x40
 80069ae:	f000 824e 	beq.w	8006e4e <HAL_RCC_OscConfig+0x542>
 80069b2:	498f      	ldr	r1, [pc, #572]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 80069b4:	684b      	ldr	r3, [r1, #4]
 80069b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80069be:	604b      	str	r3, [r1, #4]
 80069c0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069c2:	06d9      	lsls	r1, r3, #27
 80069c4:	d456      	bmi.n	8006a74 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c6:	071d      	lsls	r5, r3, #28
 80069c8:	d517      	bpl.n	80069fa <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80b4 	beq.w	8006b3a <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b87      	ldr	r3, [pc, #540]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 80069d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069d6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80069de:	f7fe fdb9 	bl	8005554 <HAL_GetTick>
 80069e2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069e4:	e005      	b.n	80069f2 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e6:	f7fe fdb5 	bl	8005554 <HAL_GetTick>
 80069ea:	1b40      	subs	r0, r0, r5
 80069ec:	2802      	cmp	r0, #2
 80069ee:	f200 8125 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069f2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80069f4:	0798      	lsls	r0, r3, #30
 80069f6:	d5f6      	bpl.n	80069e6 <HAL_RCC_OscConfig+0xda>
 80069f8:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069fa:	069a      	lsls	r2, r3, #26
 80069fc:	d517      	bpl.n	8006a2e <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069fe:	69a3      	ldr	r3, [r4, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8134 	beq.w	8006c6e <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a06:	4b7a      	ldr	r3, [pc, #488]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006a08:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a0a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8006a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006a12:	f7fe fd9f 	bl	8005554 <HAL_GetTick>
 8006a16:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a18:	e005      	b.n	8006a26 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a1a:	f7fe fd9b 	bl	8005554 <HAL_GetTick>
 8006a1e:	1b40      	subs	r0, r0, r5
 8006a20:	2802      	cmp	r0, #2
 8006a22:	f200 810b 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a26:	6833      	ldr	r3, [r6, #0]
 8006a28:	049f      	lsls	r7, r3, #18
 8006a2a:	d5f6      	bpl.n	8006a1a <HAL_RCC_OscConfig+0x10e>
 8006a2c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2e:	0759      	lsls	r1, r3, #29
 8006a30:	f100 80b2 	bmi.w	8006b98 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a36:	b1d8      	cbz	r0, 8006a70 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a38:	4b6d      	ldr	r3, [pc, #436]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006a40:	2a18      	cmp	r2, #24
 8006a42:	f000 81ce 	beq.w	8006de2 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a48:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a4a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8006a4c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006a50:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a52:	f000 8161 	beq.w	8006d18 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fe fd7d 	bl	8005554 <HAL_GetTick>
 8006a5a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5c:	e005      	b.n	8006a6a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a5e:	f7fe fd79 	bl	8005554 <HAL_GetTick>
 8006a62:	1b00      	subs	r0, r0, r4
 8006a64:	2802      	cmp	r0, #2
 8006a66:	f200 80e9 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a6a:	682b      	ldr	r3, [r5, #0]
 8006a6c:	019b      	lsls	r3, r3, #6
 8006a6e:	d4f6      	bmi.n	8006a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006a70:	2000      	movs	r0, #0
}
 8006a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a74:	4a5e      	ldr	r2, [pc, #376]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006a76:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a78:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d072      	beq.n	8006b68 <HAL_RCC_OscConfig+0x25c>
 8006a82:	2b18      	cmp	r3, #24
 8006a84:	d06c      	beq.n	8006b60 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a86:	69e3      	ldr	r3, [r4, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8103 	beq.w	8006c94 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8006a8e:	4b58      	ldr	r3, [pc, #352]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006a90:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a92:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8006a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a9a:	f7fe fd5b 	bl	8005554 <HAL_GetTick>
 8006a9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aa0:	e005      	b.n	8006aae <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006aa2:	f7fe fd57 	bl	8005554 <HAL_GetTick>
 8006aa6:	1b40      	subs	r0, r0, r5
 8006aa8:	2802      	cmp	r0, #2
 8006aaa:	f200 80c7 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aae:	6833      	ldr	r3, [r6, #0]
 8006ab0:	05db      	lsls	r3, r3, #23
 8006ab2:	d5f6      	bpl.n	8006aa2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ab4:	f7fe fd66 	bl	8005584 <HAL_GetREVID>
 8006ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8006abc:	4298      	cmp	r0, r3
 8006abe:	f200 81e9 	bhi.w	8006e94 <HAL_RCC_OscConfig+0x588>
 8006ac2:	6a22      	ldr	r2, [r4, #32]
 8006ac4:	6873      	ldr	r3, [r6, #4]
 8006ac6:	2a20      	cmp	r2, #32
 8006ac8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006acc:	bf0c      	ite	eq
 8006ace:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006ad2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006ad6:	6073      	str	r3, [r6, #4]
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	e774      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006adc:	2b18      	cmp	r3, #24
 8006ade:	f000 810b 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ae2:	68e2      	ldr	r2, [r4, #12]
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	f000 80f3 	beq.w	8006cd0 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aea:	4941      	ldr	r1, [pc, #260]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006aec:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aee:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006af0:	f023 0319 	bic.w	r3, r3, #25
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8006af8:	f7fe fd2c 	bl	8005554 <HAL_GetTick>
 8006afc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006afe:	e005      	b.n	8006b0c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b00:	f7fe fd28 	bl	8005554 <HAL_GetTick>
 8006b04:	1b40      	subs	r0, r0, r5
 8006b06:	2802      	cmp	r0, #2
 8006b08:	f200 8098 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	075f      	lsls	r7, r3, #29
 8006b10:	d5f6      	bpl.n	8006b00 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b12:	f7fe fd37 	bl	8005584 <HAL_GetREVID>
 8006b16:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b1a:	4298      	cmp	r0, r3
 8006b1c:	f200 81c3 	bhi.w	8006ea6 <HAL_RCC_OscConfig+0x59a>
 8006b20:	6922      	ldr	r2, [r4, #16]
 8006b22:	6873      	ldr	r3, [r6, #4]
 8006b24:	2a40      	cmp	r2, #64	; 0x40
 8006b26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b2a:	bf0c      	ite	eq
 8006b2c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006b30:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006b34:	6073      	str	r3, [r6, #4]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	e743      	b.n	80069c2 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8006b3a:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006b3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b3e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006b46:	f7fe fd05 	bl	8005554 <HAL_GetTick>
 8006b4a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b4c:	e004      	b.n	8006b58 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b4e:	f7fe fd01 	bl	8005554 <HAL_GetTick>
 8006b52:	1b40      	subs	r0, r0, r5
 8006b54:	2802      	cmp	r0, #2
 8006b56:	d871      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b58:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006b5a:	0799      	lsls	r1, r3, #30
 8006b5c:	d4f7      	bmi.n	8006b4e <HAL_RCC_OscConfig+0x242>
 8006b5e:	e74b      	b.n	80069f8 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b60:	f002 0203 	and.w	r2, r2, #3
 8006b64:	2a01      	cmp	r2, #1
 8006b66:	d18e      	bne.n	8006a86 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b68:	4b21      	ldr	r3, [pc, #132]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	05da      	lsls	r2, r3, #23
 8006b6e:	d552      	bpl.n	8006c16 <HAL_RCC_OscConfig+0x30a>
 8006b70:	69e3      	ldr	r3, [r4, #28]
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d04f      	beq.n	8006c16 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8006b76:	2001      	movs	r0, #1
}
 8006b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b7a:	f001 0103 	and.w	r1, r1, #3
 8006b7e:	2902      	cmp	r1, #2
 8006b80:	f47f aed7 	bne.w	8006932 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	4a1a      	ldr	r2, [pc, #104]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	0392      	lsls	r2, r2, #14
 8006b8a:	f57f aef6 	bpl.w	800697a <HAL_RCC_OscConfig+0x6e>
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	f47f aef2 	bne.w	800697a <HAL_RCC_OscConfig+0x6e>
 8006b96:	e7ee      	b.n	8006b76 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8006b98:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <HAL_RCC_OscConfig+0x2e8>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8006b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006ba4:	f7fe fcd6 	bl	8005554 <HAL_GetTick>
 8006ba8:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006baa:	e004      	b.n	8006bb6 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bac:	f7fe fcd2 	bl	8005554 <HAL_GetTick>
 8006bb0:	1b40      	subs	r0, r0, r5
 8006bb2:	2864      	cmp	r0, #100	; 0x64
 8006bb4:	d842      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	05da      	lsls	r2, r3, #23
 8006bba:	d5f7      	bpl.n	8006bac <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	f000 817a 	beq.w	8006eb8 <HAL_RCC_OscConfig+0x5ac>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 814b 	beq.w	8006e60 <HAL_RCC_OscConfig+0x554>
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
 8006bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd0:	f000 8187 	beq.w	8006ee2 <HAL_RCC_OscConfig+0x5d6>
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	671a      	str	r2, [r3, #112]	; 0x70
 8006bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bdc:	f022 0204 	bic.w	r2, r2, #4
 8006be0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006be2:	f7fe fcb7 	bl	8005554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006be6:	4e02      	ldr	r6, [pc, #8]	; (8006bf0 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006bec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x2f6>
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf8:	f7fe fcac 	bl	8005554 <HAL_GetTick>
 8006bfc:	1b40      	subs	r0, r0, r5
 8006bfe:	42b8      	cmp	r0, r7
 8006c00:	d81c      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c02:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006c04:	079b      	lsls	r3, r3, #30
 8006c06:	d5f7      	bpl.n	8006bf8 <HAL_RCC_OscConfig+0x2ec>
 8006c08:	e714      	b.n	8006a34 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c0a:	4aae      	ldr	r2, [pc, #696]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006c0c:	6813      	ldr	r3, [r2, #0]
 8006c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c12:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c14:	e6a2      	b.n	800695c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c16:	f7fe fcb5 	bl	8005584 <HAL_GetREVID>
 8006c1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	d870      	bhi.n	8006d04 <HAL_RCC_OscConfig+0x3f8>
 8006c22:	6a22      	ldr	r2, [r4, #32]
 8006c24:	2a20      	cmp	r2, #32
 8006c26:	f000 8153 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x5c4>
 8006c2a:	49a6      	ldr	r1, [pc, #664]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006c2c:	684b      	ldr	r3, [r1, #4]
 8006c2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c32:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006c36:	604b      	str	r3, [r1, #4]
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	e6c4      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8006c3c:	2003      	movs	r0, #3
}
 8006c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c40:	4ba0      	ldr	r3, [pc, #640]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006c42:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c44:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006c54:	f7fe fc7e 	bl	8005554 <HAL_GetTick>
 8006c58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c5a:	e004      	b.n	8006c66 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c5c:	f7fe fc7a 	bl	8005554 <HAL_GetTick>
 8006c60:	1b40      	subs	r0, r0, r5
 8006c62:	2864      	cmp	r0, #100	; 0x64
 8006c64:	d8ea      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c66:	6833      	ldr	r3, [r6, #0]
 8006c68:	0398      	lsls	r0, r3, #14
 8006c6a:	d4f7      	bmi.n	8006c5c <HAL_RCC_OscConfig+0x350>
 8006c6c:	e684      	b.n	8006978 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8006c6e:	4b95      	ldr	r3, [pc, #596]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006c70:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c72:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8006c74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006c7a:	f7fe fc6b 	bl	8005554 <HAL_GetTick>
 8006c7e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c80:	e004      	b.n	8006c8c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c82:	f7fe fc67 	bl	8005554 <HAL_GetTick>
 8006c86:	1b40      	subs	r0, r0, r5
 8006c88:	2802      	cmp	r0, #2
 8006c8a:	d8d7      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	0498      	lsls	r0, r3, #18
 8006c90:	d4f7      	bmi.n	8006c82 <HAL_RCC_OscConfig+0x376>
 8006c92:	e6cb      	b.n	8006a2c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8006c94:	4b8b      	ldr	r3, [pc, #556]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006c96:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c98:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8006c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ca0:	f7fe fc58 	bl	8005554 <HAL_GetTick>
 8006ca4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ca6:	e004      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ca8:	f7fe fc54 	bl	8005554 <HAL_GetTick>
 8006cac:	1b40      	subs	r0, r0, r5
 8006cae:	2802      	cmp	r0, #2
 8006cb0:	d8c4      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cb2:	6833      	ldr	r3, [r6, #0]
 8006cb4:	05df      	lsls	r7, r3, #23
 8006cb6:	d4f7      	bmi.n	8006ca8 <HAL_RCC_OscConfig+0x39c>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	e684      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cbc:	4a81      	ldr	r2, [pc, #516]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006cbe:	6921      	ldr	r1, [r4, #16]
 8006cc0:	6853      	ldr	r3, [r2, #4]
 8006cc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cca:	6053      	str	r3, [r2, #4]
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	e678      	b.n	80069c2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8006cd0:	4b7c      	ldr	r3, [pc, #496]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cd4:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006cdc:	f7fe fc3a 	bl	8005554 <HAL_GetTick>
 8006ce0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ce2:	e004      	b.n	8006cee <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce4:	f7fe fc36 	bl	8005554 <HAL_GetTick>
 8006ce8:	1b40      	subs	r0, r0, r5
 8006cea:	2802      	cmp	r0, #2
 8006cec:	d8a6      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cee:	6833      	ldr	r3, [r6, #0]
 8006cf0:	0758      	lsls	r0, r3, #29
 8006cf2:	d4f7      	bmi.n	8006ce4 <HAL_RCC_OscConfig+0x3d8>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	e664      	b.n	80069c2 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cf8:	0792      	lsls	r2, r2, #30
 8006cfa:	f47f aef2 	bne.w	8006ae2 <HAL_RCC_OscConfig+0x1d6>
 8006cfe:	e645      	b.n	800698c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8006d00:	2001      	movs	r0, #1
}
 8006d02:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d04:	4a6f      	ldr	r2, [pc, #444]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006d06:	6a21      	ldr	r1, [r4, #32]
 8006d08:	68d3      	ldr	r3, [r2, #12]
 8006d0a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d12:	60d3      	str	r3, [r2, #12]
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	e656      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8006d18:	f7fe fc1c 	bl	8005554 <HAL_GetTick>
 8006d1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d1e:	e004      	b.n	8006d2a <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fe fc18 	bl	8005554 <HAL_GetTick>
 8006d24:	1b80      	subs	r0, r0, r6
 8006d26:	2802      	cmp	r0, #2
 8006d28:	d888      	bhi.n	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	0199      	lsls	r1, r3, #6
 8006d2e:	d4f7      	bmi.n	8006d20 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006d32:	4b65      	ldr	r3, [pc, #404]	; (8006ec8 <HAL_RCC_OscConfig+0x5bc>)
 8006d34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006d36:	4013      	ands	r3, r2
 8006d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d3a:	4964      	ldr	r1, [pc, #400]	; (8006ecc <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d3c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d3e:	4e61      	ldr	r6, [pc, #388]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006d44:	62ab      	str	r3, [r5, #40]	; 0x28
 8006d46:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006d48:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006d4c:	3f01      	subs	r7, #1
 8006d4e:	1e50      	subs	r0, r2, #1
 8006d50:	3b01      	subs	r3, #1
 8006d52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006d54:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006d58:	025b      	lsls	r3, r3, #9
 8006d5a:	0400      	lsls	r0, r0, #16
 8006d5c:	3a01      	subs	r2, #1
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006d64:	0612      	lsls	r2, r2, #24
 8006d66:	4303      	orrs	r3, r0
 8006d68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006d6c:	433b      	orrs	r3, r7
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d7a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006d7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d7e:	4011      	ands	r1, r2
 8006d80:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006d84:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d8a:	f023 030c 	bic.w	r3, r3, #12
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d94:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006d96:	f023 0302 	bic.w	r3, r3, #2
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006dae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006db6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006dc6:	f7fe fbc5 	bl	8005554 <HAL_GetTick>
 8006dca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dcc:	e005      	b.n	8006dda <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dce:	f7fe fbc1 	bl	8005554 <HAL_GetTick>
 8006dd2:	1b00      	subs	r0, r0, r4
 8006dd4:	2802      	cmp	r0, #2
 8006dd6:	f63f af31 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dda:	6833      	ldr	r3, [r6, #0]
 8006ddc:	019a      	lsls	r2, r3, #6
 8006dde:	d5f6      	bpl.n	8006dce <HAL_RCC_OscConfig+0x4c2>
 8006de0:	e646      	b.n	8006a70 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006de6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de8:	f43f ae43 	beq.w	8006a72 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dec:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006df2:	428b      	cmp	r3, r1
 8006df4:	f47f aebf 	bne.w	8006b76 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	f47f aeb9 	bne.w	8006b76 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e06:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8006e0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	f47f aeb2 	bne.w	8006b76 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e14:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8006e18:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f47f aeab 	bne.w	8006b76 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e22:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8006e26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	f47f aea4 	bne.w	8006b76 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006e30:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006e34:	3801      	subs	r0, #1
  return HAL_OK;
 8006e36:	1a28      	subs	r0, r5, r0
 8006e38:	bf18      	it	ne
 8006e3a:	2001      	movne	r0, #1
}
 8006e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e586      	b.n	800695c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006e50:	6853      	ldr	r3, [r2, #4]
 8006e52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5a:	6053      	str	r3, [r2, #4]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	e5b0      	b.n	80069c2 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e60:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e68:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	671a      	str	r2, [r3, #112]	; 0x70
 8006e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006e78:	f7fe fb6c 	bl	8005554 <HAL_GetTick>
 8006e7c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e80:	f7fe fb68 	bl	8005554 <HAL_GetTick>
 8006e84:	1b40      	subs	r0, r0, r5
 8006e86:	42b8      	cmp	r0, r7
 8006e88:	f63f aed8 	bhi.w	8006c3c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e8c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006e8e:	0798      	lsls	r0, r3, #30
 8006e90:	d4f6      	bmi.n	8006e80 <HAL_RCC_OscConfig+0x574>
 8006e92:	e5cf      	b.n	8006a34 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e94:	68f3      	ldr	r3, [r6, #12]
 8006e96:	6a22      	ldr	r2, [r4, #32]
 8006e98:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ea0:	60f3      	str	r3, [r6, #12]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	e58f      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea6:	6873      	ldr	r3, [r6, #4]
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006eae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006eb2:	6073      	str	r3, [r6, #4]
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	e584      	b.n	80069c2 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eb8:	4a02      	ldr	r2, [pc, #8]	; (8006ec4 <HAL_RCC_OscConfig+0x5b8>)
 8006eba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec2:	e68e      	b.n	8006be2 <HAL_RCC_OscConfig+0x2d6>
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	fffffc0c 	.word	0xfffffc0c
 8006ecc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <HAL_RCC_OscConfig+0x5e8>)
 8006ed2:	6853      	ldr	r3, [r2, #4]
 8006ed4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	e571      	b.n	80069c6 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ee2:	f042 0204 	orr.w	r2, r2, #4
 8006ee6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	671a      	str	r2, [r3, #112]	; 0x70
 8006ef0:	e677      	b.n	8006be2 <HAL_RCC_OscConfig+0x2d6>
 8006ef2:	bf00      	nop
 8006ef4:	58024400 	.word	0x58024400

08006ef8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ef8:	4a47      	ldr	r2, [pc, #284]	; (8007018 <HAL_RCC_GetSysClockFreq+0x120>)
 8006efa:	6913      	ldr	r3, [r2, #16]
 8006efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d004      	beq.n	8006f0e <HAL_RCC_GetSysClockFreq+0x16>
 8006f04:	2b18      	cmp	r3, #24
 8006f06:	d00d      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x2c>
 8006f08:	b11b      	cbz	r3, 8006f12 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f0a:	4844      	ldr	r0, [pc, #272]	; (800701c <HAL_RCC_GetSysClockFreq+0x124>)
 8006f0c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f0e:	4844      	ldr	r0, [pc, #272]	; (8007020 <HAL_RCC_GetSysClockFreq+0x128>)
 8006f10:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	0699      	lsls	r1, r3, #26
 8006f16:	d54a      	bpl.n	8006fae <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	4842      	ldr	r0, [pc, #264]	; (8007024 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006f1c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f20:	40d8      	lsrs	r0, r3
 8006f22:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f24:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8006f26:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f28:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8006f2c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f30:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f34:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006f36:	d038      	beq.n	8006faa <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f38:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f3c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f40:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f44:	fb01 f105 	mul.w	r1, r1, r5
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	ee07 1a90 	vmov	s15, r1
 8006f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8006f52:	d002      	beq.n	8006f5a <HAL_RCC_GetSysClockFreq+0x62>
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d02c      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0xba>
 8006f58:	b393      	cbz	r3, 8006fc0 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f5a:	ee07 0a90 	vmov	s15, r0
 8006f5e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007028 <HAL_RCC_GetSysClockFreq+0x130>
 8006f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f68:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006f6c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800702c <HAL_RCC_GetSysClockFreq+0x134>
 8006f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f80:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006f84:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f88:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f8c:	4b22      	ldr	r3, [pc, #136]	; (8007018 <HAL_RCC_GetSysClockFreq+0x120>)
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006f94:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006faa:	bc30      	pop	{r4, r5}
 8006fac:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fae:	481d      	ldr	r0, [pc, #116]	; (8007024 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8006fb0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fb2:	ee07 0a90 	vmov	s15, r0
 8006fb6:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8007030 <HAL_RCC_GetSysClockFreq+0x138>
 8006fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fbe:	e7d2      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc0:	6813      	ldr	r3, [r2, #0]
 8006fc2:	069b      	lsls	r3, r3, #26
 8006fc4:	d520      	bpl.n	8007008 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fc6:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fc8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fcc:	4915      	ldr	r1, [pc, #84]	; (8007024 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fd2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fda:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fdc:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fde:	eddf 4a13 	vldr	s9, [pc, #76]	; 800702c <HAL_RCC_GetSysClockFreq+0x134>
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	ee06 1a10 	vmov	s12, r1
 8006fea:	ee06 3a90 	vmov	s13, r3
 8006fee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006ff2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006ff6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8006ffa:	eee7 6a24 	vfma.f32	s13, s14, s9
 8006ffe:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007002:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007006:	e7c1      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007008:	ee07 0a90 	vmov	s15, r0
 800700c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007034 <HAL_RCC_GetSysClockFreq+0x13c>
 8007010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007014:	e7a7      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x6e>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	003d0900 	.word	0x003d0900
 8007020:	017d7840 	.word	0x017d7840
 8007024:	03d09000 	.word	0x03d09000
 8007028:	4a742400 	.word	0x4a742400
 800702c:	39000000 	.word	0x39000000
 8007030:	4bbebc20 	.word	0x4bbebc20
 8007034:	4c742400 	.word	0x4c742400

08007038 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007038:	2800      	cmp	r0, #0
 800703a:	f000 810e 	beq.w	800725a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800703e:	4a8d      	ldr	r2, [pc, #564]	; (8007274 <HAL_RCC_ClockConfig+0x23c>)
 8007040:	6813      	ldr	r3, [r2, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	428b      	cmp	r3, r1
{
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007050:	d20c      	bcs.n	800706c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	f023 030f 	bic.w	r3, r3, #15
 8007058:	430b      	orrs	r3, r1
 800705a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	428b      	cmp	r3, r1
 8007064:	d002      	beq.n	800706c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007066:	2001      	movs	r0, #1
}
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	075f      	lsls	r7, r3, #29
 8007070:	d50b      	bpl.n	800708a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007072:	4981      	ldr	r1, [pc, #516]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007074:	6920      	ldr	r0, [r4, #16]
 8007076:	698a      	ldr	r2, [r1, #24]
 8007078:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800707c:	4290      	cmp	r0, r2
 800707e:	d904      	bls.n	800708a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007080:	698a      	ldr	r2, [r1, #24]
 8007082:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007086:	4302      	orrs	r2, r0
 8007088:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708a:	071e      	lsls	r6, r3, #28
 800708c:	d50b      	bpl.n	80070a6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800708e:	497a      	ldr	r1, [pc, #488]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007090:	6960      	ldr	r0, [r4, #20]
 8007092:	69ca      	ldr	r2, [r1, #28]
 8007094:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007098:	4290      	cmp	r0, r2
 800709a:	d904      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800709c:	69ca      	ldr	r2, [r1, #28]
 800709e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070a2:	4302      	orrs	r2, r0
 80070a4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a6:	06d8      	lsls	r0, r3, #27
 80070a8:	d50b      	bpl.n	80070c2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070aa:	4973      	ldr	r1, [pc, #460]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80070ac:	69a0      	ldr	r0, [r4, #24]
 80070ae:	69ca      	ldr	r2, [r1, #28]
 80070b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80070b4:	4290      	cmp	r0, r2
 80070b6:	d904      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070b8:	69ca      	ldr	r2, [r1, #28]
 80070ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070be:	4302      	orrs	r2, r0
 80070c0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070c2:	0699      	lsls	r1, r3, #26
 80070c4:	d50b      	bpl.n	80070de <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070c6:	496c      	ldr	r1, [pc, #432]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80070c8:	69e0      	ldr	r0, [r4, #28]
 80070ca:	6a0a      	ldr	r2, [r1, #32]
 80070cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80070d0:	4290      	cmp	r0, r2
 80070d2:	d904      	bls.n	80070de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070d4:	6a0a      	ldr	r2, [r1, #32]
 80070d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070da:	4302      	orrs	r2, r0
 80070dc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070de:	079a      	lsls	r2, r3, #30
 80070e0:	f140 80ad 	bpl.w	800723e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070e4:	4864      	ldr	r0, [pc, #400]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80070e6:	68e1      	ldr	r1, [r4, #12]
 80070e8:	6982      	ldr	r2, [r0, #24]
 80070ea:	f002 020f 	and.w	r2, r2, #15
 80070ee:	4291      	cmp	r1, r2
 80070f0:	d904      	bls.n	80070fc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f2:	6982      	ldr	r2, [r0, #24]
 80070f4:	f022 020f 	bic.w	r2, r2, #15
 80070f8:	430a      	orrs	r2, r1
 80070fa:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fc:	07d8      	lsls	r0, r3, #31
 80070fe:	d531      	bpl.n	8007164 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007100:	4a5d      	ldr	r2, [pc, #372]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007102:	68a1      	ldr	r1, [r4, #8]
 8007104:	6993      	ldr	r3, [r2, #24]
 8007106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800710a:	430b      	orrs	r3, r1
 800710c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007110:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007112:	2902      	cmp	r1, #2
 8007114:	f000 80a3 	beq.w	800725e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007118:	2903      	cmp	r1, #3
 800711a:	f000 809a 	beq.w	8007252 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800711e:	2901      	cmp	r1, #1
 8007120:	f000 80a3 	beq.w	800726a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007124:	0758      	lsls	r0, r3, #29
 8007126:	d59e      	bpl.n	8007066 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007128:	4a53      	ldr	r2, [pc, #332]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800712a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800712e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007130:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007132:	f023 0307 	bic.w	r3, r3, #7
 8007136:	430b      	orrs	r3, r1
 8007138:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800713a:	f7fe fa0b 	bl	8005554 <HAL_GetTick>
 800713e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007140:	e005      	b.n	800714e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007142:	f7fe fa07 	bl	8005554 <HAL_GetTick>
 8007146:	1b80      	subs	r0, r0, r6
 8007148:	4540      	cmp	r0, r8
 800714a:	f200 808c 	bhi.w	8007266 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6862      	ldr	r2, [r4, #4]
 8007152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007156:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800715a:	d1f2      	bne.n	8007142 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	0799      	lsls	r1, r3, #30
 8007160:	d506      	bpl.n	8007170 <HAL_RCC_ClockConfig+0x138>
 8007162:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007164:	4844      	ldr	r0, [pc, #272]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007166:	6982      	ldr	r2, [r0, #24]
 8007168:	f002 020f 	and.w	r2, r2, #15
 800716c:	428a      	cmp	r2, r1
 800716e:	d86a      	bhi.n	8007246 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007170:	4940      	ldr	r1, [pc, #256]	; (8007274 <HAL_RCC_ClockConfig+0x23c>)
 8007172:	680a      	ldr	r2, [r1, #0]
 8007174:	f002 020f 	and.w	r2, r2, #15
 8007178:	42aa      	cmp	r2, r5
 800717a:	d90a      	bls.n	8007192 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717c:	680a      	ldr	r2, [r1, #0]
 800717e:	f022 020f 	bic.w	r2, r2, #15
 8007182:	432a      	orrs	r2, r5
 8007184:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	680a      	ldr	r2, [r1, #0]
 8007188:	f002 020f 	and.w	r2, r2, #15
 800718c:	42aa      	cmp	r2, r5
 800718e:	f47f af6a 	bne.w	8007066 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007192:	075a      	lsls	r2, r3, #29
 8007194:	d50b      	bpl.n	80071ae <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007196:	4938      	ldr	r1, [pc, #224]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007198:	6920      	ldr	r0, [r4, #16]
 800719a:	698a      	ldr	r2, [r1, #24]
 800719c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80071a0:	4290      	cmp	r0, r2
 80071a2:	d204      	bcs.n	80071ae <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071a4:	698a      	ldr	r2, [r1, #24]
 80071a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071aa:	4302      	orrs	r2, r0
 80071ac:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ae:	071f      	lsls	r7, r3, #28
 80071b0:	d50b      	bpl.n	80071ca <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071b2:	4931      	ldr	r1, [pc, #196]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80071b4:	6960      	ldr	r0, [r4, #20]
 80071b6:	69ca      	ldr	r2, [r1, #28]
 80071b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80071bc:	4290      	cmp	r0, r2
 80071be:	d204      	bcs.n	80071ca <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071c0:	69ca      	ldr	r2, [r1, #28]
 80071c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071c6:	4302      	orrs	r2, r0
 80071c8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	06de      	lsls	r6, r3, #27
 80071cc:	d50b      	bpl.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071ce:	492a      	ldr	r1, [pc, #168]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80071d0:	69a0      	ldr	r0, [r4, #24]
 80071d2:	69ca      	ldr	r2, [r1, #28]
 80071d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80071d8:	4290      	cmp	r0, r2
 80071da:	d204      	bcs.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071dc:	69ca      	ldr	r2, [r1, #28]
 80071de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071e2:	4302      	orrs	r2, r0
 80071e4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071e6:	069d      	lsls	r5, r3, #26
 80071e8:	d50b      	bpl.n	8007202 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071ea:	4a23      	ldr	r2, [pc, #140]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 80071ec:	69e1      	ldr	r1, [r4, #28]
 80071ee:	6a13      	ldr	r3, [r2, #32]
 80071f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f4:	4299      	cmp	r1, r3
 80071f6:	d204      	bcs.n	8007202 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80071f8:	6a13      	ldr	r3, [r2, #32]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	430b      	orrs	r3, r1
 8007200:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007202:	f7ff fe79 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 8007206:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007208:	4602      	mov	r2, r0
 800720a:	481c      	ldr	r0, [pc, #112]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800720c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800720e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007210:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8007214:	4d1a      	ldr	r5, [pc, #104]	; (8007280 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	4c1a      	ldr	r4, [pc, #104]	; (8007284 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800721c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800721e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007220:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8007224:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007226:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800722a:	4d17      	ldr	r5, [pc, #92]	; (8007288 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800722c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8007232:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007234:	6023      	str	r3, [r4, #0]
}
 8007236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800723a:	f7fe b929 	b.w	8005490 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800723e:	07da      	lsls	r2, r3, #31
 8007240:	f53f af5e 	bmi.w	8007100 <HAL_RCC_ClockConfig+0xc8>
 8007244:	e794      	b.n	8007170 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007246:	6982      	ldr	r2, [r0, #24]
 8007248:	f022 020f 	bic.w	r2, r2, #15
 800724c:	4311      	orrs	r1, r2
 800724e:	6181      	str	r1, [r0, #24]
 8007250:	e78e      	b.n	8007170 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007252:	019f      	lsls	r7, r3, #6
 8007254:	f53f af68 	bmi.w	8007128 <HAL_RCC_ClockConfig+0xf0>
 8007258:	e705      	b.n	8007066 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800725a:	2001      	movs	r0, #1
}
 800725c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800725e:	039b      	lsls	r3, r3, #14
 8007260:	f53f af62 	bmi.w	8007128 <HAL_RCC_ClockConfig+0xf0>
 8007264:	e6ff      	b.n	8007066 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8007266:	2003      	movs	r0, #3
 8007268:	e6fe      	b.n	8007068 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800726a:	05de      	lsls	r6, r3, #23
 800726c:	f53f af5c 	bmi.w	8007128 <HAL_RCC_ClockConfig+0xf0>
 8007270:	e6f9      	b.n	8007066 <HAL_RCC_ClockConfig+0x2e>
 8007272:	bf00      	nop
 8007274:	52002000 	.word	0x52002000
 8007278:	58024400 	.word	0x58024400
 800727c:	080083c4 	.word	0x080083c4
 8007280:	24009060 	.word	0x24009060
 8007284:	24000004 	.word	0x24000004
 8007288:	24000000 	.word	0x24000000

0800728c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800728c:	4a3b      	ldr	r2, [pc, #236]	; (800737c <RCCEx_PLL2_Config+0xf0>)
{
 800728e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007290:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d069      	beq.n	800736e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800729a:	6813      	ldr	r3, [r2, #0]
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072a0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80072a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80072a8:	f7fe f954 	bl	8005554 <HAL_GetTick>
 80072ac:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072ae:	e004      	b.n	80072ba <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072b0:	f7fe f950 	bl	8005554 <HAL_GetTick>
 80072b4:	1b43      	subs	r3, r0, r5
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d857      	bhi.n	800736a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	011a      	lsls	r2, r3, #4
 80072be:	d4f7      	bmi.n	80072b0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072c2:	6832      	ldr	r2, [r6, #0]
 80072c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072c8:	492d      	ldr	r1, [pc, #180]	; (8007380 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072ca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80072ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80072d0:	6875      	ldr	r5, [r6, #4]
 80072d2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80072d6:	3d01      	subs	r5, #1
 80072d8:	1e50      	subs	r0, r2, #1
 80072da:	3b01      	subs	r3, #1
 80072dc:	6932      	ldr	r2, [r6, #16]
 80072de:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80072e2:	025b      	lsls	r3, r3, #9
 80072e4:	0400      	lsls	r0, r0, #16
 80072e6:	3a01      	subs	r2, #1
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80072ee:	0612      	lsls	r2, r2, #24
 80072f0:	4303      	orrs	r3, r0
 80072f2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80072f6:	432b      	orrs	r3, r5
 80072f8:	4313      	orrs	r3, r2
 80072fa:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072fe:	6972      	ldr	r2, [r6, #20]
 8007300:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007304:	4313      	orrs	r3, r2
 8007306:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800730a:	69b2      	ldr	r2, [r6, #24]
 800730c:	f023 0320 	bic.w	r3, r3, #32
 8007310:	4313      	orrs	r3, r2
 8007312:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007316:	f023 0310 	bic.w	r3, r3, #16
 800731a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800731c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800731e:	69f3      	ldr	r3, [r6, #28]
 8007320:	4011      	ands	r1, r2
 8007322:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007326:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800732a:	f043 0310 	orr.w	r3, r3, #16
 800732e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007332:	b1f7      	cbz	r7, 8007372 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007334:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007336:	bf0c      	ite	eq
 8007338:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800733c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007340:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <RCCEx_PLL2_Config+0xf0>)
 8007344:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007346:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8007348:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800734c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800734e:	f7fe f901 	bl	8005554 <HAL_GetTick>
 8007352:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007354:	e004      	b.n	8007360 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007356:	f7fe f8fd 	bl	8005554 <HAL_GetTick>
 800735a:	1b00      	subs	r0, r0, r4
 800735c:	2802      	cmp	r0, #2
 800735e:	d804      	bhi.n	800736a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	d5f7      	bpl.n	8007356 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8007366:	2000      	movs	r0, #0
}
 8007368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800736a:	2003      	movs	r0, #3
}
 800736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800736e:	2001      	movs	r0, #1
}
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007376:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007378:	e7e3      	b.n	8007342 <RCCEx_PLL2_Config+0xb6>
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	ffff0007 	.word	0xffff0007

08007384 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007384:	4a3b      	ldr	r2, [pc, #236]	; (8007474 <RCCEx_PLL3_Config+0xf0>)
{
 8007386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007388:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d069      	beq.n	8007466 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007398:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800739a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80073a0:	f7fe f8d8 	bl	8005554 <HAL_GetTick>
 80073a4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a6:	e004      	b.n	80073b2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80073a8:	f7fe f8d4 	bl	8005554 <HAL_GetTick>
 80073ac:	1b43      	subs	r3, r0, r5
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d857      	bhi.n	8007462 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	009a      	lsls	r2, r3, #2
 80073b6:	d4f7      	bmi.n	80073a8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073ba:	6832      	ldr	r2, [r6, #0]
 80073bc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073c0:	492d      	ldr	r1, [pc, #180]	; (8007478 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80073c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80073c8:	6875      	ldr	r5, [r6, #4]
 80073ca:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80073ce:	3d01      	subs	r5, #1
 80073d0:	1e50      	subs	r0, r2, #1
 80073d2:	3b01      	subs	r3, #1
 80073d4:	6932      	ldr	r2, [r6, #16]
 80073d6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80073da:	025b      	lsls	r3, r3, #9
 80073dc:	0400      	lsls	r0, r0, #16
 80073de:	3a01      	subs	r2, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80073e6:	0612      	lsls	r2, r2, #24
 80073e8:	4303      	orrs	r3, r0
 80073ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80073ee:	432b      	orrs	r3, r5
 80073f0:	4313      	orrs	r3, r2
 80073f2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80073f6:	6972      	ldr	r2, [r6, #20]
 80073f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073fc:	4313      	orrs	r3, r2
 80073fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007402:	69b2      	ldr	r2, [r6, #24]
 8007404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007408:	4313      	orrs	r3, r2
 800740a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800740c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800740e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007412:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007414:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007416:	69f3      	ldr	r3, [r6, #28]
 8007418:	4011      	ands	r1, r2
 800741a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800741e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007426:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800742a:	b1f7      	cbz	r7, 800746a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800742c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800742e:	bf0c      	ite	eq
 8007430:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007434:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007438:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800743a:	4b0e      	ldr	r3, [pc, #56]	; (8007474 <RCCEx_PLL3_Config+0xf0>)
 800743c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800743e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8007440:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007444:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007446:	f7fe f885 	bl	8005554 <HAL_GetTick>
 800744a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800744c:	e004      	b.n	8007458 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800744e:	f7fe f881 	bl	8005554 <HAL_GetTick>
 8007452:	1b00      	subs	r0, r0, r4
 8007454:	2802      	cmp	r0, #2
 8007456:	d804      	bhi.n	8007462 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	d5f7      	bpl.n	800744e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800745e:	2000      	movs	r0, #0
}
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007462:	2003      	movs	r0, #3
}
 8007464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007466:	2001      	movs	r0, #1
}
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800746a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800746e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007470:	e7e3      	b.n	800743a <RCCEx_PLL3_Config+0xb6>
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
 8007478:	ffff0007 	.word	0xffff0007

0800747c <HAL_RCCEx_PeriphCLKConfig>:
{
 800747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007480:	6803      	ldr	r3, [r0, #0]
{
 8007482:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007484:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8007488:	d01c      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800748a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800748c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007490:	f000 84c7 	beq.w	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8007494:	d823      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007496:	2a00      	cmp	r2, #0
 8007498:	f000 842c 	beq.w	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800749c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80074a0:	d120      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074a2:	2102      	movs	r1, #2
 80074a4:	3004      	adds	r0, #4
 80074a6:	f7ff fef1 	bl	800728c <RCCEx_PLL2_Config>
 80074aa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	f040 84c0 	bne.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 80074b2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80074b4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074b6:	48b0      	ldr	r0, [pc, #704]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80074b8:	2600      	movs	r6, #0
 80074ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80074bc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80074c0:	430a      	orrs	r2, r1
 80074c2:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074c4:	05da      	lsls	r2, r3, #23
 80074c6:	d511      	bpl.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80074c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80074ca:	2a04      	cmp	r2, #4
 80074cc:	f200 8580 	bhi.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 80074d0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80074d4:	04c104ba 	.word	0x04c104ba
 80074d8:	033b04b2 	.word	0x033b04b2
 80074dc:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074de:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80074e2:	d0e8      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074e4:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074e6:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074ea:	d4ed      	bmi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80074ec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074ee:	059f      	lsls	r7, r3, #22
 80074f0:	d51b      	bpl.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 80074f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80074f4:	2a80      	cmp	r2, #128	; 0x80
 80074f6:	f000 84b7 	beq.w	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80074fa:	f200 8127 	bhi.w	800774c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	f000 83e6 	beq.w	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8007504:	2a40      	cmp	r2, #64	; 0x40
 8007506:	f040 8128 	bne.w	800775a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750a:	2100      	movs	r1, #0
 800750c:	1d20      	adds	r0, r4, #4
 800750e:	f7ff febd 	bl	800728c <RCCEx_PLL2_Config>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007516:	2d00      	cmp	r5, #0
 8007518:	f040 83cc 	bne.w	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800751c:	4996      	ldr	r1, [pc, #600]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800751e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007520:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007522:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8007526:	4302      	orrs	r2, r0
 8007528:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800752a:	0558      	lsls	r0, r3, #21
 800752c:	d51f      	bpl.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800752e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8007532:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007536:	f000 8462 	beq.w	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x982>
 800753a:	f200 8111 	bhi.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800753e:	2a00      	cmp	r2, #0
 8007540:	f000 83c0 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007544:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007548:	f040 8112 	bne.w	8007770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800754c:	2100      	movs	r1, #0
 800754e:	1d20      	adds	r0, r4, #4
 8007550:	f7ff fe9c 	bl	800728c <RCCEx_PLL2_Config>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007558:	2d00      	cmp	r5, #0
 800755a:	f040 83b1 	bne.w	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800755e:	4986      	ldr	r1, [pc, #536]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007560:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8007564:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007566:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800756a:	4302      	orrs	r2, r0
 800756c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800756e:	0519      	lsls	r1, r3, #20
 8007570:	d51f      	bpl.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007572:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8007576:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800757a:	f000 8437 	beq.w	8007dec <HAL_RCCEx_PeriphCLKConfig+0x970>
 800757e:	f200 80fd 	bhi.w	800777c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007582:	2a00      	cmp	r2, #0
 8007584:	f000 83aa 	beq.w	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007588:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800758c:	f040 80fe 	bne.w	800778c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007590:	2100      	movs	r1, #0
 8007592:	1d20      	adds	r0, r4, #4
 8007594:	f7ff fe7a 	bl	800728c <RCCEx_PLL2_Config>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800759c:	2d00      	cmp	r5, #0
 800759e:	f040 8387 	bne.w	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075a2:	4975      	ldr	r1, [pc, #468]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075a4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80075a8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80075aa:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80075ae:	4302      	orrs	r2, r0
 80075b0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075b2:	019a      	lsls	r2, r3, #6
 80075b4:	d518      	bpl.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 80075b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80075b8:	2a20      	cmp	r2, #32
 80075ba:	f000 840d 	beq.w	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80075be:	f200 80e8 	bhi.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80075c2:	b13a      	cbz	r2, 80075d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80075c4:	2a10      	cmp	r2, #16
 80075c6:	f040 80e7 	bne.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ca:	496b      	ldr	r1, [pc, #428]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80075ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075d2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	f040 83ba 	bne.w	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075da:	4967      	ldr	r1, [pc, #412]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075de:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80075e0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80075e4:	4302      	orrs	r2, r0
 80075e6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075e8:	04df      	lsls	r7, r3, #19
 80075ea:	d51d      	bpl.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 80075ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80075ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80075f2:	f000 840d 	beq.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80075f6:	f200 80d2 	bhi.w	800779e <HAL_RCCEx_PeriphCLKConfig+0x322>
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	f000 8374 	beq.w	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8007600:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007604:	f040 80d3 	bne.w	80077ae <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007608:	2100      	movs	r1, #0
 800760a:	1d20      	adds	r0, r4, #4
 800760c:	f7ff fe3e 	bl	800728c <RCCEx_PLL2_Config>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007614:	2d00      	cmp	r5, #0
 8007616:	f040 834f 	bne.w	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800761a:	4957      	ldr	r1, [pc, #348]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800761c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800761e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007620:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007624:	4302      	orrs	r2, r0
 8007626:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007628:	0498      	lsls	r0, r3, #18
 800762a:	d51b      	bpl.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800762c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800762e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8007632:	f000 83bd 	beq.w	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007636:	f200 80bd 	bhi.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800763a:	b14a      	cbz	r2, 8007650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800763c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007640:	f040 80c2 	bne.w	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007644:	2101      	movs	r1, #1
 8007646:	1d20      	adds	r0, r4, #4
 8007648:	f7ff fe20 	bl	800728c <RCCEx_PLL2_Config>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007650:	2d00      	cmp	r5, #0
 8007652:	f040 837e 	bne.w	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007656:	4948      	ldr	r1, [pc, #288]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007658:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800765a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800765c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007660:	4302      	orrs	r2, r0
 8007662:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007664:	0459      	lsls	r1, r3, #17
 8007666:	d51d      	bpl.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007668:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800766c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007670:	f000 83a8 	beq.w	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8007674:	f200 80ab 	bhi.w	80077ce <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007678:	b14a      	cbz	r2, 800768e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800767a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800767e:	f040 80b0 	bne.w	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007682:	2101      	movs	r1, #1
 8007684:	1d20      	adds	r0, r4, #4
 8007686:	f7ff fe01 	bl	800728c <RCCEx_PLL2_Config>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800768e:	2d00      	cmp	r5, #0
 8007690:	f040 8363 	bne.w	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007694:	4938      	ldr	r1, [pc, #224]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007696:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800769a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800769c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80076a0:	4302      	orrs	r2, r0
 80076a2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	d509      	bpl.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 80076a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	f000 8264 	beq.w	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 80076b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80076b4:	f000 825a 	beq.w	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80076b8:	2601      	movs	r6, #1
 80076ba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076bc:	041f      	lsls	r7, r3, #16
 80076be:	d50d      	bpl.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 80076c0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80076c2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80076c6:	f000 8420 	beq.w	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80076ca:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80076ce:	f000 82ce 	beq.w	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	f000 82d1 	beq.w	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80076d8:	2601      	movs	r6, #1
 80076da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076dc:	01d8      	lsls	r0, r3, #7
 80076de:	f100 81cf 	bmi.w	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076e2:	0259      	lsls	r1, r3, #9
 80076e4:	f100 81ef 	bmi.w	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076e8:	07df      	lsls	r7, r3, #31
 80076ea:	f140 8088 	bpl.w	80077fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 80076ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80076f0:	2a28      	cmp	r2, #40	; 0x28
 80076f2:	f200 81cf 	bhi.w	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80076f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80076fa:	007e      	.short	0x007e
 80076fc:	01cd01cd 	.word	0x01cd01cd
 8007700:	01cd01cd 	.word	0x01cd01cd
 8007704:	01cd01cd 	.word	0x01cd01cd
 8007708:	03d401cd 	.word	0x03d401cd
 800770c:	01cd01cd 	.word	0x01cd01cd
 8007710:	01cd01cd 	.word	0x01cd01cd
 8007714:	01cd01cd 	.word	0x01cd01cd
 8007718:	007701cd 	.word	0x007701cd
 800771c:	01cd01cd 	.word	0x01cd01cd
 8007720:	01cd01cd 	.word	0x01cd01cd
 8007724:	01cd01cd 	.word	0x01cd01cd
 8007728:	007e01cd 	.word	0x007e01cd
 800772c:	01cd01cd 	.word	0x01cd01cd
 8007730:	01cd01cd 	.word	0x01cd01cd
 8007734:	01cd01cd 	.word	0x01cd01cd
 8007738:	007e01cd 	.word	0x007e01cd
 800773c:	01cd01cd 	.word	0x01cd01cd
 8007740:	01cd01cd 	.word	0x01cd01cd
 8007744:	01cd01cd 	.word	0x01cd01cd
 8007748:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 800774c:	2ac0      	cmp	r2, #192	; 0xc0
 800774e:	f43f aee2 	beq.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007752:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007756:	f43f aede 	beq.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800775a:	2601      	movs	r6, #1
 800775c:	4635      	mov	r5, r6
 800775e:	e6e4      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007760:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8007764:	f43f aef8 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8007768:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800776c:	f43f aef4 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8007770:	2601      	movs	r6, #1
 8007772:	4635      	mov	r5, r6
 8007774:	e6fb      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 800777c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8007780:	f43f af0c 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8007784:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007788:	f43f af08 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800778c:	2601      	movs	r6, #1
 800778e:	4635      	mov	r5, r6
 8007790:	e70f      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8007792:	2a30      	cmp	r2, #48	; 0x30
 8007794:	f43f af1e 	beq.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8007798:	2601      	movs	r6, #1
 800779a:	4635      	mov	r5, r6
 800779c:	e724      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800779e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80077a2:	f43f af37 	beq.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80077a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80077aa:	f43f af33 	beq.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80077ae:	2601      	movs	r6, #1
 80077b0:	4635      	mov	r5, r6
 80077b2:	e739      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 80077b4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80077b8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80077bc:	f43f af48 	beq.w	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80077c0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80077c4:	f43f af44 	beq.w	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80077c8:	2601      	movs	r6, #1
 80077ca:	4635      	mov	r5, r6
 80077cc:	e74a      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 80077ce:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80077d2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80077d6:	f43f af5a 	beq.w	800768e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80077da:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80077de:	f43f af56 	beq.w	800768e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80077e2:	2601      	movs	r6, #1
 80077e4:	4635      	mov	r5, r6
 80077e6:	e75d      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077e8:	2101      	movs	r1, #1
 80077ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077ee:	f7ff fdc9 	bl	8007384 <RCCEx_PLL3_Config>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f000 82c0 	beq.w	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x900>
 80077fc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077fe:	0798      	lsls	r0, r3, #30
 8007800:	d516      	bpl.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007802:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007804:	2a05      	cmp	r2, #5
 8007806:	f200 83e6 	bhi.w	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800780a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800780e:	000d      	.short	0x000d
 8007810:	00060336 	.word	0x00060336
 8007814:	000d000d 	.word	0x000d000d
 8007818:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800781a:	2101      	movs	r1, #1
 800781c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007820:	f7ff fdb0 	bl	8007384 <RCCEx_PLL3_Config>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007828:	2d00      	cmp	r5, #0
 800782a:	f000 8279 	beq.w	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800782e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007830:	0759      	lsls	r1, r3, #29
 8007832:	d517      	bpl.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007834:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8007838:	2a05      	cmp	r2, #5
 800783a:	f200 83c6 	bhi.w	8007fca <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 800783e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007842:	000d      	.short	0x000d
 8007844:	00060326 	.word	0x00060326
 8007848:	000d000d 	.word	0x000d000d
 800784c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800784e:	2101      	movs	r1, #1
 8007850:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007854:	f7ff fd96 	bl	8007384 <RCCEx_PLL3_Config>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800785c:	2d00      	cmp	r5, #0
 800785e:	f000 826a 	beq.w	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8007862:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007864:	069a      	lsls	r2, r3, #26
 8007866:	d51d      	bpl.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007868:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800786c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007870:	f000 8340 	beq.w	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8007874:	f200 81af 	bhi.w	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007878:	b14a      	cbz	r2, 800788e <HAL_RCCEx_PeriphCLKConfig+0x412>
 800787a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800787e:	f040 81b4 	bne.w	8007bea <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007882:	2100      	movs	r1, #0
 8007884:	1d20      	adds	r0, r4, #4
 8007886:	f7ff fd01 	bl	800728c <RCCEx_PLL2_Config>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800788e:	2d00      	cmp	r5, #0
 8007890:	f040 823c 	bne.w	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007894:	49b3      	ldr	r1, [pc, #716]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007896:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800789a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800789c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80078a0:	4302      	orrs	r2, r0
 80078a2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078a4:	065f      	lsls	r7, r3, #25
 80078a6:	d51d      	bpl.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078a8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80078ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80078b0:	f000 8334 	beq.w	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 80078b4:	f200 817f 	bhi.w	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80078b8:	b14a      	cbz	r2, 80078ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 80078ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80078be:	f040 8184 	bne.w	8007bca <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c2:	2100      	movs	r1, #0
 80078c4:	1d20      	adds	r0, r4, #4
 80078c6:	f7ff fce1 	bl	800728c <RCCEx_PLL2_Config>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	f040 8221 	bne.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078d4:	49a3      	ldr	r1, [pc, #652]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80078d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80078da:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80078dc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80078e0:	4302      	orrs	r2, r0
 80078e2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078e4:	0618      	lsls	r0, r3, #24
 80078e6:	d51d      	bpl.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80078e8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80078ec:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80078f0:	f000 831f 	beq.w	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80078f4:	f200 814f 	bhi.w	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 80078f8:	b14a      	cbz	r2, 800790e <HAL_RCCEx_PeriphCLKConfig+0x492>
 80078fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80078fe:	f040 8154 	bne.w	8007baa <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007902:	2100      	movs	r1, #0
 8007904:	1d20      	adds	r0, r4, #4
 8007906:	f7ff fcc1 	bl	800728c <RCCEx_PLL2_Config>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800790e:	2d00      	cmp	r5, #0
 8007910:	f040 81f7 	bne.w	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007914:	4993      	ldr	r1, [pc, #588]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007916:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800791a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800791c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007920:	4302      	orrs	r2, r0
 8007922:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007924:	0719      	lsls	r1, r3, #28
 8007926:	d50b      	bpl.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007928:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800792c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007930:	f000 831e 	beq.w	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007934:	488b      	ldr	r0, [pc, #556]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007936:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007938:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800793c:	430a      	orrs	r2, r1
 800793e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007940:	06da      	lsls	r2, r3, #27
 8007942:	d50b      	bpl.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007944:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007948:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800794c:	f000 8305 	beq.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007950:	4884      	ldr	r0, [pc, #528]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007952:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007954:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007958:	430a      	orrs	r2, r1
 800795a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800795c:	031f      	lsls	r7, r3, #12
 800795e:	d50e      	bpl.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8007960:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007964:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007968:	f000 816b 	beq.w	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800796c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007970:	f000 816e 	beq.w	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8007974:	2900      	cmp	r1, #0
 8007976:	f000 82e7 	beq.w	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800797a:	2601      	movs	r6, #1
 800797c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800797e:	0358      	lsls	r0, r3, #13
 8007980:	d50f      	bpl.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8007982:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8007986:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800798a:	f000 8144 	beq.w	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800798e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007992:	f000 8147 	beq.w	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8007996:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800799a:	f000 82a2 	beq.w	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800799e:	2601      	movs	r6, #1
 80079a0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079a2:	03d9      	lsls	r1, r3, #15
 80079a4:	d517      	bpl.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80079a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	f000 8288 	beq.w	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xa42>
 80079ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80079b2:	f040 817a 	bne.w	8007caa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079b6:	2102      	movs	r1, #2
 80079b8:	1d20      	adds	r0, r4, #4
 80079ba:	f7ff fc67 	bl	800728c <RCCEx_PLL2_Config>
 80079be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	f040 81e5 	bne.w	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079c8:	4966      	ldr	r1, [pc, #408]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80079ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80079cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80079ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079d2:	4302      	orrs	r2, r0
 80079d4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079d6:	009a      	lsls	r2, r3, #2
 80079d8:	f100 815c 	bmi.w	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079dc:	039f      	lsls	r7, r3, #14
 80079de:	d43f      	bmi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80079e0:	1e30      	subs	r0, r6, #0
 80079e2:	bf18      	it	ne
 80079e4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079e6:	02de      	lsls	r6, r3, #11
 80079e8:	d506      	bpl.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079ea:	495e      	ldr	r1, [pc, #376]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80079ec:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80079ee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80079f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80079f4:	432a      	orrs	r2, r5
 80079f6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079f8:	00dd      	lsls	r5, r3, #3
 80079fa:	d507      	bpl.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079fc:	4959      	ldr	r1, [pc, #356]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80079fe:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8007a02:	690a      	ldr	r2, [r1, #16]
 8007a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a08:	432a      	orrs	r2, r5
 8007a0a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a0c:	0299      	lsls	r1, r3, #10
 8007a0e:	d506      	bpl.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a10:	4954      	ldr	r1, [pc, #336]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a12:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8007a14:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007a16:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a1a:	432a      	orrs	r2, r5
 8007a1c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a1e:	005a      	lsls	r2, r3, #1
 8007a20:	d509      	bpl.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a22:	4a50      	ldr	r2, [pc, #320]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a24:	6911      	ldr	r1, [r2, #16]
 8007a26:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007a2a:	6111      	str	r1, [r2, #16]
 8007a2c:	6911      	ldr	r1, [r2, #16]
 8007a2e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8007a32:	4329      	orrs	r1, r5
 8007a34:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da06      	bge.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a3a:	494a      	ldr	r1, [pc, #296]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a3c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007a3e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a44:	432a      	orrs	r2, r5
 8007a46:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	d507      	bpl.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a4c:	4a45      	ldr	r2, [pc, #276]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a4e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007a52:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a54:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007a60:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007a64:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007a68:	f000 8232 	beq.w	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007a6c:	f240 80c3 	bls.w	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8007a70:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8007a74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a78:	f000 80c0 	beq.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x780>
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	e7b2      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8007a80:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007a82:	2a03      	cmp	r2, #3
 8007a84:	f200 82aa 	bhi.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8007a88:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007a8c:	018a0010 	.word	0x018a0010
 8007a90:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a94:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a96:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a98:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a9a:	f57f aec9 	bpl.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8007a9e:	e6b0      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	1d20      	adds	r0, r4, #4
 8007aa4:	f7ff fbf2 	bl	800728c <RCCEx_PLL2_Config>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	f040 8152 	bne.w	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ab2:	492c      	ldr	r1, [pc, #176]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007ab4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007ab6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007ab8:	f022 0203 	bic.w	r2, r2, #3
 8007abc:	4302      	orrs	r2, r0
 8007abe:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ac0:	0259      	lsls	r1, r3, #9
 8007ac2:	f57f ae11 	bpl.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ac6:	4b28      	ldr	r3, [pc, #160]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aca:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007ad2:	f7fd fd3f 	bl	8005554 <HAL_GetTick>
 8007ad6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ad8:	e005      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ada:	f7fd fd3b 	bl	8005554 <HAL_GetTick>
 8007ade:	1bc0      	subs	r0, r0, r7
 8007ae0:	2864      	cmp	r0, #100	; 0x64
 8007ae2:	f200 81e8 	bhi.w	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aea:	05da      	lsls	r2, r3, #23
 8007aec:	d5f5      	bpl.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	f040 8267 	bne.w	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007af6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007afa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007afc:	4059      	eors	r1, r3
 8007afe:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007b02:	d00b      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b04:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b06:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b08:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b0c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007b10:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b12:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8007b14:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007b18:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007b1a:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b20:	f000 8231 	beq.w	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b24:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007b28:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007b2c:	f000 823f 	beq.w	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8007b30:	490c      	ldr	r1, [pc, #48]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b32:	690a      	ldr	r2, [r1, #16]
 8007b34:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007b38:	610a      	str	r2, [r1, #16]
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b40:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007b42:	430b      	orrs	r3, r1
 8007b44:	6713      	str	r3, [r2, #112]	; 0x70
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	e5ce      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b4a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	f040 80b5 	bne.w	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b52:	4904      	ldr	r1, [pc, #16]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b56:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007b58:	f022 0207 	bic.w	r2, r2, #7
 8007b5c:	4302      	orrs	r2, r0
 8007b5e:	650a      	str	r2, [r1, #80]	; 0x50
 8007b60:	e4c5      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007b62:	bf00      	nop
 8007b64:	58024400 	.word	0x58024400
 8007b68:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	1d20      	adds	r0, r4, #4
 8007b70:	f7ff fb8c 	bl	800728c <RCCEx_PLL2_Config>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	f040 810c 	bne.w	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007b7e:	49b9      	ldr	r1, [pc, #740]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b80:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007b82:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007b84:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b8a:	ea42 0200 	orr.w	r2, r2, r0
 8007b8e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b90:	f57f ada4 	bpl.w	80076dc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007b94:	e594      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b96:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007b9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007b9e:	f43f aeb6 	beq.w	800790e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007ba2:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8007ba6:	f43f aeb2 	beq.w	800790e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8007baa:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bac:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007bae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bb0:	f57f aec6 	bpl.w	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8007bb4:	e6b8      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007bb6:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8007bba:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007bbe:	f43f ae86 	beq.w	80078ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007bc2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007bc6:	f43f ae82 	beq.w	80078ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007bca:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bcc:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007bce:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bd0:	f57f aea8 	bpl.w	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bd4:	e688      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007bd6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8007bda:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007bde:	f43f ae56 	beq.w	800788e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007be2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007be6:	f43f ae52 	beq.w	800788e <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007bea:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bec:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007bee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bf0:	f57f ae78 	bpl.w	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007bf4:	e658      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	f47f af40 	bne.w	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	f47f af3d 	bne.w	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c02:	4d98      	ldr	r5, [pc, #608]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c04:	1e30      	subs	r0, r6, #0
 8007c06:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007c08:	bf18      	it	ne
 8007c0a:	2001      	movne	r0, #1
 8007c0c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007c10:	430a      	orrs	r2, r1
 8007c12:	656a      	str	r2, [r5, #84]	; 0x54
 8007c14:	e6e7      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c16:	2101      	movs	r1, #1
 8007c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c1c:	f7ff fbb2 	bl	8007384 <RCCEx_PLL3_Config>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	f040 80a4 	bne.w	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c2a:	498e      	ldr	r1, [pc, #568]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007c30:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007c32:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007c36:	4302      	orrs	r2, r0
 8007c38:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c3a:	03d9      	lsls	r1, r3, #15
 8007c3c:	f57f aecb 	bpl.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007c40:	e6b1      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c42:	2102      	movs	r1, #2
 8007c44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c48:	f7ff fb9c 	bl	8007384 <RCCEx_PLL3_Config>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c50:	2d00      	cmp	r5, #0
 8007c52:	f040 8089 	bne.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c56:	4983      	ldr	r1, [pc, #524]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c58:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007c5c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007c5e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007c62:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c64:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c66:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c68:	f57f ae9b 	bpl.w	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007c6c:	e689      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c6e:	2101      	movs	r1, #1
 8007c70:	1d20      	adds	r0, r4, #4
 8007c72:	f7ff fb0b 	bl	800728c <RCCEx_PLL2_Config>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	d16f      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c7e:	4979      	ldr	r1, [pc, #484]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007c80:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007c82:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c88:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c8a:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c8c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c8e:	f57f ad28 	bpl.w	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007c92:	e6f5      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c94:	2102      	movs	r1, #2
 8007c96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c9a:	f7ff fb73 	bl	8007384 <RCCEx_PLL3_Config>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f43f ae9b 	beq.w	80079dc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8007ca6:	2601      	movs	r6, #1
 8007ca8:	e698      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007caa:	2601      	movs	r6, #1
 8007cac:	4635      	mov	r5, r6
 8007cae:	e692      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007cb0:	462e      	mov	r6, r5
 8007cb2:	e47e      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007cb4:	462e      	mov	r6, r5
 8007cb6:	e438      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae>
 8007cb8:	462e      	mov	r6, r5
 8007cba:	e4b5      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8007cbc:	462e      	mov	r6, r5
 8007cbe:	e416      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007cc0:	462e      	mov	r6, r5
 8007cc2:	e454      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4967      	ldr	r1, [pc, #412]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007cc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ccc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007cce:	e443      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	4964      	ldr	r1, [pc, #400]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cd2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007cd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cd8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007cda:	e41c      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cdc:	4961      	ldr	r1, [pc, #388]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cde:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007ce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ce4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007ce6:	e459      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce8:	495e      	ldr	r1, [pc, #376]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007cec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cf0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007cf2:	e48f      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf4:	485b      	ldr	r0, [pc, #364]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007cf6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007cf8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007cfc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007cfe:	f7ff bbda 	b.w	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d02:	0719      	lsls	r1, r3, #28
 8007d04:	462e      	mov	r6, r5
 8007d06:	f57f ae1b 	bpl.w	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8007d0a:	e60d      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d0c:	065f      	lsls	r7, r3, #25
 8007d0e:	462e      	mov	r6, r5
 8007d10:	f57f ade8 	bpl.w	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007d14:	e5c8      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d16:	0618      	lsls	r0, r3, #24
 8007d18:	462e      	mov	r6, r5
 8007d1a:	f57f ae03 	bpl.w	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d1e:	e5e3      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d20:	4950      	ldr	r1, [pc, #320]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d22:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007d24:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007d26:	f022 0207 	bic.w	r2, r2, #7
 8007d2a:	4302      	orrs	r2, r0
 8007d2c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d2e:	0759      	lsls	r1, r3, #29
 8007d30:	f57f ad98 	bpl.w	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007d34:	e57e      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d36:	494b      	ldr	r1, [pc, #300]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d38:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8007d3c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007d3e:	f022 0207 	bic.w	r2, r2, #7
 8007d42:	4302      	orrs	r2, r0
 8007d44:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d46:	069a      	lsls	r2, r3, #26
 8007d48:	f57f adac 	bpl.w	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007d4c:	e58c      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007d4e:	462e      	mov	r6, r5
 8007d50:	e44a      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d52:	462e      	mov	r6, r5
 8007d54:	e486      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007d56:	462e      	mov	r6, r5
 8007d58:	e4c3      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007d5a:	462e      	mov	r6, r5
 8007d5c:	e4a2      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d5e:	01d8      	lsls	r0, r3, #7
 8007d60:	462e      	mov	r6, r5
 8007d62:	f57f acbe 	bpl.w	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007d66:	e68b      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d68:	0358      	lsls	r0, r3, #13
 8007d6a:	462e      	mov	r6, r5
 8007d6c:	f57f ae19 	bpl.w	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007d70:	e607      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d72:	03d9      	lsls	r1, r3, #15
 8007d74:	462e      	mov	r6, r5
 8007d76:	f57f ae2e 	bpl.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007d7a:	e614      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d7c:	4939      	ldr	r1, [pc, #228]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007d7e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007d80:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007d82:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007d86:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d88:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d8a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d8c:	f57f ad50 	bpl.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8007d90:	e537      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007d92:	462e      	mov	r6, r5
 8007d94:	e61f      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d96:	041f      	lsls	r7, r3, #16
 8007d98:	462e      	mov	r6, r5
 8007d9a:	f57f ac9f 	bpl.w	80076dc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007d9e:	e48f      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da0:	4930      	ldr	r1, [pc, #192]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8007da2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007da4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007da8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	d1d3      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007dae:	e680      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007db0:	2101      	movs	r1, #1
 8007db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007db6:	f7ff fae5 	bl	8007384 <RCCEx_PLL3_Config>
 8007dba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	d1c7      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8007dc2:	e448      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dca:	f7ff fadb 	bl	8007384 <RCCEx_PLL3_Config>
 8007dce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	d1c1      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007dd6:	e45d      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dd8:	2102      	movs	r1, #2
 8007dda:	1d20      	adds	r0, r4, #4
 8007ddc:	f7ff fa56 	bl	800728c <RCCEx_PLL2_Config>
 8007de0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	d1b2      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8007de8:	f7ff bbf7 	b.w	80075da <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dec:	2100      	movs	r1, #0
 8007dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007df2:	f7ff fac7 	bl	8007384 <RCCEx_PLL3_Config>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	4605      	mov	r5, r0
      break;
 8007dfa:	f7ff bbcf 	b.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e04:	f7ff fabe 	bl	8007384 <RCCEx_PLL3_Config>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	4605      	mov	r5, r0
      break;
 8007e0c:	f7ff bba4 	b.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e10:	2100      	movs	r1, #0
 8007e12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e16:	f7ff fab5 	bl	8007384 <RCCEx_PLL3_Config>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	4605      	mov	r5, r0
      break;
 8007e1e:	f7ff bbf9 	b.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e22:	2102      	movs	r1, #2
 8007e24:	3024      	adds	r0, #36	; 0x24
 8007e26:	f7ff faad 	bl	8007384 <RCCEx_PLL3_Config>
 8007e2a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	f43f ab40 	beq.w	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f7ff bb46 	b.w	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e3e:	f7ff faa1 	bl	8007384 <RCCEx_PLL3_Config>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4605      	mov	r5, r0
      break;
 8007e46:	e681      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e48:	4906      	ldr	r1, [pc, #24]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8007e4a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007e4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e52:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007e54:	e67a      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e56:	2100      	movs	r1, #0
 8007e58:	1d20      	adds	r0, r4, #4
 8007e5a:	f7ff fa17 	bl	800728c <RCCEx_PLL2_Config>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	4605      	mov	r5, r0
      break;
 8007e62:	e673      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007e64:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e6e:	f7ff fa89 	bl	8007384 <RCCEx_PLL3_Config>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	4605      	mov	r5, r0
      break;
 8007e76:	f7ff bb4e 	b.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	1d20      	adds	r0, r4, #4
 8007e7e:	f7ff fa05 	bl	800728c <RCCEx_PLL2_Config>
 8007e82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	f47f acd1 	bne.w	800782e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8007e8c:	e748      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e8e:	2101      	movs	r1, #1
 8007e90:	1d20      	adds	r0, r4, #4
 8007e92:	f7ff f9fb 	bl	800728c <RCCEx_PLL2_Config>
 8007e96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	f47f ace1 	bne.w	8007862 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ea0:	e749      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	1d20      	adds	r0, r4, #4
 8007ea6:	f7ff f9f1 	bl	800728c <RCCEx_PLL2_Config>
 8007eaa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	f47f aca4 	bne.w	80077fc <HAL_RCCEx_PeriphCLKConfig+0x380>
 8007eb4:	e762      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8007eb6:	2603      	movs	r6, #3
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	4635      	mov	r5, r6
 8007ebc:	e414      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebe:	4949      	ldr	r1, [pc, #292]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007ec0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007ec2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ec6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	f47f af62 	bne.w	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007ece:	e57b      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed0:	4844      	ldr	r0, [pc, #272]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007ed2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007ed4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007ed8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	f47f adce 	bne.w	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8007ee0:	e68f      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee2:	4940      	ldr	r1, [pc, #256]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007ee4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007ee6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007eea:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	f47f af40 	bne.w	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007ef2:	e69a      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ef4:	2102      	movs	r1, #2
 8007ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007efa:	f7ff fa43 	bl	8007384 <RCCEx_PLL3_Config>
 8007efe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	f47f af02 	bne.w	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x890>
 8007f08:	e4c4      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0a:	4936      	ldr	r1, [pc, #216]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007f0c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f12:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	f47f af22 	bne.w	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f1a:	e6b0      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f22:	f7ff fa2f 	bl	8007384 <RCCEx_PLL3_Config>
 8007f26:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	f47f aef3 	bne.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007f30:	e4d0      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f32:	2102      	movs	r1, #2
 8007f34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f38:	f7ff fa24 	bl	8007384 <RCCEx_PLL3_Config>
 8007f3c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	f47f aede 	bne.w	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8007f46:	e4e5      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f48:	1d20      	adds	r0, r4, #4
 8007f4a:	f7ff f99f 	bl	800728c <RCCEx_PLL2_Config>
 8007f4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	f47f af08 	bne.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007f58:	e67d      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f60:	f7ff fa10 	bl	8007384 <RCCEx_PLL3_Config>
 8007f64:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007f68:	b100      	cbz	r0, 8007f6c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8007f6a:	2601      	movs	r6, #1
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	e4ef      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f70:	2102      	movs	r1, #2
 8007f72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f76:	f7ff fa05 	bl	8007384 <RCCEx_PLL3_Config>
 8007f7a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007f7e:	b100      	cbz	r0, 8007f82 <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8007f80:	2601      	movs	r6, #1
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	e4d6      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8007f86:	f7fd fae5 	bl	8005554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f8a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007f92:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f94:	e004      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f96:	f7fd fadd 	bl	8005554 <HAL_GetTick>
 8007f9a:	1bc0      	subs	r0, r0, r7
 8007f9c:	4548      	cmp	r0, r9
 8007f9e:	d88a      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fa0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007fa4:	079b      	lsls	r3, r3, #30
 8007fa6:	d5f6      	bpl.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007fa8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007fac:	e5ba      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fae:	480d      	ldr	r0, [pc, #52]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8007fb0:	4a0d      	ldr	r2, [pc, #52]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 8007fb2:	6901      	ldr	r1, [r0, #16]
 8007fb4:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007fb8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	6102      	str	r2, [r0, #16]
 8007fc0:	e5bb      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8007fc2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007fc4:	462e      	mov	r6, r5
 8007fc6:	f7ff bb8f 	b.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fca:	2601      	movs	r6, #1
 8007fcc:	4635      	mov	r5, r6
 8007fce:	e449      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007fd0:	2601      	movs	r6, #1
 8007fd2:	f7ff ba8b 	b.w	80074ec <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007fd6:	2601      	movs	r6, #1
 8007fd8:	4635      	mov	r5, r6
 8007fda:	e429      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8007fdc:	2601      	movs	r6, #1
 8007fde:	4635      	mov	r5, r6
 8007fe0:	f7ff bb7f 	b.w	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	00ffffcf 	.word	0x00ffffcf

08007fec <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8007ff0:	b318      	cbz	r0, 800803a <HAL_SDRAM_Init+0x4a>
{
 8007ff2:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ff4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008000:	b1b3      	cbz	r3, 8008030 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008002:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008004:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008006:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800800a:	f851 0b04 	ldr.w	r0, [r1], #4
 800800e:	f000 f851 	bl	80080b4 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008012:	4629      	mov	r1, r5
 8008014:	e9d4 0200 	ldrd	r0, r2, [r4]
 8008018:	f000 f888 	bl	800812c <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800801c:	4a08      	ldr	r2, [pc, #32]	; (8008040 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800801e:	2101      	movs	r1, #1
  return HAL_OK;
 8008020:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008028:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800802a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800802e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008030:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8008034:	f7ff ffda 	bl	8007fec <HAL_SDRAM_MspInit>
 8008038:	e7e3      	b.n	8008002 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800803a:	2001      	movs	r0, #1
}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	52004000 	.word	0x52004000

08008044 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008044:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008046:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800804a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800804c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800804e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8008050:	d004      	beq.n	800805c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008052:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8008056:	2c01      	cmp	r4, #1
 8008058:	d001      	beq.n	800805e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800805a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800805c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800805e:	2302      	movs	r3, #2
 8008060:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008062:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008064:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008068:	f000 f8ac 	bl	80081c4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d003      	beq.n	800807a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8008072:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008074:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8008078:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800807a:	2305      	movs	r3, #5
  return HAL_OK;
 800807c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800807e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8008082:	bd70      	pop	{r4, r5, r6, pc}

08008084 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008084:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008086:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800808a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800808c:	2b02      	cmp	r3, #2
 800808e:	b2d8      	uxtb	r0, r3
 8008090:	d005      	beq.n	800809e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008092:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8008096:	2b01      	cmp	r3, #1
 8008098:	b2dd      	uxtb	r5, r3
 800809a:	d001      	beq.n	80080a0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800809c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800809e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080a0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80080a2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80080a8:	f000 f8a2 	bl	80081f0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 80080ac:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80080ae:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80080b2:	bd38      	pop	{r3, r4, r5, pc}

080080b4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80080b4:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080b6:	6802      	ldr	r2, [r0, #0]
{
 80080b8:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80080ba:	b9c3      	cbnz	r3, 80080ee <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080bc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80080c0:	684c      	ldr	r4, [r1, #4]
 80080c2:	698e      	ldr	r6, [r1, #24]
 80080c4:	4013      	ands	r3, r2
 80080c6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80080ca:	4323      	orrs	r3, r4
 80080cc:	690c      	ldr	r4, [r1, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	694a      	ldr	r2, [r1, #20]
 80080d2:	432b      	orrs	r3, r5
 80080d4:	69cd      	ldr	r5, [r1, #28]
 80080d6:	4323      	orrs	r3, r4
 80080d8:	4313      	orrs	r3, r2
 80080da:	4333      	orrs	r3, r6
 80080dc:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 80080e0:	432b      	orrs	r3, r5
 80080e2:	4323      	orrs	r3, r4
 80080e4:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80080e6:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080e8:	6003      	str	r3, [r0, #0]
}
 80080ea:	2000      	movs	r0, #0
 80080ec:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080ee:	69cb      	ldr	r3, [r1, #28]
 80080f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80080f4:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080f6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080fa:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 80080fe:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008100:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008102:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008104:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008106:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008108:	6842      	ldr	r2, [r0, #4]
 800810a:	4013      	ands	r3, r2
 800810c:	432b      	orrs	r3, r5
 800810e:	690d      	ldr	r5, [r1, #16]
 8008110:	4323      	orrs	r3, r4
 8008112:	4333      	orrs	r3, r6
 8008114:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8008118:	432b      	orrs	r3, r5
 800811a:	4323      	orrs	r3, r4
 800811c:	4313      	orrs	r3, r2
}
 800811e:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008120:	6043      	str	r3, [r0, #4]
}
 8008122:	2000      	movs	r0, #0
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	ffff8000 	.word	0xffff8000

0800812c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800812c:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800812e:	bb0a      	cbnz	r2, 8008174 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008130:	684c      	ldr	r4, [r1, #4]
 8008132:	6882      	ldr	r2, [r0, #8]
 8008134:	680d      	ldr	r5, [r1, #0]
 8008136:	1e63      	subs	r3, r4, #1
 8008138:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800813c:	688c      	ldr	r4, [r1, #8]
 800813e:	1e6e      	subs	r6, r5, #1
 8008140:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8008144:	1e65      	subs	r5, r4, #1
 8008146:	68cc      	ldr	r4, [r1, #12]
 8008148:	4333      	orrs	r3, r6
 800814a:	690a      	ldr	r2, [r1, #16]
 800814c:	1e66      	subs	r6, r4, #1
 800814e:	694c      	ldr	r4, [r1, #20]
 8008150:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8008154:	1e55      	subs	r5, r2, #1
 8008156:	698a      	ldr	r2, [r1, #24]
 8008158:	1e61      	subs	r1, r4, #1
 800815a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800815e:	3a01      	subs	r2, #1
 8008160:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8008164:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8008168:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800816c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800816e:	6083      	str	r3, [r0, #8]
}
 8008170:	2000      	movs	r0, #0
 8008172:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008174:	6882      	ldr	r2, [r0, #8]
 8008176:	68cb      	ldr	r3, [r1, #12]
 8008178:	4c11      	ldr	r4, [pc, #68]	; (80081c0 <FMC_SDRAM_Timing_Init+0x94>)
 800817a:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800817c:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800817e:	4014      	ands	r4, r2
 8008180:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008182:	1e5e      	subs	r6, r3, #1
 8008184:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008186:	3a01      	subs	r2, #1
 8008188:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800818c:	688d      	ldr	r5, [r1, #8]
 800818e:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008190:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008194:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008196:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008198:	68c2      	ldr	r2, [r0, #12]
 800819a:	690c      	ldr	r4, [r1, #16]
 800819c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80081a0:	6989      	ldr	r1, [r1, #24]
 80081a2:	3c01      	subs	r4, #1
 80081a4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 80081a8:	3901      	subs	r1, #1
 80081aa:	4313      	orrs	r3, r2
 80081ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80081b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 80081b8:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081ba:	60c3      	str	r3, [r0, #12]
}
 80081bc:	2000      	movs	r0, #0
 80081be:	4770      	bx	lr
 80081c0:	ff0f0fff 	.word	0xff0f0fff

080081c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80081c4:	b470      	push	{r4, r5, r6}
 80081c6:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80081c8:	68ce      	ldr	r6, [r1, #12]
 80081ca:	4c08      	ldr	r4, [pc, #32]	; (80081ec <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80081cc:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80081ce:	e9d1 3500 	ldrd	r3, r5, [r1]
 80081d2:	6889      	ldr	r1, [r1, #8]
 80081d4:	432b      	orrs	r3, r5
 80081d6:	6915      	ldr	r5, [r2, #16]
 80081d8:	3901      	subs	r1, #1
 80081da:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 80081de:	402c      	ands	r4, r5
 80081e0:	4323      	orrs	r3, r4
 80081e2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 80081e6:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80081e8:	6113      	str	r3, [r2, #16]
}
 80081ea:	4770      	bx	lr
 80081ec:	ffc00000 	.word	0xffc00000

080081f0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80081f0:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 80081f4:	2000      	movs	r0, #0
{
 80081f6:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80081f8:	6954      	ldr	r4, [r2, #20]
 80081fa:	4023      	ands	r3, r4
}
 80081fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008200:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008204:	6151      	str	r1, [r2, #20]
}
 8008206:	4770      	bx	lr
 8008208:	ffffc001 	.word	0xffffc001

0800820c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800820c:	4603      	mov	r3, r0
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8008212:	4c15      	ldr	r4, [pc, #84]	; (8008268 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8008214:	2500      	movs	r5, #0
 8008216:	4e15      	ldr	r6, [pc, #84]	; (800826c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8008218:	4628      	mov	r0, r5
 800821a:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800821e:	e9d3 7200 	ldrd	r7, r2, [r3]
 8008222:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8008226:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800822a:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800822c:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8008230:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8008232:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8008234:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8008236:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800823a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800823e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8008242:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8008246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8008248:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800824a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800824c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800824e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8008250:	6a23      	ldr	r3, [r4, #32]
 8008252:	f106 0118 	add.w	r1, r6, #24
 8008256:	4628      	mov	r0, r5
 8008258:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800825a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800825c:	f106 011c 	add.w	r1, r6, #28
 8008260:	4628      	mov	r0, r5
}
 8008262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8008266:	4718      	bx	r3
 8008268:	24009218 	.word	0x24009218
 800826c:	240091d8 	.word	0x240091d8

08008270 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8008270:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <UTIL_LCD_SetLayer+0x18>)
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	b133      	cbz	r3, 8008286 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8008278:	4d04      	ldr	r5, [pc, #16]	; (800828c <UTIL_LCD_SetLayer+0x1c>)
 800827a:	4604      	mov	r4, r0
 800827c:	4601      	mov	r1, r0
 800827e:	6928      	ldr	r0, [r5, #16]
 8008280:	4798      	blx	r3
 8008282:	b900      	cbnz	r0, 8008286 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8008284:	60ec      	str	r4, [r5, #12]
    }
  }
}
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	24009218 	.word	0x24009218
 800828c:	240091d8 	.word	0x240091d8

08008290 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8008290:	4a02      	ldr	r2, [pc, #8]	; (800829c <UTIL_LCD_SetTextColor+0xc>)
 8008292:	68d3      	ldr	r3, [r2, #12]
 8008294:	015b      	lsls	r3, r3, #5
 8008296:	50d0      	str	r0, [r2, r3]
}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	240091d8 	.word	0x240091d8

080082a0 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <UTIL_LCD_SetBackColor+0xc>)
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80082a8:	6058      	str	r0, [r3, #4]
}
 80082aa:	4770      	bx	lr
 80082ac:	240091d8 	.word	0x240091d8

080082b0 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <UTIL_LCD_SetFont+0xc>)
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80082b8:	6098      	str	r0, [r3, #8]
}
 80082ba:	4770      	bx	lr
 80082bc:	240091d8 	.word	0x240091d8

080082c0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80082c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80082c2:	4e13      	ldr	r6, [pc, #76]	; (8008310 <UTIL_LCD_FillRect+0x50>)
{
 80082c4:	4615      	mov	r5, r2
 80082c6:	b083      	sub	sp, #12
 80082c8:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80082ca:	69f7      	ldr	r7, [r6, #28]
{
 80082cc:	462b      	mov	r3, r5
 80082ce:	460a      	mov	r2, r1
 80082d0:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80082d2:	2f02      	cmp	r7, #2
 80082d4:	d008      	beq.n	80082e8 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80082d6:	4f0f      	ldr	r7, [pc, #60]	; (8008314 <UTIL_LCD_FillRect+0x54>)
 80082d8:	4601      	mov	r1, r0
 80082da:	e9cd 4500 	strd	r4, r5, [sp]
 80082de:	693c      	ldr	r4, [r7, #16]
 80082e0:	6930      	ldr	r0, [r6, #16]
 80082e2:	47a0      	blx	r4
  }
}
 80082e4:	b003      	add	sp, #12
 80082e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80082e8:	096f      	lsrs	r7, r5, #5
 80082ea:	9400      	str	r4, [sp, #0]
 80082ec:	0a29      	lsrs	r1, r5, #8
 80082ee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80082f2:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 80082f6:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 80082fa:	4601      	mov	r1, r0
 80082fc:	6930      	ldr	r0, [r6, #16]
 80082fe:	433c      	orrs	r4, r7
 8008300:	4e04      	ldr	r6, [pc, #16]	; (8008314 <UTIL_LCD_FillRect+0x54>)
 8008302:	4325      	orrs	r5, r4
 8008304:	6934      	ldr	r4, [r6, #16]
 8008306:	9501      	str	r5, [sp, #4]
 8008308:	47a0      	blx	r4
}
 800830a:	b003      	add	sp, #12
 800830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830e:	bf00      	nop
 8008310:	240091d8 	.word	0x240091d8
 8008314:	24009218 	.word	0x24009218

08008318 <UTIL_LCD_Clear>:
{
 8008318:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800831a:	2100      	movs	r1, #0
{
 800831c:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800831e:	4a05      	ldr	r2, [pc, #20]	; (8008334 <UTIL_LCD_Clear+0x1c>)
 8008320:	9000      	str	r0, [sp, #0]
 8008322:	4608      	mov	r0, r1
 8008324:	6993      	ldr	r3, [r2, #24]
 8008326:	6952      	ldr	r2, [r2, #20]
 8008328:	f7ff ffca 	bl	80082c0 <UTIL_LCD_FillRect>
}
 800832c:	b003      	add	sp, #12
 800832e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008332:	bf00      	nop
 8008334:	240091d8 	.word	0x240091d8

08008338 <__libc_init_array>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	4d0d      	ldr	r5, [pc, #52]	; (8008370 <__libc_init_array+0x38>)
 800833c:	4c0d      	ldr	r4, [pc, #52]	; (8008374 <__libc_init_array+0x3c>)
 800833e:	1b64      	subs	r4, r4, r5
 8008340:	10a4      	asrs	r4, r4, #2
 8008342:	2600      	movs	r6, #0
 8008344:	42a6      	cmp	r6, r4
 8008346:	d109      	bne.n	800835c <__libc_init_array+0x24>
 8008348:	4d0b      	ldr	r5, [pc, #44]	; (8008378 <__libc_init_array+0x40>)
 800834a:	4c0c      	ldr	r4, [pc, #48]	; (800837c <__libc_init_array+0x44>)
 800834c:	f000 f82e 	bl	80083ac <_init>
 8008350:	1b64      	subs	r4, r4, r5
 8008352:	10a4      	asrs	r4, r4, #2
 8008354:	2600      	movs	r6, #0
 8008356:	42a6      	cmp	r6, r4
 8008358:	d105      	bne.n	8008366 <__libc_init_array+0x2e>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008360:	4798      	blx	r3
 8008362:	3601      	adds	r6, #1
 8008364:	e7ee      	b.n	8008344 <__libc_init_array+0xc>
 8008366:	f855 3b04 	ldr.w	r3, [r5], #4
 800836a:	4798      	blx	r3
 800836c:	3601      	adds	r6, #1
 800836e:	e7f2      	b.n	8008356 <__libc_init_array+0x1e>
 8008370:	0800a12c 	.word	0x0800a12c
 8008374:	0800a12c 	.word	0x0800a12c
 8008378:	0800a12c 	.word	0x0800a12c
 800837c:	0800a130 	.word	0x0800a130

08008380 <memcpy>:
 8008380:	440a      	add	r2, r1
 8008382:	4291      	cmp	r1, r2
 8008384:	f100 33ff 	add.w	r3, r0, #4294967295
 8008388:	d100      	bne.n	800838c <memcpy+0xc>
 800838a:	4770      	bx	lr
 800838c:	b510      	push	{r4, lr}
 800838e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008396:	4291      	cmp	r1, r2
 8008398:	d1f9      	bne.n	800838e <memcpy+0xe>
 800839a:	bd10      	pop	{r4, pc}

0800839c <memset>:
 800839c:	4402      	add	r2, r0
 800839e:	4603      	mov	r3, r0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d100      	bne.n	80083a6 <memset+0xa>
 80083a4:	4770      	bx	lr
 80083a6:	f803 1b01 	strb.w	r1, [r3], #1
 80083aa:	e7f9      	b.n	80083a0 <memset+0x4>

080083ac <_init>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr

080083b8 <_fini>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr
