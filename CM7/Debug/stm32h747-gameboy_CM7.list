
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d68  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ff8  08013ff8  00031074  2**0
                  CONTENTS
  4 .ARM          00000000  08013ff8  08013ff8  00031074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013ff8  08013ff8  00031074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ff8  08013ff8  00023ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ffc  08013ffc  00023ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001074  24000000  08014000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010990  24001078  08015074  00031078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24011a08  08015074  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000bb2d7  00000000  00000000  000310a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071a0  00000000  00000000  000ec379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b321  00000000  00000000  000f3519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b8  00000000  00000000  0010e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004900  00000000  00000000  00110df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048757  00000000  00000000  001156f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031a6a  00000000  00000000  0015de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c8af2  00000000  00000000  0018f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003583ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f78  00000000  00000000  00358400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001078 	.word	0x24001078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a278 	.word	0x0800a278

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400107c 	.word	0x2400107c
 80002d4:	0800a278 	.word	0x0800a278

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24001664 	.word	0x24001664

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	24001664 	.word	0x24001664

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	240010a1 	.word	0x240010a1

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	24001664 	.word	0x24001664

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	24001664 	.word	0x24001664

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	24001664 	.word	0x24001664

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	24001664 	.word	0x24001664

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	24001664 	.word	0x24001664

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24001664 	.word	0x24001664

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	24001664 	.word	0x24001664

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	24001664 	.word	0x24001664

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	24001664 	.word	0x24001664

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	24001664 	.word	0x24001664

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	24001664 	.word	0x24001664

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	24001664 	.word	0x24001664

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	24001664 	.word	0x24001664

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	24001664 	.word	0x24001664

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	24001664 	.word	0x24001664

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	24001664 	.word	0x24001664

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	24001664 	.word	0x24001664

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	24001664 	.word	0x24001664

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	24001664 	.word	0x24001664

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	24001664 	.word	0x24001664

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	24001664 	.word	0x24001664

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	24001664 	.word	0x24001664

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	24001664 	.word	0x24001664

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	24001664 	.word	0x24001664

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	24001664 	.word	0x24001664

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	24001664 	.word	0x24001664

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	24001664 	.word	0x24001664

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	24001664 	.word	0x24001664

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	24001664 	.word	0x24001664

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	24001664 	.word	0x24001664

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	24001664 	.word	0x24001664

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	24001664 	.word	0x24001664

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	24001664 	.word	0x24001664

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	24001664 	.word	0x24001664

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	24001664 	.word	0x24001664

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	24001664 	.word	0x24001664

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	24001664 	.word	0x24001664

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	24001664 	.word	0x24001664

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	24001664 	.word	0x24001664

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	24001664 	.word	0x24001664

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	24001664 	.word	0x24001664

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	24001664 	.word	0x24001664

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	2400109e 	.word	0x2400109e

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	24001664 	.word	0x24001664

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	24001664 	.word	0x24001664

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	24001664 	.word	0x24001664

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	24001664 	.word	0x24001664

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	24001664 	.word	0x24001664

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	24001664 	.word	0x24001664

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	24001664 	.word	0x24001664

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	24001664 	.word	0x24001664

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24001664 	.word	0x24001664

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24001664 	.word	0x24001664

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24001664 	.word	0x24001664

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	24001664 	.word	0x24001664

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	24001664 	.word	0x24001664

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	24001664 	.word	0x24001664

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	24001664 	.word	0x24001664

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	24001664 	.word	0x24001664

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	24001664 	.word	0x24001664

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	24001664 	.word	0x24001664

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	24001664 	.word	0x24001664

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	24001664 	.word	0x24001664

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	24001664 	.word	0x24001664

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	24001664 	.word	0x24001664

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24001664 	.word	0x24001664

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24001664 	.word	0x24001664

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24001664 	.word	0x24001664

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	24001664 	.word	0x24001664

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	24001664 	.word	0x24001664

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	24001664 	.word	0x24001664

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	2400109f 	.word	0x2400109f

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	24001664 	.word	0x24001664

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	2400109f 	.word	0x2400109f

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fea1 	bl	8003600 <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	24001664 	.word	0x24001664

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fe97 	bl	8003600 <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	24001664 	.word	0x24001664

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 fe8b 	bl	8003600 <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	24001664 	.word	0x24001664

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 fe7f 	bl	8003600 <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	24001664 	.word	0x24001664

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fe73 	bl	8003600 <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	24001664 	.word	0x24001664

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fe67 	bl	8003600 <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	24001664 	.word	0x24001664

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fe5b 	bl	8003600 <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	24001664 	.word	0x24001664

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fe4f 	bl	8003600 <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	24001664 	.word	0x24001664

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fe45 	bl	8003600 <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	24001664 	.word	0x24001664

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fe37 	bl	8003600 <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	24001664 	.word	0x24001664

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fe2d 	bl	8003600 <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	24001664 	.word	0x24001664

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fe1f 	bl	8003600 <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	24001664 	.word	0x24001664

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fe15 	bl	8003600 <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	24001664 	.word	0x24001664

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fe0b 	bl	8003600 <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	24001664 	.word	0x24001664

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fe01 	bl	8003600 <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	24001664 	.word	0x24001664

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fdf7 	bl	8003600 <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	24001664 	.word	0x24001664

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fded 	bl	8003600 <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24001664 	.word	0x24001664

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fde3 	bl	8003600 <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	24001664 	.word	0x24001664

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fdd9 	bl	8003600 <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	24001664 	.word	0x24001664

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fdcf 	bl	8003600 <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	24001664 	.word	0x24001664

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fdbf 	bl	8003600 <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	24001664 	.word	0x24001664

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fdad 	bl	8003600 <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	24001664 	.word	0x24001664

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fd99 	bl	8003600 <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	24001664 	.word	0x24001664
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fd87 	bl	8003600 <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	24001664 	.word	0x24001664

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fd75 	bl	8003600 <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24001664 	.word	0x24001664

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fd61 	bl	8003600 <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fd5c 	bl	8003600 <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	24001664 	.word	0x24001664

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fd50 	bl	8003600 <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	24001664 	.word	0x24001664

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fd45 	bl	8003600 <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24001664 	.word	0x24001664

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fd31 	bl	8003600 <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fd2b 	bl	8003600 <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 ffe7 	bl	8002b80 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24001664 	.word	0x24001664

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fd1b 	bl	8003600 <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fd15 	bl	8003600 <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f001 ffd1 	bl	8002b80 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	24001664 	.word	0x24001664

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fd05 	bl	8003600 <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fcff 	bl	8003600 <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ffbb 	bl	8002b80 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	24001664 	.word	0x24001664

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fcef 	bl	8003600 <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fce9 	bl	8003600 <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ffa5 	bl	8002b80 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24001664 	.word	0x24001664

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fcd9 	bl	8003600 <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fcd3 	bl	8003600 <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ff8f 	bl	8002b80 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	24001664 	.word	0x24001664

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fcc3 	bl	8003600 <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fcbd 	bl	8003600 <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ff79 	bl	8002b80 <concat_16bit_bigEndian>
 8000c8e:	f002 fcb7 	bl	8003600 <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	24001664 	.word	0x24001664

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bcc1 	b.w	8003628 <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	24001664 	.word	0x24001664

08000cac <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <vLD_DE_A+0xc>)
 8000cae:	7859      	ldrb	r1, [r3, #1]
 8000cb0:	8898      	ldrh	r0, [r3, #4]
 8000cb2:	f002 bcb9 	b.w	8003628 <vGBMemoryWrite>
 8000cb6:	bf00      	nop
 8000cb8:	24001664 	.word	0x24001664

08000cbc <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4c04      	ldr	r4, [pc, #16]	; (8000cd0 <vLD_HLI_A+0x14>)
 8000cc0:	7861      	ldrb	r1, [r4, #1]
 8000cc2:	88e0      	ldrh	r0, [r4, #6]
 8000cc4:	f002 fcb0 	bl	8003628 <vGBMemoryWrite>
 8000cc8:	88e3      	ldrh	r3, [r4, #6]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	80e3      	strh	r3, [r4, #6]
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	24001664 	.word	0x24001664

08000cd4 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	4c04      	ldr	r4, [pc, #16]	; (8000ce8 <vLD_HLD_A+0x14>)
 8000cd8:	7861      	ldrb	r1, [r4, #1]
 8000cda:	88e0      	ldrh	r0, [r4, #6]
 8000cdc:	f002 fca4 	bl	8003628 <vGBMemoryWrite>
 8000ce0:	88e3      	ldrh	r3, [r4, #6]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	80e3      	strh	r3, [r4, #6]
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	24001664 	.word	0x24001664

08000cec <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <vLD_HL_d8+0x1c>)
 8000cee:	8958      	ldrh	r0, [r3, #10]
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	b510      	push	{r4, lr}
 8000cf4:	88dc      	ldrh	r4, [r3, #6]
 8000cf6:	b280      	uxth	r0, r0
 8000cf8:	f002 fc82 	bl	8003600 <ucGBMemoryRead>
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	4620      	mov	r0, r4
 8000d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d04:	f002 bc90 	b.w	8003628 <vGBMemoryWrite>
 8000d08:	24001664 	.word	0x24001664

08000d0c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <vLD_HL_B+0xc>)
 8000d0e:	78d9      	ldrb	r1, [r3, #3]
 8000d10:	88d8      	ldrh	r0, [r3, #6]
 8000d12:	f002 bc89 	b.w	8003628 <vGBMemoryWrite>
 8000d16:	bf00      	nop
 8000d18:	24001664 	.word	0x24001664

08000d1c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <vLD_HL_C+0xc>)
 8000d1e:	7899      	ldrb	r1, [r3, #2]
 8000d20:	88d8      	ldrh	r0, [r3, #6]
 8000d22:	f002 bc81 	b.w	8003628 <vGBMemoryWrite>
 8000d26:	bf00      	nop
 8000d28:	24001664 	.word	0x24001664

08000d2c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <vLD_HL_D+0xc>)
 8000d2e:	7959      	ldrb	r1, [r3, #5]
 8000d30:	88d8      	ldrh	r0, [r3, #6]
 8000d32:	f002 bc79 	b.w	8003628 <vGBMemoryWrite>
 8000d36:	bf00      	nop
 8000d38:	24001664 	.word	0x24001664

08000d3c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_E+0xc>)
 8000d3e:	7919      	ldrb	r1, [r3, #4]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bc71 	b.w	8003628 <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	24001664 	.word	0x24001664

08000d4c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_H+0xc>)
 8000d4e:	79d9      	ldrb	r1, [r3, #7]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bc69 	b.w	8003628 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	24001664 	.word	0x24001664

08000d5c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_L+0xc>)
 8000d5e:	7999      	ldrb	r1, [r3, #6]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bc61 	b.w	8003628 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	24001664 	.word	0x24001664

08000d6c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_A+0xc>)
 8000d6e:	7859      	ldrb	r1, [r3, #1]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bc59 	b.w	8003628 <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	24001664 	.word	0x24001664

08000d7c <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	4c07      	ldr	r4, [pc, #28]	; (8000d9c <vLDH_a8_A+0x20>)
 8000d80:	8960      	ldrh	r0, [r4, #10]
 8000d82:	3801      	subs	r0, #1
 8000d84:	b280      	uxth	r0, r0
 8000d86:	f002 fc3b 	bl	8003600 <ucGBMemoryRead>
 8000d8a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000d8e:	7861      	ldrb	r1, [r4, #1]
 8000d90:	b280      	uxth	r0, r0
 8000d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d96:	f002 bc47 	b.w	8003628 <vGBMemoryWrite>
 8000d9a:	bf00      	nop
 8000d9c:	24001664 	.word	0x24001664

08000da0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <vLD_fC_A+0x10>)
 8000da2:	7898      	ldrb	r0, [r3, #2]
 8000da4:	7859      	ldrb	r1, [r3, #1]
 8000da6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000daa:	b280      	uxth	r0, r0
 8000dac:	f002 bc3c 	b.w	8003628 <vGBMemoryWrite>
 8000db0:	24001664 	.word	0x24001664

08000db4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <vLD_a16_A+0x2c>)
 8000db8:	8960      	ldrh	r0, [r4, #10]
 8000dba:	3802      	subs	r0, #2
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	f002 fc1f 	bl	8003600 <ucGBMemoryRead>
 8000dc2:	8963      	ldrh	r3, [r4, #10]
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	f002 fc19 	bl	8003600 <ucGBMemoryRead>
 8000dce:	4601      	mov	r1, r0
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f001 fed5 	bl	8002b80 <concat_16bit_bigEndian>
 8000dd6:	7861      	ldrb	r1, [r4, #1]
 8000dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ddc:	f002 bc24 	b.w	8003628 <vGBMemoryWrite>
 8000de0:	24001664 	.word	0x24001664

08000de4 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000de4:	4901      	ldr	r1, [pc, #4]	; (8000dec <vINC_B+0x8>)
 8000de6:	1cc8      	adds	r0, r1, #3
 8000de8:	f001 bee2 	b.w	8002bb0 <v8bitRegisterINC>
 8000dec:	24001664 	.word	0x24001664

08000df0 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vINC_C+0x8>)
 8000df2:	1c88      	adds	r0, r1, #2
 8000df4:	f001 bedc 	b.w	8002bb0 <v8bitRegisterINC>
 8000df8:	24001664 	.word	0x24001664

08000dfc <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000dfc:	4901      	ldr	r1, [pc, #4]	; (8000e04 <vINC_D+0x8>)
 8000dfe:	1d48      	adds	r0, r1, #5
 8000e00:	f001 bed6 	b.w	8002bb0 <v8bitRegisterINC>
 8000e04:	24001664 	.word	0x24001664

08000e08 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e08:	4901      	ldr	r1, [pc, #4]	; (8000e10 <vINC_E+0x8>)
 8000e0a:	1d08      	adds	r0, r1, #4
 8000e0c:	f001 bed0 	b.w	8002bb0 <v8bitRegisterINC>
 8000e10:	24001664 	.word	0x24001664

08000e14 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_H+0x8>)
 8000e16:	1dc8      	adds	r0, r1, #7
 8000e18:	f001 beca 	b.w	8002bb0 <v8bitRegisterINC>
 8000e1c:	24001664 	.word	0x24001664

08000e20 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_L+0x8>)
 8000e22:	1d88      	adds	r0, r1, #6
 8000e24:	f001 bec4 	b.w	8002bb0 <v8bitRegisterINC>
 8000e28:	24001664 	.word	0x24001664

08000e2c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_A+0x8>)
 8000e2e:	1c48      	adds	r0, r1, #1
 8000e30:	f001 bebe 	b.w	8002bb0 <v8bitRegisterINC>
 8000e34:	24001664 	.word	0x24001664

08000e38 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vDEC_B+0x8>)
 8000e3a:	1cc8      	adds	r0, r1, #3
 8000e3c:	f001 bed6 	b.w	8002bec <v8bitRegisterDEC>
 8000e40:	24001664 	.word	0x24001664

08000e44 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vDEC_C+0x8>)
 8000e46:	1c88      	adds	r0, r1, #2
 8000e48:	f001 bed0 	b.w	8002bec <v8bitRegisterDEC>
 8000e4c:	24001664 	.word	0x24001664

08000e50 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vDEC_D+0x8>)
 8000e52:	1d48      	adds	r0, r1, #5
 8000e54:	f001 beca 	b.w	8002bec <v8bitRegisterDEC>
 8000e58:	24001664 	.word	0x24001664

08000e5c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vDEC_E+0x8>)
 8000e5e:	1d08      	adds	r0, r1, #4
 8000e60:	f001 bec4 	b.w	8002bec <v8bitRegisterDEC>
 8000e64:	24001664 	.word	0x24001664

08000e68 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_H+0x8>)
 8000e6a:	1dc8      	adds	r0, r1, #7
 8000e6c:	f001 bebe 	b.w	8002bec <v8bitRegisterDEC>
 8000e70:	24001664 	.word	0x24001664

08000e74 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_L+0x8>)
 8000e76:	1d88      	adds	r0, r1, #6
 8000e78:	f001 beb8 	b.w	8002bec <v8bitRegisterDEC>
 8000e7c:	24001664 	.word	0x24001664

08000e80 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_A+0x8>)
 8000e82:	1c48      	adds	r0, r1, #1
 8000e84:	f001 beb2 	b.w	8002bec <v8bitRegisterDEC>
 8000e88:	24001664 	.word	0x24001664

08000e8c <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vRLCA+0x8>)
 8000e8e:	1c48      	adds	r0, r1, #1
 8000e90:	f001 becc 	b.w	8002c2c <vGBFunctionRLCA>
 8000e94:	24001664 	.word	0x24001664

08000e98 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <vLDs_a16_SP+0x2c>)
 8000e9c:	8960      	ldrh	r0, [r4, #10]
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	b280      	uxth	r0, r0
 8000ea2:	f002 fbad 	bl	8003600 <ucGBMemoryRead>
 8000ea6:	8963      	ldrh	r3, [r4, #10]
 8000ea8:	4605      	mov	r5, r0
 8000eaa:	1e58      	subs	r0, r3, #1
 8000eac:	b280      	uxth	r0, r0
 8000eae:	f002 fba7 	bl	8003600 <ucGBMemoryRead>
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f001 fe63 	bl	8002b80 <concat_16bit_bigEndian>
 8000eba:	8921      	ldrh	r1, [r4, #8]
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f002 bbfe 	b.w	80036c0 <vGBMemoryWriteShort>
 8000ec4:	24001664 	.word	0x24001664

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 becb 	b.w	8002c68 <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	24001664 	.word	0x24001664

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 bec3 	b.w	8002c68 <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	24001664 	.word	0x24001664

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 beba 	b.w	8002c68 <vGBFunction16bitADD>
 8000ef4:	24001664 	.word	0x24001664

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 beb3 	b.w	8002c68 <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	24001664 	.word	0x24001664

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 be9a 	b.w	8002c44 <vGBFunctionRRCA>
 8000f10:	24001664 	.word	0x24001664

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 bece 	b.w	8002cb8 <vGBFunctionRLA>
 8000f1c:	24001664 	.word	0x24001664

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 bed6 	b.w	8002cd4 <vGBFunctionRRA>
 8000f28:	24001664 	.word	0x24001664

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 fb61 	bl	8003600 <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 fed4 	bl	8002cf0 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	24001664 	.word	0x24001664
 8000f54:	24001094 	.word	0x24001094

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 bed4 	b.w	8002d08 <vGBFunctionDAA>
 8000f60:	24001664 	.word	0x24001664

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 fb45 	bl	8003600 <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 ff02 	bl	8002d84 <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	24001664 	.word	0x24001664
 8000f8c:	24001094 	.word	0x24001094

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fdf3 	bl	8002b88 <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 bded 	b.w	8002b88 <setbit>
 8000fae:	bf00      	nop
 8000fb0:	24001664 	.word	0x24001664

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 bde6 	b.w	8002b88 <setbit>
 8000fbc:	24001667 	.word	0x24001667

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 bde0 	b.w	8002b88 <setbit>
 8000fc8:	24001666 	.word	0x24001666

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 bdda 	b.w	8002b88 <setbit>
 8000fd4:	24001669 	.word	0x24001669

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 bdd4 	b.w	8002b88 <setbit>
 8000fe0:	24001668 	.word	0x24001668

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 bdce 	b.w	8002b88 <setbit>
 8000fec:	2400166b 	.word	0x2400166b

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bdc8 	b.w	8002b88 <setbit>
 8000ff8:	2400166a 	.word	0x2400166a

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bdc2 	b.w	8002b88 <setbit>
 8001004:	24001665 	.word	0x24001665

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bdbc 	b.w	8002b88 <setbit>
 8001010:	24001667 	.word	0x24001667

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bdb6 	b.w	8002b88 <setbit>
 800101c:	24001666 	.word	0x24001666

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bdb0 	b.w	8002b88 <setbit>
 8001028:	24001669 	.word	0x24001669

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bdaa 	b.w	8002b88 <setbit>
 8001034:	24001668 	.word	0x24001668

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bda4 	b.w	8002b88 <setbit>
 8001040:	2400166b 	.word	0x2400166b

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bd9e 	b.w	8002b88 <setbit>
 800104c:	2400166a 	.word	0x2400166a

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bd98 	b.w	8002b88 <setbit>
 8001058:	24001665 	.word	0x24001665

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bd92 	b.w	8002b88 <setbit>
 8001064:	24001667 	.word	0x24001667

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bd8c 	b.w	8002b88 <setbit>
 8001070:	24001666 	.word	0x24001666

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bd86 	b.w	8002b88 <setbit>
 800107c:	24001669 	.word	0x24001669

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bd80 	b.w	8002b88 <setbit>
 8001088:	24001668 	.word	0x24001668

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bd7a 	b.w	8002b88 <setbit>
 8001094:	2400166b 	.word	0x2400166b

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bd74 	b.w	8002b88 <setbit>
 80010a0:	2400166a 	.word	0x2400166a

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bd6e 	b.w	8002b88 <setbit>
 80010ac:	24001665 	.word	0x24001665

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd68 	b.w	8002b88 <setbit>
 80010b8:	24001667 	.word	0x24001667

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd62 	b.w	8002b88 <setbit>
 80010c4:	24001666 	.word	0x24001666

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd5c 	b.w	8002b88 <setbit>
 80010d0:	24001669 	.word	0x24001669

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd56 	b.w	8002b88 <setbit>
 80010dc:	24001668 	.word	0x24001668

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd50 	b.w	8002b88 <setbit>
 80010e8:	2400166b 	.word	0x2400166b

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd4a 	b.w	8002b88 <setbit>
 80010f4:	2400166a 	.word	0x2400166a

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd44 	b.w	8002b88 <setbit>
 8001100:	24001665 	.word	0x24001665

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd3e 	b.w	8002b88 <setbit>
 800110c:	24001667 	.word	0x24001667

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd38 	b.w	8002b88 <setbit>
 8001118:	24001666 	.word	0x24001666

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd32 	b.w	8002b88 <setbit>
 8001124:	24001669 	.word	0x24001669

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd2c 	b.w	8002b88 <setbit>
 8001130:	24001668 	.word	0x24001668

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd26 	b.w	8002b88 <setbit>
 800113c:	2400166b 	.word	0x2400166b

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd20 	b.w	8002b88 <setbit>
 8001148:	2400166a 	.word	0x2400166a

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bd1a 	b.w	8002b88 <setbit>
 8001154:	24001665 	.word	0x24001665

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bd14 	b.w	8002b88 <setbit>
 8001160:	24001667 	.word	0x24001667

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bd0e 	b.w	8002b88 <setbit>
 800116c:	24001666 	.word	0x24001666

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bd08 	b.w	8002b88 <setbit>
 8001178:	24001669 	.word	0x24001669

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bd02 	b.w	8002b88 <setbit>
 8001184:	24001668 	.word	0x24001668

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bcfc 	b.w	8002b88 <setbit>
 8001190:	2400166b 	.word	0x2400166b

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bcf6 	b.w	8002b88 <setbit>
 800119c:	2400166a 	.word	0x2400166a

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bcf0 	b.w	8002b88 <setbit>
 80011a8:	24001665 	.word	0x24001665

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bcea 	b.w	8002b88 <setbit>
 80011b4:	24001667 	.word	0x24001667

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bce4 	b.w	8002b88 <setbit>
 80011c0:	24001666 	.word	0x24001666

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bcde 	b.w	8002b88 <setbit>
 80011cc:	24001669 	.word	0x24001669

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bcd8 	b.w	8002b88 <setbit>
 80011d8:	24001668 	.word	0x24001668

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bcd2 	b.w	8002b88 <setbit>
 80011e4:	2400166b 	.word	0x2400166b

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bccc 	b.w	8002b88 <setbit>
 80011f0:	2400166a 	.word	0x2400166a

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bcc6 	b.w	8002b88 <setbit>
 80011fc:	24001665 	.word	0x24001665

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bcc0 	b.w	8002b88 <setbit>
 8001208:	24001667 	.word	0x24001667

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bcba 	b.w	8002b88 <setbit>
 8001214:	24001666 	.word	0x24001666

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bcb4 	b.w	8002b88 <setbit>
 8001220:	24001669 	.word	0x24001669

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bcae 	b.w	8002b88 <setbit>
 800122c:	24001668 	.word	0x24001668

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bca8 	b.w	8002b88 <setbit>
 8001238:	2400166b 	.word	0x2400166b

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bca2 	b.w	8002b88 <setbit>
 8001244:	2400166a 	.word	0x2400166a

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bc9c 	b.w	8002b88 <setbit>
 8001250:	24001665 	.word	0x24001665

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f9cd 	bl	8003600 <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fd96 	bl	8002d9c <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	24001664 	.word	0x24001664
 800127c:	24001094 	.word	0x24001094

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bd96 	b.w	8002db4 <vMemoryLocationINC>
 8001288:	24001664 	.word	0x24001664

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bdba 	b.w	8002e08 <vMemoryLocationDEC>
 8001294:	24001664 	.word	0x24001664

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fc7b 	bl	8002b98 <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fc77 	bl	8002b98 <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc69 	b.w	8002b88 <setbit>
 80012b6:	bf00      	nop
 80012b8:	24001664 	.word	0x24001664

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc6a 	b.w	8002b98 <resetbit>
 80012c4:	24001667 	.word	0x24001667

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc64 	b.w	8002b98 <resetbit>
 80012d0:	24001666 	.word	0x24001666

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc5e 	b.w	8002b98 <resetbit>
 80012dc:	24001669 	.word	0x24001669

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc58 	b.w	8002b98 <resetbit>
 80012e8:	24001668 	.word	0x24001668

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc52 	b.w	8002b98 <resetbit>
 80012f4:	2400166b 	.word	0x2400166b

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc4c 	b.w	8002b98 <resetbit>
 8001300:	2400166a 	.word	0x2400166a

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc46 	b.w	8002b98 <resetbit>
 800130c:	24001665 	.word	0x24001665

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc40 	b.w	8002b98 <resetbit>
 8001318:	24001667 	.word	0x24001667

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc3a 	b.w	8002b98 <resetbit>
 8001324:	24001666 	.word	0x24001666

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc34 	b.w	8002b98 <resetbit>
 8001330:	24001669 	.word	0x24001669

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc2e 	b.w	8002b98 <resetbit>
 800133c:	24001668 	.word	0x24001668

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc28 	b.w	8002b98 <resetbit>
 8001348:	2400166b 	.word	0x2400166b

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc22 	b.w	8002b98 <resetbit>
 8001354:	2400166a 	.word	0x2400166a

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bc1c 	b.w	8002b98 <resetbit>
 8001360:	24001665 	.word	0x24001665

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bc16 	b.w	8002b98 <resetbit>
 800136c:	24001667 	.word	0x24001667

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bc10 	b.w	8002b98 <resetbit>
 8001378:	24001666 	.word	0x24001666

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bc0a 	b.w	8002b98 <resetbit>
 8001384:	24001669 	.word	0x24001669

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bc04 	b.w	8002b98 <resetbit>
 8001390:	24001668 	.word	0x24001668

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bbfe 	b.w	8002b98 <resetbit>
 800139c:	2400166b 	.word	0x2400166b

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bbf8 	b.w	8002b98 <resetbit>
 80013a8:	2400166a 	.word	0x2400166a

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bbf2 	b.w	8002b98 <resetbit>
 80013b4:	24001665 	.word	0x24001665

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bbec 	b.w	8002b98 <resetbit>
 80013c0:	24001667 	.word	0x24001667

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bbe6 	b.w	8002b98 <resetbit>
 80013cc:	24001666 	.word	0x24001666

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bbe0 	b.w	8002b98 <resetbit>
 80013d8:	24001669 	.word	0x24001669

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bbda 	b.w	8002b98 <resetbit>
 80013e4:	24001668 	.word	0x24001668

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bbd4 	b.w	8002b98 <resetbit>
 80013f0:	2400166b 	.word	0x2400166b

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bbce 	b.w	8002b98 <resetbit>
 80013fc:	2400166a 	.word	0x2400166a

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bbc8 	b.w	8002b98 <resetbit>
 8001408:	24001665 	.word	0x24001665

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bbc2 	b.w	8002b98 <resetbit>
 8001414:	24001667 	.word	0x24001667

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bbbc 	b.w	8002b98 <resetbit>
 8001420:	24001666 	.word	0x24001666

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bbb6 	b.w	8002b98 <resetbit>
 800142c:	24001669 	.word	0x24001669

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bbb0 	b.w	8002b98 <resetbit>
 8001438:	24001668 	.word	0x24001668

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bbaa 	b.w	8002b98 <resetbit>
 8001444:	2400166b 	.word	0x2400166b

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bba4 	b.w	8002b98 <resetbit>
 8001450:	2400166a 	.word	0x2400166a

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bb9e 	b.w	8002b98 <resetbit>
 800145c:	24001665 	.word	0x24001665

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bb98 	b.w	8002b98 <resetbit>
 8001468:	24001667 	.word	0x24001667

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bb92 	b.w	8002b98 <resetbit>
 8001474:	24001666 	.word	0x24001666

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bb8c 	b.w	8002b98 <resetbit>
 8001480:	24001669 	.word	0x24001669

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bb86 	b.w	8002b98 <resetbit>
 800148c:	24001668 	.word	0x24001668

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bb80 	b.w	8002b98 <resetbit>
 8001498:	2400166b 	.word	0x2400166b

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bb7a 	b.w	8002b98 <resetbit>
 80014a4:	2400166a 	.word	0x2400166a

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bb74 	b.w	8002b98 <resetbit>
 80014b0:	24001665 	.word	0x24001665

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bb6e 	b.w	8002b98 <resetbit>
 80014bc:	24001667 	.word	0x24001667

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb68 	b.w	8002b98 <resetbit>
 80014c8:	24001666 	.word	0x24001666

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb62 	b.w	8002b98 <resetbit>
 80014d4:	24001669 	.word	0x24001669

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb5c 	b.w	8002b98 <resetbit>
 80014e0:	24001668 	.word	0x24001668

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb56 	b.w	8002b98 <resetbit>
 80014ec:	2400166b 	.word	0x2400166b

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb50 	b.w	8002b98 <resetbit>
 80014f8:	2400166a 	.word	0x2400166a

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb4a 	b.w	8002b98 <resetbit>
 8001504:	24001665 	.word	0x24001665

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb44 	b.w	8002b98 <resetbit>
 8001510:	24001667 	.word	0x24001667

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb3e 	b.w	8002b98 <resetbit>
 800151c:	24001666 	.word	0x24001666

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb38 	b.w	8002b98 <resetbit>
 8001528:	24001669 	.word	0x24001669

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb32 	b.w	8002b98 <resetbit>
 8001534:	24001668 	.word	0x24001668

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb2c 	b.w	8002b98 <resetbit>
 8001540:	2400166b 	.word	0x2400166b

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb26 	b.w	8002b98 <resetbit>
 800154c:	2400166a 	.word	0x2400166a

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb20 	b.w	8002b98 <resetbit>
 8001558:	24001665 	.word	0x24001665

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f002 f849 	bl	8003600 <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fc70 	bl	8002e58 <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	24001664 	.word	0x24001664
 8001584:	24001094 	.word	0x24001094

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bc6f 	b.w	8002e70 <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	24001664 	.word	0x24001664

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc67 	b.w	8002e70 <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	24001664 	.word	0x24001664

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc5f 	b.w	8002e70 <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	24001664 	.word	0x24001664

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc57 	b.w	8002e70 <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	24001664 	.word	0x24001664

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc4f 	b.w	8002e70 <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	24001664 	.word	0x24001664

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc47 	b.w	8002e70 <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	24001664 	.word	0x24001664

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f002 f807 	bl	8003600 <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc38 	b.w	8002e70 <vGBFunctionADD>
 8001600:	24001664 	.word	0x24001664

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc30 	b.w	8002e70 <vGBFunctionADD>
 8001610:	24001664 	.word	0x24001664

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f001 ffef 	bl	8003600 <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bc20 	b.w	8002e70 <vGBFunctionADD>
 8001630:	24001664 	.word	0x24001664

08001634 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADC_A_B+0xc>)
 8001636:	78ca      	ldrb	r2, [r1, #3]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc47 	b.w	8002ecc <vGBFunctionADC>
 800163e:	bf00      	nop
 8001640:	24001664 	.word	0x24001664

08001644 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADC_A_C+0xc>)
 8001646:	788a      	ldrb	r2, [r1, #2]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc3f 	b.w	8002ecc <vGBFunctionADC>
 800164e:	bf00      	nop
 8001650:	24001664 	.word	0x24001664

08001654 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADC_A_D+0xc>)
 8001656:	794a      	ldrb	r2, [r1, #5]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc37 	b.w	8002ecc <vGBFunctionADC>
 800165e:	bf00      	nop
 8001660:	24001664 	.word	0x24001664

08001664 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001664:	4902      	ldr	r1, [pc, #8]	; (8001670 <vADC_A_E+0xc>)
 8001666:	790a      	ldrb	r2, [r1, #4]
 8001668:	1c48      	adds	r0, r1, #1
 800166a:	f001 bc2f 	b.w	8002ecc <vGBFunctionADC>
 800166e:	bf00      	nop
 8001670:	24001664 	.word	0x24001664

08001674 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001674:	4902      	ldr	r1, [pc, #8]	; (8001680 <vADC_A_H+0xc>)
 8001676:	79ca      	ldrb	r2, [r1, #7]
 8001678:	1c48      	adds	r0, r1, #1
 800167a:	f001 bc27 	b.w	8002ecc <vGBFunctionADC>
 800167e:	bf00      	nop
 8001680:	24001664 	.word	0x24001664

08001684 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <vADC_A_L+0xc>)
 8001686:	798a      	ldrb	r2, [r1, #6]
 8001688:	1c48      	adds	r0, r1, #1
 800168a:	f001 bc1f 	b.w	8002ecc <vGBFunctionADC>
 800168e:	bf00      	nop
 8001690:	24001664 	.word	0x24001664

08001694 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001694:	b510      	push	{r4, lr}
 8001696:	4c05      	ldr	r4, [pc, #20]	; (80016ac <vADC_A_HL+0x18>)
 8001698:	88e0      	ldrh	r0, [r4, #6]
 800169a:	f001 ffb1 	bl	8003600 <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc10 	b.w	8002ecc <vGBFunctionADC>
 80016ac:	24001664 	.word	0x24001664

080016b0 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <vADC_A_A+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016b8:	f001 bc08 	b.w	8002ecc <vGBFunctionADC>
 80016bc:	24001664 	.word	0x24001664

080016c0 <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4c06      	ldr	r4, [pc, #24]	; (80016dc <vADC_A_d8+0x1c>)
 80016c4:	8960      	ldrh	r0, [r4, #10]
 80016c6:	3801      	subs	r0, #1
 80016c8:	b280      	uxth	r0, r0
 80016ca:	f001 ff99 	bl	8003600 <ucGBMemoryRead>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4602      	mov	r2, r0
 80016d2:	1c60      	adds	r0, r4, #1
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f001 bbf8 	b.w	8002ecc <vGBFunctionADC>
 80016dc:	24001664 	.word	0x24001664

080016e0 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vSUB_B+0xc>)
 80016e2:	78ca      	ldrb	r2, [r1, #3]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc23 	b.w	8002f30 <vGBFunctionSUB>
 80016ea:	bf00      	nop
 80016ec:	24001664 	.word	0x24001664

080016f0 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vSUB_C+0xc>)
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc1b 	b.w	8002f30 <vGBFunctionSUB>
 80016fa:	bf00      	nop
 80016fc:	24001664 	.word	0x24001664

08001700 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vSUB_D+0xc>)
 8001702:	794a      	ldrb	r2, [r1, #5]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc13 	b.w	8002f30 <vGBFunctionSUB>
 800170a:	bf00      	nop
 800170c:	24001664 	.word	0x24001664

08001710 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 8001710:	4902      	ldr	r1, [pc, #8]	; (800171c <vSUB_E+0xc>)
 8001712:	790a      	ldrb	r2, [r1, #4]
 8001714:	1c48      	adds	r0, r1, #1
 8001716:	f001 bc0b 	b.w	8002f30 <vGBFunctionSUB>
 800171a:	bf00      	nop
 800171c:	24001664 	.word	0x24001664

08001720 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001720:	4902      	ldr	r1, [pc, #8]	; (800172c <vSUB_H+0xc>)
 8001722:	79ca      	ldrb	r2, [r1, #7]
 8001724:	1c48      	adds	r0, r1, #1
 8001726:	f001 bc03 	b.w	8002f30 <vGBFunctionSUB>
 800172a:	bf00      	nop
 800172c:	24001664 	.word	0x24001664

08001730 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <vSUB_L+0xc>)
 8001732:	798a      	ldrb	r2, [r1, #6]
 8001734:	1c48      	adds	r0, r1, #1
 8001736:	f001 bbfb 	b.w	8002f30 <vGBFunctionSUB>
 800173a:	bf00      	nop
 800173c:	24001664 	.word	0x24001664

08001740 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001740:	b510      	push	{r4, lr}
 8001742:	4c05      	ldr	r4, [pc, #20]	; (8001758 <vSUB_HL+0x18>)
 8001744:	88e0      	ldrh	r0, [r4, #6]
 8001746:	f001 ff5b 	bl	8003600 <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bbec 	b.w	8002f30 <vGBFunctionSUB>
 8001758:	24001664 	.word	0x24001664

0800175c <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <vSUB_A+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001764:	f001 bbe4 	b.w	8002f30 <vGBFunctionSUB>
 8001768:	24001664 	.word	0x24001664

0800176c <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800176c:	b510      	push	{r4, lr}
 800176e:	4c06      	ldr	r4, [pc, #24]	; (8001788 <vSUB_d8+0x1c>)
 8001770:	8960      	ldrh	r0, [r4, #10]
 8001772:	3801      	subs	r0, #1
 8001774:	b280      	uxth	r0, r0
 8001776:	f001 ff43 	bl	8003600 <ucGBMemoryRead>
 800177a:	4621      	mov	r1, r4
 800177c:	4602      	mov	r2, r0
 800177e:	1c60      	adds	r0, r4, #1
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f001 bbd4 	b.w	8002f30 <vGBFunctionSUB>
 8001788:	24001664 	.word	0x24001664

0800178c <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSBC_A_B+0xc>)
 800178e:	78ca      	ldrb	r2, [r1, #3]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bc03 	b.w	8002f9c <vGBFunctionSBC>
 8001796:	bf00      	nop
 8001798:	24001664 	.word	0x24001664

0800179c <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSBC_A_C+0xc>)
 800179e:	788a      	ldrb	r2, [r1, #2]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bbfb 	b.w	8002f9c <vGBFunctionSBC>
 80017a6:	bf00      	nop
 80017a8:	24001664 	.word	0x24001664

080017ac <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSBC_A_D+0xc>)
 80017ae:	794a      	ldrb	r2, [r1, #5]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bbf3 	b.w	8002f9c <vGBFunctionSBC>
 80017b6:	bf00      	nop
 80017b8:	24001664 	.word	0x24001664

080017bc <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017bc:	4902      	ldr	r1, [pc, #8]	; (80017c8 <vSBC_A_E+0xc>)
 80017be:	790a      	ldrb	r2, [r1, #4]
 80017c0:	1c48      	adds	r0, r1, #1
 80017c2:	f001 bbeb 	b.w	8002f9c <vGBFunctionSBC>
 80017c6:	bf00      	nop
 80017c8:	24001664 	.word	0x24001664

080017cc <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017cc:	4902      	ldr	r1, [pc, #8]	; (80017d8 <vSBC_A_H+0xc>)
 80017ce:	79ca      	ldrb	r2, [r1, #7]
 80017d0:	1c48      	adds	r0, r1, #1
 80017d2:	f001 bbe3 	b.w	8002f9c <vGBFunctionSBC>
 80017d6:	bf00      	nop
 80017d8:	24001664 	.word	0x24001664

080017dc <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017dc:	4902      	ldr	r1, [pc, #8]	; (80017e8 <vSBC_A_L+0xc>)
 80017de:	798a      	ldrb	r2, [r1, #6]
 80017e0:	1c48      	adds	r0, r1, #1
 80017e2:	f001 bbdb 	b.w	8002f9c <vGBFunctionSBC>
 80017e6:	bf00      	nop
 80017e8:	24001664 	.word	0x24001664

080017ec <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4c05      	ldr	r4, [pc, #20]	; (8001804 <vSBC_A_HL+0x18>)
 80017f0:	88e0      	ldrh	r0, [r4, #6]
 80017f2:	f001 ff05 	bl	8003600 <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bbcc 	b.w	8002f9c <vGBFunctionSBC>
 8001804:	24001664 	.word	0x24001664

08001808 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <vSBC_A_A+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001810:	f001 bbc4 	b.w	8002f9c <vGBFunctionSBC>
 8001814:	24001664 	.word	0x24001664

08001818 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001818:	b510      	push	{r4, lr}
 800181a:	4c06      	ldr	r4, [pc, #24]	; (8001834 <vSBC_A_d8+0x1c>)
 800181c:	8960      	ldrh	r0, [r4, #10]
 800181e:	3801      	subs	r0, #1
 8001820:	b280      	uxth	r0, r0
 8001822:	f001 feed 	bl	8003600 <ucGBMemoryRead>
 8001826:	4621      	mov	r1, r4
 8001828:	4602      	mov	r2, r0
 800182a:	1c60      	adds	r0, r4, #1
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	f001 bbb4 	b.w	8002f9c <vGBFunctionSBC>
 8001834:	24001664 	.word	0x24001664

08001838 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vCP_B+0xc>)
 800183a:	78ca      	ldrb	r2, [r1, #3]
 800183c:	7848      	ldrb	r0, [r1, #1]
 800183e:	f001 bbe5 	b.w	800300c <vGBFunctionCP>
 8001842:	bf00      	nop
 8001844:	24001664 	.word	0x24001664

08001848 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vCP_C+0xc>)
 800184a:	788a      	ldrb	r2, [r1, #2]
 800184c:	7848      	ldrb	r0, [r1, #1]
 800184e:	f001 bbdd 	b.w	800300c <vGBFunctionCP>
 8001852:	bf00      	nop
 8001854:	24001664 	.word	0x24001664

08001858 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vCP_D+0xc>)
 800185a:	794a      	ldrb	r2, [r1, #5]
 800185c:	7848      	ldrb	r0, [r1, #1]
 800185e:	f001 bbd5 	b.w	800300c <vGBFunctionCP>
 8001862:	bf00      	nop
 8001864:	24001664 	.word	0x24001664

08001868 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vCP_E+0xc>)
 800186a:	790a      	ldrb	r2, [r1, #4]
 800186c:	7848      	ldrb	r0, [r1, #1]
 800186e:	f001 bbcd 	b.w	800300c <vGBFunctionCP>
 8001872:	bf00      	nop
 8001874:	24001664 	.word	0x24001664

08001878 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001878:	4902      	ldr	r1, [pc, #8]	; (8001884 <vCP_H+0xc>)
 800187a:	79ca      	ldrb	r2, [r1, #7]
 800187c:	7848      	ldrb	r0, [r1, #1]
 800187e:	f001 bbc5 	b.w	800300c <vGBFunctionCP>
 8001882:	bf00      	nop
 8001884:	24001664 	.word	0x24001664

08001888 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001888:	4902      	ldr	r1, [pc, #8]	; (8001894 <vCP_L+0xc>)
 800188a:	798a      	ldrb	r2, [r1, #6]
 800188c:	7848      	ldrb	r0, [r1, #1]
 800188e:	f001 bbbd 	b.w	800300c <vGBFunctionCP>
 8001892:	bf00      	nop
 8001894:	24001664 	.word	0x24001664

08001898 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	4c06      	ldr	r4, [pc, #24]	; (80018b4 <vCP_HL+0x1c>)
 800189c:	7865      	ldrb	r5, [r4, #1]
 800189e:	88e0      	ldrh	r0, [r4, #6]
 80018a0:	f001 feae 	bl	8003600 <ucGBMemoryRead>
 80018a4:	4621      	mov	r1, r4
 80018a6:	4602      	mov	r2, r0
 80018a8:	4628      	mov	r0, r5
 80018aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018ae:	f001 bbad 	b.w	800300c <vGBFunctionCP>
 80018b2:	bf00      	nop
 80018b4:	24001664 	.word	0x24001664

080018b8 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 80018b8:	4902      	ldr	r1, [pc, #8]	; (80018c4 <vCP_A+0xc>)
 80018ba:	784a      	ldrb	r2, [r1, #1]
 80018bc:	4610      	mov	r0, r2
 80018be:	f001 bba5 	b.w	800300c <vGBFunctionCP>
 80018c2:	bf00      	nop
 80018c4:	24001664 	.word	0x24001664

080018c8 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4c07      	ldr	r4, [pc, #28]	; (80018e8 <vCP_d8+0x20>)
 80018cc:	8960      	ldrh	r0, [r4, #10]
 80018ce:	7865      	ldrb	r5, [r4, #1]
 80018d0:	3801      	subs	r0, #1
 80018d2:	b280      	uxth	r0, r0
 80018d4:	f001 fe94 	bl	8003600 <ucGBMemoryRead>
 80018d8:	4621      	mov	r1, r4
 80018da:	4602      	mov	r2, r0
 80018dc:	4628      	mov	r0, r5
 80018de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018e2:	f001 bb93 	b.w	800300c <vGBFunctionCP>
 80018e6:	bf00      	nop
 80018e8:	24001664 	.word	0x24001664

080018ec <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018ec:	4901      	ldr	r1, [pc, #4]	; (80018f4 <vRET+0x8>)
 80018ee:	1e88      	subs	r0, r1, #2
 80018f0:	f001 bbaa 	b.w	8003048 <vGBFunctionRET>
 80018f4:	2400166e 	.word	0x2400166e

080018f8 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <vRETI+0x10>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <vRETI+0x14>)
 80018fe:	1e88      	subs	r0, r1, #2
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	f001 bba1 	b.w	8003048 <vGBFunctionRET>
 8001906:	bf00      	nop
 8001908:	2400166e 	.word	0x2400166e
 800190c:	2400109f 	.word	0x2400109f

08001910 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 8001910:	4901      	ldr	r1, [pc, #4]	; (8001918 <vPOP_BC+0x8>)
 8001912:	1d88      	adds	r0, r1, #6
 8001914:	f001 bbac 	b.w	8003070 <vGBFunctionPOP>
 8001918:	24001666 	.word	0x24001666

0800191c <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 800191c:	4901      	ldr	r1, [pc, #4]	; (8001924 <vPOP_DE+0x8>)
 800191e:	1d08      	adds	r0, r1, #4
 8001920:	f001 bba6 	b.w	8003070 <vGBFunctionPOP>
 8001924:	24001668 	.word	0x24001668

08001928 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 8001928:	4901      	ldr	r1, [pc, #4]	; (8001930 <vPOP_HL+0x8>)
 800192a:	1c88      	adds	r0, r1, #2
 800192c:	f001 bba0 	b.w	8003070 <vGBFunctionPOP>
 8001930:	2400166a 	.word	0x2400166a

08001934 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001934:	b510      	push	{r4, lr}
 8001936:	4c05      	ldr	r4, [pc, #20]	; (800194c <vPOP_AF+0x18>)
 8001938:	4621      	mov	r1, r4
 800193a:	f104 0008 	add.w	r0, r4, #8
 800193e:	f001 fb97 	bl	8003070 <vGBFunctionPOP>
 8001942:	8823      	ldrh	r3, [r4, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	8023      	strh	r3, [r4, #0]
 800194a:	bd10      	pop	{r4, pc}
 800194c:	24001664 	.word	0x24001664

08001950 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4d0d      	ldr	r5, [pc, #52]	; (8001988 <vJP_NZ_a16+0x38>)
 8001954:	8968      	ldrh	r0, [r5, #10]
 8001956:	462c      	mov	r4, r5
 8001958:	3802      	subs	r0, #2
 800195a:	b280      	uxth	r0, r0
 800195c:	f001 fe50 	bl	8003600 <ucGBMemoryRead>
 8001960:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001964:	4606      	mov	r6, r0
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	b280      	uxth	r0, r0
 800196a:	f001 fe49 	bl	8003600 <ucGBMemoryRead>
 800196e:	4601      	mov	r1, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f001 f905 	bl	8002b80 <concat_16bit_bigEndian>
 8001976:	4629      	mov	r1, r5
 8001978:	4602      	mov	r2, r0
 800197a:	4620      	mov	r0, r4
 800197c:	f001 fb7a 	bl	8003074 <vGBFunctionJP_NZ_a16>
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <vJP_NZ_a16+0x3c>)
 8001982:	7018      	strb	r0, [r3, #0]
 8001984:	bd70      	pop	{r4, r5, r6, pc}
 8001986:	bf00      	nop
 8001988:	24001664 	.word	0x24001664
 800198c:	24001094 	.word	0x24001094

08001990 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <vCALL_NZ_a16+0x14>)
 8001992:	b508      	push	{r3, lr}
 8001994:	f1a2 0108 	sub.w	r1, r2, #8
 8001998:	1c90      	adds	r0, r2, #2
 800199a:	f001 fb87 	bl	80030ac <vGBFunctionCALL_NZ_a16>
 800199e:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <vCALL_NZ_a16+0x18>)
 80019a0:	7018      	strb	r0, [r3, #0]
 80019a2:	bd08      	pop	{r3, pc}
 80019a4:	2400166c 	.word	0x2400166c
 80019a8:	24001094 	.word	0x24001094

080019ac <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 80019ac:	4901      	ldr	r1, [pc, #4]	; (80019b4 <vPUSH_BC+0x8>)
 80019ae:	1d88      	adds	r0, r1, #6
 80019b0:	f001 bb68 	b.w	8003084 <vGBFunctionPUSH>
 80019b4:	24001666 	.word	0x24001666

080019b8 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 80019b8:	b510      	push	{r4, lr}
 80019ba:	4c04      	ldr	r4, [pc, #16]	; (80019cc <vRST_00H+0x14>)
 80019bc:	4621      	mov	r1, r4
 80019be:	1ea0      	subs	r0, r4, #2
 80019c0:	f001 fb60 	bl	8003084 <vGBFunctionPUSH>
 80019c4:	3c0a      	subs	r4, #10
 80019c6:	2300      	movs	r3, #0
 80019c8:	8163      	strh	r3, [r4, #10]
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	2400166e 	.word	0x2400166e

080019d0 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <vCALL_a16+0x30>)
 80019d2:	b538      	push	{r3, r4, r5, lr}
 80019d4:	460c      	mov	r4, r1
 80019d6:	1e88      	subs	r0, r1, #2
 80019d8:	f001 fb54 	bl	8003084 <vGBFunctionPUSH>
 80019dc:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019e0:	3802      	subs	r0, #2
 80019e2:	b280      	uxth	r0, r0
 80019e4:	f001 fe0c 	bl	8003600 <ucGBMemoryRead>
 80019e8:	8963      	ldrh	r3, [r4, #10]
 80019ea:	4605      	mov	r5, r0
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	b280      	uxth	r0, r0
 80019f0:	f001 fe06 	bl	8003600 <ucGBMemoryRead>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4628      	mov	r0, r5
 80019f8:	f001 f8c2 	bl	8002b80 <concat_16bit_bigEndian>
 80019fc:	8160      	strh	r0, [r4, #10]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	2400166e 	.word	0x2400166e

08001a04 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001a04:	b510      	push	{r4, lr}
 8001a06:	4c04      	ldr	r4, [pc, #16]	; (8001a18 <vRST_08H+0x14>)
 8001a08:	4621      	mov	r1, r4
 8001a0a:	1ea0      	subs	r0, r4, #2
 8001a0c:	f001 fb3a 	bl	8003084 <vGBFunctionPUSH>
 8001a10:	2308      	movs	r3, #8
 8001a12:	8023      	strh	r3, [r4, #0]
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	2400166e 	.word	0x2400166e

08001a1c <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a1c:	4901      	ldr	r1, [pc, #4]	; (8001a24 <vPUSH_DE+0x8>)
 8001a1e:	1d08      	adds	r0, r1, #4
 8001a20:	f001 bb30 	b.w	8003084 <vGBFunctionPUSH>
 8001a24:	24001668 	.word	0x24001668

08001a28 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4c04      	ldr	r4, [pc, #16]	; (8001a3c <vRST_10H+0x14>)
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	1ea0      	subs	r0, r4, #2
 8001a30:	f001 fb28 	bl	8003084 <vGBFunctionPUSH>
 8001a34:	2310      	movs	r3, #16
 8001a36:	8023      	strh	r3, [r4, #0]
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2400166e 	.word	0x2400166e

08001a40 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4c04      	ldr	r4, [pc, #16]	; (8001a54 <vRST_18H+0x14>)
 8001a44:	4621      	mov	r1, r4
 8001a46:	1ea0      	subs	r0, r4, #2
 8001a48:	f001 fb1c 	bl	8003084 <vGBFunctionPUSH>
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	8023      	strh	r3, [r4, #0]
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	bf00      	nop
 8001a54:	2400166e 	.word	0x2400166e

08001a58 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a58:	4901      	ldr	r1, [pc, #4]	; (8001a60 <vPUSH_HL+0x8>)
 8001a5a:	1c88      	adds	r0, r1, #2
 8001a5c:	f001 bb12 	b.w	8003084 <vGBFunctionPUSH>
 8001a60:	2400166a 	.word	0x2400166a

08001a64 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4c04      	ldr	r4, [pc, #16]	; (8001a78 <vRST20H+0x14>)
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1ea0      	subs	r0, r4, #2
 8001a6c:	f001 fb0a 	bl	8003084 <vGBFunctionPUSH>
 8001a70:	2320      	movs	r3, #32
 8001a72:	8023      	strh	r3, [r4, #0]
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	2400166e 	.word	0x2400166e

08001a7c <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	4c04      	ldr	r4, [pc, #16]	; (8001a90 <vRST_28H+0x14>)
 8001a80:	4621      	mov	r1, r4
 8001a82:	1ea0      	subs	r0, r4, #2
 8001a84:	f001 fafe 	bl	8003084 <vGBFunctionPUSH>
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	8023      	strh	r3, [r4, #0]
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	2400166e 	.word	0x2400166e

08001a94 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a94:	4902      	ldr	r1, [pc, #8]	; (8001aa0 <vPUSH_AF+0xc>)
 8001a96:	f101 0008 	add.w	r0, r1, #8
 8001a9a:	f001 baf3 	b.w	8003084 <vGBFunctionPUSH>
 8001a9e:	bf00      	nop
 8001aa0:	24001664 	.word	0x24001664

08001aa4 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4c04      	ldr	r4, [pc, #16]	; (8001ab8 <vRST_30H+0x14>)
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1ea0      	subs	r0, r4, #2
 8001aac:	f001 faea 	bl	8003084 <vGBFunctionPUSH>
 8001ab0:	2330      	movs	r3, #48	; 0x30
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2400166e 	.word	0x2400166e

08001abc <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4c04      	ldr	r4, [pc, #16]	; (8001ad0 <vRST_38H+0x14>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1ea0      	subs	r0, r4, #2
 8001ac4:	f001 fade 	bl	8003084 <vGBFunctionPUSH>
 8001ac8:	2338      	movs	r3, #56	; 0x38
 8001aca:	8023      	strh	r3, [r4, #0]
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400166e 	.word	0x2400166e

08001ad4 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4d0d      	ldr	r5, [pc, #52]	; (8001b0c <vJP_Z_a16+0x38>)
 8001ad8:	8968      	ldrh	r0, [r5, #10]
 8001ada:	462c      	mov	r4, r5
 8001adc:	3802      	subs	r0, #2
 8001ade:	b280      	uxth	r0, r0
 8001ae0:	f001 fd8e 	bl	8003600 <ucGBMemoryRead>
 8001ae4:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ae8:	4606      	mov	r6, r0
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	b280      	uxth	r0, r0
 8001aee:	f001 fd87 	bl	8003600 <ucGBMemoryRead>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4630      	mov	r0, r6
 8001af6:	f001 f843 	bl	8002b80 <concat_16bit_bigEndian>
 8001afa:	4629      	mov	r1, r5
 8001afc:	4602      	mov	r2, r0
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 faf0 	bl	80030e4 <vGBFunctionJP_Z_a16>
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vJP_Z_a16+0x3c>)
 8001b06:	7018      	strb	r0, [r3, #0]
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24001664 	.word	0x24001664
 8001b10:	24001094 	.word	0x24001094

08001b14 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <vCALL_Z_a16+0x14>)
 8001b16:	b508      	push	{r3, lr}
 8001b18:	f1a2 0108 	sub.w	r1, r2, #8
 8001b1c:	1c90      	adds	r0, r2, #2
 8001b1e:	f001 fae9 	bl	80030f4 <vGBFunctionCALL_Z_a16>
 8001b22:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <vCALL_Z_a16+0x18>)
 8001b24:	7018      	strb	r0, [r3, #0]
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	2400166c 	.word	0x2400166c
 8001b2c:	24001094 	.word	0x24001094

08001b30 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d0d      	ldr	r5, [pc, #52]	; (8001b68 <vJP_NC_a16+0x38>)
 8001b34:	8968      	ldrh	r0, [r5, #10]
 8001b36:	462c      	mov	r4, r5
 8001b38:	3802      	subs	r0, #2
 8001b3a:	b280      	uxth	r0, r0
 8001b3c:	f001 fd60 	bl	8003600 <ucGBMemoryRead>
 8001b40:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b44:	4606      	mov	r6, r0
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	b280      	uxth	r0, r0
 8001b4a:	f001 fd59 	bl	8003600 <ucGBMemoryRead>
 8001b4e:	4601      	mov	r1, r0
 8001b50:	4630      	mov	r0, r6
 8001b52:	f001 f815 	bl	8002b80 <concat_16bit_bigEndian>
 8001b56:	4629      	mov	r1, r5
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 fae6 	bl	800312c <vGBFunctionJP_NC_a16>
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vJP_NC_a16+0x3c>)
 8001b62:	7018      	strb	r0, [r3, #0]
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	bf00      	nop
 8001b68:	24001664 	.word	0x24001664
 8001b6c:	24001094 	.word	0x24001094

08001b70 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <vCALL_NC_a16+0x14>)
 8001b72:	b508      	push	{r3, lr}
 8001b74:	f1a2 0108 	sub.w	r1, r2, #8
 8001b78:	1c90      	adds	r0, r2, #2
 8001b7a:	f001 fadf 	bl	800313c <vGBFunctionCALL_NC_a16>
 8001b7e:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <vCALL_NC_a16+0x18>)
 8001b80:	7018      	strb	r0, [r3, #0]
 8001b82:	bd08      	pop	{r3, pc}
 8001b84:	2400166c 	.word	0x2400166c
 8001b88:	24001094 	.word	0x24001094

08001b8c <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	4d0d      	ldr	r5, [pc, #52]	; (8001bc4 <vJP_C_a16+0x38>)
 8001b90:	8968      	ldrh	r0, [r5, #10]
 8001b92:	462c      	mov	r4, r5
 8001b94:	3802      	subs	r0, #2
 8001b96:	b280      	uxth	r0, r0
 8001b98:	f001 fd32 	bl	8003600 <ucGBMemoryRead>
 8001b9c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	b280      	uxth	r0, r0
 8001ba6:	f001 fd2b 	bl	8003600 <ucGBMemoryRead>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4630      	mov	r0, r6
 8001bae:	f000 ffe7 	bl	8002b80 <concat_16bit_bigEndian>
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 fadc 	bl	8003174 <vGBFunctionJP_C_a16>
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vJP_C_a16+0x3c>)
 8001bbe:	7018      	strb	r0, [r3, #0]
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24001664 	.word	0x24001664
 8001bc8:	24001094 	.word	0x24001094

08001bcc <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <vCALL_C_a16+0x14>)
 8001bce:	b508      	push	{r3, lr}
 8001bd0:	f1a2 0108 	sub.w	r1, r2, #8
 8001bd4:	1c90      	adds	r0, r2, #2
 8001bd6:	f001 fad5 	bl	8003184 <vGBFunctionCALL_C_a16>
 8001bda:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <vCALL_C_a16+0x18>)
 8001bdc:	7018      	strb	r0, [r3, #0]
 8001bde:	bd08      	pop	{r3, pc}
 8001be0:	2400166c 	.word	0x2400166c
 8001be4:	24001094 	.word	0x24001094

08001be8 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4c07      	ldr	r4, [pc, #28]	; (8001c08 <vADDs_SP_r8+0x20>)
 8001bec:	8960      	ldrh	r0, [r4, #10]
 8001bee:	3801      	subs	r0, #1
 8001bf0:	b280      	uxth	r0, r0
 8001bf2:	f001 fd05 	bl	8003600 <ucGBMemoryRead>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f104 0008 	add.w	r0, r4, #8
 8001bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c02:	f001 badb 	b.w	80031bc <vGBFunctionADD_SP_r8>
 8001c06:	bf00      	nop
 8001c08:	24001664 	.word	0x24001664

08001c0c <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4c07      	ldr	r4, [pc, #28]	; (8001c2c <vLDs_HL_SP_r8+0x20>)
 8001c10:	8960      	ldrh	r0, [r4, #10]
 8001c12:	3801      	subs	r0, #1
 8001c14:	b280      	uxth	r0, r0
 8001c16:	f001 fcf3 	bl	8003600 <ucGBMemoryRead>
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f104 0108 	add.w	r1, r4, #8
 8001c22:	1da0      	adds	r0, r4, #6
 8001c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c28:	f001 baf0 	b.w	800320c <vGBFunctionLD_HL_SP_r8>
 8001c2c:	24001664 	.word	0x24001664

08001c30 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4c03      	ldr	r4, [pc, #12]	; (8001c40 <vRLC_B+0x10>)
 8001c34:	4621      	mov	r1, r4
 8001c36:	78e0      	ldrb	r0, [r4, #3]
 8001c38:	f001 fb10 	bl	800325c <ucGBFunctionRLC>
 8001c3c:	70e0      	strb	r0, [r4, #3]
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	24001664 	.word	0x24001664

08001c44 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c44:	b510      	push	{r4, lr}
 8001c46:	4c03      	ldr	r4, [pc, #12]	; (8001c54 <vRLC_C+0x10>)
 8001c48:	4621      	mov	r1, r4
 8001c4a:	78a0      	ldrb	r0, [r4, #2]
 8001c4c:	f001 fb06 	bl	800325c <ucGBFunctionRLC>
 8001c50:	70a0      	strb	r0, [r4, #2]
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	24001664 	.word	0x24001664

08001c58 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	4c03      	ldr	r4, [pc, #12]	; (8001c68 <vRLC_D+0x10>)
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	7960      	ldrb	r0, [r4, #5]
 8001c60:	f001 fafc 	bl	800325c <ucGBFunctionRLC>
 8001c64:	7160      	strb	r0, [r4, #5]
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	24001664 	.word	0x24001664

08001c6c <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	4c03      	ldr	r4, [pc, #12]	; (8001c7c <vRLC_E+0x10>)
 8001c70:	4621      	mov	r1, r4
 8001c72:	7920      	ldrb	r0, [r4, #4]
 8001c74:	f001 faf2 	bl	800325c <ucGBFunctionRLC>
 8001c78:	7120      	strb	r0, [r4, #4]
 8001c7a:	bd10      	pop	{r4, pc}
 8001c7c:	24001664 	.word	0x24001664

08001c80 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c80:	b510      	push	{r4, lr}
 8001c82:	4c03      	ldr	r4, [pc, #12]	; (8001c90 <vRLC_H+0x10>)
 8001c84:	4621      	mov	r1, r4
 8001c86:	79e0      	ldrb	r0, [r4, #7]
 8001c88:	f001 fae8 	bl	800325c <ucGBFunctionRLC>
 8001c8c:	71e0      	strb	r0, [r4, #7]
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	24001664 	.word	0x24001664

08001c94 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4c03      	ldr	r4, [pc, #12]	; (8001ca4 <vRLC_L+0x10>)
 8001c98:	4621      	mov	r1, r4
 8001c9a:	79a0      	ldrb	r0, [r4, #6]
 8001c9c:	f001 fade 	bl	800325c <ucGBFunctionRLC>
 8001ca0:	71a0      	strb	r0, [r4, #6]
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	24001664 	.word	0x24001664

08001ca8 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4d07      	ldr	r5, [pc, #28]	; (8001cc8 <vRLC_HL+0x20>)
 8001cac:	88ec      	ldrh	r4, [r5, #6]
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f001 fca6 	bl	8003600 <ucGBMemoryRead>
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f001 fad1 	bl	800325c <ucGBFunctionRLC>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cc2:	f001 bcb1 	b.w	8003628 <vGBMemoryWrite>
 8001cc6:	bf00      	nop
 8001cc8:	24001664 	.word	0x24001664

08001ccc <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	4c03      	ldr	r4, [pc, #12]	; (8001cdc <vRLC_A+0x10>)
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	7860      	ldrb	r0, [r4, #1]
 8001cd4:	f001 fac2 	bl	800325c <ucGBFunctionRLC>
 8001cd8:	7060      	strb	r0, [r4, #1]
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	24001664 	.word	0x24001664

08001ce0 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4c03      	ldr	r4, [pc, #12]	; (8001cf0 <vRRC_B+0x10>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	78e0      	ldrb	r0, [r4, #3]
 8001ce8:	f001 fad4 	bl	8003294 <ucGBFunctionRRC>
 8001cec:	70e0      	strb	r0, [r4, #3]
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	24001664 	.word	0x24001664

08001cf4 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4c03      	ldr	r4, [pc, #12]	; (8001d04 <vRRC_C+0x10>)
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	78a0      	ldrb	r0, [r4, #2]
 8001cfc:	f001 faca 	bl	8003294 <ucGBFunctionRRC>
 8001d00:	70a0      	strb	r0, [r4, #2]
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	24001664 	.word	0x24001664

08001d08 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4c03      	ldr	r4, [pc, #12]	; (8001d18 <vRRC_D+0x10>)
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	7960      	ldrb	r0, [r4, #5]
 8001d10:	f001 fac0 	bl	8003294 <ucGBFunctionRRC>
 8001d14:	7160      	strb	r0, [r4, #5]
 8001d16:	bd10      	pop	{r4, pc}
 8001d18:	24001664 	.word	0x24001664

08001d1c <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4c03      	ldr	r4, [pc, #12]	; (8001d2c <vRRC_E+0x10>)
 8001d20:	4621      	mov	r1, r4
 8001d22:	7920      	ldrb	r0, [r4, #4]
 8001d24:	f001 fab6 	bl	8003294 <ucGBFunctionRRC>
 8001d28:	7120      	strb	r0, [r4, #4]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	24001664 	.word	0x24001664

08001d30 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4c03      	ldr	r4, [pc, #12]	; (8001d40 <vRRC_H+0x10>)
 8001d34:	4621      	mov	r1, r4
 8001d36:	79e0      	ldrb	r0, [r4, #7]
 8001d38:	f001 faac 	bl	8003294 <ucGBFunctionRRC>
 8001d3c:	71e0      	strb	r0, [r4, #7]
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	24001664 	.word	0x24001664

08001d44 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4c03      	ldr	r4, [pc, #12]	; (8001d54 <vRRC_L+0x10>)
 8001d48:	4621      	mov	r1, r4
 8001d4a:	79a0      	ldrb	r0, [r4, #6]
 8001d4c:	f001 faa2 	bl	8003294 <ucGBFunctionRRC>
 8001d50:	71a0      	strb	r0, [r4, #6]
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	24001664 	.word	0x24001664

08001d58 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d07      	ldr	r5, [pc, #28]	; (8001d78 <vRRC_HL+0x20>)
 8001d5c:	88ec      	ldrh	r4, [r5, #6]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f001 fc4e 	bl	8003600 <ucGBMemoryRead>
 8001d64:	4629      	mov	r1, r5
 8001d66:	f001 fa95 	bl	8003294 <ucGBFunctionRRC>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d72:	f001 bc59 	b.w	8003628 <vGBMemoryWrite>
 8001d76:	bf00      	nop
 8001d78:	24001664 	.word	0x24001664

08001d7c <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4c03      	ldr	r4, [pc, #12]	; (8001d8c <vRRC_A+0x10>)
 8001d80:	4621      	mov	r1, r4
 8001d82:	7860      	ldrb	r0, [r4, #1]
 8001d84:	f001 fa86 	bl	8003294 <ucGBFunctionRRC>
 8001d88:	7060      	strb	r0, [r4, #1]
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	24001664 	.word	0x24001664

08001d90 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4c03      	ldr	r4, [pc, #12]	; (8001da0 <vRL_B+0x10>)
 8001d94:	4621      	mov	r1, r4
 8001d96:	78e0      	ldrb	r0, [r4, #3]
 8001d98:	f001 fa98 	bl	80032cc <ucGBFunctionRL>
 8001d9c:	70e0      	strb	r0, [r4, #3]
 8001d9e:	bd10      	pop	{r4, pc}
 8001da0:	24001664 	.word	0x24001664

08001da4 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4c03      	ldr	r4, [pc, #12]	; (8001db4 <vRL_C+0x10>)
 8001da8:	4621      	mov	r1, r4
 8001daa:	78a0      	ldrb	r0, [r4, #2]
 8001dac:	f001 fa8e 	bl	80032cc <ucGBFunctionRL>
 8001db0:	70a0      	strb	r0, [r4, #2]
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	24001664 	.word	0x24001664

08001db8 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4c03      	ldr	r4, [pc, #12]	; (8001dc8 <vRL_D+0x10>)
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	7960      	ldrb	r0, [r4, #5]
 8001dc0:	f001 fa84 	bl	80032cc <ucGBFunctionRL>
 8001dc4:	7160      	strb	r0, [r4, #5]
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	24001664 	.word	0x24001664

08001dcc <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4c03      	ldr	r4, [pc, #12]	; (8001ddc <vRL_E+0x10>)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	7920      	ldrb	r0, [r4, #4]
 8001dd4:	f001 fa7a 	bl	80032cc <ucGBFunctionRL>
 8001dd8:	7120      	strb	r0, [r4, #4]
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	24001664 	.word	0x24001664

08001de0 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4c03      	ldr	r4, [pc, #12]	; (8001df0 <vRL_H+0x10>)
 8001de4:	4621      	mov	r1, r4
 8001de6:	79e0      	ldrb	r0, [r4, #7]
 8001de8:	f001 fa70 	bl	80032cc <ucGBFunctionRL>
 8001dec:	71e0      	strb	r0, [r4, #7]
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	24001664 	.word	0x24001664

08001df4 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4c03      	ldr	r4, [pc, #12]	; (8001e04 <vRL_L+0x10>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	79a0      	ldrb	r0, [r4, #6]
 8001dfc:	f001 fa66 	bl	80032cc <ucGBFunctionRL>
 8001e00:	71a0      	strb	r0, [r4, #6]
 8001e02:	bd10      	pop	{r4, pc}
 8001e04:	24001664 	.word	0x24001664

08001e08 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	; (8001e28 <vRL_HL+0x20>)
 8001e0c:	88ec      	ldrh	r4, [r5, #6]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f001 fbf6 	bl	8003600 <ucGBMemoryRead>
 8001e14:	4629      	mov	r1, r5
 8001e16:	f001 fa59 	bl	80032cc <ucGBFunctionRL>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e22:	f001 bc01 	b.w	8003628 <vGBMemoryWrite>
 8001e26:	bf00      	nop
 8001e28:	24001664 	.word	0x24001664

08001e2c <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4c03      	ldr	r4, [pc, #12]	; (8001e3c <vRL_A+0x10>)
 8001e30:	4621      	mov	r1, r4
 8001e32:	7860      	ldrb	r0, [r4, #1]
 8001e34:	f001 fa4a 	bl	80032cc <ucGBFunctionRL>
 8001e38:	7060      	strb	r0, [r4, #1]
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	24001664 	.word	0x24001664

08001e40 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4c03      	ldr	r4, [pc, #12]	; (8001e50 <vRR_B+0x10>)
 8001e44:	4621      	mov	r1, r4
 8001e46:	78e0      	ldrb	r0, [r4, #3]
 8001e48:	f001 fa5a 	bl	8003300 <ucGBFunctionRR>
 8001e4c:	70e0      	strb	r0, [r4, #3]
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	24001664 	.word	0x24001664

08001e54 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4c03      	ldr	r4, [pc, #12]	; (8001e64 <vRR_C+0x10>)
 8001e58:	4621      	mov	r1, r4
 8001e5a:	78a0      	ldrb	r0, [r4, #2]
 8001e5c:	f001 fa50 	bl	8003300 <ucGBFunctionRR>
 8001e60:	70a0      	strb	r0, [r4, #2]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	24001664 	.word	0x24001664

08001e68 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4c03      	ldr	r4, [pc, #12]	; (8001e78 <vRR_D+0x10>)
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	7960      	ldrb	r0, [r4, #5]
 8001e70:	f001 fa46 	bl	8003300 <ucGBFunctionRR>
 8001e74:	7160      	strb	r0, [r4, #5]
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	24001664 	.word	0x24001664

08001e7c <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4c03      	ldr	r4, [pc, #12]	; (8001e8c <vRR_E+0x10>)
 8001e80:	4621      	mov	r1, r4
 8001e82:	7920      	ldrb	r0, [r4, #4]
 8001e84:	f001 fa3c 	bl	8003300 <ucGBFunctionRR>
 8001e88:	7120      	strb	r0, [r4, #4]
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	24001664 	.word	0x24001664

08001e90 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4c03      	ldr	r4, [pc, #12]	; (8001ea0 <vRR_H+0x10>)
 8001e94:	4621      	mov	r1, r4
 8001e96:	79e0      	ldrb	r0, [r4, #7]
 8001e98:	f001 fa32 	bl	8003300 <ucGBFunctionRR>
 8001e9c:	71e0      	strb	r0, [r4, #7]
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	24001664 	.word	0x24001664

08001ea4 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4c03      	ldr	r4, [pc, #12]	; (8001eb4 <vRR_L+0x10>)
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	79a0      	ldrb	r0, [r4, #6]
 8001eac:	f001 fa28 	bl	8003300 <ucGBFunctionRR>
 8001eb0:	71a0      	strb	r0, [r4, #6]
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	24001664 	.word	0x24001664

08001eb8 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d07      	ldr	r5, [pc, #28]	; (8001ed8 <vRR_HL+0x20>)
 8001ebc:	88ec      	ldrh	r4, [r5, #6]
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f001 fb9e 	bl	8003600 <ucGBMemoryRead>
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f001 fa1b 	bl	8003300 <ucGBFunctionRR>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4620      	mov	r0, r4
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed2:	f001 bba9 	b.w	8003628 <vGBMemoryWrite>
 8001ed6:	bf00      	nop
 8001ed8:	24001664 	.word	0x24001664

08001edc <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4c03      	ldr	r4, [pc, #12]	; (8001eec <vRR_A+0x10>)
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	7860      	ldrb	r0, [r4, #1]
 8001ee4:	f001 fa0c 	bl	8003300 <ucGBFunctionRR>
 8001ee8:	7060      	strb	r0, [r4, #1]
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	24001664 	.word	0x24001664

08001ef0 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4c03      	ldr	r4, [pc, #12]	; (8001f00 <vSLA_B+0x10>)
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	78e0      	ldrb	r0, [r4, #3]
 8001ef8:	f001 fa1e 	bl	8003338 <ucGBFunctionSLA>
 8001efc:	70e0      	strb	r0, [r4, #3]
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	24001664 	.word	0x24001664

08001f04 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4c03      	ldr	r4, [pc, #12]	; (8001f14 <vSLA_C+0x10>)
 8001f08:	4621      	mov	r1, r4
 8001f0a:	78a0      	ldrb	r0, [r4, #2]
 8001f0c:	f001 fa14 	bl	8003338 <ucGBFunctionSLA>
 8001f10:	70a0      	strb	r0, [r4, #2]
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	24001664 	.word	0x24001664

08001f18 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4c03      	ldr	r4, [pc, #12]	; (8001f28 <vSLA_D+0x10>)
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	7960      	ldrb	r0, [r4, #5]
 8001f20:	f001 fa0a 	bl	8003338 <ucGBFunctionSLA>
 8001f24:	7160      	strb	r0, [r4, #5]
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	24001664 	.word	0x24001664

08001f2c <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4c03      	ldr	r4, [pc, #12]	; (8001f3c <vSLA_E+0x10>)
 8001f30:	4621      	mov	r1, r4
 8001f32:	7920      	ldrb	r0, [r4, #4]
 8001f34:	f001 fa00 	bl	8003338 <ucGBFunctionSLA>
 8001f38:	7120      	strb	r0, [r4, #4]
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	24001664 	.word	0x24001664

08001f40 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4c03      	ldr	r4, [pc, #12]	; (8001f50 <vSLA_H+0x10>)
 8001f44:	4621      	mov	r1, r4
 8001f46:	79e0      	ldrb	r0, [r4, #7]
 8001f48:	f001 f9f6 	bl	8003338 <ucGBFunctionSLA>
 8001f4c:	71e0      	strb	r0, [r4, #7]
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	24001664 	.word	0x24001664

08001f54 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4c03      	ldr	r4, [pc, #12]	; (8001f64 <vSLA_L+0x10>)
 8001f58:	4621      	mov	r1, r4
 8001f5a:	79a0      	ldrb	r0, [r4, #6]
 8001f5c:	f001 f9ec 	bl	8003338 <ucGBFunctionSLA>
 8001f60:	71a0      	strb	r0, [r4, #6]
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	24001664 	.word	0x24001664

08001f68 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4d07      	ldr	r5, [pc, #28]	; (8001f88 <vSLA_HL+0x20>)
 8001f6c:	88ec      	ldrh	r4, [r5, #6]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f001 fb46 	bl	8003600 <ucGBMemoryRead>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f001 f9df 	bl	8003338 <ucGBFunctionSLA>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f82:	f001 bb51 	b.w	8003628 <vGBMemoryWrite>
 8001f86:	bf00      	nop
 8001f88:	24001664 	.word	0x24001664

08001f8c <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4c03      	ldr	r4, [pc, #12]	; (8001f9c <vSLA_A+0x10>)
 8001f90:	4621      	mov	r1, r4
 8001f92:	7860      	ldrb	r0, [r4, #1]
 8001f94:	f001 f9d0 	bl	8003338 <ucGBFunctionSLA>
 8001f98:	7060      	strb	r0, [r4, #1]
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	24001664 	.word	0x24001664

08001fa0 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4c03      	ldr	r4, [pc, #12]	; (8001fb0 <vSRA_B+0x10>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	78e0      	ldrb	r0, [r4, #3]
 8001fa8:	f001 f9de 	bl	8003368 <ucGBFunctionSRA>
 8001fac:	70e0      	strb	r0, [r4, #3]
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	24001664 	.word	0x24001664

08001fb4 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4c03      	ldr	r4, [pc, #12]	; (8001fc4 <vSRA_C+0x10>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	78a0      	ldrb	r0, [r4, #2]
 8001fbc:	f001 f9d4 	bl	8003368 <ucGBFunctionSRA>
 8001fc0:	70a0      	strb	r0, [r4, #2]
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	24001664 	.word	0x24001664

08001fc8 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4c03      	ldr	r4, [pc, #12]	; (8001fd8 <vSRA_D+0x10>)
 8001fcc:	4621      	mov	r1, r4
 8001fce:	7960      	ldrb	r0, [r4, #5]
 8001fd0:	f001 f9ca 	bl	8003368 <ucGBFunctionSRA>
 8001fd4:	7160      	strb	r0, [r4, #5]
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	24001664 	.word	0x24001664

08001fdc <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4c03      	ldr	r4, [pc, #12]	; (8001fec <vSRA_E+0x10>)
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	7920      	ldrb	r0, [r4, #4]
 8001fe4:	f001 f9c0 	bl	8003368 <ucGBFunctionSRA>
 8001fe8:	7120      	strb	r0, [r4, #4]
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	24001664 	.word	0x24001664

08001ff0 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4c03      	ldr	r4, [pc, #12]	; (8002000 <vSRA_H+0x10>)
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	79e0      	ldrb	r0, [r4, #7]
 8001ff8:	f001 f9b6 	bl	8003368 <ucGBFunctionSRA>
 8001ffc:	71e0      	strb	r0, [r4, #7]
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	24001664 	.word	0x24001664

08002004 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8002004:	b510      	push	{r4, lr}
 8002006:	4c03      	ldr	r4, [pc, #12]	; (8002014 <vSRA_L+0x10>)
 8002008:	4621      	mov	r1, r4
 800200a:	79a0      	ldrb	r0, [r4, #6]
 800200c:	f001 f9ac 	bl	8003368 <ucGBFunctionSRA>
 8002010:	71a0      	strb	r0, [r4, #6]
 8002012:	bd10      	pop	{r4, pc}
 8002014:	24001664 	.word	0x24001664

08002018 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <vSRA_HL+0x20>)
 800201c:	88ec      	ldrh	r4, [r5, #6]
 800201e:	4620      	mov	r0, r4
 8002020:	f001 faee 	bl	8003600 <ucGBMemoryRead>
 8002024:	4629      	mov	r1, r5
 8002026:	f001 f99f 	bl	8003368 <ucGBFunctionSRA>
 800202a:	4601      	mov	r1, r0
 800202c:	4620      	mov	r0, r4
 800202e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002032:	f001 baf9 	b.w	8003628 <vGBMemoryWrite>
 8002036:	bf00      	nop
 8002038:	24001664 	.word	0x24001664

0800203c <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 800203c:	b510      	push	{r4, lr}
 800203e:	4c03      	ldr	r4, [pc, #12]	; (800204c <vSRA_A+0x10>)
 8002040:	4621      	mov	r1, r4
 8002042:	7860      	ldrb	r0, [r4, #1]
 8002044:	f001 f990 	bl	8003368 <ucGBFunctionSRA>
 8002048:	7060      	strb	r0, [r4, #1]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	24001664 	.word	0x24001664

08002050 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002050:	b510      	push	{r4, lr}
 8002052:	4c03      	ldr	r4, [pc, #12]	; (8002060 <vSWAP_B+0x10>)
 8002054:	4621      	mov	r1, r4
 8002056:	78e0      	ldrb	r0, [r4, #3]
 8002058:	f001 f9a0 	bl	800339c <ucGBFunctionSWAP>
 800205c:	70e0      	strb	r0, [r4, #3]
 800205e:	bd10      	pop	{r4, pc}
 8002060:	24001664 	.word	0x24001664

08002064 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002064:	b510      	push	{r4, lr}
 8002066:	4c03      	ldr	r4, [pc, #12]	; (8002074 <vSWAP_C+0x10>)
 8002068:	4621      	mov	r1, r4
 800206a:	78a0      	ldrb	r0, [r4, #2]
 800206c:	f001 f996 	bl	800339c <ucGBFunctionSWAP>
 8002070:	70a0      	strb	r0, [r4, #2]
 8002072:	bd10      	pop	{r4, pc}
 8002074:	24001664 	.word	0x24001664

08002078 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002078:	b510      	push	{r4, lr}
 800207a:	4c03      	ldr	r4, [pc, #12]	; (8002088 <vSWAP_D+0x10>)
 800207c:	4621      	mov	r1, r4
 800207e:	7960      	ldrb	r0, [r4, #5]
 8002080:	f001 f98c 	bl	800339c <ucGBFunctionSWAP>
 8002084:	7160      	strb	r0, [r4, #5]
 8002086:	bd10      	pop	{r4, pc}
 8002088:	24001664 	.word	0x24001664

0800208c <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 800208c:	b510      	push	{r4, lr}
 800208e:	4c03      	ldr	r4, [pc, #12]	; (800209c <vSWAP_E+0x10>)
 8002090:	4621      	mov	r1, r4
 8002092:	7920      	ldrb	r0, [r4, #4]
 8002094:	f001 f982 	bl	800339c <ucGBFunctionSWAP>
 8002098:	7120      	strb	r0, [r4, #4]
 800209a:	bd10      	pop	{r4, pc}
 800209c:	24001664 	.word	0x24001664

080020a0 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4c03      	ldr	r4, [pc, #12]	; (80020b0 <vSWAP_H+0x10>)
 80020a4:	4621      	mov	r1, r4
 80020a6:	79e0      	ldrb	r0, [r4, #7]
 80020a8:	f001 f978 	bl	800339c <ucGBFunctionSWAP>
 80020ac:	71e0      	strb	r0, [r4, #7]
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	24001664 	.word	0x24001664

080020b4 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4c03      	ldr	r4, [pc, #12]	; (80020c4 <vSWAP_L+0x10>)
 80020b8:	4621      	mov	r1, r4
 80020ba:	79a0      	ldrb	r0, [r4, #6]
 80020bc:	f001 f96e 	bl	800339c <ucGBFunctionSWAP>
 80020c0:	71a0      	strb	r0, [r4, #6]
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	24001664 	.word	0x24001664

080020c8 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4d07      	ldr	r5, [pc, #28]	; (80020e8 <vSWAP_HL+0x20>)
 80020cc:	88ec      	ldrh	r4, [r5, #6]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f001 fa96 	bl	8003600 <ucGBMemoryRead>
 80020d4:	4629      	mov	r1, r5
 80020d6:	f001 f961 	bl	800339c <ucGBFunctionSWAP>
 80020da:	4601      	mov	r1, r0
 80020dc:	4620      	mov	r0, r4
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f001 baa1 	b.w	8003628 <vGBMemoryWrite>
 80020e6:	bf00      	nop
 80020e8:	24001664 	.word	0x24001664

080020ec <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4c03      	ldr	r4, [pc, #12]	; (80020fc <vSWAP_A+0x10>)
 80020f0:	4621      	mov	r1, r4
 80020f2:	7860      	ldrb	r0, [r4, #1]
 80020f4:	f001 f952 	bl	800339c <ucGBFunctionSWAP>
 80020f8:	7060      	strb	r0, [r4, #1]
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	24001664 	.word	0x24001664

08002100 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 8002100:	b510      	push	{r4, lr}
 8002102:	4c03      	ldr	r4, [pc, #12]	; (8002110 <vSRL_B+0x10>)
 8002104:	4621      	mov	r1, r4
 8002106:	78e0      	ldrb	r0, [r4, #3]
 8002108:	f001 f95e 	bl	80033c8 <ucGBFunctionSRL>
 800210c:	70e0      	strb	r0, [r4, #3]
 800210e:	bd10      	pop	{r4, pc}
 8002110:	24001664 	.word	0x24001664

08002114 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 8002114:	b510      	push	{r4, lr}
 8002116:	4c03      	ldr	r4, [pc, #12]	; (8002124 <vSRL_C+0x10>)
 8002118:	4621      	mov	r1, r4
 800211a:	78a0      	ldrb	r0, [r4, #2]
 800211c:	f001 f954 	bl	80033c8 <ucGBFunctionSRL>
 8002120:	70a0      	strb	r0, [r4, #2]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	24001664 	.word	0x24001664

08002128 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 8002128:	b510      	push	{r4, lr}
 800212a:	4c03      	ldr	r4, [pc, #12]	; (8002138 <vSRL_D+0x10>)
 800212c:	4621      	mov	r1, r4
 800212e:	7960      	ldrb	r0, [r4, #5]
 8002130:	f001 f94a 	bl	80033c8 <ucGBFunctionSRL>
 8002134:	7160      	strb	r0, [r4, #5]
 8002136:	bd10      	pop	{r4, pc}
 8002138:	24001664 	.word	0x24001664

0800213c <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 800213c:	b510      	push	{r4, lr}
 800213e:	4c03      	ldr	r4, [pc, #12]	; (800214c <vSRL_E+0x10>)
 8002140:	4621      	mov	r1, r4
 8002142:	7920      	ldrb	r0, [r4, #4]
 8002144:	f001 f940 	bl	80033c8 <ucGBFunctionSRL>
 8002148:	7120      	strb	r0, [r4, #4]
 800214a:	bd10      	pop	{r4, pc}
 800214c:	24001664 	.word	0x24001664

08002150 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002150:	b510      	push	{r4, lr}
 8002152:	4c03      	ldr	r4, [pc, #12]	; (8002160 <vSRL_H+0x10>)
 8002154:	4621      	mov	r1, r4
 8002156:	79e0      	ldrb	r0, [r4, #7]
 8002158:	f001 f936 	bl	80033c8 <ucGBFunctionSRL>
 800215c:	71e0      	strb	r0, [r4, #7]
 800215e:	bd10      	pop	{r4, pc}
 8002160:	24001664 	.word	0x24001664

08002164 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002164:	b510      	push	{r4, lr}
 8002166:	4c03      	ldr	r4, [pc, #12]	; (8002174 <vSRL_L+0x10>)
 8002168:	4621      	mov	r1, r4
 800216a:	79a0      	ldrb	r0, [r4, #6]
 800216c:	f001 f92c 	bl	80033c8 <ucGBFunctionSRL>
 8002170:	71a0      	strb	r0, [r4, #6]
 8002172:	bd10      	pop	{r4, pc}
 8002174:	24001664 	.word	0x24001664

08002178 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d07      	ldr	r5, [pc, #28]	; (8002198 <vSRL_HL+0x20>)
 800217c:	88ec      	ldrh	r4, [r5, #6]
 800217e:	4620      	mov	r0, r4
 8002180:	f001 fa3e 	bl	8003600 <ucGBMemoryRead>
 8002184:	4629      	mov	r1, r5
 8002186:	f001 f91f 	bl	80033c8 <ucGBFunctionSRL>
 800218a:	4601      	mov	r1, r0
 800218c:	4620      	mov	r0, r4
 800218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002192:	f001 ba49 	b.w	8003628 <vGBMemoryWrite>
 8002196:	bf00      	nop
 8002198:	24001664 	.word	0x24001664

0800219c <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 800219c:	b510      	push	{r4, lr}
 800219e:	4c03      	ldr	r4, [pc, #12]	; (80021ac <vSRL_A+0x10>)
 80021a0:	4621      	mov	r1, r4
 80021a2:	7860      	ldrb	r0, [r4, #1]
 80021a4:	f001 f910 	bl	80033c8 <ucGBFunctionSRL>
 80021a8:	7060      	strb	r0, [r4, #1]
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	24001664 	.word	0x24001664

080021b0 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <vBIT_0_B+0xc>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	78d0      	ldrb	r0, [r2, #3]
 80021b6:	f001 b91b 	b.w	80033f0 <vGBFunctionBIT>
 80021ba:	bf00      	nop
 80021bc:	24001664 	.word	0x24001664

080021c0 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021c0:	4a02      	ldr	r2, [pc, #8]	; (80021cc <vBIT_0_C+0xc>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	7890      	ldrb	r0, [r2, #2]
 80021c6:	f001 b913 	b.w	80033f0 <vGBFunctionBIT>
 80021ca:	bf00      	nop
 80021cc:	24001664 	.word	0x24001664

080021d0 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021d0:	4a02      	ldr	r2, [pc, #8]	; (80021dc <vBIT_0_D+0xc>)
 80021d2:	2100      	movs	r1, #0
 80021d4:	7950      	ldrb	r0, [r2, #5]
 80021d6:	f001 b90b 	b.w	80033f0 <vGBFunctionBIT>
 80021da:	bf00      	nop
 80021dc:	24001664 	.word	0x24001664

080021e0 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021e0:	4a02      	ldr	r2, [pc, #8]	; (80021ec <vBIT_0_E+0xc>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	7910      	ldrb	r0, [r2, #4]
 80021e6:	f001 b903 	b.w	80033f0 <vGBFunctionBIT>
 80021ea:	bf00      	nop
 80021ec:	24001664 	.word	0x24001664

080021f0 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021f0:	4a02      	ldr	r2, [pc, #8]	; (80021fc <vBIT_0_H+0xc>)
 80021f2:	2100      	movs	r1, #0
 80021f4:	79d0      	ldrb	r0, [r2, #7]
 80021f6:	f001 b8fb 	b.w	80033f0 <vGBFunctionBIT>
 80021fa:	bf00      	nop
 80021fc:	24001664 	.word	0x24001664

08002200 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <vBIT_0_L+0xc>)
 8002202:	2100      	movs	r1, #0
 8002204:	7990      	ldrb	r0, [r2, #6]
 8002206:	f001 b8f3 	b.w	80033f0 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	24001664 	.word	0x24001664

08002210 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 8002210:	b510      	push	{r4, lr}
 8002212:	4c05      	ldr	r4, [pc, #20]	; (8002228 <vBIT_0_HL+0x18>)
 8002214:	88e0      	ldrh	r0, [r4, #6]
 8002216:	f001 f9f3 	bl	8003600 <ucGBMemoryRead>
 800221a:	4622      	mov	r2, r4
 800221c:	2100      	movs	r1, #0
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002222:	f001 b8e5 	b.w	80033f0 <vGBFunctionBIT>
 8002226:	bf00      	nop
 8002228:	24001664 	.word	0x24001664

0800222c <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <vBIT_0_A+0xc>)
 800222e:	2100      	movs	r1, #0
 8002230:	7850      	ldrb	r0, [r2, #1]
 8002232:	f001 b8dd 	b.w	80033f0 <vGBFunctionBIT>
 8002236:	bf00      	nop
 8002238:	24001664 	.word	0x24001664

0800223c <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <vBIT_1_B+0xc>)
 800223e:	2101      	movs	r1, #1
 8002240:	78d0      	ldrb	r0, [r2, #3]
 8002242:	f001 b8d5 	b.w	80033f0 <vGBFunctionBIT>
 8002246:	bf00      	nop
 8002248:	24001664 	.word	0x24001664

0800224c <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <vBIT_1_C+0xc>)
 800224e:	2101      	movs	r1, #1
 8002250:	7890      	ldrb	r0, [r2, #2]
 8002252:	f001 b8cd 	b.w	80033f0 <vGBFunctionBIT>
 8002256:	bf00      	nop
 8002258:	24001664 	.word	0x24001664

0800225c <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_1_D+0xc>)
 800225e:	2101      	movs	r1, #1
 8002260:	7950      	ldrb	r0, [r2, #5]
 8002262:	f001 b8c5 	b.w	80033f0 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	24001664 	.word	0x24001664

0800226c <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_1_E+0xc>)
 800226e:	2101      	movs	r1, #1
 8002270:	7910      	ldrb	r0, [r2, #4]
 8002272:	f001 b8bd 	b.w	80033f0 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	24001664 	.word	0x24001664

0800227c <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_1_H+0xc>)
 800227e:	2101      	movs	r1, #1
 8002280:	79d0      	ldrb	r0, [r2, #7]
 8002282:	f001 b8b5 	b.w	80033f0 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	24001664 	.word	0x24001664

0800228c <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <vBIT_1_L+0xc>)
 800228e:	2101      	movs	r1, #1
 8002290:	7990      	ldrb	r0, [r2, #6]
 8002292:	f001 b8ad 	b.w	80033f0 <vGBFunctionBIT>
 8002296:	bf00      	nop
 8002298:	24001664 	.word	0x24001664

0800229c <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 800229c:	b510      	push	{r4, lr}
 800229e:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <vBIT_1_HL+0x18>)
 80022a0:	88e0      	ldrh	r0, [r4, #6]
 80022a2:	f001 f9ad 	bl	8003600 <ucGBMemoryRead>
 80022a6:	4622      	mov	r2, r4
 80022a8:	2101      	movs	r1, #1
 80022aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ae:	f001 b89f 	b.w	80033f0 <vGBFunctionBIT>
 80022b2:	bf00      	nop
 80022b4:	24001664 	.word	0x24001664

080022b8 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 80022b8:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <vBIT_1_A+0xc>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	7850      	ldrb	r0, [r2, #1]
 80022be:	f001 b897 	b.w	80033f0 <vGBFunctionBIT>
 80022c2:	bf00      	nop
 80022c4:	24001664 	.word	0x24001664

080022c8 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <vBIT_2_B+0xc>)
 80022ca:	2102      	movs	r1, #2
 80022cc:	78d0      	ldrb	r0, [r2, #3]
 80022ce:	f001 b88f 	b.w	80033f0 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	24001664 	.word	0x24001664

080022d8 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_2_C+0xc>)
 80022da:	2102      	movs	r1, #2
 80022dc:	7890      	ldrb	r0, [r2, #2]
 80022de:	f001 b887 	b.w	80033f0 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	24001664 	.word	0x24001664

080022e8 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_2_D+0xc>)
 80022ea:	2102      	movs	r1, #2
 80022ec:	7950      	ldrb	r0, [r2, #5]
 80022ee:	f001 b87f 	b.w	80033f0 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	24001664 	.word	0x24001664

080022f8 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_2_E+0xc>)
 80022fa:	2102      	movs	r1, #2
 80022fc:	7910      	ldrb	r0, [r2, #4]
 80022fe:	f001 b877 	b.w	80033f0 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	24001664 	.word	0x24001664

08002308 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_2_H+0xc>)
 800230a:	2102      	movs	r1, #2
 800230c:	79d0      	ldrb	r0, [r2, #7]
 800230e:	f001 b86f 	b.w	80033f0 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	24001664 	.word	0x24001664

08002318 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <vBIT_2_L+0xc>)
 800231a:	2102      	movs	r1, #2
 800231c:	7990      	ldrb	r0, [r2, #6]
 800231e:	f001 b867 	b.w	80033f0 <vGBFunctionBIT>
 8002322:	bf00      	nop
 8002324:	24001664 	.word	0x24001664

08002328 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002328:	b510      	push	{r4, lr}
 800232a:	4c05      	ldr	r4, [pc, #20]	; (8002340 <vBIT_2_HL+0x18>)
 800232c:	88e0      	ldrh	r0, [r4, #6]
 800232e:	f001 f967 	bl	8003600 <ucGBMemoryRead>
 8002332:	4622      	mov	r2, r4
 8002334:	2102      	movs	r1, #2
 8002336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233a:	f001 b859 	b.w	80033f0 <vGBFunctionBIT>
 800233e:	bf00      	nop
 8002340:	24001664 	.word	0x24001664

08002344 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <vBIT_2_A+0xc>)
 8002346:	2102      	movs	r1, #2
 8002348:	7850      	ldrb	r0, [r2, #1]
 800234a:	f001 b851 	b.w	80033f0 <vGBFunctionBIT>
 800234e:	bf00      	nop
 8002350:	24001664 	.word	0x24001664

08002354 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <vBIT_3_B+0xc>)
 8002356:	2103      	movs	r1, #3
 8002358:	78d0      	ldrb	r0, [r2, #3]
 800235a:	f001 b849 	b.w	80033f0 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	24001664 	.word	0x24001664

08002364 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_3_C+0xc>)
 8002366:	2103      	movs	r1, #3
 8002368:	7890      	ldrb	r0, [r2, #2]
 800236a:	f001 b841 	b.w	80033f0 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	24001664 	.word	0x24001664

08002374 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_3_D+0xc>)
 8002376:	2103      	movs	r1, #3
 8002378:	7950      	ldrb	r0, [r2, #5]
 800237a:	f001 b839 	b.w	80033f0 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	24001664 	.word	0x24001664

08002384 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_3_E+0xc>)
 8002386:	2103      	movs	r1, #3
 8002388:	7910      	ldrb	r0, [r2, #4]
 800238a:	f001 b831 	b.w	80033f0 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	24001664 	.word	0x24001664

08002394 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_3_H+0xc>)
 8002396:	2103      	movs	r1, #3
 8002398:	79d0      	ldrb	r0, [r2, #7]
 800239a:	f001 b829 	b.w	80033f0 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	24001664 	.word	0x24001664

080023a4 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <vBIT_3_L+0xc>)
 80023a6:	2103      	movs	r1, #3
 80023a8:	7990      	ldrb	r0, [r2, #6]
 80023aa:	f001 b821 	b.w	80033f0 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	24001664 	.word	0x24001664

080023b4 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4c05      	ldr	r4, [pc, #20]	; (80023cc <vBIT_3_HL+0x18>)
 80023b8:	88e0      	ldrh	r0, [r4, #6]
 80023ba:	f001 f921 	bl	8003600 <ucGBMemoryRead>
 80023be:	4622      	mov	r2, r4
 80023c0:	2103      	movs	r1, #3
 80023c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c6:	f001 b813 	b.w	80033f0 <vGBFunctionBIT>
 80023ca:	bf00      	nop
 80023cc:	24001664 	.word	0x24001664

080023d0 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <vBIT_3_A+0xc>)
 80023d2:	2103      	movs	r1, #3
 80023d4:	7850      	ldrb	r0, [r2, #1]
 80023d6:	f001 b80b 	b.w	80033f0 <vGBFunctionBIT>
 80023da:	bf00      	nop
 80023dc:	24001664 	.word	0x24001664

080023e0 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <vBIT_4_B+0xc>)
 80023e2:	2104      	movs	r1, #4
 80023e4:	78d0      	ldrb	r0, [r2, #3]
 80023e6:	f001 b803 	b.w	80033f0 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	24001664 	.word	0x24001664

080023f0 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_4_C+0xc>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	7890      	ldrb	r0, [r2, #2]
 80023f6:	f000 bffb 	b.w	80033f0 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	24001664 	.word	0x24001664

08002400 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_4_D+0xc>)
 8002402:	2104      	movs	r1, #4
 8002404:	7950      	ldrb	r0, [r2, #5]
 8002406:	f000 bff3 	b.w	80033f0 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	24001664 	.word	0x24001664

08002410 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_4_E+0xc>)
 8002412:	2104      	movs	r1, #4
 8002414:	7910      	ldrb	r0, [r2, #4]
 8002416:	f000 bfeb 	b.w	80033f0 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	24001664 	.word	0x24001664

08002420 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_4_H+0xc>)
 8002422:	2104      	movs	r1, #4
 8002424:	79d0      	ldrb	r0, [r2, #7]
 8002426:	f000 bfe3 	b.w	80033f0 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	24001664 	.word	0x24001664

08002430 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <vBIT_4_L+0xc>)
 8002432:	2104      	movs	r1, #4
 8002434:	7990      	ldrb	r0, [r2, #6]
 8002436:	f000 bfdb 	b.w	80033f0 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	24001664 	.word	0x24001664

08002440 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002440:	b510      	push	{r4, lr}
 8002442:	4c05      	ldr	r4, [pc, #20]	; (8002458 <vBIT_4_HL+0x18>)
 8002444:	88e0      	ldrh	r0, [r4, #6]
 8002446:	f001 f8db 	bl	8003600 <ucGBMemoryRead>
 800244a:	4622      	mov	r2, r4
 800244c:	2104      	movs	r1, #4
 800244e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002452:	f000 bfcd 	b.w	80033f0 <vGBFunctionBIT>
 8002456:	bf00      	nop
 8002458:	24001664 	.word	0x24001664

0800245c <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <vBIT_4_A+0xc>)
 800245e:	2104      	movs	r1, #4
 8002460:	7850      	ldrb	r0, [r2, #1]
 8002462:	f000 bfc5 	b.w	80033f0 <vGBFunctionBIT>
 8002466:	bf00      	nop
 8002468:	24001664 	.word	0x24001664

0800246c <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <vBIT_5_B+0xc>)
 800246e:	2105      	movs	r1, #5
 8002470:	78d0      	ldrb	r0, [r2, #3]
 8002472:	f000 bfbd 	b.w	80033f0 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	24001664 	.word	0x24001664

0800247c <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_5_C+0xc>)
 800247e:	2105      	movs	r1, #5
 8002480:	7890      	ldrb	r0, [r2, #2]
 8002482:	f000 bfb5 	b.w	80033f0 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	24001664 	.word	0x24001664

0800248c <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_5_D+0xc>)
 800248e:	2105      	movs	r1, #5
 8002490:	7950      	ldrb	r0, [r2, #5]
 8002492:	f000 bfad 	b.w	80033f0 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	24001664 	.word	0x24001664

0800249c <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_5_E+0xc>)
 800249e:	2105      	movs	r1, #5
 80024a0:	7910      	ldrb	r0, [r2, #4]
 80024a2:	f000 bfa5 	b.w	80033f0 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	24001664 	.word	0x24001664

080024ac <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_5_H+0xc>)
 80024ae:	2105      	movs	r1, #5
 80024b0:	79d0      	ldrb	r0, [r2, #7]
 80024b2:	f000 bf9d 	b.w	80033f0 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	24001664 	.word	0x24001664

080024bc <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <vBIT_5_L+0xc>)
 80024be:	2105      	movs	r1, #5
 80024c0:	7990      	ldrb	r0, [r2, #6]
 80024c2:	f000 bf95 	b.w	80033f0 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	24001664 	.word	0x24001664

080024cc <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4c05      	ldr	r4, [pc, #20]	; (80024e4 <vBIT_5_HL+0x18>)
 80024d0:	88e0      	ldrh	r0, [r4, #6]
 80024d2:	f001 f895 	bl	8003600 <ucGBMemoryRead>
 80024d6:	4622      	mov	r2, r4
 80024d8:	2105      	movs	r1, #5
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024de:	f000 bf87 	b.w	80033f0 <vGBFunctionBIT>
 80024e2:	bf00      	nop
 80024e4:	24001664 	.word	0x24001664

080024e8 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <vBIT_5_A+0xc>)
 80024ea:	2105      	movs	r1, #5
 80024ec:	7850      	ldrb	r0, [r2, #1]
 80024ee:	f000 bf7f 	b.w	80033f0 <vGBFunctionBIT>
 80024f2:	bf00      	nop
 80024f4:	24001664 	.word	0x24001664

080024f8 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <vBIT_6_B+0xc>)
 80024fa:	2106      	movs	r1, #6
 80024fc:	78d0      	ldrb	r0, [r2, #3]
 80024fe:	f000 bf77 	b.w	80033f0 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	24001664 	.word	0x24001664

08002508 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_6_C+0xc>)
 800250a:	2106      	movs	r1, #6
 800250c:	7890      	ldrb	r0, [r2, #2]
 800250e:	f000 bf6f 	b.w	80033f0 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	24001664 	.word	0x24001664

08002518 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_6_D+0xc>)
 800251a:	2106      	movs	r1, #6
 800251c:	7950      	ldrb	r0, [r2, #5]
 800251e:	f000 bf67 	b.w	80033f0 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	24001664 	.word	0x24001664

08002528 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_6_E+0xc>)
 800252a:	2106      	movs	r1, #6
 800252c:	7910      	ldrb	r0, [r2, #4]
 800252e:	f000 bf5f 	b.w	80033f0 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	24001664 	.word	0x24001664

08002538 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_6_H+0xc>)
 800253a:	2106      	movs	r1, #6
 800253c:	79d0      	ldrb	r0, [r2, #7]
 800253e:	f000 bf57 	b.w	80033f0 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	24001664 	.word	0x24001664

08002548 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002548:	4a02      	ldr	r2, [pc, #8]	; (8002554 <vBIT_6_L+0xc>)
 800254a:	2106      	movs	r1, #6
 800254c:	7990      	ldrb	r0, [r2, #6]
 800254e:	f000 bf4f 	b.w	80033f0 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	24001664 	.word	0x24001664

08002558 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002558:	b510      	push	{r4, lr}
 800255a:	4c05      	ldr	r4, [pc, #20]	; (8002570 <vBIT_6_HL+0x18>)
 800255c:	88e0      	ldrh	r0, [r4, #6]
 800255e:	f001 f84f 	bl	8003600 <ucGBMemoryRead>
 8002562:	4622      	mov	r2, r4
 8002564:	2106      	movs	r1, #6
 8002566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256a:	f000 bf41 	b.w	80033f0 <vGBFunctionBIT>
 800256e:	bf00      	nop
 8002570:	24001664 	.word	0x24001664

08002574 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <vBIT_6_A+0xc>)
 8002576:	2106      	movs	r1, #6
 8002578:	7850      	ldrb	r0, [r2, #1]
 800257a:	f000 bf39 	b.w	80033f0 <vGBFunctionBIT>
 800257e:	bf00      	nop
 8002580:	24001664 	.word	0x24001664

08002584 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <vBIT_7_B+0xc>)
 8002586:	2107      	movs	r1, #7
 8002588:	78d0      	ldrb	r0, [r2, #3]
 800258a:	f000 bf31 	b.w	80033f0 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	24001664 	.word	0x24001664

08002594 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_7_C+0xc>)
 8002596:	2107      	movs	r1, #7
 8002598:	7890      	ldrb	r0, [r2, #2]
 800259a:	f000 bf29 	b.w	80033f0 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	24001664 	.word	0x24001664

080025a4 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_7_D+0xc>)
 80025a6:	2107      	movs	r1, #7
 80025a8:	7950      	ldrb	r0, [r2, #5]
 80025aa:	f000 bf21 	b.w	80033f0 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	24001664 	.word	0x24001664

080025b4 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_7_E+0xc>)
 80025b6:	2107      	movs	r1, #7
 80025b8:	7910      	ldrb	r0, [r2, #4]
 80025ba:	f000 bf19 	b.w	80033f0 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	24001664 	.word	0x24001664

080025c4 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_7_H+0xc>)
 80025c6:	2107      	movs	r1, #7
 80025c8:	79d0      	ldrb	r0, [r2, #7]
 80025ca:	f000 bf11 	b.w	80033f0 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	24001664 	.word	0x24001664

080025d4 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025d4:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <vBIT_7_L+0xc>)
 80025d6:	2107      	movs	r1, #7
 80025d8:	7990      	ldrb	r0, [r2, #6]
 80025da:	f000 bf09 	b.w	80033f0 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	24001664 	.word	0x24001664

080025e4 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4c05      	ldr	r4, [pc, #20]	; (80025fc <vBIT_7_HL+0x18>)
 80025e8:	88e0      	ldrh	r0, [r4, #6]
 80025ea:	f001 f809 	bl	8003600 <ucGBMemoryRead>
 80025ee:	4622      	mov	r2, r4
 80025f0:	2107      	movs	r1, #7
 80025f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f6:	f000 befb 	b.w	80033f0 <vGBFunctionBIT>
 80025fa:	bf00      	nop
 80025fc:	24001664 	.word	0x24001664

08002600 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 8002600:	4a02      	ldr	r2, [pc, #8]	; (800260c <vBIT_7_A+0xc>)
 8002602:	2107      	movs	r1, #7
 8002604:	7850      	ldrb	r0, [r2, #1]
 8002606:	f000 bef3 	b.w	80033f0 <vGBFunctionBIT>
 800260a:	bf00      	nop
 800260c:	24001664 	.word	0x24001664

08002610 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <vRES_0_HL+0x1c>)
 8002612:	2100      	movs	r1, #0
 8002614:	b510      	push	{r4, lr}
 8002616:	88dc      	ldrh	r4, [r3, #6]
 8002618:	4620      	mov	r0, r4
 800261a:	f000 ff01 	bl	8003420 <ucGBFunctionRESHL>
 800261e:	4601      	mov	r1, r0
 8002620:	4620      	mov	r0, r4
 8002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002626:	f000 bfff 	b.w	8003628 <vGBMemoryWrite>
 800262a:	bf00      	nop
 800262c:	24001664 	.word	0x24001664

08002630 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <vRES_1_HL+0x1c>)
 8002632:	2101      	movs	r1, #1
 8002634:	b510      	push	{r4, lr}
 8002636:	88dc      	ldrh	r4, [r3, #6]
 8002638:	4620      	mov	r0, r4
 800263a:	f000 fef1 	bl	8003420 <ucGBFunctionRESHL>
 800263e:	4601      	mov	r1, r0
 8002640:	4620      	mov	r0, r4
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	f000 bfef 	b.w	8003628 <vGBMemoryWrite>
 800264a:	bf00      	nop
 800264c:	24001664 	.word	0x24001664

08002650 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <vRES_2_HL+0x1c>)
 8002652:	2102      	movs	r1, #2
 8002654:	b510      	push	{r4, lr}
 8002656:	88dc      	ldrh	r4, [r3, #6]
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fee1 	bl	8003420 <ucGBFunctionRESHL>
 800265e:	4601      	mov	r1, r0
 8002660:	4620      	mov	r0, r4
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002666:	f000 bfdf 	b.w	8003628 <vGBMemoryWrite>
 800266a:	bf00      	nop
 800266c:	24001664 	.word	0x24001664

08002670 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <vRES_3_HL+0x1c>)
 8002672:	2103      	movs	r1, #3
 8002674:	b510      	push	{r4, lr}
 8002676:	88dc      	ldrh	r4, [r3, #6]
 8002678:	4620      	mov	r0, r4
 800267a:	f000 fed1 	bl	8003420 <ucGBFunctionRESHL>
 800267e:	4601      	mov	r1, r0
 8002680:	4620      	mov	r0, r4
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002686:	f000 bfcf 	b.w	8003628 <vGBMemoryWrite>
 800268a:	bf00      	nop
 800268c:	24001664 	.word	0x24001664

08002690 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <vRES_4_HL+0x1c>)
 8002692:	2104      	movs	r1, #4
 8002694:	b510      	push	{r4, lr}
 8002696:	88dc      	ldrh	r4, [r3, #6]
 8002698:	4620      	mov	r0, r4
 800269a:	f000 fec1 	bl	8003420 <ucGBFunctionRESHL>
 800269e:	4601      	mov	r1, r0
 80026a0:	4620      	mov	r0, r4
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a6:	f000 bfbf 	b.w	8003628 <vGBMemoryWrite>
 80026aa:	bf00      	nop
 80026ac:	24001664 	.word	0x24001664

080026b0 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <vRES_5_HL+0x1c>)
 80026b2:	2105      	movs	r1, #5
 80026b4:	b510      	push	{r4, lr}
 80026b6:	88dc      	ldrh	r4, [r3, #6]
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 feb1 	bl	8003420 <ucGBFunctionRESHL>
 80026be:	4601      	mov	r1, r0
 80026c0:	4620      	mov	r0, r4
 80026c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c6:	f000 bfaf 	b.w	8003628 <vGBMemoryWrite>
 80026ca:	bf00      	nop
 80026cc:	24001664 	.word	0x24001664

080026d0 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <vRES_6_HL+0x1c>)
 80026d2:	2106      	movs	r1, #6
 80026d4:	b510      	push	{r4, lr}
 80026d6:	88dc      	ldrh	r4, [r3, #6]
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 fea1 	bl	8003420 <ucGBFunctionRESHL>
 80026de:	4601      	mov	r1, r0
 80026e0:	4620      	mov	r0, r4
 80026e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e6:	f000 bf9f 	b.w	8003628 <vGBMemoryWrite>
 80026ea:	bf00      	nop
 80026ec:	24001664 	.word	0x24001664

080026f0 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <vRES_7_HL+0x1c>)
 80026f2:	2107      	movs	r1, #7
 80026f4:	b510      	push	{r4, lr}
 80026f6:	88dc      	ldrh	r4, [r3, #6]
 80026f8:	4620      	mov	r0, r4
 80026fa:	f000 fe91 	bl	8003420 <ucGBFunctionRESHL>
 80026fe:	4601      	mov	r1, r0
 8002700:	4620      	mov	r0, r4
 8002702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002706:	f000 bf8f 	b.w	8003628 <vGBMemoryWrite>
 800270a:	bf00      	nop
 800270c:	24001664 	.word	0x24001664

08002710 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <vSET_0_HL+0x1c>)
 8002712:	2100      	movs	r1, #0
 8002714:	b510      	push	{r4, lr}
 8002716:	88dc      	ldrh	r4, [r3, #6]
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fe8d 	bl	8003438 <ucGBFunctionSETHL>
 800271e:	4601      	mov	r1, r0
 8002720:	4620      	mov	r0, r4
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002726:	f000 bf7f 	b.w	8003628 <vGBMemoryWrite>
 800272a:	bf00      	nop
 800272c:	24001664 	.word	0x24001664

08002730 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <vSET_1_HL+0x1c>)
 8002732:	2101      	movs	r1, #1
 8002734:	b510      	push	{r4, lr}
 8002736:	88dc      	ldrh	r4, [r3, #6]
 8002738:	4620      	mov	r0, r4
 800273a:	f000 fe7d 	bl	8003438 <ucGBFunctionSETHL>
 800273e:	4601      	mov	r1, r0
 8002740:	4620      	mov	r0, r4
 8002742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002746:	f000 bf6f 	b.w	8003628 <vGBMemoryWrite>
 800274a:	bf00      	nop
 800274c:	24001664 	.word	0x24001664

08002750 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <vSET_2_HL+0x1c>)
 8002752:	2102      	movs	r1, #2
 8002754:	b510      	push	{r4, lr}
 8002756:	88dc      	ldrh	r4, [r3, #6]
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fe6d 	bl	8003438 <ucGBFunctionSETHL>
 800275e:	4601      	mov	r1, r0
 8002760:	4620      	mov	r0, r4
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002766:	f000 bf5f 	b.w	8003628 <vGBMemoryWrite>
 800276a:	bf00      	nop
 800276c:	24001664 	.word	0x24001664

08002770 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <vSET_3_HL+0x1c>)
 8002772:	2103      	movs	r1, #3
 8002774:	b510      	push	{r4, lr}
 8002776:	88dc      	ldrh	r4, [r3, #6]
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fe5d 	bl	8003438 <ucGBFunctionSETHL>
 800277e:	4601      	mov	r1, r0
 8002780:	4620      	mov	r0, r4
 8002782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002786:	f000 bf4f 	b.w	8003628 <vGBMemoryWrite>
 800278a:	bf00      	nop
 800278c:	24001664 	.word	0x24001664

08002790 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <vSET_4_HL+0x1c>)
 8002792:	2104      	movs	r1, #4
 8002794:	b510      	push	{r4, lr}
 8002796:	88dc      	ldrh	r4, [r3, #6]
 8002798:	4620      	mov	r0, r4
 800279a:	f000 fe4d 	bl	8003438 <ucGBFunctionSETHL>
 800279e:	4601      	mov	r1, r0
 80027a0:	4620      	mov	r0, r4
 80027a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a6:	f000 bf3f 	b.w	8003628 <vGBMemoryWrite>
 80027aa:	bf00      	nop
 80027ac:	24001664 	.word	0x24001664

080027b0 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vSET_5_HL+0x1c>)
 80027b2:	2105      	movs	r1, #5
 80027b4:	b510      	push	{r4, lr}
 80027b6:	88dc      	ldrh	r4, [r3, #6]
 80027b8:	4620      	mov	r0, r4
 80027ba:	f000 fe3d 	bl	8003438 <ucGBFunctionSETHL>
 80027be:	4601      	mov	r1, r0
 80027c0:	4620      	mov	r0, r4
 80027c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c6:	f000 bf2f 	b.w	8003628 <vGBMemoryWrite>
 80027ca:	bf00      	nop
 80027cc:	24001664 	.word	0x24001664

080027d0 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <vSET_6_HL+0x1c>)
 80027d2:	2106      	movs	r1, #6
 80027d4:	b510      	push	{r4, lr}
 80027d6:	88dc      	ldrh	r4, [r3, #6]
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fe2d 	bl	8003438 <ucGBFunctionSETHL>
 80027de:	4601      	mov	r1, r0
 80027e0:	4620      	mov	r0, r4
 80027e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e6:	f000 bf1f 	b.w	8003628 <vGBMemoryWrite>
 80027ea:	bf00      	nop
 80027ec:	24001664 	.word	0x24001664

080027f0 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <vSET_7_HL+0x1c>)
 80027f2:	2107      	movs	r1, #7
 80027f4:	b510      	push	{r4, lr}
 80027f6:	88dc      	ldrh	r4, [r3, #6]
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 fe1d 	bl	8003438 <ucGBFunctionSETHL>
 80027fe:	4601      	mov	r1, r0
 8002800:	4620      	mov	r0, r4
 8002802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002806:	f000 bf0f 	b.w	8003628 <vGBMemoryWrite>
 800280a:	bf00      	nop
 800280c:	24001664 	.word	0x24001664

08002810 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 8002810:	b510      	push	{r4, lr}
 8002812:	4c0d      	ldr	r4, [pc, #52]	; (8002848 <vCCF+0x38>)
 8002814:	2106      	movs	r1, #6
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f9be 	bl	8002b98 <resetbit>
 800281c:	4620      	mov	r0, r4
 800281e:	2105      	movs	r1, #5
 8002820:	f000 f9ba 	bl	8002b98 <resetbit>
 8002824:	7820      	ldrb	r0, [r4, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	f000 f9be 	bl	8002ba8 <checkbit>
 800282c:	b128      	cbz	r0, 800283a <vCCF+0x2a>
 800282e:	4620      	mov	r0, r4
 8002830:	2104      	movs	r1, #4
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002836:	f000 b9af 	b.w	8002b98 <resetbit>
 800283a:	4620      	mov	r0, r4
 800283c:	2104      	movs	r1, #4
 800283e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002842:	f000 b9a1 	b.w	8002b88 <setbit>
 8002846:	bf00      	nop
 8002848:	24001664 	.word	0x24001664

0800284c <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 800284c:	4901      	ldr	r1, [pc, #4]	; (8002854 <vRET_C.part.0+0x8>)
 800284e:	1e88      	subs	r0, r1, #2
 8002850:	f000 bbfa 	b.w	8003048 <vGBFunctionRET>
 8002854:	2400166e 	.word	0x2400166e

08002858 <vRET_NZ>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <vRET_NZ+0x30>)
 800285c:	2107      	movs	r1, #7
 800285e:	7820      	ldrb	r0, [r4, #0]
 8002860:	f000 f9a2 	bl	8002ba8 <checkbit>
 8002864:	2800      	cmp	r0, #0
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <vRET_NZ+0x34>)
 8002868:	f04f 0107 	mov.w	r1, #7
 800286c:	bf14      	ite	ne
 800286e:	2208      	movne	r2, #8
 8002870:	2214      	moveq	r2, #20
 8002872:	7820      	ldrb	r0, [r4, #0]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	f000 f997 	bl	8002ba8 <checkbit>
 800287a:	b100      	cbz	r0, 800287e <vRET_NZ+0x26>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002882:	f7ff bfe3 	b.w	800284c <vRET_C.part.0>
 8002886:	bf00      	nop
 8002888:	24001664 	.word	0x24001664
 800288c:	24001094 	.word	0x24001094

08002890 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002890:	b510      	push	{r4, lr}
 8002892:	4c0b      	ldr	r4, [pc, #44]	; (80028c0 <vRET_Z+0x30>)
 8002894:	2107      	movs	r1, #7
 8002896:	7820      	ldrb	r0, [r4, #0]
 8002898:	f000 f986 	bl	8002ba8 <checkbit>
 800289c:	2800      	cmp	r0, #0
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <vRET_Z+0x34>)
 80028a0:	f04f 0107 	mov.w	r1, #7
 80028a4:	bf14      	ite	ne
 80028a6:	2214      	movne	r2, #20
 80028a8:	2208      	moveq	r2, #8
 80028aa:	7820      	ldrb	r0, [r4, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	f000 f97b 	bl	8002ba8 <checkbit>
 80028b2:	b900      	cbnz	r0, 80028b6 <vRET_Z+0x26>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ba:	f7ff bfc7 	b.w	800284c <vRET_C.part.0>
 80028be:	bf00      	nop
 80028c0:	24001664 	.word	0x24001664
 80028c4:	24001094 	.word	0x24001094

080028c8 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <vRET_NC+0x30>)
 80028cc:	2104      	movs	r1, #4
 80028ce:	7820      	ldrb	r0, [r4, #0]
 80028d0:	f000 f96a 	bl	8002ba8 <checkbit>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vRET_NC+0x34>)
 80028d8:	f04f 0104 	mov.w	r1, #4
 80028dc:	bf14      	ite	ne
 80028de:	2208      	movne	r2, #8
 80028e0:	2214      	moveq	r2, #20
 80028e2:	7820      	ldrb	r0, [r4, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	f000 f95f 	bl	8002ba8 <checkbit>
 80028ea:	b100      	cbz	r0, 80028ee <vRET_NC+0x26>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	f7ff bfab 	b.w	800284c <vRET_C.part.0>
 80028f6:	bf00      	nop
 80028f8:	24001664 	.word	0x24001664
 80028fc:	24001094 	.word	0x24001094

08002900 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002900:	b510      	push	{r4, lr}
 8002902:	4c0b      	ldr	r4, [pc, #44]	; (8002930 <vRET_C+0x30>)
 8002904:	2104      	movs	r1, #4
 8002906:	7820      	ldrb	r0, [r4, #0]
 8002908:	f000 f94e 	bl	8002ba8 <checkbit>
 800290c:	2800      	cmp	r0, #0
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <vRET_C+0x34>)
 8002910:	f04f 0104 	mov.w	r1, #4
 8002914:	bf14      	ite	ne
 8002916:	2214      	movne	r2, #20
 8002918:	2208      	moveq	r2, #8
 800291a:	7820      	ldrb	r0, [r4, #0]
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f000 f943 	bl	8002ba8 <checkbit>
 8002922:	b900      	cbnz	r0, 8002926 <vRET_C+0x26>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292a:	f7ff bf8f 	b.w	800284c <vRET_C.part.0>
 800292e:	bf00      	nop
 8002930:	24001664 	.word	0x24001664
 8002934:	24001094 	.word	0x24001094

08002938 <vLD_A_A>:
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <vLD_B_B>:
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <vLD_C_C>:
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <vLD_D_D>:
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <vLD_E_E>:
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <vLD_H_H>:
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <vLD_L_L>:
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <ucGetTstate+0x8>)
}
 8002956:	7818      	ldrb	r0, [r3, #0]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2400109d 	.word	0x2400109d

08002960 <vGBCPUInterruptHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUInterruptHandler(){
 8002960:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002962:	4d3a      	ldr	r5, [pc, #232]	; (8002a4c <vGBCPUInterruptHandler+0xec>)
 8002964:	782c      	ldrb	r4, [r5, #0]
 8002966:	2c01      	cmp	r4, #1
 8002968:	d002      	beq.n	8002970 <vGBCPUInterruptHandler+0x10>

			tStates += 5*4;
		}

	}else{
		ucOneCycleInterruptDelay++;
 800296a:	3401      	adds	r4, #1
 800296c:	702c      	strb	r4, [r5, #0]
	}
}
 800296e:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002974:	f000 fe44 	bl	8003600 <ucGBMemoryRead>
 8002978:	4606      	mov	r6, r0
 800297a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800297e:	f000 fe3f 	bl	8003600 <ucGBMemoryRead>
 8002982:	4030      	ands	r0, r6
 8002984:	06c6      	lsls	r6, r0, #27
 8002986:	d0f2      	beq.n	800296e <vGBCPUInterruptHandler+0xe>
			ucHALTED = 0;
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <vGBCPUInterruptHandler+0xf0>)
			ucInterruptMasterEnable = 0;
 800298a:	2600      	movs	r6, #0
 800298c:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800298e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucHALTED = 0;
 8002992:	701e      	strb	r6, [r3, #0]
			ucInterruptMasterEnable = 0;
 8002994:	7016      	strb	r6, [r2, #0]
			ucOneCycleInterruptDelay = 0;
 8002996:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002998:	f000 fe32 	bl	8003600 <ucGBMemoryRead>
 800299c:	4605      	mov	r5, r0
 800299e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029a2:	f000 fe2d 	bl	8003600 <ucGBMemoryRead>
 80029a6:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029a8:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 80029aa:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029ac:	d40c      	bmi.n	80029c8 <vGBCPUInterruptHandler+0x68>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029ae:	0798      	lsls	r0, r3, #30
 80029b0:	d417      	bmi.n	80029e2 <vGBCPUInterruptHandler+0x82>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029b2:	0759      	lsls	r1, r3, #29
 80029b4:	d422      	bmi.n	80029fc <vGBCPUInterruptHandler+0x9c>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 80029b6:	071a      	lsls	r2, r3, #28
 80029b8:	d42d      	bmi.n	8002a16 <vGBCPUInterruptHandler+0xb6>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 80029ba:	06db      	lsls	r3, r3, #27
 80029bc:	d438      	bmi.n	8002a30 <vGBCPUInterruptHandler+0xd0>
			tStates += 5*4;
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 80029c0:	7813      	ldrb	r3, [r2, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	7013      	strb	r3, [r2, #0]
}
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029c8:	4631      	mov	r1, r6
 80029ca:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029ce:	f000 fdf5 	bl	80035bc <vGBMemoryResetBit>
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <vGBCPUInterruptHandler+0xfc>)
 80029d4:	1e88      	subs	r0, r1, #2
 80029d6:	f000 fb55 	bl	8003084 <vGBFunctionPUSH>
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <vGBCPUInterruptHandler+0x100>)
 80029dc:	2240      	movs	r2, #64	; 0x40
 80029de:	815a      	strh	r2, [r3, #10]
 80029e0:	e7ed      	b.n	80029be <vGBCPUInterruptHandler+0x5e>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029e2:	4621      	mov	r1, r4
 80029e4:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029e8:	f000 fde8 	bl	80035bc <vGBMemoryResetBit>
 80029ec:	491b      	ldr	r1, [pc, #108]	; (8002a5c <vGBCPUInterruptHandler+0xfc>)
 80029ee:	1e88      	subs	r0, r1, #2
 80029f0:	f000 fb48 	bl	8003084 <vGBFunctionPUSH>
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <vGBCPUInterruptHandler+0x100>)
 80029f6:	2248      	movs	r2, #72	; 0x48
 80029f8:	815a      	strh	r2, [r3, #10]
 80029fa:	e7e0      	b.n	80029be <vGBCPUInterruptHandler+0x5e>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029fc:	2102      	movs	r1, #2
 80029fe:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a02:	f000 fddb 	bl	80035bc <vGBMemoryResetBit>
 8002a06:	4915      	ldr	r1, [pc, #84]	; (8002a5c <vGBCPUInterruptHandler+0xfc>)
 8002a08:	1e88      	subs	r0, r1, #2
 8002a0a:	f000 fb3b 	bl	8003084 <vGBFunctionPUSH>
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <vGBCPUInterruptHandler+0x100>)
 8002a10:	2250      	movs	r2, #80	; 0x50
 8002a12:	815a      	strh	r2, [r3, #10]
 8002a14:	e7d3      	b.n	80029be <vGBCPUInterruptHandler+0x5e>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 8002a16:	2103      	movs	r1, #3
 8002a18:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a1c:	f000 fdce 	bl	80035bc <vGBMemoryResetBit>
 8002a20:	490e      	ldr	r1, [pc, #56]	; (8002a5c <vGBCPUInterruptHandler+0xfc>)
 8002a22:	1e88      	subs	r0, r1, #2
 8002a24:	f000 fb2e 	bl	8003084 <vGBFunctionPUSH>
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <vGBCPUInterruptHandler+0x100>)
 8002a2a:	2258      	movs	r2, #88	; 0x58
 8002a2c:	815a      	strh	r2, [r3, #10]
 8002a2e:	e7c6      	b.n	80029be <vGBCPUInterruptHandler+0x5e>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 8002a30:	2104      	movs	r1, #4
 8002a32:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a36:	f000 fdc1 	bl	80035bc <vGBMemoryResetBit>
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <vGBCPUInterruptHandler+0xfc>)
 8002a3c:	1e88      	subs	r0, r1, #2
 8002a3e:	f000 fb21 	bl	8003084 <vGBFunctionPUSH>
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <vGBCPUInterruptHandler+0x100>)
 8002a44:	2260      	movs	r2, #96	; 0x60
 8002a46:	815a      	strh	r2, [r3, #10]
 8002a48:	e7b9      	b.n	80029be <vGBCPUInterruptHandler+0x5e>
 8002a4a:	bf00      	nop
 8002a4c:	240010a0 	.word	0x240010a0
 8002a50:	2400109e 	.word	0x2400109e
 8002a54:	2400109f 	.word	0x2400109f
 8002a58:	2400109d 	.word	0x2400109d
 8002a5c:	2400166e 	.word	0x2400166e
 8002a60:	24001664 	.word	0x24001664

08002a64 <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002a64:	b570      	push	{r4, r5, r6, lr}

	if(reg.PC == 0x40){
 8002a66:	4d28      	ldr	r5, [pc, #160]	; (8002b08 <vGBCPUinstr+0xa4>)
void vGBCPUinstr(uint8_t opcode){
 8002a68:	4604      	mov	r4, r0
	if(reg.PC == 0x40){
 8002a6a:	896b      	ldrh	r3, [r5, #10]
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d103      	bne.n	8002a78 <vGBCPUinstr+0x14>
		num++;
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <vGBCPUinstr+0xa8>)
 8002a72:	7813      	ldrb	r3, [r2, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	7013      	strb	r3, [r2, #0]
	}

	if(!ucHALTED){
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <vGBCPUinstr+0xac>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b123      	cbz	r3, 8002a88 <vGBCPUinstr+0x24>

		vGBMemoryIncTimers(tStates >> 2);
	}


	if(ucInterruptMasterEnable == 1)
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <vGBCPUinstr+0xb0>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d01b      	beq.n	8002abe <vGBCPUinstr+0x5a>
			vGBCPUInterruptHandler();

}
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
		vGBMemorySetOP(opcode);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f000 fcff 	bl	800348c <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a8e:	2ccb      	cmp	r4, #203	; 0xcb
 8002a90:	d01e      	beq.n	8002ad0 <vGBCPUinstr+0x6c>
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <vGBCPUinstr+0xb4>)
 8002a94:	8969      	ldrh	r1, [r5, #10]
 8002a96:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002a9a:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a9e:	7933      	ldrb	r3, [r6, #4]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	816b      	strh	r3, [r5, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002aa4:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002aa6:	7970      	ldrb	r0, [r6, #5]
 8002aa8:	28ff      	cmp	r0, #255	; 0xff
 8002aaa:	d00c      	beq.n	8002ac6 <vGBCPUinstr+0x62>
			tStates = instructions[opcode].Tstate;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <vGBCPUinstr+0xb8>)
 8002aae:	7018      	strb	r0, [r3, #0]
		vGBMemoryIncTimers(tStates >> 2);
 8002ab0:	0880      	lsrs	r0, r0, #2
 8002ab2:	f000 fe1b 	bl	80036ec <vGBMemoryIncTimers>
	if(ucInterruptMasterEnable == 1)
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <vGBCPUinstr+0xb0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d1e3      	bne.n	8002a86 <vGBCPUinstr+0x22>
}
 8002abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vGBCPUInterruptHandler();
 8002ac2:	f7ff bf4d 	b.w	8002960 <vGBCPUInterruptHandler>
			tStates = customDuration;
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <vGBCPUinstr+0xbc>)
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <vGBCPUinstr+0xb8>)
 8002aca:	7810      	ldrb	r0, [r2, #0]
 8002acc:	7018      	strb	r0, [r3, #0]
 8002ace:	e7ef      	b.n	8002ab0 <vGBCPUinstr+0x4c>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ad0:	8968      	ldrh	r0, [r5, #10]
 8002ad2:	4c14      	ldr	r4, [pc, #80]	; (8002b24 <vGBCPUinstr+0xc0>)
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	b280      	uxth	r0, r0
 8002ad8:	f000 fd92 	bl	8003600 <ucGBMemoryRead>
 8002adc:	8969      	ldrh	r1, [r5, #10]
 8002ade:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <vGBCPUinstr+0xb4>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ae4:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002ae6:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aea:	440b      	add	r3, r1
 8002aec:	816b      	strh	r3, [r5, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002aee:	4790      	blx	r2
			tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002af0:	8968      	ldrh	r0, [r5, #10]
 8002af2:	3801      	subs	r0, #1
 8002af4:	b280      	uxth	r0, r0
 8002af6:	f000 fd83 	bl	8003600 <ucGBMemoryRead>
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <vGBCPUinstr+0xb8>)
 8002afc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002b00:	7940      	ldrb	r0, [r0, #5]
 8002b02:	7018      	strb	r0, [r3, #0]
 8002b04:	e7d4      	b.n	8002ab0 <vGBCPUinstr+0x4c>
 8002b06:	bf00      	nop
 8002b08:	24001664 	.word	0x24001664
 8002b0c:	2400109c 	.word	0x2400109c
 8002b10:	2400109e 	.word	0x2400109e
 8002b14:	2400109f 	.word	0x2400109f
 8002b18:	24000008 	.word	0x24000008
 8002b1c:	2400109d 	.word	0x2400109d
 8002b20:	24001094 	.word	0x24001094
 8002b24:	24000808 	.word	0x24000808

08002b28 <vGBCPUboot>:
void vGBCPUboot(){
 8002b28:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002b2a:	4c12      	ldr	r4, [pc, #72]	; (8002b74 <vGBCPUboot+0x4c>)
 8002b2c:	8960      	ldrh	r0, [r4, #10]
 8002b2e:	28ff      	cmp	r0, #255	; 0xff
 8002b30:	d90a      	bls.n	8002b48 <vGBCPUboot+0x20>
		numcount++;
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <vGBCPUboot+0x50>)
		if(n == 0){
 8002b34:	4d11      	ldr	r5, [pc, #68]	; (8002b7c <vGBCPUboot+0x54>)
		numcount++;
 8002b36:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002b3a:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f141 0100 	adc.w	r1, r1, #0
 8002b42:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002b46:	b12e      	cbz	r6, 8002b54 <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b48:	f000 fd5a 	bl	8003600 <ucGBMemoryRead>
}
 8002b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b50:	f7ff bf88 	b.w	8002a64 <vGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002b54:	f001 f9ee 	bl	8003f34 <getRomPointer>
 8002b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5c:	f000 fcac 	bl	80034b8 <vGBMemoryLoad>
			n = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	8960      	ldrh	r0, [r4, #10]
 8002b64:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b66:	f000 fd4b 	bl	8003600 <ucGBMemoryRead>
}
 8002b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b6e:	f7ff bf79 	b.w	8002a64 <vGBCPUinstr>
 8002b72:	bf00      	nop
 8002b74:	24001664 	.word	0x24001664
 8002b78:	24001658 	.word	0x24001658
 8002b7c:	24001098 	.word	0x24001098

08002b80 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002b80:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002b84:	b280      	uxth	r0, r0
 8002b86:	4770      	bx	lr

08002b88 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002b88:	2301      	movs	r3, #1
 8002b8a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b8e:	7803      	ldrb	r3, [r0, #0]
 8002b90:	4319      	orrs	r1, r3
 8002b92:	7001      	strb	r1, [r0, #0]
}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002b98:	2301      	movs	r3, #1
 8002b9a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b9e:	7803      	ldrb	r3, [r0, #0]
 8002ba0:	ea23 0101 	bic.w	r1, r3, r1
 8002ba4:	7001      	strb	r1, [r0, #0]
}
 8002ba6:	4770      	bx	lr

08002ba8 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002ba8:	4108      	asrs	r0, r1
}
 8002baa:	f000 0001 	and.w	r0, r0, #1
 8002bae:	4770      	bx	lr

08002bb0 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002bb0:	7803      	ldrb	r3, [r0, #0]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002bb8:	780b      	ldrb	r3, [r1, #0]
 8002bba:	bf0c      	ite	eq
 8002bbc:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002bc0:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002bc4:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002bc6:	7803      	ldrb	r3, [r0, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002bcc:	f991 2000 	ldrsb.w	r2, [r1]
 8002bd0:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002bd4:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002bd6:	7800      	ldrb	r0, [r0, #0]
 8002bd8:	b118      	cbz	r0, 8002be2 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002bda:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002bde:	700b      	strb	r3, [r1, #0]
}
 8002be0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	700b      	strb	r3, [r1, #0]
}
 8002bea:	4770      	bx	lr

08002bec <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002bec:	7803      	ldrb	r3, [r0, #0]
 8002bee:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002bf2:	780b      	ldrb	r3, [r1, #0]
 8002bf4:	bf14      	ite	ne
 8002bf6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002bfa:	f043 0320 	orreq.w	r3, r3, #32
 8002bfe:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002c00:	7803      	ldrb	r3, [r0, #0]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002c06:	f991 3000 	ldrsb.w	r3, [r1]
 8002c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c0e:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002c10:	7802      	ldrb	r2, [r0, #0]
 8002c12:	b12a      	cbz	r2, 8002c20 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1c:	700b      	strb	r3, [r1, #0]
}
 8002c1e:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002c20:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	700b      	strb	r3, [r1, #0]
}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002c2c:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c2e:	09d3      	lsrs	r3, r2, #7
 8002c30:	bf0c      	ite	eq
 8002c32:	2300      	moveq	r3, #0
 8002c34:	2310      	movne	r3, #16
 8002c36:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002c38:	7803      	ldrb	r3, [r0, #0]
 8002c3a:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002c3c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002c40:	7003      	strb	r3, [r0, #0]
}
 8002c42:	4770      	bx	lr

08002c44 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002c44:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c46:	f013 0301 	ands.w	r3, r3, #1
 8002c4a:	d007      	beq.n	8002c5c <vGBFunctionRRCA+0x18>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c50:	7803      	ldrb	r3, [r0, #0]
 8002c52:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c58:	7003      	strb	r3, [r0, #0]
}
 8002c5a:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c5c:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c5e:	7803      	ldrb	r3, [r0, #0]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002c68:	8803      	ldrh	r3, [r0, #0]
 8002c6a:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c6c:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002c6e:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c70:	d517      	bpl.n	8002ca2 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002c72:	f992 3000 	ldrsb.w	r3, [r2]
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	b2dc      	uxtb	r4, r3
 8002c7c:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c7e:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002c82:	8804      	ldrh	r4, [r0, #0]
 8002c84:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002c88:	42a5      	cmp	r5, r4
 8002c8a:	d211      	bcs.n	8002cb0 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002c8c:	f043 0320 	orr.w	r3, r3, #32
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002c94:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c96:	7813      	ldrb	r3, [r2, #0]
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002c9c:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002c9e:	7013      	strb	r3, [r2, #0]
}
 8002ca0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002ca2:	f992 4000 	ldrsb.w	r4, [r2]
 8002ca6:	f024 0310 	bic.w	r3, r4, #16
 8002caa:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002cae:	e7e5      	b.n	8002c7c <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002cb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002cb4:	e7ed      	b.n	8002c92 <vGBFunction16bitADD+0x2a>
 8002cb6:	bf00      	nop

08002cb8 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002cb8:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002cbc:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002cbe:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002cc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002cc4:	f002 0210 	and.w	r2, r2, #16
 8002cc8:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002cca:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002ccc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002cd0:	7003      	strb	r3, [r0, #0]
}
 8002cd2:	4770      	bx	lr

08002cd4 <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cd4:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002cd6:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cd8:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002cda:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cdc:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002ce0:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ce2:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002ce4:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002ce6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002cea:	7003      	strb	r3, [r0, #0]
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002cf0:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002cf2:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002cf4:	09c9      	lsrs	r1, r1, #7
 8002cf6:	d105      	bne.n	8002d04 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002cf8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002cfa:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002cfc:	fa41 f282 	sxtab	r2, r1, r2
 8002d00:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d02:	4770      	bx	lr
		return 8;
 8002d04:	2008      	movs	r0, #8
	}
}
 8002d06:	4770      	bx	lr

08002d08 <vGBFunctionDAA>:

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d08:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002d0a:	b410      	push	{r4}
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d0c:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002d10:	7804      	ldrb	r4, [r0, #0]
 8002d12:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d14:	d012      	beq.n	8002d3c <vGBFunctionDAA+0x34>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002d16:	0694      	lsls	r4, r2, #26
 8002d18:	bf48      	it	mi
 8002d1a:	33fa      	addmi	r3, #250	; 0xfa
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002d1c:	06d2      	lsls	r2, r2, #27
 8002d1e:	d425      	bmi.n	8002d6c <vGBFunctionDAA+0x64>
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
		}else{ resetbit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002d20:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d22:	f991 2000 	ldrsb.w	r2, [r1]
 8002d26:	f022 0320 	bic.w	r3, r2, #32
 8002d2a:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d2c:	7800      	ldrb	r0, [r0, #0]
 8002d2e:	b1b0      	cbz	r0, 8002d5e <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002d30:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d38:	700b      	strb	r3, [r1, #0]
 8002d3a:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d3c:	f012 0f20 	tst.w	r2, #32
 8002d40:	d017      	beq.n	8002d72 <vGBFunctionDAA+0x6a>
 8002d42:	3306      	adds	r3, #6
 8002d44:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002d46:	06d4      	lsls	r4, r2, #27
 8002d48:	d403      	bmi.n	8002d52 <vGBFunctionDAA+0x4a>
 8002d4a:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002d4e:	2c90      	cmp	r4, #144	; 0x90
 8002d50:	d914      	bls.n	8002d7c <vGBFunctionDAA+0x74>
 8002d52:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002d54:	f042 0210 	orr.w	r2, r2, #16
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002d58:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002d5a:	700a      	strb	r2, [r1, #0]
}
 8002d5c:	e7e0      	b.n	8002d20 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002d62:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	700b      	strb	r3, [r1, #0]
}
 8002d6a:	4770      	bx	lr
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002d6c:	33a0      	adds	r3, #160	; 0xa0
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	e7d6      	b.n	8002d20 <vGBFunctionDAA+0x18>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d72:	f004 040f 	and.w	r4, r4, #15
 8002d76:	2c09      	cmp	r4, #9
 8002d78:	d9e5      	bls.n	8002d46 <vGBFunctionDAA+0x3e>
 8002d7a:	e7e2      	b.n	8002d42 <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002d7c:	f022 0210 	bic.w	r2, r2, #16
 8002d80:	700a      	strb	r2, [r1, #0]
}
 8002d82:	e7cd      	b.n	8002d20 <vGBFunctionDAA+0x18>

08002d84 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002d84:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d86:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d88:	09c9      	lsrs	r1, r1, #7
 8002d8a:	d005      	beq.n	8002d98 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002d8c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d8e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d90:	fa41 f282 	sxtab	r2, r1, r2
 8002d94:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d96:	4770      	bx	lr
	}else{
		return 8;
 8002d98:	2008      	movs	r0, #8
	}
}
 8002d9a:	4770      	bx	lr

08002d9c <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002d9c:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d9e:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002da0:	06c9      	lsls	r1, r1, #27
 8002da2:	d405      	bmi.n	8002db0 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002da4:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002da6:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002da8:	fa41 f282 	sxtab	r2, r1, r2
 8002dac:	801a      	strh	r2, [r3, #0]
		return 12;
 8002dae:	4770      	bx	lr
		return 8;
 8002db0:	2008      	movs	r0, #8
	}
}
 8002db2:	4770      	bx	lr

08002db4 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	460c      	mov	r4, r1
 8002db8:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002dba:	f000 fc21 	bl	8003600 <ucGBMemoryRead>
 8002dbe:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002dc2:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002dc4:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002dc6:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002dc8:	bf0c      	ite	eq
 8002dca:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002dce:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002dd2:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002dd4:	f000 fc14 	bl	8003600 <ucGBMemoryRead>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4628      	mov	r0, r5
 8002ddc:	3101      	adds	r1, #1
 8002dde:	b2c9      	uxtb	r1, r1
 8002de0:	f000 fc22 	bl	8003628 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002de4:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002de6:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dec:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dee:	f000 fc07 	bl	8003600 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002df2:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002df4:	b118      	cbz	r0, 8002dfe <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfa:	7023      	strb	r3, [r4, #0]
}
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	7023      	strb	r3, [r4, #0]
}
 8002e04:	bd38      	pop	{r3, r4, r5, pc}
 8002e06:	bf00      	nop

08002e08 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002e0e:	f000 fbf7 	bl	8003600 <ucGBMemoryRead>
 8002e12:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002e14:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002e16:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002e18:	bf14      	ite	ne
 8002e1a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002e1e:	f043 0320 	orreq.w	r3, r3, #32
 8002e22:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002e24:	f000 fbec 	bl	8003600 <ucGBMemoryRead>
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	3901      	subs	r1, #1
 8002e2e:	b2c9      	uxtb	r1, r1
 8002e30:	f000 fbfa 	bl	8003628 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002e34:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e36:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3c:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e3e:	f000 fbdf 	bl	8003600 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002e42:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e44:	b118      	cbz	r0, 8002e4e <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4a:	7023      	strb	r3, [r4, #0]
}
 8002e4c:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	7023      	strb	r3, [r4, #0]
}
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
 8002e56:	bf00      	nop

08002e58 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002e58:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e5a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e5c:	06c9      	lsls	r1, r1, #27
 8002e5e:	d505      	bpl.n	8002e6c <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002e60:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e62:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e64:	fa41 f282 	sxtab	r2, r1, r2
 8002e68:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e6a:	4770      	bx	lr
	}else{
		return 8;
 8002e6c:	2008      	movs	r0, #8
	}
}
 8002e6e:	4770      	bx	lr

08002e70 <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002e70:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e72:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002e74:	f002 050f 	and.w	r5, r2, #15
 8002e78:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002e7c:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002e7e:	1963      	adds	r3, r4, r5
 8002e80:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002e82:	f991 3000 	ldrsb.w	r3, [r1]
 8002e86:	bfcc      	ite	gt
 8002e88:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002e8c:	f023 0320 	bicle.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002e90:	2aff      	cmp	r2, #255	; 0xff
 8002e92:	dd0d      	ble.n	8002eb0 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002e94:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002e98:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002ea0:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ea2:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ea4:	b162      	cbz	r2, 8002ec0 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002eaa:	bc30      	pop	{r4, r5}
 8002eac:	700b      	strb	r3, [r1, #0]
 8002eae:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002eb0:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	700b      	strb	r3, [r1, #0]
 8002eb8:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002eba:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d1f2      	bne.n	8002ea6 <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002ec4:	bc30      	pop	{r4, r5}
 8002ec6:	700b      	strb	r3, [r1, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002ecc:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002ece:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ed0:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002ed4:	7804      	ldrb	r4, [r0, #0]
 8002ed6:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002eda:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002edc:	f004 070f 	and.w	r7, r4, #15
 8002ee0:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002ee2:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ee4:	19e2      	adds	r2, r4, r7
 8002ee6:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002ee8:	bfcc      	ite	gt
 8002eea:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002eee:	f025 0520 	bicle.w	r5, r5, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002ef4:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002ef6:	dd0d      	ble.n	8002f14 <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002ef8:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8002efc:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8002efe:	f045 0510 	orr.w	r5, r5, #16
 8002f02:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8002f04:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f06:	b163      	cbz	r3, 8002f22 <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8002f08:	780b      	ldrb	r3, [r1, #0]
 8002f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f0e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f10:	700b      	strb	r3, [r1, #0]
 8002f12:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f14:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	700d      	strb	r5, [r1, #0]
 8002f1c:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8002f22:	780b      	ldrb	r3, [r1, #0]
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002f28:	bcf0      	pop	{r4, r5, r6, r7}
 8002f2a:	700b      	strb	r3, [r1, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f30:	7803      	ldrb	r3, [r0, #0]
 8002f32:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f34:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f36:	d21d      	bcs.n	8002f74 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002f38:	f991 3000 	ldrsb.w	r3, [r1]
 8002f3c:	f043 0310 	orr.w	r3, r3, #16
 8002f40:	b2dc      	uxtb	r4, r3
 8002f42:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f44:	f002 050f 	and.w	r5, r2, #15
 8002f48:	7804      	ldrb	r4, [r0, #0]
 8002f4a:	f004 040f 	and.w	r4, r4, #15
 8002f4e:	42a5      	cmp	r5, r4
 8002f50:	d920      	bls.n	8002f94 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002f5a:	7803      	ldrb	r3, [r0, #0]
 8002f5c:	1a9a      	subs	r2, r3, r2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f62:	b172      	cbz	r2, 8002f82 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002f64:	780b      	ldrb	r3, [r1, #0]
 8002f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002f6e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f70:	700b      	strb	r3, [r1, #0]
}
 8002f72:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f74:	f991 4000 	ldrsb.w	r4, [r1]
 8002f78:	f024 0310 	bic.w	r3, r4, #16
 8002f7c:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002f80:	e7df      	b.n	8002f42 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002f82:	f991 3000 	ldrsb.w	r3, [r1]
 8002f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f8e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f90:	700b      	strb	r3, [r1, #0]
}
 8002f92:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002f98:	e7de      	b.n	8002f58 <vGBFunctionSUB+0x28>
 8002f9a:	bf00      	nop

08002f9c <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + checkbit(*flagReg, C_FLAG);
 8002f9c:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f9e:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 8002fa0:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) < 0x0) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002fa4:	7804      	ldrb	r4, [r0, #0]
 8002fa6:	f002 060f 	and.w	r6, r2, #15
 8002faa:	f004 040f 	and.w	r4, r4, #15
 8002fae:	442e      	add	r6, r5
 8002fb0:	1ba4      	subs	r4, r4, r6
 8002fb2:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 8002fb4:	bfb4      	ite	lt
 8002fb6:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fba:	f023 0320 	bicge.w	r3, r3, #32
 8002fbe:	700b      	strb	r3, [r1, #0]
 8002fc0:	b25e      	sxtb	r6, r3
	(*regA - regValue - checkbit(*flagReg, C_FLAG) < 0 ) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002fc2:	7804      	ldrb	r4, [r0, #0]
 8002fc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002fc8:	1aa4      	subs	r4, r4, r2
 8002fca:	1ae3      	subs	r3, r4, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db19      	blt.n	8003004 <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 8002fd0:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 8002fd4:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 8002fd6:	7804      	ldrb	r4, [r0, #0]
 8002fd8:	1aa3      	subs	r3, r4, r2
 8002fda:	1b5b      	subs	r3, r3, r5
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002fe0:	b13b      	cbz	r3, 8002ff2 <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 8002fe2:	780b      	ldrb	r3, [r1, #0]
 8002fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fec:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8002fee:	700b      	strb	r3, [r1, #0]
}
 8002ff0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002ff2:	f991 3000 	ldrsb.w	r3, [r1]
 8002ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002ffe:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003000:	700b      	strb	r3, [r1, #0]
}
 8003002:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003004:	f046 0310 	orr.w	r3, r6, #16
 8003008:	b2db      	uxtb	r3, r3
}
 800300a:	e7e3      	b.n	8002fd4 <vGBFunctionSBC+0x38>

0800300c <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 800300c:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003010:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8003012:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8003014:	f002 040f 	and.w	r4, r2, #15
 8003018:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 800301c:	bf8c      	ite	hi
 800301e:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003022:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8003026:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8003028:	bf8c      	ite	hi
 800302a:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800302e:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003032:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8003034:	bf0c      	ite	eq
 8003036:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800303a:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8003042:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8003044:	700b      	strb	r3, [r1, #0]
}
 8003046:	4770      	bx	lr

08003048 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 800304c:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 800304e:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003050:	f000 fad6 	bl	8003600 <ucGBMemoryRead>
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	4605      	mov	r5, r0
 8003058:	1c58      	adds	r0, r3, #1
 800305a:	b280      	uxth	r0, r0
 800305c:	f000 fad0 	bl	8003600 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003060:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003064:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8003066:	8823      	ldrh	r3, [r4, #0]
 8003068:	3302      	adds	r3, #2
 800306a:	8023      	strh	r3, [r4, #0]
}
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	bf00      	nop

08003070 <vGBFunctionPOP>:
 8003070:	f7ff bfea 	b.w	8003048 <vGBFunctionRET>

08003074 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8003074:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003076:	09db      	lsrs	r3, r3, #7
 8003078:	d102      	bne.n	8003080 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800307a:	8002      	strh	r2, [r0, #0]
		return 16;
 800307c:	2010      	movs	r0, #16
 800307e:	4770      	bx	lr
		return 12;
 8003080:	200c      	movs	r0, #12
	}
}
 8003082:	4770      	bx	lr

08003084 <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003088:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800308a:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 800308c:	8809      	ldrh	r1, [r1, #0]
 800308e:	3801      	subs	r0, #1
 8003090:	0a09      	lsrs	r1, r1, #8
 8003092:	b280      	uxth	r0, r0
 8003094:	f000 fac8 	bl	8003628 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003098:	8820      	ldrh	r0, [r4, #0]
 800309a:	7829      	ldrb	r1, [r5, #0]
 800309c:	3802      	subs	r0, #2
 800309e:	b280      	uxth	r0, r0
 80030a0:	f000 fac2 	bl	8003628 <vGBMemoryWrite>
	*regSP -= 2;
 80030a4:	8823      	ldrh	r3, [r4, #0]
 80030a6:	3b02      	subs	r3, #2
 80030a8:	8023      	strh	r3, [r4, #0]
}
 80030aa:	bd38      	pop	{r3, r4, r5, pc}

080030ac <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030ac:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030ae:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030b0:	09db      	lsrs	r3, r3, #7
 80030b2:	d001      	beq.n	80030b8 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 80030b4:	200c      	movs	r0, #12
}
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030b8:	4604      	mov	r4, r0
 80030ba:	4610      	mov	r0, r2
 80030bc:	4621      	mov	r1, r4
 80030be:	f7ff ffe1 	bl	8003084 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030c2:	8820      	ldrh	r0, [r4, #0]
 80030c4:	3802      	subs	r0, #2
 80030c6:	b280      	uxth	r0, r0
 80030c8:	f000 fa9a 	bl	8003600 <ucGBMemoryRead>
 80030cc:	8823      	ldrh	r3, [r4, #0]
 80030ce:	4605      	mov	r5, r0
 80030d0:	1e58      	subs	r0, r3, #1
 80030d2:	b280      	uxth	r0, r0
 80030d4:	f000 fa94 	bl	8003600 <ucGBMemoryRead>
 80030d8:	4603      	mov	r3, r0
		return 24;
 80030da:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030dc:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030e0:	8025      	strh	r5, [r4, #0]
}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}

080030e4 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80030e4:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030e6:	09db      	lsrs	r3, r3, #7
 80030e8:	d002      	beq.n	80030f0 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 80030ea:	8002      	strh	r2, [r0, #0]
		return 16;
 80030ec:	2010      	movs	r0, #16
 80030ee:	4770      	bx	lr
	}else{
		return 12;
 80030f0:	200c      	movs	r0, #12
	}
}
 80030f2:	4770      	bx	lr

080030f4 <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030f4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030f6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030f8:	09db      	lsrs	r3, r3, #7
 80030fa:	d101      	bne.n	8003100 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80030fc:	200c      	movs	r0, #12
	}
}
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003100:	4604      	mov	r4, r0
 8003102:	4610      	mov	r0, r2
 8003104:	4621      	mov	r1, r4
 8003106:	f7ff ffbd 	bl	8003084 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800310a:	8820      	ldrh	r0, [r4, #0]
 800310c:	3802      	subs	r0, #2
 800310e:	b280      	uxth	r0, r0
 8003110:	f000 fa76 	bl	8003600 <ucGBMemoryRead>
 8003114:	8823      	ldrh	r3, [r4, #0]
 8003116:	4605      	mov	r5, r0
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	b280      	uxth	r0, r0
 800311c:	f000 fa70 	bl	8003600 <ucGBMemoryRead>
 8003120:	4603      	mov	r3, r0
		return 24;
 8003122:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003124:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003128:	8025      	strh	r5, [r4, #0]
}
 800312a:	bd38      	pop	{r3, r4, r5, pc}

0800312c <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 800312c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 800312e:	06db      	lsls	r3, r3, #27
 8003130:	d402      	bmi.n	8003138 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003132:	8002      	strh	r2, [r0, #0]
		return 16;
 8003134:	2010      	movs	r0, #16
 8003136:	4770      	bx	lr
		return 12;
 8003138:	200c      	movs	r0, #12
	}
}
 800313a:	4770      	bx	lr

0800313c <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800313c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800313e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003140:	06db      	lsls	r3, r3, #27
 8003142:	d501      	bpl.n	8003148 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 8003144:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 8003146:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003148:	4604      	mov	r4, r0
 800314a:	4610      	mov	r0, r2
 800314c:	4621      	mov	r1, r4
 800314e:	f7ff ff99 	bl	8003084 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003152:	8820      	ldrh	r0, [r4, #0]
 8003154:	3802      	subs	r0, #2
 8003156:	b280      	uxth	r0, r0
 8003158:	f000 fa52 	bl	8003600 <ucGBMemoryRead>
 800315c:	8823      	ldrh	r3, [r4, #0]
 800315e:	4605      	mov	r5, r0
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	b280      	uxth	r0, r0
 8003164:	f000 fa4c 	bl	8003600 <ucGBMemoryRead>
 8003168:	4603      	mov	r3, r0
		return 24;
 800316a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800316c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003170:	8025      	strh	r5, [r4, #0]
}
 8003172:	bd38      	pop	{r3, r4, r5, pc}

08003174 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 8003174:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003176:	06db      	lsls	r3, r3, #27
 8003178:	d502      	bpl.n	8003180 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 800317a:	8002      	strh	r2, [r0, #0]
		return 16;
 800317c:	2010      	movs	r0, #16
 800317e:	4770      	bx	lr
	}else{
		return 12;
 8003180:	200c      	movs	r0, #12
	}
}
 8003182:	4770      	bx	lr

08003184 <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003184:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003186:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003188:	06db      	lsls	r3, r3, #27
 800318a:	d401      	bmi.n	8003190 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 800318c:	200c      	movs	r0, #12
	}
}
 800318e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003190:	4604      	mov	r4, r0
 8003192:	4610      	mov	r0, r2
 8003194:	4621      	mov	r1, r4
 8003196:	f7ff ff75 	bl	8003084 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800319a:	8820      	ldrh	r0, [r4, #0]
 800319c:	3802      	subs	r0, #2
 800319e:	b280      	uxth	r0, r0
 80031a0:	f000 fa2e 	bl	8003600 <ucGBMemoryRead>
 80031a4:	8823      	ldrh	r3, [r4, #0]
 80031a6:	4605      	mov	r5, r0
 80031a8:	1e58      	subs	r0, r3, #1
 80031aa:	b280      	uxth	r0, r0
 80031ac:	f000 fa28 	bl	8003600 <ucGBMemoryRead>
 80031b0:	4603      	mov	r3, r0
		return 24;
 80031b2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031b4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031b8:	8025      	strh	r5, [r4, #0]
}
 80031ba:	bd38      	pop	{r3, r4, r5, pc}

080031bc <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 80031bc:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80031be:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 80031c0:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	b2e5      	uxtb	r5, r4
 80031c6:	429d      	cmp	r5, r3
 80031c8:	d219      	bcs.n	80031fe <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80031ca:	f991 3000 	ldrsb.w	r3, [r1]
 80031ce:	f043 0310 	orr.w	r3, r3, #16
 80031d2:	b2dd      	uxtb	r5, r3
 80031d4:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80031d6:	f004 040f 	and.w	r4, r4, #15
 80031da:	8805      	ldrh	r5, [r0, #0]
 80031dc:	f005 050f 	and.w	r5, r5, #15
 80031e0:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80031e2:	bf34      	ite	cc
 80031e4:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80031e8:	f023 0320 	biccs.w	r3, r3, #32
 80031ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f0:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 80031f2:	8803      	ldrh	r3, [r0, #0]
 80031f4:	fa43 f282 	sxtab	r2, r3, r2
}
 80031f8:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 80031fa:	8002      	strh	r2, [r0, #0]
}
 80031fc:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031fe:	f991 5000 	ldrsb.w	r5, [r1]
 8003202:	f025 0310 	bic.w	r3, r5, #16
 8003206:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 800320a:	e7e3      	b.n	80031d4 <vGBFunctionADD_SP_r8+0x18>

0800320c <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 800320c:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 800320e:	880c      	ldrh	r4, [r1, #0]
 8003210:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003212:	b2e4      	uxtb	r4, r4
 8003214:	b2ee      	uxtb	r6, r5
 8003216:	42a6      	cmp	r6, r4
 8003218:	d219      	bcs.n	800324e <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800321a:	f992 4000 	ldrsb.w	r4, [r2]
 800321e:	f044 0410 	orr.w	r4, r4, #16
 8003222:	b2e6      	uxtb	r6, r4
 8003224:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8003226:	f005 050f 	and.w	r5, r5, #15
 800322a:	880e      	ldrh	r6, [r1, #0]
 800322c:	f006 060f 	and.w	r6, r6, #15
 8003230:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 8003232:	bf34      	ite	cc
 8003234:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 8003238:	f024 0420 	biccs.w	r4, r4, #32
 800323c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003240:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 8003242:	880a      	ldrh	r2, [r1, #0]
 8003244:	fa42 f383 	sxtab	r3, r2, r3
}
 8003248:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 800324a:	8003      	strh	r3, [r0, #0]
}
 800324c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800324e:	f992 6000 	ldrsb.w	r6, [r2]
 8003252:	f026 0410 	bic.w	r4, r6, #16
 8003256:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 800325a:	e7e3      	b.n	8003224 <vGBFunctionLD_HL_SP_r8+0x18>

0800325c <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 800325c:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 800325e:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003260:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003264:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003268:	d10a      	bne.n	8003280 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 800326a:	f991 3000 	ldrsb.w	r3, [r1]
 800326e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003272:	b152      	cbz	r2, 800328a <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 8003274:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800327e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003280:	780b      	ldrb	r3, [r1, #0]
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003286:	2a00      	cmp	r2, #0
 8003288:	d1f4      	bne.n	8003274 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 800328a:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 800328e:	700b      	strb	r3, [r1, #0]
}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop

08003294 <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 8003294:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 8003296:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 800329a:	d509      	bpl.n	80032b0 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 800329c:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 800329e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 80032a2:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 80032a6:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 80032a8:	f043 0310 	orr.w	r3, r3, #16
 80032ac:	700b      	strb	r3, [r1, #0]
}
 80032ae:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032b0:	b942      	cbnz	r2, 80032c4 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 80032b2:	f991 3000 	ldrsb.w	r3, [r1]
 80032b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80032ba:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 80032be:	4610      	mov	r0, r2
 80032c0:	700b      	strb	r3, [r1, #0]
 80032c2:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032c4:	780b      	ldrb	r3, [r1, #0]
 80032c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032ca:	e7f6      	b.n	80032ba <ucGBFunctionRRC+0x26>

080032cc <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 80032cc:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032ce:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80032d2:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80032d6:	bf14      	ite	ne
 80032d8:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032dc:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80032e0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80032e4:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032e6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032ea:	d105      	bne.n	80032f8 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 80032ec:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032f6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	700b      	strb	r3, [r1, #0]
}
 80032fe:	4770      	bx	lr

08003300 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003300:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003302:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 8003306:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 800330a:	bf14      	ite	ne
 800330c:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003310:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 8003314:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 8003316:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 8003318:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800331c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003320:	d105      	bne.n	800332e <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 8003322:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332a:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800332c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	700b      	strb	r3, [r1, #0]
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003338:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 800333a:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 800333e:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 8003342:	bf4c      	ite	mi
 8003344:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003348:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800334c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003350:	d105      	bne.n	800335e <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 8003352:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800335c:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	700b      	strb	r3, [r1, #0]
}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 8003368:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800336c:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003370:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 8003374:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003378:	bf14      	ite	ne
 800337a:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 800337e:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003382:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003386:	d105      	bne.n	8003394 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003388:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003392:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003394:	f002 031f 	and.w	r3, r2, #31
 8003398:	700b      	strb	r3, [r1, #0]
}
 800339a:	4770      	bx	lr

0800339c <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 800339c:	0903      	lsrs	r3, r0, #4
 800339e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033a2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033a6:	d107      	bne.n	80033b8 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 80033a8:	f991 3000 	ldrsb.w	r3, [r1]
 80033ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 80033b6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033b8:	780b      	ldrb	r3, [r1, #0]
 80033ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	700b      	strb	r3, [r1, #0]
}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop

080033c8 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80033c8:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 80033ca:	f991 3000 	ldrsb.w	r3, [r1]
 80033ce:	bf4c      	ite	mi
 80033d0:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033d4:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033d8:	0840      	lsrs	r0, r0, #1
 80033da:	d105      	bne.n	80033e8 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80033dc:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033e6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	700b      	strb	r3, [r1, #0]
}
 80033ee:	4770      	bx	lr

080033f0 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80033f0:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 80033f4:	07cb      	lsls	r3, r1, #31
 80033f6:	d508      	bpl.n	800340a <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80033f8:	7813      	ldrb	r3, [r2, #0]
 80033fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8003402:	f043 0320 	orr.w	r3, r3, #32
 8003406:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 8003408:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 800340a:	f992 3000 	ldrsb.w	r3, [r2]
 800340e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	7013      	strb	r3, [r2, #0]
}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003420:	b510      	push	{r4, lr}
 8003422:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003424:	f000 f8ec 	bl	8003600 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8003428:	2301      	movs	r3, #1
 800342a:	fa03 f104 	lsl.w	r1, r3, r4
 800342e:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 8003432:	b2c0      	uxtb	r0, r0
 8003434:	bd10      	pop	{r4, pc}
 8003436:	bf00      	nop

08003438 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 8003438:	b510      	push	{r4, lr}
 800343a:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 800343c:	f000 f8e0 	bl	8003600 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003440:	2301      	movs	r3, #1
 8003442:	fa03 f104 	lsl.w	r1, r3, r4
 8003446:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 8003448:	b2c0      	uxtb	r0, r0
 800344a:	bd10      	pop	{r4, pc}

0800344c <vGBMemoryWrite.part.0>:
 * @brief
 * @details
 * @param address
 * @param data
 */
void vGBMemoryWrite(uint16_t address, uint8_t data){
 800344c:	b538      	push	{r3, r4, r5, lr}
			mem.ram[DIV_ADDR] = 0;
			return;
		}

		else if(address == TAC_ADDR){
			timerStopStart = checkbit(data, 2);
 800344e:	2102      	movs	r1, #2
void vGBMemoryWrite(uint16_t address, uint8_t data){
 8003450:	4604      	mov	r4, r0
			timerStopStart = checkbit(data, 2);
 8003452:	f7ff fba9 	bl	8002ba8 <checkbit>
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <vGBMemoryWrite.part.0+0x34>)
 8003458:	4602      	mov	r2, r0
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 800345a:	2101      	movs	r1, #1
 800345c:	4620      	mov	r0, r4
			timerStopStart = checkbit(data, 2);
 800345e:	701a      	strb	r2, [r3, #0]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 8003460:	f7ff fba2 	bl	8002ba8 <checkbit>
 8003464:	4605      	mov	r5, r0
 8003466:	2100      	movs	r1, #0
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff fb9d 	bl	8002ba8 <checkbit>
			mem.ram[address] = data;
 800346e:	4905      	ldr	r1, [pc, #20]	; (8003484 <vGBMemoryWrite.part.0+0x38>)
 8003470:	f64f 7207 	movw	r2, #65287	; 0xff07
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <vGBMemoryWrite.part.0+0x3c>)
 8003476:	eb00 0045 	add.w	r0, r0, r5, lsl #1
			mem.ram[address] = data;
 800347a:	548c      	strb	r4, [r1, r2]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 800347c:	7018      	strb	r0, [r3, #0]
		mem.ram[address - 0x2000] = data;
		return;
	}

	mem.ram[address] = data;
}
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	24011674 	.word	0x24011674
 8003484:	24001674 	.word	0x24001674
 8003488:	24011675 	.word	0x24011675

0800348c <vGBMemorySetOP>:
	current_op = op;
 800348c:	4b01      	ldr	r3, [pc, #4]	; (8003494 <vGBMemorySetOP+0x8>)
 800348e:	7018      	strb	r0, [r3, #0]
}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	24001660 	.word	0x24001660

08003498 <vGBMemoryInit>:
	mem.ram[JOY_ADDR] = 0xCF;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <vGBMemoryInit+0x1c>)
 800349a:	21cf      	movs	r1, #207	; 0xcf
 800349c:	20f8      	movs	r0, #248	; 0xf8
 800349e:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 80034a2:	b430      	push	{r4, r5}
	mem.ram[IF_ADDR] = 0xE1;
 80034a4:	f64f 740f 	movw	r4, #65295	; 0xff0f
 80034a8:	25e1      	movs	r5, #225	; 0xe1
	mem.ram[JOY_ADDR] = 0xCF;
 80034aa:	7011      	strb	r1, [r2, #0]
	mem.ram[IF_ADDR] = 0xE1;
 80034ac:	551d      	strb	r5, [r3, r4]
}
 80034ae:	bc30      	pop	{r4, r5}
 80034b0:	f7ff bfcc 	b.w	800344c <vGBMemoryWrite.part.0>
 80034b4:	24001674 	.word	0x24001674

080034b8 <vGBMemoryLoad>:
void vGBMemoryLoad(const void* data, uint32_t bytes){
 80034b8:	4603      	mov	r3, r0
 80034ba:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 80034bc:	4801      	ldr	r0, [pc, #4]	; (80034c4 <vGBMemoryLoad+0xc>)
 80034be:	4619      	mov	r1, r3
 80034c0:	f006 bec4 	b.w	800a24c <memcpy>
 80034c4:	24001674 	.word	0x24001674

080034c8 <vGBMemoryJoypad>:
uint8_t vGBMemoryJoypad(){
 80034c8:	b538      	push	{r3, r4, r5, lr}
	if(joypadSELdir == 0x10){
 80034ca:	4c25      	ldr	r4, [pc, #148]	; (8003560 <vGBMemoryJoypad+0x98>)
 80034cc:	7822      	ldrb	r2, [r4, #0]
 80034ce:	2a10      	cmp	r2, #16
 80034d0:	d009      	beq.n	80034e6 <vGBMemoryJoypad+0x1e>
	}else if(joypadSELbut == 0x20){
 80034d2:	4d24      	ldr	r5, [pc, #144]	; (8003564 <vGBMemoryJoypad+0x9c>)
 80034d4:	782b      	ldrb	r3, [r5, #0]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d029      	beq.n	800352e <vGBMemoryJoypad+0x66>
 80034da:	200e      	movs	r0, #14
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 80034dc:	4310      	orrs	r0, r2
 80034de:	4318      	orrs	r0, r3
}
 80034e0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc3);
 80034e6:	4820      	ldr	r0, [pc, #128]	; (8003568 <vGBMemoryJoypad+0xa0>)
 80034e8:	f003 f89a 	bl	8006620 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	481d      	ldr	r0, [pc, #116]	; (8003568 <vGBMemoryJoypad+0xa0>)
 80034f2:	f002 fd83 	bl	8005ffc <HAL_ADC_PollForConversion>
	    value = HAL_ADC_GetValue(&hadc3) >> 12;
 80034f6:	481c      	ldr	r0, [pc, #112]	; (8003568 <vGBMemoryJoypad+0xa0>)
 80034f8:	f002 fe0a 	bl	8006110 <HAL_ADC_GetValue>
 80034fc:	4d19      	ldr	r5, [pc, #100]	; (8003564 <vGBMemoryJoypad+0x9c>)
 80034fe:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 8003500:	280f      	cmp	r0, #15
 8003502:	d022      	beq.n	800354a <vGBMemoryJoypad+0x82>
		if((value >> 3) & 0x1){
 8003504:	0703      	lsls	r3, r0, #28
 8003506:	d40a      	bmi.n	800351e <vGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 8003508:	f000 0306 	and.w	r3, r0, #6
 800350c:	2b06      	cmp	r3, #6
 800350e:	782b      	ldrb	r3, [r5, #0]
 8003510:	d022      	beq.n	8003558 <vGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 8003512:	2802      	cmp	r0, #2
 8003514:	7822      	ldrb	r2, [r4, #0]
 8003516:	bf8c      	ite	hi
 8003518:	200d      	movhi	r0, #13
 800351a:	200e      	movls	r0, #14
 800351c:	e7de      	b.n	80034dc <vGBMemoryJoypad+0x14>
 800351e:	7822      	ldrb	r2, [r4, #0]
		if((value >> 3) & 0x1){
 8003520:	200b      	movs	r0, #11
 8003522:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003524:	4310      	orrs	r0, r2
 8003526:	4318      	orrs	r0, r3
}
 8003528:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 800352c:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc1);
 800352e:	480f      	ldr	r0, [pc, #60]	; (800356c <vGBMemoryJoypad+0xa4>)
 8003530:	f003 f876 	bl	8006620 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	480c      	ldr	r0, [pc, #48]	; (800356c <vGBMemoryJoypad+0xa4>)
 800353a:	f002 fd5f 	bl	8005ffc <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 800353e:	480b      	ldr	r0, [pc, #44]	; (800356c <vGBMemoryJoypad+0xa4>)
 8003540:	f002 fde6 	bl	8006110 <HAL_ADC_GetValue>
 8003544:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 8003546:	280f      	cmp	r0, #15
 8003548:	d1dc      	bne.n	8003504 <vGBMemoryJoypad+0x3c>
 800354a:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 800354c:	782b      	ldrb	r3, [r5, #0]
 800354e:	4310      	orrs	r0, r2
 8003550:	4318      	orrs	r0, r3
}
 8003552:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003556:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 8003558:	2007      	movs	r0, #7
 800355a:	7822      	ldrb	r2, [r4, #0]
 800355c:	e7be      	b.n	80034dc <vGBMemoryJoypad+0x14>
 800355e:	bf00      	nop
 8003560:	24001670 	.word	0x24001670
 8003564:	24011676 	.word	0x24011676
 8003568:	240117c4 	.word	0x240117c4
 800356c:	24011760 	.word	0x24011760

08003570 <vGBMemorySetBit>:
 *
 * @param address
 * @param bit
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003570:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003574:	b29b      	uxth	r3, r3
 8003576:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800357a:	d302      	bcc.n	8003582 <vGBMemorySetBit+0x12>
		mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800357c:	0403      	lsls	r3, r0, #16
 800357e:	d411      	bmi.n	80035a4 <vGBMemorySetBit+0x34>
 8003580:	4770      	bx	lr
		mem.ram[address - 0x2000] |= (0x1 << bit);
 8003582:	2301      	movs	r3, #1
 8003584:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 8003586:	b410      	push	{r4}
		mem.ram[address - 0x2000] |= (0x1 << bit);
 8003588:	fa03 f101 	lsl.w	r1, r3, r1
 800358c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8003590:	b249      	sxtb	r1, r1
 8003592:	5d13      	ldrb	r3, [r2, r4]
 8003594:	430b      	orrs	r3, r1
 8003596:	5513      	strb	r3, [r2, r4]
		return;

	mem.ram[address] |= (0x1 << bit);
 8003598:	5c13      	ldrb	r3, [r2, r0]
 800359a:	4319      	orrs	r1, r3
 800359c:	5411      	strb	r1, [r2, r0]
}
 800359e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	2301      	movs	r3, #1
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <vGBMemorySetBit+0x48>)
 80035a8:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 80035ac:	5c13      	ldrb	r3, [r2, r0]
 80035ae:	b249      	sxtb	r1, r1
 80035b0:	4319      	orrs	r1, r3
 80035b2:	5411      	strb	r1, [r2, r0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	24001674 	.word	0x24001674

080035bc <vGBMemoryResetBit>:
 * @param address
 * @param bit
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80035bc:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 80035c0:	b292      	uxth	r2, r2
 80035c2:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 80035c6:	b430      	push	{r4, r5}
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80035c8:	d20f      	bcs.n	80035ea <vGBMemoryResetBit+0x2e>
		mem.ram[address - 0x2000] &= ~(0x1 << bit);
 80035ca:	2201      	movs	r2, #1
 80035cc:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 80035d0:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <vGBMemoryResetBit+0x40>)
 80035d2:	fa02 f101 	lsl.w	r1, r2, r1
 80035d6:	5d62      	ldrb	r2, [r4, r5]
 80035d8:	43cb      	mvns	r3, r1
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	401a      	ands	r2, r3
 80035de:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
		return;

	mem.ram[address] &= ~(0x1 << bit);
 80035e0:	5c22      	ldrb	r2, [r4, r0]
 80035e2:	4013      	ands	r3, r2
 80035e4:	5423      	strb	r3, [r4, r0]
}
 80035e6:	bc30      	pop	{r4, r5}
 80035e8:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 80035ea:	0403      	lsls	r3, r0, #16
 80035ec:	d5fb      	bpl.n	80035e6 <vGBMemoryResetBit+0x2a>
 80035ee:	2201      	movs	r2, #1
 80035f0:	4c02      	ldr	r4, [pc, #8]	; (80035fc <vGBMemoryResetBit+0x40>)
 80035f2:	fa02 f301 	lsl.w	r3, r2, r1
 80035f6:	43db      	mvns	r3, r3
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	e7f1      	b.n	80035e0 <vGBMemoryResetBit+0x24>
 80035fc:	24001674 	.word	0x24001674

08003600 <ucGBMemoryRead>:
 * @return
 */
uint8_t ucGBMemoryRead(uint16_t address){

	if(address >= 0xFF00){
		if(address == JOY_ADDR){
 8003600:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003604:	d009      	beq.n	800361a <ucGBMemoryRead+0x1a>
			return vGBMemoryJoypad();
		}

	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003606:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800360a:	b29b      	uxth	r3, r3
 800360c:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		return mem.ram[address - 0x2000];
 8003610:	bf34      	ite	cc
 8003612:	4b03      	ldrcc	r3, [pc, #12]	; (8003620 <ucGBMemoryRead+0x20>)

	return mem.ram[address];
 8003614:	4b03      	ldrcs	r3, [pc, #12]	; (8003624 <ucGBMemoryRead+0x24>)
 8003616:	5c18      	ldrb	r0, [r3, r0]
}
 8003618:	4770      	bx	lr
			return vGBMemoryJoypad();
 800361a:	f7ff bf55 	b.w	80034c8 <vGBMemoryJoypad>
 800361e:	bf00      	nop
 8003620:	23fff674 	.word	0x23fff674
 8003624:	24001674 	.word	0x24001674

08003628 <vGBMemoryWrite>:
	if(address >= 0xFF00){
 8003628:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800362c:	d30f      	bcc.n	800364e <vGBMemoryWrite+0x26>
		if(address == JOY_ADDR){
 800362e:	d01a      	beq.n	8003666 <vGBMemoryWrite+0x3e>
		else if(address == DMA_ADDR){
 8003630:	f64f 7346 	movw	r3, #65350	; 0xff46
 8003634:	4298      	cmp	r0, r3
 8003636:	d01f      	beq.n	8003678 <vGBMemoryWrite+0x50>
		else if(address == DIV_ADDR){
 8003638:	f64f 7304 	movw	r3, #65284	; 0xff04
 800363c:	4298      	cmp	r0, r3
 800363e:	d030      	beq.n	80036a2 <vGBMemoryWrite+0x7a>
		else if(address == TAC_ADDR){
 8003640:	f64f 7307 	movw	r3, #65287	; 0xff07
 8003644:	4298      	cmp	r0, r3
 8003646:	d030      	beq.n	80036aa <vGBMemoryWrite+0x82>
	mem.ram[address] = data;
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <vGBMemoryWrite+0x88>)
 800364a:	5419      	strb	r1, [r3, r0]
 800364c:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800364e:	0403      	lsls	r3, r0, #16
 8003650:	d400      	bmi.n	8003654 <vGBMemoryWrite+0x2c>
 8003652:	4770      	bx	lr
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 8003654:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8003658:	b29b      	uxth	r3, r3
 800365a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800365e:	d2f3      	bcs.n	8003648 <vGBMemoryWrite+0x20>
		mem.ram[address - 0x2000] = data;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <vGBMemoryWrite+0x8c>)
 8003662:	54c1      	strb	r1, [r0, r3]
		return;
 8003664:	4770      	bx	lr
			joypadSELdir = data & 0x10;
 8003666:	f001 0010 	and.w	r0, r1, #16
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <vGBMemoryWrite+0x90>)
			joypadSELbut = data & 0x20;
 800366c:	f001 0120 	and.w	r1, r1, #32
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <vGBMemoryWrite+0x94>)
			joypadSELdir = data & 0x10;
 8003672:	7010      	strb	r0, [r2, #0]
			joypadSELbut = data & 0x20;
 8003674:	7019      	strb	r1, [r3, #0]
			return;
 8003676:	4770      	bx	lr
			for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 8003678:	0209      	lsls	r1, r1, #8
void vGBMemoryWrite(uint16_t address, uint8_t data){
 800367a:	b570      	push	{r4, r5, r6, lr}
			for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 800367c:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003680:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 8003684:	f501 7500 	add.w	r5, r1, #512	; 0x200
 8003688:	1960      	adds	r0, r4, r5
 800368a:	b280      	uxth	r0, r0
 800368c:	f7ff ffb8 	bl	8003600 <ucGBMemoryRead>
 8003690:	4601      	mov	r1, r0
 8003692:	4620      	mov	r0, r4
 8003694:	3401      	adds	r4, #1
 8003696:	f7ff ffc7 	bl	8003628 <vGBMemoryWrite>
 800369a:	b2a4      	uxth	r4, r4
 800369c:	42b4      	cmp	r4, r6
 800369e:	d1f3      	bne.n	8003688 <vGBMemoryWrite+0x60>
}
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
			mem.ram[DIV_ADDR] = 0;
 80036a2:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <vGBMemoryWrite+0x88>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	541a      	strb	r2, [r3, r0]
			return;
 80036a8:	4770      	bx	lr
 80036aa:	4608      	mov	r0, r1
 80036ac:	f7ff bece 	b.w	800344c <vGBMemoryWrite.part.0>
 80036b0:	24001674 	.word	0x24001674
 80036b4:	23fff674 	.word	0x23fff674
 80036b8:	24001670 	.word	0x24001670
 80036bc:	24011676 	.word	0x24011676

080036c0 <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4604      	mov	r4, r0
 80036c4:	460d      	mov	r5, r1
	vGBMemoryWrite(address,   data & 0xFF);
 80036c6:	b2c9      	uxtb	r1, r1
 80036c8:	f7ff ffae 	bl	8003628 <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 80036cc:	1c60      	adds	r0, r4, #1
 80036ce:	0a29      	lsrs	r1, r5, #8
 80036d0:	b280      	uxth	r0, r0
}
 80036d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 80036d6:	f7ff bfa7 	b.w	8003628 <vGBMemoryWrite>
 80036da:	bf00      	nop

080036dc <usGBMemoryReadShort>:
 *
 * @param address
 * @return
 */
uint16_t usGBMemoryReadShort(uint16_t address){
	return concat_16bit_bigEndian(mem.ram[address], mem.ram[address+1]);
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <usGBMemoryReadShort+0xc>)
 80036de:	181a      	adds	r2, r3, r0
 80036e0:	5c18      	ldrb	r0, [r3, r0]
 80036e2:	7851      	ldrb	r1, [r2, #1]
 80036e4:	f7ff ba4c 	b.w	8002b80 <concat_16bit_bigEndian>
 80036e8:	24001674 	.word	0x24001674

080036ec <vGBMemoryIncTimers>:
void vGBMemoryIncTimers(uint8_t durationMcycle){
	static uint8_t timerDIV  = 0;
	static uint8_t timerTIMA = 0;
	static uint8_t oldTIMA   = 0;

	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 80036ec:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <vGBMemoryIncTimers+0xac>)
 80036ee:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 80036f0:	b4f0      	push	{r4, r5, r6, r7}
	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 80036f2:	7813      	ldrb	r3, [r2, #0]
 80036f4:	0084      	lsls	r4, r0, #2
 80036f6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80036fa:	2dff      	cmp	r5, #255	; 0xff
 80036fc:	dd05      	ble.n	800370a <vGBMemoryIncTimers+0x1e>
		mem.ram[DIV_ADDR]++;
 80036fe:	4f27      	ldr	r7, [pc, #156]	; (800379c <vGBMemoryIncTimers+0xb0>)
 8003700:	f64f 7604 	movw	r6, #65284	; 0xff04
 8003704:	5dbd      	ldrb	r5, [r7, r6]
 8003706:	3501      	adds	r5, #1
 8003708:	55bd      	strb	r5, [r7, r6]
	}

	timerDIV += (durationMcycle << 2);

	if(timerStopStart){
 800370a:	4d25      	ldr	r5, [pc, #148]	; (80037a0 <vGBMemoryIncTimers+0xb4>)
	timerDIV += (durationMcycle << 2);
 800370c:	4423      	add	r3, r4
	if(timerStopStart){
 800370e:	782d      	ldrb	r5, [r5, #0]
	timerDIV += (durationMcycle << 2);
 8003710:	7013      	strb	r3, [r2, #0]
	if(timerStopStart){
 8003712:	2d00      	cmp	r5, #0
 8003714:	d02f      	beq.n	8003776 <vGBMemoryIncTimers+0x8a>
		uint16_t curDuration = 0;

		switch (clockMode) {
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <vGBMemoryIncTimers+0xb8>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d82d      	bhi.n	800377a <vGBMemoryIncTimers+0x8e>
 800371e:	e8df f003 	tbb	[pc, r3]
 8003722:	3405      	.short	0x3405
 8003724:	0237      	.short	0x0237
			case 0x0: curDuration = (durationMcycle << 0);  break;
			case 0x1: curDuration = (durationMcycle << 6);  break;
			case 0x2: curDuration = (durationMcycle << 4);  break;
			case 0x3: curDuration = (durationMcycle << 2);  break;
 8003726:	b2a1      	uxth	r1, r4
 8003728:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
			default:  break;
		}

		if(timerTIMA + curDuration > 0xFF){
 800372c:	4d1e      	ldr	r5, [pc, #120]	; (80037a8 <vGBMemoryIncTimers+0xbc>)
 800372e:	782a      	ldrb	r2, [r5, #0]
 8003730:	4411      	add	r1, r2
 8003732:	29ff      	cmp	r1, #255	; 0xff
 8003734:	dd24      	ble.n	8003780 <vGBMemoryIncTimers+0x94>
			mem.ram[TIMA_ADDR]++;
 8003736:	4c19      	ldr	r4, [pc, #100]	; (800379c <vGBMemoryIncTimers+0xb0>)
 8003738:	f64f 7605 	movw	r6, #65285	; 0xff05
		}

		if(timerTIMA + curDuration > 0x1FE){
 800373c:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
			mem.ram[TIMA_ADDR]++;
 8003740:	5da3      	ldrb	r3, [r4, r6]
 8003742:	bfd4      	ite	le
 8003744:	3301      	addle	r3, #1
			mem.ram[TIMA_ADDR]++;
 8003746:	3302      	addgt	r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	55a3      	strb	r3, [r4, r6]
		}

		timerTIMA += curDuration;
 800374c:	4410      	add	r0, r2


		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 800374e:	2b04      	cmp	r3, #4
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <vGBMemoryIncTimers+0xc0>)
		timerTIMA += curDuration;
 8003752:	7028      	strb	r0, [r5, #0]
		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 8003754:	d80e      	bhi.n	8003774 <vGBMemoryIncTimers+0x88>
 8003756:	7811      	ldrb	r1, [r2, #0]
 8003758:	29ff      	cmp	r1, #255	; 0xff
 800375a:	d10b      	bne.n	8003774 <vGBMemoryIncTimers+0x88>
	mem.ram[address] |= (0x1 << bit);
 800375c:	f64f 700f 	movw	r0, #65295	; 0xff0f
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 8003760:	f64f 7306 	movw	r3, #65286	; 0xff06
 8003764:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 8003768:	5c21      	ldrb	r1, [r4, r0]
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 800376a:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 800376c:	f041 0104 	orr.w	r1, r1, #4
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 8003770:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 8003772:	5421      	strb	r1, [r4, r0]
			vGBMemorySetBit(IF_ADDR, 2);
		}

		oldTIMA = mem.ram[TIMA_ADDR];
 8003774:	7013      	strb	r3, [r2, #0]
	}

}
 8003776:	bcf0      	pop	{r4, r5, r6, r7}
 8003778:	4770      	bx	lr
		if(timerTIMA + curDuration > 0xFF){
 800377a:	4d0b      	ldr	r5, [pc, #44]	; (80037a8 <vGBMemoryIncTimers+0xbc>)
 800377c:	2000      	movs	r0, #0
 800377e:	782a      	ldrb	r2, [r5, #0]
 8003780:	4c06      	ldr	r4, [pc, #24]	; (800379c <vGBMemoryIncTimers+0xb0>)
 8003782:	f64f 7305 	movw	r3, #65285	; 0xff05
 8003786:	5ce3      	ldrb	r3, [r4, r3]
 8003788:	e7e0      	b.n	800374c <vGBMemoryIncTimers+0x60>
			case 0x1: curDuration = (durationMcycle << 6);  break;
 800378a:	0181      	lsls	r1, r0, #6
 800378c:	b2c8      	uxtb	r0, r1
 800378e:	e7cd      	b.n	800372c <vGBMemoryIncTimers+0x40>
			case 0x2: curDuration = (durationMcycle << 4);  break;
 8003790:	0101      	lsls	r1, r0, #4
 8003792:	b2c8      	uxtb	r0, r1
 8003794:	e7ca      	b.n	800372c <vGBMemoryIncTimers+0x40>
 8003796:	bf00      	nop
 8003798:	240010a3 	.word	0x240010a3
 800379c:	24001674 	.word	0x24001674
 80037a0:	24011674 	.word	0x24011674
 80037a4:	24011675 	.word	0x24011675
 80037a8:	240010a4 	.word	0x240010a4
 80037ac:	240010a2 	.word	0x240010a2

080037b0 <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80037b0:	2101      	movs	r1, #1
 80037b2:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 80037b6:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80037b8:	f7ff ff00 	bl	80035bc <vGBMemoryResetBit>
 80037bc:	2100      	movs	r1, #0
 80037be:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 80037c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80037c6:	f7ff bef9 	b.w	80035bc <vGBMemoryResetBit>
 80037ca:	bf00      	nop

080037cc <vSetFrameBuffer>:
	memset(gb_frame, 0, 160 * 144 * 4 * scaleAmount);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <vSetFrameBuffer+0x18>)
 80037ce:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <vSetFrameBuffer+0x1c>)
 80037d4:	2100      	movs	r1, #0
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	6800      	ldr	r0, [r0, #0]
 80037da:	fb02 f203 	mul.w	r2, r2, r3
 80037de:	f006 bd43 	b.w	800a268 <memset>
 80037e2:	bf00      	nop
 80037e4:	2400100c 	.word	0x2400100c
 80037e8:	24001008 	.word	0x24001008

080037ec <vCheckBGP>:
void vCheckBGP(){
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80037ee:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: BGPColorToPalette[i] = 3;  break;
 80037f2:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80037f4:	f7ff ff04 	bl	8003600 <ucGBMemoryRead>
			case 3: BGPColorToPalette[i] = 4;  break;
 80037f8:	2604      	movs	r6, #4
 80037fa:	490c      	ldr	r1, [pc, #48]	; (800382c <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80037fc:	2200      	movs	r2, #0
			case 1: BGPColorToPalette[i] = 2;  break;
 80037fe:	2502      	movs	r5, #2
			case 0: BGPColorToPalette[i] = 1;  break;
 8003800:	2401      	movs	r4, #1
		switch ((BGP >> (i*2)) & 0x03) {
 8003802:	fa40 f302 	asr.w	r3, r0, r2
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d00c      	beq.n	8003828 <vCheckBGP+0x3c>
 800380e:	2b03      	cmp	r3, #3
 8003810:	d008      	beq.n	8003824 <vCheckBGP+0x38>
 8003812:	2b01      	cmp	r3, #1
			case 0: BGPColorToPalette[i] = 1;  break;
 8003814:	bf14      	ite	ne
 8003816:	700c      	strbne	r4, [r1, #0]
			case 1: BGPColorToPalette[i] = 2;  break;
 8003818:	700d      	strbeq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 800381a:	3202      	adds	r2, #2
 800381c:	3101      	adds	r1, #1
 800381e:	2a08      	cmp	r2, #8
 8003820:	d1ef      	bne.n	8003802 <vCheckBGP+0x16>
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: BGPColorToPalette[i] = 4;  break;
 8003824:	700e      	strb	r6, [r1, #0]
 8003826:	e7f8      	b.n	800381a <vCheckBGP+0x2e>
			case 2: BGPColorToPalette[i] = 3;  break;
 8003828:	700f      	strb	r7, [r1, #0]
 800382a:	e7f6      	b.n	800381a <vCheckBGP+0x2e>
 800382c:	24011678 	.word	0x24011678

08003830 <vCheckOBP0>:
void vCheckOBP0(){
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003832:	f64f 7048 	movw	r0, #65352	; 0xff48
			case 2: OBP0ColorToPalette[i] = 3;    break;
 8003836:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003838:	f7ff fee2 	bl	8003600 <ucGBMemoryRead>
 800383c:	2200      	movs	r2, #0
 800383e:	490c      	ldr	r1, [pc, #48]	; (8003870 <vCheckOBP0+0x40>)
			case 3: OBP0ColorToPalette[i] = 4;    break;
 8003840:	2504      	movs	r5, #4
			case 0: OBP0ColorToPalette[i] = 0;    break;
 8003842:	4616      	mov	r6, r2
			case 1: OBP0ColorToPalette[i] = 2;    break;
 8003844:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 8003846:	fa40 f302 	asr.w	r3, r0, r2
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d00c      	beq.n	800386c <vCheckOBP0+0x3c>
 8003852:	2b03      	cmp	r3, #3
 8003854:	d008      	beq.n	8003868 <vCheckOBP0+0x38>
 8003856:	2b01      	cmp	r3, #1
			case 0: OBP0ColorToPalette[i] = 0;    break;
 8003858:	bf14      	ite	ne
 800385a:	700e      	strbne	r6, [r1, #0]
			case 1: OBP0ColorToPalette[i] = 2;    break;
 800385c:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 800385e:	3202      	adds	r2, #2
 8003860:	3101      	adds	r1, #1
 8003862:	2a08      	cmp	r2, #8
 8003864:	d1ef      	bne.n	8003846 <vCheckOBP0+0x16>
}
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP0ColorToPalette[i] = 4;    break;
 8003868:	700d      	strb	r5, [r1, #0]
 800386a:	e7f8      	b.n	800385e <vCheckOBP0+0x2e>
			case 2: OBP0ColorToPalette[i] = 3;    break;
 800386c:	700f      	strb	r7, [r1, #0]
 800386e:	e7f6      	b.n	800385e <vCheckOBP0+0x2e>
 8003870:	24011694 	.word	0x24011694

08003874 <vCheckOBP1>:
void vCheckOBP1(){
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 8003876:	f64f 7049 	movw	r0, #65353	; 0xff49
			case 2: OBP1ColorToPalette[i] = 3;  break;
 800387a:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 800387c:	f7ff fec0 	bl	8003600 <ucGBMemoryRead>
 8003880:	2200      	movs	r2, #0
 8003882:	490c      	ldr	r1, [pc, #48]	; (80038b4 <vCheckOBP1+0x40>)
			case 3: OBP1ColorToPalette[i] = 4;  break;
 8003884:	2504      	movs	r5, #4
			case 0: OBP1ColorToPalette[i] = 0;  break;
 8003886:	4616      	mov	r6, r2
			case 1: OBP1ColorToPalette[i] = 2;  break;
 8003888:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 800388a:	fa40 f302 	asr.w	r3, r0, r2
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d00c      	beq.n	80038b0 <vCheckOBP1+0x3c>
 8003896:	2b03      	cmp	r3, #3
 8003898:	d008      	beq.n	80038ac <vCheckOBP1+0x38>
 800389a:	2b01      	cmp	r3, #1
			case 0: OBP1ColorToPalette[i] = 0;  break;
 800389c:	bf14      	ite	ne
 800389e:	700e      	strbne	r6, [r1, #0]
			case 1: OBP1ColorToPalette[i] = 2;  break;
 80038a0:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 80038a2:	3202      	adds	r2, #2
 80038a4:	3101      	adds	r1, #1
 80038a6:	2a08      	cmp	r2, #8
 80038a8:	d1ef      	bne.n	800388a <vCheckOBP1+0x16>
}
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP1ColorToPalette[i] = 4;  break;
 80038ac:	700d      	strb	r5, [r1, #0]
 80038ae:	e7f8      	b.n	80038a2 <vCheckOBP1+0x2e>
			case 2: OBP1ColorToPalette[i] = 3;  break;
 80038b0:	700f      	strb	r7, [r1, #0]
 80038b2:	e7f6      	b.n	80038a2 <vCheckOBP1+0x2e>
 80038b4:	2401167c 	.word	0x2401167c

080038b8 <getTileLineData>:
	if (TileDataAddr == 0x8000){
 80038b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	460d      	mov	r5, r1
	if (TileDataAddr == 0x8000){
 80038c0:	d00e      	beq.n	80038e0 <getTileLineData+0x28>
		int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 80038c2:	4418      	add	r0, r3
 80038c4:	4614      	mov	r4, r2
 80038c6:	b280      	uxth	r0, r0
 80038c8:	f7ff fe9a 	bl	8003600 <ucGBMemoryRead>
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 80038cc:	1961      	adds	r1, r4, r5
		uint16_t temp2 =( temp + 128) * 0x10;
 80038ce:	b240      	sxtb	r0, r0
 80038d0:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 80038d2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 80038d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 80038da:	b280      	uxth	r0, r0
 80038dc:	f7ff befe 	b.w	80036dc <usGBMemoryReadShort>
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 80038e0:	4418      	add	r0, r3
 80038e2:	b280      	uxth	r0, r0
 80038e4:	f7ff fe8c 	bl	8003600 <ucGBMemoryRead>
 80038e8:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 80038ec:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 80038f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 80038f4:	b280      	uxth	r0, r0
 80038f6:	f7ff bef1 	b.w	80036dc <usGBMemoryReadShort>
 80038fa:	bf00      	nop

080038fc <LYC_check>:
void LYC_check(uint8_t ly){
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003900:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003904:	f7ff fe7c 	bl	8003600 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 8003908:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 800390a:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 800390c:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003910:	d003      	beq.n	800391a <LYC_check+0x1e>
}
 8003912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 8003916:	f7ff be51 	b.w	80035bc <vGBMemoryResetBit>
		vGBMemorySetBit(STAT_ADDR, 2);
 800391a:	f7ff fe29 	bl	8003570 <vGBMemorySetBit>
		if(checkbit(ucGBMemoryRead(STAT_ADDR), 6))
 800391e:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003922:	f7ff fe6d 	bl	8003600 <ucGBMemoryRead>
 8003926:	2106      	movs	r1, #6
 8003928:	f7ff f93e 	bl	8002ba8 <checkbit>
 800392c:	b900      	cbnz	r0, 8003930 <LYC_check+0x34>
}
 800392e:	bd10      	pop	{r4, pc}
			vGBMemorySetBit(IF_ADDR, 1);
 8003930:	2101      	movs	r1, #1
 8003932:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vGBMemorySetBit(IF_ADDR, 1);
 800393a:	f7ff be19 	b.w	8003570 <vGBMemorySetBit>
 800393e:	bf00      	nop

08003940 <setMode>:
void setMode(uint8_t mode){
 8003940:	b508      	push	{r3, lr}
	Mode = mode;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <setMode+0x64>)
 8003944:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 8003946:	2803      	cmp	r0, #3
 8003948:	d82b      	bhi.n	80039a2 <setMode+0x62>
 800394a:	e8df f000 	tbb	[pc, r0]
 800394e:	1202      	.short	0x1202
 8003950:	061e      	.short	0x061e
}
 8003952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003956:	f7ff bf2b 	b.w	80037b0 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 800395a:	2101      	movs	r1, #1
 800395c:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003960:	f7ff fe06 	bl	8003570 <vGBMemorySetBit>
 8003964:	2100      	movs	r1, #0
 8003966:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800396a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 800396e:	f7ff bdff 	b.w	8003570 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003972:	2101      	movs	r1, #1
 8003974:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003978:	f7ff fe20 	bl	80035bc <vGBMemoryResetBit>
 800397c:	2100      	movs	r1, #0
 800397e:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003986:	f7ff bdf3 	b.w	8003570 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800398a:	2101      	movs	r1, #1
 800398c:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003990:	f7ff fdee 	bl	8003570 <vGBMemorySetBit>
 8003994:	2100      	movs	r1, #0
 8003996:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800399a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800399e:	f7ff be0d 	b.w	80035bc <vGBMemoryResetBit>
}
 80039a2:	bd08      	pop	{r3, pc}
 80039a4:	24011684 	.word	0x24011684

080039a8 <updateBufferObj>:

void updateBufferObj(uint8_t data, int pixelPos){
 80039a8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	pixelPos *= scaleAmount;
 80039ac:	4f10      	ldr	r7, [pc, #64]	; (80039f0 <updateBufferObj+0x48>)
 80039ae:	783b      	ldrb	r3, [r7, #0]
 80039b0:	fb01 f103 	mul.w	r1, r1, r3
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 80039b4:	b1cb      	cbz	r3, 80039ea <updateBufferObj+0x42>
 80039b6:	2601      	movs	r6, #1
 80039b8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80039f8 <updateBufferObj+0x50>
 80039bc:	4d0d      	ldr	r5, [pc, #52]	; (80039f4 <updateBufferObj+0x4c>)
 80039be:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80039fc <updateBufferObj+0x54>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 80039c2:	2200      	movs	r2, #0
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 80039c4:	f8d8 3000 	ldr.w	r3, [r8]
 80039c8:	682c      	ldr	r4, [r5, #0]
 80039ca:	440b      	add	r3, r1
 80039cc:	4413      	add	r3, r2
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 80039ce:	3201      	adds	r2, #1
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 80039d0:	fb04 3306 	mla	r3, r4, r6, r3
 80039d4:	f8dc 4000 	ldr.w	r4, [ip]
 80039d8:	5518      	strb	r0, [r3, r4]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 80039da:	783b      	ldrb	r3, [r7, #0]
 80039dc:	4293      	cmp	r3, r2
 80039de:	dcf1      	bgt.n	80039c4 <updateBufferObj+0x1c>
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 80039e0:	3601      	adds	r6, #1
 80039e2:	42b3      	cmp	r3, r6
 80039e4:	db01      	blt.n	80039ea <updateBufferObj+0x42>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1eb      	bne.n	80039c2 <updateBufferObj+0x1a>
		}
	}
}
 80039ea:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80039ee:	4770      	bx	lr
 80039f0:	2400100c 	.word	0x2400100c
 80039f4:	24011688 	.word	0x24011688
 80039f8:	24001008 	.word	0x24001008
 80039fc:	2401168c 	.word	0x2401168c

08003a00 <vGBPPUDrawLineWindow.part.0>:

void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
	if(WY > ly || WY > 143 || WX > 166)
		return;

	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a00:	1a82      	subs	r2, r0, r2
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a02:	4250      	negs	r0, r2
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a08:	f000 0007 	and.w	r0, r0, #7
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a0c:	f1a1 0507 	sub.w	r5, r1, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a10:	f002 0107 	and.w	r1, r2, #7
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a14:	f3c2 06c4 	ubfx	r6, r2, #3, #5
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a18:	bf58      	it	pl
 8003a1a:	4241      	negpl	r1, r0
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a1c:	426f      	negs	r7, r5
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a1e:	ea4f 1646 	mov.w	r6, r6, lsl #5
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a22:	f005 0407 	and.w	r4, r5, #7
 8003a26:	f007 0707 	and.w	r7, r7, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a2a:	ea4f 0141 	mov.w	r1, r1, lsl #1

	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003a2e:	461a      	mov	r2, r3
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a30:	469a      	mov	sl, r3
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a32:	bf58      	it	pl
 8003a34:	427c      	negpl	r4, r7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a36:	b2c9      	uxtb	r1, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003a38:	4630      	mov	r0, r6

	for(int j = (WX - 7); j < 160; j++){
		uint8_t pixelData = 0;

		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a3a:	f248 0780 	movw	r7, #32896	; 0x8080
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a3e:	b2e4      	uxtb	r4, r4
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003a40:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003ac8 <vGBPPUDrawLineWindow.part.0+0xc8>
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a44:	ed2d 8b02 	vpush	{d8}
 8003a48:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a4c:	ee08 1a10 	vmov	s16, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003a50:	465b      	mov	r3, fp
 8003a52:	f7ff ff31 	bl	80038b8 <getTileLineData>
 8003a56:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003a58:	e00d      	b.n	8003a76 <vGBPPUDrawLineWindow.part.0+0x76>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d11c      	bne.n	8003a98 <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003a5e:	f899 0001 	ldrb.w	r0, [r9, #1]
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
		}
		updateBufferObj(pixelData, j);
			pixl_offset++;
 8003a62:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7ff ff9f 	bl	80039a8 <updateBufferObj>
			pixl_offset++;
 8003a6a:	b2e4      	uxtb	r4, r4

			if(pixl_offset == 8){
 8003a6c:	2c08      	cmp	r4, #8
 8003a6e:	d015      	beq.n	8003a9c <vGBPPUDrawLineWindow.part.0+0x9c>
	for(int j = (WX - 7); j < 160; j++){
 8003a70:	3501      	adds	r5, #1
 8003a72:	2da0      	cmp	r5, #160	; 0xa0
 8003a74:	d020      	beq.n	8003ab8 <vGBPPUDrawLineWindow.part.0+0xb8>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a76:	fa08 f304 	lsl.w	r3, r8, r4
 8003a7a:	403b      	ands	r3, r7
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	d01e      	beq.n	8003ac0 <vGBPPUDrawLineWindow.part.0+0xc0>
 8003a82:	dc04      	bgt.n	8003a8e <vGBPPUDrawLineWindow.part.0+0x8e>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e8      	bne.n	8003a5a <vGBPPUDrawLineWindow.part.0+0x5a>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003a88:	f899 0000 	ldrb.w	r0, [r9]
 8003a8c:	e7e9      	b.n	8003a62 <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a8e:	42bb      	cmp	r3, r7
 8003a90:	d102      	bne.n	8003a98 <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003a92:	f899 0003 	ldrb.w	r0, [r9, #3]
 8003a96:	e7e4      	b.n	8003a62 <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e7e2      	b.n	8003a62 <vGBPPUDrawLineWindow.part.0+0x62>
				tile_offset++;
 8003a9c:	3601      	adds	r6, #1
	for(int j = (WX - 7); j < 160; j++){
 8003a9e:	3501      	adds	r5, #1
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003aa0:	465b      	mov	r3, fp
 8003aa2:	4652      	mov	r2, sl
				tile_offset++;
 8003aa4:	b2b6      	uxth	r6, r6
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003aa6:	ee18 1a10 	vmov	r1, s16
				pixl_offset = 0;
 8003aaa:	2400      	movs	r4, #0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003aac:	4630      	mov	r0, r6
 8003aae:	f7ff ff03 	bl	80038b8 <getTileLineData>
	for(int j = (WX - 7); j < 160; j++){
 8003ab2:	2da0      	cmp	r5, #160	; 0xa0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003ab4:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003ab6:	d1de      	bne.n	8003a76 <vGBPPUDrawLineWindow.part.0+0x76>

			}

		}
}
 8003ab8:	ecbd 8b02 	vpop	{d8}
 8003abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003ac0:	f899 0002 	ldrb.w	r0, [r9, #2]
 8003ac4:	e7cd      	b.n	8003a62 <vGBPPUDrawLineWindow.part.0+0x62>
 8003ac6:	bf00      	nop
 8003ac8:	24011678 	.word	0x24011678

08003acc <vGBPPUDrawLineBackground>:
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003acc:	4402      	add	r2, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ace:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003ad2:	f3c2 05c4 	ubfx	r5, r2, #3, #5
 8003ad6:	ea4f 09d1 	mov.w	r9, r1, lsr #3
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ada:	461c      	mov	r4, r3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003adc:	f002 0007 	and.w	r0, r2, #7
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003ae0:	eb09 1945 	add.w	r9, r9, r5, lsl #5
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003ae4:	2700      	movs	r7, #0
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003ae6:	4622      	mov	r2, r4
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003ae8:	f001 0407 	and.w	r4, r1, #7
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003aec:	0041      	lsls	r1, r0, #1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003aee:	4648      	mov	r0, r9
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003af0:	f248 0680 	movw	r6, #32896	; 0x8080
	for(int j = 0; j < 160; j++){
 8003af4:	463d      	mov	r5, r7
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003af6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8003b84 <vGBPPUDrawLineBackground+0xb8>
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003afa:	ed2d 8b02 	vpush	{d8}
 8003afe:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8003b02:	ee08 3a90 	vmov	s17, r3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003b06:	ee08 1a10 	vmov	s16, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	f7ff fed4 	bl	80038b8 <getTileLineData>
 8003b10:	4680      	mov	r8, r0
	for(int j = 0; j < 160; j++){
 8003b12:	e00e      	b.n	8003b32 <vGBPPUDrawLineBackground+0x66>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d101      	bne.n	8003b1c <vGBPPUDrawLineBackground+0x50>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003b18:	f89a 7001 	ldrb.w	r7, [sl, #1]
		pixl_offset++;
 8003b1c:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4638      	mov	r0, r7
		pixl_offset++;
 8003b22:	b2e4      	uxtb	r4, r4
		updateBufferObj(pixelData, j);
 8003b24:	f7ff ff40 	bl	80039a8 <updateBufferObj>
		if(pixl_offset == 8){
 8003b28:	2c08      	cmp	r4, #8
 8003b2a:	d013      	beq.n	8003b54 <vGBPPUDrawLineBackground+0x88>
	for(int j = 0; j < 160; j++){
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	2da0      	cmp	r5, #160	; 0xa0
 8003b30:	d021      	beq.n	8003b76 <vGBPPUDrawLineBackground+0xaa>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b32:	fa08 f304 	lsl.w	r3, r8, r4
 8003b36:	4033      	ands	r3, r6
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d01f      	beq.n	8003b7e <vGBPPUDrawLineBackground+0xb2>
 8003b3e:	dc04      	bgt.n	8003b4a <vGBPPUDrawLineBackground+0x7e>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e7      	bne.n	8003b14 <vGBPPUDrawLineBackground+0x48>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003b44:	f89a 7000 	ldrb.w	r7, [sl]
 8003b48:	e7e8      	b.n	8003b1c <vGBPPUDrawLineBackground+0x50>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b4a:	42b3      	cmp	r3, r6
 8003b4c:	d1e6      	bne.n	8003b1c <vGBPPUDrawLineBackground+0x50>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003b4e:	f89a 7003 	ldrb.w	r7, [sl, #3]
 8003b52:	e7e3      	b.n	8003b1c <vGBPPUDrawLineBackground+0x50>
			tile_offset++;
 8003b54:	f109 0901 	add.w	r9, r9, #1
	for(int j = 0; j < 160; j++){
 8003b58:	3501      	adds	r5, #1
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b5a:	465b      	mov	r3, fp
 8003b5c:	ee18 2a90 	vmov	r2, s17
			tile_offset++;
 8003b60:	fa1f f989 	uxth.w	r9, r9
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b64:	ee18 1a10 	vmov	r1, s16
			pixl_offset = 0;
 8003b68:	2400      	movs	r4, #0
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b6a:	4648      	mov	r0, r9
 8003b6c:	f7ff fea4 	bl	80038b8 <getTileLineData>
	for(int j = 0; j < 160; j++){
 8003b70:	2da0      	cmp	r5, #160	; 0xa0
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b72:	4680      	mov	r8, r0
	for(int j = 0; j < 160; j++){
 8003b74:	d1dd      	bne.n	8003b32 <vGBPPUDrawLineBackground+0x66>
}
 8003b76:	ecbd 8b02 	vpop	{d8}
 8003b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003b7e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8003b82:	e7cb      	b.n	8003b1c <vGBPPUDrawLineBackground+0x50>
 8003b84:	24011678 	.word	0x24011678

08003b88 <vGBPPUDrawLineObjects>:

void vGBPPUDrawLineObjects(uint8_t ly){
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003b90:	b083      	sub	sp, #12
 8003b92:	4680      	mov	r8, r0
 8003b94:	e006      	b.n	8003ba4 <vGBPPUDrawLineObjects+0x1c>
	for(int obj = 0; obj < 40; obj++){
 8003b96:	3404      	adds	r4, #4
 8003b98:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003b9c:	b2a4      	uxth	r4, r4
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	f000 8088 	beq.w	8003cb4 <vGBPPUDrawLineObjects+0x12c>
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003ba4:	4620      	mov	r0, r4
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003ba6:	1ce7      	adds	r7, r4, #3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003ba8:	f7ff fd2a 	bl	8003600 <ucGBMemoryRead>
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003bac:	1c63      	adds	r3, r4, #1
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003bae:	f1a0 0210 	sub.w	r2, r0, #16
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003bb2:	b2bf      	uxth	r7, r7
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003bb4:	b298      	uxth	r0, r3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003bb6:	fa5f f982 	uxtb.w	r9, r2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003bba:	f7ff fd21 	bl	8003600 <ucGBMemoryRead>
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003bbe:	1ca3      	adds	r3, r4, #2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003bc0:	4606      	mov	r6, r0
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003bc2:	b298      	uxth	r0, r3
 8003bc4:	f7ff fd1c 	bl	8003600 <ucGBMemoryRead>
 8003bc8:	4605      	mov	r5, r0
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7ff fd18 	bl	8003600 <ucGBMemoryRead>
 8003bd0:	2107      	movs	r1, #7
 8003bd2:	f7fe ffe9 	bl	8002ba8 <checkbit>
		uint8_t objYFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f7ff fd12 	bl	8003600 <ucGBMemoryRead>
 8003bdc:	2106      	movs	r1, #6
 8003bde:	f7fe ffe3 	bl	8002ba8 <checkbit>
 8003be2:	4683      	mov	fp, r0
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003be4:	4638      	mov	r0, r7
 8003be6:	f7ff fd0b 	bl	8003600 <ucGBMemoryRead>
 8003bea:	2105      	movs	r1, #5
 8003bec:	f7fe ffdc 	bl	8002ba8 <checkbit>
 8003bf0:	4603      	mov	r3, r0
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003bf2:	4638      	mov	r0, r7
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003bf4:	461f      	mov	r7, r3
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003bf6:	f7ff fd03 	bl	8003600 <ucGBMemoryRead>
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	f7fe ffd4 	bl	8002ba8 <checkbit>

		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003c00:	45c1      	cmp	r9, r8
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003c02:	4682      	mov	sl, r0
		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003c04:	d8c7      	bhi.n	8003b96 <vGBPPUDrawLineObjects+0xe>
 8003c06:	f109 0107 	add.w	r1, r9, #7
 8003c0a:	4541      	cmp	r1, r8
 8003c0c:	dbc3      	blt.n	8003b96 <vGBPPUDrawLineObjects+0xe>

			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003c0e:	eba8 0009 	sub.w	r0, r8, r9
 8003c12:	f1bb 0f00 	cmp.w	fp, #0
 8003c16:	d04a      	beq.n	8003cae <vGBPPUDrawLineObjects+0x126>
 8003c18:	f1c0 0007 	rsb	r0, r0, #7
 8003c1c:	0040      	lsls	r0, r0, #1
 8003c1e:	b2c0      	uxtb	r0, r0
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003c20:	f505 6200 	add.w	r2, r5, #2048	; 0x800
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];

			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003c24:	2500      	movs	r5, #0
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c26:	3e08      	subs	r6, #8

				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
				uint8_t pixelData = 0;

				switch (colorInfo) {
 8003c28:	f248 0b80 	movw	fp, #32896	; 0x8080
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003c2c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8003c30:	b2f6      	uxtb	r6, r6
 8003c32:	b280      	uxth	r0, r0
 8003c34:	f7ff fd52 	bl	80036dc <usGBMemoryReadShort>
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003c38:	4920      	ldr	r1, [pc, #128]	; (8003cbc <vGBPPUDrawLineObjects+0x134>)
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <vGBPPUDrawLineObjects+0x138>)
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003c3c:	4602      	mov	r2, r0
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003c3e:	45aa      	cmp	sl, r5
 8003c40:	bf08      	it	eq
 8003c42:	460b      	moveq	r3, r1
 8003c44:	469a      	mov	sl, r3
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003c46:	b1bf      	cbz	r7, 8003c78 <vGBPPUDrawLineObjects+0xf0>
 8003c48:	fa42 f105 	asr.w	r1, r2, r5
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <vGBPPUDrawLineObjects+0x13c>)
 8003c4e:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
 8003c52:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003c54:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003c58:	d018      	beq.n	8003c8c <vGBPPUDrawLineObjects+0x104>
 8003c5a:	d81a      	bhi.n	8003c92 <vGBPPUDrawLineObjects+0x10a>
 8003c5c:	b1f1      	cbz	r1, 8003c9c <vGBPPUDrawLineObjects+0x114>
 8003c5e:	2980      	cmp	r1, #128	; 0x80
 8003c60:	d104      	bne.n	8003c6c <vGBPPUDrawLineObjects+0xe4>
					case 0x0000: pixelData = palette[0]; break;
					case 0x0080: pixelData = palette[1]; break;
 8003c62:	f89a 0001 	ldrb.w	r0, [sl, #1]
					case 0x8000: pixelData = palette[2]; break;
					case 0x8080: pixelData = palette[3]; break;
				}

				if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003c66:	b108      	cbz	r0, 8003c6c <vGBPPUDrawLineObjects+0xe4>
 8003c68:	2e9f      	cmp	r6, #159	; 0x9f
 8003c6a:	dd1a      	ble.n	8003ca2 <vGBPPUDrawLineObjects+0x11a>
			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	3601      	adds	r6, #1
 8003c70:	2d08      	cmp	r5, #8
 8003c72:	d090      	beq.n	8003b96 <vGBPPUDrawLineObjects+0xe>
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003c74:	2f00      	cmp	r7, #0
 8003c76:	d1e7      	bne.n	8003c48 <vGBPPUDrawLineObjects+0xc0>
 8003c78:	fa02 f105 	lsl.w	r1, r2, r5
 8003c7c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8003c80:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003c84:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003c86:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003c8a:	d1e6      	bne.n	8003c5a <vGBPPUDrawLineObjects+0xd2>
					case 0x8000: pixelData = palette[2]; break;
 8003c8c:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8003c90:	e7e9      	b.n	8003c66 <vGBPPUDrawLineObjects+0xde>
				switch (colorInfo) {
 8003c92:	4559      	cmp	r1, fp
 8003c94:	d1ea      	bne.n	8003c6c <vGBPPUDrawLineObjects+0xe4>
					case 0x8080: pixelData = palette[3]; break;
 8003c96:	f89a 0003 	ldrb.w	r0, [sl, #3]
 8003c9a:	e7e4      	b.n	8003c66 <vGBPPUDrawLineObjects+0xde>
					case 0x0000: pixelData = palette[0]; break;
 8003c9c:	f89a 0000 	ldrb.w	r0, [sl]
 8003ca0:	e7e1      	b.n	8003c66 <vGBPPUDrawLineObjects+0xde>
					updateBufferObj(pixelData, xCoordinate + pixelNum);
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	9201      	str	r2, [sp, #4]
 8003ca6:	f7ff fe7f 	bl	80039a8 <updateBufferObj>
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	e7de      	b.n	8003c6c <vGBPPUDrawLineObjects+0xe4>
			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003cae:	0040      	lsls	r0, r0, #1
 8003cb0:	b2c0      	uxtb	r0, r0
 8003cb2:	e7b5      	b.n	8003c20 <vGBPPUDrawLineObjects+0x98>
				}
			}

		}
	}
}
 8003cb4:	b003      	add	sp, #12
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	24011694 	.word	0x24011694
 8003cc0:	2401167c 	.word	0x2401167c
 8003cc4:	ffff8080 	.word	0xffff8080

08003cc8 <vGBPPUDrawLine>:
 * @param ly lY Register Data
 * @param SCX Scroll X Register
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	4604      	mov	r4, r0
 8003cce:	460e      	mov	r6, r1
 8003cd0:	4617      	mov	r7, r2
	// update Palettes
	vCheckBGP();
 8003cd2:	f7ff fd8b 	bl	80037ec <vCheckBGP>
	vCheckOBP0();
 8003cd6:	f7ff fdab 	bl	8003830 <vCheckOBP0>
	vCheckOBP1();
 8003cda:	f7ff fdcb 	bl	8003874 <vCheckOBP1>
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003cde:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003ce2:	f7ff fc8d 	bl	8003600 <ucGBMemoryRead>
	uint16_t TileDataAddr = usGetBackWinTileDataSel();
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <vGBPPUDrawLine+0xf8>)
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003ce8:	4602      	mov	r2, r0
	lineadd = scaleAmount * 160;

	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003cea:	f64f 7040 	movw	r0, #65344	; 0xff40
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003cee:	781b      	ldrb	r3, [r3, #0]
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003cf0:	f012 0f10 	tst.w	r2, #16
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003cf4:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <vGBPPUDrawLine+0xfc>)
 8003cf6:	fb14 f103 	smulbb	r1, r4, r3
	lineadd = scaleAmount * 160;
 8003cfa:	eb03 0583 	add.w	r5, r3, r3, lsl #2
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003cfe:	fb03 f301 	mul.w	r3, r3, r1
	lineadd = scaleAmount * 160;
 8003d02:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8003d06:	4930      	ldr	r1, [pc, #192]	; (8003dc8 <vGBPPUDrawLine+0x100>)
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	lineadd = scaleAmount * 160;
 8003d0c:	600d      	str	r5, [r1, #0]
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d0e:	bf18      	it	ne
 8003d10:	f44f 4500 	movne.w	r5, #32768	; 0x8000
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d14:	ea4f 1343 	mov.w	r3, r3, lsl #5
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d18:	bf08      	it	eq
 8003d1a:	f44f 4508 	moveq.w	r5, #34816	; 0x8800
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d1e:	6013      	str	r3, [r2, #0]
	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003d20:	f7ff fc6e 	bl	8003600 <ucGBMemoryRead>
 8003d24:	07c1      	lsls	r1, r0, #31
 8003d26:	d407      	bmi.n	8003d38 <vGBPPUDrawLine+0x70>
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
	}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003d28:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d2c:	f7ff fc68 	bl	8003600 <ucGBMemoryRead>
 8003d30:	0783      	lsls	r3, r0, #30
 8003d32:	d43e      	bmi.n	8003db2 <vGBPPUDrawLine+0xea>
		vGBPPUDrawLineObjects(ly);

}
 8003d34:	b003      	add	sp, #12
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003d38:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d3c:	f7ff fc60 	bl	8003600 <ucGBMemoryRead>
 8003d40:	f010 0f08 	tst.w	r0, #8
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003d44:	4631      	mov	r1, r6
 8003d46:	463a      	mov	r2, r7
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003d48:	bf14      	ite	ne
 8003d4a:	f44f 461c 	movne.w	r6, #39936	; 0x9c00
 8003d4e:	f44f 4618 	moveq.w	r6, #38912	; 0x9800
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003d52:	462b      	mov	r3, r5
 8003d54:	4620      	mov	r0, r4
 8003d56:	9600      	str	r6, [sp, #0]
 8003d58:	f7ff feb8 	bl	8003acc <vGBPPUDrawLineBackground>
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 8003d5c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d60:	f7ff fc4e 	bl	8003600 <ucGBMemoryRead>
 8003d64:	0682      	lsls	r2, r0, #26
 8003d66:	d5df      	bpl.n	8003d28 <vGBPPUDrawLine+0x60>
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
 8003d68:	f64f 704b 	movw	r0, #65355	; 0xff4b
 8003d6c:	f7ff fc48 	bl	8003600 <ucGBMemoryRead>
 8003d70:	4607      	mov	r7, r0
 8003d72:	f64f 704a 	movw	r0, #65354	; 0xff4a
 8003d76:	f7ff fc43 	bl	8003600 <ucGBMemoryRead>
 8003d7a:	4606      	mov	r6, r0
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003d7c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d80:	f7ff fc3e 	bl	8003600 <ucGBMemoryRead>
 8003d84:	f010 0f40 	tst.w	r0, #64	; 0x40
	if(WY > ly || WY > 143 || WX > 166)
 8003d88:	4623      	mov	r3, r4
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003d8a:	bf14      	ite	ne
 8003d8c:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 8003d90:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
	if(WY > ly || WY > 143 || WX > 166)
 8003d94:	2c8f      	cmp	r4, #143	; 0x8f
 8003d96:	bf28      	it	cs
 8003d98:	238f      	movcs	r3, #143	; 0x8f
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	d8c4      	bhi.n	8003d28 <vGBPPUDrawLine+0x60>
 8003d9e:	2fa6      	cmp	r7, #166	; 0xa6
 8003da0:	d8c2      	bhi.n	8003d28 <vGBPPUDrawLine+0x60>
 8003da2:	9200      	str	r2, [sp, #0]
 8003da4:	462b      	mov	r3, r5
 8003da6:	4632      	mov	r2, r6
 8003da8:	4639      	mov	r1, r7
 8003daa:	4620      	mov	r0, r4
 8003dac:	f7ff fe28 	bl	8003a00 <vGBPPUDrawLineWindow.part.0>
 8003db0:	e7ba      	b.n	8003d28 <vGBPPUDrawLine+0x60>
		vGBPPUDrawLineObjects(ly);
 8003db2:	4620      	mov	r0, r4
}
 8003db4:	b003      	add	sp, #12
 8003db6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		vGBPPUDrawLineObjects(ly);
 8003dba:	f7ff bee5 	b.w	8003b88 <vGBPPUDrawLineObjects>
 8003dbe:	bf00      	nop
 8003dc0:	2400100c 	.word	0x2400100c
 8003dc4:	2401168c 	.word	0x2401168c
 8003dc8:	24011688 	.word	0x24011688

08003dcc <gbPPUStep>:
void gbPPUStep(){
 8003dcc:	b570      	push	{r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003dce:	f64f 7040 	movw	r0, #65344	; 0xff40
void gbPPUStep(){
 8003dd2:	b082      	sub	sp, #8
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003dd4:	f7ff fc14 	bl	8003600 <ucGBMemoryRead>
 8003dd8:	0601      	lsls	r1, r0, #24
 8003dda:	d401      	bmi.n	8003de0 <gbPPUStep+0x14>
}
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
		tStatesTotal += ucGetTstate();
 8003de0:	4c4e      	ldr	r4, [pc, #312]	; (8003f1c <gbPPUStep+0x150>)
 8003de2:	f7fe fdb7 	bl	8002954 <ucGetTstate>
			ly++;
 8003de6:	4d4e      	ldr	r5, [pc, #312]	; (8003f20 <gbPPUStep+0x154>)
		tStatesTotal += ucGetTstate();
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003dec:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8003df0:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003df2:	d81f      	bhi.n	8003e34 <gbPPUStep+0x68>
		if (ly > 143){													// vblank
 8003df4:	782d      	ldrb	r5, [r5, #0]
 8003df6:	2d8f      	cmp	r5, #143	; 0x8f
 8003df8:	d808      	bhi.n	8003e0c <gbPPUStep+0x40>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	2b50      	cmp	r3, #80	; 0x50
 8003dfe:	d840      	bhi.n	8003e82 <gbPPUStep+0xb6>
 8003e00:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <gbPPUStep+0x158>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d0e9      	beq.n	8003ddc <gbPPUStep+0x10>
				setMode(MODE_2);
 8003e08:	2002      	movs	r0, #2
 8003e0a:	e047      	b.n	8003e9c <gbPPUStep+0xd0>
			setMode(MODE_1);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7ff fd97 	bl	8003940 <setMode>
			if(checkbit(ucGBMemoryRead(STAT_ADDR), 4))
 8003e12:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003e16:	f7ff fbf3 	bl	8003600 <ucGBMemoryRead>
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	f7fe fec4 	bl	8002ba8 <checkbit>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d156      	bne.n	8003ed2 <gbPPUStep+0x106>
			vGBMemorySetBit(IF_ADDR, 0);
 8003e24:	2100      	movs	r1, #0
					vGBMemorySetBit(IF_ADDR, 1);
 8003e26:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003e2a:	b002      	add	sp, #8
 8003e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vGBMemorySetBit(IF_ADDR, 1);
 8003e30:	f7ff bb9e 	b.w	8003570 <vGBMemorySetBit>
			ly++;
 8003e34:	7828      	ldrb	r0, [r5, #0]
 8003e36:	3001      	adds	r0, #1
 8003e38:	b2c0      	uxtb	r0, r0
 8003e3a:	7028      	strb	r0, [r5, #0]
			LYC_check(ly);
 8003e3c:	f7ff fd5e 	bl	80038fc <LYC_check>
			if(ly > 153){												// end of vblank
 8003e40:	7829      	ldrb	r1, [r5, #0]
 8003e42:	2999      	cmp	r1, #153	; 0x99
 8003e44:	d914      	bls.n	8003e70 <gbPPUStep+0xa4>
				if(n % 2){
 8003e46:	4e38      	ldr	r6, [pc, #224]	; (8003f28 <gbPPUStep+0x15c>)
 8003e48:	6833      	ldr	r3, [r6, #0]
 8003e4a:	07da      	lsls	r2, r3, #31
 8003e4c:	d45d      	bmi.n	8003f0a <gbPPUStep+0x13e>
				n++;
 8003e4e:	3301      	adds	r3, #1
				setMode(MODE_2);
 8003e50:	2002      	movs	r0, #2
				n++;
 8003e52:	6033      	str	r3, [r6, #0]
				setMode(MODE_2);
 8003e54:	f7ff fd74 	bl	8003940 <setMode>
				ly = 0;
 8003e58:	2300      	movs	r3, #0
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003e5a:	f64f 7041 	movw	r0, #65345	; 0xff41
				ly = 0;
 8003e5e:	702b      	strb	r3, [r5, #0]
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003e60:	f7ff fbce 	bl	8003600 <ucGBMemoryRead>
 8003e64:	2105      	movs	r1, #5
 8003e66:	f7fe fe9f 	bl	8002ba8 <checkbit>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d147      	bne.n	8003efe <gbPPUStep+0x132>
 8003e6e:	7829      	ldrb	r1, [r5, #0]
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 8003e70:	f64f 7044 	movw	r0, #65348	; 0xff44
 8003e74:	f7ff fbd8 	bl	8003628 <vGBMemoryWrite>
			tStatesTotal -= 456;
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	e7b8      	b.n	8003df4 <gbPPUStep+0x28>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 8003e82:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8003e86:	2aab      	cmp	r2, #171	; 0xab
 8003e88:	d80d      	bhi.n	8003ea6 <gbPPUStep+0xda>
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <gbPPUStep+0x158>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d0a4      	beq.n	8003ddc <gbPPUStep+0x10>
				if (n % 2 == 0){
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <gbPPUStep+0x15c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	07db      	lsls	r3, r3, #31
 8003e98:	d521      	bpl.n	8003ede <gbPPUStep+0x112>
				setMode(MODE_3);
 8003e9a:	2003      	movs	r0, #3
}
 8003e9c:	b002      	add	sp, #8
 8003e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				setMode(MODE_3);
 8003ea2:	f7ff bd4d 	b.w	8003940 <setMode>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0){										// hblank
 8003ea6:	3bfd      	subs	r3, #253	; 0xfd
 8003ea8:	2bcb      	cmp	r3, #203	; 0xcb
 8003eaa:	d897      	bhi.n	8003ddc <gbPPUStep+0x10>
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <gbPPUStep+0x158>)
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	d093      	beq.n	8003ddc <gbPPUStep+0x10>
	Mode = mode;
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 8003eb8:	f7ff fc7a 	bl	80037b0 <setMode.part.0>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 3))
 8003ebc:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003ec0:	f7ff fb9e 	bl	8003600 <ucGBMemoryRead>
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	f7fe fe6f 	bl	8002ba8 <checkbit>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d086      	beq.n	8003ddc <gbPPUStep+0x10>
					vGBMemorySetBit(IF_ADDR, 1);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	e7a9      	b.n	8003e26 <gbPPUStep+0x5a>
				vGBMemorySetBit(IF_ADDR, 1);
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8003ed8:	f7ff fb4a 	bl	8003570 <vGBMemorySetBit>
 8003edc:	e7a2      	b.n	8003e24 <gbPPUStep+0x58>
					vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8003ede:	f64f 7043 	movw	r0, #65347	; 0xff43
 8003ee2:	f7ff fb8d 	bl	8003600 <ucGBMemoryRead>
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	f64f 7042 	movw	r0, #65346	; 0xff42
 8003eec:	9101      	str	r1, [sp, #4]
 8003eee:	f7ff fb87 	bl	8003600 <ucGBMemoryRead>
 8003ef2:	9901      	ldr	r1, [sp, #4]
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff fee6 	bl	8003cc8 <vGBPPUDrawLine>
 8003efc:	e7cd      	b.n	8003e9a <gbPPUStep+0xce>
					vGBMemorySetBit(IF_ADDR, 1);
 8003efe:	2101      	movs	r1, #1
 8003f00:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8003f04:	f7ff fb34 	bl	8003570 <vGBMemorySetBit>
 8003f08:	e7b1      	b.n	8003e6e <gbPPUStep+0xa2>
					displayFrameBuffer(gb_frame, scaleAmount);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <gbPPUStep+0x160>)
 8003f0c:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <gbPPUStep+0x164>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	7811      	ldrb	r1, [r2, #0]
 8003f12:	f000 fb03 	bl	800451c <displayFrameBuffer>
 8003f16:	6833      	ldr	r3, [r6, #0]
 8003f18:	e799      	b.n	8003e4e <gbPPUStep+0x82>
 8003f1a:	bf00      	nop
 8003f1c:	24011680 	.word	0x24011680
 8003f20:	240010a5 	.word	0x240010a5
 8003f24:	24011684 	.word	0x24011684
 8003f28:	240010a8 	.word	0x240010a8
 8003f2c:	24001008 	.word	0x24001008
 8003f30:	2400100c 	.word	0x2400100c

08003f34 <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 8003f34:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <getRomPointer+0x8>)
}
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	24001010 	.word	0x24001010

08003f40 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003f42:	2004      	movs	r0, #4
{
 8003f44:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003f46:	f004 f825 	bl	8007f94 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <SystemClock_Config+0xc8>)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <SystemClock_Config+0xcc>)
 8003f54:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003f58:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f5e:	f002 0201 	and.w	r2, r2, #1
 8003f62:	9201      	str	r2, [sp, #4]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f6a:	619a      	str	r2, [r3, #24]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003f76:	6983      	ldr	r3, [r0, #24]
 8003f78:	049b      	lsls	r3, r3, #18
 8003f7a:	d5fc      	bpl.n	8003f76 <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f7c:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003f82:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f84:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8003f86:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003f88:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003f8a:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f8c:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003f8e:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f90:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003f92:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003f94:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8003f96:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003f98:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f9a:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003f9c:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003f9e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003fa0:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fa4:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003fa8:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003fac:	f004 f82e 	bl	800800c <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8003fb0:	b108      	cbz	r0, 8003fb6 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003fb6:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003fb8:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fba:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003fc0:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003fc6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fc8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003fcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003fd0:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003fd4:	f004 fbb0 	bl	8008738 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8003fd8:	b108      	cbz	r0, 8003fde <SystemClock_Config+0x9e>
 8003fda:	b672      	cpsid	i
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <SystemClock_Config+0xd0>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8003fe8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003fec:	f042 0202 	orr.w	r2, r2, #2
 8003ff0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004000:	f001 fff4 	bl	8005fec <HAL_EnableCompensationCell>
}
 8004004:	b01e      	add	sp, #120	; 0x78
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	58000400 	.word	0x58000400
 800400c:	58024800 	.word	0x58024800
 8004010:	58024400 	.word	0x58024400

08004014 <PeriphCommonClock_Config>:
{
 8004014:	b530      	push	{r4, r5, lr}
 8004016:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004018:	229c      	movs	r2, #156	; 0x9c
 800401a:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800401c:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800401e:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004020:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004022:	f006 f921 	bl	800a268 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004026:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800402a:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800402c:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800402e:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004030:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004032:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8004034:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004036:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8004038:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800403a:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800403c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004040:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004044:	f004 fdbc 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 8004048:	b108      	cbz	r0, 800404e <PeriphCommonClock_Config+0x3a>
 800404a:	b672      	cpsid	i
  while (1)
 800404c:	e7fe      	b.n	800404c <PeriphCommonClock_Config+0x38>
}
 800404e:	b031      	add	sp, #196	; 0xc4
 8004050:	bd30      	pop	{r4, r5, pc}
 8004052:	bf00      	nop

08004054 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8004054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004058:	49bb      	ldr	r1, [pc, #748]	; (8004348 <main+0x2f4>)
 800405a:	e002      	b.n	8004062 <main+0xe>
 800405c:	3b01      	subs	r3, #1
 800405e:	f000 811e 	beq.w	800429e <main+0x24a>
 8004062:	680a      	ldr	r2, [r1, #0]
 8004064:	0410      	lsls	r0, r2, #16
 8004066:	d4f9      	bmi.n	800405c <main+0x8>
{
 8004068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	b092      	sub	sp, #72	; 0x48
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800406e:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 8004070:	f002 fe02 	bl	8006c78 <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004074:	4ab5      	ldr	r2, [pc, #724]	; (800434c <main+0x2f8>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800407a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800407e:	a80b      	add	r0, sp, #44	; 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004080:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004084:	930e      	str	r3, [sp, #56]	; 0x38
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004086:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800408a:	f002 fe17 	bl	8006cbc <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800408e:	2004      	movs	r0, #4
 8004090:	f002 fe02 	bl	8006c98 <HAL_MPU_Enable>
  HAL_Init();
 8004094:	f001 ff46 	bl	8005f24 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004098:	4aad      	ldr	r2, [pc, #692]	; (8004350 <main+0x2fc>)
 800409a:	6953      	ldr	r3, [r2, #20]
 800409c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80040a0:	d111      	bne.n	80040c6 <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040a6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80040aa:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80040ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040b2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80040b6:	6953      	ldr	r3, [r2, #20]
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80040be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040c2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80040c6:	4aa2      	ldr	r2, [pc, #648]	; (8004350 <main+0x2fc>)
 80040c8:	6953      	ldr	r3, [r2, #20]
 80040ca:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80040ce:	d124      	bne.n	800411a <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80040d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80040d4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80040d8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80040dc:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80040e0:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80040e4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80040e8:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80040ea:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80040ee:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80040f0:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80040f4:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80040f6:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	d1f8      	bne.n	80040f0 <main+0x9c>
    } while(sets-- != 0U);
 80040fe:	3820      	subs	r0, #32
 8004100:	f110 0f20 	cmn.w	r0, #32
 8004104:	d1f1      	bne.n	80040ea <main+0x96>
 8004106:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800410a:	6953      	ldr	r3, [r2, #20]
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6153      	str	r3, [r2, #20]
 8004112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004116:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 800411a:	4c8b      	ldr	r4, [pc, #556]	; (8004348 <main+0x2f4>)
  SystemClock_Config();
 800411c:	f7ff ff10 	bl	8003f40 <SystemClock_Config>
  PeriphCommonClock_Config();
 8004120:	f7ff ff78 	bl	8004014 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8004124:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8004126:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800412a:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 800412c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004130:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8004134:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8004140:	f003 fcb2 	bl	8007aa8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8004144:	2100      	movs	r1, #0
 8004146:	4608      	mov	r0, r1
 8004148:	f003 fcbc 	bl	8007ac4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800414c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004150:	e002      	b.n	8004158 <main+0x104>
 8004152:	3b01      	subs	r3, #1
 8004154:	f000 80a5 	beq.w	80042a2 <main+0x24e>
 8004158:	682a      	ldr	r2, [r5, #0]
 800415a:	0412      	lsls	r2, r2, #16
 800415c:	d5f9      	bpl.n	8004152 <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800415e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004162:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800416c:	f44f 7880 	mov.w	r8, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004170:	a90b      	add	r1, sp, #44	; 0x2c
 8004172:	4878      	ldr	r0, [pc, #480]	; (8004354 <main+0x300>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004174:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004178:	f44f 2900 	mov.w	r9, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004180:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 8004182:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8004368 <main+0x314>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004186:	4033      	ands	r3, r6
 8004188:	9302      	str	r3, [sp, #8]
 800418a:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800418c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004196:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800419a:	4013      	ands	r3, r2
 800419c:	9303      	str	r3, [sp, #12]
 800419e:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80041ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	9304      	str	r3, [sp, #16]
 80041b6:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80041c4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80041dc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	9306      	str	r3, [sp, #24]
 80041e6:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041ec:	f043 0320 	orr.w	r3, r3, #32
 80041f0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80041f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041fa:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80041fe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004206:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800420a:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800420c:	f003 fb20 	bl	8007850 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004212:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004216:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800421a:	a90b      	add	r1, sp, #44	; 0x2c
 800421c:	484e      	ldr	r0, [pc, #312]	; (8004358 <main+0x304>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800421e:	ea43 0308 	orr.w	r3, r3, r8
 8004222:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004226:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800422a:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800422c:	ea03 0308 	and.w	r3, r3, r8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004238:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800423a:	f003 fb09 	bl	8007850 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800423e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004242:	a90b      	add	r1, sp, #44	; 0x2c
 8004244:	4845      	ldr	r0, [pc, #276]	; (800435c <main+0x308>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004246:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800424e:	f003 faff 	bl	8007850 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8004252:	4b43      	ldr	r3, [pc, #268]	; (8004360 <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004254:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004256:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 800425a:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 800425c:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 800425e:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004262:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004266:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800426a:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800426e:	f8ca 7010 	str.w	r7, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004272:	e9ca 3900 	strd	r3, r9, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004276:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800427a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800427e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8004282:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004286:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800428a:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800428e:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004292:	f002 fb09 	bl	80068a8 <HAL_ADC_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	b128      	cbz	r0, 80042a6 <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 800429a:	b672      	cpsid	i
  while (1)
 800429c:	e7fe      	b.n	800429c <main+0x248>
 800429e:	b672      	cpsid	i
 80042a0:	e7fe      	b.n	80042a0 <main+0x24c>
 80042a2:	b672      	cpsid	i
 80042a4:	e7fe      	b.n	80042a4 <main+0x250>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80042a6:	a908      	add	r1, sp, #32
 80042a8:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80042aa:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80042ac:	f002 fc08 	bl	8006ac0 <HAL_ADCEx_MultiModeConfigChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	b108      	cbz	r0, 80042b8 <main+0x264>
 80042b4:	b672      	cpsid	i
  while (1)
 80042b6:	e7fe      	b.n	80042b6 <main+0x262>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042b8:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042ba:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042be:	4650      	mov	r0, sl
 80042c0:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80042c2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 80042c4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 80042c8:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042ca:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042cc:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 80042ce:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042d2:	f001 ff21 	bl	8006118 <HAL_ADC_ConfigChannel>
 80042d6:	4603      	mov	r3, r0
 80042d8:	b108      	cbz	r0, 80042de <main+0x28a>
 80042da:	b672      	cpsid	i
  while (1)
 80042dc:	e7fe      	b.n	80042dc <main+0x288>
  hadc3.Instance = ADC3;
 80042de:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800436c <main+0x318>
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <main+0x310>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80042e4:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80042e6:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80042e8:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80042ec:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80042f0:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80042f4:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 80042f8:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 80042fc:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004300:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004304:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8004308:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800430c:	e9ca 9301 	strd	r9, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004310:	e9ca 3703 	strd	r3, r7, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004314:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004318:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800431c:	f002 fac4 	bl	80068a8 <HAL_ADC_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	b108      	cbz	r0, 8004328 <main+0x2d4>
 8004324:	b672      	cpsid	i
  while (1)
 8004326:	e7fe      	b.n	8004326 <main+0x2d2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004328:	a90b      	add	r1, sp, #44	; 0x2c
 800432a:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 800432c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004330:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004334:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 8004338:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800433c:	f001 feec 	bl	8006118 <HAL_ADC_ConfigChannel>
 8004340:	4604      	mov	r4, r0
 8004342:	b1a8      	cbz	r0, 8004370 <main+0x31c>
 8004344:	b672      	cpsid	i
  while (1)
 8004346:	e7fe      	b.n	8004346 <main+0x2f2>
 8004348:	58024400 	.word	0x58024400
 800434c:	03000018 	.word	0x03000018
 8004350:	e000ed00 	.word	0xe000ed00
 8004354:	58020000 	.word	0x58020000
 8004358:	58022000 	.word	0x58022000
 800435c:	58020800 	.word	0x58020800
 8004360:	40022000 	.word	0x40022000
 8004364:	58026000 	.word	0x58026000
 8004368:	24011760 	.word	0x24011760
 800436c:	240117c4 	.word	0x240117c4
  stm32h7_displaySetPalette();
 8004370:	f000 f836 	bl	80043e0 <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8004374:	4631      	mov	r1, r6
 8004376:	4620      	mov	r0, r4
 8004378:	f001 fc72 	bl	8005c60 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800437c:	4813      	ldr	r0, [pc, #76]	; (80043cc <main+0x378>)
 800437e:	f005 feab 	bl	800a0d8 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8004382:	4620      	mov	r0, r4
 8004384:	f005 feda 	bl	800a13c <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	f005 ff2a 	bl	800a1e4 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f005 feea 	bl	800a16c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8004398:	480d      	ldr	r0, [pc, #52]	; (80043d0 <main+0x37c>)
 800439a:	f005 fedf 	bl	800a15c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800439e:	480d      	ldr	r0, [pc, #52]	; (80043d4 <main+0x380>)
 80043a0:	f005 feec 	bl	800a17c <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <main+0x384>)
 80043a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	f7ff f884 	bl	80034b8 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 80043b0:	4641      	mov	r1, r8
 80043b2:	480a      	ldr	r0, [pc, #40]	; (80043dc <main+0x388>)
 80043b4:	f7ff f880 	bl	80034b8 <vGBMemoryLoad>
  vGBMemoryInit();
 80043b8:	f7ff f86e 	bl	8003498 <vGBMemoryInit>
  vSetFrameBuffer();
 80043bc:	f7ff fa06 	bl	80037cc <vSetFrameBuffer>
	  vGBCPUboot();
 80043c0:	f7fe fbb2 	bl	8002b28 <vGBCPUboot>
	  gbPPUStep();
 80043c4:	f7ff fd02 	bl	8003dcc <gbPPUStep>
  while (1)
 80043c8:	e7fa      	b.n	80043c0 <main+0x36c>
 80043ca:	bf00      	nop
 80043cc:	08012514 	.word	0x08012514
 80043d0:	ff0000ff 	.word	0xff0000ff
 80043d4:	2400106c 	.word	0x2400106c
 80043d8:	24001010 	.word	0x24001010
 80043dc:	080122a0 	.word	0x080122a0

080043e0 <stm32h7_displaySetPalette>:
};

static uint32_t clut_argb8888[256];
DMA2D_CLUTCfgTypeDef clut_cfg;

void stm32h7_displaySetPalette(){
 80043e0:	b430      	push	{r4, r5}

	clut_argb8888[1] = LIGHTEST_GREEN;
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <stm32h7_displaySetPalette+0x24>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80043e4:	2000      	movs	r0, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 80043e6:	4c08      	ldr	r4, [pc, #32]	; (8004408 <stm32h7_displaySetPalette+0x28>)
	clut_cfg.Size = 255;
 80043e8:	21ff      	movs	r1, #255	; 0xff
	clut_argb8888[2] = LIGHT_GREEN;
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <stm32h7_displaySetPalette+0x2c>)
	clut_argb8888[3] = DARK_GREEN;
 80043ec:	4d08      	ldr	r5, [pc, #32]	; (8004410 <stm32h7_displaySetPalette+0x30>)
	clut_argb8888[1] = LIGHTEST_GREEN;
 80043ee:	605c      	str	r4, [r3, #4]
	clut_argb8888[2] = LIGHT_GREEN;
 80043f0:	609a      	str	r2, [r3, #8]
	clut_argb8888[4] = DARKEST_GREEN;
 80043f2:	4c08      	ldr	r4, [pc, #32]	; (8004414 <stm32h7_displaySetPalette+0x34>)
	clut_cfg.pCLUT = clut_argb8888;
 80043f4:	4a08      	ldr	r2, [pc, #32]	; (8004418 <stm32h7_displaySetPalette+0x38>)
	clut_argb8888[4] = DARKEST_GREEN;
 80043f6:	e9c3 5403 	strd	r5, r4, [r3, #12]
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 80043fa:	e9c2 3000 	strd	r3, r0, [r2]
}
 80043fe:	bc30      	pop	{r4, r5}
	clut_cfg.Size = 255;
 8004400:	6091      	str	r1, [r2, #8]
}
 8004402:	4770      	bx	lr
 8004404:	240010ac 	.word	0x240010ac
 8004408:	ff9bbc0f 	.word	0xff9bbc0f
 800440c:	ff8bac0f 	.word	0xff8bac0f
 8004410:	ff306230 	.word	0xff306230
 8004414:	ff0f380f 	.word	0xff0f380f
 8004418:	2401187c 	.word	0x2401187c

0800441c <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_LTDC_LineEventCallback+0x3c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2a00      	cmp	r2, #0
 8004422:	db15      	blt.n	8004450 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004424:	490d      	ldr	r1, [pc, #52]	; (800445c <HAL_LTDC_LineEventCallback+0x40>)
 8004426:	6802      	ldr	r2, [r0, #0]
{
 8004428:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800442a:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 800442c:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004430:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8004434:	4d0a      	ldr	r5, [pc, #40]	; (8004460 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004436:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 800443a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800443c:	f041 0101 	orr.w	r1, r1, #1
 8004440:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004442:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8004448:	601c      	str	r4, [r3, #0]
}
 800444a:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 800444c:	f003 bce6 	b.w	8007e1c <HAL_LTDC_ProgramLineEvent>
 8004450:	2100      	movs	r1, #0
 8004452:	f003 bce3 	b.w	8007e1c <HAL_LTDC_ProgramLineEvent>
 8004456:	bf00      	nop
 8004458:	24001014 	.word	0x24001014
 800445c:	080123a0 	.word	0x080123a0
 8004460:	240014ac 	.word	0x240014ac

08004464 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 800446a:	4c29      	ldr	r4, [pc, #164]	; (8004510 <CopyBuffer+0xac>)
 800446c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004470:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8004474:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 8004478:	f04f 0c05 	mov.w	ip, #5
{
 800447c:	461e      	mov	r6, r3
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <CopyBuffer+0xb0>)
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8004480:	f5ca 7548 	rsb	r5, sl, #800	; 0x320
{
 8004484:	4680      	mov	r8, r0

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004486:	4620      	mov	r0, r4
{
 8004488:	460f      	mov	r7, r1
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 800448a:	60e5      	str	r5, [r4, #12]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800448c:	2500      	movs	r5, #0
{
 800448e:	4691      	mov	r9, r2
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004490:	f8c4 b004 	str.w	fp, [r4, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004494:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8004496:	6225      	str	r5, [r4, #32]
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004498:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputOffset = 0;
 800449a:	6465      	str	r5, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 800449c:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80044a0:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
  hdma2d.Instance          = DMA2D;
 80044a4:	6023      	str	r3, [r4, #0]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80044a6:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 80044aa:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 80044ae:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80044b2:	f002 fc79 	bl	8006da8 <HAL_DMA2D_Init>
 80044b6:	b110      	cbz	r0, 80044be <CopyBuffer+0x5a>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
		  }
    }
    }
  }
}
 80044b8:	b003      	add	sp, #12
 80044ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 80044be:	2101      	movs	r1, #1
 80044c0:	4620      	mov	r0, r4
 80044c2:	f002 fd93 	bl	8006fec <HAL_DMA2D_ConfigLayer>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d1f6      	bne.n	80044b8 <CopyBuffer+0x54>
      if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 80044ca:	2201      	movs	r2, #1
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <CopyBuffer+0xb4>)
 80044ce:	4620      	mov	r0, r4
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044d4:	f002 fcc6 	bl	8006e64 <HAL_DMA2D_CLUTLoad>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1ed      	bne.n	80044b8 <CopyBuffer+0x54>
    	  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80044dc:	210a      	movs	r1, #10
 80044de:	4620      	mov	r0, r4
 80044e0:	f002 fcfe 	bl	8006ee0 <HAL_DMA2D_PollForTransfer>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 80044e4:	f44f 7248 	mov.w	r2, #800	; 0x320
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 80044e8:	4653      	mov	r3, sl
 80044ea:	4641      	mov	r1, r8
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 80044ec:	fb02 9206 	mla	r2, r2, r6, r9
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 80044f0:	4620      	mov	r0, r4
 80044f2:	9500      	str	r5, [sp, #0]
 80044f4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80044f8:	f002 fc98 	bl	8006e2c <HAL_DMA2D_Start>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d1db      	bne.n	80044b8 <CopyBuffer+0x54>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004500:	4620      	mov	r0, r4
 8004502:	210a      	movs	r1, #10
}
 8004504:	b003      	add	sp, #12
 8004506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800450a:	f002 bce9 	b.w	8006ee0 <HAL_DMA2D_PollForTransfer>
 800450e:	bf00      	nop
 8004510:	240014b0 	.word	0x240014b0
 8004514:	52001000 	.word	0x52001000
 8004518:	2401187c 	.word	0x2401187c

0800451c <displayFrameBuffer>:

void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount){
 800451c:	b530      	push	{r4, r5, lr}
 800451e:	460c      	mov	r4, r1
 8004520:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 8004522:	2318      	movs	r3, #24
 8004524:	2200      	movs	r2, #0
 8004526:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800452a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800452e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004532:	012d      	lsls	r5, r5, #4
 8004534:	0164      	lsls	r4, r4, #5
 8004536:	e9cd 4500 	strd	r4, r5, [sp]
 800453a:	f7ff ff93 	bl	8004464 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <displayFrameBuffer+0x34>)
 8004540:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 800454a:	b003      	add	sp, #12
 800454c:	bd30      	pop	{r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	24011888 	.word	0x24011888

08004554 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <HAL_MspInit+0x20>)
{
 8004556:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004558:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800455c:	f042 0202 	orr.w	r2, r2, #2
 8004560:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004570:	b002      	add	sp, #8
 8004572:	4770      	bx	lr
 8004574:	58024400 	.word	0x58024400

08004578 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004578:	4938      	ldr	r1, [pc, #224]	; (800465c <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800457c:	6802      	ldr	r2, [r0, #0]
{
 800457e:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8004580:	428a      	cmp	r2, r1
{
 8004582:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004588:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800458c:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800458e:	d004      	beq.n	800459a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8004590:	4933      	ldr	r1, [pc, #204]	; (8004660 <HAL_ADC_MspInit+0xe8>)
 8004592:	428a      	cmp	r2, r1
 8004594:	d026      	beq.n	80045e4 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004596:	b00a      	add	sp, #40	; 0x28
 8004598:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800459c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045a0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80045a4:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045a6:	f042 0220 	orr.w	r2, r2, #32
 80045aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80045ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045b2:	f002 0220 	and.w	r2, r2, #32
 80045b6:	9200      	str	r2, [sp, #0]
 80045b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80045c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80045d2:	f001 fd01 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80045d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045da:	4608      	mov	r0, r1
 80045dc:	f001 fcfc 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80045e0:	b00a      	add	sp, #40	; 0x28
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 80045e6:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045ea:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80045ec:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 80045ee:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80045f2:	481d      	ldr	r0, [pc, #116]	; (8004668 <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80045f4:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80045f8:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80045fc:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004600:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8004604:	9402      	str	r4, [sp, #8]
 8004606:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004608:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800460c:	f044 0420 	orr.w	r4, r4, #32
 8004610:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004614:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004618:	f004 0420 	and.w	r4, r4, #32
 800461c:	9403      	str	r4, [sp, #12]
 800461e:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004620:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004624:	f044 0404 	orr.w	r4, r4, #4
 8004628:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 800462c:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004632:	f002 0204 	and.w	r2, r2, #4
 8004636:	9204      	str	r2, [sp, #16]
 8004638:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463a:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 800463e:	f003 f907 	bl	8007850 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004642:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8004646:	4608      	mov	r0, r1
 8004648:	f001 fcc6 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800464c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004650:	4608      	mov	r0, r1
 8004652:	f001 fcc1 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004656:	b00a      	add	sp, #40	; 0x28
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	58026000 	.word	0x58026000
 8004664:	58024400 	.word	0x58024400
 8004668:	58021400 	.word	0x58021400

0800466c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004670:	4c05      	ldr	r4, [pc, #20]	; (8004688 <HardFault_Handler+0x18>)
{
 8004672:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004674:	4620      	mov	r0, r4
 8004676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800467a:	f003 fa0b 	bl	8007a94 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800467e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004682:	f001 fc91 	bl	8005fa8 <HAL_Delay>
  while (1)
 8004686:	e7f5      	b.n	8004674 <HardFault_Handler+0x4>
 8004688:	58022000 	.word	0x58022000

0800468c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800468c:	e7fe      	b.n	800468c <MemManage_Handler>
 800468e:	bf00      	nop

08004690 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004690:	e7fe      	b.n	8004690 <BusFault_Handler>
 8004692:	bf00      	nop

08004694 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004694:	e7fe      	b.n	8004694 <UsageFault_Handler>
 8004696:	bf00      	nop

08004698 <SVC_Handler>:
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop

0800469c <DebugMon_Handler>:
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop

080046a0 <PendSV_Handler>:
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop

080046a4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80046a4:	f001 bc6e 	b.w	8005f84 <HAL_IncTick>

080046a8 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <LTDC_IRQHandler+0x8>)
 80046aa:	f003 bb25 	b.w	8007cf8 <HAL_LTDC_IRQHandler>
 80046ae:	bf00      	nop
 80046b0:	24011888 	.word	0x24011888

080046b4 <LTDC_ER_IRQHandler>:
 80046b4:	f7ff bff8 	b.w	80046a8 <LTDC_IRQHandler>

080046b8 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <DSI_IRQHandler+0x8>)
 80046ba:	f002 bdeb 	b.w	8007294 <HAL_DSI_IRQHandler>
 80046be:	bf00      	nop
 80046c0:	2401194c 	.word	0x2401194c

080046c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80046c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046c8:	f7fb fe06 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046cc:	480c      	ldr	r0, [pc, #48]	; (8004700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046ce:	490d      	ldr	r1, [pc, #52]	; (8004704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046d0:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d4:	e002      	b.n	80046dc <LoopCopyDataInit>

080046d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046da:	3304      	adds	r3, #4

080046dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e0:	d3f9      	bcc.n	80046d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046e4:	4c0a      	ldr	r4, [pc, #40]	; (8004710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e8:	e001      	b.n	80046ee <LoopFillZerobss>

080046ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046ec:	3204      	adds	r2, #4

080046ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f0:	d3fb      	bcc.n	80046ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046f2:	f005 fd87 	bl	800a204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046f6:	f7ff fcad 	bl	8004054 <main>
  bx  lr
 80046fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046fc:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004704:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 8004708:	08014000 	.word	0x08014000
  ldr r2, =_sbss
 800470c:	24001078 	.word	0x24001078
  ldr r4, =_ebss
 8004710:	24011a08 	.word	0x24011a08

08004714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004714:	e7fe      	b.n	8004714 <ADC3_IRQHandler>
	...

08004718 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800471a:	4c0e      	ldr	r4, [pc, #56]	; (8004754 <IS42S32800J_ModeRegConfig+0x3c>)
 800471c:	2304      	movs	r3, #4
{
 800471e:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004720:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004722:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004724:	69d7      	ldr	r7, [r2, #28]
 8004726:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800472a:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800472c:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 800472e:	6955      	ldr	r5, [r2, #20]
 8004730:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004732:	6995      	ldr	r5, [r2, #24]
 8004734:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 8004736:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004738:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 800473c:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800473e:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004740:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004742:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004744:	f005 fbe4 	bl	8009f10 <HAL_SDRAM_SendCommand>
 8004748:	3800      	subs	r0, #0
 800474a:	bf18      	it	ne
 800474c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800474e:	4240      	negs	r0, r0
 8004750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004752:	bf00      	nop
 8004754:	24001518 	.word	0x24001518

08004758 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004758:	680a      	ldr	r2, [r1, #0]
{
 800475a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800475c:	4c22      	ldr	r4, [pc, #136]	; (80047e8 <IS42S32800J_Init+0x90>)
 800475e:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004760:	2700      	movs	r7, #0
{
 8004762:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004764:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004766:	4621      	mov	r1, r4
 8004768:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 800476c:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 800476e:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004770:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004772:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004774:	f005 fbcc 	bl	8009f10 <HAL_SDRAM_SendCommand>
 8004778:	2800      	cmp	r0, #0
 800477a:	d132      	bne.n	80047e2 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800477c:	f001 fc0e 	bl	8005f9c <HAL_GetTick>
 8004780:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004782:	f001 fc0b 	bl	8005f9c <HAL_GetTick>
 8004786:	4287      	cmp	r7, r0
 8004788:	d0fb      	beq.n	8004782 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800478a:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800478c:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 800478e:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004790:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004792:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004794:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004798:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800479a:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 800479c:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800479e:	4912      	ldr	r1, [pc, #72]	; (80047e8 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80047a0:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047a2:	f005 fbb5 	bl	8009f10 <HAL_SDRAM_SendCommand>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b9d8      	cbnz	r0, 80047e2 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80047aa:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 80047ac:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 80047ae:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 80047b4:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047b6:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 80047b8:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047ba:	490b      	ldr	r1, [pc, #44]	; (80047e8 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80047bc:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 80047be:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047c0:	f005 fba6 	bl	8009f10 <HAL_SDRAM_SendCommand>
 80047c4:	b968      	cbnz	r0, 80047e2 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80047c6:	4629      	mov	r1, r5
 80047c8:	4630      	mov	r0, r6
 80047ca:	f7ff ffa5 	bl	8004718 <IS42S32800J_ModeRegConfig>
 80047ce:	b940      	cbnz	r0, 80047e2 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80047d0:	68a9      	ldr	r1, [r5, #8]
 80047d2:	4630      	mov	r0, r6
 80047d4:	f005 fbbc 	bl	8009f50 <HAL_SDRAM_ProgramRefreshRate>
 80047d8:	3800      	subs	r0, #0
 80047da:	bf18      	it	ne
 80047dc:	2001      	movne	r0, #1
 80047de:	4240      	negs	r0, r0
}
 80047e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e8:	24001518 	.word	0x24001518

080047ec <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80047f6:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	600b      	str	r3, [r1, #0]
}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	24001528 	.word	0x24001528

08004804 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8004806:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	600b      	str	r3, [r1, #0]
}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	24001528 	.word	0x24001528

08004814 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <OTM8009A_GetXSize+0x1c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b123      	cbz	r3, 8004824 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800481a:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 800481e:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004820:	600b      	str	r3, [r1, #0]
}
 8004822:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004824:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004828:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800482a:	600b      	str	r3, [r1, #0]
}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	24001528 	.word	0x24001528

08004834 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <OTM8009A_GetYSize+0x1c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b123      	cbz	r3, 8004844 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800483a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 800483e:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004840:	600b      	str	r3, [r1, #0]
}
 8004842:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004844:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004848:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800484a:	600b      	str	r3, [r1, #0]
}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	24001528 	.word	0x24001528

08004854 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop

08004874 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop

0800487c <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004884:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004886:	6884      	ldr	r4, [r0, #8]
 8004888:	8800      	ldrh	r0, [r0, #0]
 800488a:	46a4      	mov	ip, r4
}
 800488c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004890:	4760      	bx	ip
 8004892:	bf00      	nop

08004894 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004894:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004896:	6844      	ldr	r4, [r0, #4]
 8004898:	8800      	ldrh	r0, [r0, #0]
 800489a:	46a4      	mov	ip, r4
}
 800489c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80048a0:	4760      	bx	ip
 80048a2:	bf00      	nop

080048a4 <OTM8009A_Init>:
{
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048a8:	2300      	movs	r3, #0
 80048aa:	f100 0710 	add.w	r7, r0, #16
{
 80048ae:	b082      	sub	sp, #8
 80048b0:	4680      	mov	r8, r0
 80048b2:	4689      	mov	r9, r1
 80048b4:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048b6:	4619      	mov	r1, r3
 80048b8:	4ae0      	ldr	r2, [pc, #896]	; (8004c3c <OTM8009A_Init+0x398>)
 80048ba:	4638      	mov	r0, r7
 80048bc:	f000 fcd6 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048c0:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048c2:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048c4:	4ade      	ldr	r2, [pc, #888]	; (8004c40 <OTM8009A_Init+0x39c>)
 80048c6:	21ff      	movs	r1, #255	; 0xff
 80048c8:	4638      	mov	r0, r7
 80048ca:	f000 fccf 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048d0:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048d2:	4adc      	ldr	r2, [pc, #880]	; (8004c44 <OTM8009A_Init+0x3a0>)
 80048d4:	4619      	mov	r1, r3
 80048d6:	4638      	mov	r0, r7
 80048d8:	f000 fcc8 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048dc:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048de:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048e2:	4ad9      	ldr	r2, [pc, #868]	; (8004c48 <OTM8009A_Init+0x3a4>)
 80048e4:	21ff      	movs	r1, #255	; 0xff
 80048e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048e8:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048ea:	f000 fcbf 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048f2:	4ad4      	ldr	r2, [pc, #848]	; (8004c44 <OTM8009A_Init+0x3a0>)
 80048f4:	4619      	mov	r1, r3
 80048f6:	4638      	mov	r0, r7
 80048f8:	f000 fcb8 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048fc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048fe:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004900:	2300      	movs	r3, #0
 8004902:	4ad2      	ldr	r2, [pc, #840]	; (8004c4c <OTM8009A_Init+0x3a8>)
 8004904:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004906:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004908:	4638      	mov	r0, r7
 800490a:	f000 fcaf 	bl	800526c <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800490e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004912:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004914:	4798      	blx	r3
 8004916:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004918:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800491c:	4798      	blx	r3
 800491e:	1b00      	subs	r0, r0, r4
 8004920:	2809      	cmp	r0, #9
 8004922:	d9f9      	bls.n	8004918 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004924:	2300      	movs	r3, #0
 8004926:	4aca      	ldr	r2, [pc, #808]	; (8004c50 <OTM8009A_Init+0x3ac>)
 8004928:	4638      	mov	r0, r7
 800492a:	4619      	mov	r1, r3
 800492c:	f000 fc9e 	bl	800526c <otm8009a_write_reg>
 8004930:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004932:	2300      	movs	r3, #0
 8004934:	4ac7      	ldr	r2, [pc, #796]	; (8004c54 <OTM8009A_Init+0x3b0>)
 8004936:	21c4      	movs	r1, #196	; 0xc4
 8004938:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800493a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800493c:	f000 fc96 	bl	800526c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004940:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004944:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004946:	4798      	blx	r3
 8004948:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800494a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800494e:	4798      	blx	r3
 8004950:	1b40      	subs	r0, r0, r5
 8004952:	2809      	cmp	r0, #9
 8004954:	d9f9      	bls.n	800494a <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004956:	2300      	movs	r3, #0
 8004958:	4abf      	ldr	r2, [pc, #764]	; (8004c58 <OTM8009A_Init+0x3b4>)
 800495a:	4638      	mov	r0, r7
 800495c:	4619      	mov	r1, r3
 800495e:	f000 fc85 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004962:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004964:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004966:	4abd      	ldr	r2, [pc, #756]	; (8004c5c <OTM8009A_Init+0x3b8>)
 8004968:	21c5      	movs	r1, #197	; 0xc5
 800496a:	4638      	mov	r0, r7
 800496c:	f000 fc7e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004970:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004972:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004974:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004976:	4619      	mov	r1, r3
 8004978:	4ab9      	ldr	r2, [pc, #740]	; (8004c60 <OTM8009A_Init+0x3bc>)
 800497a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800497c:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800497e:	f000 fc75 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004982:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004984:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004986:	4ab7      	ldr	r2, [pc, #732]	; (8004c64 <OTM8009A_Init+0x3c0>)
 8004988:	21c5      	movs	r1, #197	; 0xc5
 800498a:	4638      	mov	r0, r7
 800498c:	f000 fc6e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004990:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004992:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004994:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004996:	4619      	mov	r1, r3
 8004998:	4ab3      	ldr	r2, [pc, #716]	; (8004c68 <OTM8009A_Init+0x3c4>)
 800499a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800499c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800499e:	f000 fc65 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80049a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80049a4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80049a6:	4ab1      	ldr	r2, [pc, #708]	; (8004c6c <OTM8009A_Init+0x3c8>)
 80049a8:	21c0      	movs	r1, #192	; 0xc0
 80049aa:	4638      	mov	r0, r7
 80049ac:	f000 fc5e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80049b2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80049b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049b6:	4619      	mov	r1, r3
 80049b8:	4aa0      	ldr	r2, [pc, #640]	; (8004c3c <OTM8009A_Init+0x398>)
 80049ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80049bc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049be:	f000 fc55 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049c6:	4aaa      	ldr	r2, [pc, #680]	; (8004c70 <OTM8009A_Init+0x3cc>)
 80049c8:	21d9      	movs	r1, #217	; 0xd9
 80049ca:	4638      	mov	r0, r7
 80049cc:	f000 fc4e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049d2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049d4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049d6:	4619      	mov	r1, r3
 80049d8:	4aa6      	ldr	r2, [pc, #664]	; (8004c74 <OTM8009A_Init+0x3d0>)
 80049da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049dc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049de:	f000 fc45 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049e6:	4aa4      	ldr	r2, [pc, #656]	; (8004c78 <OTM8009A_Init+0x3d4>)
 80049e8:	21c1      	movs	r1, #193	; 0xc1
 80049ea:	4638      	mov	r0, r7
 80049ec:	f000 fc3e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049f2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049f4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049f6:	4619      	mov	r1, r3
 80049f8:	4aa0      	ldr	r2, [pc, #640]	; (8004c7c <OTM8009A_Init+0x3d8>)
 80049fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049fc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049fe:	f000 fc35 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a06:	4a9e      	ldr	r2, [pc, #632]	; (8004c80 <OTM8009A_Init+0x3dc>)
 8004a08:	21c1      	movs	r1, #193	; 0xc1
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	f000 fc2e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a16:	4619      	mov	r1, r3
 8004a18:	4a9a      	ldr	r2, [pc, #616]	; (8004c84 <OTM8009A_Init+0x3e0>)
 8004a1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a1e:	f000 fc25 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a26:	4a98      	ldr	r2, [pc, #608]	; (8004c88 <OTM8009A_Init+0x3e4>)
 8004a28:	21c5      	movs	r1, #197	; 0xc5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f000 fc1e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a36:	4619      	mov	r1, r3
 8004a38:	4a94      	ldr	r2, [pc, #592]	; (8004c8c <OTM8009A_Init+0x3e8>)
 8004a3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a3e:	f000 fc15 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a46:	4a87      	ldr	r2, [pc, #540]	; (8004c64 <OTM8009A_Init+0x3c0>)
 8004a48:	21c5      	movs	r1, #197	; 0xc5
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f000 fc0e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a56:	4619      	mov	r1, r3
 8004a58:	4a78      	ldr	r2, [pc, #480]	; (8004c3c <OTM8009A_Init+0x398>)
 8004a5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a5e:	f000 fc05 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a62:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a66:	4a8a      	ldr	r2, [pc, #552]	; (8004c90 <OTM8009A_Init+0x3ec>)
 8004a68:	21d8      	movs	r1, #216	; 0xd8
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	f000 fbfe 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a76:	4619      	mov	r1, r3
 8004a78:	4a86      	ldr	r2, [pc, #536]	; (8004c94 <OTM8009A_Init+0x3f0>)
 8004a7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a7e:	f000 fbf5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a86:	4a84      	ldr	r2, [pc, #528]	; (8004c98 <OTM8009A_Init+0x3f4>)
 8004a88:	21c5      	movs	r1, #197	; 0xc5
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f000 fbee 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a96:	4619      	mov	r1, r3
 8004a98:	4a80      	ldr	r2, [pc, #512]	; (8004c9c <OTM8009A_Init+0x3f8>)
 8004a9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a9e:	f000 fbe5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004aa2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004aa4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004aa6:	4a7e      	ldr	r2, [pc, #504]	; (8004ca0 <OTM8009A_Init+0x3fc>)
 8004aa8:	21c0      	movs	r1, #192	; 0xc0
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f000 fbde 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ab0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ab2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004ab4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <OTM8009A_Init+0x400>)
 8004aba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004abc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004abe:	f000 fbd5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ac2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ac4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ac6:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <OTM8009A_Init+0x404>)
 8004ac8:	21c5      	movs	r1, #197	; 0xc5
 8004aca:	4638      	mov	r0, r7
 8004acc:	f000 fbce 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ad0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ad2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ad4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4a66      	ldr	r2, [pc, #408]	; (8004c74 <OTM8009A_Init+0x3d0>)
 8004ada:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004adc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ade:	f000 fbc5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ae2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ae4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ae6:	4a71      	ldr	r2, [pc, #452]	; (8004cac <OTM8009A_Init+0x408>)
 8004ae8:	21c4      	movs	r1, #196	; 0xc4
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 fbbe 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004af0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004af2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004af4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004af6:	4619      	mov	r1, r3
 8004af8:	4a60      	ldr	r2, [pc, #384]	; (8004c7c <OTM8009A_Init+0x3d8>)
 8004afa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004afc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004afe:	f000 fbb5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b06:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <OTM8009A_Init+0x40c>)
 8004b08:	21c1      	movs	r1, #193	; 0xc1
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f000 fbae 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b16:	4619      	mov	r1, r3
 8004b18:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <OTM8009A_Init+0x410>)
 8004b1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b1e:	f000 fba5 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b22:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b26:	4a64      	ldr	r2, [pc, #400]	; (8004cb8 <OTM8009A_Init+0x414>)
 8004b28:	21b3      	movs	r1, #179	; 0xb3
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f000 fb9e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b36:	4619      	mov	r1, r3
 8004b38:	4a42      	ldr	r2, [pc, #264]	; (8004c44 <OTM8009A_Init+0x3a0>)
 8004b3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b3c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b3e:	f000 fb95 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b42:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b44:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b46:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <OTM8009A_Init+0x418>)
 8004b48:	21ce      	movs	r1, #206	; 0xce
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f000 fb8e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b52:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b54:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b56:	4619      	mov	r1, r3
 8004b58:	4a59      	ldr	r2, [pc, #356]	; (8004cc0 <OTM8009A_Init+0x41c>)
 8004b5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b5c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b5e:	f000 fb85 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b62:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b64:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b66:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <OTM8009A_Init+0x420>)
 8004b68:	21ce      	movs	r1, #206	; 0xce
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f000 fb7e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b72:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b76:	4619      	mov	r1, r3
 8004b78:	4a53      	ldr	r2, [pc, #332]	; (8004cc8 <OTM8009A_Init+0x424>)
 8004b7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b7c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b7e:	f000 fb75 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b82:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b86:	4a51      	ldr	r2, [pc, #324]	; (8004ccc <OTM8009A_Init+0x428>)
 8004b88:	21ce      	movs	r1, #206	; 0xce
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f000 fb6e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b92:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b96:	4619      	mov	r1, r3
 8004b98:	4a4d      	ldr	r2, [pc, #308]	; (8004cd0 <OTM8009A_Init+0x42c>)
 8004b9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b9c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b9e:	f000 fb65 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ba2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ba4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ba6:	4a4b      	ldr	r2, [pc, #300]	; (8004cd4 <OTM8009A_Init+0x430>)
 8004ba8:	21cf      	movs	r1, #207	; 0xcf
 8004baa:	4638      	mov	r0, r7
 8004bac:	f000 fb5e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004bb2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004bb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4a47      	ldr	r2, [pc, #284]	; (8004cd8 <OTM8009A_Init+0x434>)
 8004bba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004bbc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bbe:	f000 fb55 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bc4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bc6:	4a45      	ldr	r2, [pc, #276]	; (8004cdc <OTM8009A_Init+0x438>)
 8004bc8:	21cf      	movs	r1, #207	; 0xcf
 8004bca:	4638      	mov	r0, r7
 8004bcc:	f000 fb4e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bd4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <OTM8009A_Init+0x3a0>)
 8004bda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bdc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bde:	f000 fb45 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004be2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004be4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004be6:	4a3e      	ldr	r2, [pc, #248]	; (8004ce0 <OTM8009A_Init+0x43c>)
 8004be8:	21cb      	movs	r1, #203	; 0xcb
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 fb3e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bf2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004bf4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4a3a      	ldr	r2, [pc, #232]	; (8004ce4 <OTM8009A_Init+0x440>)
 8004bfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004bfc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bfe:	f000 fb35 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c02:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c04:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c06:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <OTM8009A_Init+0x444>)
 8004c08:	21cb      	movs	r1, #203	; 0xcb
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f000 fb2e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c12:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c14:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c16:	4619      	mov	r1, r3
 8004c18:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <OTM8009A_Init+0x41c>)
 8004c1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c1c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c1e:	f000 fb25 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c22:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c26:	4a31      	ldr	r2, [pc, #196]	; (8004cec <OTM8009A_Init+0x448>)
 8004c28:	21cb      	movs	r1, #203	; 0xcb
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 fb1e 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c32:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c34:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c36:	4619      	mov	r1, r3
 8004c38:	e05a      	b.n	8004cf0 <OTM8009A_Init+0x44c>
 8004c3a:	bf00      	nop
 8004c3c:	080124e1 	.word	0x080124e1
 8004c40:	080123b0 	.word	0x080123b0
 8004c44:	080124e2 	.word	0x080124e2
 8004c48:	0801243c 	.word	0x0801243c
 8004c4c:	080124e3 	.word	0x080124e3
 8004c50:	080124e4 	.word	0x080124e4
 8004c54:	080124e5 	.word	0x080124e5
 8004c58:	080124e6 	.word	0x080124e6
 8004c5c:	080124e7 	.word	0x080124e7
 8004c60:	080124e8 	.word	0x080124e8
 8004c64:	080124e9 	.word	0x080124e9
 8004c68:	080124ea 	.word	0x080124ea
 8004c6c:	080124eb 	.word	0x080124eb
 8004c70:	080124ec 	.word	0x080124ec
 8004c74:	080124ed 	.word	0x080124ed
 8004c78:	080124ee 	.word	0x080124ee
 8004c7c:	080124ef 	.word	0x080124ef
 8004c80:	080124f0 	.word	0x080124f0
 8004c84:	080124f1 	.word	0x080124f1
 8004c88:	080124f2 	.word	0x080124f2
 8004c8c:	080124f3 	.word	0x080124f3
 8004c90:	080124b0 	.word	0x080124b0
 8004c94:	080124f4 	.word	0x080124f4
 8004c98:	080124f5 	.word	0x080124f5
 8004c9c:	080124f6 	.word	0x080124f6
 8004ca0:	080124f7 	.word	0x080124f7
 8004ca4:	080124f8 	.word	0x080124f8
 8004ca8:	080124f9 	.word	0x080124f9
 8004cac:	080124fa 	.word	0x080124fa
 8004cb0:	080124fb 	.word	0x080124fb
 8004cb4:	080124fc 	.word	0x080124fc
 8004cb8:	080124b4 	.word	0x080124b4
 8004cbc:	080124b8 	.word	0x080124b8
 8004cc0:	080124fd 	.word	0x080124fd
 8004cc4:	080124c0 	.word	0x080124c0
 8004cc8:	080124fe 	.word	0x080124fe
 8004ccc:	080124d0 	.word	0x080124d0
 8004cd0:	080124ff 	.word	0x080124ff
 8004cd4:	080123b4 	.word	0x080123b4
 8004cd8:	08012500 	.word	0x08012500
 8004cdc:	0801250d 	.word	0x0801250d
 8004ce0:	080123c0 	.word	0x080123c0
 8004ce4:	08012501 	.word	0x08012501
 8004ce8:	080123cc 	.word	0x080123cc
 8004cec:	080123dc 	.word	0x080123dc
 8004cf0:	4ad1      	ldr	r2, [pc, #836]	; (8005038 <OTM8009A_Init+0x794>)
 8004cf2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004cf4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cf6:	f000 fab9 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cfa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cfc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cfe:	4acf      	ldr	r2, [pc, #828]	; (800503c <OTM8009A_Init+0x798>)
 8004d00:	21cb      	movs	r1, #203	; 0xcb
 8004d02:	4638      	mov	r0, r7
 8004d04:	f000 fab2 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d0a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4acb      	ldr	r2, [pc, #812]	; (8005040 <OTM8009A_Init+0x79c>)
 8004d12:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d14:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d16:	f000 faa9 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d1a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d1e:	4ac9      	ldr	r2, [pc, #804]	; (8005044 <OTM8009A_Init+0x7a0>)
 8004d20:	21cb      	movs	r1, #203	; 0xcb
 8004d22:	4638      	mov	r0, r7
 8004d24:	f000 faa2 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d2a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4ac5      	ldr	r2, [pc, #788]	; (8005048 <OTM8009A_Init+0x7a4>)
 8004d32:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d34:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d36:	f000 fa99 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d3a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d3c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d3e:	4ac3      	ldr	r2, [pc, #780]	; (800504c <OTM8009A_Init+0x7a8>)
 8004d40:	21cb      	movs	r1, #203	; 0xcb
 8004d42:	4638      	mov	r0, r7
 8004d44:	f000 fa92 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d4a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d4c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4abf      	ldr	r2, [pc, #764]	; (8005050 <OTM8009A_Init+0x7ac>)
 8004d52:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d54:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d56:	f000 fa89 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d5a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d5e:	4abd      	ldr	r2, [pc, #756]	; (8005054 <OTM8009A_Init+0x7b0>)
 8004d60:	21cb      	movs	r1, #203	; 0xcb
 8004d62:	4638      	mov	r0, r7
 8004d64:	f000 fa82 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d6a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d6c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4ab9      	ldr	r2, [pc, #740]	; (8005058 <OTM8009A_Init+0x7b4>)
 8004d72:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d74:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d76:	f000 fa79 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d7a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d7e:	4ab7      	ldr	r2, [pc, #732]	; (800505c <OTM8009A_Init+0x7b8>)
 8004d80:	21cb      	movs	r1, #203	; 0xcb
 8004d82:	4638      	mov	r0, r7
 8004d84:	f000 fa72 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d8a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4ab3      	ldr	r2, [pc, #716]	; (8005060 <OTM8009A_Init+0x7bc>)
 8004d92:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d94:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d96:	f000 fa69 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d9a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d9e:	4ab1      	ldr	r2, [pc, #708]	; (8005064 <OTM8009A_Init+0x7c0>)
 8004da0:	21cc      	movs	r1, #204	; 0xcc
 8004da2:	4638      	mov	r0, r7
 8004da4:	f000 fa62 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004da8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004daa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004dac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004dae:	4619      	mov	r1, r3
 8004db0:	4aad      	ldr	r2, [pc, #692]	; (8005068 <OTM8009A_Init+0x7c4>)
 8004db2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004db4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004db6:	f000 fa59 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004dba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004dbc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004dbe:	4aab      	ldr	r2, [pc, #684]	; (800506c <OTM8009A_Init+0x7c8>)
 8004dc0:	21cc      	movs	r1, #204	; 0xcc
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f000 fa52 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004dca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004dcc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4aa7      	ldr	r2, [pc, #668]	; (8005070 <OTM8009A_Init+0x7cc>)
 8004dd2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004dd4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dd6:	f000 fa49 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dda:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ddc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dde:	4aa5      	ldr	r2, [pc, #660]	; (8005074 <OTM8009A_Init+0x7d0>)
 8004de0:	21cc      	movs	r1, #204	; 0xcc
 8004de2:	4638      	mov	r0, r7
 8004de4:	f000 fa42 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004de8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dea:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dee:	4619      	mov	r1, r3
 8004df0:	4a91      	ldr	r2, [pc, #580]	; (8005038 <OTM8009A_Init+0x794>)
 8004df2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004df4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004df6:	f000 fa39 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004dfa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dfc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004dfe:	4a9e      	ldr	r2, [pc, #632]	; (8005078 <OTM8009A_Init+0x7d4>)
 8004e00:	21cc      	movs	r1, #204	; 0xcc
 8004e02:	4638      	mov	r0, r7
 8004e04:	f000 fa32 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e0a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4a8b      	ldr	r2, [pc, #556]	; (8005040 <OTM8009A_Init+0x79c>)
 8004e12:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e14:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e16:	f000 fa29 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e1a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e1e:	4a97      	ldr	r2, [pc, #604]	; (800507c <OTM8009A_Init+0x7d8>)
 8004e20:	21cc      	movs	r1, #204	; 0xcc
 8004e22:	4638      	mov	r0, r7
 8004e24:	f000 fa22 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e2a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4a85      	ldr	r2, [pc, #532]	; (8005048 <OTM8009A_Init+0x7a4>)
 8004e32:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e34:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e36:	f000 fa19 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e3a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e3c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e3e:	4a90      	ldr	r2, [pc, #576]	; (8005080 <OTM8009A_Init+0x7dc>)
 8004e40:	21cc      	movs	r1, #204	; 0xcc
 8004e42:	4638      	mov	r0, r7
 8004e44:	f000 fa12 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e4a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e4c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4a8c      	ldr	r2, [pc, #560]	; (8005084 <OTM8009A_Init+0x7e0>)
 8004e52:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e54:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e56:	f000 fa09 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e5a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e5e:	4a8a      	ldr	r2, [pc, #552]	; (8005088 <OTM8009A_Init+0x7e4>)
 8004e60:	21c5      	movs	r1, #197	; 0xc5
 8004e62:	4638      	mov	r0, r7
 8004e64:	f000 fa02 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e6a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e6c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4a86      	ldr	r2, [pc, #536]	; (800508c <OTM8009A_Init+0x7e8>)
 8004e72:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e74:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e76:	f000 f9f9 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e7e:	4a84      	ldr	r2, [pc, #528]	; (8005090 <OTM8009A_Init+0x7ec>)
 8004e80:	21f5      	movs	r1, #245	; 0xf5
 8004e82:	4638      	mov	r0, r7
 8004e84:	f000 f9f2 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e8a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4a80      	ldr	r2, [pc, #512]	; (8005094 <OTM8009A_Init+0x7f0>)
 8004e92:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e94:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e96:	f000 f9e9 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <OTM8009A_Init+0x7f4>)
 8004ea0:	21c6      	movs	r1, #198	; 0xc6
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f000 f9e2 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ea8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004eaa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004eac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4a7a      	ldr	r2, [pc, #488]	; (800509c <OTM8009A_Init+0x7f8>)
 8004eb2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004eb4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eb6:	f000 f9d9 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004eba:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ebc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ebe:	4a78      	ldr	r2, [pc, #480]	; (80050a0 <OTM8009A_Init+0x7fc>)
 8004ec0:	21ff      	movs	r1, #255	; 0xff
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f000 f9d2 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ec8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eca:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ecc:	4a73      	ldr	r2, [pc, #460]	; (800509c <OTM8009A_Init+0x7f8>)
 8004ece:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ed0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	f000 f9ca 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ed8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004eda:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004edc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4a6e      	ldr	r2, [pc, #440]	; (800509c <OTM8009A_Init+0x7f8>)
 8004ee2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee6:	f000 f9c1 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004eea:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004eee:	4a6d      	ldr	r2, [pc, #436]	; (80050a4 <OTM8009A_Init+0x800>)
 8004ef0:	21e1      	movs	r1, #225	; 0xe1
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f000 f9ba 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ef8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004efa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004efc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004efe:	4619      	mov	r1, r3
 8004f00:	4a66      	ldr	r2, [pc, #408]	; (800509c <OTM8009A_Init+0x7f8>)
 8004f02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f04:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f06:	f000 f9b1 	bl	800526c <otm8009a_write_reg>
 8004f0a:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <OTM8009A_Init+0x804>)
 8004f10:	21e2      	movs	r1, #226	; 0xe2
 8004f12:	4638      	mov	r0, r7
 8004f14:	f000 f9aa 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f18:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f1a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4a63      	ldr	r2, [pc, #396]	; (80050ac <OTM8009A_Init+0x808>)
 8004f20:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f22:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f24:	4638      	mov	r0, r7
 8004f26:	f000 f9a1 	bl	800526c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004f2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f2e:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004f30:	4798      	blx	r3
 8004f32:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f38:	4798      	blx	r3
 8004f3a:	1b40      	subs	r0, r0, r5
 8004f3c:	2877      	cmp	r0, #119	; 0x77
 8004f3e:	d9f9      	bls.n	8004f34 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004f40:	f1b9 0f00 	cmp.w	r9, #0
 8004f44:	d074      	beq.n	8005030 <OTM8009A_Init+0x78c>
 8004f46:	f1b9 0f02 	cmp.w	r9, #2
 8004f4a:	d14f      	bne.n	8004fec <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4a58      	ldr	r2, [pc, #352]	; (80050b0 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004f50:	213a      	movs	r1, #58	; 0x3a
 8004f52:	4638      	mov	r0, r7
 8004f54:	f000 f98a 	bl	800526c <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004f58:	4d56      	ldr	r5, [pc, #344]	; (80050b4 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004f5a:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004f5e:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004f60:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004f64:	d046      	beq.n	8004ff4 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004f66:	2300      	movs	r3, #0
 8004f68:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <OTM8009A_Init+0x814>)
 8004f6e:	2151      	movs	r1, #81	; 0x51
 8004f70:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004f72:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f74:	f000 f97a 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f78:	4a50      	ldr	r2, [pc, #320]	; (80050bc <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f7a:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f7e:	4653      	mov	r3, sl
 8004f80:	2153      	movs	r1, #83	; 0x53
 8004f82:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004f84:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f88:	f000 f970 	bl	800526c <otm8009a_write_reg>
 8004f8c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004f8e:	4653      	mov	r3, sl
 8004f90:	4a4b      	ldr	r2, [pc, #300]	; (80050c0 <OTM8009A_Init+0x81c>)
 8004f92:	2155      	movs	r1, #85	; 0x55
 8004f94:	4638      	mov	r0, r7
 8004f96:	f000 f969 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f9a:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004f9c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004f9e:	4653      	mov	r3, sl
 8004fa0:	4a48      	ldr	r2, [pc, #288]	; (80050c4 <OTM8009A_Init+0x820>)
 8004fa2:	215e      	movs	r1, #94	; 0x5e
 8004fa4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004fa6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004fa8:	f000 f960 	bl	800526c <otm8009a_write_reg>
 8004fac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004fae:	4653      	mov	r3, sl
 8004fb0:	4a45      	ldr	r2, [pc, #276]	; (80050c8 <OTM8009A_Init+0x824>)
 8004fb2:	2129      	movs	r1, #41	; 0x29
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f000 f959 	bl	800526c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004fba:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004fbc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fbe:	4653      	mov	r3, sl
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	4a36      	ldr	r2, [pc, #216]	; (800509c <OTM8009A_Init+0x7f8>)
 8004fc4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004fc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fc8:	f000 f950 	bl	800526c <otm8009a_write_reg>
 8004fcc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004fce:	4653      	mov	r3, sl
 8004fd0:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fd2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004fd4:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <OTM8009A_Init+0x828>)
 8004fd6:	212c      	movs	r1, #44	; 0x2c
 8004fd8:	f000 f948 	bl	800526c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004fdc:	42c4      	cmn	r4, r0
}
 8004fde:	bf14      	ite	ne
 8004fe0:	f04f 30ff 	movne.w	r0, #4294967295
 8004fe4:	4650      	moveq	r0, sl
 8004fe6:	b002      	add	sp, #8
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004fec:	f1ba 0f01 	cmp.w	sl, #1
 8004ff0:	4d30      	ldr	r5, [pc, #192]	; (80050b4 <OTM8009A_Init+0x810>)
 8004ff2:	d1b8      	bne.n	8004f66 <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004ff4:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f10d 0207 	add.w	r2, sp, #7
 8004ffc:	2136      	movs	r1, #54	; 0x36
 8004ffe:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005000:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005004:	f000 f932 	bl	800526c <otm8009a_write_reg>
 8005008:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800500a:	2304      	movs	r3, #4
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <OTM8009A_Init+0x82c>)
 800500e:	212a      	movs	r1, #42	; 0x2a
 8005010:	4638      	mov	r0, r7
 8005012:	f000 f92b 	bl	800526c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005016:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005018:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800501a:	2304      	movs	r3, #4
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <OTM8009A_Init+0x830>)
 800501e:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005020:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005022:	4638      	mov	r0, r7
 8005024:	f000 f922 	bl	800526c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005028:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800502c:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800502e:	e79c      	b.n	8004f6a <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005030:	464b      	mov	r3, r9
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <OTM8009A_Init+0x834>)
 8005034:	e78c      	b.n	8004f50 <OTM8009A_Init+0x6ac>
 8005036:	bf00      	nop
 8005038:	080124fe 	.word	0x080124fe
 800503c:	080123ec 	.word	0x080123ec
 8005040:	080124ff 	.word	0x080124ff
 8005044:	080123f8 	.word	0x080123f8
 8005048:	08012500 	.word	0x08012500
 800504c:	08012408 	.word	0x08012408
 8005050:	08012502 	.word	0x08012502
 8005054:	08012418 	.word	0x08012418
 8005058:	08012503 	.word	0x08012503
 800505c:	08012424 	.word	0x08012424
 8005060:	080124e2 	.word	0x080124e2
 8005064:	08012430 	.word	0x08012430
 8005068:	08012501 	.word	0x08012501
 800506c:	08012440 	.word	0x08012440
 8005070:	080124fd 	.word	0x080124fd
 8005074:	08012450 	.word	0x08012450
 8005078:	08012460 	.word	0x08012460
 800507c:	0801246c 	.word	0x0801246c
 8005080:	0801247c 	.word	0x0801247c
 8005084:	080124ed 	.word	0x080124ed
 8005088:	0801250e 	.word	0x0801250e
 800508c:	0801250f 	.word	0x0801250f
 8005090:	08012510 	.word	0x08012510
 8005094:	08012511 	.word	0x08012511
 8005098:	08012512 	.word	0x08012512
 800509c:	080124e1 	.word	0x080124e1
 80050a0:	0801248c 	.word	0x0801248c
 80050a4:	08012490 	.word	0x08012490
 80050a8:	080124a0 	.word	0x080124a0
 80050ac:	08012504 	.word	0x08012504
 80050b0:	08012505 	.word	0x08012505
 80050b4:	24001528 	.word	0x24001528
 80050b8:	08012507 	.word	0x08012507
 80050bc:	08012508 	.word	0x08012508
 80050c0:	08012509 	.word	0x08012509
 80050c4:	0801250a 	.word	0x0801250a
 80050c8:	0801250b 	.word	0x0801250b
 80050cc:	0801250c 	.word	0x0801250c
 80050d0:	080123a8 	.word	0x080123a8
 80050d4:	080123ac 	.word	0x080123ac
 80050d8:	08012506 	.word	0x08012506

080050dc <OTM8009A_SetBrightness>:
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050de:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80050e2:	4e0b      	ldr	r6, [pc, #44]	; (8005110 <OTM8009A_SetBrightness+0x34>)
{
 80050e4:	b082      	sub	sp, #8
 80050e6:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050e8:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050ec:	2300      	movs	r3, #0
 80050ee:	f10d 0207 	add.w	r2, sp, #7
 80050f2:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050f4:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050f6:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050f8:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050fc:	f000 f8b6 	bl	800526c <otm8009a_write_reg>
 8005100:	b918      	cbnz	r0, 800510a <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <OTM8009A_SetBrightness+0x38>)
 8005104:	609d      	str	r5, [r3, #8]
}
 8005106:	b002      	add	sp, #8
 8005108:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 800510a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800510e:	e7fa      	b.n	8005106 <OTM8009A_SetBrightness+0x2a>
 8005110:	51eb851f 	.word	0x51eb851f
 8005114:	24001528 	.word	0x24001528

08005118 <OTM8009A_DisplayOn>:
{
 8005118:	b500      	push	{lr}
 800511a:	b083      	sub	sp, #12
  uint8_t display = 0;
 800511c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800511e:	2129      	movs	r1, #41	; 0x29
 8005120:	3010      	adds	r0, #16
 8005122:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8005126:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800512a:	f000 f89f 	bl	800526c <otm8009a_write_reg>
 800512e:	3800      	subs	r0, #0
 8005130:	bf18      	it	ne
 8005132:	2001      	movne	r0, #1
}
 8005134:	4240      	negs	r0, r0
 8005136:	b003      	add	sp, #12
 8005138:	f85d fb04 	ldr.w	pc, [sp], #4

0800513c <OTM8009A_DisplayOff>:
{
 800513c:	b500      	push	{lr}
 800513e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005140:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005142:	2128      	movs	r1, #40	; 0x28
 8005144:	3010      	adds	r0, #16
 8005146:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800514a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800514e:	f000 f88d 	bl	800526c <otm8009a_write_reg>
 8005152:	3800      	subs	r0, #0
 8005154:	bf18      	it	ne
 8005156:	2001      	movne	r0, #1
}
 8005158:	4240      	negs	r0, r0
 800515a:	b003      	add	sp, #12
 800515c:	f85d fb04 	ldr.w	pc, [sp], #4

08005160 <OTM8009A_SetOrientation>:
{
 8005160:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005162:	2360      	movs	r3, #96	; 0x60
{
 8005164:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8005166:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005168:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800516a:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800516e:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005172:	d83e      	bhi.n	80051f2 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005174:	d020      	beq.n	80051b8 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8005176:	f100 0510 	add.w	r5, r0, #16
 800517a:	4633      	mov	r3, r6
 800517c:	f10d 0207 	add.w	r2, sp, #7
 8005180:	2136      	movs	r1, #54	; 0x36
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f872 	bl	800526c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005188:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800518a:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800518c:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <OTM8009A_SetOrientation+0x98>)
 800518e:	212a      	movs	r1, #42	; 0x2a
 8005190:	4628      	mov	r0, r5
 8005192:	f000 f86b 	bl	800526c <otm8009a_write_reg>
 8005196:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005198:	2304      	movs	r3, #4
 800519a:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800519c:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <OTM8009A_SetOrientation+0x9c>)
 80051a0:	212b      	movs	r1, #43	; 0x2b
 80051a2:	f000 f863 	bl	800526c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051a8:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80051aa:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 80051ac:	3800      	subs	r0, #0
 80051ae:	bf18      	it	ne
 80051b0:	2001      	movne	r0, #1
 80051b2:	4240      	negs	r0, r0
}
 80051b4:	b003      	add	sp, #12
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051b8:	f100 0510 	add.w	r5, r0, #16
 80051bc:	4633      	mov	r3, r6
 80051be:	460f      	mov	r7, r1
 80051c0:	f10d 0206 	add.w	r2, sp, #6
 80051c4:	2136      	movs	r1, #54	; 0x36
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f850 	bl	800526c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051cc:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051ce:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051d0:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <OTM8009A_SetOrientation+0x98>)
 80051d2:	212a      	movs	r1, #42	; 0x2a
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 f849 	bl	800526c <otm8009a_write_reg>
 80051da:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051dc:	2304      	movs	r3, #4
 80051de:	4628      	mov	r0, r5
 80051e0:	4a06      	ldr	r2, [pc, #24]	; (80051fc <OTM8009A_SetOrientation+0x9c>)
 80051e2:	212b      	movs	r1, #43	; 0x2b
 80051e4:	f000 f842 	bl	800526c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051e8:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051ec:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80051ee:	601f      	str	r7, [r3, #0]
 80051f0:	e7dc      	b.n	80051ac <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80051f6:	e7dd      	b.n	80051b4 <OTM8009A_SetOrientation+0x54>
 80051f8:	080123a8 	.word	0x080123a8
 80051fc:	080123ac 	.word	0x080123ac
 8005200:	24001528 	.word	0x24001528

08005204 <OTM8009A_ReadID>:
{ 
 8005204:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8005206:	3010      	adds	r0, #16
 8005208:	21da      	movs	r1, #218	; 0xda
{ 
 800520a:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800520c:	2300      	movs	r3, #0
 800520e:	f000 f825 	bl	800525c <otm8009a_read_reg>
 8005212:	3800      	subs	r0, #0
 8005214:	bf18      	it	ne
 8005216:	2001      	movne	r0, #1
}  
 8005218:	4240      	negs	r0, r0
 800521a:	bd08      	pop	{r3, pc}

0800521c <OTM8009A_DrawVLine>:
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop

08005224 <OTM8009A_GetPixel>:
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop

0800522c <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800522c:	b178      	cbz	r0, 800524e <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800522e:	684a      	ldr	r2, [r1, #4]
 8005230:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8005232:	2000      	movs	r0, #0
{
 8005234:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8005236:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800523a:	4906      	ldr	r1, [pc, #24]	; (8005254 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800523c:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800523e:	4a06      	ldr	r2, [pc, #24]	; (8005258 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8005240:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005244:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8005248:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800524a:	611a      	str	r2, [r3, #16]
}
 800524c:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800524e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005252:	4770      	bx	lr
 8005254:	08004885 	.word	0x08004885
 8005258:	08004895 	.word	0x08004895

0800525c <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800525c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800525e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005262:	46a4      	mov	ip, r4
}
 8005264:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005268:	4760      	bx	ip
 800526a:	bf00      	nop

0800526c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800526c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800526e:	6804      	ldr	r4, [r0, #0]
 8005270:	6880      	ldr	r0, [r0, #8]
 8005272:	46a4      	mov	ip, r4
}
 8005274:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005278:	4760      	bx	ip
 800527a:	bf00      	nop

0800527c <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 800527c:	f000 be8e 	b.w	8005f9c <HAL_GetTick>

08005280 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005280:	b910      	cbnz	r0, 8005288 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <BSP_LCD_SetActiveLayer+0x10>)
 8005284:	6099      	str	r1, [r3, #8]
 8005286:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005288:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	24011930 	.word	0x24011930

08005294 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005294:	b918      	cbnz	r0, 800529e <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8005296:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <BSP_LCD_GetPixelFormat+0x10>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800529e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80052a2:	4770      	bx	lr
 80052a4:	24011930 	.word	0x24011930

080052a8 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80052a8:	b948      	cbnz	r0, 80052be <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <BSP_LCD_GetXSize+0x1c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	b11b      	cbz	r3, 80052ba <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <BSP_LCD_GetXSize+0x20>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	600b      	str	r3, [r1, #0]
 80052b8:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80052ba:	4618      	mov	r0, r3
  }

  return ret;
}
 80052bc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80052be:	f06f 0001 	mvn.w	r0, #1
 80052c2:	4770      	bx	lr
 80052c4:	24001538 	.word	0x24001538
 80052c8:	24011930 	.word	0x24011930

080052cc <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80052cc:	b948      	cbnz	r0, 80052e2 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <BSP_LCD_GetYSize+0x1c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d4:	b11b      	cbz	r3, 80052de <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <BSP_LCD_GetYSize+0x20>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80052de:	4618      	mov	r0, r3
  }

  return ret;
}
 80052e0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80052e2:	f06f 0001 	mvn.w	r0, #1
 80052e6:	4770      	bx	lr
 80052e8:	24001538 	.word	0x24001538
 80052ec:	24011930 	.word	0x24011930

080052f0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80052f8:	b39c      	cbz	r4, 8005362 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80052fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80052fe:	4d1a      	ldr	r5, [pc, #104]	; (8005368 <BSP_LCD_FillRGBRect+0x78>)
 8005300:	eb04 0802 	add.w	r8, r4, r2
 8005304:	eb0b 0e01 	add.w	lr, fp, r1
 8005308:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800530c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800536c <BSP_LCD_FillRGBRect+0x7c>
 8005310:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8005312:	f1bb 0f00 	cmp.w	fp, #0
 8005316:	d021      	beq.n	800535c <BSP_LCD_FillRGBRect+0x6c>
 8005318:	460c      	mov	r4, r1
 800531a:	e00a      	b.n	8005332 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800531c:	682e      	ldr	r6, [r5, #0]
 800531e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005320:	fb06 4602 	mla	r6, r6, r2, r4
 8005324:	3401      	adds	r4, #1
 8005326:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 800532a:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 800532c:	6928      	ldr	r0, [r5, #16]
 800532e:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8005330:	d014      	beq.n	800535c <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005332:	68a8      	ldr	r0, [r5, #8]
 8005334:	f8d3 9000 	ldr.w	r9, [r3]
 8005338:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800533c:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005340:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8005342:	2e00      	cmp	r6, #0
 8005344:	d0ea      	beq.n	800531c <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005346:	682e      	ldr	r6, [r5, #0]
 8005348:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800534a:	fb06 4602 	mla	r6, r6, r2, r4
 800534e:	3401      	adds	r4, #1
 8005350:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8005354:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8005356:	6928      	ldr	r0, [r5, #16]
 8005358:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800535a:	d1ea      	bne.n	8005332 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 800535c:	3201      	adds	r2, #1
 800535e:	4542      	cmp	r2, r8
 8005360:	d1d7      	bne.n	8005312 <BSP_LCD_FillRGBRect+0x22>
}
 8005362:	2000      	movs	r0, #0
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	24011930 	.word	0x24011930
 800536c:	24011888 	.word	0x24011888

08005370 <BSP_LCD_ReadPixel>:
{
 8005370:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005372:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005376:	4e10      	ldr	r6, [pc, #64]	; (80053b8 <BSP_LCD_ReadPixel+0x48>)
 8005378:	4f10      	ldr	r7, [pc, #64]	; (80053bc <BSP_LCD_ReadPixel+0x4c>)
 800537a:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800537e:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005382:	0080      	lsls	r0, r0, #2
 8005384:	68ac      	ldr	r4, [r5, #8]
 8005386:	fb0c 7404 	mla	r4, ip, r4, r7
 800538a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800538c:	b94d      	cbnz	r5, 80053a2 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800538e:	5830      	ldr	r0, [r6, r0]
 8005390:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8005392:	fb00 1202 	mla	r2, r0, r2, r1
}
 8005396:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005398:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 800539c:	bcf0      	pop	{r4, r5, r6, r7}
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80053a2:	5835      	ldr	r5, [r6, r0]
 80053a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80053a6:	fb05 1202 	mla	r2, r5, r2, r1
 80053aa:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 80053ae:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80053b0:	b292      	uxth	r2, r2
}
 80053b2:	bcf0      	pop	{r4, r5, r6, r7}
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4770      	bx	lr
 80053b8:	24011930 	.word	0x24011930
 80053bc:	24011888 	.word	0x24011888

080053c0 <BSP_LCD_WritePixel>:
{
 80053c0:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80053c6:	4e0f      	ldr	r6, [pc, #60]	; (8005404 <BSP_LCD_WritePixel+0x44>)
 80053c8:	4f0f      	ldr	r7, [pc, #60]	; (8005408 <BSP_LCD_WritePixel+0x48>)
 80053ca:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80053ce:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80053d2:	0080      	lsls	r0, r0, #2
 80053d4:	68ac      	ldr	r4, [r5, #8]
 80053d6:	fb0c 7404 	mla	r4, ip, r4, r7
 80053da:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80053dc:	b945      	cbnz	r5, 80053f0 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053de:	5830      	ldr	r0, [r6, r0]
 80053e0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80053e2:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80053e6:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053e8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80053ec:	bcf0      	pop	{r4, r5, r6, r7}
 80053ee:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053f0:	5835      	ldr	r5, [r6, r0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80053f6:	fb05 1202 	mla	r2, r5, r2, r1
}
 80053fa:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053fc:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8005400:	2000      	movs	r0, #0
 8005402:	4770      	bx	lr
 8005404:	24011930 	.word	0x24011930
 8005408:	24011888 	.word	0x24011888

0800540c <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800540c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800540e:	2406      	movs	r4, #6
{
 8005410:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005412:	9101      	str	r1, [sp, #4]
 8005414:	4601      	mov	r1, r0
 8005416:	9202      	str	r2, [sp, #8]
 8005418:	9400      	str	r4, [sp, #0]
 800541a:	4805      	ldr	r0, [pc, #20]	; (8005430 <DSI_IO_Read+0x24>)
 800541c:	f002 f990 	bl	8007740 <HAL_DSI_Read>
 8005420:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8005422:	bf14      	ite	ne
 8005424:	f06f 0007 	mvnne.w	r0, #7
 8005428:	2000      	moveq	r0, #0
 800542a:	b004      	add	sp, #16
 800542c:	bd10      	pop	{r4, pc}
 800542e:	bf00      	nop
 8005430:	2401194c 	.word	0x2401194c

08005434 <BSP_LCD_DrawBitmap>:
{
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005438:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800543c:	4e4f      	ldr	r6, [pc, #316]	; (800557c <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800543e:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005440:	f04f 0934 	mov.w	r9, #52	; 0x34
 8005444:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8005448:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 800544c:	f8df e138 	ldr.w	lr, [pc, #312]	; 8005588 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005450:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005452:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005456:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800545a:	68b9      	ldr	r1, [r7, #8]
{
 800545c:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800545e:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005460:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005464:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005468:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800546c:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005470:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005472:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005476:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800547a:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800547e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005480:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005484:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005488:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800548c:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800548e:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005492:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005496:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800549a:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800549c:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 80054a0:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054a2:	4465      	add	r5, ip
 80054a4:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054a6:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054a8:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054aa:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 80054ae:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054b2:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054b4:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 80054b8:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054ba:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054be:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 80054c4:	d957      	bls.n	8005576 <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 80054c6:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 80054ca:	2c08      	cmp	r4, #8
 80054cc:	bf34      	ite	cc
 80054ce:	f04f 0b02 	movcc.w	fp, #2
 80054d2:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80054d6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80054da:	9c03      	ldr	r4, [sp, #12]
 80054dc:	f10a 35ff 	add.w	r5, sl, #4294967295
 80054e0:	fb04 f909 	mul.w	r9, r4, r9
 80054e4:	fb09 1505 	mla	r5, r9, r5, r1
 80054e8:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80054ea:	f1ba 0f00 	cmp.w	sl, #0
 80054ee:	d03e      	beq.n	800556e <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80054f0:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 80054f2:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 80054f6:	2700      	movs	r7, #0
 80054f8:	4c21      	ldr	r4, [pc, #132]	; (8005580 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80054fa:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80054fe:	e006      	b.n	800550e <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005500:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8005502:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005504:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8005506:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005508:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800550c:	d02f      	beq.n	800556e <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800550e:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8005510:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005512:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005516:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800551a:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 800551c:	4919      	ldr	r1, [pc, #100]	; (8005584 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800551e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8005522:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005526:	bf18      	it	ne
 8005528:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800552a:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800552c:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800552e:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005532:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005536:	4812      	ldr	r0, [pc, #72]	; (8005580 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8005538:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800553c:	f001 fc34 	bl	8006da8 <HAL_DMA2D_Init>
 8005540:	2800      	cmp	r0, #0
 8005542:	d1dd      	bne.n	8005500 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8005544:	2101      	movs	r1, #1
 8005546:	480e      	ldr	r0, [pc, #56]	; (8005580 <BSP_LCD_DrawBitmap+0x14c>)
 8005548:	f001 fd50 	bl	8006fec <HAL_DMA2D_ConfigLayer>
 800554c:	2800      	cmp	r0, #0
 800554e:	d1d7      	bne.n	8005500 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005550:	2001      	movs	r0, #1
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	4642      	mov	r2, r8
 8005556:	4629      	mov	r1, r5
 8005558:	9000      	str	r0, [sp, #0]
 800555a:	4809      	ldr	r0, [pc, #36]	; (8005580 <BSP_LCD_DrawBitmap+0x14c>)
 800555c:	f001 fc66 	bl	8006e2c <HAL_DMA2D_Start>
 8005560:	2800      	cmp	r0, #0
 8005562:	d1cd      	bne.n	8005500 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005564:	2132      	movs	r1, #50	; 0x32
 8005566:	4806      	ldr	r0, [pc, #24]	; (8005580 <BSP_LCD_DrawBitmap+0x14c>)
 8005568:	f001 fcba 	bl	8006ee0 <HAL_DMA2D_PollForTransfer>
 800556c:	e7c8      	b.n	8005500 <BSP_LCD_DrawBitmap+0xcc>
}
 800556e:	2000      	movs	r0, #0
 8005570:	b005      	add	sp, #20
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	e7ac      	b.n	80054d6 <BSP_LCD_DrawBitmap+0xa2>
 800557c:	24011930 	.word	0x24011930
 8005580:	24011968 	.word	0x24011968
 8005584:	52001000 	.word	0x52001000
 8005588:	24011888 	.word	0x24011888

0800558c <LL_FillBuffer>:
{
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005590:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005594:	4c28      	ldr	r4, [pc, #160]	; (8005638 <LL_FillBuffer+0xac>)
{
 8005596:	4617      	mov	r7, r2
 8005598:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 800559a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 800559e:	4698      	mov	r8, r3
 80055a0:	460e      	mov	r6, r1
 80055a2:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 80055a4:	68c2      	ldr	r2, [r0, #12]
{
 80055a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 80055a8:	2a02      	cmp	r2, #2
 80055aa:	d00f      	beq.n	80055cc <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80055ac:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80055ae:	4c23      	ldr	r4, [pc, #140]	; (800563c <LL_FillBuffer+0xb0>)
 80055b0:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 80055b4:	4922      	ldr	r1, [pc, #136]	; (8005640 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80055b6:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80055b8:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80055ba:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 80055bc:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80055c0:	f001 fbf2 	bl	8006da8 <HAL_DMA2D_Init>
 80055c4:	b308      	cbz	r0, 800560a <LL_FillBuffer+0x7e>
}
 80055c6:	b002      	add	sp, #8
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 80055cc:	f3c5 1045 	ubfx	r0, r5, #5, #6
 80055d0:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 80055d4:	f005 041f 	and.w	r4, r5, #31
 80055d8:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 80055dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80055e0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80055e4:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80055e8:	3521      	adds	r5, #33	; 0x21
 80055ea:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 80055ee:	3117      	adds	r1, #23
 80055f0:	09ad      	lsrs	r5, r5, #6
 80055f2:	0989      	lsrs	r1, r1, #6
 80055f4:	022d      	lsls	r5, r5, #8
 80055f6:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80055fa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80055fe:	3017      	adds	r0, #23
 8005600:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005604:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8005608:	e7d1      	b.n	80055ae <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800560a:	2101      	movs	r1, #1
 800560c:	4620      	mov	r0, r4
 800560e:	f001 fced 	bl	8006fec <HAL_DMA2D_ConfigLayer>
 8005612:	2800      	cmp	r0, #0
 8005614:	d1d7      	bne.n	80055c6 <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005616:	463b      	mov	r3, r7
 8005618:	4632      	mov	r2, r6
 800561a:	4629      	mov	r1, r5
 800561c:	4620      	mov	r0, r4
 800561e:	f8cd 8000 	str.w	r8, [sp]
 8005622:	f001 fc03 	bl	8006e2c <HAL_DMA2D_Start>
 8005626:	2800      	cmp	r0, #0
 8005628:	d1cd      	bne.n	80055c6 <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800562a:	4620      	mov	r0, r4
 800562c:	2119      	movs	r1, #25
}
 800562e:	b002      	add	sp, #8
 8005630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005634:	f001 bc54 	b.w	8006ee0 <HAL_DMA2D_PollForTransfer>
 8005638:	24011930 	.word	0x24011930
 800563c:	24011968 	.word	0x24011968
 8005640:	52001000 	.word	0x52001000

08005644 <BSP_LCD_DrawHLine>:
{
 8005644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005648:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800564c:	4f12      	ldr	r7, [pc, #72]	; (8005698 <BSP_LCD_DrawHLine+0x54>)
{
 800564e:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005650:	f8df e048 	ldr.w	lr, [pc, #72]	; 800569c <BSP_LCD_DrawHLine+0x58>
 8005654:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 8005658:	f04f 0834 	mov.w	r8, #52	; 0x34
 800565c:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005660:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005664:	688d      	ldr	r5, [r1, #8]
{
 8005666:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005668:	690e      	ldr	r6, [r1, #16]
 800566a:	fb02 4207 	mla	r2, r2, r7, r4
 800566e:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005672:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005674:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8005676:	bf38      	it	cc
 8005678:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800567a:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800567c:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005680:	9a08      	ldr	r2, [sp, #32]
 8005682:	9400      	str	r4, [sp, #0]
 8005684:	9201      	str	r2, [sp, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	2301      	movs	r3, #1
 800568a:	f7ff ff7f 	bl	800558c <LL_FillBuffer>
}
 800568e:	4620      	mov	r0, r4
 8005690:	b002      	add	sp, #8
 8005692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005696:	bf00      	nop
 8005698:	24011930 	.word	0x24011930
 800569c:	24011888 	.word	0x24011888

080056a0 <BSP_LCD_DrawVLine>:
{
 80056a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056a4:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80056a8:	4c11      	ldr	r4, [pc, #68]	; (80056f0 <BSP_LCD_DrawVLine+0x50>)
 80056aa:	4d12      	ldr	r5, [pc, #72]	; (80056f4 <BSP_LCD_DrawVLine+0x54>)
 80056ac:	f04f 0834 	mov.w	r8, #52	; 0x34
 80056b0:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 80056b4:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80056b8:	eb02 0c03 	add.w	ip, r2, r3
{
 80056bc:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056be:	68be      	ldr	r6, [r7, #8]
 80056c0:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80056c4:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056c6:	fb08 5606 	mla	r6, r8, r6, r5
 80056ca:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80056cc:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056ce:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80056d0:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056d2:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80056d6:	bf88      	it	hi
 80056d8:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80056da:	9a08      	ldr	r2, [sp, #32]
 80056dc:	e9cd 4200 	strd	r4, r2, [sp]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f7ff ff53 	bl	800558c <LL_FillBuffer>
}
 80056e6:	2000      	movs	r0, #0
 80056e8:	b002      	add	sp, #8
 80056ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ee:	bf00      	nop
 80056f0:	24011930 	.word	0x24011930
 80056f4:	24011888 	.word	0x24011888

080056f8 <BSP_LCD_FillRect>:
{
 80056f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80056fa:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 80056fe:	4f0e      	ldr	r7, [pc, #56]	; (8005738 <BSP_LCD_FillRect+0x40>)
 8005700:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005704:	4d0d      	ldr	r5, [pc, #52]	; (800573c <BSP_LCD_FillRect+0x44>)
 8005706:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800570a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 800570e:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005710:	68b7      	ldr	r7, [r6, #8]
 8005712:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005716:	1ae4      	subs	r4, r4, r3
 8005718:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800571a:	fb0e 5507 	mla	r5, lr, r7, r5
 800571e:	6937      	ldr	r7, [r6, #16]
{
 8005720:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005722:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005724:	9400      	str	r4, [sp, #0]
 8005726:	fb07 3101 	mla	r1, r7, r1, r3
 800572a:	9b08      	ldr	r3, [sp, #32]
 800572c:	9601      	str	r6, [sp, #4]
 800572e:	f7ff ff2d 	bl	800558c <LL_FillBuffer>
}
 8005732:	2000      	movs	r0, #0
 8005734:	b003      	add	sp, #12
 8005736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005738:	24011930 	.word	0x24011930
 800573c:	24011888 	.word	0x24011888

08005740 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005742:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005744:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005748:	f042 0208 	orr.w	r2, r2, #8
 800574c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005750:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005754:	f002 0208 	and.w	r2, r2, #8
 8005758:	9201      	str	r2, [sp, #4]
 800575a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 800575c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8005768:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800576c:	f022 0208 	bic.w	r2, r2, #8
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005774:	b002      	add	sp, #8
 8005776:	4770      	bx	lr
 8005778:	58024400 	.word	0x58024400

0800577c <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 800577e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005780:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005784:	f042 0210 	orr.w	r2, r2, #16
 8005788:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800578c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005790:	f002 0210 	and.w	r2, r2, #16
 8005794:	9201      	str	r2, [sp, #4]
 8005796:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005798:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800579a:	f042 0210 	orr.w	r2, r2, #16
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80057a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80057a2:	f022 0210 	bic.w	r2, r2, #16
 80057a6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80057a8:	b002      	add	sp, #8
 80057aa:	4770      	bx	lr
 80057ac:	58024400 	.word	0x58024400

080057b0 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 80057b2:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 80057b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80057b8:	f042 0210 	orr.w	r2, r2, #16
 80057bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80057c0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80057c4:	f002 0210 	and.w	r2, r2, #16
 80057c8:	9201      	str	r2, [sp, #4]
 80057ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 80057cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057d0:	f042 0210 	orr.w	r2, r2, #16
 80057d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80057d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057dc:	f022 0210 	bic.w	r2, r2, #16
 80057e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80057e4:	b002      	add	sp, #8
 80057e6:	4770      	bx	lr
 80057e8:	58024400 	.word	0x58024400

080057ec <DSI_IO_Write>:
  if(Size <= 1U)
 80057ec:	2b01      	cmp	r3, #1
{
 80057ee:	b530      	push	{r4, r5, lr}
 80057f0:	460d      	mov	r5, r1
 80057f2:	b083      	sub	sp, #12
 80057f4:	4601      	mov	r1, r0
  if(Size <= 1U)
 80057f6:	d909      	bls.n	800580c <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80057f8:	480a      	ldr	r0, [pc, #40]	; (8005824 <DSI_IO_Write+0x38>)
 80057fa:	e9cd 5200 	strd	r5, r2, [sp]
 80057fe:	2239      	movs	r2, #57	; 0x39
 8005800:	f001 ff32 	bl	8007668 <HAL_DSI_LongWrite>
 8005804:	b958      	cbnz	r0, 800581e <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8005806:	2000      	movs	r0, #0
}
 8005808:	b003      	add	sp, #12
 800580a:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800580c:	5cd0      	ldrb	r0, [r2, r3]
 800580e:	462b      	mov	r3, r5
 8005810:	2215      	movs	r2, #21
 8005812:	9000      	str	r0, [sp, #0]
 8005814:	4803      	ldr	r0, [pc, #12]	; (8005824 <DSI_IO_Write+0x38>)
 8005816:	f001 ff13 	bl	8007640 <HAL_DSI_ShortWrite>
 800581a:	2800      	cmp	r0, #0
 800581c:	d0f3      	beq.n	8005806 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 800581e:	f06f 0007 	mvn.w	r0, #7
 8005822:	e7f1      	b.n	8005808 <DSI_IO_Write+0x1c>
 8005824:	2401194c 	.word	0x2401194c

08005828 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8005828:	4b16      	ldr	r3, [pc, #88]	; (8005884 <BSP_LCD_Reset+0x5c>)
 800582a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800582e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005832:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005834:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8005838:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800583e:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005840:	4c11      	ldr	r4, [pc, #68]	; (8005888 <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005842:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005848:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800584a:	4620      	mov	r0, r4
 800584c:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005852:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005854:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005856:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800585a:	f001 fff9 	bl	8007850 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800585e:	4629      	mov	r1, r5
 8005860:	4620      	mov	r0, r4
 8005862:	2200      	movs	r2, #0
 8005864:	f002 f912 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8005868:	2014      	movs	r0, #20
 800586a:	f000 fb9d 	bl	8005fa8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800586e:	4632      	mov	r2, r6
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f002 f90a 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8005878:	200a      	movs	r0, #10
 800587a:	f000 fb95 	bl	8005fa8 <HAL_Delay>
}
 800587e:	b007      	add	sp, #28
 8005880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	58021800 	.word	0x58021800

0800588c <MX_DSIHOST_DSI_Init>:
{
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005890:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005894:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8005896:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8005898:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800589c:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 800589e:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80058a2:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 80058a6:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80058a8:	60c6      	str	r6, [r0, #12]
{
 80058aa:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80058ac:	4669      	mov	r1, sp
{
 80058ae:	4604      	mov	r4, r0
 80058b0:	4690      	mov	r8, r2
 80058b2:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80058b4:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 80058b6:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80058ba:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80058be:	f001 fc27 	bl	8007110 <HAL_DSI_Init>
 80058c2:	b118      	cbz	r0, 80058cc <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 80058c4:	4630      	mov	r0, r6
}
 80058c6:	b01e      	add	sp, #120	; 0x78
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80058cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058d0:	4a22      	ldr	r2, [pc, #136]	; (800595c <MX_DSIHOST_DSI_Init+0xd0>)
 80058d2:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80058d4:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80058d6:	fb03 2207 	mla	r2, r3, r7, r2
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80058dc:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 80058de:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80058e0:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 80058e4:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80058e8:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 80058ec:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80058f0:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 80058f2:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80058f4:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80058f6:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 80058f8:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80058fa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 80058fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005902:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8005906:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005908:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800590a:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800590e:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005910:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005914:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800591a:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800591e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005922:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8005926:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8005928:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800592c:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800592e:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005932:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005936:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800593a:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 800593c:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005940:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005944:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8005948:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800594c:	f001 fd18 	bl	8007380 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005950:	3800      	subs	r0, #0
 8005952:	bf18      	it	ne
 8005954:	2001      	movne	r0, #1
}
 8005956:	b01e      	add	sp, #120	; 0x78
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	0042c1d8 	.word	0x0042c1d8
 8005960:	4c751ce3 	.word	0x4c751ce3

08005964 <MX_LTDC_Init>:
{
 8005964:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8005966:	4d0e      	ldr	r5, [pc, #56]	; (80059a0 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005968:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800596c:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800596e:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005970:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005972:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005974:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8005976:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005978:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800597a:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800597c:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800597e:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005980:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005982:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005984:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8005986:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8005988:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800598a:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800598e:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005990:	6181      	str	r1, [r0, #24]
}
 8005992:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005994:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005998:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 800599c:	f002 b934 	b.w	8007c08 <HAL_LTDC_Init>
 80059a0:	50001000 	.word	0x50001000

080059a4 <MX_LTDC_ConfigLayer>:
{
 80059a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a6:	4613      	mov	r3, r2
 80059a8:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 80059aa:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80059ac:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 80059ae:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 80059b0:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 80059b2:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80059b4:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 80059b8:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 80059ba:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 80059bc:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 80059c0:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 80059c4:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 80059c8:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80059ca:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 80059cc:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80059ce:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80059d0:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 80059d2:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80059d4:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 80059d6:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80059d8:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 80059da:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80059de:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80059e2:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80059e4:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 80059e6:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80059e8:	f002 f9e8 	bl	8007dbc <HAL_LTDC_ConfigLayer>
}
 80059ec:	b00f      	add	sp, #60	; 0x3c
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059f0 <MX_LTDC_ClockConfig>:
{
 80059f0:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80059f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 80059f6:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80059f8:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80059fa:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 80059fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005a00:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005a02:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005a04:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005a06:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005a08:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005a0a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005a0c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005a0e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005a12:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005a16:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005a1a:	f003 f8d1 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
}
 8005a1e:	b031      	add	sp, #196	; 0xc4
 8005a20:	bd30      	pop	{r4, r5, pc}
 8005a22:	bf00      	nop

08005a24 <BSP_LCD_InitEx>:
{
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005a28:	2901      	cmp	r1, #1
{
 8005a2a:	b093      	sub	sp, #76	; 0x4c
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005a32:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005a34:	f200 80f2 	bhi.w	8005c1c <BSP_LCD_InitEx+0x1f8>
 8005a38:	1e03      	subs	r3, r0, #0
 8005a3a:	bf18      	it	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f040 80ec 	bne.w	8005c1c <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005a44:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005a46:	2901      	cmp	r1, #1
 8005a48:	f200 80e8 	bhi.w	8005c1c <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005a4c:	2a02      	cmp	r2, #2
 8005a4e:	f000 80ab 	beq.w	8005ba8 <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005a52:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005a54:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005a56:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a58:	4c72      	ldr	r4, [pc, #456]	; (8005c24 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4f72      	ldr	r7, [pc, #456]	; (8005c28 <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a5e:	2600      	movs	r6, #0
 8005a60:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005a62:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005a66:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005a68:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005a6c:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005a6e:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005a72:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005a74:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005a78:	f7ff fed6 	bl	8005828 <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a7c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005a80:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005a82:	a90c      	add	r1, sp, #48	; 0x30
 8005a84:	4869      	ldr	r0, [pc, #420]	; (8005c2c <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a86:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8005a8a:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005a8e:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005a92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a96:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005a9a:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a9c:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005a9e:	f8cd c014 	str.w	ip, [sp, #20]
 8005aa2:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005aa6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005aaa:	f001 fed1 	bl	8007850 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	485e      	ldr	r0, [pc, #376]	; (8005c2c <BSP_LCD_InitEx+0x208>)
 8005ab4:	f001 ffea 	bl	8007a8c <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8005ab8:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005abc:	a90c      	add	r1, sp, #48	; 0x30
 8005abe:	485b      	ldr	r0, [pc, #364]	; (8005c2c <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005ac0:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005ac4:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005c5c <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8005ac8:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005acc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005ad0:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005ad2:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005ad6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005ada:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005ade:	9406      	str	r4, [sp, #24]
 8005ae0:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005ae2:	f001 feb5 	bl	8007850 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4651      	mov	r1, sl
 8005aea:	4850      	ldr	r0, [pc, #320]	; (8005c2c <BSP_LCD_InitEx+0x208>)
 8005aec:	f001 ffce 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005af0:	4632      	mov	r2, r6
 8005af2:	210f      	movs	r1, #15
 8005af4:	2058      	movs	r0, #88	; 0x58
 8005af6:	f001 f85f 	bl	8006bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005afa:	2058      	movs	r0, #88	; 0x58
 8005afc:	f001 f896 	bl	8006c2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005b00:	4632      	mov	r2, r6
 8005b02:	210f      	movs	r1, #15
 8005b04:	205a      	movs	r0, #90	; 0x5a
 8005b06:	f001 f857 	bl	8006bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005b0a:	205a      	movs	r0, #90	; 0x5a
 8005b0c:	f001 f88e 	bl	8006c2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005b10:	4632      	mov	r2, r6
 8005b12:	210f      	movs	r1, #15
 8005b14:	207b      	movs	r0, #123	; 0x7b
 8005b16:	f001 f84f 	bl	8006bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005b1a:	207b      	movs	r0, #123	; 0x7b
 8005b1c:	f001 f886 	bl	8006c2c <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005b20:	4c43      	ldr	r4, [pc, #268]	; (8005c30 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005b22:	4844      	ldr	r0, [pc, #272]	; (8005c34 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b28:	4943      	ldr	r1, [pc, #268]	; (8005c38 <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005b2a:	4e44      	ldr	r6, [pc, #272]	; (8005c3c <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005b2c:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005b2e:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005b30:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005b34:	f7ff fe04 	bl	8005740 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005b38:	f8d9 2000 	ldr.w	r2, [r9]
 8005b3c:	9b02      	ldr	r3, [sp, #8]
 8005b3e:	4282      	cmp	r2, r0
 8005b40:	d03a      	beq.n	8005bb8 <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005b42:	680a      	ldr	r2, [r1, #0]
 8005b44:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b48:	d031      	beq.n	8005bae <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	483a      	ldr	r0, [pc, #232]	; (8005c38 <BSP_LCD_InitEx+0x214>)
 8005b50:	f7ff fe9c 	bl	800588c <MX_DSIHOST_DSI_Init>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d15c      	bne.n	8005c12 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005b58:	4835      	ldr	r0, [pc, #212]	; (8005c30 <BSP_LCD_InitEx+0x20c>)
 8005b5a:	f7ff ff49 	bl	80059f0 <MX_LTDC_ClockConfig>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d157      	bne.n	8005c12 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005b62:	4642      	mov	r2, r8
 8005b64:	4629      	mov	r1, r5
 8005b66:	4832      	ldr	r0, [pc, #200]	; (8005c30 <BSP_LCD_InitEx+0x20c>)
 8005b68:	f7ff fefc 	bl	8005964 <MX_LTDC_Init>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d150      	bne.n	8005c12 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005b70:	f000 f8b2 	bl	8005cd8 <BSP_SDRAM_Init>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d14c      	bne.n	8005c12 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005b78:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005b7a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b7e:	4601      	mov	r1, r0
      config.X0          = 0;
 8005b80:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b82:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005b84:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8005b88:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b8c:	4828      	ldr	r0, [pc, #160]	; (8005c30 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005b8e:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b92:	f7ff ff07 	bl	80059a4 <MX_LTDC_ConfigLayer>
 8005b96:	4604      	mov	r4, r0
 8005b98:	b190      	cbz	r0, 8005bc0 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b9a:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	61bb      	str	r3, [r7, #24]
}
 8005ba2:	b013      	add	sp, #76	; 0x4c
 8005ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8005ba8:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8005baa:	9201      	str	r2, [sp, #4]
 8005bac:	e754      	b.n	8005a58 <BSP_LCD_InitEx+0x34>
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	f7ff fdfe 	bl	80057b0 <DSI_MspInit.part.0>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	e7c8      	b.n	8005b4a <BSP_LCD_InitEx+0x126>
 8005bb8:	f7ff fde0 	bl	800577c <DMA2D_MspInit.part.0>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	e7c0      	b.n	8005b42 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005bc0:	481d      	ldr	r0, [pc, #116]	; (8005c38 <BSP_LCD_InitEx+0x214>)
 8005bc2:	f001 fd15 	bl	80075f0 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	481b      	ldr	r0, [pc, #108]	; (8005c38 <BSP_LCD_InitEx+0x214>)
 8005bca:	f001 fcfd 	bl	80075c8 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005bce:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005bd0:	4d1c      	ldr	r5, [pc, #112]	; (8005c44 <BSP_LCD_InitEx+0x220>)
 8005bd2:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8005bd6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005bd8:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005bdc:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005be0:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005be4:	f7ff fb22 	bl	800522c <OTM8009A_RegisterBusIO>
 8005be8:	b980      	cbnz	r0, 8005c0c <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005bea:	4c19      	ldr	r4, [pc, #100]	; (8005c50 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005bec:	4628      	mov	r0, r5
 8005bee:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005bf0:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005bf2:	f7ff fb07 	bl	8005204 <OTM8009A_ReadID>
 8005bf6:	b948      	cbnz	r0, 8005c0c <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005bf8:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <BSP_LCD_InitEx+0x230>)
 8005bfa:	4d17      	ldr	r5, [pc, #92]	; (8005c58 <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	9a03      	ldr	r2, [sp, #12]
 8005c00:	9901      	ldr	r1, [sp, #4]
 8005c02:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005c04:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005c06:	47a0      	blx	r4
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0c8      	beq.n	8005b9e <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c0c:	f06f 0006 	mvn.w	r0, #6
 8005c10:	e7c5      	b.n	8005b9e <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c12:	f06f 0003 	mvn.w	r0, #3
}
 8005c16:	b013      	add	sp, #76	; 0x4c
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005c1c:	f06f 0001 	mvn.w	r0, #1
 8005c20:	e7bf      	b.n	8005ba2 <BSP_LCD_InitEx+0x17e>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
 8005c28:	24011930 	.word	0x24011930
 8005c2c:	58022400 	.word	0x58022400
 8005c30:	24011888 	.word	0x24011888
 8005c34:	52001000 	.word	0x52001000
 8005c38:	2401194c 	.word	0x2401194c
 8005c3c:	50001000 	.word	0x50001000
 8005c40:	0800527d 	.word	0x0800527d
 8005c44:	2400153c 	.word	0x2400153c
 8005c48:	080057ed 	.word	0x080057ed
 8005c4c:	0800540d 	.word	0x0800540d
 8005c50:	24001534 	.word	0x24001534
 8005c54:	24001018 	.word	0x24001018
 8005c58:	24001538 	.word	0x24001538
 8005c5c:	24011968 	.word	0x24011968

08005c60 <BSP_LCD_Init>:
{
 8005c60:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005c62:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005c66:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005c68:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	9400      	str	r4, [sp, #0]
 8005c70:	f7ff fed8 	bl	8005a24 <BSP_LCD_InitEx>
}
 8005c74:	b002      	add	sp, #8
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005c7a:	4915      	ldr	r1, [pc, #84]	; (8005cd0 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005c7c:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005c7e:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005c84:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8005c88:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005c8c:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005c90:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005c92:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005c94:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005c96:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005c98:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005c9a:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005c9c:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005c9e:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005ca0:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005ca2:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005ca4:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005ca6:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005ca8:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8005caa:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005cac:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005cae:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005cb0:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005cb2:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005cb4:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005cb8:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005cbc:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005cbe:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005cc2:	f004 f8fb 	bl	8009ebc <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8005cc6:	1b40      	subs	r0, r0, r5
 8005cc8:	bf18      	it	ne
 8005cca:	2001      	movne	r0, #1
 8005ccc:	b009      	add	sp, #36	; 0x24
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	52004140 	.word	0x52004140
 8005cd4:	240119d0 	.word	0x240119d0

08005cd8 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f040 80e1 	bne.w	8005ea0 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005cde:	4b73      	ldr	r3, [pc, #460]	; (8005eac <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ce0:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005ce2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005cea:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005cec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005cf0:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005cf2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005cf6:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005cf8:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005cfa:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005cfc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d00:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005d02:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d06:	9201      	str	r2, [sp, #4]
 8005d08:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005d0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d18:	400a      	ands	r2, r1
 8005d1a:	9202      	str	r2, [sp, #8]
 8005d1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d2e:	f002 0208 	and.w	r2, r2, #8
 8005d32:	9203      	str	r2, [sp, #12]
 8005d34:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d3a:	f042 0210 	orr.w	r2, r2, #16
 8005d3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d46:	f002 0210 	and.w	r2, r2, #16
 8005d4a:	9204      	str	r2, [sp, #16]
 8005d4c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d5e:	f002 0220 	and.w	r2, r2, #32
 8005d62:	9205      	str	r2, [sp, #20]
 8005d64:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005d7a:	9206      	str	r2, [sp, #24]
 8005d7c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005d7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d8e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005d92:	9207      	str	r2, [sp, #28]
 8005d94:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005da2:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005daa:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005db0:	483f      	ldr	r0, [pc, #252]	; (8005eb0 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005db2:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005db4:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005db6:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005db8:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005dba:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005dbc:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dbe:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005dc0:	f001 fd46 	bl	8007850 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005dc4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005dc8:	a909      	add	r1, sp, #36	; 0x24
 8005dca:	483a      	ldr	r0, [pc, #232]	; (8005eb4 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005dcc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005dce:	f001 fd3f 	bl	8007850 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005dd2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005dd6:	a909      	add	r1, sp, #36	; 0x24
 8005dd8:	4837      	ldr	r0, [pc, #220]	; (8005eb8 <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005ddc:	f001 fd38 	bl	8007850 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005de0:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005de4:	a909      	add	r1, sp, #36	; 0x24
 8005de6:	4835      	ldr	r0, [pc, #212]	; (8005ebc <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005dea:	f001 fd31 	bl	8007850 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005dee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005df2:	a909      	add	r1, sp, #36	; 0x24
 8005df4:	4832      	ldr	r0, [pc, #200]	; (8005ec0 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005df8:	f001 fd2a 	bl	8007850 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005dfc:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e00:	a909      	add	r1, sp, #36	; 0x24
 8005e02:	4830      	ldr	r0, [pc, #192]	; (8005ec4 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e04:	4c30      	ldr	r4, [pc, #192]	; (8005ec8 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e08:	f001 fd22 	bl	8007850 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e10:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e18:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e1a:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e20:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e22:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e24:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e26:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e28:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005e2a:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005e2c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e2e:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e30:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005e32:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e34:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e38:	4e25      	ldr	r6, [pc, #148]	; (8005ed0 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e3a:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e3c:	6334      	str	r4, [r6, #48]	; 0x30
 8005e3e:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005e40:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e48:	f002 f882 	bl	8007f50 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f002 f805 	bl	8007e5c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005e52:	462a      	mov	r2, r5
 8005e54:	210f      	movs	r1, #15
 8005e56:	207a      	movs	r0, #122	; 0x7a
 8005e58:	f000 feae 	bl	8006bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005e5c:	207a      	movs	r0, #122	; 0x7a
 8005e5e:	f000 fee5 	bl	8006c2c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff08 	bl	8005c78 <MX_SDRAM_Init>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	b9e0      	cbnz	r0, 8005ea6 <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005e6c:	4919      	ldr	r1, [pc, #100]	; (8005ed4 <BSP_SDRAM_Init+0x1fc>)
 8005e6e:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005e72:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005e76:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005e7a:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005e7c:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005e7e:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005e80:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005e82:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005e84:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005e86:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005e8a:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005e8c:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005e8e:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005e90:	f7fe fc62 	bl	8004758 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005e94:	2800      	cmp	r0, #0
 8005e96:	bf18      	it	ne
 8005e98:	f06f 0004 	mvnne.w	r0, #4
}
 8005e9c:	b00f      	add	sp, #60	; 0x3c
 8005e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005ea0:	f06f 0001 	mvn.w	r0, #1
}
 8005ea4:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	e7f7      	b.n	8005e9c <BSP_SDRAM_Init+0x1c4>
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	58020c00 	.word	0x58020c00
 8005eb4:	58021000 	.word	0x58021000
 8005eb8:	58021400 	.word	0x58021400
 8005ebc:	58021800 	.word	0x58021800
 8005ec0:	58021c00 	.word	0x58021c00
 8005ec4:	58022000 	.word	0x58022000
 8005ec8:	2400155c 	.word	0x2400155c
 8005ecc:	52000040 	.word	0x52000040
 8005ed0:	240119d0 	.word	0x240119d0
 8005ed4:	240015c8 	.word	0x240015c8

08005ed8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <HAL_InitTick+0x40>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	b90b      	cbnz	r3, 8005ee2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005ede:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005ee0:	4770      	bx	lr
{
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <HAL_InitTick+0x44>)
 8005eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef0:	6810      	ldr	r0, [r2, #0]
 8005ef2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ef6:	f000 fea7 	bl	8006c48 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005efa:	2c0f      	cmp	r4, #15
 8005efc:	d800      	bhi.n	8005f00 <HAL_InitTick+0x28>
 8005efe:	b108      	cbz	r0, 8005f04 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005f00:	2001      	movs	r0, #1
}
 8005f02:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f04:	2200      	movs	r2, #0
 8005f06:	4621      	mov	r1, r4
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	f000 fe54 	bl	8006bb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <HAL_InitTick+0x48>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	601c      	str	r4, [r3, #0]
}
 8005f16:	bd10      	pop	{r4, pc}
 8005f18:	24001064 	.word	0x24001064
 8005f1c:	24000000 	.word	0x24000000
 8005f20:	24001068 	.word	0x24001068

08005f24 <HAL_Init>:
{
 8005f24:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f26:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f28:	4c12      	ldr	r4, [pc, #72]	; (8005f74 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f2a:	f000 fe31 	bl	8006b90 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f2e:	4d12      	ldr	r5, [pc, #72]	; (8005f78 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f30:	f002 fb62 	bl	80085f8 <HAL_RCC_GetSysClockFreq>
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_Init+0x58>)
 8005f36:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f38:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f3a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f3c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f3e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f42:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f44:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f46:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f48:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005f4c:	4c0c      	ldr	r4, [pc, #48]	; (8005f80 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f4e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f52:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8005f58:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f5a:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f5c:	f7ff ffbc 	bl	8005ed8 <HAL_InitTick>
 8005f60:	b110      	cbz	r0, 8005f68 <HAL_Init+0x44>
    return HAL_ERROR;
 8005f62:	2401      	movs	r4, #1
}
 8005f64:	4620      	mov	r0, r4
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	4604      	mov	r4, r0
  HAL_MspInit();
 8005f6a:	f7fe faf3 	bl	8004554 <HAL_MspInit>
}
 8005f6e:	4620      	mov	r0, r4
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	bf00      	nop
 8005f74:	0800a290 	.word	0x0800a290
 8005f78:	24000004 	.word	0x24000004
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	24000000 	.word	0x24000000

08005f84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005f84:	4a03      	ldr	r2, [pc, #12]	; (8005f94 <HAL_IncTick+0x10>)
 8005f86:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <HAL_IncTick+0x14>)
 8005f88:	6811      	ldr	r1, [r2, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	440b      	add	r3, r1
 8005f8e:	6013      	str	r3, [r2, #0]
}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	24011a04 	.word	0x24011a04
 8005f98:	24001064 	.word	0x24001064

08005f9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <HAL_GetTick+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	24011a04 	.word	0x24011a04

08005fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005fac:	f7ff fff6 	bl	8005f9c <HAL_GetTick>
 8005fb0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fb2:	1c63      	adds	r3, r4, #1
 8005fb4:	d002      	beq.n	8005fbc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fb6:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <HAL_Delay+0x20>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fbc:	f7ff ffee 	bl	8005f9c <HAL_GetTick>
 8005fc0:	1b43      	subs	r3, r0, r5
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	d3fa      	bcc.n	8005fbc <HAL_Delay+0x14>
  {
  }
}
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	24001064 	.word	0x24001064

08005fcc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005fcc:	4b01      	ldr	r3, [pc, #4]	; (8005fd4 <HAL_GetREVID+0x8>)
 8005fce:	6818      	ldr	r0, [r3, #0]
}
 8005fd0:	0c00      	lsrs	r0, r0, #16
 8005fd2:	4770      	bx	lr
 8005fd4:	5c001000 	.word	0x5c001000

08005fd8 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005fd8:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8005fda:	6853      	ldr	r3, [r2, #4]
 8005fdc:	ea23 0000 	bic.w	r0, r3, r0
 8005fe0:	4301      	orrs	r1, r0
 8005fe2:	6051      	str	r1, [r2, #4]
}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	58000400 	.word	0x58000400

08005fec <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8005fec:	4a02      	ldr	r2, [pc, #8]	; (8005ff8 <HAL_EnableCompensationCell+0xc>)
 8005fee:	6a13      	ldr	r3, [r2, #32]
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	6213      	str	r3, [r2, #32]
}
 8005ff6:	4770      	bx	lr
 8005ff8:	58000400 	.word	0x58000400

08005ffc <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ffc:	4a40      	ldr	r2, [pc, #256]	; (8006100 <HAL_ADC_PollForConversion+0x104>)
 8005ffe:	6803      	ldr	r3, [r0, #0]
 8006000:	4293      	cmp	r3, r2
{
 8006002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	4606      	mov	r6, r0
 8006008:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800600a:	d044      	beq.n	8006096 <HAL_ADC_PollForConversion+0x9a>
 800600c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006010:	4293      	cmp	r3, r2
 8006012:	d040      	beq.n	8006096 <HAL_ADC_PollForConversion+0x9a>
 8006014:	4a3b      	ldr	r2, [pc, #236]	; (8006104 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006016:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006018:	6897      	ldr	r7, [r2, #8]
 800601a:	2c08      	cmp	r4, #8
 800601c:	f007 071f 	and.w	r7, r7, #31
 8006020:	d00a      	beq.n	8006038 <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006022:	2f09      	cmp	r7, #9
 8006024:	d84d      	bhi.n	80060c2 <HAL_ADC_PollForConversion+0xc6>
 8006026:	f240 2121 	movw	r1, #545	; 0x221
 800602a:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800602c:	07c9      	lsls	r1, r1, #31
 800602e:	d548      	bpl.n	80060c2 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	07da      	lsls	r2, r3, #31
 8006034:	d449      	bmi.n	80060ca <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006036:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006038:	f7ff ffb0 	bl	8005f9c <HAL_GetTick>
 800603c:	6832      	ldr	r2, [r6, #0]
 800603e:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006040:	e001      	b.n	8006046 <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	1c6b      	adds	r3, r5, #1
 8006044:	d129      	bne.n	800609a <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	4223      	tst	r3, r4
 800604a:	d0fa      	beq.n	8006042 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800604c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800604e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006052:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006054:	68d3      	ldr	r3, [r2, #12]
 8006056:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800605a:	d10f      	bne.n	800607c <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800605c:	7d73      	ldrb	r3, [r6, #21]
 800605e:	b96b      	cbnz	r3, 800607c <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006060:	6813      	ldr	r3, [r2, #0]
 8006062:	0718      	lsls	r0, r3, #28
 8006064:	d50a      	bpl.n	800607c <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006066:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800606c:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800606e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006070:	04d9      	lsls	r1, r3, #19
 8006072:	d403      	bmi.n	800607c <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006074:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800607c:	4b22      	ldr	r3, [pc, #136]	; (8006108 <HAL_ADC_PollForConversion+0x10c>)
 800607e:	429a      	cmp	r2, r3
 8006080:	d02e      	beq.n	80060e0 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006082:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006084:	2c08      	cmp	r4, #8
 8006086:	d027      	beq.n	80060d8 <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006088:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800608c:	d134      	bne.n	80060f8 <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800608e:	230c      	movs	r3, #12
 8006090:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <HAL_ADC_PollForConversion+0x110>)
 8006098:	e7bd      	b.n	8006016 <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800609a:	f7ff ff7f 	bl	8005f9c <HAL_GetTick>
 800609e:	eba0 0008 	sub.w	r0, r0, r8
 80060a2:	6832      	ldr	r2, [r6, #0]
 80060a4:	42a8      	cmp	r0, r5
 80060a6:	d801      	bhi.n	80060ac <HAL_ADC_PollForConversion+0xb0>
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	d1cc      	bne.n	8006046 <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80060ac:	6813      	ldr	r3, [r2, #0]
 80060ae:	4023      	ands	r3, r4
 80060b0:	d1c9      	bne.n	8006046 <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060b2:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80060b4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80060b6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060ba:	f042 0204 	orr.w	r2, r2, #4
 80060be:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80060c0:	e7e7      	b.n	8006092 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80060c2:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80060c4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80060c8:	d0b5      	beq.n	8006036 <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060ca:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060ce:	f043 0320 	orr.w	r3, r3, #32
 80060d2:	6573      	str	r3, [r6, #84]	; 0x54
}
 80060d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80060d8:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80060da:	6014      	str	r4, [r2, #0]
}
 80060dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060e0:	2f09      	cmp	r7, #9
 80060e2:	d902      	bls.n	80060ea <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_ADC_PollForConversion+0x104>)
 80060e6:	68d8      	ldr	r0, [r3, #12]
 80060e8:	e7cc      	b.n	8006084 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060ea:	f240 2321 	movw	r3, #545	; 0x221
 80060ee:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060f2:	07fb      	lsls	r3, r7, #31
 80060f4:	d4c5      	bmi.n	8006082 <HAL_ADC_PollForConversion+0x86>
 80060f6:	e7f5      	b.n	80060e4 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 80060f8:	2000      	movs	r0, #0
}
 80060fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fe:	bf00      	nop
 8006100:	40022000 	.word	0x40022000
 8006104:	58026300 	.word	0x58026300
 8006108:	40022100 	.word	0x40022100
 800610c:	40022300 	.word	0x40022300

08006110 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006110:	6803      	ldr	r3, [r0, #0]
 8006112:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop

08006118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006118:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800611a:	2200      	movs	r2, #0
{
 800611c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800611e:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006120:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006124:	2a01      	cmp	r2, #1
 8006126:	f000 813a 	beq.w	800639e <HAL_ADC_ConfigChannel+0x286>
 800612a:	4603      	mov	r3, r0
 800612c:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800612e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006130:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006134:	6894      	ldr	r4, [r2, #8]
 8006136:	0766      	lsls	r6, r4, #29
 8006138:	f100 8099 	bmi.w	800626e <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800613c:	680c      	ldr	r4, [r1, #0]
 800613e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8006142:	2d00      	cmp	r5, #0
 8006144:	f040 809e 	bne.w	8006284 <HAL_ADC_ConfigChannel+0x16c>
 8006148:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800614c:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006150:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8006152:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006154:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006156:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8006158:	4034      	ands	r4, r6
 800615a:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800615c:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8006160:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8006164:	40a6      	lsls	r6, r4
 8006166:	61d0      	str	r0, [r2, #28]
 8006168:	fa0c f404 	lsl.w	r4, ip, r4
 800616c:	5978      	ldr	r0, [r7, r5]
 800616e:	ea20 0006 	bic.w	r0, r0, r6
 8006172:	4320      	orrs	r0, r4
 8006174:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006176:	6890      	ldr	r0, [r2, #8]
 8006178:	0745      	lsls	r5, r0, #29
 800617a:	f100 8081 	bmi.w	8006280 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800617e:	6895      	ldr	r5, [r2, #8]
 8006180:	f015 0508 	ands.w	r5, r5, #8
 8006184:	d157      	bne.n	8006236 <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006186:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006188:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800618c:	2007      	movs	r0, #7
 800618e:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006190:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006194:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006198:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800619c:	fa00 fe04 	lsl.w	lr, r0, r4
 80061a0:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80061a4:	4fc3      	ldr	r7, [pc, #780]	; (80064b4 <HAL_ADC_ConfigChannel+0x39c>)
 80061a6:	f85c 0006 	ldr.w	r0, [ip, r6]
 80061aa:	ea20 000e 	bic.w	r0, r0, lr
 80061ae:	4320      	orrs	r0, r4
 80061b0:	f84c 0006 	str.w	r0, [ip, r6]
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80061ba:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80061be:	f000 8098 	beq.w	80062f2 <HAL_ADC_ConfigChannel+0x1da>
 80061c2:	68d0      	ldr	r0, [r2, #12]
 80061c4:	68d6      	ldr	r6, [r2, #12]
 80061c6:	f010 0f10 	tst.w	r0, #16
 80061ca:	6948      	ldr	r0, [r1, #20]
 80061cc:	f040 8107 	bne.w	80063de <HAL_ADC_ConfigChannel+0x2c6>
 80061d0:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80061d4:	0076      	lsls	r6, r6, #1
 80061d6:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061da:	690f      	ldr	r7, [r1, #16]
 80061dc:	2f04      	cmp	r7, #4
 80061de:	f000 80e1 	beq.w	80063a4 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061e2:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80061e6:	6808      	ldr	r0, [r1, #0]
 80061e8:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80061ec:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80061f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80061f4:	ea40 000c 	orr.w	r0, r0, ip
 80061f8:	4330      	orrs	r0, r6
 80061fa:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80061fe:	7e4f      	ldrb	r7, [r1, #25]
 8006200:	690e      	ldr	r6, [r1, #16]
 8006202:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006204:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8006208:	bf0c      	ite	eq
 800620a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 800620e:	2700      	movne	r7, #0
 8006210:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006214:	4338      	orrs	r0, r7
 8006216:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800621a:	7e0c      	ldrb	r4, [r1, #24]
 800621c:	6908      	ldr	r0, [r1, #16]
 800621e:	2c01      	cmp	r4, #1
 8006220:	d104      	bne.n	800622c <HAL_ADC_ConfigChannel+0x114>
 8006222:	f000 001f 	and.w	r0, r0, #31
 8006226:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800622a:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800622c:	6910      	ldr	r0, [r2, #16]
 800622e:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8006232:	4305      	orrs	r5, r0
 8006234:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006236:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006238:	07c4      	lsls	r4, r0, #31
 800623a:	d416      	bmi.n	800626a <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800623c:	68ce      	ldr	r6, [r1, #12]
 800623e:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006240:	f006 0718 	and.w	r7, r6, #24
 8006244:	4c9c      	ldr	r4, [pc, #624]	; (80064b8 <HAL_ADC_ConfigChannel+0x3a0>)
 8006246:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800624a:	40fc      	lsrs	r4, r7
 800624c:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006250:	f8df c288 	ldr.w	ip, [pc, #648]	; 80064dc <HAL_ADC_ConfigChannel+0x3c4>
 8006254:	4004      	ands	r4, r0
 8006256:	ea25 0507 	bic.w	r5, r5, r7
 800625a:	4566      	cmp	r6, ip
 800625c:	ea44 0405 	orr.w	r4, r4, r5
 8006260:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8006264:	d04d      	beq.n	8006302 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006266:	2800      	cmp	r0, #0
 8006268:	db15      	blt.n	8006296 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800626a:	2000      	movs	r0, #0
 800626c:	e003      	b.n	8006276 <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800626e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006270:	f042 0220 	orr.w	r2, r2, #32
 8006274:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800627c:	b003      	add	sp, #12
 800627e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006280:	6890      	ldr	r0, [r2, #8]
 8006282:	e7d8      	b.n	8006236 <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006284:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006288:	b115      	cbz	r5, 8006290 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800628a:	fab5 f585 	clz	r5, r5
 800628e:	40a8      	lsls	r0, r5
 8006290:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8006294:	e75c      	b.n	8006150 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006296:	4989      	ldr	r1, [pc, #548]	; (80064bc <HAL_ADC_ConfigChannel+0x3a4>)
 8006298:	428a      	cmp	r2, r1
 800629a:	f000 80c6 	beq.w	800642a <HAL_ADC_ConfigChannel+0x312>
 800629e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80062a2:	428a      	cmp	r2, r1
 80062a4:	f000 80c1 	beq.w	800642a <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062a8:	4e85      	ldr	r6, [pc, #532]	; (80064c0 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80062aa:	4d86      	ldr	r5, [pc, #536]	; (80064c4 <HAL_ADC_ConfigChannel+0x3ac>)
 80062ac:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062ae:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80062b0:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062b4:	43e4      	mvns	r4, r4
 80062b6:	f004 0401 	and.w	r4, r4, #1
 80062ba:	2c00      	cmp	r4, #0
 80062bc:	f000 80c3 	beq.w	8006446 <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062c0:	4c81      	ldr	r4, [pc, #516]	; (80064c8 <HAL_ADC_ConfigChannel+0x3b0>)
 80062c2:	42a0      	cmp	r0, r4
 80062c4:	f000 810c 	beq.w	80064e0 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062c8:	4c80      	ldr	r4, [pc, #512]	; (80064cc <HAL_ADC_ConfigChannel+0x3b4>)
 80062ca:	42a0      	cmp	r0, r4
 80062cc:	f000 812b 	beq.w	8006526 <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062d0:	4c7f      	ldr	r4, [pc, #508]	; (80064d0 <HAL_ADC_ConfigChannel+0x3b8>)
 80062d2:	42a0      	cmp	r0, r4
 80062d4:	d1c9      	bne.n	800626a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80062d6:	0249      	lsls	r1, r1, #9
 80062d8:	d4c7      	bmi.n	800626a <HAL_ADC_ConfigChannel+0x152>
 80062da:	4979      	ldr	r1, [pc, #484]	; (80064c0 <HAL_ADC_ConfigChannel+0x3a8>)
 80062dc:	428a      	cmp	r2, r1
 80062de:	d1c4      	bne.n	800626a <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80062e0:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062e2:	2000      	movs	r0, #0
 80062e4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80062e8:	4332      	orrs	r2, r6
 80062ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80062ee:	60aa      	str	r2, [r5, #8]
}
 80062f0:	e7c1      	b.n	8006276 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80062f2:	68d6      	ldr	r6, [r2, #12]
 80062f4:	6948      	ldr	r0, [r1, #20]
 80062f6:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80062fa:	0076      	lsls	r6, r6, #1
 80062fc:	fa00 f606 	lsl.w	r6, r0, r6
 8006300:	e76b      	b.n	80061da <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006302:	2f00      	cmp	r7, #0
 8006304:	d071      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800630a:	2c00      	cmp	r4, #0
 800630c:	f000 80af 	beq.w	800646e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8006310:	fab4 f484 	clz	r4, r4
 8006314:	3401      	adds	r4, #1
 8006316:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800631a:	2c09      	cmp	r4, #9
 800631c:	f240 80a7 	bls.w	800646e <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006324:	2d00      	cmp	r5, #0
 8006326:	f000 8112 	beq.w	800654e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800632a:	fab5 f585 	clz	r5, r5
 800632e:	3501      	adds	r5, #1
 8006330:	06ad      	lsls	r5, r5, #26
 8006332:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006336:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800633a:	2c00      	cmp	r4, #0
 800633c:	f000 8105 	beq.w	800654a <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8006340:	2601      	movs	r6, #1
 8006342:	fab4 f484 	clz	r4, r4
 8006346:	4434      	add	r4, r6
 8006348:	f004 041f 	and.w	r4, r4, #31
 800634c:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006350:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006356:	2800      	cmp	r0, #0
 8006358:	f000 80f5 	beq.w	8006546 <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 800635c:	fab0 f480 	clz	r4, r0
 8006360:	3401      	adds	r4, #1
 8006362:	f004 041f 	and.w	r4, r4, #31
 8006366:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800636a:	f1a4 001e 	sub.w	r0, r4, #30
 800636e:	0500      	lsls	r0, r0, #20
 8006370:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006374:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8006376:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800637a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800637e:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006380:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8006382:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006386:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800638a:	fa0c fc00 	lsl.w	ip, ip, r0
 800638e:	4086      	lsls	r6, r0
 8006390:	597c      	ldr	r4, [r7, r5]
 8006392:	ea24 000c 	bic.w	r0, r4, ip
 8006396:	4330      	orrs	r0, r6
 8006398:	5178      	str	r0, [r7, r5]
 800639a:	6808      	ldr	r0, [r1, #0]
}
 800639c:	e763      	b.n	8006266 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 800639e:	2002      	movs	r0, #2
}
 80063a0:	b003      	add	sp, #12
 80063a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80063a4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80063a6:	680d      	ldr	r5, [r1, #0]
 80063a8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80063ac:	06ac      	lsls	r4, r5, #26
 80063ae:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80063b2:	d030      	beq.n	8006416 <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80063b4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80063b6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80063ba:	4284      	cmp	r4, r0
 80063bc:	d026      	beq.n	800640c <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80063be:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80063c0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80063c4:	4284      	cmp	r4, r0
 80063c6:	d02b      	beq.n	8006420 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80063c8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80063ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80063ce:	4284      	cmp	r4, r0
 80063d0:	f47f af31 	bne.w	8006236 <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80063d4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80063d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063da:	66d0      	str	r0, [r2, #108]	; 0x6c
 80063dc:	e72b      	b.n	8006236 <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063de:	0876      	lsrs	r6, r6, #1
 80063e0:	f006 0608 	and.w	r6, r6, #8
 80063e4:	fa00 f606 	lsl.w	r6, r0, r6
 80063e8:	e6f7      	b.n	80061da <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063ea:	0e80      	lsrs	r0, r0, #26
 80063ec:	1c44      	adds	r4, r0, #1
 80063ee:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063f2:	2e09      	cmp	r6, #9
 80063f4:	d82d      	bhi.n	8006452 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063f6:	06a5      	lsls	r5, r4, #26
 80063f8:	2401      	movs	r4, #1
 80063fa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80063fe:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006402:	fa04 f606 	lsl.w	r6, r4, r6
 8006406:	0500      	lsls	r0, r0, #20
 8006408:	4335      	orrs	r5, r6
 800640a:	e7b3      	b.n	8006374 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800640c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800640e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006412:	6650      	str	r0, [r2, #100]	; 0x64
 8006414:	e7d3      	b.n	80063be <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006416:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006418:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800641c:	6610      	str	r0, [r2, #96]	; 0x60
 800641e:	e7c9      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006420:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006422:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006426:	6690      	str	r0, [r2, #104]	; 0x68
 8006428:	e7ce      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800642a:	492a      	ldr	r1, [pc, #168]	; (80064d4 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800642c:	4e23      	ldr	r6, [pc, #140]	; (80064bc <HAL_ADC_ConfigChannel+0x3a4>)
 800642e:	4c2a      	ldr	r4, [pc, #168]	; (80064d8 <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006430:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006432:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006434:	68b7      	ldr	r7, [r6, #8]
 8006436:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006438:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800643c:	433c      	orrs	r4, r7
 800643e:	43e4      	mvns	r4, r4
 8006440:	f004 0401 	and.w	r4, r4, #1
 8006444:	e739      	b.n	80062ba <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006448:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800644a:	f042 0220 	orr.w	r2, r2, #32
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006450:	e711      	b.n	8006276 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006452:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006456:	2701      	movs	r7, #1
 8006458:	06a5      	lsls	r5, r4, #26
 800645a:	381e      	subs	r0, #30
 800645c:	fa07 f606 	lsl.w	r6, r7, r6
 8006460:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006464:	0500      	lsls	r0, r0, #20
 8006466:	4335      	orrs	r5, r6
 8006468:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800646c:	e782      	b.n	8006374 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006472:	2c00      	cmp	r4, #0
 8006474:	d073      	beq.n	800655e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006476:	fab4 f484 	clz	r4, r4
 800647a:	3401      	adds	r4, #1
 800647c:	06a4      	lsls	r4, r4, #26
 800647e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8006486:	2e00      	cmp	r6, #0
 8006488:	d067      	beq.n	800655a <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800648a:	2501      	movs	r5, #1
 800648c:	fab6 f686 	clz	r6, r6
 8006490:	442e      	add	r6, r5
 8006492:	f006 061f 	and.w	r6, r6, #31
 8006496:	40b5      	lsls	r5, r6
 8006498:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800649e:	2800      	cmp	r0, #0
 80064a0:	d058      	beq.n	8006554 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80064a2:	fab0 f480 	clz	r4, r0
 80064a6:	3401      	adds	r4, #1
 80064a8:	f004 041f 	and.w	r4, r4, #31
 80064ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80064b0:	0520      	lsls	r0, r4, #20
 80064b2:	e75f      	b.n	8006374 <HAL_ADC_ConfigChannel+0x25c>
 80064b4:	5c001000 	.word	0x5c001000
 80064b8:	000fffff 	.word	0x000fffff
 80064bc:	40022000 	.word	0x40022000
 80064c0:	58026000 	.word	0x58026000
 80064c4:	58026300 	.word	0x58026300
 80064c8:	cb840000 	.word	0xcb840000
 80064cc:	c7520000 	.word	0xc7520000
 80064d0:	cfb80000 	.word	0xcfb80000
 80064d4:	40022300 	.word	0x40022300
 80064d8:	40022100 	.word	0x40022100
 80064dc:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064e0:	0208      	lsls	r0, r1, #8
 80064e2:	f53f aec2 	bmi.w	800626a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064e6:	491f      	ldr	r1, [pc, #124]	; (8006564 <HAL_ADC_ConfigChannel+0x44c>)
 80064e8:	428a      	cmp	r2, r1
 80064ea:	f47f aebe 	bne.w	800626a <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <HAL_ADC_ConfigChannel+0x450>)
 80064f0:	481e      	ldr	r0, [pc, #120]	; (800656c <HAL_ADC_ConfigChannel+0x454>)
 80064f2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80064f4:	68a9      	ldr	r1, [r5, #8]
 80064f6:	0992      	lsrs	r2, r2, #6
 80064f8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80064fc:	fba0 0202 	umull	r0, r2, r0, r2
 8006500:	4331      	orrs	r1, r6
 8006502:	0992      	lsrs	r2, r2, #6
 8006504:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006508:	3201      	adds	r2, #1
 800650a:	60a9      	str	r1, [r5, #8]
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	2a00      	cmp	r2, #0
 8006514:	f43f aea9 	beq.w	800626a <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8006518:	9a01      	ldr	r2, [sp, #4]
 800651a:	3a01      	subs	r2, #1
 800651c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800651e:	9a01      	ldr	r2, [sp, #4]
 8006520:	2a00      	cmp	r2, #0
 8006522:	d1f9      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x400>
 8006524:	e6a1      	b.n	800626a <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006526:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 800652a:	f47f ae9e 	bne.w	800626a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800652e:	490d      	ldr	r1, [pc, #52]	; (8006564 <HAL_ADC_ConfigChannel+0x44c>)
 8006530:	428a      	cmp	r2, r1
 8006532:	f47f ae9a 	bne.w	800626a <HAL_ADC_ConfigChannel+0x152>
 8006536:	68aa      	ldr	r2, [r5, #8]
 8006538:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800653c:	4332      	orrs	r2, r6
 800653e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006542:	60aa      	str	r2, [r5, #8]
}
 8006544:	e697      	b.n	8006276 <HAL_ADC_ConfigChannel+0x15e>
 8006546:	480a      	ldr	r0, [pc, #40]	; (8006570 <HAL_ADC_ConfigChannel+0x458>)
 8006548:	e714      	b.n	8006374 <HAL_ADC_ConfigChannel+0x25c>
 800654a:	2402      	movs	r4, #2
 800654c:	e700      	b.n	8006350 <HAL_ADC_ConfigChannel+0x238>
 800654e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006552:	e6f0      	b.n	8006336 <HAL_ADC_ConfigChannel+0x21e>
 8006554:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006558:	e70c      	b.n	8006374 <HAL_ADC_ConfigChannel+0x25c>
 800655a:	2502      	movs	r5, #2
 800655c:	e79c      	b.n	8006498 <HAL_ADC_ConfigChannel+0x380>
 800655e:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006562:	e78e      	b.n	8006482 <HAL_ADC_ConfigChannel+0x36a>
 8006564:	58026000 	.word	0x58026000
 8006568:	24000000 	.word	0x24000000
 800656c:	053e2d63 	.word	0x053e2d63
 8006570:	fe500000 	.word	0xfe500000

08006574 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006574:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	07d1      	lsls	r1, r2, #31
 800657a:	d501      	bpl.n	8006580 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800657c:	2000      	movs	r0, #0
}
 800657e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006580:	6899      	ldr	r1, [r3, #8]
 8006582:	4a21      	ldr	r2, [pc, #132]	; (8006608 <ADC_Enable+0x94>)
 8006584:	4211      	tst	r1, r2
{
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800658a:	d008      	beq.n	800659e <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800658c:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 800658e:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006590:	f043 0310 	orr.w	r3, r3, #16
 8006594:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006598:	4303      	orrs	r3, r0
 800659a:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800659c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800659e:	6899      	ldr	r1, [r3, #8]
 80065a0:	4a1a      	ldr	r2, [pc, #104]	; (800660c <ADC_Enable+0x98>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80065aa:	f7ff fcf7 	bl	8005f9c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	4a17      	ldr	r2, [pc, #92]	; (8006610 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80065b2:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d01f      	beq.n	80065f8 <ADC_Enable+0x84>
 80065b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01b      	beq.n	80065f8 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <ADC_Enable+0xa0>)
 80065c2:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	07d6      	lsls	r6, r2, #31
 80065c8:	d414      	bmi.n	80065f4 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 80065ca:	4e10      	ldr	r6, [pc, #64]	; (800660c <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065cc:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065ce:	07d0      	lsls	r0, r2, #31
 80065d0:	d404      	bmi.n	80065dc <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	4032      	ands	r2, r6
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065dc:	f7ff fcde 	bl	8005f9c <HAL_GetTick>
 80065e0:	1b43      	subs	r3, r0, r5
 80065e2:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065e4:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065e6:	d902      	bls.n	80065ee <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	07d1      	lsls	r1, r2, #31
 80065ec:	d5ce      	bpl.n	800658c <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	07d2      	lsls	r2, r2, #31
 80065f2:	d5eb      	bpl.n	80065cc <ADC_Enable+0x58>
  return HAL_OK;
 80065f4:	2000      	movs	r0, #0
}
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80065f8:	4a07      	ldr	r2, [pc, #28]	; (8006618 <ADC_Enable+0xa4>)
 80065fa:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065fc:	06d2      	lsls	r2, r2, #27
 80065fe:	d0e1      	beq.n	80065c4 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006600:	4a06      	ldr	r2, [pc, #24]	; (800661c <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006602:	4293      	cmp	r3, r2
 8006604:	d1de      	bne.n	80065c4 <ADC_Enable+0x50>
 8006606:	e7f5      	b.n	80065f4 <ADC_Enable+0x80>
 8006608:	8000003f 	.word	0x8000003f
 800660c:	7fffffc0 	.word	0x7fffffc0
 8006610:	40022000 	.word	0x40022000
 8006614:	58026300 	.word	0x58026300
 8006618:	40022300 	.word	0x40022300
 800661c:	40022100 	.word	0x40022100

08006620 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006620:	4a39      	ldr	r2, [pc, #228]	; (8006708 <HAL_ADC_Start+0xe8>)
 8006622:	6803      	ldr	r3, [r0, #0]
 8006624:	4293      	cmp	r3, r2
{
 8006626:	b570      	push	{r4, r5, r6, lr}
 8006628:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800662a:	d045      	beq.n	80066b8 <HAL_ADC_Start+0x98>
 800662c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006630:	4293      	cmp	r3, r2
 8006632:	d041      	beq.n	80066b8 <HAL_ADC_Start+0x98>
 8006634:	4a35      	ldr	r2, [pc, #212]	; (800670c <HAL_ADC_Start+0xec>)
 8006636:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006638:	689d      	ldr	r5, [r3, #8]
 800663a:	f015 0504 	ands.w	r5, r5, #4
 800663e:	d141      	bne.n	80066c4 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8006640:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006644:	2b01      	cmp	r3, #1
 8006646:	d03d      	beq.n	80066c4 <HAL_ADC_Start+0xa4>
 8006648:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800664a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800664c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8006650:	f7ff ff90 	bl	8006574 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006654:	2800      	cmp	r0, #0
 8006656:	d137      	bne.n	80066c8 <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 8006658:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800665a:	f006 061f 	and.w	r6, r6, #31
 800665e:	4a2c      	ldr	r2, [pc, #176]	; (8006710 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006660:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8006662:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006664:	492b      	ldr	r1, [pc, #172]	; (8006714 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 8006666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800666a:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 800666c:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800666e:	d044      	beq.n	80066fa <HAL_ADC_Start+0xda>
 8006670:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006672:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006674:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006678:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800667a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800667c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006680:	d03f      	beq.n	8006702 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006682:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006684:	f022 0206 	bic.w	r2, r2, #6
 8006688:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800668a:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 800668c:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800668e:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006690:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8006692:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006696:	d020      	beq.n	80066da <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006698:	2e09      	cmp	r6, #9
 800669a:	d918      	bls.n	80066ce <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800669c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a2:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80066a4:	68cb      	ldr	r3, [r1, #12]
 80066a6:	019b      	lsls	r3, r3, #6
 80066a8:	d505      	bpl.n	80066b6 <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80066aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066b4:	6563      	str	r3, [r4, #84]	; 0x54
}
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <HAL_ADC_Start+0xf8>)
 80066ba:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066bc:	689d      	ldr	r5, [r3, #8]
 80066be:	f015 0504 	ands.w	r5, r5, #4
 80066c2:	d0bd      	beq.n	8006640 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 80066c4:	2002      	movs	r0, #2
}
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80066c8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066ce:	f240 2221 	movw	r2, #545	; 0x221
 80066d2:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066d6:	07f5      	lsls	r5, r6, #31
 80066d8:	d5e0      	bpl.n	800669c <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	0192      	lsls	r2, r2, #6
 80066de:	d505      	bpl.n	80066ec <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80066e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80066e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80066e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066ea:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80066ec:	6899      	ldr	r1, [r3, #8]
 80066ee:	4a0b      	ldr	r2, [pc, #44]	; (800671c <HAL_ADC_Start+0xfc>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	f042 0204 	orr.w	r2, r2, #4
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066fa:	4903      	ldr	r1, [pc, #12]	; (8006708 <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	d0b8      	beq.n	8006672 <HAL_ADC_Start+0x52>
 8006700:	e7bb      	b.n	800667a <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006702:	65a2      	str	r2, [r4, #88]	; 0x58
 8006704:	e7c1      	b.n	800668a <HAL_ADC_Start+0x6a>
 8006706:	bf00      	nop
 8006708:	40022000 	.word	0x40022000
 800670c:	58026300 	.word	0x58026300
 8006710:	fffff0fe 	.word	0xfffff0fe
 8006714:	40022100 	.word	0x40022100
 8006718:	40022300 	.word	0x40022300
 800671c:	7fffffc0 	.word	0x7fffffc0

08006720 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006720:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006722:	4a5a      	ldr	r2, [pc, #360]	; (800688c <ADC_ConfigureBoostMode+0x16c>)
{
 8006724:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006726:	6803      	ldr	r3, [r0, #0]
 8006728:	4293      	cmp	r3, r2
 800672a:	d029      	beq.n	8006780 <ADC_ConfigureBoostMode+0x60>
 800672c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006730:	4293      	cmp	r3, r2
 8006732:	d025      	beq.n	8006780 <ADC_ConfigureBoostMode+0x60>
 8006734:	4b56      	ldr	r3, [pc, #344]	; (8006890 <ADC_ConfigureBoostMode+0x170>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800673c:	bf14      	ite	ne
 800673e:	2301      	movne	r3, #1
 8006740:	2300      	moveq	r3, #0
 8006742:	b333      	cbz	r3, 8006792 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006744:	f002 f922 	bl	800898c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006748:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800674a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800674c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006750:	f000 808b 	beq.w	800686a <ADC_ConfigureBoostMode+0x14a>
 8006754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006758:	d06f      	beq.n	800683a <ADC_ConfigureBoostMode+0x11a>
 800675a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675e:	f000 8084 	beq.w	800686a <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006762:	f7ff fc33 	bl	8005fcc <HAL_GetREVID>
 8006766:	f241 0303 	movw	r3, #4099	; 0x1003
 800676a:	4298      	cmp	r0, r3
 800676c:	d84e      	bhi.n	800680c <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 800676e:	4b49      	ldr	r3, [pc, #292]	; (8006894 <ADC_ConfigureBoostMode+0x174>)
 8006770:	429d      	cmp	r5, r3
 8006772:	d92d      	bls.n	80067d0 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	6893      	ldr	r3, [r2, #8]
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800677e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006780:	4b45      	ldr	r3, [pc, #276]	; (8006898 <ADC_ConfigureBoostMode+0x178>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d8      	bne.n	8006744 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006792:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006796:	f003 fa0d 	bl	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800679a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800679c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800679e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80067a2:	d06c      	beq.n	800687e <ADC_ConfigureBoostMode+0x15e>
 80067a4:	d808      	bhi.n	80067b8 <ADC_ConfigureBoostMode+0x98>
 80067a6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067aa:	d050      	beq.n	800684e <ADC_ConfigureBoostMode+0x12e>
 80067ac:	d916      	bls.n	80067dc <ADC_ConfigureBoostMode+0xbc>
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b2:	d1d6      	bne.n	8006762 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 80067b4:	0945      	lsrs	r5, r0, #5
        break;
 80067b6:	e7d4      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80067b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80067bc:	d045      	beq.n	800684a <ADC_ConfigureBoostMode+0x12a>
 80067be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80067c2:	d1ce      	bne.n	8006762 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80067c4:	f7ff fc02 	bl	8005fcc <HAL_GetREVID>
 80067c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80067cc:	4298      	cmp	r0, r3
 80067ce:	d840      	bhi.n	8006852 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	6893      	ldr	r3, [r2, #8]
 80067d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d8:	6093      	str	r3, [r2, #8]
}
 80067da:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80067dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e0:	d006      	beq.n	80067f0 <ADC_ConfigureBoostMode+0xd0>
 80067e2:	d90a      	bls.n	80067fa <ADC_ConfigureBoostMode+0xda>
 80067e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067e8:	d002      	beq.n	80067f0 <ADC_ConfigureBoostMode+0xd0>
 80067ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067ee:	d1b8      	bne.n	8006762 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80067f0:	0c9b      	lsrs	r3, r3, #18
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80067f8:	e7b3      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80067fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067fe:	d0f7      	beq.n	80067f0 <ADC_ConfigureBoostMode+0xd0>
 8006800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006804:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006808:	d0f2      	beq.n	80067f0 <ADC_ConfigureBoostMode+0xd0>
 800680a:	e7aa      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 800680c:	4b23      	ldr	r3, [pc, #140]	; (800689c <ADC_ConfigureBoostMode+0x17c>)
 800680e:	429d      	cmp	r5, r3
 8006810:	d805      	bhi.n	800681e <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	6893      	ldr	r3, [r2, #8]
 8006816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681a:	6093      	str	r3, [r2, #8]
}
 800681c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800681e:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <ADC_ConfigureBoostMode+0x180>)
 8006820:	429d      	cmp	r5, r3
 8006822:	d91a      	bls.n	800685a <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006824:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006826:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006828:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800682a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800682c:	d829      	bhi.n	8006882 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006836:	6093      	str	r3, [r2, #8]
}
 8006838:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800683a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800683c:	f7ff fbc6 	bl	8005fcc <HAL_GetREVID>
 8006840:	f241 0303 	movw	r3, #4099	; 0x1003
 8006844:	4298      	cmp	r0, r3
 8006846:	d8e1      	bhi.n	800680c <ADC_ConfigureBoostMode+0xec>
 8006848:	e791      	b.n	800676e <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 800684a:	09c5      	lsrs	r5, r0, #7
        break;
 800684c:	e789      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 800684e:	0905      	lsrs	r5, r0, #4
        break;
 8006850:	e787      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <ADC_ConfigureBoostMode+0x17c>)
 8006854:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006858:	d2db      	bcs.n	8006812 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	6893      	ldr	r3, [r2, #8]
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006866:	6093      	str	r3, [r2, #8]
}
 8006868:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006870:	f7ff fbac 	bl	8005fcc <HAL_GetREVID>
 8006874:	f241 0303 	movw	r3, #4099	; 0x1003
 8006878:	4298      	cmp	r0, r3
 800687a:	d8c7      	bhi.n	800680c <ADC_ConfigureBoostMode+0xec>
 800687c:	e777      	b.n	800676e <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 800687e:	0985      	lsrs	r5, r0, #6
        break;
 8006880:	e76f      	b.n	8006762 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006882:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006886:	6093      	str	r3, [r2, #8]
}
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	bf00      	nop
 800688c:	40022000 	.word	0x40022000
 8006890:	58026300 	.word	0x58026300
 8006894:	01312d00 	.word	0x01312d00
 8006898:	40022300 	.word	0x40022300
 800689c:	00bebc21 	.word	0x00bebc21
 80068a0:	017d7841 	.word	0x017d7841
 80068a4:	02faf081 	.word	0x02faf081

080068a8 <HAL_ADC_Init>:
{
 80068a8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80068aa:	2300      	movs	r3, #0
{
 80068ac:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80068ae:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80068b0:	2800      	cmp	r0, #0
 80068b2:	f000 80d0 	beq.w	8006a56 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068b6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80068b8:	4604      	mov	r4, r0
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	f000 80ba 	beq.w	8006a34 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80068c0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80068c2:	6893      	ldr	r3, [r2, #8]
 80068c4:	009d      	lsls	r5, r3, #2
 80068c6:	d503      	bpl.n	80068d0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068c8:	6891      	ldr	r1, [r2, #8]
 80068ca:	4b71      	ldr	r3, [pc, #452]	; (8006a90 <HAL_ADC_Init+0x1e8>)
 80068cc:	400b      	ands	r3, r1
 80068ce:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80068d0:	6893      	ldr	r3, [r2, #8]
 80068d2:	00d8      	lsls	r0, r3, #3
 80068d4:	d416      	bmi.n	8006904 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068d6:	4b6f      	ldr	r3, [pc, #444]	; (8006a94 <HAL_ADC_Init+0x1ec>)
 80068d8:	4d6f      	ldr	r5, [pc, #444]	; (8006a98 <HAL_ADC_Init+0x1f0>)
 80068da:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80068dc:	6890      	ldr	r0, [r2, #8]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	496e      	ldr	r1, [pc, #440]	; (8006a9c <HAL_ADC_Init+0x1f4>)
 80068e2:	fba5 5303 	umull	r5, r3, r5, r3
 80068e6:	4001      	ands	r1, r0
 80068e8:	099b      	lsrs	r3, r3, #6
 80068ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80068ee:	3301      	adds	r3, #1
 80068f0:	6091      	str	r1, [r2, #8]
 80068f2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	b12b      	cbz	r3, 8006904 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f9      	bne.n	80068f8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006904:	6893      	ldr	r3, [r2, #8]
 8006906:	00d9      	lsls	r1, r3, #3
 8006908:	d424      	bmi.n	8006954 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800690a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800690c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800690e:	f043 0310 	orr.w	r3, r3, #16
 8006912:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006916:	432b      	orrs	r3, r5
 8006918:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800691a:	6893      	ldr	r3, [r2, #8]
 800691c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006920:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006922:	d11d      	bne.n	8006960 <HAL_ADC_Init+0xb8>
 8006924:	06db      	lsls	r3, r3, #27
 8006926:	d41b      	bmi.n	8006960 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006928:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800692a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800692e:	f043 0302 	orr.w	r3, r3, #2
 8006932:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006934:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006936:	07de      	lsls	r6, r3, #31
 8006938:	d428      	bmi.n	800698c <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800693a:	4b59      	ldr	r3, [pc, #356]	; (8006aa0 <HAL_ADC_Init+0x1f8>)
 800693c:	429a      	cmp	r2, r3
 800693e:	d017      	beq.n	8006970 <HAL_ADC_Init+0xc8>
 8006940:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006944:	429a      	cmp	r2, r3
 8006946:	d013      	beq.n	8006970 <HAL_ADC_Init+0xc8>
 8006948:	4b56      	ldr	r3, [pc, #344]	; (8006aa4 <HAL_ADC_Init+0x1fc>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	07d9      	lsls	r1, r3, #31
 800694e:	d41d      	bmi.n	800698c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006950:	4a55      	ldr	r2, [pc, #340]	; (8006aa8 <HAL_ADC_Init+0x200>)
 8006952:	e015      	b.n	8006980 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006954:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006956:	2500      	movs	r5, #0
 8006958:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800695c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800695e:	d0e1      	beq.n	8006924 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006960:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006962:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006964:	f043 0310 	orr.w	r3, r3, #16
}
 8006968:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800696a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800696c:	b002      	add	sp, #8
 800696e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006970:	4a4b      	ldr	r2, [pc, #300]	; (8006aa0 <HAL_ADC_Init+0x1f8>)
 8006972:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <HAL_ADC_Init+0x204>)
 8006974:	6892      	ldr	r2, [r2, #8]
 8006976:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006978:	4313      	orrs	r3, r2
 800697a:	07d8      	lsls	r0, r3, #31
 800697c:	d406      	bmi.n	800698c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800697e:	4a4c      	ldr	r2, [pc, #304]	; (8006ab0 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006980:	6893      	ldr	r3, [r2, #8]
 8006982:	6861      	ldr	r1, [r4, #4]
 8006984:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006988:	430b      	orrs	r3, r1
 800698a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800698c:	f7ff fb1e 	bl	8005fcc <HAL_GetREVID>
 8006990:	f241 0303 	movw	r3, #4099	; 0x1003
 8006994:	68a1      	ldr	r1, [r4, #8]
 8006996:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006998:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800699a:	d851      	bhi.n	8006a40 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800699c:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800699e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80069a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80069a2:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 80069a6:	4302      	orrs	r2, r0
 80069a8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d103      	bne.n	80069b6 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80069ae:	6a23      	ldr	r3, [r4, #32]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b8:	b123      	cbz	r3, 80069c4 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069ba:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80069be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069c0:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069c2:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	493b      	ldr	r1, [pc, #236]	; (8006ab4 <HAL_ADC_Init+0x20c>)
 80069c8:	68d8      	ldr	r0, [r3, #12]
 80069ca:	4001      	ands	r1, r0
 80069cc:	430a      	orrs	r2, r1
 80069ce:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069d6:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069d8:	d11c      	bne.n	8006a14 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069da:	0712      	lsls	r2, r2, #28
 80069dc:	d41a      	bmi.n	8006a14 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	4a35      	ldr	r2, [pc, #212]	; (8006ab8 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80069e2:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80069e4:	400a      	ands	r2, r1
 80069e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069e8:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80069ec:	430a      	orrs	r2, r1
 80069ee:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80069f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80069f4:	2a01      	cmp	r2, #1
 80069f6:	d03a      	beq.n	8006a6e <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a00:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006a02:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006a0e:	f7ff fe87 	bl	8006720 <ADC_ConfigureBoostMode>
 8006a12:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a14:	68e2      	ldr	r2, [r4, #12]
 8006a16:	2a01      	cmp	r2, #1
 8006a18:	d021      	beq.n	8006a5e <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1c:	f022 020f 	bic.w	r2, r2, #15
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006a24:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a30:	b002      	add	sp, #8
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006a34:	f7fd fda0 	bl	8004578 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006a38:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006a3a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006a3e:	e73f      	b.n	80068c0 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006a40:	2910      	cmp	r1, #16
 8006a42:	d1ab      	bne.n	800699c <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006a44:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006a46:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006a48:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a4a:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	f042 021c 	orr.w	r2, r2, #28
 8006a54:	e7a9      	b.n	80069aa <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006a56:	2501      	movs	r5, #1
}
 8006a58:	4628      	mov	r0, r5
 8006a5a:	b002      	add	sp, #8
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a60:	69a2      	ldr	r2, [r4, #24]
 8006a62:	f021 010f 	bic.w	r1, r1, #15
 8006a66:	3a01      	subs	r2, #1
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a6c:	e7d9      	b.n	8006a22 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006a6e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006a72:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006a74:	3901      	subs	r1, #1
 8006a76:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006a78:	4332      	orrs	r2, r6
 8006a7a:	691e      	ldr	r6, [r3, #16]
 8006a7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a80:	490e      	ldr	r1, [pc, #56]	; (8006abc <HAL_ADC_Init+0x214>)
 8006a82:	4302      	orrs	r2, r0
 8006a84:	4031      	ands	r1, r6
 8006a86:	430a      	orrs	r2, r1
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	611a      	str	r2, [r3, #16]
 8006a8e:	e7b7      	b.n	8006a00 <HAL_ADC_Init+0x158>
 8006a90:	5fffffc0 	.word	0x5fffffc0
 8006a94:	24000000 	.word	0x24000000
 8006a98:	053e2d63 	.word	0x053e2d63
 8006a9c:	6fffffc0 	.word	0x6fffffc0
 8006aa0:	40022000 	.word	0x40022000
 8006aa4:	58026000 	.word	0x58026000
 8006aa8:	58026300 	.word	0x58026300
 8006aac:	40022100 	.word	0x40022100
 8006ab0:	40022300 	.word	0x40022300
 8006ab4:	fff0c003 	.word	0xfff0c003
 8006ab8:	ffffbffc 	.word	0xffffbffc
 8006abc:	fc00f81e 	.word	0xfc00f81e

08006ac0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ac0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006ac6:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ac8:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006aca:	2a01      	cmp	r2, #1
 8006acc:	d04d      	beq.n	8006b6a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006ace:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ad0:	4c2b      	ldr	r4, [pc, #172]	; (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ad2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006ad4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ad6:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ad8:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ada:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006adc:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ae0:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ae2:	d008      	beq.n	8006af6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aea:	f041 0120 	orr.w	r1, r1, #32
 8006aee:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006af0:	b01a      	add	sp, #104	; 0x68
 8006af2:	bcf0      	pop	{r4, r5, r6, r7}
 8006af4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006af6:	4c23      	ldr	r4, [pc, #140]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006af8:	68a2      	ldr	r2, [r4, #8]
 8006afa:	0752      	lsls	r2, r2, #29
 8006afc:	d50b      	bpl.n	8006b16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006afe:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006b02:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b04:	f042 0220 	orr.w	r2, r2, #32
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006b10:	b01a      	add	sp, #104	; 0x68
 8006b12:	bcf0      	pop	{r4, r5, r6, r7}
 8006b14:	4770      	bx	lr
 8006b16:	68a8      	ldr	r0, [r5, #8]
 8006b18:	f010 0004 	ands.w	r0, r0, #4
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b1e:	b1c6      	cbz	r6, 8006b52 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006b20:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006b8c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006b24:	684f      	ldr	r7, [r1, #4]
 8006b26:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006b2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b2e:	433a      	orrs	r2, r7
 8006b30:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b34:	68ad      	ldr	r5, [r5, #8]
 8006b36:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b38:	432a      	orrs	r2, r5
 8006b3a:	07d4      	lsls	r4, r2, #31
 8006b3c:	d413      	bmi.n	8006b66 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006b3e:	688a      	ldr	r2, [r1, #8]
 8006b40:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006b44:	4910      	ldr	r1, [pc, #64]	; (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006b46:	4316      	orrs	r6, r2
 8006b48:	4021      	ands	r1, r4
 8006b4a:	430e      	orrs	r6, r1
 8006b4c:	f8cc 6008 	str.w	r6, [ip, #8]
 8006b50:	e7db      	b.n	8006b0a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006b52:	490e      	ldr	r1, [pc, #56]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006b54:	688a      	ldr	r2, [r1, #8]
 8006b56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b5a:	608a      	str	r2, [r1, #8]
 8006b5c:	68a8      	ldr	r0, [r5, #8]
 8006b5e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b60:	4302      	orrs	r2, r0
 8006b62:	07d0      	lsls	r0, r2, #31
 8006b64:	d505      	bpl.n	8006b72 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b66:	2000      	movs	r0, #0
 8006b68:	e7cf      	b.n	8006b0a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006b6a:	2002      	movs	r0, #2
}
 8006b6c:	b01a      	add	sp, #104	; 0x68
 8006b6e:	bcf0      	pop	{r4, r5, r6, r7}
 8006b70:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b72:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b74:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b76:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006b78:	4022      	ands	r2, r4
 8006b7a:	608a      	str	r2, [r1, #8]
 8006b7c:	e7c5      	b.n	8006b0a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006b7e:	bf00      	nop
 8006b80:	40022000 	.word	0x40022000
 8006b84:	40022100 	.word	0x40022100
 8006b88:	fffff0e0 	.word	0xfffff0e0
 8006b8c:	40022300 	.word	0x40022300

08006b90 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b90:	4907      	ldr	r1, [pc, #28]	; (8006bb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b92:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b96:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b98:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b9c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006ba2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ba8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006baa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006bac:	60cb      	str	r3, [r1, #12]
 8006bae:	4770      	bx	lr
 8006bb0:	e000ed00 	.word	0xe000ed00
 8006bb4:	05fa0000 	.word	0x05fa0000

08006bb8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <HAL_NVIC_SetPriority+0x68>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bc0:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bc2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bc6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bc8:	2d04      	cmp	r5, #4
 8006bca:	bf28      	it	cs
 8006bcc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bce:	2c06      	cmp	r4, #6
 8006bd0:	d919      	bls.n	8006c06 <HAL_NVIC_SetPriority+0x4e>
 8006bd2:	3b03      	subs	r3, #3
 8006bd4:	f04f 34ff 	mov.w	r4, #4294967295
 8006bd8:	409c      	lsls	r4, r3
 8006bda:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bde:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006be2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be4:	fa04 f405 	lsl.w	r4, r4, r5
 8006be8:	ea21 0104 	bic.w	r1, r1, r4
 8006bec:	fa01 f103 	lsl.w	r1, r1, r3
 8006bf0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006bf4:	db0a      	blt.n	8006c0c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bf6:	0109      	lsls	r1, r1, #4
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <HAL_NVIC_SetPriority+0x6c>)
 8006bfa:	b2c9      	uxtb	r1, r1
 8006bfc:	4403      	add	r3, r0
 8006bfe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006c02:	bc30      	pop	{r4, r5}
 8006c04:	4770      	bx	lr
 8006c06:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c08:	4613      	mov	r3, r2
 8006c0a:	e7e8      	b.n	8006bde <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c0c:	f000 000f 	and.w	r0, r0, #15
 8006c10:	0109      	lsls	r1, r1, #4
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_NVIC_SetPriority+0x70>)
 8006c14:	b2c9      	uxtb	r1, r1
 8006c16:	4403      	add	r3, r0
 8006c18:	7619      	strb	r1, [r3, #24]
 8006c1a:	bc30      	pop	{r4, r5}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	e000ed00 	.word	0xe000ed00
 8006c24:	e000e100 	.word	0xe000e100
 8006c28:	e000ecfc 	.word	0xe000ecfc

08006c2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	db07      	blt.n	8006c40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c30:	2301      	movs	r3, #1
 8006c32:	f000 011f 	and.w	r1, r0, #31
 8006c36:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <HAL_NVIC_EnableIRQ+0x18>)
 8006c38:	0940      	lsrs	r0, r0, #5
 8006c3a:	408b      	lsls	r3, r1
 8006c3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	e000e100 	.word	0xe000e100

08006c48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c48:	3801      	subs	r0, #1
 8006c4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006c4e:	d20d      	bcs.n	8006c6c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c50:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c52:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c54:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c56:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c58:	25f0      	movs	r5, #240	; 0xf0
 8006c5a:	4c06      	ldr	r4, [pc, #24]	; (8006c74 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c5c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c5e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c60:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c66:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006c68:	bc30      	pop	{r4, r5}
 8006c6a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	4770      	bx	lr
 8006c70:	e000e010 	.word	0xe000e010
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006c78:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006c7c:	4a04      	ldr	r2, [pc, #16]	; (8006c90 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006c7e:	2000      	movs	r0, #0
 8006c80:	4904      	ldr	r1, [pc, #16]	; (8006c94 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006c82:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c88:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8006c8a:	6048      	str	r0, [r1, #4]
}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	e000ed00 	.word	0xe000ed00
 8006c94:	e000ed90 	.word	0xe000ed90

08006c98 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006c98:	4a06      	ldr	r2, [pc, #24]	; (8006cb4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006c9a:	f040 0001 	orr.w	r0, r0, #1
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <HAL_MPU_Enable+0x20>)
 8006ca0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006ca2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006caa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006cae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006cb2:	4770      	bx	lr
 8006cb4:	e000ed00 	.word	0xe000ed00
 8006cb8:	e000ed90 	.word	0xe000ed90

08006cbc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006cbc:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <HAL_MPU_ConfigRegion+0x4c>)
 8006cbe:	7843      	ldrb	r3, [r0, #1]
 8006cc0:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006cc2:	7801      	ldrb	r1, [r0, #0]
 8006cc4:	b1e9      	cbz	r1, 8006d02 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006cc6:	6843      	ldr	r3, [r0, #4]
{
 8006cc8:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8006cca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ccc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006cce:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006cd0:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006cd2:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006cd4:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006cd6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006cda:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	7a01      	ldrb	r1, [r0, #8]
 8006ce0:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ce4:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ce6:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006cea:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006cec:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006cf0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006cf4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006cf8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006cfc:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006cfe:	6113      	str	r3, [r2, #16]
}
 8006d00:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8006d02:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006d04:	6111      	str	r1, [r2, #16]
 8006d06:	4770      	bx	lr
 8006d08:	e000ed90 	.word	0xe000ed90

08006d0c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d0c:	b470      	push	{r4, r5, r6}
 8006d0e:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d10:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d14:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006d18:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d1a:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d1e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8006d22:	ea43 0304 	orr.w	r3, r3, r4
 8006d26:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d28:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d2a:	d008      	beq.n	8006d3e <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006d2c:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006d30:	d002      	beq.n	8006d38 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006d32:	60e9      	str	r1, [r5, #12]
  }
}
 8006d34:	bc70      	pop	{r4, r5, r6}
 8006d36:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006d38:	6169      	str	r1, [r5, #20]
}
 8006d3a:	bc70      	pop	{r4, r5, r6}
 8006d3c:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d3e:	6883      	ldr	r3, [r0, #8]
 8006d40:	b1b3      	cbz	r3, 8006d70 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d017      	beq.n	8006d76 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d46:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d48:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d4c:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d50:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d52:	d01e      	beq.n	8006d92 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006d54:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d56:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006d5a:	d00f      	beq.n	8006d7c <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8006d5c:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8006d5e:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006d60:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8006d62:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006d64:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006d68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006d6c:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006d70:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8006d72:	bc70      	pop	{r4, r5, r6}
 8006d74:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8006d76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006d7a:	e7f9      	b.n	8006d70 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006d7c:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8006d7e:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006d80:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8006d82:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006d84:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8006d88:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8006d8c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006d90:	e7ee      	b.n	8006d70 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006d92:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8006d94:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006d96:	02c9      	lsls	r1, r1, #11
 8006d98:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006d9c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006da0:	e7e6      	b.n	8006d70 <DMA2D_SetConfig+0x64>
 8006da2:	bf00      	nop

08006da4 <HAL_DMA2D_MspInit>:
}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d036      	beq.n	8006e1a <HAL_DMA2D_Init+0x72>
{
 8006dac:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006dae:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006db2:	4604      	mov	r4, r0
 8006db4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006db8:	b353      	cbz	r3, 8006e10 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006dba:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006dbc:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006dbe:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006dc0:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006dc2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006dc6:	4916      	ldr	r1, [pc, #88]	; (8006e20 <HAL_DMA2D_Init+0x78>)
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	4031      	ands	r1, r6
 8006dce:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006dd0:	4814      	ldr	r0, [pc, #80]	; (8006e24 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006dd2:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006dd4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006dd6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006dd8:	69a1      	ldr	r1, [r4, #24]
 8006dda:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006ddc:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006dde:	4912      	ldr	r1, [pc, #72]	; (8006e28 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006de0:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006de2:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006de4:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006de6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006de8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dec:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006dee:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006df0:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006df2:	0552      	lsls	r2, r2, #21
 8006df4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006df6:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006df8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dfa:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8006dfe:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006e00:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006e04:	430a      	orrs	r2, r1
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e08:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e0a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006e10:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8006e14:	f7ff ffc6 	bl	8006da4 <HAL_DMA2D_MspInit>
 8006e18:	e7cf      	b.n	8006dba <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	fff8ffbf 	.word	0xfff8ffbf
 8006e24:	fffffef8 	.word	0xfffffef8
 8006e28:	ffff0000 	.word	0xffff0000

08006e2c <HAL_DMA2D_Start>:
{
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8006e2e:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8006e32:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8006e34:	2d01      	cmp	r5, #1
 8006e36:	d011      	beq.n	8006e5c <HAL_DMA2D_Start+0x30>
 8006e38:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e3a:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e3c:	2502      	movs	r5, #2
 8006e3e:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e40:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8006e42:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e46:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e4a:	f7ff ff5f 	bl	8006d0c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8006e4e:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8006e50:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8006e52:	6813      	ldr	r3, [r2, #0]
 8006e54:	4333      	orrs	r3, r6
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	b003      	add	sp, #12
 8006e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8006e5c:	2002      	movs	r0, #2
}
 8006e5e:	b003      	add	sp, #12
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	bf00      	nop

08006e64 <HAL_DMA2D_CLUTLoad>:
{
 8006e64:	b430      	push	{r4, r5}
 8006e66:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 8006e68:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8006e6c:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 8006e6e:	2c01      	cmp	r4, #1
{
 8006e70:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8006e74:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8006e78:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 8006e7a:	d02b      	beq.n	8006ed4 <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e7c:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8006e7e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e80:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e84:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 8006e86:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e8a:	b18a      	cbz	r2, 8006eb0 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006e8c:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	4c12      	ldr	r4, [pc, #72]	; (8006edc <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 8006e92:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006e94:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8006e96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e9a:	69d1      	ldr	r1, [r2, #28]
 8006e9c:	400c      	ands	r4, r1
 8006e9e:	4323      	orrs	r3, r4
 8006ea0:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 8006ea2:	69d3      	ldr	r3, [r2, #28]
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	61d3      	str	r3, [r2, #28]
}
 8006eaa:	b004      	add	sp, #16
 8006eac:	bc30      	pop	{r4, r5}
 8006eae:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006eb0:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	4c09      	ldr	r4, [pc, #36]	; (8006edc <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006eb6:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006eb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ebc:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 8006ebe:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006ec0:	400c      	ands	r4, r1
 8006ec2:	4323      	orrs	r3, r4
 8006ec4:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 8006ec6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006ec8:	f043 0320 	orr.w	r3, r3, #32
 8006ecc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006ece:	b004      	add	sp, #16
 8006ed0:	bc30      	pop	{r4, r5}
 8006ed2:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8006ed4:	2002      	movs	r0, #2
}
 8006ed6:	b004      	add	sp, #16
 8006ed8:	bc30      	pop	{r4, r5}
 8006eda:	4770      	bx	lr
 8006edc:	ffff00ef 	.word	0xffff00ef

08006ee0 <HAL_DMA2D_PollForTransfer>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8006ee2:	2300      	movs	r3, #0
{
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8006eea:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006eec:	6803      	ldr	r3, [r0, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	07d2      	lsls	r2, r2, #31
 8006ef2:	d40f      	bmi.n	8006f14 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ef4:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006ef6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ef8:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8006efa:	0692      	lsls	r2, r2, #26
 8006efc:	d433      	bmi.n	8006f66 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8006efe:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006f00:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f02:	2101      	movs	r1, #1
  return HAL_OK;
 8006f04:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006f06:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8006f08:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f0c:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8006f10:	b002      	add	sp, #8
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006f14:	f7ff f842 	bl	8005f9c <HAL_GetTick>
 8006f18:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	e001      	b.n	8006f22 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8006f1e:	1c60      	adds	r0, r4, #1
 8006f20:	d148      	bne.n	8006fb4 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	0791      	lsls	r1, r2, #30
 8006f26:	d4e5      	bmi.n	8006ef4 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f2c:	9a01      	ldr	r2, [sp, #4]
 8006f2e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8006f32:	d0f4      	beq.n	8006f1e <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f34:	9a01      	ldr	r2, [sp, #4]
 8006f36:	0696      	lsls	r6, r2, #26
 8006f38:	d503      	bpl.n	8006f42 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f3a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006f3c:	f042 0202 	orr.w	r2, r2, #2
 8006f40:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f42:	9a01      	ldr	r2, [sp, #4]
 8006f44:	07d4      	lsls	r4, r2, #31
 8006f46:	d503      	bpl.n	8006f50 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f48:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006f50:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f52:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8006f54:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006f56:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006f58:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f5a:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8006f5e:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8006f62:	b002      	add	sp, #8
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006f66:	f7ff f819 	bl	8005f9c <HAL_GetTick>
 8006f6a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	e001      	b.n	8006f74 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8006f70:	1c61      	adds	r1, r4, #1
 8006f72:	d132      	bne.n	8006fda <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	06d2      	lsls	r2, r2, #27
 8006f78:	d4c1      	bmi.n	8006efe <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f7e:	9a01      	ldr	r2, [sp, #4]
 8006f80:	f012 0f29 	tst.w	r2, #41	; 0x29
 8006f84:	d0f4      	beq.n	8006f70 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006f86:	9a01      	ldr	r2, [sp, #4]
 8006f88:	0716      	lsls	r6, r2, #28
 8006f8a:	d503      	bpl.n	8006f94 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006f8c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006f8e:	f042 0204 	orr.w	r2, r2, #4
 8006f92:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f94:	9a01      	ldr	r2, [sp, #4]
 8006f96:	0694      	lsls	r4, r2, #26
 8006f98:	d503      	bpl.n	8006fa2 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f9a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006f9c:	f042 0202 	orr.w	r2, r2, #2
 8006fa0:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fa2:	9a01      	ldr	r2, [sp, #4]
 8006fa4:	07d0      	lsls	r0, r2, #31
 8006fa6:	d503      	bpl.n	8006fb0 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fa8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fb0:	2429      	movs	r4, #41	; 0x29
 8006fb2:	e7ce      	b.n	8006f52 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fb4:	f7fe fff2 	bl	8005f9c <HAL_GetTick>
 8006fb8:	1b80      	subs	r0, r0, r6
 8006fba:	42a0      	cmp	r0, r4
 8006fbc:	d801      	bhi.n	8006fc2 <HAL_DMA2D_PollForTransfer+0xe2>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d1ab      	bne.n	8006f1a <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006fc4:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8006fc6:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006fc8:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8006fcc:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8006fce:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006fd2:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006fd4:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8006fd8:	e79a      	b.n	8006f10 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fda:	f7fe ffdf 	bl	8005f9c <HAL_GetTick>
 8006fde:	1b80      	subs	r0, r0, r6
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d8ee      	bhi.n	8006fc2 <HAL_DMA2D_PollForTransfer+0xe2>
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	d1c1      	bne.n	8006f6c <HAL_DMA2D_PollForTransfer+0x8c>
 8006fe8:	e7eb      	b.n	8006fc2 <HAL_DMA2D_PollForTransfer+0xe2>
 8006fea:	bf00      	nop

08006fec <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8006fec:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8006ff0:	2a01      	cmp	r2, #1
 8006ff2:	d063      	beq.n	80070bc <HAL_DMA2D_ConfigLayer+0xd0>
 8006ff4:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006ff6:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ffa:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006ffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007000:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007002:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007004:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8007008:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800700c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800700e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8007010:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007012:	0512      	lsls	r2, r2, #20
 8007014:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007016:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800701a:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800701e:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007020:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007022:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007026:	d922      	bls.n	800706e <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007028:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800702a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800702e:	b981      	cbnz	r1, 8007052 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	4923      	ldr	r1, [pc, #140]	; (80070c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007034:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007036:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007038:	4029      	ands	r1, r5
 800703a:	430a      	orrs	r2, r1
 800703c:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800703e:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8007040:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007042:	2101      	movs	r1, #1
  return HAL_OK;
 8007044:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007046:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800704a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800704e:	bc70      	pop	{r4, r5, r6}
 8007050:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007052:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007054:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007056:	d129      	bne.n	80070ac <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007058:	69e6      	ldr	r6, [r4, #28]
 800705a:	491a      	ldr	r1, [pc, #104]	; (80070c4 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800705c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800705e:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007060:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007062:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8007066:	430a      	orrs	r2, r1
 8007068:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800706a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800706c:	e7e8      	b.n	8007040 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800706e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007070:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8007074:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007076:	b161      	cbz	r1, 8007092 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	4c11      	ldr	r4, [pc, #68]	; (80070c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 800707c:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800707e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007080:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007082:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007084:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007088:	4322      	orrs	r2, r4
 800708a:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800708c:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800708e:	620d      	str	r5, [r1, #32]
 8007090:	e7d6      	b.n	8007040 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	4c0a      	ldr	r4, [pc, #40]	; (80070c0 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007096:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007098:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800709a:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800709c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800709e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80070a2:	4322      	orrs	r2, r4
 80070a4:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80070a6:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80070a8:	6288      	str	r0, [r1, #40]	; 0x28
 80070aa:	e7c9      	b.n	8007040 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070ac:	69e5      	ldr	r5, [r4, #28]
 80070ae:	4904      	ldr	r1, [pc, #16]	; (80070c0 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070b2:	4029      	ands	r1, r5
 80070b4:	430a      	orrs	r2, r1
 80070b6:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070b8:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070ba:	e7c1      	b.n	8007040 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80070bc:	2002      	movs	r0, #2
}
 80070be:	4770      	bx	lr
 80070c0:	00ccfff0 	.word	0x00ccfff0
 80070c4:	00c0fff0 	.word	0x00c0fff0

080070c8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4605      	mov	r5, r0
 80070ce:	4688      	mov	r8, r1
 80070d0:	4617      	mov	r7, r2
 80070d2:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80070d4:	f7fe ff62 	bl	8005f9c <HAL_GetTick>
 80070d8:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80070da:	e005      	b.n	80070e8 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80070dc:	f7fe ff5e 	bl	8005f9c <HAL_GetTick>
 80070e0:	1b84      	subs	r4, r0, r6
 80070e2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80070e6:	d80e      	bhi.n	8007106 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80070e8:	682c      	ldr	r4, [r5, #0]
 80070ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80070ec:	07db      	lsls	r3, r3, #31
 80070ee:	d5f5      	bpl.n	80070dc <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80070f0:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 80070f4:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 80070f6:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80070f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80070fc:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007100:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8007106:	2003      	movs	r0, #3
}
 8007108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800710c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop

08007110 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007110:	2800      	cmp	r0, #0
 8007112:	f000 80b3 	beq.w	800727c <HAL_DSI_Init+0x16c>
{
 8007116:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007118:	7c43      	ldrb	r3, [r0, #17]
{
 800711a:	b083      	sub	sp, #12
 800711c:	460d      	mov	r5, r1
 800711e:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80a8 	beq.w	8007276 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8007126:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007128:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800712a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800712c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800712e:	9200      	str	r2, [sp, #0]
 8007130:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007134:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007138:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800713c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007148:	f7fe ff28 	bl	8005f9c <HAL_GetTick>
 800714c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800714e:	e006      	b.n	800715e <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007150:	f7fe ff24 	bl	8005f9c <HAL_GetTick>
 8007154:	1b83      	subs	r3, r0, r6
 8007156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800715a:	f200 8089 	bhi.w	8007270 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007164:	04d1      	lsls	r1, r2, #19
 8007166:	d5f3      	bpl.n	8007150 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007168:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800716a:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800716c:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007170:	682e      	ldr	r6, [r5, #0]
 8007172:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007174:	4942      	ldr	r1, [pc, #264]	; (8007280 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007176:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800717a:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800717c:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800717e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007182:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8007186:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800718a:	430a      	orrs	r2, r1
 800718c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007190:	9001      	str	r0, [sp, #4]
 8007192:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800719e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80071aa:	f7fe fef7 	bl	8005f9c <HAL_GetTick>
 80071ae:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80071b0:	e005      	b.n	80071be <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80071b2:	f7fe fef3 	bl	8005f9c <HAL_GetTick>
 80071b6:	1b80      	subs	r0, r0, r6
 80071b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071bc:	d858      	bhi.n	8007270 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80071c4:	05d2      	lsls	r2, r2, #23
 80071c6:	d5f4      	bpl.n	80071b2 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80071c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80071cc:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80071d0:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 80071d2:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80071d4:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80071d8:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80071da:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80071de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80071e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80071e6:	f022 0203 	bic.w	r2, r2, #3
 80071ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80071ee:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80071f2:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80071f4:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80071f6:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80071f8:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80071fc:	bf38      	it	cc
 80071fe:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007200:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007204:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007208:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800720a:	f020 0003 	bic.w	r0, r0, #3
 800720e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007212:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007216:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007218:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800721a:	682d      	ldr	r5, [r5, #0]
 800721c:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007224:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007226:	fb0c f505 	mul.w	r5, ip, r5
 800722a:	4a16      	ldr	r2, [pc, #88]	; (8007284 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800722c:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007230:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007234:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007236:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007238:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800723a:	ea46 060e 	orr.w	r6, r6, lr
 800723e:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8007240:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007242:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007246:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800724a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800724e:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8007252:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007254:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8007258:	432a      	orrs	r2, r5
 800725a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800725e:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007262:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007266:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007268:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800726a:	7466      	strb	r6, [r4, #17]
}
 800726c:	b003      	add	sp, #12
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007270:	2003      	movs	r0, #3
}
 8007272:	b003      	add	sp, #12
 8007274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8007276:	f7ff ff49 	bl	800710c <HAL_DSI_MspInit>
 800727a:	e754      	b.n	8007126 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800727c:	2001      	movs	r0, #1
}
 800727e:	4770      	bx	lr
 8007280:	fffc8603 	.word	0xfffc8603
 8007284:	003d0900 	.word	0x003d0900

08007288 <HAL_DSI_TearingEffectCallback>:
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop

0800728c <HAL_DSI_EndOfRefreshCallback>:
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop

08007290 <HAL_DSI_ErrorCallback>:
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007294:	6803      	ldr	r3, [r0, #0]
 8007296:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800729a:	07d1      	lsls	r1, r2, #31
{
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80072a0:	d503      	bpl.n	80072aa <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80072a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80072a6:	07d2      	lsls	r2, r2, #31
 80072a8:	d462      	bmi.n	8007370 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80072aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80072ae:	0791      	lsls	r1, r2, #30
 80072b0:	d503      	bpl.n	80072ba <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80072b2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80072b6:	0792      	lsls	r2, r2, #30
 80072b8:	d44f      	bmi.n	800735a <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80072ba:	69a3      	ldr	r3, [r4, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d04b      	beq.n	8007358 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80072c0:	6821      	ldr	r1, [r4, #0]
 80072c2:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80072c6:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80072ca:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80072ce:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80072d0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80072d4:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80072d6:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80072d8:	b119      	cbz	r1, 80072e2 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80072da:	6961      	ldr	r1, [r4, #20]
 80072dc:	f041 0101 	orr.w	r1, r1, #1
 80072e0:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80072e2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80072e6:	d003      	beq.n	80072f0 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80072e8:	6962      	ldr	r2, [r4, #20]
 80072ea:	f042 0202 	orr.w	r2, r2, #2
 80072ee:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80072f0:	07d8      	lsls	r0, r3, #31
 80072f2:	d503      	bpl.n	80072fc <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80072f4:	6962      	ldr	r2, [r4, #20]
 80072f6:	f042 0204 	orr.w	r2, r2, #4
 80072fa:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80072fc:	0799      	lsls	r1, r3, #30
 80072fe:	d503      	bpl.n	8007308 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007300:	6962      	ldr	r2, [r4, #20]
 8007302:	f042 0208 	orr.w	r2, r2, #8
 8007306:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007308:	f013 0f0c 	tst.w	r3, #12
 800730c:	d003      	beq.n	8007316 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800730e:	6962      	ldr	r2, [r4, #20]
 8007310:	f042 0210 	orr.w	r2, r2, #16
 8007314:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007316:	06da      	lsls	r2, r3, #27
 8007318:	d503      	bpl.n	8007322 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800731a:	6962      	ldr	r2, [r4, #20]
 800731c:	f042 0220 	orr.w	r2, r2, #32
 8007320:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007322:	0698      	lsls	r0, r3, #26
 8007324:	d503      	bpl.n	800732e <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007326:	6962      	ldr	r2, [r4, #20]
 8007328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800732c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800732e:	0659      	lsls	r1, r3, #25
 8007330:	d503      	bpl.n	800733a <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007332:	6962      	ldr	r2, [r4, #20]
 8007334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007338:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800733a:	061a      	lsls	r2, r3, #24
 800733c:	d503      	bpl.n	8007346 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800733e:	6962      	ldr	r2, [r4, #20]
 8007340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007344:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007346:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800734a:	d003      	beq.n	8007354 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800734c:	6963      	ldr	r3, [r4, #20]
 800734e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007352:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007354:	6963      	ldr	r3, [r4, #20]
 8007356:	b93b      	cbnz	r3, 8007368 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007358:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800735a:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800735c:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800735e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007362:	f7ff ff93 	bl	800728c <HAL_DSI_EndOfRefreshCallback>
 8007366:	e7a8      	b.n	80072ba <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8007368:	4620      	mov	r0, r4
 800736a:	f7ff ff91 	bl	8007290 <HAL_DSI_ErrorCallback>
}
 800736e:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007370:	2201      	movs	r2, #1
 8007372:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007376:	f7ff ff87 	bl	8007288 <HAL_DSI_TearingEffectCallback>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	e795      	b.n	80072aa <HAL_DSI_IRQHandler+0x16>
 800737e:	bf00      	nop

08007380 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007380:	7c03      	ldrb	r3, [r0, #16]
 8007382:	2b01      	cmp	r3, #1
 8007384:	f000 8113 	beq.w	80075ae <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007388:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800738a:	2201      	movs	r2, #1
{
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8007390:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007392:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007396:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007398:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800739c:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80073a0:	4e84      	ldr	r6, [pc, #528]	; (80075b4 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80073a2:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80073a4:	4d84      	ldr	r5, [pc, #528]	; (80075b8 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80073a6:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80073aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80073ac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80073b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ba:	f022 0203 	bic.w	r2, r2, #3
 80073be:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80073c0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80073c2:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80073c6:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80073ca:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80073cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ce:	ea06 0602 	and.w	r6, r6, r2
 80073d2:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80073d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80073da:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80073de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80073e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073e2:	ea02 0205 	and.w	r2, r2, r5
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80073e8:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80073ea:	ea47 0708 	orr.w	r7, r7, r8
 80073ee:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80073f0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80073f2:	ea06 0605 	and.w	r6, r6, r5
 80073f6:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80073f8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80073fa:	ea45 050e 	orr.w	r5, r5, lr
 80073fe:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007400:	68dd      	ldr	r5, [r3, #12]
 8007402:	f025 0503 	bic.w	r5, r5, #3
 8007406:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	ea42 020c 	orr.w	r2, r2, ip
 800740e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007410:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007412:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007414:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007418:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800741c:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800741e:	ea42 0206 	orr.w	r2, r2, r6
 8007422:	695d      	ldr	r5, [r3, #20]
 8007424:	ea42 0207 	orr.w	r2, r2, r7
 8007428:	ea42 0205 	orr.w	r2, r2, r5
 800742c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	f022 020f 	bic.w	r2, r2, #15
 8007434:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	ea42 0200 	orr.w	r2, r2, r0
 800743c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800743e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007442:	f022 020e 	bic.w	r2, r2, #14
 8007446:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800744a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800744e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007452:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007456:	d107      	bne.n	8007468 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007458:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800745a:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800745c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8007460:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	432a      	orrs	r2, r5
 8007466:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007468:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800746a:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800746c:	4a53      	ldr	r2, [pc, #332]	; (80075bc <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800746e:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007470:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007472:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007476:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800747a:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800747c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800747e:	4f50      	ldr	r7, [pc, #320]	; (80075c0 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007480:	4305      	orrs	r5, r0
 8007482:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007484:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007486:	4010      	ands	r0, r2
 8007488:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800748a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800748c:	484d      	ldr	r0, [pc, #308]	; (80075c4 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800748e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007492:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007496:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8007498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800749a:	4017      	ands	r7, r2
 800749c:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800749e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80074a0:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80074a4:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80074a8:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80074aa:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80074ac:	4005      	ands	r5, r0
 80074ae:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80074b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80074b6:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80074bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074be:	4002      	ands	r2, r0
 80074c0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80074c2:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80074c4:	4a3b      	ldr	r2, [pc, #236]	; (80075b4 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80074c6:	ea47 070e 	orr.w	r7, r7, lr
 80074ca:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80074cc:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80074ce:	4007      	ands	r7, r0

  return HAL_OK;
 80074d0:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80074d2:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80074d4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80074d6:	ea45 050c 	orr.w	r5, r5, ip
 80074da:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80074dc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80074de:	402a      	ands	r2, r5
 80074e0:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80074e2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80074e4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80074e6:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80074ea:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80074ec:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80074f0:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80074f2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80074f4:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 80074f8:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80074fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fc:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007500:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8007506:	699f      	ldr	r7, [r3, #24]
 8007508:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800750c:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800750e:	699d      	ldr	r5, [r3, #24]
 8007510:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007514:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007518:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800751a:	699d      	ldr	r5, [r3, #24]
 800751c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007520:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007528:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800752c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800752e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007536:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007538:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800753c:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007540:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8007542:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007544:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8007548:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800754a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800754c:	ea45 050e 	orr.w	r5, r5, lr
 8007550:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8007552:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007554:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8007558:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800755a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755c:	ea42 020c 	orr.w	r2, r2, ip
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007562:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007564:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007566:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800756a:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800756e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007572:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007574:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800757a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007582:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007584:	ea45 050e 	orr.w	r5, r5, lr
 8007588:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800758a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800758c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007590:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8007592:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007594:	ea41 010c 	orr.w	r1, r1, ip
 8007598:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800759a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800759c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80075a0:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80075a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a4:	433a      	orrs	r2, r7
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 80075a8:	7426      	strb	r6, [r4, #16]
}
 80075aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 80075ae:	2002      	movs	r0, #2
}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	ffffc000 	.word	0xffffc000
 80075b8:	ffffe000 	.word	0xffffe000
 80075bc:	fffff000 	.word	0xfffff000
 80075c0:	ffff8000 	.word	0xffff8000
 80075c4:	fffffc00 	.word	0xfffffc00

080075c8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075c8:	7c02      	ldrb	r2, [r0, #16]
 80075ca:	2a01      	cmp	r2, #1
 80075cc:	d00e      	beq.n	80075ec <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80075ce:	6802      	ldr	r2, [r0, #0]
 80075d0:	4603      	mov	r3, r0
{
 80075d2:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80075d4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075d6:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80075d8:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 80075dc:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80075de:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80075e0:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80075e2:	4321      	orrs	r1, r4
 80075e4:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 80075e6:	741d      	strb	r5, [r3, #16]
}
 80075e8:	bc30      	pop	{r4, r5}
 80075ea:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80075ec:	2002      	movs	r0, #2
}
 80075ee:	4770      	bx	lr

080075f0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075f0:	7c03      	ldrb	r3, [r0, #16]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d021      	beq.n	800763a <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80075f6:	6803      	ldr	r3, [r0, #0]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80075fc:	4608      	mov	r0, r1
{
 80075fe:	b410      	push	{r4}
 8007600:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8007602:	9100      	str	r1, [sp, #0]
 8007604:	685c      	ldr	r4, [r3, #4]
 8007606:	f044 0401 	orr.w	r4, r4, #1
 800760a:	605c      	str	r4, [r3, #4]
 800760c:	685c      	ldr	r4, [r3, #4]
 800760e:	f004 0401 	and.w	r4, r4, #1
 8007612:	9400      	str	r4, [sp, #0]
 8007614:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007616:	9101      	str	r1, [sp, #4]
 8007618:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800761c:	f044 0408 	orr.w	r4, r4, #8
 8007620:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8007624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8007628:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	9b01      	ldr	r3, [sp, #4]
}
 8007632:	b003      	add	sp, #12
 8007634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007638:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800763a:	2002      	movs	r0, #2
}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop

08007640 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007640:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007642:	7c05      	ldrb	r5, [r0, #16]
{
 8007644:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007646:	2d01      	cmp	r5, #1
 8007648:	d00a      	beq.n	8007660 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800764a:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 800764c:	2501      	movs	r5, #1
 800764e:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007650:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8007652:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007654:	f7ff fd38 	bl	80070c8 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007658:	2300      	movs	r3, #0
 800765a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800765c:	b002      	add	sp, #8
 800765e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8007660:	2002      	movs	r0, #2
}
 8007662:	b002      	add	sp, #8
 8007664:	bd70      	pop	{r4, r5, r6, pc}
 8007666:	bf00      	nop

08007668 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800766e:	7c03      	ldrb	r3, [r0, #16]
{
 8007670:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8007672:	2b01      	cmp	r3, #1
 8007674:	d05e      	beq.n	8007734 <HAL_DSI_LongWrite+0xcc>
 8007676:	2301      	movs	r3, #1
 8007678:	4607      	mov	r7, r0
 800767a:	4689      	mov	r9, r1
 800767c:	4692      	mov	sl, r2
 800767e:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007680:	f7fe fc8c 	bl	8005f9c <HAL_GetTick>
 8007684:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007686:	e005      	b.n	8007694 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007688:	f7fe fc88 	bl	8005f9c <HAL_GetTick>
 800768c:	1b40      	subs	r0, r0, r5
 800768e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007692:	d84b      	bhi.n	800772c <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8007698:	f014 0401 	ands.w	r4, r4, #1
 800769c:	d0f4      	beq.n	8007688 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800769e:	4640      	mov	r0, r8
 80076a0:	2803      	cmp	r0, #3
 80076a2:	bf28      	it	cs
 80076a4:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	d046      	beq.n	800773a <HAL_DSI_LongWrite+0xd2>
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	1e5c      	subs	r4, r3, #1
 80076b0:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80076b2:	3301      	adds	r3, #1
 80076b4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80076b8:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 80076ba:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80076bc:	fa02 f205 	lsl.w	r2, r2, r5
 80076c0:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 80076c4:	d3f5      	bcc.n	80076b2 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 80076c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 80076c8:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 80076ca:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80076cc:	ebb8 0000 	subs.w	r0, r8, r0
 80076d0:	d017      	beq.n	8007702 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80076d2:	2804      	cmp	r0, #4
 80076d4:	4684      	mov	ip, r0
 80076d6:	f04f 0500 	mov.w	r5, #0
 80076da:	bf28      	it	cs
 80076dc:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 80076e0:	462b      	mov	r3, r5
 80076e2:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80076e6:	f816 4b01 	ldrb.w	r4, [r6], #1
 80076ea:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 80076ec:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80076ee:	f105 0508 	add.w	r5, r5, #8
 80076f2:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 80076f6:	d1f6      	bne.n	80076e6 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 80076f8:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 80076fc:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 80076fe:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8007700:	d1e7      	bne.n	80076d2 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007702:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007706:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800770a:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800770c:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8007710:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007712:	46c8      	mov	r8, r9
 8007714:	fa1f f989 	uxth.w	r9, r9
 8007718:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 800771c:	ea43 0309 	orr.w	r3, r3, r9
 8007720:	ea43 0308 	orr.w	r3, r3, r8
 8007724:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8007726:	743a      	strb	r2, [r7, #16]
}
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 800772c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800772e:	743c      	strb	r4, [r7, #16]
}
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8007734:	2002      	movs	r0, #2
}
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800773a:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 800773c:	e7e1      	b.n	8007702 <HAL_DSI_LongWrite+0x9a>
 800773e:	bf00      	nop

08007740 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007744:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007746:	7c02      	ldrb	r2, [r0, #16]
{
 8007748:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800774a:	2a01      	cmp	r2, #1
{
 800774c:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 800774e:	d070      	beq.n	8007832 <HAL_DSI_Read+0xf2>
 8007750:	461e      	mov	r6, r3
 8007752:	2301      	movs	r3, #1
 8007754:	4607      	mov	r7, r0
 8007756:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007758:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800775a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800775c:	d80d      	bhi.n	800777a <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800775e:	2c06      	cmp	r4, #6
 8007760:	d017      	beq.n	8007792 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007762:	2c04      	cmp	r4, #4
 8007764:	d04f      	beq.n	8007806 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007766:	2c14      	cmp	r4, #20
 8007768:	d067      	beq.n	800783a <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800776a:	2c24      	cmp	r4, #36	; 0x24
 800776c:	d052      	beq.n	8007814 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 800776e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8007770:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007772:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007774:	b002      	add	sp, #8
 8007776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800777a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800777e:	b2f3      	uxtb	r3, r6
 8007780:	2237      	movs	r2, #55	; 0x37
 8007782:	f8cd c000 	str.w	ip, [sp]
 8007786:	f7ff fc9f 	bl	80070c8 <DSI_ShortWrite>
 800778a:	2800      	cmp	r0, #0
 800778c:	d1ef      	bne.n	800776e <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800778e:	2c06      	cmp	r4, #6
 8007790:	d1e7      	bne.n	8007762 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007794:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007796:	021a      	lsls	r2, r3, #8
 8007798:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 800779c:	f043 0306 	orr.w	r3, r3, #6
 80077a0:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80077a2:	f7fe fbfb 	bl	8005f9c <HAL_GetTick>
 80077a6:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 80077a8:	e006      	b.n	80077b8 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80077aa:	f7fe fbf7 	bl	8005f9c <HAL_GetTick>
 80077ae:	eba0 0008 	sub.w	r0, r0, r8
 80077b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80077b6:	d81b      	bhi.n	80077f0 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	dd1f      	ble.n	80077fc <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80077c0:	f011 0110 	ands.w	r1, r1, #16
 80077c4:	d1f1      	bne.n	80077aa <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80077c6:	2e04      	cmp	r6, #4
 80077c8:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 80077ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80077cc:	bf28      	it	cs
 80077ce:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 80077d0:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80077d2:	fa22 f401 	lsr.w	r4, r2, r1
 80077d6:	3108      	adds	r1, #8
 80077d8:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 80077dc:	429d      	cmp	r5, r3
 80077de:	d1f8      	bne.n	80077d2 <HAL_DSI_Read+0x92>
 80077e0:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80077e2:	f7fe fbdb 	bl	8005f9c <HAL_GetTick>
 80077e6:	eba0 0008 	sub.w	r0, r0, r8
 80077ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80077ee:	d9e3      	bls.n	80077b8 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 80077f0:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80077f2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80077f4:	743b      	strb	r3, [r7, #16]
}
 80077f6:	b002      	add	sp, #8
 80077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 80077fc:	2000      	movs	r0, #0
 80077fe:	7438      	strb	r0, [r7, #16]
}
 8007800:	b002      	add	sp, #8
 8007802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007806:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800780a:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800780c:	f043 0304 	orr.w	r3, r3, #4
 8007810:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007812:	e7c6      	b.n	80077a2 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007816:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800781a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800781c:	7852      	ldrb	r2, [r2, #1]
 800781e:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007824:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800782a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800782e:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007830:	e7b7      	b.n	80077a2 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8007832:	2002      	movs	r0, #2
}
 8007834:	b002      	add	sp, #8
 8007836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800783a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800783c:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007840:	7811      	ldrb	r1, [r2, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007844:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007848:	f043 0314 	orr.w	r3, r3, #20
 800784c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800784e:	e7a8      	b.n	80077a2 <HAL_DSI_Read+0x62>

08007850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007854:	680e      	ldr	r6, [r1, #0]
{
 8007856:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007858:	2e00      	cmp	r6, #0
 800785a:	f000 80d3 	beq.w	8007a04 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800785e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007860:	f8df a220 	ldr.w	sl, [pc, #544]	; 8007a84 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007864:	f8df b220 	ldr.w	fp, [pc, #544]	; 8007a88 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007868:	46b1      	mov	r9, r6
 800786a:	e020      	b.n	80078ae <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800786c:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800786e:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007872:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007876:	f04f 0e0f 	mov.w	lr, #15
 800787a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800787e:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007880:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007884:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8007888:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800788a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800788e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007892:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007896:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800789a:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800789c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800789e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078a0:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80078a2:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 80078a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078a6:	fa39 f203 	lsrs.w	r2, r9, r3
 80078aa:	f000 80ab 	beq.w	8007a04 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078ae:	2201      	movs	r2, #1
 80078b0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80078b2:	ea12 0809 	ands.w	r8, r2, r9
 80078b6:	d0f5      	beq.n	80078a4 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078b8:	684c      	ldr	r4, [r1, #4]
 80078ba:	005f      	lsls	r7, r3, #1
 80078bc:	f024 0c10 	bic.w	ip, r4, #16
 80078c0:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078c4:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078c6:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078ca:	f200 809e 	bhi.w	8007a0a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 80078d2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078d6:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078d8:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078da:	ea2e 0e05 	bic.w	lr, lr, r5
 80078de:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078e0:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078e2:	68ce      	ldr	r6, [r1, #12]
 80078e4:	40be      	lsls	r6, r7
 80078e6:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078ea:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 80078ec:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80078f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078f4:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078f8:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80078fa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80078fc:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078fe:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007902:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007904:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007908:	fa02 f207 	lsl.w	r2, r2, r7
 800790c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007910:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007912:	d0ab      	beq.n	800786c <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8007914:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007916:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800791a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800791c:	fa02 f707 	lsl.w	r7, r2, r7
 8007920:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007922:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007924:	00e6      	lsls	r6, r4, #3
 8007926:	d5bd      	bpl.n	80078a4 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007928:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800792c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007930:	f003 0203 	and.w	r2, r3, #3
 8007934:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007936:	f046 0602 	orr.w	r6, r6, #2
 800793a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800793e:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007940:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8007944:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007948:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800794c:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007950:	f006 0602 	and.w	r6, r6, #2
 8007954:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007956:	4e42      	ldr	r6, [pc, #264]	; (8007a60 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007958:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800795a:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800795c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800795e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007962:	d020      	beq.n	80079a6 <HAL_GPIO_Init+0x156>
 8007964:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007968:	42b0      	cmp	r0, r6
 800796a:	d056      	beq.n	8007a1a <HAL_GPIO_Init+0x1ca>
 800796c:	4e3d      	ldr	r6, [pc, #244]	; (8007a64 <HAL_GPIO_Init+0x214>)
 800796e:	42b0      	cmp	r0, r6
 8007970:	d058      	beq.n	8007a24 <HAL_GPIO_Init+0x1d4>
 8007972:	4e3d      	ldr	r6, [pc, #244]	; (8007a68 <HAL_GPIO_Init+0x218>)
 8007974:	42b0      	cmp	r0, r6
 8007976:	d04b      	beq.n	8007a10 <HAL_GPIO_Init+0x1c0>
 8007978:	4e3c      	ldr	r6, [pc, #240]	; (8007a6c <HAL_GPIO_Init+0x21c>)
 800797a:	42b0      	cmp	r0, r6
 800797c:	d05c      	beq.n	8007a38 <HAL_GPIO_Init+0x1e8>
 800797e:	4e3c      	ldr	r6, [pc, #240]	; (8007a70 <HAL_GPIO_Init+0x220>)
 8007980:	42b0      	cmp	r0, r6
 8007982:	d05e      	beq.n	8007a42 <HAL_GPIO_Init+0x1f2>
 8007984:	4e3b      	ldr	r6, [pc, #236]	; (8007a74 <HAL_GPIO_Init+0x224>)
 8007986:	42b0      	cmp	r0, r6
 8007988:	d051      	beq.n	8007a2e <HAL_GPIO_Init+0x1de>
 800798a:	4e3b      	ldr	r6, [pc, #236]	; (8007a78 <HAL_GPIO_Init+0x228>)
 800798c:	42b0      	cmp	r0, r6
 800798e:	d05d      	beq.n	8007a4c <HAL_GPIO_Init+0x1fc>
 8007990:	4e3a      	ldr	r6, [pc, #232]	; (8007a7c <HAL_GPIO_Init+0x22c>)
 8007992:	42b0      	cmp	r0, r6
 8007994:	d05f      	beq.n	8007a56 <HAL_GPIO_Init+0x206>
 8007996:	4e3a      	ldr	r6, [pc, #232]	; (8007a80 <HAL_GPIO_Init+0x230>)
 8007998:	42b0      	cmp	r0, r6
 800799a:	bf0c      	ite	eq
 800799c:	2609      	moveq	r6, #9
 800799e:	260a      	movne	r6, #10
 80079a0:	fa06 f202 	lsl.w	r2, r6, r2
 80079a4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079a6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80079a8:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80079ac:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079b0:	03e5      	lsls	r5, r4, #15
    position++;
 80079b2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 80079b6:	bf54      	ite	pl
 80079b8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80079ba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80079be:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079c2:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 80079c4:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80079c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80079cc:	bf54      	ite	pl
 80079ce:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80079d0:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079d4:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 80079d6:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80079da:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 80079dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80079e0:	bf54      	ite	pl
 80079e2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80079e4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079e8:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 80079ea:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 80079ee:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 80079f0:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80079f2:	bf54      	ite	pl
 80079f4:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80079f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80079fa:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079fc:	fa39 f203 	lsrs.w	r2, r9, r3
 8007a00:	f47f af55 	bne.w	80078ae <HAL_GPIO_Init+0x5e>
  }
}
 8007a04:	b005      	add	sp, #20
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	40bd      	lsls	r5, r7
 8007a0c:	43ed      	mvns	r5, r5
 8007a0e:	e775      	b.n	80078fc <HAL_GPIO_Init+0xac>
 8007a10:	2603      	movs	r6, #3
 8007a12:	fa06 f202 	lsl.w	r2, r6, r2
 8007a16:	4315      	orrs	r5, r2
 8007a18:	e7c5      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a1a:	2601      	movs	r6, #1
 8007a1c:	fa06 f202 	lsl.w	r2, r6, r2
 8007a20:	4315      	orrs	r5, r2
 8007a22:	e7c0      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a24:	2602      	movs	r6, #2
 8007a26:	fa06 f202 	lsl.w	r2, r6, r2
 8007a2a:	4315      	orrs	r5, r2
 8007a2c:	e7bb      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a2e:	2606      	movs	r6, #6
 8007a30:	fa06 f202 	lsl.w	r2, r6, r2
 8007a34:	4315      	orrs	r5, r2
 8007a36:	e7b6      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a38:	2604      	movs	r6, #4
 8007a3a:	fa06 f202 	lsl.w	r2, r6, r2
 8007a3e:	4315      	orrs	r5, r2
 8007a40:	e7b1      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a42:	2605      	movs	r6, #5
 8007a44:	fa06 f202 	lsl.w	r2, r6, r2
 8007a48:	4315      	orrs	r5, r2
 8007a4a:	e7ac      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a4c:	2607      	movs	r6, #7
 8007a4e:	fa06 f202 	lsl.w	r2, r6, r2
 8007a52:	4315      	orrs	r5, r2
 8007a54:	e7a7      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a56:	2608      	movs	r6, #8
 8007a58:	fa06 f202 	lsl.w	r2, r6, r2
 8007a5c:	4315      	orrs	r5, r2
 8007a5e:	e7a2      	b.n	80079a6 <HAL_GPIO_Init+0x156>
 8007a60:	58020000 	.word	0x58020000
 8007a64:	58020800 	.word	0x58020800
 8007a68:	58020c00 	.word	0x58020c00
 8007a6c:	58021000 	.word	0x58021000
 8007a70:	58021400 	.word	0x58021400
 8007a74:	58021800 	.word	0x58021800
 8007a78:	58021c00 	.word	0x58021c00
 8007a7c:	58022000 	.word	0x58022000
 8007a80:	58022400 	.word	0x58022400
 8007a84:	58024400 	.word	0x58024400
 8007a88:	58000080 	.word	0x58000080

08007a8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a8c:	b902      	cbnz	r2, 8007a90 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a8e:	0409      	lsls	r1, r1, #16
 8007a90:	6181      	str	r1, [r0, #24]
  }
}
 8007a92:	4770      	bx	lr

08007a94 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a94:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a96:	ea01 0203 	and.w	r2, r1, r3
 8007a9a:	ea21 0103 	bic.w	r1, r1, r3
 8007a9e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aa2:	6181      	str	r1, [r0, #24]
}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <HAL_HSEM_FastTake+0x14>)
 8007aaa:	3020      	adds	r0, #32
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <HAL_HSEM_FastTake+0x18>)
 8007aae:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007ab2:	1ac0      	subs	r0, r0, r3
 8007ab4:	bf18      	it	ne
 8007ab6:	2001      	movne	r0, #1
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	58026400 	.word	0x58026400
 8007ac0:	80000300 	.word	0x80000300

08007ac4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <HAL_HSEM_Release+0xc>)
 8007ac6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007aca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007ace:	4770      	bx	lr
 8007ad0:	58026400 	.word	0x58026400

08007ad4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ad4:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007ad6:	f04f 0c00 	mov.w	ip, #0
{
 8007ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ade:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ae0:	6804      	ldr	r4, [r0, #0]
 8007ae2:	6848      	ldr	r0, [r1, #4]
{
 8007ae4:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ae6:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ae8:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007aea:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007aee:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007af2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007af6:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007af8:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007afc:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b00:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b02:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b06:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b08:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b0a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b0c:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b10:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b14:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b18:	4f38      	ldr	r7, [pc, #224]	; (8007bfc <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b1a:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b1c:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b20:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007b24:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b26:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b2a:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b2c:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b30:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b34:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007b36:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b3a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b3c:	68e5      	ldr	r5, [r4, #12]
 8007b3e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007b42:	444d      	add	r5, r9
 8007b44:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007b48:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b4a:	691d      	ldr	r5, [r3, #16]
 8007b4c:	f025 0507 	bic.w	r5, r5, #7
 8007b50:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b52:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b56:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b58:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b5c:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b60:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007b64:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007b68:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007b6c:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8007b70:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8007b74:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b76:	695d      	ldr	r5, [r3, #20]
 8007b78:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007b7c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007b7e:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b82:	69dd      	ldr	r5, [r3, #28]
 8007b84:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007b86:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b88:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007b8a:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007b8e:	4305      	orrs	r5, r0
 8007b90:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007b94:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007b98:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007b9a:	f1be 0f00 	cmp.w	lr, #0
 8007b9e:	d00b      	beq.n	8007bb8 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007ba0:	f1be 0f01 	cmp.w	lr, #1
 8007ba4:	d026      	beq.n	8007bf4 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ba6:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007baa:	2d02      	cmp	r5, #2
 8007bac:	d902      	bls.n	8007bb4 <LTDC_SetConfig+0xe0>
 8007bae:	f1be 0f07 	cmp.w	lr, #7
 8007bb2:	d121      	bne.n	8007bf8 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007bb4:	2702      	movs	r7, #2
 8007bb6:	e000      	b.n	8007bba <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8007bb8:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bba:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007bbc:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bbe:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007bc0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bc4:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007bc8:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bcc:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007bce:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bd0:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007bd4:	490a      	ldr	r1, [pc, #40]	; (8007c00 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007bda:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007bdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bde:	4001      	ands	r1, r0
 8007be0:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007be2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007be6:	58a3      	ldr	r3, [r4, r2]
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	50a3      	str	r3, [r4, r2]
}
 8007bee:	b003      	add	sp, #12
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8007bf4:	2703      	movs	r7, #3
 8007bf6:	e7e0      	b.n	8007bba <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8007bf8:	2701      	movs	r7, #1
 8007bfa:	e7de      	b.n	8007bba <LTDC_SetConfig+0xe6>
 8007bfc:	fffff8f8 	.word	0xfffff8f8
 8007c00:	fffff800 	.word	0xfffff800

08007c04 <HAL_LTDC_MspInit>:
}
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop

08007c08 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d06d      	beq.n	8007ce8 <HAL_LTDC_Init+0xe0>
{
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007c0e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007c12:	4604      	mov	r4, r0
 8007c14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d060      	beq.n	8007cde <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c1c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c1e:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c20:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007c22:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c24:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c28:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c2a:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c2c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c30:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c34:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c36:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c38:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c3a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c3e:	4e2b      	ldr	r6, [pc, #172]	; (8007cec <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c40:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c42:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c44:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c46:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c48:	4302      	orrs	r2, r0
 8007c4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	4032      	ands	r2, r6
 8007c50:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c52:	6898      	ldr	r0, [r3, #8]
 8007c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c58:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c5a:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c5e:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c62:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c64:	68d8      	ldr	r0, [r3, #12]
 8007c66:	4030      	ands	r0, r6
 8007c68:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c70:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c72:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c76:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c7a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	4032      	ands	r2, r6
 8007c80:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c82:	6918      	ldr	r0, [r3, #16]
 8007c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c8a:	ea40 000c 	orr.w	r0, r0, ip
 8007c8e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c90:	6958      	ldr	r0, [r3, #20]
 8007c92:	4006      	ands	r6, r0
 8007c94:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007c9a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007c9e:	4302      	orrs	r2, r0
 8007ca0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ca2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ca4:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ca8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007cac:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007cb0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007cb4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007cb8:	4302      	orrs	r2, r0
  return HAL_OK;
 8007cba:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cbc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8007cc0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8007cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc8:	f042 0206 	orr.w	r2, r2, #6
 8007ccc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	432a      	orrs	r2, r5
 8007cd2:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007cd4:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cd8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8007cde:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007ce2:	f7ff ff8f 	bl	8007c04 <HAL_LTDC_MspInit>
 8007ce6:	e799      	b.n	8007c1c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8007ce8:	2001      	movs	r0, #1
}
 8007cea:	4770      	bx	lr
 8007cec:	f000f800 	.word	0xf000f800

08007cf0 <HAL_LTDC_ErrorCallback>:
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop

08007cf4 <HAL_LTDC_ReloadEventCallback>:
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop

08007cf8 <HAL_LTDC_IRQHandler>:
{
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007cfa:	6803      	ldr	r3, [r0, #0]
{
 8007cfc:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007cfe:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d00:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d02:	0769      	lsls	r1, r5, #29
 8007d04:	d501      	bpl.n	8007d0a <HAL_LTDC_IRQHandler+0x12>
 8007d06:	0772      	lsls	r2, r6, #29
 8007d08:	d41d      	bmi.n	8007d46 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d0a:	07ab      	lsls	r3, r5, #30
 8007d0c:	d501      	bpl.n	8007d12 <HAL_LTDC_IRQHandler+0x1a>
 8007d0e:	07b7      	lsls	r7, r6, #30
 8007d10:	d42d      	bmi.n	8007d6e <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007d12:	07e8      	lsls	r0, r5, #31
 8007d14:	d501      	bpl.n	8007d1a <HAL_LTDC_IRQHandler+0x22>
 8007d16:	07f1      	lsls	r1, r6, #31
 8007d18:	d440      	bmi.n	8007d9c <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007d1a:	072a      	lsls	r2, r5, #28
 8007d1c:	d501      	bpl.n	8007d22 <HAL_LTDC_IRQHandler+0x2a>
 8007d1e:	0733      	lsls	r3, r6, #28
 8007d20:	d400      	bmi.n	8007d24 <HAL_LTDC_IRQHandler+0x2c>
}
 8007d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d24:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d26:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d28:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8007d2a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007d2e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d30:	f022 0208 	bic.w	r2, r2, #8
 8007d34:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d36:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d38:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007d3c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007d40:	f7ff ffd8 	bl	8007cf4 <HAL_LTDC_ReloadEventCallback>
}
 8007d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d48:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8007d4a:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d4c:	f022 0204 	bic.w	r2, r2, #4
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d52:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d54:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007d58:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d64:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007d68:	f7ff ffc2 	bl	8007cf0 <HAL_LTDC_ErrorCallback>
 8007d6c:	e7cd      	b.n	8007d0a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d6e:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007d70:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d72:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d76:	f022 0202 	bic.w	r2, r2, #2
 8007d7a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8007d7c:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007d7e:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8007d80:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007d82:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007d86:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007d8a:	f043 0302 	orr.w	r3, r3, #2
 8007d8e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d92:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007d96:	f7ff ffab 	bl	8007cf0 <HAL_LTDC_ErrorCallback>
 8007d9a:	e7ba      	b.n	8007d12 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007d9c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007d9e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8007da0:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8007da2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007dac:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007dae:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007db2:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007db6:	f7fc fb31 	bl	800441c <HAL_LTDC_LineEventCallback>
 8007dba:	e7ae      	b.n	8007d1a <HAL_LTDC_IRQHandler+0x22>

08007dbc <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8007dbc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d028      	beq.n	8007e16 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	4694      	mov	ip, r2
{
 8007dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007dcc:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007dce:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007dd2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007dd4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007dd8:	fb04 0402 	mla	r4, r4, r2, r0
 8007ddc:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8007dde:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007de2:	460f      	mov	r7, r1
 8007de4:	3438      	adds	r4, #56	; 0x38
 8007de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007df2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007df4:	4662      	mov	r2, ip
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007dfa:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007dfc:	f7ff fe6a 	bl	8007ad4 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8007e00:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e02:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8007e04:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e06:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007e0a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007e0e:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8007e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8007e16:	2002      	movs	r0, #2
}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop

08007e1c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007e1c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8007e20:	2a01      	cmp	r2, #1
 8007e22:	d017      	beq.n	8007e54 <HAL_LTDC_ProgramLineEvent+0x38>
 8007e24:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e26:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e28:	681a      	ldr	r2, [r3, #0]
{
 8007e2a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e2c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e30:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e32:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8007e34:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 8007e36:	4e08      	ldr	r6, [pc, #32]	; (8007e58 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e38:	f020 0001 	bic.w	r0, r0, #1
 8007e3c:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 8007e3e:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8007e40:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007e42:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007e44:	4329      	orrs	r1, r5
 8007e46:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e48:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007e4c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8007e50:	bc70      	pop	{r4, r5, r6}
 8007e52:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8007e54:	2002      	movs	r0, #2
}
 8007e56:	4770      	bx	lr
 8007e58:	50001000 	.word	0x50001000

08007e5c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e60:	f7fe f89c 	bl	8005f9c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d05a      	beq.n	8007f1e <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007e68:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007e6a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007e70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8007e74:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	f022 0201 	bic.w	r2, r2, #1
 8007e7e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007e80:	e005      	b.n	8007e8e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007e82:	f7fe f88b 	bl	8005f9c <HAL_GetTick>
 8007e86:	1b43      	subs	r3, r0, r5
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	d841      	bhi.n	8007f10 <HAL_MDMA_Init+0xb4>
 8007e8c:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	07d2      	lsls	r2, r2, #31
 8007e92:	d4f6      	bmi.n	8007e82 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007e94:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8007e98:	69e1      	ldr	r1, [r4, #28]
 8007e9a:	4302      	orrs	r2, r0
 8007e9c:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ea4:	432a      	orrs	r2, r5
 8007ea6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007ea8:	4302      	orrs	r2, r0
 8007eaa:	68a0      	ldr	r0, [r4, #8]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007eb0:	432a      	orrs	r2, r5
 8007eb2:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007eb4:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007eb6:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007eb8:	6920      	ldr	r0, [r4, #16]
 8007eba:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007ebc:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007ebe:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007ec2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007ec6:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007ec8:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007eca:	d103      	bne.n	8007ed4 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007ed2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007ed4:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007ed6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007ed8:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8007eda:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007edc:	db30      	blt.n	8007f40 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007ee2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	db1c      	blt.n	8007f22 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007ee8:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007eea:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007eee:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8007ef2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007ef4:	d021      	beq.n	8007f3a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007ef6:	b2c9      	uxtb	r1, r1
 8007ef8:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007efa:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007efc:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8007efe:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007f00:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007f02:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007f04:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8007f06:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007f0a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007f10:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007f12:	2303      	movs	r3, #3
      return HAL_ERROR;
 8007f14:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007f16:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f1e:	2001      	movs	r0, #1
}
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007f22:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007f24:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f26:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007f2a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007f2e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007f30:	6a18      	ldr	r0, [r3, #32]
 8007f32:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8007f36:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f38:	d1dd      	bne.n	8007ef6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f3e:	e7dc      	b.n	8007efa <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007f40:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007f42:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007f44:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007f48:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007f4a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007f4c:	621a      	str	r2, [r3, #32]
 8007f4e:	e7c8      	b.n	8007ee2 <HAL_MDMA_Init+0x86>

08007f50 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007f50:	b1f0      	cbz	r0, 8007f90 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8007f52:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	4601      	mov	r1, r0
  return HAL_OK;
 8007f58:	4618      	mov	r0, r3
{
 8007f5a:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8007f5c:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007f5e:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007f60:	f024 0401 	bic.w	r4, r4, #1
 8007f64:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8007f66:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8007f68:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8007f6a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007f6c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007f6e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007f70:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8007f72:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007f74:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007f76:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007f78:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007f7a:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007f7c:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8007f7e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007f82:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8007f86:	664b      	str	r3, [r1, #100]	; 0x64
}
 8007f88:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8007f8a:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8007f8e:	4770      	bx	lr
    return HAL_ERROR;
 8007f90:	2001      	movs	r0, #1
}
 8007f92:	4770      	bx	lr

08007f94 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007f94:	4a1c      	ldr	r2, [pc, #112]	; (8008008 <HAL_PWREx_ConfigSupply+0x74>)
 8007f96:	68d3      	ldr	r3, [r2, #12]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f9e:	68d3      	ldr	r3, [r2, #12]
{
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007fa4:	d005      	beq.n	8007fb2 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007faa:	1a18      	subs	r0, r3, r0
 8007fac:	bf18      	it	ne
 8007fae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007fb0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fb6:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fb8:	4303      	orrs	r3, r0
 8007fba:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8007fbc:	f7fd ffee 	bl	8005f9c <HAL_GetTick>
 8007fc0:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fc2:	e005      	b.n	8007fd0 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fc4:	f7fd ffea 	bl	8005f9c <HAL_GetTick>
 8007fc8:	1b43      	subs	r3, r0, r5
 8007fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fce:	d819      	bhi.n	8008004 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fd0:	6873      	ldr	r3, [r6, #4]
 8007fd2:	049a      	lsls	r2, r3, #18
 8007fd4:	d5f6      	bpl.n	8007fc4 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007fd6:	f1a4 031d 	sub.w	r3, r4, #29
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d905      	bls.n	8007fea <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8007fde:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007fe2:	2801      	cmp	r0, #1
 8007fe4:	d901      	bls.n	8007fea <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8007fe6:	2000      	movs	r0, #0
}
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8007fea:	f7fd ffd7 	bl	8005f9c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007fee:	4d06      	ldr	r5, [pc, #24]	; (8008008 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8007ff0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007ff2:	68eb      	ldr	r3, [r5, #12]
 8007ff4:	03db      	lsls	r3, r3, #15
 8007ff6:	d4f6      	bmi.n	8007fe6 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ff8:	f7fd ffd0 	bl	8005f9c <HAL_GetTick>
 8007ffc:	1b00      	subs	r0, r0, r4
 8007ffe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008002:	d9f6      	bls.n	8007ff2 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008004:	2001      	movs	r0, #1
}
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	58024800 	.word	0x58024800

0800800c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800800c:	2800      	cmp	r0, #0
 800800e:	f000 81f7 	beq.w	8008400 <HAL_RCC_OscConfig+0x3f4>
{
 8008012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008014:	6803      	ldr	r3, [r0, #0]
 8008016:	4604      	mov	r4, r0
 8008018:	07d9      	lsls	r1, r3, #31
 800801a:	d52e      	bpl.n	800807a <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800801c:	49b4      	ldr	r1, [pc, #720]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 800801e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008020:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008022:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008026:	2a10      	cmp	r2, #16
 8008028:	f000 812c 	beq.w	8008284 <HAL_RCC_OscConfig+0x278>
 800802c:	2a18      	cmp	r2, #24
 800802e:	f000 8124 	beq.w	800827a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008038:	f000 8167 	beq.w	800830a <HAL_RCC_OscConfig+0x2fe>
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 817f 	beq.w	8008340 <HAL_RCC_OscConfig+0x334>
 8008042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008046:	4baa      	ldr	r3, [pc, #680]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f000 8278 	beq.w	800853e <HAL_RCC_OscConfig+0x532>
 800804e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800805a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7fd ff9e 	bl	8005f9c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008060:	4ea3      	ldr	r6, [pc, #652]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8008062:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008064:	e005      	b.n	8008072 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008066:	f7fd ff99 	bl	8005f9c <HAL_GetTick>
 800806a:	1b40      	subs	r0, r0, r5
 800806c:	2864      	cmp	r0, #100	; 0x64
 800806e:	f200 8165 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008072:	6833      	ldr	r3, [r6, #0]
 8008074:	039f      	lsls	r7, r3, #14
 8008076:	d5f6      	bpl.n	8008066 <HAL_RCC_OscConfig+0x5a>
 8008078:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800807a:	0799      	lsls	r1, r3, #30
 800807c:	d521      	bpl.n	80080c2 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807e:	4a9c      	ldr	r2, [pc, #624]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008080:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008082:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008084:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008088:	f040 80a8 	bne.w	80081dc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800808c:	4b98      	ldr	r3, [pc, #608]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	075b      	lsls	r3, r3, #29
 8008092:	d503      	bpl.n	800809c <HAL_RCC_OscConfig+0x90>
 8008094:	68e3      	ldr	r3, [r4, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80ed 	beq.w	8008276 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809c:	f7fd ff96 	bl	8005fcc <HAL_GetREVID>
 80080a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80080a4:	4298      	cmp	r0, r3
 80080a6:	f200 8189 	bhi.w	80083bc <HAL_RCC_OscConfig+0x3b0>
 80080aa:	6922      	ldr	r2, [r4, #16]
 80080ac:	2a40      	cmp	r2, #64	; 0x40
 80080ae:	f000 824e 	beq.w	800854e <HAL_RCC_OscConfig+0x542>
 80080b2:	498f      	ldr	r1, [pc, #572]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 80080b4:	684b      	ldr	r3, [r1, #4]
 80080b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80080be:	604b      	str	r3, [r1, #4]
 80080c0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080c2:	06d9      	lsls	r1, r3, #27
 80080c4:	d456      	bmi.n	8008174 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080c6:	071d      	lsls	r5, r3, #28
 80080c8:	d517      	bpl.n	80080fa <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080ca:	6963      	ldr	r3, [r4, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80b4 	beq.w	800823a <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080d2:	4b87      	ldr	r3, [pc, #540]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 80080d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080d6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80080d8:	f042 0201 	orr.w	r2, r2, #1
 80080dc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80080de:	f7fd ff5d 	bl	8005f9c <HAL_GetTick>
 80080e2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080e4:	e005      	b.n	80080f2 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e6:	f7fd ff59 	bl	8005f9c <HAL_GetTick>
 80080ea:	1b40      	subs	r0, r0, r5
 80080ec:	2802      	cmp	r0, #2
 80080ee:	f200 8125 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080f2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80080f4:	0798      	lsls	r0, r3, #30
 80080f6:	d5f6      	bpl.n	80080e6 <HAL_RCC_OscConfig+0xda>
 80080f8:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080fa:	069a      	lsls	r2, r3, #26
 80080fc:	d517      	bpl.n	800812e <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80080fe:	69a3      	ldr	r3, [r4, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8134 	beq.w	800836e <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008106:	4b7a      	ldr	r3, [pc, #488]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008108:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800810a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 800810c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008110:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008112:	f7fd ff43 	bl	8005f9c <HAL_GetTick>
 8008116:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008118:	e005      	b.n	8008126 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800811a:	f7fd ff3f 	bl	8005f9c <HAL_GetTick>
 800811e:	1b40      	subs	r0, r0, r5
 8008120:	2802      	cmp	r0, #2
 8008122:	f200 810b 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008126:	6833      	ldr	r3, [r6, #0]
 8008128:	049f      	lsls	r7, r3, #18
 800812a:	d5f6      	bpl.n	800811a <HAL_RCC_OscConfig+0x10e>
 800812c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800812e:	0759      	lsls	r1, r3, #29
 8008130:	f100 80b2 	bmi.w	8008298 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008134:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008136:	b1d8      	cbz	r0, 8008170 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008138:	4b6d      	ldr	r3, [pc, #436]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008140:	2a18      	cmp	r2, #24
 8008142:	f000 81ce 	beq.w	80084e2 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008146:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008148:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800814a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800814c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008150:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008152:	f000 8161 	beq.w	8008418 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008156:	f7fd ff21 	bl	8005f9c <HAL_GetTick>
 800815a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800815c:	e005      	b.n	800816a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800815e:	f7fd ff1d 	bl	8005f9c <HAL_GetTick>
 8008162:	1b00      	subs	r0, r0, r4
 8008164:	2802      	cmp	r0, #2
 8008166:	f200 80e9 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	d4f6      	bmi.n	800815e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008170:	2000      	movs	r0, #0
}
 8008172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008174:	4a5e      	ldr	r2, [pc, #376]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008176:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008178:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800817a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800817e:	2b08      	cmp	r3, #8
 8008180:	d072      	beq.n	8008268 <HAL_RCC_OscConfig+0x25c>
 8008182:	2b18      	cmp	r3, #24
 8008184:	d06c      	beq.n	8008260 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008186:	69e3      	ldr	r3, [r4, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8103 	beq.w	8008394 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 800818e:	4b58      	ldr	r3, [pc, #352]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008190:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008192:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8008194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008198:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800819a:	f7fd feff 	bl	8005f9c <HAL_GetTick>
 800819e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081a0:	e005      	b.n	80081ae <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081a2:	f7fd fefb 	bl	8005f9c <HAL_GetTick>
 80081a6:	1b40      	subs	r0, r0, r5
 80081a8:	2802      	cmp	r0, #2
 80081aa:	f200 80c7 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081ae:	6833      	ldr	r3, [r6, #0]
 80081b0:	05db      	lsls	r3, r3, #23
 80081b2:	d5f6      	bpl.n	80081a2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081b4:	f7fd ff0a 	bl	8005fcc <HAL_GetREVID>
 80081b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80081bc:	4298      	cmp	r0, r3
 80081be:	f200 81e9 	bhi.w	8008594 <HAL_RCC_OscConfig+0x588>
 80081c2:	6a22      	ldr	r2, [r4, #32]
 80081c4:	6873      	ldr	r3, [r6, #4]
 80081c6:	2a20      	cmp	r2, #32
 80081c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80081cc:	bf0c      	ite	eq
 80081ce:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80081d2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80081d6:	6073      	str	r3, [r6, #4]
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	e774      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081dc:	2b18      	cmp	r3, #24
 80081de:	f000 810b 	beq.w	80083f8 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081e2:	68e2      	ldr	r2, [r4, #12]
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	f000 80f3 	beq.w	80083d0 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081ea:	4941      	ldr	r1, [pc, #260]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 80081ec:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ee:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081f0:	f023 0319 	bic.w	r3, r3, #25
 80081f4:	4313      	orrs	r3, r2
 80081f6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80081f8:	f7fd fed0 	bl	8005f9c <HAL_GetTick>
 80081fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081fe:	e005      	b.n	800820c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008200:	f7fd fecc 	bl	8005f9c <HAL_GetTick>
 8008204:	1b40      	subs	r0, r0, r5
 8008206:	2802      	cmp	r0, #2
 8008208:	f200 8098 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800820c:	6833      	ldr	r3, [r6, #0]
 800820e:	075f      	lsls	r7, r3, #29
 8008210:	d5f6      	bpl.n	8008200 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008212:	f7fd fedb 	bl	8005fcc <HAL_GetREVID>
 8008216:	f241 0303 	movw	r3, #4099	; 0x1003
 800821a:	4298      	cmp	r0, r3
 800821c:	f200 81c3 	bhi.w	80085a6 <HAL_RCC_OscConfig+0x59a>
 8008220:	6922      	ldr	r2, [r4, #16]
 8008222:	6873      	ldr	r3, [r6, #4]
 8008224:	2a40      	cmp	r2, #64	; 0x40
 8008226:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800822a:	bf0c      	ite	eq
 800822c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008230:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008234:	6073      	str	r3, [r6, #4]
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	e743      	b.n	80080c2 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 800823a:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 800823c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800823e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008246:	f7fd fea9 	bl	8005f9c <HAL_GetTick>
 800824a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800824c:	e004      	b.n	8008258 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800824e:	f7fd fea5 	bl	8005f9c <HAL_GetTick>
 8008252:	1b40      	subs	r0, r0, r5
 8008254:	2802      	cmp	r0, #2
 8008256:	d871      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008258:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800825a:	0799      	lsls	r1, r3, #30
 800825c:	d4f7      	bmi.n	800824e <HAL_RCC_OscConfig+0x242>
 800825e:	e74b      	b.n	80080f8 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008260:	f002 0203 	and.w	r2, r2, #3
 8008264:	2a01      	cmp	r2, #1
 8008266:	d18e      	bne.n	8008186 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008268:	4b21      	ldr	r3, [pc, #132]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	05da      	lsls	r2, r3, #23
 800826e:	d552      	bpl.n	8008316 <HAL_RCC_OscConfig+0x30a>
 8008270:	69e3      	ldr	r3, [r4, #28]
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d04f      	beq.n	8008316 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8008276:	2001      	movs	r0, #1
}
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800827a:	f001 0103 	and.w	r1, r1, #3
 800827e:	2902      	cmp	r1, #2
 8008280:	f47f aed7 	bne.w	8008032 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	0392      	lsls	r2, r2, #14
 800828a:	f57f aef6 	bpl.w	800807a <HAL_RCC_OscConfig+0x6e>
 800828e:	6862      	ldr	r2, [r4, #4]
 8008290:	2a00      	cmp	r2, #0
 8008292:	f47f aef2 	bne.w	800807a <HAL_RCC_OscConfig+0x6e>
 8008296:	e7ee      	b.n	8008276 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008298:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <HAL_RCC_OscConfig+0x2e8>)
 800829a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800829c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800829e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082a2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80082a4:	f7fd fe7a 	bl	8005f9c <HAL_GetTick>
 80082a8:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082aa:	e004      	b.n	80082b6 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082ac:	f7fd fe76 	bl	8005f9c <HAL_GetTick>
 80082b0:	1b40      	subs	r0, r0, r5
 80082b2:	2864      	cmp	r0, #100	; 0x64
 80082b4:	d842      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082b6:	6833      	ldr	r3, [r6, #0]
 80082b8:	05da      	lsls	r2, r3, #23
 80082ba:	d5f7      	bpl.n	80082ac <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	f000 817a 	beq.w	80085b8 <HAL_RCC_OscConfig+0x5ac>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 814b 	beq.w	8008560 <HAL_RCC_OscConfig+0x554>
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
 80082ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082d0:	f000 8187 	beq.w	80085e2 <HAL_RCC_OscConfig+0x5d6>
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	671a      	str	r2, [r3, #112]	; 0x70
 80082da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082dc:	f022 0204 	bic.w	r2, r2, #4
 80082e0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80082e2:	f7fd fe5b 	bl	8005f9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e6:	4e02      	ldr	r6, [pc, #8]	; (80082f0 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082e8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80082ec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x2f6>
 80082f0:	58024400 	.word	0x58024400
 80082f4:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f8:	f7fd fe50 	bl	8005f9c <HAL_GetTick>
 80082fc:	1b40      	subs	r0, r0, r5
 80082fe:	42b8      	cmp	r0, r7
 8008300:	d81c      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008302:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008304:	079b      	lsls	r3, r3, #30
 8008306:	d5f7      	bpl.n	80082f8 <HAL_RCC_OscConfig+0x2ec>
 8008308:	e714      	b.n	8008134 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800830a:	4aae      	ldr	r2, [pc, #696]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008312:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008314:	e6a2      	b.n	800805c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008316:	f7fd fe59 	bl	8005fcc <HAL_GetREVID>
 800831a:	f241 0303 	movw	r3, #4099	; 0x1003
 800831e:	4298      	cmp	r0, r3
 8008320:	d870      	bhi.n	8008404 <HAL_RCC_OscConfig+0x3f8>
 8008322:	6a22      	ldr	r2, [r4, #32]
 8008324:	2a20      	cmp	r2, #32
 8008326:	f000 8153 	beq.w	80085d0 <HAL_RCC_OscConfig+0x5c4>
 800832a:	49a6      	ldr	r1, [pc, #664]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 800832c:	684b      	ldr	r3, [r1, #4]
 800832e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008332:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	e6c4      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800833c:	2003      	movs	r0, #3
}
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008340:	4ba0      	ldr	r3, [pc, #640]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 8008342:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008344:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008346:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008352:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008354:	f7fd fe22 	bl	8005f9c <HAL_GetTick>
 8008358:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800835a:	e004      	b.n	8008366 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800835c:	f7fd fe1e 	bl	8005f9c <HAL_GetTick>
 8008360:	1b40      	subs	r0, r0, r5
 8008362:	2864      	cmp	r0, #100	; 0x64
 8008364:	d8ea      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008366:	6833      	ldr	r3, [r6, #0]
 8008368:	0398      	lsls	r0, r3, #14
 800836a:	d4f7      	bmi.n	800835c <HAL_RCC_OscConfig+0x350>
 800836c:	e684      	b.n	8008078 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 800836e:	4b95      	ldr	r3, [pc, #596]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 8008370:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008372:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8008374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008378:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800837a:	f7fd fe0f 	bl	8005f9c <HAL_GetTick>
 800837e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008380:	e004      	b.n	800838c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008382:	f7fd fe0b 	bl	8005f9c <HAL_GetTick>
 8008386:	1b40      	subs	r0, r0, r5
 8008388:	2802      	cmp	r0, #2
 800838a:	d8d7      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	0498      	lsls	r0, r3, #18
 8008390:	d4f7      	bmi.n	8008382 <HAL_RCC_OscConfig+0x376>
 8008392:	e6cb      	b.n	800812c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8008394:	4b8b      	ldr	r3, [pc, #556]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 8008396:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008398:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800839a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800839e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083a0:	f7fd fdfc 	bl	8005f9c <HAL_GetTick>
 80083a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083a6:	e004      	b.n	80083b2 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083a8:	f7fd fdf8 	bl	8005f9c <HAL_GetTick>
 80083ac:	1b40      	subs	r0, r0, r5
 80083ae:	2802      	cmp	r0, #2
 80083b0:	d8c4      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083b2:	6833      	ldr	r3, [r6, #0]
 80083b4:	05df      	lsls	r7, r3, #23
 80083b6:	d4f7      	bmi.n	80083a8 <HAL_RCC_OscConfig+0x39c>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	e684      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083bc:	4a81      	ldr	r2, [pc, #516]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	6853      	ldr	r3, [r2, #4]
 80083c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80083ca:	6053      	str	r3, [r2, #4]
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	e678      	b.n	80080c2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 80083d0:	4b7c      	ldr	r3, [pc, #496]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 80083d2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083d4:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 80083d6:	f022 0201 	bic.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083dc:	f7fd fdde 	bl	8005f9c <HAL_GetTick>
 80083e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083e2:	e004      	b.n	80083ee <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e4:	f7fd fdda 	bl	8005f9c <HAL_GetTick>
 80083e8:	1b40      	subs	r0, r0, r5
 80083ea:	2802      	cmp	r0, #2
 80083ec:	d8a6      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083ee:	6833      	ldr	r3, [r6, #0]
 80083f0:	0758      	lsls	r0, r3, #29
 80083f2:	d4f7      	bmi.n	80083e4 <HAL_RCC_OscConfig+0x3d8>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	e664      	b.n	80080c2 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083f8:	0792      	lsls	r2, r2, #30
 80083fa:	f47f aef2 	bne.w	80081e2 <HAL_RCC_OscConfig+0x1d6>
 80083fe:	e645      	b.n	800808c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008400:	2001      	movs	r0, #1
}
 8008402:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008404:	4a6f      	ldr	r2, [pc, #444]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 8008406:	6a21      	ldr	r1, [r4, #32]
 8008408:	68d3      	ldr	r3, [r2, #12]
 800840a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800840e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008412:	60d3      	str	r3, [r2, #12]
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	e656      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8008418:	f7fd fdc0 	bl	8005f9c <HAL_GetTick>
 800841c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800841e:	e004      	b.n	800842a <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008420:	f7fd fdbc 	bl	8005f9c <HAL_GetTick>
 8008424:	1b80      	subs	r0, r0, r6
 8008426:	2802      	cmp	r0, #2
 8008428:	d888      	bhi.n	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	0199      	lsls	r1, r3, #6
 800842e:	d4f7      	bmi.n	8008420 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008430:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008432:	4b65      	ldr	r3, [pc, #404]	; (80085c8 <HAL_RCC_OscConfig+0x5bc>)
 8008434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008436:	4013      	ands	r3, r2
 8008438:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800843a:	4964      	ldr	r1, [pc, #400]	; (80085cc <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800843c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800843e:	4e61      	ldr	r6, [pc, #388]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008440:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008444:	62ab      	str	r3, [r5, #40]	; 0x28
 8008446:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008448:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800844c:	3f01      	subs	r7, #1
 800844e:	1e50      	subs	r0, r2, #1
 8008450:	3b01      	subs	r3, #1
 8008452:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008454:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008458:	025b      	lsls	r3, r3, #9
 800845a:	0400      	lsls	r0, r0, #16
 800845c:	3a01      	subs	r2, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008464:	0612      	lsls	r2, r2, #24
 8008466:	4303      	orrs	r3, r0
 8008468:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800846c:	433b      	orrs	r3, r7
 800846e:	4313      	orrs	r3, r2
 8008470:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008472:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800847a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800847c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800847e:	4011      	ands	r1, r2
 8008480:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008484:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008486:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008488:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800848a:	f023 030c 	bic.w	r3, r3, #12
 800848e:	4313      	orrs	r3, r2
 8008490:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008492:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008494:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008496:	f023 0302 	bic.w	r3, r3, #2
 800849a:	4313      	orrs	r3, r2
 800849c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800849e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ac:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084b4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80084b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084b8:	f043 0301 	orr.w	r3, r3, #1
 80084bc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084c6:	f7fd fd69 	bl	8005f9c <HAL_GetTick>
 80084ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084cc:	e005      	b.n	80084da <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084ce:	f7fd fd65 	bl	8005f9c <HAL_GetTick>
 80084d2:	1b00      	subs	r0, r0, r4
 80084d4:	2802      	cmp	r0, #2
 80084d6:	f63f af31 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084da:	6833      	ldr	r3, [r6, #0]
 80084dc:	019a      	lsls	r2, r3, #6
 80084de:	d5f6      	bpl.n	80084ce <HAL_RCC_OscConfig+0x4c2>
 80084e0:	e646      	b.n	8008170 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084e6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e8:	f43f ae43 	beq.w	8008172 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ec:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80084f2:	428b      	cmp	r3, r1
 80084f4:	f47f aebf 	bne.w	8008276 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084f8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084fe:	429a      	cmp	r2, r3
 8008500:	f47f aeb9 	bne.w	8008276 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008504:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008506:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800850a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	f47f aeb2 	bne.w	8008276 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008514:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008518:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800851a:	429a      	cmp	r2, r3
 800851c:	f47f aeab 	bne.w	8008276 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008522:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8008526:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008528:	429a      	cmp	r2, r3
 800852a:	f47f aea4 	bne.w	8008276 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800852e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008530:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008534:	3801      	subs	r0, #1
  return HAL_OK;
 8008536:	1a28      	subs	r0, r5, r0
 8008538:	bf18      	it	ne
 800853a:	2001      	movne	r0, #1
}
 800853c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800853e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	e586      	b.n	800805c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854e:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 8008550:	6853      	ldr	r3, [r2, #4]
 8008552:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800855a:	6053      	str	r3, [r2, #4]
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	e5b0      	b.n	80080c2 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008560:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008568:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800856a:	f022 0201 	bic.w	r2, r2, #1
 800856e:	671a      	str	r2, [r3, #112]	; 0x70
 8008570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008572:	f022 0204 	bic.w	r2, r2, #4
 8008576:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008578:	f7fd fd10 	bl	8005f9c <HAL_GetTick>
 800857c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800857e:	e005      	b.n	800858c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008580:	f7fd fd0c 	bl	8005f9c <HAL_GetTick>
 8008584:	1b40      	subs	r0, r0, r5
 8008586:	42b8      	cmp	r0, r7
 8008588:	f63f aed8 	bhi.w	800833c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800858c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800858e:	0798      	lsls	r0, r3, #30
 8008590:	d4f6      	bmi.n	8008580 <HAL_RCC_OscConfig+0x574>
 8008592:	e5cf      	b.n	8008134 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008594:	68f3      	ldr	r3, [r6, #12]
 8008596:	6a22      	ldr	r2, [r4, #32]
 8008598:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800859c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80085a0:	60f3      	str	r3, [r6, #12]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	e58f      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a6:	6873      	ldr	r3, [r6, #4]
 80085a8:	6922      	ldr	r2, [r4, #16]
 80085aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80085ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80085b2:	6073      	str	r3, [r6, #4]
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	e584      	b.n	80080c2 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b8:	4a02      	ldr	r2, [pc, #8]	; (80085c4 <HAL_RCC_OscConfig+0x5b8>)
 80085ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c2:	e68e      	b.n	80082e2 <HAL_RCC_OscConfig+0x2d6>
 80085c4:	58024400 	.word	0x58024400
 80085c8:	fffffc0c 	.word	0xfffffc0c
 80085cc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085d0:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <HAL_RCC_OscConfig+0x5e8>)
 80085d2:	6853      	ldr	r3, [r2, #4]
 80085d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085dc:	6053      	str	r3, [r2, #4]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	e571      	b.n	80080c6 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085e2:	f042 0204 	orr.w	r2, r2, #4
 80085e6:	671a      	str	r2, [r3, #112]	; 0x70
 80085e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	671a      	str	r2, [r3, #112]	; 0x70
 80085f0:	e677      	b.n	80082e2 <HAL_RCC_OscConfig+0x2d6>
 80085f2:	bf00      	nop
 80085f4:	58024400 	.word	0x58024400

080085f8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085f8:	4a47      	ldr	r2, [pc, #284]	; (8008718 <HAL_RCC_GetSysClockFreq+0x120>)
 80085fa:	6913      	ldr	r3, [r2, #16]
 80085fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008600:	2b10      	cmp	r3, #16
 8008602:	d004      	beq.n	800860e <HAL_RCC_GetSysClockFreq+0x16>
 8008604:	2b18      	cmp	r3, #24
 8008606:	d00d      	beq.n	8008624 <HAL_RCC_GetSysClockFreq+0x2c>
 8008608:	b11b      	cbz	r3, 8008612 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800860a:	4844      	ldr	r0, [pc, #272]	; (800871c <HAL_RCC_GetSysClockFreq+0x124>)
 800860c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800860e:	4844      	ldr	r0, [pc, #272]	; (8008720 <HAL_RCC_GetSysClockFreq+0x128>)
 8008610:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	0699      	lsls	r1, r3, #26
 8008616:	d54a      	bpl.n	80086ae <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008618:	6813      	ldr	r3, [r2, #0]
 800861a:	4842      	ldr	r0, [pc, #264]	; (8008724 <HAL_RCC_GetSysClockFreq+0x12c>)
 800861c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008620:	40d8      	lsrs	r0, r3
 8008622:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008624:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008626:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008628:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800862a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800862c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008630:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008634:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008636:	d038      	beq.n	80086aa <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008638:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800863c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008640:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008644:	fb01 f105 	mul.w	r1, r1, r5
 8008648:	2b01      	cmp	r3, #1
 800864a:	ee07 1a90 	vmov	s15, r1
 800864e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8008652:	d002      	beq.n	800865a <HAL_RCC_GetSysClockFreq+0x62>
 8008654:	2b02      	cmp	r3, #2
 8008656:	d02c      	beq.n	80086b2 <HAL_RCC_GetSysClockFreq+0xba>
 8008658:	b393      	cbz	r3, 80086c0 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800865a:	ee07 0a90 	vmov	s15, r0
 800865e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8008728 <HAL_RCC_GetSysClockFreq+0x130>
 8008662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008666:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008668:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800866c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800872c <HAL_RCC_GetSysClockFreq+0x134>
 8008670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800867c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008680:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008684:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008688:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800868c:	4b22      	ldr	r3, [pc, #136]	; (8008718 <HAL_RCC_GetSysClockFreq+0x120>)
 800868e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008690:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008694:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800869e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80086aa:	bc30      	pop	{r4, r5}
 80086ac:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086ae:	481d      	ldr	r0, [pc, #116]	; (8008724 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80086b0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086b2:	ee07 0a90 	vmov	s15, r0
 80086b6:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8008730 <HAL_RCC_GetSysClockFreq+0x138>
 80086ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086be:	e7d2      	b.n	8008666 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c0:	6813      	ldr	r3, [r2, #0]
 80086c2:	069b      	lsls	r3, r3, #26
 80086c4:	d520      	bpl.n	8008708 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086c6:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086c8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086cc:	4915      	ldr	r1, [pc, #84]	; (8008724 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086d2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086da:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086dc:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086de:	eddf 4a13 	vldr	s9, [pc, #76]	; 800872c <HAL_RCC_GetSysClockFreq+0x134>
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee06 1a10 	vmov	s12, r1
 80086ea:	ee06 3a90 	vmov	s13, r3
 80086ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80086f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80086f6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80086fa:	eee7 6a24 	vfma.f32	s13, s14, s9
 80086fe:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008702:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008706:	e7c1      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008708:	ee07 0a90 	vmov	s15, r0
 800870c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008734 <HAL_RCC_GetSysClockFreq+0x13c>
 8008710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008714:	e7a7      	b.n	8008666 <HAL_RCC_GetSysClockFreq+0x6e>
 8008716:	bf00      	nop
 8008718:	58024400 	.word	0x58024400
 800871c:	003d0900 	.word	0x003d0900
 8008720:	017d7840 	.word	0x017d7840
 8008724:	03d09000 	.word	0x03d09000
 8008728:	4a742400 	.word	0x4a742400
 800872c:	39000000 	.word	0x39000000
 8008730:	4bbebc20 	.word	0x4bbebc20
 8008734:	4c742400 	.word	0x4c742400

08008738 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008738:	2800      	cmp	r0, #0
 800873a:	f000 810e 	beq.w	800895a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800873e:	4a8d      	ldr	r2, [pc, #564]	; (8008974 <HAL_RCC_ClockConfig+0x23c>)
 8008740:	6813      	ldr	r3, [r2, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	428b      	cmp	r3, r1
{
 8008748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008750:	d20c      	bcs.n	800876c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	f023 030f 	bic.w	r3, r3, #15
 8008758:	430b      	orrs	r3, r1
 800875a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800875c:	6813      	ldr	r3, [r2, #0]
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	428b      	cmp	r3, r1
 8008764:	d002      	beq.n	800876c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008766:	2001      	movs	r0, #1
}
 8008768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	075f      	lsls	r7, r3, #29
 8008770:	d50b      	bpl.n	800878a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008772:	4981      	ldr	r1, [pc, #516]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008774:	6920      	ldr	r0, [r4, #16]
 8008776:	698a      	ldr	r2, [r1, #24]
 8008778:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800877c:	4290      	cmp	r0, r2
 800877e:	d904      	bls.n	800878a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008780:	698a      	ldr	r2, [r1, #24]
 8008782:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008786:	4302      	orrs	r2, r0
 8008788:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800878a:	071e      	lsls	r6, r3, #28
 800878c:	d50b      	bpl.n	80087a6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800878e:	497a      	ldr	r1, [pc, #488]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008790:	6960      	ldr	r0, [r4, #20]
 8008792:	69ca      	ldr	r2, [r1, #28]
 8008794:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008798:	4290      	cmp	r0, r2
 800879a:	d904      	bls.n	80087a6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800879c:	69ca      	ldr	r2, [r1, #28]
 800879e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087a2:	4302      	orrs	r2, r0
 80087a4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a6:	06d8      	lsls	r0, r3, #27
 80087a8:	d50b      	bpl.n	80087c2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087aa:	4973      	ldr	r1, [pc, #460]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80087ac:	69a0      	ldr	r0, [r4, #24]
 80087ae:	69ca      	ldr	r2, [r1, #28]
 80087b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80087b4:	4290      	cmp	r0, r2
 80087b6:	d904      	bls.n	80087c2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087b8:	69ca      	ldr	r2, [r1, #28]
 80087ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087be:	4302      	orrs	r2, r0
 80087c0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087c2:	0699      	lsls	r1, r3, #26
 80087c4:	d50b      	bpl.n	80087de <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087c6:	496c      	ldr	r1, [pc, #432]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80087c8:	69e0      	ldr	r0, [r4, #28]
 80087ca:	6a0a      	ldr	r2, [r1, #32]
 80087cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087d0:	4290      	cmp	r0, r2
 80087d2:	d904      	bls.n	80087de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087d4:	6a0a      	ldr	r2, [r1, #32]
 80087d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087da:	4302      	orrs	r2, r0
 80087dc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087de:	079a      	lsls	r2, r3, #30
 80087e0:	f140 80ad 	bpl.w	800893e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087e4:	4864      	ldr	r0, [pc, #400]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80087e6:	68e1      	ldr	r1, [r4, #12]
 80087e8:	6982      	ldr	r2, [r0, #24]
 80087ea:	f002 020f 	and.w	r2, r2, #15
 80087ee:	4291      	cmp	r1, r2
 80087f0:	d904      	bls.n	80087fc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087f2:	6982      	ldr	r2, [r0, #24]
 80087f4:	f022 020f 	bic.w	r2, r2, #15
 80087f8:	430a      	orrs	r2, r1
 80087fa:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087fc:	07d8      	lsls	r0, r3, #31
 80087fe:	d531      	bpl.n	8008864 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008800:	4a5d      	ldr	r2, [pc, #372]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008802:	68a1      	ldr	r1, [r4, #8]
 8008804:	6993      	ldr	r3, [r2, #24]
 8008806:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800880a:	430b      	orrs	r3, r1
 800880c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800880e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008810:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008812:	2902      	cmp	r1, #2
 8008814:	f000 80a3 	beq.w	800895e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008818:	2903      	cmp	r1, #3
 800881a:	f000 809a 	beq.w	8008952 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800881e:	2901      	cmp	r1, #1
 8008820:	f000 80a3 	beq.w	800896a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008824:	0758      	lsls	r0, r3, #29
 8008826:	d59e      	bpl.n	8008766 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008828:	4a53      	ldr	r2, [pc, #332]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800882a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800882e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008830:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008832:	f023 0307 	bic.w	r3, r3, #7
 8008836:	430b      	orrs	r3, r1
 8008838:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800883a:	f7fd fbaf 	bl	8005f9c <HAL_GetTick>
 800883e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008840:	e005      	b.n	800884e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008842:	f7fd fbab 	bl	8005f9c <HAL_GetTick>
 8008846:	1b80      	subs	r0, r0, r6
 8008848:	4540      	cmp	r0, r8
 800884a:	f200 808c 	bhi.w	8008966 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6862      	ldr	r2, [r4, #4]
 8008852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008856:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800885a:	d1f2      	bne.n	8008842 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	0799      	lsls	r1, r3, #30
 8008860:	d506      	bpl.n	8008870 <HAL_RCC_ClockConfig+0x138>
 8008862:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008864:	4844      	ldr	r0, [pc, #272]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008866:	6982      	ldr	r2, [r0, #24]
 8008868:	f002 020f 	and.w	r2, r2, #15
 800886c:	428a      	cmp	r2, r1
 800886e:	d86a      	bhi.n	8008946 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008870:	4940      	ldr	r1, [pc, #256]	; (8008974 <HAL_RCC_ClockConfig+0x23c>)
 8008872:	680a      	ldr	r2, [r1, #0]
 8008874:	f002 020f 	and.w	r2, r2, #15
 8008878:	42aa      	cmp	r2, r5
 800887a:	d90a      	bls.n	8008892 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887c:	680a      	ldr	r2, [r1, #0]
 800887e:	f022 020f 	bic.w	r2, r2, #15
 8008882:	432a      	orrs	r2, r5
 8008884:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008886:	680a      	ldr	r2, [r1, #0]
 8008888:	f002 020f 	and.w	r2, r2, #15
 800888c:	42aa      	cmp	r2, r5
 800888e:	f47f af6a 	bne.w	8008766 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008892:	075a      	lsls	r2, r3, #29
 8008894:	d50b      	bpl.n	80088ae <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008896:	4938      	ldr	r1, [pc, #224]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008898:	6920      	ldr	r0, [r4, #16]
 800889a:	698a      	ldr	r2, [r1, #24]
 800889c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80088a0:	4290      	cmp	r0, r2
 80088a2:	d204      	bcs.n	80088ae <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088a4:	698a      	ldr	r2, [r1, #24]
 80088a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088aa:	4302      	orrs	r2, r0
 80088ac:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ae:	071f      	lsls	r7, r3, #28
 80088b0:	d50b      	bpl.n	80088ca <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088b2:	4931      	ldr	r1, [pc, #196]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80088b4:	6960      	ldr	r0, [r4, #20]
 80088b6:	69ca      	ldr	r2, [r1, #28]
 80088b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80088bc:	4290      	cmp	r0, r2
 80088be:	d204      	bcs.n	80088ca <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088c0:	69ca      	ldr	r2, [r1, #28]
 80088c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088c6:	4302      	orrs	r2, r0
 80088c8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ca:	06de      	lsls	r6, r3, #27
 80088cc:	d50b      	bpl.n	80088e6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088ce:	492a      	ldr	r1, [pc, #168]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80088d0:	69a0      	ldr	r0, [r4, #24]
 80088d2:	69ca      	ldr	r2, [r1, #28]
 80088d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80088d8:	4290      	cmp	r0, r2
 80088da:	d204      	bcs.n	80088e6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088dc:	69ca      	ldr	r2, [r1, #28]
 80088de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088e2:	4302      	orrs	r2, r0
 80088e4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088e6:	069d      	lsls	r5, r3, #26
 80088e8:	d50b      	bpl.n	8008902 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ea:	4a23      	ldr	r2, [pc, #140]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 80088ec:	69e1      	ldr	r1, [r4, #28]
 80088ee:	6a13      	ldr	r3, [r2, #32]
 80088f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088f4:	4299      	cmp	r1, r3
 80088f6:	d204      	bcs.n	8008902 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088f8:	6a13      	ldr	r3, [r2, #32]
 80088fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fe:	430b      	orrs	r3, r1
 8008900:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008902:	f7ff fe79 	bl	80085f8 <HAL_RCC_GetSysClockFreq>
 8008906:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <HAL_RCC_ClockConfig+0x240>)
 8008908:	4602      	mov	r2, r0
 800890a:	481c      	ldr	r0, [pc, #112]	; (800897c <HAL_RCC_ClockConfig+0x244>)
 800890c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800890e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008910:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008914:	4d1a      	ldr	r5, [pc, #104]	; (8008980 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	4c1a      	ldr	r4, [pc, #104]	; (8008984 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800891c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800891e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008920:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008924:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008926:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800892a:	4d17      	ldr	r5, [pc, #92]	; (8008988 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800892c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800892e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008932:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008934:	6023      	str	r3, [r4, #0]
}
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800893a:	f7fd bacd 	b.w	8005ed8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893e:	07da      	lsls	r2, r3, #31
 8008940:	f53f af5e 	bmi.w	8008800 <HAL_RCC_ClockConfig+0xc8>
 8008944:	e794      	b.n	8008870 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008946:	6982      	ldr	r2, [r0, #24]
 8008948:	f022 020f 	bic.w	r2, r2, #15
 800894c:	4311      	orrs	r1, r2
 800894e:	6181      	str	r1, [r0, #24]
 8008950:	e78e      	b.n	8008870 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008952:	019f      	lsls	r7, r3, #6
 8008954:	f53f af68 	bmi.w	8008828 <HAL_RCC_ClockConfig+0xf0>
 8008958:	e705      	b.n	8008766 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800895a:	2001      	movs	r0, #1
}
 800895c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800895e:	039b      	lsls	r3, r3, #14
 8008960:	f53f af62 	bmi.w	8008828 <HAL_RCC_ClockConfig+0xf0>
 8008964:	e6ff      	b.n	8008766 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008966:	2003      	movs	r0, #3
 8008968:	e6fe      	b.n	8008768 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800896a:	05de      	lsls	r6, r3, #23
 800896c:	f53f af5c 	bmi.w	8008828 <HAL_RCC_ClockConfig+0xf0>
 8008970:	e6f9      	b.n	8008766 <HAL_RCC_ClockConfig+0x2e>
 8008972:	bf00      	nop
 8008974:	52002000 	.word	0x52002000
 8008978:	58024400 	.word	0x58024400
 800897c:	0800a290 	.word	0x0800a290
 8008980:	24001068 	.word	0x24001068
 8008984:	24000004 	.word	0x24000004
 8008988:	24000000 	.word	0x24000000

0800898c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800898c:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800898e:	f7ff fe33 	bl	80085f8 <HAL_RCC_GetSysClockFreq>
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <HAL_RCC_GetHCLKFreq+0x34>)
 8008994:	490b      	ldr	r1, [pc, #44]	; (80089c4 <HAL_RCC_GetHCLKFreq+0x38>)
 8008996:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008998:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800899a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800899e:	4c0a      	ldr	r4, [pc, #40]	; (80089c8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80089a0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089a4:	4d09      	ldr	r5, [pc, #36]	; (80089cc <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089a6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089a8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089aa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089ae:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089b2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089b6:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 80089ba:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089bc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	58024400 	.word	0x58024400
 80089c4:	0800a290 	.word	0x0800a290
 80089c8:	24000004 	.word	0x24000004
 80089cc:	24000000 	.word	0x24000000

080089d0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089d0:	4a3b      	ldr	r2, [pc, #236]	; (8008ac0 <RCCEx_PLL2_Config+0xf0>)
{
 80089d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d069      	beq.n	8008ab2 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089de:	6813      	ldr	r3, [r2, #0]
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089e4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80089e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80089ec:	f7fd fad6 	bl	8005f9c <HAL_GetTick>
 80089f0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089f2:	e004      	b.n	80089fe <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089f4:	f7fd fad2 	bl	8005f9c <HAL_GetTick>
 80089f8:	1b43      	subs	r3, r0, r5
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d857      	bhi.n	8008aae <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	011a      	lsls	r2, r3, #4
 8008a02:	d4f7      	bmi.n	80089f4 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a06:	6832      	ldr	r2, [r6, #0]
 8008a08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a0c:	492d      	ldr	r1, [pc, #180]	; (8008ac4 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a0e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a14:	6875      	ldr	r5, [r6, #4]
 8008a16:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008a1a:	3d01      	subs	r5, #1
 8008a1c:	1e50      	subs	r0, r2, #1
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	6932      	ldr	r2, [r6, #16]
 8008a22:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008a26:	025b      	lsls	r3, r3, #9
 8008a28:	0400      	lsls	r0, r0, #16
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008a32:	0612      	lsls	r2, r2, #24
 8008a34:	4303      	orrs	r3, r0
 8008a36:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008a3a:	432b      	orrs	r3, r5
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a42:	6972      	ldr	r2, [r6, #20]
 8008a44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a4e:	69b2      	ldr	r2, [r6, #24]
 8008a50:	f023 0320 	bic.w	r3, r3, #32
 8008a54:	4313      	orrs	r3, r2
 8008a56:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008a62:	69f3      	ldr	r3, [r6, #28]
 8008a64:	4011      	ands	r1, r2
 8008a66:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008a6a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a6e:	f043 0310 	orr.w	r3, r3, #16
 8008a72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008a76:	b1f7      	cbz	r7, 8008ab6 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a78:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a7a:	bf0c      	ite	eq
 8008a7c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a80:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008a84:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a86:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <RCCEx_PLL2_Config+0xf0>)
 8008a88:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a8a:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008a8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a90:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008a92:	f7fd fa83 	bl	8005f9c <HAL_GetTick>
 8008a96:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a98:	e004      	b.n	8008aa4 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a9a:	f7fd fa7f 	bl	8005f9c <HAL_GetTick>
 8008a9e:	1b00      	subs	r0, r0, r4
 8008aa0:	2802      	cmp	r0, #2
 8008aa2:	d804      	bhi.n	8008aae <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	d5f7      	bpl.n	8008a9a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008aaa:	2000      	movs	r0, #0
}
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008aae:	2003      	movs	r0, #3
}
 8008ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008ab2:	2001      	movs	r0, #1
}
 8008ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008abc:	e7e3      	b.n	8008a86 <RCCEx_PLL2_Config+0xb6>
 8008abe:	bf00      	nop
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	ffff0007 	.word	0xffff0007

08008ac8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ac8:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <RCCEx_PLL3_Config+0xf0>)
{
 8008aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008acc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d069      	beq.n	8008baa <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008adc:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ae2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008ae4:	f7fd fa5a 	bl	8005f9c <HAL_GetTick>
 8008ae8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aea:	e004      	b.n	8008af6 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008aec:	f7fd fa56 	bl	8005f9c <HAL_GetTick>
 8008af0:	1b43      	subs	r3, r0, r5
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d857      	bhi.n	8008ba6 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	009a      	lsls	r2, r3, #2
 8008afa:	d4f7      	bmi.n	8008aec <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008afe:	6832      	ldr	r2, [r6, #0]
 8008b00:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b04:	492d      	ldr	r1, [pc, #180]	; (8008bbc <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b06:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008b0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b0c:	6875      	ldr	r5, [r6, #4]
 8008b0e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008b12:	3d01      	subs	r5, #1
 8008b14:	1e50      	subs	r0, r2, #1
 8008b16:	3b01      	subs	r3, #1
 8008b18:	6932      	ldr	r2, [r6, #16]
 8008b1a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008b1e:	025b      	lsls	r3, r3, #9
 8008b20:	0400      	lsls	r0, r0, #16
 8008b22:	3a01      	subs	r2, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008b2a:	0612      	lsls	r2, r2, #24
 8008b2c:	4303      	orrs	r3, r0
 8008b2e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008b32:	432b      	orrs	r3, r5
 8008b34:	4313      	orrs	r3, r2
 8008b36:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b3a:	6972      	ldr	r2, [r6, #20]
 8008b3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b40:	4313      	orrs	r3, r2
 8008b42:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b46:	69b2      	ldr	r2, [r6, #24]
 8008b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b56:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008b5a:	69f3      	ldr	r3, [r6, #28]
 8008b5c:	4011      	ands	r1, r2
 8008b5e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008b62:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008b6e:	b1f7      	cbz	r7, 8008bae <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b70:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b72:	bf0c      	ite	eq
 8008b74:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b78:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <RCCEx_PLL3_Config+0xf0>)
 8008b80:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b82:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008b88:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008b8a:	f7fd fa07 	bl	8005f9c <HAL_GetTick>
 8008b8e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b90:	e004      	b.n	8008b9c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b92:	f7fd fa03 	bl	8005f9c <HAL_GetTick>
 8008b96:	1b00      	subs	r0, r0, r4
 8008b98:	2802      	cmp	r0, #2
 8008b9a:	d804      	bhi.n	8008ba6 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	d5f7      	bpl.n	8008b92 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008ba2:	2000      	movs	r0, #0
}
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008ba6:	2003      	movs	r0, #3
}
 8008ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008baa:	2001      	movs	r0, #1
}
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bb4:	e7e3      	b.n	8008b7e <RCCEx_PLL3_Config+0xb6>
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	ffff0007 	.word	0xffff0007

08008bc0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bc4:	6803      	ldr	r3, [r0, #0]
{
 8008bc6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bc8:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008bcc:	d01c      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008bce:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8008bd0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008bd4:	f000 84c7 	beq.w	8009566 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008bd8:	d823      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	f000 842c 	beq.w	8009438 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8008be0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008be4:	d120      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008be6:	2102      	movs	r1, #2
 8008be8:	3004      	adds	r0, #4
 8008bea:	f7ff fef1 	bl	80089d0 <RCCEx_PLL2_Config>
 8008bee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	f040 84c0 	bne.w	8009576 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8008bf6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008bf8:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bfa:	48b0      	ldr	r0, [pc, #704]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008bfc:	2600      	movs	r6, #0
 8008bfe:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008c00:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008c04:	430a      	orrs	r2, r1
 8008c06:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c08:	05da      	lsls	r2, r3, #23
 8008c0a:	d511      	bpl.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008c0e:	2a04      	cmp	r2, #4
 8008c10:	f200 8580 	bhi.w	8009714 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8008c14:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008c18:	04c104ba 	.word	0x04c104ba
 8008c1c:	033b04b2 	.word	0x033b04b2
 8008c20:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c22:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008c26:	d0e8      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c28:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c2a:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c2e:	d4ed      	bmi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c32:	059f      	lsls	r7, r3, #22
 8008c34:	d51b      	bpl.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008c38:	2a80      	cmp	r2, #128	; 0x80
 8008c3a:	f000 84b7 	beq.w	80095ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8008c3e:	f200 8127 	bhi.w	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	f000 83e6 	beq.w	8009414 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8008c48:	2a40      	cmp	r2, #64	; 0x40
 8008c4a:	f040 8128 	bne.w	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c4e:	2100      	movs	r1, #0
 8008c50:	1d20      	adds	r0, r4, #4
 8008c52:	f7ff febd 	bl	80089d0 <RCCEx_PLL2_Config>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	f040 83cc 	bne.w	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c60:	4996      	ldr	r1, [pc, #600]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008c62:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008c64:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008c66:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008c6a:	4302      	orrs	r2, r0
 8008c6c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c6e:	0558      	lsls	r0, r3, #21
 8008c70:	d51f      	bpl.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008c72:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008c76:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008c7a:	f000 8462 	beq.w	8009542 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008c7e:	f200 8111 	bhi.w	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	f000 83c0 	beq.w	8009408 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008c88:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008c8c:	f040 8112 	bne.w	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c90:	2100      	movs	r1, #0
 8008c92:	1d20      	adds	r0, r4, #4
 8008c94:	f7ff fe9c 	bl	80089d0 <RCCEx_PLL2_Config>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	f040 83b1 	bne.w	8009404 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ca2:	4986      	ldr	r1, [pc, #536]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008ca4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008ca8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008caa:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008cae:	4302      	orrs	r2, r0
 8008cb0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008cb2:	0519      	lsls	r1, r3, #20
 8008cb4:	d51f      	bpl.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008cb6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008cba:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008cbe:	f000 8437 	beq.w	8009530 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8008cc2:	f200 80fd 	bhi.w	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	f000 83aa 	beq.w	8009420 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008ccc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008cd0:	f040 80fe 	bne.w	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	1d20      	adds	r0, r4, #4
 8008cd8:	f7ff fe7a 	bl	80089d0 <RCCEx_PLL2_Config>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	f040 8387 	bne.w	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ce6:	4975      	ldr	r1, [pc, #468]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008ce8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008cec:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008cee:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008cf2:	4302      	orrs	r2, r0
 8008cf4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008cf6:	019a      	lsls	r2, r3, #6
 8008cf8:	d518      	bpl.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008cfa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008cfc:	2a20      	cmp	r2, #32
 8008cfe:	f000 840d 	beq.w	800951c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008d02:	f200 80e8 	bhi.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8008d06:	b13a      	cbz	r2, 8008d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008d08:	2a10      	cmp	r2, #16
 8008d0a:	f040 80e7 	bne.w	8008edc <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d0e:	496b      	ldr	r1, [pc, #428]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d10:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008d12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008d16:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	f040 83ba 	bne.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d1e:	4967      	ldr	r1, [pc, #412]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d22:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008d24:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008d28:	4302      	orrs	r2, r0
 8008d2a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d2c:	04df      	lsls	r7, r3, #19
 8008d2e:	d51d      	bpl.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008d32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008d36:	f000 840d 	beq.w	8009554 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8008d3a:	f200 80d2 	bhi.w	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	f000 8374 	beq.w	800942c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8008d44:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008d48:	f040 80d3 	bne.w	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	1d20      	adds	r0, r4, #4
 8008d50:	f7ff fe3e 	bl	80089d0 <RCCEx_PLL2_Config>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	f040 834f 	bne.w	80093fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d5e:	4957      	ldr	r1, [pc, #348]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d60:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008d62:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008d64:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008d68:	4302      	orrs	r2, r0
 8008d6a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d6c:	0498      	lsls	r0, r3, #18
 8008d6e:	d51b      	bpl.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d72:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008d76:	f000 83bd 	beq.w	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008d7a:	f200 80bd 	bhi.w	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008d7e:	b14a      	cbz	r2, 8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008d80:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008d84:	f040 80c2 	bne.w	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d88:	2101      	movs	r1, #1
 8008d8a:	1d20      	adds	r0, r4, #4
 8008d8c:	f7ff fe20 	bl	80089d0 <RCCEx_PLL2_Config>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	f040 837e 	bne.w	8009496 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d9a:	4948      	ldr	r1, [pc, #288]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d9c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008d9e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008da0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008da4:	4302      	orrs	r2, r0
 8008da6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008da8:	0459      	lsls	r1, r3, #17
 8008daa:	d51d      	bpl.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008dac:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8008db0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008db4:	f000 83a8 	beq.w	8009508 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8008db8:	f200 80ab 	bhi.w	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008dbc:	b14a      	cbz	r2, 8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008dbe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008dc2:	f040 80b0 	bne.w	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	1d20      	adds	r0, r4, #4
 8008dca:	f7ff fe01 	bl	80089d0 <RCCEx_PLL2_Config>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	f040 8363 	bne.w	800949e <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008dd8:	4938      	ldr	r1, [pc, #224]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008dda:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008dde:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008de0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008de4:	4302      	orrs	r2, r0
 8008de6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	d509      	bpl.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8008dec:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	f000 8264 	beq.w	80092bc <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8008df4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008df8:	f000 825a 	beq.w	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8008dfc:	2601      	movs	r6, #1
 8008dfe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e00:	041f      	lsls	r7, r3, #16
 8008e02:	d50d      	bpl.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8008e04:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008e06:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008e0a:	f000 8420 	beq.w	800964e <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008e0e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008e12:	f000 82ce 	beq.w	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	f000 82d1 	beq.w	80093be <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008e1c:	2601      	movs	r6, #1
 8008e1e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e20:	01d8      	lsls	r0, r3, #7
 8008e22:	f100 81cf 	bmi.w	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e26:	0259      	lsls	r1, r3, #9
 8008e28:	f100 81ef 	bmi.w	800920a <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e2c:	07df      	lsls	r7, r3, #31
 8008e2e:	f140 8088 	bpl.w	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e32:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008e34:	2a28      	cmp	r2, #40	; 0x28
 8008e36:	f200 81cf 	bhi.w	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008e3a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008e3e:	007e      	.short	0x007e
 8008e40:	01cd01cd 	.word	0x01cd01cd
 8008e44:	01cd01cd 	.word	0x01cd01cd
 8008e48:	01cd01cd 	.word	0x01cd01cd
 8008e4c:	03d401cd 	.word	0x03d401cd
 8008e50:	01cd01cd 	.word	0x01cd01cd
 8008e54:	01cd01cd 	.word	0x01cd01cd
 8008e58:	01cd01cd 	.word	0x01cd01cd
 8008e5c:	007701cd 	.word	0x007701cd
 8008e60:	01cd01cd 	.word	0x01cd01cd
 8008e64:	01cd01cd 	.word	0x01cd01cd
 8008e68:	01cd01cd 	.word	0x01cd01cd
 8008e6c:	007e01cd 	.word	0x007e01cd
 8008e70:	01cd01cd 	.word	0x01cd01cd
 8008e74:	01cd01cd 	.word	0x01cd01cd
 8008e78:	01cd01cd 	.word	0x01cd01cd
 8008e7c:	007e01cd 	.word	0x007e01cd
 8008e80:	01cd01cd 	.word	0x01cd01cd
 8008e84:	01cd01cd 	.word	0x01cd01cd
 8008e88:	01cd01cd 	.word	0x01cd01cd
 8008e8c:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e90:	2ac0      	cmp	r2, #192	; 0xc0
 8008e92:	f43f aee2 	beq.w	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008e96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008e9a:	f43f aede 	beq.w	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008e9e:	2601      	movs	r6, #1
 8008ea0:	4635      	mov	r5, r6
 8008ea2:	e6e4      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ea4:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008ea8:	f43f aef8 	beq.w	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008eac:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008eb0:	f43f aef4 	beq.w	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008eb4:	2601      	movs	r6, #1
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	e6fb      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8008eba:	bf00      	nop
 8008ebc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ec0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008ec4:	f43f af0c 	beq.w	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008ec8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008ecc:	f43f af08 	beq.w	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008ed0:	2601      	movs	r6, #1
 8008ed2:	4635      	mov	r5, r6
 8008ed4:	e70f      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8008ed6:	2a30      	cmp	r2, #48	; 0x30
 8008ed8:	f43f af1e 	beq.w	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008edc:	2601      	movs	r6, #1
 8008ede:	4635      	mov	r5, r6
 8008ee0:	e724      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ee2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008ee6:	f43f af37 	beq.w	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008eea:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008eee:	f43f af33 	beq.w	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008ef2:	2601      	movs	r6, #1
 8008ef4:	4635      	mov	r5, r6
 8008ef6:	e739      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ef8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008efc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008f00:	f43f af48 	beq.w	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f04:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008f08:	f43f af44 	beq.w	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f0c:	2601      	movs	r6, #1
 8008f0e:	4635      	mov	r5, r6
 8008f10:	e74a      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f12:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008f16:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008f1a:	f43f af5a 	beq.w	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008f1e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008f22:	f43f af56 	beq.w	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008f26:	2601      	movs	r6, #1
 8008f28:	4635      	mov	r5, r6
 8008f2a:	e75d      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f32:	f7ff fdc9 	bl	8008ac8 <RCCEx_PLL3_Config>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	f000 82c0 	beq.w	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8008f40:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f42:	0798      	lsls	r0, r3, #30
 8008f44:	d516      	bpl.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f46:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008f48:	2a05      	cmp	r2, #5
 8008f4a:	f200 83e6 	bhi.w	800971a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008f4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f52:	000d      	.short	0x000d
 8008f54:	00060336 	.word	0x00060336
 8008f58:	000d000d 	.word	0x000d000d
 8008f5c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f64:	f7ff fdb0 	bl	8008ac8 <RCCEx_PLL3_Config>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	f000 8279 	beq.w	8009464 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8008f72:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f74:	0759      	lsls	r1, r3, #29
 8008f76:	d517      	bpl.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f78:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8008f7c:	2a05      	cmp	r2, #5
 8008f7e:	f200 83c6 	bhi.w	800970e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8008f82:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f86:	000d      	.short	0x000d
 8008f88:	00060326 	.word	0x00060326
 8008f8c:	000d000d 	.word	0x000d000d
 8008f90:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f92:	2101      	movs	r1, #1
 8008f94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f98:	f7ff fd96 	bl	8008ac8 <RCCEx_PLL3_Config>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	f000 826a 	beq.w	800947a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8008fa6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fa8:	069a      	lsls	r2, r3, #26
 8008faa:	d51d      	bpl.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008fac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008fb0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008fb4:	f000 8340 	beq.w	8009638 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8008fb8:	f200 81af 	bhi.w	800931a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8008fbc:	b14a      	cbz	r2, 8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8008fbe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008fc2:	f040 81b4 	bne.w	800932e <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	1d20      	adds	r0, r4, #4
 8008fca:	f7ff fd01 	bl	80089d0 <RCCEx_PLL2_Config>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	f040 823c 	bne.w	8009450 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fd8:	49b3      	ldr	r1, [pc, #716]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008fda:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8008fde:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008fe0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008fe4:	4302      	orrs	r2, r0
 8008fe6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008fe8:	065f      	lsls	r7, r3, #25
 8008fea:	d51d      	bpl.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008fec:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8008ff0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008ff4:	f000 8334 	beq.w	8009660 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8008ff8:	f200 817f 	bhi.w	80092fa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008ffc:	b14a      	cbz	r2, 8009012 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008ffe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009002:	f040 8184 	bne.w	800930e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009006:	2100      	movs	r1, #0
 8009008:	1d20      	adds	r0, r4, #4
 800900a:	f7ff fce1 	bl	80089d0 <RCCEx_PLL2_Config>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009012:	2d00      	cmp	r5, #0
 8009014:	f040 8221 	bne.w	800945a <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009018:	49a3      	ldr	r1, [pc, #652]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800901a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800901e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009020:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009024:	4302      	orrs	r2, r0
 8009026:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009028:	0618      	lsls	r0, r3, #24
 800902a:	d51d      	bpl.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800902c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009030:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009034:	f000 831f 	beq.w	8009676 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009038:	f200 814f 	bhi.w	80092da <HAL_RCCEx_PeriphCLKConfig+0x71a>
 800903c:	b14a      	cbz	r2, 8009052 <HAL_RCCEx_PeriphCLKConfig+0x492>
 800903e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009042:	f040 8154 	bne.w	80092ee <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009046:	2100      	movs	r1, #0
 8009048:	1d20      	adds	r0, r4, #4
 800904a:	f7ff fcc1 	bl	80089d0 <RCCEx_PLL2_Config>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009052:	2d00      	cmp	r5, #0
 8009054:	f040 81f7 	bne.w	8009446 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009058:	4993      	ldr	r1, [pc, #588]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800905a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800905e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009060:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009064:	4302      	orrs	r2, r0
 8009066:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009068:	0719      	lsls	r1, r3, #28
 800906a:	d50b      	bpl.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800906c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009070:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009074:	f000 831e 	beq.w	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009078:	488b      	ldr	r0, [pc, #556]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800907a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800907c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009080:	430a      	orrs	r2, r1
 8009082:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009084:	06da      	lsls	r2, r3, #27
 8009086:	d50b      	bpl.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009088:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800908c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009090:	f000 8305 	beq.w	800969e <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009094:	4884      	ldr	r0, [pc, #528]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009096:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800909c:	430a      	orrs	r2, r1
 800909e:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090a0:	031f      	lsls	r7, r3, #12
 80090a2:	d50e      	bpl.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80090a4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80090a8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80090ac:	f000 816b 	beq.w	8009386 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80090b0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80090b4:	f000 816e 	beq.w	8009394 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80090b8:	2900      	cmp	r1, #0
 80090ba:	f000 82e7 	beq.w	800968c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80090be:	2601      	movs	r6, #1
 80090c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c2:	0358      	lsls	r0, r3, #13
 80090c4:	d50f      	bpl.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 80090c6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80090ca:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80090ce:	f000 8144 	beq.w	800935a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80090d2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80090d6:	f000 8147 	beq.w	8009368 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80090da:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80090de:	f000 82a2 	beq.w	8009626 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80090e2:	2601      	movs	r6, #1
 80090e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80090e6:	03d9      	lsls	r1, r3, #15
 80090e8:	d517      	bpl.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80090ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	f000 8288 	beq.w	8009602 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 80090f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80090f6:	f040 817a 	bne.w	80093ee <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090fa:	2102      	movs	r1, #2
 80090fc:	1d20      	adds	r0, r4, #4
 80090fe:	f7ff fc67 	bl	80089d0 <RCCEx_PLL2_Config>
 8009102:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	2d00      	cmp	r5, #0
 8009108:	f040 81e5 	bne.w	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800910c:	4966      	ldr	r1, [pc, #408]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800910e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009110:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009112:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009116:	4302      	orrs	r2, r0
 8009118:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800911a:	009a      	lsls	r2, r3, #2
 800911c:	f100 815c 	bmi.w	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009120:	039f      	lsls	r7, r3, #14
 8009122:	d43f      	bmi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009124:	1e30      	subs	r0, r6, #0
 8009126:	bf18      	it	ne
 8009128:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800912a:	02de      	lsls	r6, r3, #11
 800912c:	d506      	bpl.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800912e:	495e      	ldr	r1, [pc, #376]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009130:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009132:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009134:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009138:	432a      	orrs	r2, r5
 800913a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800913c:	00dd      	lsls	r5, r3, #3
 800913e:	d507      	bpl.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009140:	4959      	ldr	r1, [pc, #356]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009142:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009146:	690a      	ldr	r2, [r1, #16]
 8009148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800914c:	432a      	orrs	r2, r5
 800914e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009150:	0299      	lsls	r1, r3, #10
 8009152:	d506      	bpl.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009154:	4954      	ldr	r1, [pc, #336]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009156:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009158:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800915a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800915e:	432a      	orrs	r2, r5
 8009160:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009162:	005a      	lsls	r2, r3, #1
 8009164:	d509      	bpl.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009166:	4a50      	ldr	r2, [pc, #320]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009168:	6911      	ldr	r1, [r2, #16]
 800916a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800916e:	6111      	str	r1, [r2, #16]
 8009170:	6911      	ldr	r1, [r2, #16]
 8009172:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8009176:	4329      	orrs	r1, r5
 8009178:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800917a:	2b00      	cmp	r3, #0
 800917c:	da06      	bge.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800917e:	494a      	ldr	r1, [pc, #296]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009180:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009182:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009188:	432a      	orrs	r2, r5
 800918a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	d507      	bpl.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009190:	4a45      	ldr	r2, [pc, #276]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009192:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009196:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009198:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800919c:	430b      	orrs	r3, r1
 800919e:	6553      	str	r3, [r2, #84]	; 0x54
}
 80091a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80091a4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80091a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80091ac:	f000 8232 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80091b0:	f240 80c3 	bls.w	800933a <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80091b4:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80091b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80091bc:	f000 80c0 	beq.w	8009340 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7b2      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 80091c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80091c6:	2a03      	cmp	r2, #3
 80091c8:	f200 82aa 	bhi.w	8009720 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80091cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80091d0:	018a0010 	.word	0x018a0010
 80091d4:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 80091d8:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091da:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 80091dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091de:	f57f aec9 	bpl.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80091e2:	e6b0      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091e4:	2102      	movs	r1, #2
 80091e6:	1d20      	adds	r0, r4, #4
 80091e8:	f7ff fbf2 	bl	80089d0 <RCCEx_PLL2_Config>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	f040 8152 	bne.w	800949a <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091f6:	492c      	ldr	r1, [pc, #176]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091f8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80091fa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80091fc:	f022 0203 	bic.w	r2, r2, #3
 8009200:	4302      	orrs	r2, r0
 8009202:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009204:	0259      	lsls	r1, r3, #9
 8009206:	f57f ae11 	bpl.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800920a:	4b28      	ldr	r3, [pc, #160]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800920c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800920e:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009214:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009216:	f7fc fec1 	bl	8005f9c <HAL_GetTick>
 800921a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800921c:	e005      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800921e:	f7fc febd 	bl	8005f9c <HAL_GetTick>
 8009222:	1bc0      	subs	r0, r0, r7
 8009224:	2864      	cmp	r0, #100	; 0x64
 8009226:	f200 81e8 	bhi.w	80095fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800922a:	f8d8 3000 	ldr.w	r3, [r8]
 800922e:	05da      	lsls	r2, r3, #23
 8009230:	d5f5      	bpl.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009232:	2d00      	cmp	r5, #0
 8009234:	f040 8267 	bne.w	8009706 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009238:	4a1b      	ldr	r2, [pc, #108]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800923a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800923e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009240:	4059      	eors	r1, r3
 8009242:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009246:	d00b      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009248:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800924a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800924c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009250:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009254:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009256:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009258:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800925c:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800925e:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009264:	f000 8231 	beq.w	80096ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009268:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800926c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009270:	f000 823f 	beq.w	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8009274:	490c      	ldr	r1, [pc, #48]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009276:	690a      	ldr	r2, [r1, #16]
 8009278:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800927c:	610a      	str	r2, [r1, #16]
 800927e:	4a0a      	ldr	r2, [pc, #40]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009284:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009286:	430b      	orrs	r3, r1
 8009288:	6713      	str	r3, [r2, #112]	; 0x70
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	e5ce      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800928e:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009290:	2d00      	cmp	r5, #0
 8009292:	f040 80b5 	bne.w	8009400 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009296:	4904      	ldr	r1, [pc, #16]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800929c:	f022 0207 	bic.w	r2, r2, #7
 80092a0:	4302      	orrs	r2, r0
 80092a2:	650a      	str	r2, [r1, #80]	; 0x50
 80092a4:	e4c5      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80092a6:	bf00      	nop
 80092a8:	58024400 	.word	0x58024400
 80092ac:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b0:	2101      	movs	r1, #1
 80092b2:	1d20      	adds	r0, r4, #4
 80092b4:	f7ff fb8c 	bl	80089d0 <RCCEx_PLL2_Config>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092bc:	2d00      	cmp	r5, #0
 80092be:	f040 810c 	bne.w	80094da <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80092c2:	49b9      	ldr	r1, [pc, #740]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092c4:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80092c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80092c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80092ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ce:	ea42 0200 	orr.w	r2, r2, r0
 80092d2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092d4:	f57f ada4 	bpl.w	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80092d8:	e594      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80092da:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80092de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092e2:	f43f aeb6 	beq.w	8009052 <HAL_RCCEx_PeriphCLKConfig+0x492>
 80092e6:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80092ea:	f43f aeb2 	beq.w	8009052 <HAL_RCCEx_PeriphCLKConfig+0x492>
 80092ee:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092f0:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 80092f2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092f4:	f57f aec6 	bpl.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80092f8:	e6b8      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80092fa:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80092fe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009302:	f43f ae86 	beq.w	8009012 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009306:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800930a:	f43f ae82 	beq.w	8009012 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800930e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009310:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009312:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009314:	f57f aea8 	bpl.w	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009318:	e688      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800931a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800931e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009322:	f43f ae56 	beq.w	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009326:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800932a:	f43f ae52 	beq.w	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
 800932e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009330:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009332:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009334:	f57f ae78 	bpl.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009338:	e658      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 800933a:	2a00      	cmp	r2, #0
 800933c:	f47f af40 	bne.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8009340:	2d00      	cmp	r5, #0
 8009342:	f47f af3d 	bne.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009346:	4d98      	ldr	r5, [pc, #608]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009348:	1e30      	subs	r0, r6, #0
 800934a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800934c:	bf18      	it	ne
 800934e:	2001      	movne	r0, #1
 8009350:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009354:	430a      	orrs	r2, r1
 8009356:	656a      	str	r2, [r5, #84]	; 0x54
 8009358:	e6e7      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800935a:	2101      	movs	r1, #1
 800935c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009360:	f7ff fbb2 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009368:	2d00      	cmp	r5, #0
 800936a:	f040 80a4 	bne.w	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800936e:	498e      	ldr	r1, [pc, #568]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009370:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009374:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009376:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800937a:	4302      	orrs	r2, r0
 800937c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800937e:	03d9      	lsls	r1, r3, #15
 8009380:	f57f aecb 	bpl.w	800911a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009384:	e6b1      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009386:	2102      	movs	r1, #2
 8009388:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800938c:	f7ff fb9c 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009394:	2d00      	cmp	r5, #0
 8009396:	f040 8089 	bne.w	80094ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800939a:	4983      	ldr	r1, [pc, #524]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800939c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80093a0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80093a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80093a6:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093a8:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093aa:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093ac:	f57f ae9b 	bpl.w	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80093b0:	e689      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093b2:	2101      	movs	r1, #1
 80093b4:	1d20      	adds	r0, r4, #4
 80093b6:	f7ff fb0b 	bl	80089d0 <RCCEx_PLL2_Config>
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093be:	2d00      	cmp	r5, #0
 80093c0:	d16f      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093c2:	4979      	ldr	r1, [pc, #484]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80093c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80093c6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80093c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093cc:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093ce:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093d0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093d2:	f57f ad28 	bpl.w	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80093d6:	e6f5      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093d8:	2102      	movs	r1, #2
 80093da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093de:	f7ff fb73 	bl	8008ac8 <RCCEx_PLL3_Config>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f43f ae9b 	beq.w	8009120 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 80093ea:	2601      	movs	r6, #1
 80093ec:	e698      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 80093ee:	2601      	movs	r6, #1
 80093f0:	4635      	mov	r5, r6
 80093f2:	e692      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80093f4:	462e      	mov	r6, r5
 80093f6:	e47e      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093f8:	462e      	mov	r6, r5
 80093fa:	e438      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xae>
 80093fc:	462e      	mov	r6, r5
 80093fe:	e4b5      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009400:	462e      	mov	r6, r5
 8009402:	e416      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009404:	462e      	mov	r6, r5
 8009406:	e454      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009408:	4967      	ldr	r1, [pc, #412]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800940a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800940c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009410:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009412:	e443      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009414:	4964      	ldr	r1, [pc, #400]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009416:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009418:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800941c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800941e:	e41c      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009420:	4961      	ldr	r1, [pc, #388]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009422:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009424:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009428:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800942a:	e459      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800942c:	495e      	ldr	r1, [pc, #376]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800942e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009430:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009434:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009436:	e48f      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009438:	485b      	ldr	r0, [pc, #364]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800943a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800943c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009440:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009442:	f7ff bbda 	b.w	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009446:	0719      	lsls	r1, r3, #28
 8009448:	462e      	mov	r6, r5
 800944a:	f57f ae1b 	bpl.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800944e:	e60d      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009450:	065f      	lsls	r7, r3, #25
 8009452:	462e      	mov	r6, r5
 8009454:	f57f ade8 	bpl.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8009458:	e5c8      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800945a:	0618      	lsls	r0, r3, #24
 800945c:	462e      	mov	r6, r5
 800945e:	f57f ae03 	bpl.w	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009462:	e5e3      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009464:	4950      	ldr	r1, [pc, #320]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009466:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009468:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800946a:	f022 0207 	bic.w	r2, r2, #7
 800946e:	4302      	orrs	r2, r0
 8009470:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009472:	0759      	lsls	r1, r3, #29
 8009474:	f57f ad98 	bpl.w	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009478:	e57e      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800947a:	494b      	ldr	r1, [pc, #300]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800947c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009480:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009482:	f022 0207 	bic.w	r2, r2, #7
 8009486:	4302      	orrs	r2, r0
 8009488:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800948a:	069a      	lsls	r2, r3, #26
 800948c:	f57f adac 	bpl.w	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009490:	e58c      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009492:	462e      	mov	r6, r5
 8009494:	e44a      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009496:	462e      	mov	r6, r5
 8009498:	e486      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800949a:	462e      	mov	r6, r5
 800949c:	e4c3      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800949e:	462e      	mov	r6, r5
 80094a0:	e4a2      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094a2:	01d8      	lsls	r0, r3, #7
 80094a4:	462e      	mov	r6, r5
 80094a6:	f57f acbe 	bpl.w	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80094aa:	e68b      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094ac:	0358      	lsls	r0, r3, #13
 80094ae:	462e      	mov	r6, r5
 80094b0:	f57f ae19 	bpl.w	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80094b4:	e607      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094b6:	03d9      	lsls	r1, r3, #15
 80094b8:	462e      	mov	r6, r5
 80094ba:	f57f ae2e 	bpl.w	800911a <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80094be:	e614      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094c0:	4939      	ldr	r1, [pc, #228]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80094c4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094c6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80094ca:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094cc:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094ce:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094d0:	f57f ad50 	bpl.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80094d4:	e537      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80094d6:	462e      	mov	r6, r5
 80094d8:	e61f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094da:	041f      	lsls	r7, r3, #16
 80094dc:	462e      	mov	r6, r5
 80094de:	f57f ac9f 	bpl.w	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80094e2:	e48f      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e4:	4930      	ldr	r1, [pc, #192]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094ec:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	d1d3      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80094f2:	e680      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094f4:	2101      	movs	r1, #1
 80094f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094fa:	f7ff fae5 	bl	8008ac8 <RCCEx_PLL3_Config>
 80094fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	2d00      	cmp	r5, #0
 8009504:	d1c7      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8009506:	e448      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009508:	2101      	movs	r1, #1
 800950a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800950e:	f7ff fadb 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009512:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	2d00      	cmp	r5, #0
 8009518:	d1c1      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800951a:	e45d      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800951c:	2102      	movs	r1, #2
 800951e:	1d20      	adds	r0, r4, #4
 8009520:	f7ff fa56 	bl	80089d0 <RCCEx_PLL2_Config>
 8009524:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	2d00      	cmp	r5, #0
 800952a:	d1b2      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800952c:	f7ff bbf7 	b.w	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009530:	2100      	movs	r1, #0
 8009532:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009536:	f7ff fac7 	bl	8008ac8 <RCCEx_PLL3_Config>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4605      	mov	r5, r0
      break;
 800953e:	f7ff bbcf 	b.w	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009542:	2100      	movs	r1, #0
 8009544:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009548:	f7ff fabe 	bl	8008ac8 <RCCEx_PLL3_Config>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	4605      	mov	r5, r0
      break;
 8009550:	f7ff bba4 	b.w	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009554:	2100      	movs	r1, #0
 8009556:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800955a:	f7ff fab5 	bl	8008ac8 <RCCEx_PLL3_Config>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	4605      	mov	r5, r0
      break;
 8009562:	f7ff bbf9 	b.w	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009566:	2102      	movs	r1, #2
 8009568:	3024      	adds	r0, #36	; 0x24
 800956a:	f7ff faad 	bl	8008ac8 <RCCEx_PLL3_Config>
 800956e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009570:	2e00      	cmp	r6, #0
 8009572:	f43f ab40 	beq.w	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	f7ff bb46 	b.w	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800957c:	2100      	movs	r1, #0
 800957e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009582:	f7ff faa1 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	4605      	mov	r5, r0
      break;
 800958a:	e681      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958c:	4906      	ldr	r1, [pc, #24]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 800958e:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009590:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009592:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009596:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009598:	e67a      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800959a:	2100      	movs	r1, #0
 800959c:	1d20      	adds	r0, r4, #4
 800959e:	f7ff fa17 	bl	80089d0 <RCCEx_PLL2_Config>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4605      	mov	r5, r0
      break;
 80095a6:	e673      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80095a8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095ac:	2100      	movs	r1, #0
 80095ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095b2:	f7ff fa89 	bl	8008ac8 <RCCEx_PLL3_Config>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4605      	mov	r5, r0
      break;
 80095ba:	f7ff bb4e 	b.w	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095be:	2101      	movs	r1, #1
 80095c0:	1d20      	adds	r0, r4, #4
 80095c2:	f7ff fa05 	bl	80089d0 <RCCEx_PLL2_Config>
 80095c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	f47f acd1 	bne.w	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80095d0:	e748      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095d2:	2101      	movs	r1, #1
 80095d4:	1d20      	adds	r0, r4, #4
 80095d6:	f7ff f9fb 	bl	80089d0 <RCCEx_PLL2_Config>
 80095da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	2d00      	cmp	r5, #0
 80095e0:	f47f ace1 	bne.w	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80095e4:	e749      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095e6:	2101      	movs	r1, #1
 80095e8:	1d20      	adds	r0, r4, #4
 80095ea:	f7ff f9f1 	bl	80089d0 <RCCEx_PLL2_Config>
 80095ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	f47f aca4 	bne.w	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x380>
 80095f8:	e762      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 80095fa:	2603      	movs	r6, #3
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	4635      	mov	r5, r6
 8009600:	e414      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009602:	4949      	ldr	r1, [pc, #292]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009604:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009606:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800960a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800960c:	2d00      	cmp	r5, #0
 800960e:	f47f af62 	bne.w	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009612:	e57b      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009614:	4844      	ldr	r0, [pc, #272]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009616:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009618:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800961c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800961e:	2d00      	cmp	r5, #0
 8009620:	f47f adce 	bne.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8009624:	e68f      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009626:	4940      	ldr	r1, [pc, #256]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009628:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800962a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800962e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009630:	2d00      	cmp	r5, #0
 8009632:	f47f af40 	bne.w	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009636:	e69a      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009638:	2102      	movs	r1, #2
 800963a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800963e:	f7ff fa43 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009642:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	2d00      	cmp	r5, #0
 8009648:	f47f af02 	bne.w	8009450 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800964c:	e4c4      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800964e:	4936      	ldr	r1, [pc, #216]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009650:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009656:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009658:	2d00      	cmp	r5, #0
 800965a:	f47f af22 	bne.w	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800965e:	e6b0      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009660:	2102      	movs	r1, #2
 8009662:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009666:	f7ff fa2f 	bl	8008ac8 <RCCEx_PLL3_Config>
 800966a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	2d00      	cmp	r5, #0
 8009670:	f47f aef3 	bne.w	800945a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009674:	e4d0      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009676:	2102      	movs	r1, #2
 8009678:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800967c:	f7ff fa24 	bl	8008ac8 <RCCEx_PLL3_Config>
 8009680:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	2d00      	cmp	r5, #0
 8009686:	f47f aede 	bne.w	8009446 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800968a:	e4e5      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800968c:	1d20      	adds	r0, r4, #4
 800968e:	f7ff f99f 	bl	80089d0 <RCCEx_PLL2_Config>
 8009692:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	2d00      	cmp	r5, #0
 8009698:	f47f af08 	bne.w	80094ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800969c:	e67d      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800969e:	2102      	movs	r1, #2
 80096a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096a4:	f7ff fa10 	bl	8008ac8 <RCCEx_PLL3_Config>
 80096a8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80096ac:	b100      	cbz	r0, 80096b0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 80096ae:	2601      	movs	r6, #1
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	e4ef      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096b4:	2102      	movs	r1, #2
 80096b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096ba:	f7ff fa05 	bl	8008ac8 <RCCEx_PLL3_Config>
 80096be:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80096c2:	b100      	cbz	r0, 80096c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 80096c4:	2601      	movs	r6, #1
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	e4d6      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 80096ca:	f7fc fc67 	bl	8005f9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ce:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096d2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80096d6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096d8:	e004      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096da:	f7fc fc5f 	bl	8005f9c <HAL_GetTick>
 80096de:	1bc0      	subs	r0, r0, r7
 80096e0:	4548      	cmp	r0, r9
 80096e2:	d88a      	bhi.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096e4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80096e8:	079b      	lsls	r3, r3, #30
 80096ea:	d5f6      	bpl.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80096ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80096f0:	e5ba      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 80096f6:	6901      	ldr	r1, [r0, #16]
 80096f8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80096fc:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8009700:	430a      	orrs	r2, r1
 8009702:	6102      	str	r2, [r0, #16]
 8009704:	e5bb      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8009706:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009708:	462e      	mov	r6, r5
 800970a:	f7ff bb8f 	b.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800970e:	2601      	movs	r6, #1
 8009710:	4635      	mov	r5, r6
 8009712:	e449      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009714:	2601      	movs	r6, #1
 8009716:	f7ff ba8b 	b.w	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800971a:	2601      	movs	r6, #1
 800971c:	4635      	mov	r5, r6
 800971e:	e429      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8009720:	2601      	movs	r6, #1
 8009722:	4635      	mov	r5, r6
 8009724:	f7ff bb7f 	b.w	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009728:	58024400 	.word	0x58024400
 800972c:	00ffffcf 	.word	0x00ffffcf

08009730 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009730:	4b58      	ldr	r3, [pc, #352]	; (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8009732:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009734:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009736:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009738:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800973a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800973e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009742:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8009744:	d05c      	beq.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009746:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800974a:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800974e:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009752:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009756:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009758:	ee07 4a90 	vmov	s15, r4
 800975c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009760:	d003      	beq.n	800976a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8009762:	2902      	cmp	r1, #2
 8009764:	d075      	beq.n	8009852 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8009766:	2900      	cmp	r1, #0
 8009768:	d04f      	beq.n	800980a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800976a:	ee07 2a90 	vmov	s15, r2
 800976e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8009772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800977c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009784:	ee06 3a90 	vmov	s13, r3
 8009788:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800978c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009790:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009794:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009798:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800979c:	4a3d      	ldr	r2, [pc, #244]	; (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 800979e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80097a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80097a8:	ee07 3a10 	vmov	s14, r3
 80097ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80097b0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80097b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097be:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80097c8:	ee07 3a10 	vmov	s14, r3
 80097cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80097d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80097d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097dc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097e0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80097f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80097fa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80097fe:	4770      	bx	lr
 8009800:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009802:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009806:	6082      	str	r2, [r0, #8]
}
 8009808:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800980a:	6819      	ldr	r1, [r3, #0]
 800980c:	0689      	lsls	r1, r1, #26
 800980e:	d527      	bpl.n	8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009810:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009812:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009816:	4a22      	ldr	r2, [pc, #136]	; (80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009818:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800981c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009826:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009828:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800982c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009830:	ee06 2a10 	vmov	s12, r2
 8009834:	ee06 3a90 	vmov	s13, r3
 8009838:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800983c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009840:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009844:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009848:	ee76 6a85 	vadd.f32	s13, s13, s10
 800984c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009850:	e7a4      	b.n	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009852:	ee07 2a90 	vmov	s15, r2
 8009856:	eddf 6a13 	vldr	s13, [pc, #76]	; 80098a4 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800985a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800985e:	e78a      	b.n	8009776 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009860:	ee07 2a90 	vmov	s15, r2
 8009864:	ed9f 5a10 	vldr	s10, [pc, #64]	; 80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800986e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009872:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009886:	eee7 7a25 	vfma.f32	s15, s14, s11
 800988a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800988e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009892:	e783      	b.n	800979c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009894:	58024400 	.word	0x58024400
 8009898:	4a742400 	.word	0x4a742400
 800989c:	39000000 	.word	0x39000000
 80098a0:	03d09000 	.word	0x03d09000
 80098a4:	4bbebc20 	.word	0x4bbebc20
 80098a8:	4c742400 	.word	0x4c742400

080098ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098ac:	4b58      	ldr	r3, [pc, #352]	; (8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 80098ae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098b2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80098b6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098ba:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098be:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80098c0:	d05c      	beq.n	800997c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098c2:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098c6:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098ca:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098ce:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80098d2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098d4:	ee07 4a90 	vmov	s15, r4
 80098d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80098dc:	d003      	beq.n	80098e6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80098de:	2902      	cmp	r1, #2
 80098e0:	d075      	beq.n	80099ce <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80098e2:	2900      	cmp	r1, #0
 80098e4:	d04f      	beq.n	8009986 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098e6:	ee07 2a90 	vmov	s15, r2
 80098ea:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80098ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80098f8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 80098fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009900:	ee06 3a90 	vmov	s13, r3
 8009904:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009908:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800990c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009910:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009914:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009918:	4a3d      	ldr	r2, [pc, #244]	; (8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800991a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800991e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009920:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009924:	ee07 3a10 	vmov	s14, r3
 8009928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800992c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800992e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800993e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009940:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009944:	ee07 3a10 	vmov	s14, r3
 8009948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800994c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009958:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800995c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800995e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800996a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009976:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800997a:	4770      	bx	lr
 800997c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800997e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009982:	6082      	str	r2, [r0, #8]
}
 8009984:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009986:	6819      	ldr	r1, [r3, #0]
 8009988:	0689      	lsls	r1, r1, #26
 800998a:	d527      	bpl.n	80099dc <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800998c:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800998e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009992:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009994:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009998:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800999c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099a2:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099a4:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 80099a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ac:	ee06 2a10 	vmov	s12, r2
 80099b0:	ee06 3a90 	vmov	s13, r3
 80099b4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80099b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099bc:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80099c0:	eee7 6a24 	vfma.f32	s13, s14, s9
 80099c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80099c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80099cc:	e7a4      	b.n	8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099ce:	ee07 2a90 	vmov	s15, r2
 80099d2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 80099d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099da:	e78a      	b.n	80098f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099dc:	ee07 2a90 	vmov	s15, r2
 80099e0:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80099ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099ee:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a02:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009a06:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009a0e:	e783      	b.n	8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a10:	58024400 	.word	0x58024400
 8009a14:	4a742400 	.word	0x4a742400
 8009a18:	39000000 	.word	0x39000000
 8009a1c:	03d09000 	.word	0x03d09000
 8009a20:	4bbebc20 	.word	0x4bbebc20
 8009a24:	4c742400 	.word	0x4c742400

08009a28 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a28:	4b5c      	ldr	r3, [pc, #368]	; (8009b9c <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 8009a2a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a2c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a2e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a30:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009a32:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a36:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a3a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009a3c:	d05c      	beq.n	8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a3e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a42:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a46:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a4a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009a4e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a50:	ee07 4a90 	vmov	s15, r4
 8009a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009a58:	d07e      	beq.n	8009b58 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009a5a:	2902      	cmp	r1, #2
 8009a5c:	d075      	beq.n	8009b4a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	d04f      	beq.n	8009b02 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a62:	ee07 2a90 	vmov	s15, r2
 8009a66:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009a74:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	ee06 3a90 	vmov	s13, r3
 8009a80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009a84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a88:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009a8c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009a90:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009a94:	4a41      	ldr	r2, [pc, #260]	; (8009b9c <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 8009a96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009a9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009aa0:	ee07 3a10 	vmov	s14, r3
 8009aa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009aa8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009aaa:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab6:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009aba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009abc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009ac0:	ee07 3a10 	vmov	s14, r3
 8009ac4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ac8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009ad8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ada:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009af2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009af6:	4770      	bx	lr
 8009af8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009afa:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009afe:	6082      	str	r2, [r0, #8]
}
 8009b00:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	0689      	lsls	r1, r1, #26
 8009b06:	d52e      	bpl.n	8009b66 <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b08:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b0a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b0e:	4a26      	ldr	r2, [pc, #152]	; (8009ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b14:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b1e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b20:	eddf 4a20 	vldr	s9, [pc, #128]	; 8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b28:	ee06 2a10 	vmov	s12, r2
 8009b2c:	ee06 3a90 	vmov	s13, r3
 8009b30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009b34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b38:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009b3c:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009b40:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009b44:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009b48:	e7a4      	b.n	8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b4a:	ee07 2a90 	vmov	s15, r2
 8009b4e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 8009b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b56:	e78a      	b.n	8009a6e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b58:	ee07 2a90 	vmov	s15, r2
 8009b5c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b64:	e783      	b.n	8009a6e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b66:	ee07 2a90 	vmov	s15, r2
 8009b6a:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8009ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b78:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b80:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b8c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009b90:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009b98:	e77c      	b.n	8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 8009b9a:	bf00      	nop
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	4c742400 	.word	0x4c742400
 8009ba4:	39000000 	.word	0x39000000
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	4bbebc20 	.word	0x4bbebc20
 8009bb0:	4a742400 	.word	0x4a742400

08009bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bb4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009bb8:	b500      	push	{lr}
 8009bba:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bbc:	d077      	beq.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009bbe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009bc2:	d02e      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009bc4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009bc8:	f000 80cf 	beq.w	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009bcc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009bd0:	f000 8080 	beq.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009bd4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009bd8:	d05a      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009bda:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009bde:	f000 8105 	beq.w	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009be2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009be6:	f000 8110 	beq.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009bea:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009bee:	f000 80e2 	beq.w	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009bf2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009bf6:	d13a      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009bf8:	4ba9      	ldr	r3, [pc, #676]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c04:	f000 808e 	beq.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0c:	f000 812e 	beq.w	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009c10:	bb6b      	cbnz	r3, 8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c12:	4aa3      	ldr	r2, [pc, #652]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009c14:	4ba3      	ldr	r3, [pc, #652]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c16:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009c18:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009c1c:	bf18      	it	ne
 8009c1e:	4618      	movne	r0, r3
 8009c20:	e042      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009c22:	4a9f      	ldr	r2, [pc, #636]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c24:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c26:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	f000 8098 	beq.w	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c30:	d921      	bls.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009c32:	2bc0      	cmp	r3, #192	; 0xc0
 8009c34:	d037      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3a:	d118      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c3e:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c44:	0749      	lsls	r1, r1, #29
 8009c46:	d502      	bpl.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 80ae 	beq.w	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4e:	4a94      	ldr	r2, [pc, #592]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	05d0      	lsls	r0, r2, #23
 8009c54:	d503      	bpl.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5a:	f000 80fb 	beq.w	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c5e:	4a90      	ldr	r2, [pc, #576]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	0391      	lsls	r1, r2, #14
 8009c64:	d503      	bpl.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c6a:	f000 80bd 	beq.w	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009c6e:	2000      	movs	r0, #0
}
 8009c70:	b005      	add	sp, #20
 8009c72:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d04b      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009c7a:	2b40      	cmp	r3, #64	; 0x40
 8009c7c:	d1f7      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7e:	6810      	ldr	r0, [r2, #0]
 8009c80:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009c84:	d010      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c86:	a801      	add	r0, sp, #4
 8009c88:	f7ff fd52 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c8c:	9801      	ldr	r0, [sp, #4]
 8009c8e:	e00b      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c90:	4a83      	ldr	r2, [pc, #524]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c94:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9c:	d060      	beq.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c9e:	d936      	bls.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009ca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca4:	d178      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ca6:	4880      	ldr	r0, [pc, #512]	; (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009ca8:	b005      	add	sp, #20
 8009caa:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009cae:	4b7c      	ldr	r3, [pc, #496]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d8d9      	bhi.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009cba:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009d25 	.word	0x08009d25
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009ca7 	.word	0x08009ca7
 8009cd0:	08009d31 	.word	0x08009d31
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009cd4:	4a72      	ldr	r2, [pc, #456]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009cd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ce0:	d03e      	beq.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009ce2:	d937      	bls.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009ce4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ce8:	d0dd      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cee:	d1be      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009cf0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cf2:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cf8:	0752      	lsls	r2, r2, #29
 8009cfa:	d5a8      	bpl.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1a6      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d00:	4b67      	ldr	r3, [pc, #412]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d02:	486a      	ldr	r0, [pc, #424]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d0a:	40d8      	lsrs	r0, r3
 8009d0c:	e7cc      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d146      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d12:	6810      	ldr	r0, [r2, #0]
 8009d14:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d18:	d0c6      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d1a:	a801      	add	r0, sp, #4
 8009d1c:	f7ff fe84 	bl	8009a28 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d20:	9802      	ldr	r0, [sp, #8]
 8009d22:	e7c1      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d24:	4b5e      	ldr	r3, [pc, #376]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d2c:	d0bc      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d2e:	e7f4      	b.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d30:	4a5b      	ldr	r2, [pc, #364]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d32:	e783      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d34:	4b5a      	ldr	r3, [pc, #360]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d3c:	d0b4      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d3e:	a801      	add	r0, sp, #4
 8009d40:	f7ff fdb4 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d44:	9801      	ldr	r0, [sp, #4]
 8009d46:	e7af      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d48:	4b55      	ldr	r3, [pc, #340]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d4a:	6818      	ldr	r0, [r3, #0]
 8009d4c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009d50:	d0aa      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d52:	e798      	b.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0dc      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d5c:	d08f      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009d5e:	e786      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d60:	6810      	ldr	r0, [r2, #0]
 8009d62:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d66:	d09f      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d68:	e7e9      	b.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009d6a:	4a4d      	ldr	r2, [pc, #308]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d6c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d76:	d0f3      	beq.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009d78:	d806      	bhi.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0c9      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d82:	f43f af7c 	beq.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009d86:	e772      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d8c:	d08b      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d92:	f43f af53 	beq.w	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009d96:	e76a      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d9c:	d0a8      	beq.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009d9e:	e766      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da4:	f43f af6b 	beq.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009da8:	e761      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	483f      	ldr	r0, [pc, #252]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009dae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009db2:	40d8      	lsrs	r0, r3
 8009db4:	e778      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009db6:	4a3a      	ldr	r2, [pc, #232]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009db8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009dba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009dbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dc2:	d066      	beq.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009dc4:	d82f      	bhi.n	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dca:	d04f      	beq.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd0:	d131      	bne.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dd2:	4b33      	ldr	r3, [pc, #204]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009dda:	f43f af65 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dde:	a801      	add	r0, sp, #4
 8009de0:	f7ff fd64 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009de4:	9802      	ldr	r0, [sp, #8]
 8009de6:	e75f      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009de8:	482e      	ldr	r0, [pc, #184]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009dea:	e75d      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009dec:	4a2c      	ldr	r2, [pc, #176]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df8:	d02e      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dfe:	f43f af77 	beq.w	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f47f af33 	bne.w	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e08:	e739      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e0a:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009e0e:	03d2      	lsls	r2, r2, #15
 8009e10:	d589      	bpl.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e18:	f43f af46 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1c:	a801      	add	r0, sp, #4
 8009e1e:	f7ff fc87 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e22:	9803      	ldr	r0, [sp, #12]
 8009e24:	e740      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2a:	d02a      	beq.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e30:	f43f aeef 	beq.w	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009e34:	e71b      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f47f af19 	bne.w	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e3c:	f7fe fda6 	bl	800898c <HAL_RCC_GetHCLKFreq>
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e42:	4a1b      	ldr	r2, [pc, #108]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009e4a:	5cd3      	ldrb	r3, [r2, r3]
 8009e4c:	f003 031f 	and.w	r3, r3, #31
 8009e50:	40d8      	lsrs	r0, r3
          break;
 8009e52:	e729      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009e54:	4817      	ldr	r0, [pc, #92]	; (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009e56:	e727      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e58:	6810      	ldr	r0, [r2, #0]
 8009e5a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009e5e:	f43f af23 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e62:	a801      	add	r0, sp, #4
 8009e64:	f7ff fd22 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e68:	9803      	ldr	r0, [sp, #12]
 8009e6a:	e71d      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e74:	f43f af18 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e78:	a801      	add	r0, sp, #4
 8009e7a:	f7ff fc59 	bl	8009730 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e7e:	9802      	ldr	r0, [sp, #8]
 8009e80:	e712      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e82:	4a07      	ldr	r2, [pc, #28]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e86:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009e88:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009e8c:	bf18      	it	ne
 8009e8e:	4618      	movne	r0, r3
 8009e90:	e70a      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e92:	6810      	ldr	r0, [r2, #0]
 8009e94:	f010 0004 	ands.w	r0, r0, #4
 8009e98:	f43f af06 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009e9c:	e730      	b.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009e9e:	bf00      	nop
 8009ea0:	58024400 	.word	0x58024400
 8009ea4:	017d7840 	.word	0x017d7840
 8009ea8:	00bb8000 	.word	0x00bb8000
 8009eac:	03d09000 	.word	0x03d09000
 8009eb0:	0800a290 	.word	0x0800a290
 8009eb4:	003d0900 	.word	0x003d0900

08009eb8 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop

08009ebc <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8009ebc:	b318      	cbz	r0, 8009f06 <HAL_SDRAM_Init+0x4a>
{
 8009ebe:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ec0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ecc:	b1b3      	cbz	r3, 8009efc <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ece:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ed0:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ed2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ed6:	f851 0b04 	ldr.w	r0, [r1], #4
 8009eda:	f000 f851 	bl	8009f80 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009ede:	4629      	mov	r1, r5
 8009ee0:	e9d4 0200 	ldrd	r0, r2, [r4]
 8009ee4:	f000 f888 	bl	8009ff8 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8009ee8:	4a08      	ldr	r2, [pc, #32]	; (8009f0c <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009eea:	2101      	movs	r1, #1
  return HAL_OK;
 8009eec:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009eee:	6813      	ldr	r3, [r2, #0]
 8009ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ef4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ef6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009efc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009f00:	f7ff ffda 	bl	8009eb8 <HAL_SDRAM_MspInit>
 8009f04:	e7e3      	b.n	8009ece <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8009f06:	2001      	movs	r0, #1
}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	52004000 	.word	0x52004000

08009f10 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f10:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f12:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f16:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f18:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f1a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f1c:	d004      	beq.n	8009f28 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009f1e:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009f22:	2c01      	cmp	r4, #1
 8009f24:	d001      	beq.n	8009f2a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8009f26:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f2e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f30:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f34:	f000 f8ac 	bl	800a090 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f38:	6833      	ldr	r3, [r6, #0]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d003      	beq.n	8009f46 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8009f3e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009f40:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f46:	2305      	movs	r3, #5
  return HAL_OK;
 8009f48:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f4a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}

08009f50 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f50:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f52:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f56:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	b2d8      	uxtb	r0, r3
 8009f5c:	d005      	beq.n	8009f6a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009f5e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	b2dd      	uxtb	r5, r3
 8009f66:	d001      	beq.n	8009f6c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8009f68:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f6c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f6e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f74:	f000 f8a2 	bl	800a0bc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8009f78:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f7a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}

08009f80 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009f80:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f82:	6802      	ldr	r2, [r0, #0]
{
 8009f84:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009f86:	b9c3      	cbnz	r3, 8009fba <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f88:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009f8c:	684c      	ldr	r4, [r1, #4]
 8009f8e:	698e      	ldr	r6, [r1, #24]
 8009f90:	4013      	ands	r3, r2
 8009f92:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009f96:	4323      	orrs	r3, r4
 8009f98:	690c      	ldr	r4, [r1, #16]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	694a      	ldr	r2, [r1, #20]
 8009f9e:	432b      	orrs	r3, r5
 8009fa0:	69cd      	ldr	r5, [r1, #28]
 8009fa2:	4323      	orrs	r3, r4
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	4333      	orrs	r3, r6
 8009fa8:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8009fac:	432b      	orrs	r3, r5
 8009fae:	4323      	orrs	r3, r4
 8009fb0:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8009fb2:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fb4:	6003      	str	r3, [r0, #0]
}
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fba:	69cb      	ldr	r3, [r1, #28]
 8009fbc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fc0:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fc2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fc6:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 8009fca:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fcc:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fce:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fd0:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fd2:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fd4:	6842      	ldr	r2, [r0, #4]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	432b      	orrs	r3, r5
 8009fda:	690d      	ldr	r5, [r1, #16]
 8009fdc:	4323      	orrs	r3, r4
 8009fde:	4333      	orrs	r3, r6
 8009fe0:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8009fe4:	432b      	orrs	r3, r5
 8009fe6:	4323      	orrs	r3, r4
 8009fe8:	4313      	orrs	r3, r2
}
 8009fea:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009fec:	6043      	str	r3, [r0, #4]
}
 8009fee:	2000      	movs	r0, #0
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	ffff8000 	.word	0xffff8000

08009ff8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009ff8:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009ffa:	bb0a      	cbnz	r2, 800a040 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009ffc:	684c      	ldr	r4, [r1, #4]
 8009ffe:	6882      	ldr	r2, [r0, #8]
 800a000:	680d      	ldr	r5, [r1, #0]
 800a002:	1e63      	subs	r3, r4, #1
 800a004:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a008:	688c      	ldr	r4, [r1, #8]
 800a00a:	1e6e      	subs	r6, r5, #1
 800a00c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800a010:	1e65      	subs	r5, r4, #1
 800a012:	68cc      	ldr	r4, [r1, #12]
 800a014:	4333      	orrs	r3, r6
 800a016:	690a      	ldr	r2, [r1, #16]
 800a018:	1e66      	subs	r6, r4, #1
 800a01a:	694c      	ldr	r4, [r1, #20]
 800a01c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a020:	1e55      	subs	r5, r2, #1
 800a022:	698a      	ldr	r2, [r1, #24]
 800a024:	1e61      	subs	r1, r4, #1
 800a026:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800a02a:	3a01      	subs	r2, #1
 800a02c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a030:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a034:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a038:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a03a:	6083      	str	r3, [r0, #8]
}
 800a03c:	2000      	movs	r0, #0
 800a03e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a040:	6882      	ldr	r2, [r0, #8]
 800a042:	68cb      	ldr	r3, [r1, #12]
 800a044:	4c11      	ldr	r4, [pc, #68]	; (800a08c <FMC_SDRAM_Timing_Init+0x94>)
 800a046:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a048:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a04a:	4014      	ands	r4, r2
 800a04c:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a04e:	1e5e      	subs	r6, r3, #1
 800a050:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a052:	3a01      	subs	r2, #1
 800a054:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a058:	688d      	ldr	r5, [r1, #8]
 800a05a:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a05c:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a060:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a062:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a064:	68c2      	ldr	r2, [r0, #12]
 800a066:	690c      	ldr	r4, [r1, #16]
 800a068:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a06c:	6989      	ldr	r1, [r1, #24]
 800a06e:	3c01      	subs	r4, #1
 800a070:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800a074:	3901      	subs	r1, #1
 800a076:	4313      	orrs	r3, r2
 800a078:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a07c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a080:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800a084:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a086:	60c3      	str	r3, [r0, #12]
}
 800a088:	2000      	movs	r0, #0
 800a08a:	4770      	bx	lr
 800a08c:	ff0f0fff 	.word	0xff0f0fff

0800a090 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a090:	b470      	push	{r4, r5, r6}
 800a092:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a094:	68ce      	ldr	r6, [r1, #12]
 800a096:	4c08      	ldr	r4, [pc, #32]	; (800a0b8 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a098:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a09a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a09e:	6889      	ldr	r1, [r1, #8]
 800a0a0:	432b      	orrs	r3, r5
 800a0a2:	6915      	ldr	r5, [r2, #16]
 800a0a4:	3901      	subs	r1, #1
 800a0a6:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800a0aa:	402c      	ands	r4, r5
 800a0ac:	4323      	orrs	r3, r4
 800a0ae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800a0b2:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a0b4:	6113      	str	r3, [r2, #16]
}
 800a0b6:	4770      	bx	lr
 800a0b8:	ffc00000 	.word	0xffc00000

0800a0bc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a0bc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a0be:	4b05      	ldr	r3, [pc, #20]	; (800a0d4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800a0c0:	2000      	movs	r0, #0
{
 800a0c2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a0c4:	6954      	ldr	r4, [r2, #20]
 800a0c6:	4023      	ands	r3, r4
}
 800a0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a0cc:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a0d0:	6151      	str	r1, [r2, #20]
}
 800a0d2:	4770      	bx	lr
 800a0d4:	ffffc001 	.word	0xffffc001

0800a0d8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800a0d8:	4603      	mov	r3, r0
 800a0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800a0de:	4c15      	ldr	r4, [pc, #84]	; (800a134 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	4e15      	ldr	r6, [pc, #84]	; (800a138 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800a0ea:	e9d3 7200 	ldrd	r7, r2, [r3]
 800a0ee:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a0f2:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800a0f6:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a0f8:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a0fc:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800a0fe:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a100:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800a102:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800a106:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800a10a:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800a10e:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a114:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a116:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a118:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a11a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800a11c:	6a23      	ldr	r3, [r4, #32]
 800a11e:	f106 0118 	add.w	r1, r6, #24
 800a122:	4628      	mov	r0, r5
 800a124:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a128:	f106 011c 	add.w	r1, r6, #28
 800a12c:	4628      	mov	r0, r5
}
 800a12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a132:	4718      	bx	r3
 800a134:	24001628 	.word	0x24001628
 800a138:	240015e8 	.word	0x240015e8

0800a13c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800a13c:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800a13e:	4b05      	ldr	r3, [pc, #20]	; (800a154 <UTIL_LCD_SetLayer+0x18>)
 800a140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a142:	b133      	cbz	r3, 800a152 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800a144:	4d04      	ldr	r5, [pc, #16]	; (800a158 <UTIL_LCD_SetLayer+0x1c>)
 800a146:	4604      	mov	r4, r0
 800a148:	4601      	mov	r1, r0
 800a14a:	6928      	ldr	r0, [r5, #16]
 800a14c:	4798      	blx	r3
 800a14e:	b900      	cbnz	r0, 800a152 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800a150:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	24001628 	.word	0x24001628
 800a158:	240015e8 	.word	0x240015e8

0800a15c <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800a15c:	4a02      	ldr	r2, [pc, #8]	; (800a168 <UTIL_LCD_SetTextColor+0xc>)
 800a15e:	68d3      	ldr	r3, [r2, #12]
 800a160:	015b      	lsls	r3, r3, #5
 800a162:	50d0      	str	r0, [r2, r3]
}
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	240015e8 	.word	0x240015e8

0800a16c <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <UTIL_LCD_SetBackColor+0xc>)
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a174:	6058      	str	r0, [r3, #4]
}
 800a176:	4770      	bx	lr
 800a178:	240015e8 	.word	0x240015e8

0800a17c <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <UTIL_LCD_SetFont+0xc>)
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a184:	6098      	str	r0, [r3, #8]
}
 800a186:	4770      	bx	lr
 800a188:	240015e8 	.word	0x240015e8

0800a18c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a18e:	4e13      	ldr	r6, [pc, #76]	; (800a1dc <UTIL_LCD_FillRect+0x50>)
{
 800a190:	4615      	mov	r5, r2
 800a192:	b083      	sub	sp, #12
 800a194:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a196:	69f7      	ldr	r7, [r6, #28]
{
 800a198:	462b      	mov	r3, r5
 800a19a:	460a      	mov	r2, r1
 800a19c:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a19e:	2f02      	cmp	r7, #2
 800a1a0:	d008      	beq.n	800a1b4 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800a1a2:	4f0f      	ldr	r7, [pc, #60]	; (800a1e0 <UTIL_LCD_FillRect+0x54>)
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	e9cd 4500 	strd	r4, r5, [sp]
 800a1aa:	693c      	ldr	r4, [r7, #16]
 800a1ac:	6930      	ldr	r0, [r6, #16]
 800a1ae:	47a0      	blx	r4
  }
}
 800a1b0:	b003      	add	sp, #12
 800a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800a1b4:	096f      	lsrs	r7, r5, #5
 800a1b6:	9400      	str	r4, [sp, #0]
 800a1b8:	0a29      	lsrs	r1, r5, #8
 800a1ba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800a1be:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800a1c2:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	6930      	ldr	r0, [r6, #16]
 800a1ca:	433c      	orrs	r4, r7
 800a1cc:	4e04      	ldr	r6, [pc, #16]	; (800a1e0 <UTIL_LCD_FillRect+0x54>)
 800a1ce:	4325      	orrs	r5, r4
 800a1d0:	6934      	ldr	r4, [r6, #16]
 800a1d2:	9501      	str	r5, [sp, #4]
 800a1d4:	47a0      	blx	r4
}
 800a1d6:	b003      	add	sp, #12
 800a1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	240015e8 	.word	0x240015e8
 800a1e0:	24001628 	.word	0x24001628

0800a1e4 <UTIL_LCD_Clear>:
{
 800a1e4:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a1e6:	2100      	movs	r1, #0
{
 800a1e8:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a1ea:	4a05      	ldr	r2, [pc, #20]	; (800a200 <UTIL_LCD_Clear+0x1c>)
 800a1ec:	9000      	str	r0, [sp, #0]
 800a1ee:	4608      	mov	r0, r1
 800a1f0:	6993      	ldr	r3, [r2, #24]
 800a1f2:	6952      	ldr	r2, [r2, #20]
 800a1f4:	f7ff ffca 	bl	800a18c <UTIL_LCD_FillRect>
}
 800a1f8:	b003      	add	sp, #12
 800a1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1fe:	bf00      	nop
 800a200:	240015e8 	.word	0x240015e8

0800a204 <__libc_init_array>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	4d0d      	ldr	r5, [pc, #52]	; (800a23c <__libc_init_array+0x38>)
 800a208:	4c0d      	ldr	r4, [pc, #52]	; (800a240 <__libc_init_array+0x3c>)
 800a20a:	1b64      	subs	r4, r4, r5
 800a20c:	10a4      	asrs	r4, r4, #2
 800a20e:	2600      	movs	r6, #0
 800a210:	42a6      	cmp	r6, r4
 800a212:	d109      	bne.n	800a228 <__libc_init_array+0x24>
 800a214:	4d0b      	ldr	r5, [pc, #44]	; (800a244 <__libc_init_array+0x40>)
 800a216:	4c0c      	ldr	r4, [pc, #48]	; (800a248 <__libc_init_array+0x44>)
 800a218:	f000 f82e 	bl	800a278 <_init>
 800a21c:	1b64      	subs	r4, r4, r5
 800a21e:	10a4      	asrs	r4, r4, #2
 800a220:	2600      	movs	r6, #0
 800a222:	42a6      	cmp	r6, r4
 800a224:	d105      	bne.n	800a232 <__libc_init_array+0x2e>
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22c:	4798      	blx	r3
 800a22e:	3601      	adds	r6, #1
 800a230:	e7ee      	b.n	800a210 <__libc_init_array+0xc>
 800a232:	f855 3b04 	ldr.w	r3, [r5], #4
 800a236:	4798      	blx	r3
 800a238:	3601      	adds	r6, #1
 800a23a:	e7f2      	b.n	800a222 <__libc_init_array+0x1e>
 800a23c:	08013ff8 	.word	0x08013ff8
 800a240:	08013ff8 	.word	0x08013ff8
 800a244:	08013ff8 	.word	0x08013ff8
 800a248:	08013ffc 	.word	0x08013ffc

0800a24c <memcpy>:
 800a24c:	440a      	add	r2, r1
 800a24e:	4291      	cmp	r1, r2
 800a250:	f100 33ff 	add.w	r3, r0, #4294967295
 800a254:	d100      	bne.n	800a258 <memcpy+0xc>
 800a256:	4770      	bx	lr
 800a258:	b510      	push	{r4, lr}
 800a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a262:	4291      	cmp	r1, r2
 800a264:	d1f9      	bne.n	800a25a <memcpy+0xe>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <memset>:
 800a268:	4402      	add	r2, r0
 800a26a:	4603      	mov	r3, r0
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d100      	bne.n	800a272 <memset+0xa>
 800a270:	4770      	bx	lr
 800a272:	f803 1b01 	strb.w	r1, [r3], #1
 800a276:	e7f9      	b.n	800a26c <memset+0x4>

0800a278 <_init>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr

0800a284 <_fini>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	bf00      	nop
 800a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28a:	bc08      	pop	{r3}
 800a28c:	469e      	mov	lr, r3
 800a28e:	4770      	bx	lr
