
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009600  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d68  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013600  08013600  00031074  2**0
                  CONTENTS
  4 .ARM          00000000  08013600  08013600  00031074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013600  08013600  00031074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013600  08013600  00023600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013604  08013604  00023604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001074  24000000  08013608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010574  24001078  0801467c  00031078  2**3
                  ALLOC
 10 ._user_heap_stack 00014004  240115ec  0801467c  000315ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006238b  00000000  00000000  000310a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070eb  00000000  00000000  0009342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001a78f  00000000  00000000  0009a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002560  00000000  00000000  000b4ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000046a8  00000000  00000000  000b7208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048677  00000000  00000000  000bb8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030f29  00000000  00000000  00103f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c8755  00000000  00000000  00134e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002fd5a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dac  00000000  00000000  002fd5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001078 	.word	0x24001078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009880 	.word	0x08009880

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400107c 	.word	0x2400107c
 80002d4:	08009880 	.word	0x08009880

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	2400125c 	.word	0x2400125c

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2400125c 	.word	0x2400125c

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	240010a1 	.word	0x240010a1

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	2400125c 	.word	0x2400125c

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2400125c 	.word	0x2400125c

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	2400125c 	.word	0x2400125c

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2400125c 	.word	0x2400125c

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2400125c 	.word	0x2400125c

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	2400125c 	.word	0x2400125c

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	2400125c 	.word	0x2400125c

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	2400125c 	.word	0x2400125c

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	2400125c 	.word	0x2400125c

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	2400125c 	.word	0x2400125c

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	2400125c 	.word	0x2400125c

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	2400125c 	.word	0x2400125c

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	2400125c 	.word	0x2400125c

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	2400125c 	.word	0x2400125c

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	2400125c 	.word	0x2400125c

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	2400125c 	.word	0x2400125c

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	2400125c 	.word	0x2400125c

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	2400125c 	.word	0x2400125c

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	2400125c 	.word	0x2400125c

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	2400125c 	.word	0x2400125c

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	2400125c 	.word	0x2400125c

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	2400125c 	.word	0x2400125c

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	2400125c 	.word	0x2400125c

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	2400125c 	.word	0x2400125c

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	2400125c 	.word	0x2400125c

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	2400125c 	.word	0x2400125c

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	2400125c 	.word	0x2400125c

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	2400125c 	.word	0x2400125c

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	2400125c 	.word	0x2400125c

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	2400125c 	.word	0x2400125c

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	2400125c 	.word	0x2400125c

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	2400125c 	.word	0x2400125c

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	2400125c 	.word	0x2400125c

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	2400125c 	.word	0x2400125c

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	2400125c 	.word	0x2400125c

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	2400125c 	.word	0x2400125c

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	2400125c 	.word	0x2400125c

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	2400125c 	.word	0x2400125c

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	2400125c 	.word	0x2400125c

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	2400125c 	.word	0x2400125c

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	2400125c 	.word	0x2400125c

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	2400125c 	.word	0x2400125c

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	2400109e 	.word	0x2400109e

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	2400125c 	.word	0x2400125c

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	2400125c 	.word	0x2400125c

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	2400125c 	.word	0x2400125c

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	2400125c 	.word	0x2400125c

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	2400125c 	.word	0x2400125c

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	2400125c 	.word	0x2400125c

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2400125c 	.word	0x2400125c

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2400125c 	.word	0x2400125c

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2400125c 	.word	0x2400125c

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2400125c 	.word	0x2400125c

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2400125c 	.word	0x2400125c

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2400125c 	.word	0x2400125c

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	2400125c 	.word	0x2400125c

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	2400125c 	.word	0x2400125c

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	2400125c 	.word	0x2400125c

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	2400125c 	.word	0x2400125c

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	2400125c 	.word	0x2400125c

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	2400125c 	.word	0x2400125c

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	2400125c 	.word	0x2400125c

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	2400125c 	.word	0x2400125c

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2400125c 	.word	0x2400125c

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2400125c 	.word	0x2400125c

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	2400125c 	.word	0x2400125c

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2400125c 	.word	0x2400125c

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2400125c 	.word	0x2400125c

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400125c 	.word	0x2400125c

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	2400125c 	.word	0x2400125c

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	2400125c 	.word	0x2400125c

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	2400109f 	.word	0x2400109f

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	2400125c 	.word	0x2400125c

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	2400109f 	.word	0x2400109f

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fe27 	bl	800350c <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	2400125c 	.word	0x2400125c

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fe1d 	bl	800350c <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	2400125c 	.word	0x2400125c

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 fe11 	bl	800350c <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	2400125c 	.word	0x2400125c

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 fe05 	bl	800350c <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	2400125c 	.word	0x2400125c

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fdf9 	bl	800350c <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	2400125c 	.word	0x2400125c

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fded 	bl	800350c <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	2400125c 	.word	0x2400125c

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fde1 	bl	800350c <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	2400125c 	.word	0x2400125c

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fdd5 	bl	800350c <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	2400125c 	.word	0x2400125c

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fdcb 	bl	800350c <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	2400125c 	.word	0x2400125c

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fdbd 	bl	800350c <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	2400125c 	.word	0x2400125c

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fdb3 	bl	800350c <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	2400125c 	.word	0x2400125c

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fda5 	bl	800350c <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	2400125c 	.word	0x2400125c

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fd9b 	bl	800350c <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	2400125c 	.word	0x2400125c

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fd91 	bl	800350c <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	2400125c 	.word	0x2400125c

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fd87 	bl	800350c <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	2400125c 	.word	0x2400125c

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fd7d 	bl	800350c <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	2400125c 	.word	0x2400125c

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fd73 	bl	800350c <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2400125c 	.word	0x2400125c

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fd69 	bl	800350c <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400125c 	.word	0x2400125c

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fd5f 	bl	800350c <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	2400125c 	.word	0x2400125c

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fd55 	bl	800350c <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	2400125c 	.word	0x2400125c

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fd45 	bl	800350c <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	2400125c 	.word	0x2400125c

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fd33 	bl	800350c <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	2400125c 	.word	0x2400125c

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fd1f 	bl	800350c <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	2400125c 	.word	0x2400125c
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fd0d 	bl	800350c <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	2400125c 	.word	0x2400125c

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fcfb 	bl	800350c <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2400125c 	.word	0x2400125c

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fce7 	bl	800350c <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fce2 	bl	800350c <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	2400125c 	.word	0x2400125c

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fcd6 	bl	800350c <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	2400125c 	.word	0x2400125c

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fccb 	bl	800350c <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2400125c 	.word	0x2400125c

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fcb7 	bl	800350c <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fcb1 	bl	800350c <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 ffc7 	bl	8002b40 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2400125c 	.word	0x2400125c

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fca1 	bl	800350c <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fc9b 	bl	800350c <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f001 ffb1 	bl	8002b40 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	2400125c 	.word	0x2400125c

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fc8b 	bl	800350c <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fc85 	bl	800350c <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ff9b 	bl	8002b40 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	2400125c 	.word	0x2400125c

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fc75 	bl	800350c <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fc6f 	bl	800350c <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ff85 	bl	8002b40 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2400125c 	.word	0x2400125c

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fc5f 	bl	800350c <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fc59 	bl	800350c <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ff6f 	bl	8002b40 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	2400125c 	.word	0x2400125c

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fc49 	bl	800350c <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fc43 	bl	800350c <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ff59 	bl	8002b40 <concat_16bit_bigEndian>
 8000c8e:	f002 fc3d 	bl	800350c <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	2400125c 	.word	0x2400125c

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bbd1 	b.w	8003448 <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	2400125c 	.word	0x2400125c

08000cac <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <vLDs_a16_SP+0x2c>)
 8000cb0:	8960      	ldrh	r0, [r4, #10]
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	f002 fc29 	bl	800350c <ucGBMemoryRead>
 8000cba:	8963      	ldrh	r3, [r4, #10]
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	1e58      	subs	r0, r3, #1
 8000cc0:	b280      	uxth	r0, r0
 8000cc2:	f002 fc23 	bl	800350c <ucGBMemoryRead>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f001 ff39 	bl	8002b40 <concat_16bit_bigEndian>
 8000cce:	7a21      	ldrb	r1, [r4, #8]
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f002 bbb8 	b.w	8003448 <vGBMemoryWrite>
 8000cd8:	2400125c 	.word	0x2400125c

08000cdc <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <vLD_DE_A+0xc>)
 8000cde:	7859      	ldrb	r1, [r3, #1]
 8000ce0:	8898      	ldrh	r0, [r3, #4]
 8000ce2:	f002 bbb1 	b.w	8003448 <vGBMemoryWrite>
 8000ce6:	bf00      	nop
 8000ce8:	2400125c 	.word	0x2400125c

08000cec <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4c04      	ldr	r4, [pc, #16]	; (8000d00 <vLD_HLI_A+0x14>)
 8000cf0:	7861      	ldrb	r1, [r4, #1]
 8000cf2:	88e0      	ldrh	r0, [r4, #6]
 8000cf4:	f002 fba8 	bl	8003448 <vGBMemoryWrite>
 8000cf8:	88e3      	ldrh	r3, [r4, #6]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	80e3      	strh	r3, [r4, #6]
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	2400125c 	.word	0x2400125c

08000d04 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4c04      	ldr	r4, [pc, #16]	; (8000d18 <vLD_HLD_A+0x14>)
 8000d08:	7861      	ldrb	r1, [r4, #1]
 8000d0a:	88e0      	ldrh	r0, [r4, #6]
 8000d0c:	f002 fb9c 	bl	8003448 <vGBMemoryWrite>
 8000d10:	88e3      	ldrh	r3, [r4, #6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	80e3      	strh	r3, [r4, #6]
 8000d16:	bd10      	pop	{r4, pc}
 8000d18:	2400125c 	.word	0x2400125c

08000d1c <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <vLD_HL_d8+0x1c>)
 8000d1e:	8958      	ldrh	r0, [r3, #10]
 8000d20:	3801      	subs	r0, #1
 8000d22:	b510      	push	{r4, lr}
 8000d24:	88dc      	ldrh	r4, [r3, #6]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	f002 fbf0 	bl	800350c <ucGBMemoryRead>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d34:	f002 bb88 	b.w	8003448 <vGBMemoryWrite>
 8000d38:	2400125c 	.word	0x2400125c

08000d3c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_B+0xc>)
 8000d3e:	78d9      	ldrb	r1, [r3, #3]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bb81 	b.w	8003448 <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	2400125c 	.word	0x2400125c

08000d4c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_C+0xc>)
 8000d4e:	7899      	ldrb	r1, [r3, #2]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bb79 	b.w	8003448 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	2400125c 	.word	0x2400125c

08000d5c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_D+0xc>)
 8000d5e:	7959      	ldrb	r1, [r3, #5]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bb71 	b.w	8003448 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	2400125c 	.word	0x2400125c

08000d6c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_E+0xc>)
 8000d6e:	7919      	ldrb	r1, [r3, #4]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bb69 	b.w	8003448 <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	2400125c 	.word	0x2400125c

08000d7c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <vLD_HL_H+0xc>)
 8000d7e:	79d9      	ldrb	r1, [r3, #7]
 8000d80:	88d8      	ldrh	r0, [r3, #6]
 8000d82:	f002 bb61 	b.w	8003448 <vGBMemoryWrite>
 8000d86:	bf00      	nop
 8000d88:	2400125c 	.word	0x2400125c

08000d8c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <vLD_HL_L+0xc>)
 8000d8e:	7999      	ldrb	r1, [r3, #6]
 8000d90:	88d8      	ldrh	r0, [r3, #6]
 8000d92:	f002 bb59 	b.w	8003448 <vGBMemoryWrite>
 8000d96:	bf00      	nop
 8000d98:	2400125c 	.word	0x2400125c

08000d9c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <vLD_HL_A+0xc>)
 8000d9e:	7859      	ldrb	r1, [r3, #1]
 8000da0:	88d8      	ldrh	r0, [r3, #6]
 8000da2:	f002 bb51 	b.w	8003448 <vGBMemoryWrite>
 8000da6:	bf00      	nop
 8000da8:	2400125c 	.word	0x2400125c

08000dac <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4c07      	ldr	r4, [pc, #28]	; (8000dcc <vLDH_a8_A+0x20>)
 8000db0:	8960      	ldrh	r0, [r4, #10]
 8000db2:	3801      	subs	r0, #1
 8000db4:	b280      	uxth	r0, r0
 8000db6:	f002 fba9 	bl	800350c <ucGBMemoryRead>
 8000dba:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dbe:	7861      	ldrb	r1, [r4, #1]
 8000dc0:	b280      	uxth	r0, r0
 8000dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc6:	f002 bb3f 	b.w	8003448 <vGBMemoryWrite>
 8000dca:	bf00      	nop
 8000dcc:	2400125c 	.word	0x2400125c

08000dd0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <vLD_fC_A+0x10>)
 8000dd2:	7898      	ldrb	r0, [r3, #2]
 8000dd4:	7859      	ldrb	r1, [r3, #1]
 8000dd6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	f002 bb34 	b.w	8003448 <vGBMemoryWrite>
 8000de0:	2400125c 	.word	0x2400125c

08000de4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <vLD_a16_A+0x2c>)
 8000de8:	8960      	ldrh	r0, [r4, #10]
 8000dea:	3802      	subs	r0, #2
 8000dec:	b280      	uxth	r0, r0
 8000dee:	f002 fb8d 	bl	800350c <ucGBMemoryRead>
 8000df2:	8963      	ldrh	r3, [r4, #10]
 8000df4:	4605      	mov	r5, r0
 8000df6:	1e58      	subs	r0, r3, #1
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	f002 fb87 	bl	800350c <ucGBMemoryRead>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4628      	mov	r0, r5
 8000e02:	f001 fe9d 	bl	8002b40 <concat_16bit_bigEndian>
 8000e06:	7861      	ldrb	r1, [r4, #1]
 8000e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e0c:	f002 bb1c 	b.w	8003448 <vGBMemoryWrite>
 8000e10:	2400125c 	.word	0x2400125c

08000e14 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_B+0x8>)
 8000e16:	1cc8      	adds	r0, r1, #3
 8000e18:	f001 beaa 	b.w	8002b70 <v8bitRegisterINC>
 8000e1c:	2400125c 	.word	0x2400125c

08000e20 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_C+0x8>)
 8000e22:	1c88      	adds	r0, r1, #2
 8000e24:	f001 bea4 	b.w	8002b70 <v8bitRegisterINC>
 8000e28:	2400125c 	.word	0x2400125c

08000e2c <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_D+0x8>)
 8000e2e:	1d48      	adds	r0, r1, #5
 8000e30:	f001 be9e 	b.w	8002b70 <v8bitRegisterINC>
 8000e34:	2400125c 	.word	0x2400125c

08000e38 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vINC_E+0x8>)
 8000e3a:	1d08      	adds	r0, r1, #4
 8000e3c:	f001 be98 	b.w	8002b70 <v8bitRegisterINC>
 8000e40:	2400125c 	.word	0x2400125c

08000e44 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vINC_H+0x8>)
 8000e46:	1dc8      	adds	r0, r1, #7
 8000e48:	f001 be92 	b.w	8002b70 <v8bitRegisterINC>
 8000e4c:	2400125c 	.word	0x2400125c

08000e50 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vINC_L+0x8>)
 8000e52:	1d88      	adds	r0, r1, #6
 8000e54:	f001 be8c 	b.w	8002b70 <v8bitRegisterINC>
 8000e58:	2400125c 	.word	0x2400125c

08000e5c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vINC_A+0x8>)
 8000e5e:	1c48      	adds	r0, r1, #1
 8000e60:	f001 be86 	b.w	8002b70 <v8bitRegisterINC>
 8000e64:	2400125c 	.word	0x2400125c

08000e68 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_B+0x8>)
 8000e6a:	1cc8      	adds	r0, r1, #3
 8000e6c:	f001 be9e 	b.w	8002bac <v8bitRegisterDEC>
 8000e70:	2400125c 	.word	0x2400125c

08000e74 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_C+0x8>)
 8000e76:	1c88      	adds	r0, r1, #2
 8000e78:	f001 be98 	b.w	8002bac <v8bitRegisterDEC>
 8000e7c:	2400125c 	.word	0x2400125c

08000e80 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_D+0x8>)
 8000e82:	1d48      	adds	r0, r1, #5
 8000e84:	f001 be92 	b.w	8002bac <v8bitRegisterDEC>
 8000e88:	2400125c 	.word	0x2400125c

08000e8c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vDEC_E+0x8>)
 8000e8e:	1d08      	adds	r0, r1, #4
 8000e90:	f001 be8c 	b.w	8002bac <v8bitRegisterDEC>
 8000e94:	2400125c 	.word	0x2400125c

08000e98 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e98:	4901      	ldr	r1, [pc, #4]	; (8000ea0 <vDEC_H+0x8>)
 8000e9a:	1dc8      	adds	r0, r1, #7
 8000e9c:	f001 be86 	b.w	8002bac <v8bitRegisterDEC>
 8000ea0:	2400125c 	.word	0x2400125c

08000ea4 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000ea4:	4901      	ldr	r1, [pc, #4]	; (8000eac <vDEC_L+0x8>)
 8000ea6:	1d88      	adds	r0, r1, #6
 8000ea8:	f001 be80 	b.w	8002bac <v8bitRegisterDEC>
 8000eac:	2400125c 	.word	0x2400125c

08000eb0 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000eb0:	4901      	ldr	r1, [pc, #4]	; (8000eb8 <vDEC_A+0x8>)
 8000eb2:	1c48      	adds	r0, r1, #1
 8000eb4:	f001 be7a 	b.w	8002bac <v8bitRegisterDEC>
 8000eb8:	2400125c 	.word	0x2400125c

08000ebc <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000ebc:	4901      	ldr	r1, [pc, #4]	; (8000ec4 <vRLCA+0x8>)
 8000ebe:	1c48      	adds	r0, r1, #1
 8000ec0:	f001 be94 	b.w	8002bec <vGBFunctionRLCA>
 8000ec4:	2400125c 	.word	0x2400125c

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 beab 	b.w	8002c28 <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	2400125c 	.word	0x2400125c

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 bea3 	b.w	8002c28 <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	2400125c 	.word	0x2400125c

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 be9a 	b.w	8002c28 <vGBFunction16bitADD>
 8000ef4:	2400125c 	.word	0x2400125c

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 be93 	b.w	8002c28 <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	2400125c 	.word	0x2400125c

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 be7a 	b.w	8002c04 <vGBFunctionRRCA>
 8000f10:	2400125c 	.word	0x2400125c

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 beae 	b.w	8002c78 <vGBFunctionRLA>
 8000f1c:	2400125c 	.word	0x2400125c

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 beb6 	b.w	8002c94 <vGBFunctionRRA>
 8000f28:	2400125c 	.word	0x2400125c

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 fae7 	bl	800350c <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 feb4 	bl	8002cb0 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	2400125c 	.word	0x2400125c
 8000f54:	24001094 	.word	0x24001094

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 beb4 	b.w	8002cc8 <vGBFunctionDAA>
 8000f60:	2400125c 	.word	0x2400125c

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 facb 	bl	800350c <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 fed8 	bl	8002d30 <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	2400125c 	.word	0x2400125c
 8000f8c:	24001094 	.word	0x24001094

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fdd3 	bl	8002b48 <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 bdcd 	b.w	8002b48 <setbit>
 8000fae:	bf00      	nop
 8000fb0:	2400125c 	.word	0x2400125c

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 bdc6 	b.w	8002b48 <setbit>
 8000fbc:	2400125f 	.word	0x2400125f

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 bdc0 	b.w	8002b48 <setbit>
 8000fc8:	2400125e 	.word	0x2400125e

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 bdba 	b.w	8002b48 <setbit>
 8000fd4:	24001261 	.word	0x24001261

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 bdb4 	b.w	8002b48 <setbit>
 8000fe0:	24001260 	.word	0x24001260

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 bdae 	b.w	8002b48 <setbit>
 8000fec:	24001263 	.word	0x24001263

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bda8 	b.w	8002b48 <setbit>
 8000ff8:	24001262 	.word	0x24001262

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bda2 	b.w	8002b48 <setbit>
 8001004:	2400125d 	.word	0x2400125d

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bd9c 	b.w	8002b48 <setbit>
 8001010:	2400125f 	.word	0x2400125f

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bd96 	b.w	8002b48 <setbit>
 800101c:	2400125e 	.word	0x2400125e

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bd90 	b.w	8002b48 <setbit>
 8001028:	24001261 	.word	0x24001261

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bd8a 	b.w	8002b48 <setbit>
 8001034:	24001260 	.word	0x24001260

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bd84 	b.w	8002b48 <setbit>
 8001040:	24001263 	.word	0x24001263

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bd7e 	b.w	8002b48 <setbit>
 800104c:	24001262 	.word	0x24001262

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bd78 	b.w	8002b48 <setbit>
 8001058:	2400125d 	.word	0x2400125d

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bd72 	b.w	8002b48 <setbit>
 8001064:	2400125f 	.word	0x2400125f

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bd6c 	b.w	8002b48 <setbit>
 8001070:	2400125e 	.word	0x2400125e

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bd66 	b.w	8002b48 <setbit>
 800107c:	24001261 	.word	0x24001261

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bd60 	b.w	8002b48 <setbit>
 8001088:	24001260 	.word	0x24001260

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bd5a 	b.w	8002b48 <setbit>
 8001094:	24001263 	.word	0x24001263

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bd54 	b.w	8002b48 <setbit>
 80010a0:	24001262 	.word	0x24001262

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bd4e 	b.w	8002b48 <setbit>
 80010ac:	2400125d 	.word	0x2400125d

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd48 	b.w	8002b48 <setbit>
 80010b8:	2400125f 	.word	0x2400125f

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd42 	b.w	8002b48 <setbit>
 80010c4:	2400125e 	.word	0x2400125e

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd3c 	b.w	8002b48 <setbit>
 80010d0:	24001261 	.word	0x24001261

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd36 	b.w	8002b48 <setbit>
 80010dc:	24001260 	.word	0x24001260

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd30 	b.w	8002b48 <setbit>
 80010e8:	24001263 	.word	0x24001263

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd2a 	b.w	8002b48 <setbit>
 80010f4:	24001262 	.word	0x24001262

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd24 	b.w	8002b48 <setbit>
 8001100:	2400125d 	.word	0x2400125d

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd1e 	b.w	8002b48 <setbit>
 800110c:	2400125f 	.word	0x2400125f

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd18 	b.w	8002b48 <setbit>
 8001118:	2400125e 	.word	0x2400125e

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd12 	b.w	8002b48 <setbit>
 8001124:	24001261 	.word	0x24001261

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd0c 	b.w	8002b48 <setbit>
 8001130:	24001260 	.word	0x24001260

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd06 	b.w	8002b48 <setbit>
 800113c:	24001263 	.word	0x24001263

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd00 	b.w	8002b48 <setbit>
 8001148:	24001262 	.word	0x24001262

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bcfa 	b.w	8002b48 <setbit>
 8001154:	2400125d 	.word	0x2400125d

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bcf4 	b.w	8002b48 <setbit>
 8001160:	2400125f 	.word	0x2400125f

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bcee 	b.w	8002b48 <setbit>
 800116c:	2400125e 	.word	0x2400125e

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bce8 	b.w	8002b48 <setbit>
 8001178:	24001261 	.word	0x24001261

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bce2 	b.w	8002b48 <setbit>
 8001184:	24001260 	.word	0x24001260

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bcdc 	b.w	8002b48 <setbit>
 8001190:	24001263 	.word	0x24001263

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bcd6 	b.w	8002b48 <setbit>
 800119c:	24001262 	.word	0x24001262

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bcd0 	b.w	8002b48 <setbit>
 80011a8:	2400125d 	.word	0x2400125d

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bcca 	b.w	8002b48 <setbit>
 80011b4:	2400125f 	.word	0x2400125f

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bcc4 	b.w	8002b48 <setbit>
 80011c0:	2400125e 	.word	0x2400125e

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bcbe 	b.w	8002b48 <setbit>
 80011cc:	24001261 	.word	0x24001261

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bcb8 	b.w	8002b48 <setbit>
 80011d8:	24001260 	.word	0x24001260

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bcb2 	b.w	8002b48 <setbit>
 80011e4:	24001263 	.word	0x24001263

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bcac 	b.w	8002b48 <setbit>
 80011f0:	24001262 	.word	0x24001262

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bca6 	b.w	8002b48 <setbit>
 80011fc:	2400125d 	.word	0x2400125d

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bca0 	b.w	8002b48 <setbit>
 8001208:	2400125f 	.word	0x2400125f

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bc9a 	b.w	8002b48 <setbit>
 8001214:	2400125e 	.word	0x2400125e

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bc94 	b.w	8002b48 <setbit>
 8001220:	24001261 	.word	0x24001261

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bc8e 	b.w	8002b48 <setbit>
 800122c:	24001260 	.word	0x24001260

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bc88 	b.w	8002b48 <setbit>
 8001238:	24001263 	.word	0x24001263

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bc82 	b.w	8002b48 <setbit>
 8001244:	24001262 	.word	0x24001262

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bc7c 	b.w	8002b48 <setbit>
 8001250:	2400125d 	.word	0x2400125d

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f953 	bl	800350c <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fd6c 	bl	8002d48 <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	2400125c 	.word	0x2400125c
 800127c:	24001094 	.word	0x24001094

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bd6c 	b.w	8002d60 <vMemoryLocationINC>
 8001288:	2400125c 	.word	0x2400125c

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bd90 	b.w	8002db4 <vMemoryLocationDEC>
 8001294:	2400125c 	.word	0x2400125c

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fc5b 	bl	8002b58 <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fc57 	bl	8002b58 <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc49 	b.w	8002b48 <setbit>
 80012b6:	bf00      	nop
 80012b8:	2400125c 	.word	0x2400125c

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc4a 	b.w	8002b58 <resetbit>
 80012c4:	2400125f 	.word	0x2400125f

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc44 	b.w	8002b58 <resetbit>
 80012d0:	2400125e 	.word	0x2400125e

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc3e 	b.w	8002b58 <resetbit>
 80012dc:	24001261 	.word	0x24001261

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc38 	b.w	8002b58 <resetbit>
 80012e8:	24001260 	.word	0x24001260

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc32 	b.w	8002b58 <resetbit>
 80012f4:	24001263 	.word	0x24001263

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc2c 	b.w	8002b58 <resetbit>
 8001300:	24001262 	.word	0x24001262

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc26 	b.w	8002b58 <resetbit>
 800130c:	2400125d 	.word	0x2400125d

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc20 	b.w	8002b58 <resetbit>
 8001318:	2400125f 	.word	0x2400125f

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc1a 	b.w	8002b58 <resetbit>
 8001324:	2400125e 	.word	0x2400125e

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc14 	b.w	8002b58 <resetbit>
 8001330:	24001261 	.word	0x24001261

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc0e 	b.w	8002b58 <resetbit>
 800133c:	24001260 	.word	0x24001260

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc08 	b.w	8002b58 <resetbit>
 8001348:	24001263 	.word	0x24001263

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc02 	b.w	8002b58 <resetbit>
 8001354:	24001262 	.word	0x24001262

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bbfc 	b.w	8002b58 <resetbit>
 8001360:	2400125d 	.word	0x2400125d

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bbf6 	b.w	8002b58 <resetbit>
 800136c:	2400125f 	.word	0x2400125f

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bbf0 	b.w	8002b58 <resetbit>
 8001378:	2400125e 	.word	0x2400125e

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bbea 	b.w	8002b58 <resetbit>
 8001384:	24001261 	.word	0x24001261

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bbe4 	b.w	8002b58 <resetbit>
 8001390:	24001260 	.word	0x24001260

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bbde 	b.w	8002b58 <resetbit>
 800139c:	24001263 	.word	0x24001263

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bbd8 	b.w	8002b58 <resetbit>
 80013a8:	24001262 	.word	0x24001262

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bbd2 	b.w	8002b58 <resetbit>
 80013b4:	2400125d 	.word	0x2400125d

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bbcc 	b.w	8002b58 <resetbit>
 80013c0:	2400125f 	.word	0x2400125f

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bbc6 	b.w	8002b58 <resetbit>
 80013cc:	2400125e 	.word	0x2400125e

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bbc0 	b.w	8002b58 <resetbit>
 80013d8:	24001261 	.word	0x24001261

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bbba 	b.w	8002b58 <resetbit>
 80013e4:	24001260 	.word	0x24001260

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bbb4 	b.w	8002b58 <resetbit>
 80013f0:	24001263 	.word	0x24001263

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bbae 	b.w	8002b58 <resetbit>
 80013fc:	24001262 	.word	0x24001262

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bba8 	b.w	8002b58 <resetbit>
 8001408:	2400125d 	.word	0x2400125d

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bba2 	b.w	8002b58 <resetbit>
 8001414:	2400125f 	.word	0x2400125f

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bb9c 	b.w	8002b58 <resetbit>
 8001420:	2400125e 	.word	0x2400125e

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bb96 	b.w	8002b58 <resetbit>
 800142c:	24001261 	.word	0x24001261

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bb90 	b.w	8002b58 <resetbit>
 8001438:	24001260 	.word	0x24001260

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bb8a 	b.w	8002b58 <resetbit>
 8001444:	24001263 	.word	0x24001263

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bb84 	b.w	8002b58 <resetbit>
 8001450:	24001262 	.word	0x24001262

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bb7e 	b.w	8002b58 <resetbit>
 800145c:	2400125d 	.word	0x2400125d

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bb78 	b.w	8002b58 <resetbit>
 8001468:	2400125f 	.word	0x2400125f

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bb72 	b.w	8002b58 <resetbit>
 8001474:	2400125e 	.word	0x2400125e

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bb6c 	b.w	8002b58 <resetbit>
 8001480:	24001261 	.word	0x24001261

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bb66 	b.w	8002b58 <resetbit>
 800148c:	24001260 	.word	0x24001260

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bb60 	b.w	8002b58 <resetbit>
 8001498:	24001263 	.word	0x24001263

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bb5a 	b.w	8002b58 <resetbit>
 80014a4:	24001262 	.word	0x24001262

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bb54 	b.w	8002b58 <resetbit>
 80014b0:	2400125d 	.word	0x2400125d

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bb4e 	b.w	8002b58 <resetbit>
 80014bc:	2400125f 	.word	0x2400125f

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb48 	b.w	8002b58 <resetbit>
 80014c8:	2400125e 	.word	0x2400125e

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb42 	b.w	8002b58 <resetbit>
 80014d4:	24001261 	.word	0x24001261

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb3c 	b.w	8002b58 <resetbit>
 80014e0:	24001260 	.word	0x24001260

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb36 	b.w	8002b58 <resetbit>
 80014ec:	24001263 	.word	0x24001263

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb30 	b.w	8002b58 <resetbit>
 80014f8:	24001262 	.word	0x24001262

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb2a 	b.w	8002b58 <resetbit>
 8001504:	2400125d 	.word	0x2400125d

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb24 	b.w	8002b58 <resetbit>
 8001510:	2400125f 	.word	0x2400125f

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb1e 	b.w	8002b58 <resetbit>
 800151c:	2400125e 	.word	0x2400125e

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb18 	b.w	8002b58 <resetbit>
 8001528:	24001261 	.word	0x24001261

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb12 	b.w	8002b58 <resetbit>
 8001534:	24001260 	.word	0x24001260

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb0c 	b.w	8002b58 <resetbit>
 8001540:	24001263 	.word	0x24001263

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb06 	b.w	8002b58 <resetbit>
 800154c:	24001262 	.word	0x24001262

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb00 	b.w	8002b58 <resetbit>
 8001558:	2400125d 	.word	0x2400125d

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f001 ffcf 	bl	800350c <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fc46 	bl	8002e04 <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	2400125c 	.word	0x2400125c
 8001584:	24001094 	.word	0x24001094

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bc45 	b.w	8002e1c <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	2400125c 	.word	0x2400125c

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc3d 	b.w	8002e1c <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	2400125c 	.word	0x2400125c

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc35 	b.w	8002e1c <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	2400125c 	.word	0x2400125c

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc2d 	b.w	8002e1c <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	2400125c 	.word	0x2400125c

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc25 	b.w	8002e1c <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	2400125c 	.word	0x2400125c

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc1d 	b.w	8002e1c <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	2400125c 	.word	0x2400125c

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f001 ff8d 	bl	800350c <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc0e 	b.w	8002e1c <vGBFunctionADD>
 8001600:	2400125c 	.word	0x2400125c

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc06 	b.w	8002e1c <vGBFunctionADD>
 8001610:	2400125c 	.word	0x2400125c

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f001 ff75 	bl	800350c <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bbf6 	b.w	8002e1c <vGBFunctionADD>
 8001630:	2400125c 	.word	0x2400125c

08001634 <vADC_A_d8>:
 8001634:	f7ff bfee 	b.w	8001614 <vADD_A_d8>

08001638 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001638:	4902      	ldr	r1, [pc, #8]	; (8001644 <vADC_A_B+0xc>)
 800163a:	78ca      	ldrb	r2, [r1, #3]
 800163c:	1c48      	adds	r0, r1, #1
 800163e:	f001 bc11 	b.w	8002e64 <vGBFunctionADC>
 8001642:	bf00      	nop
 8001644:	2400125c 	.word	0x2400125c

08001648 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001648:	4902      	ldr	r1, [pc, #8]	; (8001654 <vADC_A_C+0xc>)
 800164a:	788a      	ldrb	r2, [r1, #2]
 800164c:	1c48      	adds	r0, r1, #1
 800164e:	f001 bc09 	b.w	8002e64 <vGBFunctionADC>
 8001652:	bf00      	nop
 8001654:	2400125c 	.word	0x2400125c

08001658 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001658:	4902      	ldr	r1, [pc, #8]	; (8001664 <vADC_A_D+0xc>)
 800165a:	794a      	ldrb	r2, [r1, #5]
 800165c:	1c48      	adds	r0, r1, #1
 800165e:	f001 bc01 	b.w	8002e64 <vGBFunctionADC>
 8001662:	bf00      	nop
 8001664:	2400125c 	.word	0x2400125c

08001668 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001668:	4902      	ldr	r1, [pc, #8]	; (8001674 <vADC_A_E+0xc>)
 800166a:	790a      	ldrb	r2, [r1, #4]
 800166c:	1c48      	adds	r0, r1, #1
 800166e:	f001 bbf9 	b.w	8002e64 <vGBFunctionADC>
 8001672:	bf00      	nop
 8001674:	2400125c 	.word	0x2400125c

08001678 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001678:	4902      	ldr	r1, [pc, #8]	; (8001684 <vADC_A_H+0xc>)
 800167a:	79ca      	ldrb	r2, [r1, #7]
 800167c:	1c48      	adds	r0, r1, #1
 800167e:	f001 bbf1 	b.w	8002e64 <vGBFunctionADC>
 8001682:	bf00      	nop
 8001684:	2400125c 	.word	0x2400125c

08001688 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001688:	4902      	ldr	r1, [pc, #8]	; (8001694 <vADC_A_L+0xc>)
 800168a:	798a      	ldrb	r2, [r1, #6]
 800168c:	1c48      	adds	r0, r1, #1
 800168e:	f001 bbe9 	b.w	8002e64 <vGBFunctionADC>
 8001692:	bf00      	nop
 8001694:	2400125c 	.word	0x2400125c

08001698 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001698:	b510      	push	{r4, lr}
 800169a:	4c05      	ldr	r4, [pc, #20]	; (80016b0 <vADC_A_HL+0x18>)
 800169c:	88e0      	ldrh	r0, [r4, #6]
 800169e:	f001 ff35 	bl	800350c <ucGBMemoryRead>
 80016a2:	4621      	mov	r1, r4
 80016a4:	4602      	mov	r2, r0
 80016a6:	1c60      	adds	r0, r4, #1
 80016a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ac:	f001 bbda 	b.w	8002e64 <vGBFunctionADC>
 80016b0:	2400125c 	.word	0x2400125c

080016b4 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <vADC_A_A+0xc>)
 80016b6:	4601      	mov	r1, r0
 80016b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016bc:	f001 bbd2 	b.w	8002e64 <vGBFunctionADC>
 80016c0:	2400125c 	.word	0x2400125c

080016c4 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016c4:	4902      	ldr	r1, [pc, #8]	; (80016d0 <vSUB_B+0xc>)
 80016c6:	78ca      	ldrb	r2, [r1, #3]
 80016c8:	1c48      	adds	r0, r1, #1
 80016ca:	f001 bbf1 	b.w	8002eb0 <vGBFunctionSUB>
 80016ce:	bf00      	nop
 80016d0:	2400125c 	.word	0x2400125c

080016d4 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016d4:	4902      	ldr	r1, [pc, #8]	; (80016e0 <vSUB_C+0xc>)
 80016d6:	788a      	ldrb	r2, [r1, #2]
 80016d8:	1c48      	adds	r0, r1, #1
 80016da:	f001 bbe9 	b.w	8002eb0 <vGBFunctionSUB>
 80016de:	bf00      	nop
 80016e0:	2400125c 	.word	0x2400125c

080016e4 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80016e4:	4902      	ldr	r1, [pc, #8]	; (80016f0 <vSUB_D+0xc>)
 80016e6:	794a      	ldrb	r2, [r1, #5]
 80016e8:	1c48      	adds	r0, r1, #1
 80016ea:	f001 bbe1 	b.w	8002eb0 <vGBFunctionSUB>
 80016ee:	bf00      	nop
 80016f0:	2400125c 	.word	0x2400125c

080016f4 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80016f4:	4902      	ldr	r1, [pc, #8]	; (8001700 <vSUB_E+0xc>)
 80016f6:	790a      	ldrb	r2, [r1, #4]
 80016f8:	1c48      	adds	r0, r1, #1
 80016fa:	f001 bbd9 	b.w	8002eb0 <vGBFunctionSUB>
 80016fe:	bf00      	nop
 8001700:	2400125c 	.word	0x2400125c

08001704 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001704:	4902      	ldr	r1, [pc, #8]	; (8001710 <vSUB_H+0xc>)
 8001706:	79ca      	ldrb	r2, [r1, #7]
 8001708:	1c48      	adds	r0, r1, #1
 800170a:	f001 bbd1 	b.w	8002eb0 <vGBFunctionSUB>
 800170e:	bf00      	nop
 8001710:	2400125c 	.word	0x2400125c

08001714 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001714:	4902      	ldr	r1, [pc, #8]	; (8001720 <vSUB_L+0xc>)
 8001716:	798a      	ldrb	r2, [r1, #6]
 8001718:	1c48      	adds	r0, r1, #1
 800171a:	f001 bbc9 	b.w	8002eb0 <vGBFunctionSUB>
 800171e:	bf00      	nop
 8001720:	2400125c 	.word	0x2400125c

08001724 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001724:	b510      	push	{r4, lr}
 8001726:	4c05      	ldr	r4, [pc, #20]	; (800173c <vSUB_HL+0x18>)
 8001728:	88e0      	ldrh	r0, [r4, #6]
 800172a:	f001 feef 	bl	800350c <ucGBMemoryRead>
 800172e:	4621      	mov	r1, r4
 8001730:	4602      	mov	r2, r0
 8001732:	1c60      	adds	r0, r4, #1
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001738:	f001 bbba 	b.w	8002eb0 <vGBFunctionSUB>
 800173c:	2400125c 	.word	0x2400125c

08001740 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <vSUB_A+0xc>)
 8001742:	4601      	mov	r1, r0
 8001744:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001748:	f001 bbb2 	b.w	8002eb0 <vGBFunctionSUB>
 800174c:	2400125c 	.word	0x2400125c

08001750 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001750:	b510      	push	{r4, lr}
 8001752:	4c06      	ldr	r4, [pc, #24]	; (800176c <vSUB_d8+0x1c>)
 8001754:	8960      	ldrh	r0, [r4, #10]
 8001756:	3801      	subs	r0, #1
 8001758:	b280      	uxth	r0, r0
 800175a:	f001 fed7 	bl	800350c <ucGBMemoryRead>
 800175e:	4621      	mov	r1, r4
 8001760:	4602      	mov	r2, r0
 8001762:	1c60      	adds	r0, r4, #1
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001768:	f001 bba2 	b.w	8002eb0 <vGBFunctionSUB>
 800176c:	2400125c 	.word	0x2400125c

08001770 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001770:	4902      	ldr	r1, [pc, #8]	; (800177c <vSBC_A_B+0xc>)
 8001772:	78ca      	ldrb	r2, [r1, #3]
 8001774:	1c48      	adds	r0, r1, #1
 8001776:	f001 bbd1 	b.w	8002f1c <vGBFunctionSBC>
 800177a:	bf00      	nop
 800177c:	2400125c 	.word	0x2400125c

08001780 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001780:	4902      	ldr	r1, [pc, #8]	; (800178c <vSBC_A_C+0xc>)
 8001782:	788a      	ldrb	r2, [r1, #2]
 8001784:	1c48      	adds	r0, r1, #1
 8001786:	f001 bbc9 	b.w	8002f1c <vGBFunctionSBC>
 800178a:	bf00      	nop
 800178c:	2400125c 	.word	0x2400125c

08001790 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001790:	4902      	ldr	r1, [pc, #8]	; (800179c <vSBC_A_D+0xc>)
 8001792:	794a      	ldrb	r2, [r1, #5]
 8001794:	1c48      	adds	r0, r1, #1
 8001796:	f001 bbc1 	b.w	8002f1c <vGBFunctionSBC>
 800179a:	bf00      	nop
 800179c:	2400125c 	.word	0x2400125c

080017a0 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017a0:	4902      	ldr	r1, [pc, #8]	; (80017ac <vSBC_A_E+0xc>)
 80017a2:	790a      	ldrb	r2, [r1, #4]
 80017a4:	1c48      	adds	r0, r1, #1
 80017a6:	f001 bbb9 	b.w	8002f1c <vGBFunctionSBC>
 80017aa:	bf00      	nop
 80017ac:	2400125c 	.word	0x2400125c

080017b0 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017b0:	4902      	ldr	r1, [pc, #8]	; (80017bc <vSBC_A_H+0xc>)
 80017b2:	79ca      	ldrb	r2, [r1, #7]
 80017b4:	1c48      	adds	r0, r1, #1
 80017b6:	f001 bbb1 	b.w	8002f1c <vGBFunctionSBC>
 80017ba:	bf00      	nop
 80017bc:	2400125c 	.word	0x2400125c

080017c0 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017c0:	4902      	ldr	r1, [pc, #8]	; (80017cc <vSBC_A_L+0xc>)
 80017c2:	798a      	ldrb	r2, [r1, #6]
 80017c4:	1c48      	adds	r0, r1, #1
 80017c6:	f001 bba9 	b.w	8002f1c <vGBFunctionSBC>
 80017ca:	bf00      	nop
 80017cc:	2400125c 	.word	0x2400125c

080017d0 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4c05      	ldr	r4, [pc, #20]	; (80017e8 <vSBC_A_HL+0x18>)
 80017d4:	88e0      	ldrh	r0, [r4, #6]
 80017d6:	f001 fe99 	bl	800350c <ucGBMemoryRead>
 80017da:	4621      	mov	r1, r4
 80017dc:	4602      	mov	r2, r0
 80017de:	1c60      	adds	r0, r4, #1
 80017e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e4:	f001 bb9a 	b.w	8002f1c <vGBFunctionSBC>
 80017e8:	2400125c 	.word	0x2400125c

080017ec <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <vSBC_A_A+0xc>)
 80017ee:	4601      	mov	r1, r0
 80017f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80017f4:	f001 bb92 	b.w	8002f1c <vGBFunctionSBC>
 80017f8:	2400125c 	.word	0x2400125c

080017fc <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4c06      	ldr	r4, [pc, #24]	; (8001818 <vSBC_A_d8+0x1c>)
 8001800:	8960      	ldrh	r0, [r4, #10]
 8001802:	3801      	subs	r0, #1
 8001804:	b280      	uxth	r0, r0
 8001806:	f001 fe81 	bl	800350c <ucGBMemoryRead>
 800180a:	4621      	mov	r1, r4
 800180c:	4602      	mov	r2, r0
 800180e:	1c60      	adds	r0, r4, #1
 8001810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001814:	f001 bb82 	b.w	8002f1c <vGBFunctionSBC>
 8001818:	2400125c 	.word	0x2400125c

0800181c <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 800181c:	4902      	ldr	r1, [pc, #8]	; (8001828 <vCP_B+0xc>)
 800181e:	78ca      	ldrb	r2, [r1, #3]
 8001820:	7848      	ldrb	r0, [r1, #1]
 8001822:	f001 bbaf 	b.w	8002f84 <vGBFunctionCP>
 8001826:	bf00      	nop
 8001828:	2400125c 	.word	0x2400125c

0800182c <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 800182c:	4902      	ldr	r1, [pc, #8]	; (8001838 <vCP_C+0xc>)
 800182e:	788a      	ldrb	r2, [r1, #2]
 8001830:	7848      	ldrb	r0, [r1, #1]
 8001832:	f001 bba7 	b.w	8002f84 <vGBFunctionCP>
 8001836:	bf00      	nop
 8001838:	2400125c 	.word	0x2400125c

0800183c <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 800183c:	4902      	ldr	r1, [pc, #8]	; (8001848 <vCP_D+0xc>)
 800183e:	794a      	ldrb	r2, [r1, #5]
 8001840:	7848      	ldrb	r0, [r1, #1]
 8001842:	f001 bb9f 	b.w	8002f84 <vGBFunctionCP>
 8001846:	bf00      	nop
 8001848:	2400125c 	.word	0x2400125c

0800184c <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 800184c:	4902      	ldr	r1, [pc, #8]	; (8001858 <vCP_E+0xc>)
 800184e:	790a      	ldrb	r2, [r1, #4]
 8001850:	7848      	ldrb	r0, [r1, #1]
 8001852:	f001 bb97 	b.w	8002f84 <vGBFunctionCP>
 8001856:	bf00      	nop
 8001858:	2400125c 	.word	0x2400125c

0800185c <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 800185c:	4902      	ldr	r1, [pc, #8]	; (8001868 <vCP_H+0xc>)
 800185e:	79ca      	ldrb	r2, [r1, #7]
 8001860:	7848      	ldrb	r0, [r1, #1]
 8001862:	f001 bb8f 	b.w	8002f84 <vGBFunctionCP>
 8001866:	bf00      	nop
 8001868:	2400125c 	.word	0x2400125c

0800186c <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 800186c:	4902      	ldr	r1, [pc, #8]	; (8001878 <vCP_L+0xc>)
 800186e:	798a      	ldrb	r2, [r1, #6]
 8001870:	7848      	ldrb	r0, [r1, #1]
 8001872:	f001 bb87 	b.w	8002f84 <vGBFunctionCP>
 8001876:	bf00      	nop
 8001878:	2400125c 	.word	0x2400125c

0800187c <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4c06      	ldr	r4, [pc, #24]	; (8001898 <vCP_HL+0x1c>)
 8001880:	7865      	ldrb	r5, [r4, #1]
 8001882:	88e0      	ldrh	r0, [r4, #6]
 8001884:	f001 fe42 	bl	800350c <ucGBMemoryRead>
 8001888:	4621      	mov	r1, r4
 800188a:	4602      	mov	r2, r0
 800188c:	4628      	mov	r0, r5
 800188e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001892:	f001 bb77 	b.w	8002f84 <vGBFunctionCP>
 8001896:	bf00      	nop
 8001898:	2400125c 	.word	0x2400125c

0800189c <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 800189c:	4902      	ldr	r1, [pc, #8]	; (80018a8 <vCP_A+0xc>)
 800189e:	784a      	ldrb	r2, [r1, #1]
 80018a0:	4610      	mov	r0, r2
 80018a2:	f001 bb6f 	b.w	8002f84 <vGBFunctionCP>
 80018a6:	bf00      	nop
 80018a8:	2400125c 	.word	0x2400125c

080018ac <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4c07      	ldr	r4, [pc, #28]	; (80018cc <vCP_d8+0x20>)
 80018b0:	8960      	ldrh	r0, [r4, #10]
 80018b2:	7865      	ldrb	r5, [r4, #1]
 80018b4:	3801      	subs	r0, #1
 80018b6:	b280      	uxth	r0, r0
 80018b8:	f001 fe28 	bl	800350c <ucGBMemoryRead>
 80018bc:	4621      	mov	r1, r4
 80018be:	4602      	mov	r2, r0
 80018c0:	4628      	mov	r0, r5
 80018c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c6:	f001 bb5d 	b.w	8002f84 <vGBFunctionCP>
 80018ca:	bf00      	nop
 80018cc:	2400125c 	.word	0x2400125c

080018d0 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018d0:	4901      	ldr	r1, [pc, #4]	; (80018d8 <vRET+0x8>)
 80018d2:	1e88      	subs	r0, r1, #2
 80018d4:	f001 bb74 	b.w	8002fc0 <vGBFunctionRET>
 80018d8:	24001266 	.word	0x24001266

080018dc <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <vRETI+0x10>)
 80018de:	2201      	movs	r2, #1
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <vRETI+0x14>)
 80018e2:	1e88      	subs	r0, r1, #2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	f001 bb6b 	b.w	8002fc0 <vGBFunctionRET>
 80018ea:	bf00      	nop
 80018ec:	24001266 	.word	0x24001266
 80018f0:	2400109f 	.word	0x2400109f

080018f4 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80018f4:	4901      	ldr	r1, [pc, #4]	; (80018fc <vPOP_BC+0x8>)
 80018f6:	1d88      	adds	r0, r1, #6
 80018f8:	f001 bb76 	b.w	8002fe8 <vGBFunctionPOP>
 80018fc:	2400125e 	.word	0x2400125e

08001900 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 8001900:	4901      	ldr	r1, [pc, #4]	; (8001908 <vPOP_DE+0x8>)
 8001902:	1d08      	adds	r0, r1, #4
 8001904:	f001 bb70 	b.w	8002fe8 <vGBFunctionPOP>
 8001908:	24001260 	.word	0x24001260

0800190c <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 800190c:	4901      	ldr	r1, [pc, #4]	; (8001914 <vPOP_HL+0x8>)
 800190e:	1c88      	adds	r0, r1, #2
 8001910:	f001 bb6a 	b.w	8002fe8 <vGBFunctionPOP>
 8001914:	24001262 	.word	0x24001262

08001918 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001918:	b510      	push	{r4, lr}
 800191a:	4c05      	ldr	r4, [pc, #20]	; (8001930 <vPOP_AF+0x18>)
 800191c:	4621      	mov	r1, r4
 800191e:	f104 0008 	add.w	r0, r4, #8
 8001922:	f001 fb61 	bl	8002fe8 <vGBFunctionPOP>
 8001926:	8823      	ldrh	r3, [r4, #0]
 8001928:	f023 030f 	bic.w	r3, r3, #15
 800192c:	8023      	strh	r3, [r4, #0]
 800192e:	bd10      	pop	{r4, pc}
 8001930:	2400125c 	.word	0x2400125c

08001934 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	4d0d      	ldr	r5, [pc, #52]	; (800196c <vJP_NZ_a16+0x38>)
 8001938:	8968      	ldrh	r0, [r5, #10]
 800193a:	462c      	mov	r4, r5
 800193c:	3802      	subs	r0, #2
 800193e:	b280      	uxth	r0, r0
 8001940:	f001 fde4 	bl	800350c <ucGBMemoryRead>
 8001944:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001948:	4606      	mov	r6, r0
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	b280      	uxth	r0, r0
 800194e:	f001 fddd 	bl	800350c <ucGBMemoryRead>
 8001952:	4601      	mov	r1, r0
 8001954:	4630      	mov	r0, r6
 8001956:	f001 f8f3 	bl	8002b40 <concat_16bit_bigEndian>
 800195a:	4629      	mov	r1, r5
 800195c:	4602      	mov	r2, r0
 800195e:	4620      	mov	r0, r4
 8001960:	f001 fb44 	bl	8002fec <vGBFunctionJP_NZ_a16>
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <vJP_NZ_a16+0x3c>)
 8001966:	7018      	strb	r0, [r3, #0]
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	bf00      	nop
 800196c:	2400125c 	.word	0x2400125c
 8001970:	24001094 	.word	0x24001094

08001974 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <vCALL_NZ_a16+0x14>)
 8001976:	b508      	push	{r3, lr}
 8001978:	f1a2 0108 	sub.w	r1, r2, #8
 800197c:	1c90      	adds	r0, r2, #2
 800197e:	f001 fb51 	bl	8003024 <vGBFunctionCALL_NZ_a16>
 8001982:	4b02      	ldr	r3, [pc, #8]	; (800198c <vCALL_NZ_a16+0x18>)
 8001984:	7018      	strb	r0, [r3, #0]
 8001986:	bd08      	pop	{r3, pc}
 8001988:	24001264 	.word	0x24001264
 800198c:	24001094 	.word	0x24001094

08001990 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001990:	4901      	ldr	r1, [pc, #4]	; (8001998 <vPUSH_BC+0x8>)
 8001992:	1d88      	adds	r0, r1, #6
 8001994:	f001 bb32 	b.w	8002ffc <vGBFunctionPUSH>
 8001998:	2400125e 	.word	0x2400125e

0800199c <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 800199c:	b510      	push	{r4, lr}
 800199e:	4c04      	ldr	r4, [pc, #16]	; (80019b0 <vRST_00H+0x14>)
 80019a0:	4621      	mov	r1, r4
 80019a2:	1ea0      	subs	r0, r4, #2
 80019a4:	f001 fb2a 	bl	8002ffc <vGBFunctionPUSH>
 80019a8:	3c0a      	subs	r4, #10
 80019aa:	2300      	movs	r3, #0
 80019ac:	8163      	strh	r3, [r4, #10]
 80019ae:	bd10      	pop	{r4, pc}
 80019b0:	24001266 	.word	0x24001266

080019b4 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019b4:	490b      	ldr	r1, [pc, #44]	; (80019e4 <vCALL_a16+0x30>)
 80019b6:	b538      	push	{r3, r4, r5, lr}
 80019b8:	460c      	mov	r4, r1
 80019ba:	1e88      	subs	r0, r1, #2
 80019bc:	f001 fb1e 	bl	8002ffc <vGBFunctionPUSH>
 80019c0:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019c4:	3802      	subs	r0, #2
 80019c6:	b280      	uxth	r0, r0
 80019c8:	f001 fda0 	bl	800350c <ucGBMemoryRead>
 80019cc:	8963      	ldrh	r3, [r4, #10]
 80019ce:	4605      	mov	r5, r0
 80019d0:	1e58      	subs	r0, r3, #1
 80019d2:	b280      	uxth	r0, r0
 80019d4:	f001 fd9a 	bl	800350c <ucGBMemoryRead>
 80019d8:	4601      	mov	r1, r0
 80019da:	4628      	mov	r0, r5
 80019dc:	f001 f8b0 	bl	8002b40 <concat_16bit_bigEndian>
 80019e0:	8160      	strh	r0, [r4, #10]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	24001266 	.word	0x24001266

080019e8 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4c04      	ldr	r4, [pc, #16]	; (80019fc <vRST_08H+0x14>)
 80019ec:	4621      	mov	r1, r4
 80019ee:	1ea0      	subs	r0, r4, #2
 80019f0:	f001 fb04 	bl	8002ffc <vGBFunctionPUSH>
 80019f4:	2308      	movs	r3, #8
 80019f6:	8023      	strh	r3, [r4, #0]
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	bf00      	nop
 80019fc:	24001266 	.word	0x24001266

08001a00 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a00:	4901      	ldr	r1, [pc, #4]	; (8001a08 <vPUSH_DE+0x8>)
 8001a02:	1d08      	adds	r0, r1, #4
 8001a04:	f001 bafa 	b.w	8002ffc <vGBFunctionPUSH>
 8001a08:	24001260 	.word	0x24001260

08001a0c <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4c04      	ldr	r4, [pc, #16]	; (8001a20 <vRST_10H+0x14>)
 8001a10:	4621      	mov	r1, r4
 8001a12:	1ea0      	subs	r0, r4, #2
 8001a14:	f001 faf2 	bl	8002ffc <vGBFunctionPUSH>
 8001a18:	2310      	movs	r3, #16
 8001a1a:	8023      	strh	r3, [r4, #0]
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	bf00      	nop
 8001a20:	24001266 	.word	0x24001266

08001a24 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4c04      	ldr	r4, [pc, #16]	; (8001a38 <vRST_18H+0x14>)
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1ea0      	subs	r0, r4, #2
 8001a2c:	f001 fae6 	bl	8002ffc <vGBFunctionPUSH>
 8001a30:	2318      	movs	r3, #24
 8001a32:	8023      	strh	r3, [r4, #0]
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	24001266 	.word	0x24001266

08001a3c <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a3c:	4901      	ldr	r1, [pc, #4]	; (8001a44 <vPUSH_HL+0x8>)
 8001a3e:	1c88      	adds	r0, r1, #2
 8001a40:	f001 badc 	b.w	8002ffc <vGBFunctionPUSH>
 8001a44:	24001262 	.word	0x24001262

08001a48 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4c04      	ldr	r4, [pc, #16]	; (8001a5c <vRST20H+0x14>)
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	1ea0      	subs	r0, r4, #2
 8001a50:	f001 fad4 	bl	8002ffc <vGBFunctionPUSH>
 8001a54:	2320      	movs	r3, #32
 8001a56:	8023      	strh	r3, [r4, #0]
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24001266 	.word	0x24001266

08001a60 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4c04      	ldr	r4, [pc, #16]	; (8001a74 <vRST_28H+0x14>)
 8001a64:	4621      	mov	r1, r4
 8001a66:	1ea0      	subs	r0, r4, #2
 8001a68:	f001 fac8 	bl	8002ffc <vGBFunctionPUSH>
 8001a6c:	2328      	movs	r3, #40	; 0x28
 8001a6e:	8023      	strh	r3, [r4, #0]
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	24001266 	.word	0x24001266

08001a78 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a78:	4902      	ldr	r1, [pc, #8]	; (8001a84 <vPUSH_AF+0xc>)
 8001a7a:	f101 0008 	add.w	r0, r1, #8
 8001a7e:	f001 babd 	b.w	8002ffc <vGBFunctionPUSH>
 8001a82:	bf00      	nop
 8001a84:	2400125c 	.word	0x2400125c

08001a88 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4c04      	ldr	r4, [pc, #16]	; (8001a9c <vRST_30H+0x14>)
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	1ea0      	subs	r0, r4, #2
 8001a90:	f001 fab4 	bl	8002ffc <vGBFunctionPUSH>
 8001a94:	2330      	movs	r3, #48	; 0x30
 8001a96:	8023      	strh	r3, [r4, #0]
 8001a98:	bd10      	pop	{r4, pc}
 8001a9a:	bf00      	nop
 8001a9c:	24001266 	.word	0x24001266

08001aa0 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4c04      	ldr	r4, [pc, #16]	; (8001ab4 <vRST_38H+0x14>)
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	1ea0      	subs	r0, r4, #2
 8001aa8:	f001 faa8 	bl	8002ffc <vGBFunctionPUSH>
 8001aac:	2338      	movs	r3, #56	; 0x38
 8001aae:	8023      	strh	r3, [r4, #0]
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	bf00      	nop
 8001ab4:	24001266 	.word	0x24001266

08001ab8 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4d0d      	ldr	r5, [pc, #52]	; (8001af0 <vJP_Z_a16+0x38>)
 8001abc:	8968      	ldrh	r0, [r5, #10]
 8001abe:	462c      	mov	r4, r5
 8001ac0:	3802      	subs	r0, #2
 8001ac2:	b280      	uxth	r0, r0
 8001ac4:	f001 fd22 	bl	800350c <ucGBMemoryRead>
 8001ac8:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001acc:	4606      	mov	r6, r0
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	b280      	uxth	r0, r0
 8001ad2:	f001 fd1b 	bl	800350c <ucGBMemoryRead>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f001 f831 	bl	8002b40 <concat_16bit_bigEndian>
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f001 faba 	bl	800305c <vGBFunctionJP_Z_a16>
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <vJP_Z_a16+0x3c>)
 8001aea:	7018      	strb	r0, [r3, #0]
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	bf00      	nop
 8001af0:	2400125c 	.word	0x2400125c
 8001af4:	24001094 	.word	0x24001094

08001af8 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <vCALL_Z_a16+0x14>)
 8001afa:	b508      	push	{r3, lr}
 8001afc:	f1a2 0108 	sub.w	r1, r2, #8
 8001b00:	1c90      	adds	r0, r2, #2
 8001b02:	f001 fab3 	bl	800306c <vGBFunctionCALL_Z_a16>
 8001b06:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vCALL_Z_a16+0x18>)
 8001b08:	7018      	strb	r0, [r3, #0]
 8001b0a:	bd08      	pop	{r3, pc}
 8001b0c:	24001264 	.word	0x24001264
 8001b10:	24001094 	.word	0x24001094

08001b14 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4d0d      	ldr	r5, [pc, #52]	; (8001b4c <vJP_NC_a16+0x38>)
 8001b18:	8968      	ldrh	r0, [r5, #10]
 8001b1a:	462c      	mov	r4, r5
 8001b1c:	3802      	subs	r0, #2
 8001b1e:	b280      	uxth	r0, r0
 8001b20:	f001 fcf4 	bl	800350c <ucGBMemoryRead>
 8001b24:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b28:	4606      	mov	r6, r0
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	b280      	uxth	r0, r0
 8001b2e:	f001 fced 	bl	800350c <ucGBMemoryRead>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4630      	mov	r0, r6
 8001b36:	f001 f803 	bl	8002b40 <concat_16bit_bigEndian>
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f001 fab0 	bl	80030a4 <vGBFunctionJP_NC_a16>
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <vJP_NC_a16+0x3c>)
 8001b46:	7018      	strb	r0, [r3, #0]
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2400125c 	.word	0x2400125c
 8001b50:	24001094 	.word	0x24001094

08001b54 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <vCALL_NC_a16+0x14>)
 8001b56:	b508      	push	{r3, lr}
 8001b58:	f1a2 0108 	sub.w	r1, r2, #8
 8001b5c:	1c90      	adds	r0, r2, #2
 8001b5e:	f001 faa9 	bl	80030b4 <vGBFunctionCALL_NC_a16>
 8001b62:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vCALL_NC_a16+0x18>)
 8001b64:	7018      	strb	r0, [r3, #0]
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	24001264 	.word	0x24001264
 8001b6c:	24001094 	.word	0x24001094

08001b70 <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4d0d      	ldr	r5, [pc, #52]	; (8001ba8 <vJP_C_a16+0x38>)
 8001b74:	8968      	ldrh	r0, [r5, #10]
 8001b76:	462c      	mov	r4, r5
 8001b78:	3802      	subs	r0, #2
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	f001 fcc6 	bl	800350c <ucGBMemoryRead>
 8001b80:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b84:	4606      	mov	r6, r0
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	f001 fcbf 	bl	800350c <ucGBMemoryRead>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 ffd5 	bl	8002b40 <concat_16bit_bigEndian>
 8001b96:	4629      	mov	r1, r5
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f001 faa6 	bl	80030ec <vGBFunctionJP_C_a16>
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <vJP_C_a16+0x3c>)
 8001ba2:	7018      	strb	r0, [r3, #0]
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2400125c 	.word	0x2400125c
 8001bac:	24001094 	.word	0x24001094

08001bb0 <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <vCALL_C_a16+0x14>)
 8001bb2:	b508      	push	{r3, lr}
 8001bb4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bb8:	1c90      	adds	r0, r2, #2
 8001bba:	f001 fa9f 	bl	80030fc <vGBFunctionCALL_C_a16>
 8001bbe:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vCALL_C_a16+0x18>)
 8001bc0:	7018      	strb	r0, [r3, #0]
 8001bc2:	bd08      	pop	{r3, pc}
 8001bc4:	24001264 	.word	0x24001264
 8001bc8:	24001094 	.word	0x24001094

08001bcc <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4c07      	ldr	r4, [pc, #28]	; (8001bec <vADDs_SP_r8+0x20>)
 8001bd0:	8960      	ldrh	r0, [r4, #10]
 8001bd2:	3801      	subs	r0, #1
 8001bd4:	b280      	uxth	r0, r0
 8001bd6:	f001 fc99 	bl	800350c <ucGBMemoryRead>
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f104 0008 	add.w	r0, r4, #8
 8001be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be6:	f001 baa5 	b.w	8003134 <vGBFunctionADD_SP_r8>
 8001bea:	bf00      	nop
 8001bec:	2400125c 	.word	0x2400125c

08001bf0 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	4c07      	ldr	r4, [pc, #28]	; (8001c10 <vLDs_HL_SP_r8+0x20>)
 8001bf4:	8960      	ldrh	r0, [r4, #10]
 8001bf6:	3801      	subs	r0, #1
 8001bf8:	b280      	uxth	r0, r0
 8001bfa:	f001 fc87 	bl	800350c <ucGBMemoryRead>
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4603      	mov	r3, r0
 8001c02:	f104 0108 	add.w	r1, r4, #8
 8001c06:	1da0      	adds	r0, r4, #6
 8001c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0c:	f001 baba 	b.w	8003184 <vGBFunctionLD_HL_SP_r8>
 8001c10:	2400125c 	.word	0x2400125c

08001c14 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4c03      	ldr	r4, [pc, #12]	; (8001c24 <vRLC_B+0x10>)
 8001c18:	4621      	mov	r1, r4
 8001c1a:	78e0      	ldrb	r0, [r4, #3]
 8001c1c:	f001 fada 	bl	80031d4 <ucGBFunctionRLC>
 8001c20:	70e0      	strb	r0, [r4, #3]
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	2400125c 	.word	0x2400125c

08001c28 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4c03      	ldr	r4, [pc, #12]	; (8001c38 <vRLC_C+0x10>)
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	78a0      	ldrb	r0, [r4, #2]
 8001c30:	f001 fad0 	bl	80031d4 <ucGBFunctionRLC>
 8001c34:	70a0      	strb	r0, [r4, #2]
 8001c36:	bd10      	pop	{r4, pc}
 8001c38:	2400125c 	.word	0x2400125c

08001c3c <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	4c03      	ldr	r4, [pc, #12]	; (8001c4c <vRLC_D+0x10>)
 8001c40:	4621      	mov	r1, r4
 8001c42:	7960      	ldrb	r0, [r4, #5]
 8001c44:	f001 fac6 	bl	80031d4 <ucGBFunctionRLC>
 8001c48:	7160      	strb	r0, [r4, #5]
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	2400125c 	.word	0x2400125c

08001c50 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4c03      	ldr	r4, [pc, #12]	; (8001c60 <vRLC_E+0x10>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	7920      	ldrb	r0, [r4, #4]
 8001c58:	f001 fabc 	bl	80031d4 <ucGBFunctionRLC>
 8001c5c:	7120      	strb	r0, [r4, #4]
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	2400125c 	.word	0x2400125c

08001c64 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4c03      	ldr	r4, [pc, #12]	; (8001c74 <vRLC_H+0x10>)
 8001c68:	4621      	mov	r1, r4
 8001c6a:	79e0      	ldrb	r0, [r4, #7]
 8001c6c:	f001 fab2 	bl	80031d4 <ucGBFunctionRLC>
 8001c70:	71e0      	strb	r0, [r4, #7]
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	2400125c 	.word	0x2400125c

08001c78 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4c03      	ldr	r4, [pc, #12]	; (8001c88 <vRLC_L+0x10>)
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	79a0      	ldrb	r0, [r4, #6]
 8001c80:	f001 faa8 	bl	80031d4 <ucGBFunctionRLC>
 8001c84:	71a0      	strb	r0, [r4, #6]
 8001c86:	bd10      	pop	{r4, pc}
 8001c88:	2400125c 	.word	0x2400125c

08001c8c <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	4d07      	ldr	r5, [pc, #28]	; (8001cac <vRLC_HL+0x20>)
 8001c90:	88ec      	ldrh	r4, [r5, #6]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f001 fc3a 	bl	800350c <ucGBMemoryRead>
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f001 fa9b 	bl	80031d4 <ucGBFunctionRLC>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca6:	f001 bbcf 	b.w	8003448 <vGBMemoryWrite>
 8001caa:	bf00      	nop
 8001cac:	2400125c 	.word	0x2400125c

08001cb0 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4c03      	ldr	r4, [pc, #12]	; (8001cc0 <vRLC_A+0x10>)
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	7860      	ldrb	r0, [r4, #1]
 8001cb8:	f001 fa8c 	bl	80031d4 <ucGBFunctionRLC>
 8001cbc:	7060      	strb	r0, [r4, #1]
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	2400125c 	.word	0x2400125c

08001cc4 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4c03      	ldr	r4, [pc, #12]	; (8001cd4 <vRRC_B+0x10>)
 8001cc8:	4621      	mov	r1, r4
 8001cca:	78e0      	ldrb	r0, [r4, #3]
 8001ccc:	f001 fa9e 	bl	800320c <ucGBFunctionRRC>
 8001cd0:	70e0      	strb	r0, [r4, #3]
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	2400125c 	.word	0x2400125c

08001cd8 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4c03      	ldr	r4, [pc, #12]	; (8001ce8 <vRRC_C+0x10>)
 8001cdc:	4621      	mov	r1, r4
 8001cde:	78a0      	ldrb	r0, [r4, #2]
 8001ce0:	f001 fa94 	bl	800320c <ucGBFunctionRRC>
 8001ce4:	70a0      	strb	r0, [r4, #2]
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	2400125c 	.word	0x2400125c

08001cec <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4c03      	ldr	r4, [pc, #12]	; (8001cfc <vRRC_D+0x10>)
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	7960      	ldrb	r0, [r4, #5]
 8001cf4:	f001 fa8a 	bl	800320c <ucGBFunctionRRC>
 8001cf8:	7160      	strb	r0, [r4, #5]
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	2400125c 	.word	0x2400125c

08001d00 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4c03      	ldr	r4, [pc, #12]	; (8001d10 <vRRC_E+0x10>)
 8001d04:	4621      	mov	r1, r4
 8001d06:	7920      	ldrb	r0, [r4, #4]
 8001d08:	f001 fa80 	bl	800320c <ucGBFunctionRRC>
 8001d0c:	7120      	strb	r0, [r4, #4]
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	2400125c 	.word	0x2400125c

08001d14 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d14:	b510      	push	{r4, lr}
 8001d16:	4c03      	ldr	r4, [pc, #12]	; (8001d24 <vRRC_H+0x10>)
 8001d18:	4621      	mov	r1, r4
 8001d1a:	79e0      	ldrb	r0, [r4, #7]
 8001d1c:	f001 fa76 	bl	800320c <ucGBFunctionRRC>
 8001d20:	71e0      	strb	r0, [r4, #7]
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	2400125c 	.word	0x2400125c

08001d28 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4c03      	ldr	r4, [pc, #12]	; (8001d38 <vRRC_L+0x10>)
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	79a0      	ldrb	r0, [r4, #6]
 8001d30:	f001 fa6c 	bl	800320c <ucGBFunctionRRC>
 8001d34:	71a0      	strb	r0, [r4, #6]
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	2400125c 	.word	0x2400125c

08001d3c <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d07      	ldr	r5, [pc, #28]	; (8001d5c <vRRC_HL+0x20>)
 8001d40:	88ec      	ldrh	r4, [r5, #6]
 8001d42:	4620      	mov	r0, r4
 8001d44:	f001 fbe2 	bl	800350c <ucGBMemoryRead>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f001 fa5f 	bl	800320c <ucGBFunctionRRC>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4620      	mov	r0, r4
 8001d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d56:	f001 bb77 	b.w	8003448 <vGBMemoryWrite>
 8001d5a:	bf00      	nop
 8001d5c:	2400125c 	.word	0x2400125c

08001d60 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4c03      	ldr	r4, [pc, #12]	; (8001d70 <vRRC_A+0x10>)
 8001d64:	4621      	mov	r1, r4
 8001d66:	7860      	ldrb	r0, [r4, #1]
 8001d68:	f001 fa50 	bl	800320c <ucGBFunctionRRC>
 8001d6c:	7060      	strb	r0, [r4, #1]
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	2400125c 	.word	0x2400125c

08001d74 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4c03      	ldr	r4, [pc, #12]	; (8001d84 <vRL_B+0x10>)
 8001d78:	4621      	mov	r1, r4
 8001d7a:	78e0      	ldrb	r0, [r4, #3]
 8001d7c:	f001 fa62 	bl	8003244 <ucGBFunctionRL>
 8001d80:	70e0      	strb	r0, [r4, #3]
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	2400125c 	.word	0x2400125c

08001d88 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	4c03      	ldr	r4, [pc, #12]	; (8001d98 <vRL_C+0x10>)
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	78a0      	ldrb	r0, [r4, #2]
 8001d90:	f001 fa58 	bl	8003244 <ucGBFunctionRL>
 8001d94:	70a0      	strb	r0, [r4, #2]
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	2400125c 	.word	0x2400125c

08001d9c <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4c03      	ldr	r4, [pc, #12]	; (8001dac <vRL_D+0x10>)
 8001da0:	4621      	mov	r1, r4
 8001da2:	7960      	ldrb	r0, [r4, #5]
 8001da4:	f001 fa4e 	bl	8003244 <ucGBFunctionRL>
 8001da8:	7160      	strb	r0, [r4, #5]
 8001daa:	bd10      	pop	{r4, pc}
 8001dac:	2400125c 	.word	0x2400125c

08001db0 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4c03      	ldr	r4, [pc, #12]	; (8001dc0 <vRL_E+0x10>)
 8001db4:	4621      	mov	r1, r4
 8001db6:	7920      	ldrb	r0, [r4, #4]
 8001db8:	f001 fa44 	bl	8003244 <ucGBFunctionRL>
 8001dbc:	7120      	strb	r0, [r4, #4]
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	2400125c 	.word	0x2400125c

08001dc4 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4c03      	ldr	r4, [pc, #12]	; (8001dd4 <vRL_H+0x10>)
 8001dc8:	4621      	mov	r1, r4
 8001dca:	79e0      	ldrb	r0, [r4, #7]
 8001dcc:	f001 fa3a 	bl	8003244 <ucGBFunctionRL>
 8001dd0:	71e0      	strb	r0, [r4, #7]
 8001dd2:	bd10      	pop	{r4, pc}
 8001dd4:	2400125c 	.word	0x2400125c

08001dd8 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4c03      	ldr	r4, [pc, #12]	; (8001de8 <vRL_L+0x10>)
 8001ddc:	4621      	mov	r1, r4
 8001dde:	79a0      	ldrb	r0, [r4, #6]
 8001de0:	f001 fa30 	bl	8003244 <ucGBFunctionRL>
 8001de4:	71a0      	strb	r0, [r4, #6]
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	2400125c 	.word	0x2400125c

08001dec <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4d07      	ldr	r5, [pc, #28]	; (8001e0c <vRL_HL+0x20>)
 8001df0:	88ec      	ldrh	r4, [r5, #6]
 8001df2:	4620      	mov	r0, r4
 8001df4:	f001 fb8a 	bl	800350c <ucGBMemoryRead>
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f001 fa23 	bl	8003244 <ucGBFunctionRL>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	4620      	mov	r0, r4
 8001e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e06:	f001 bb1f 	b.w	8003448 <vGBMemoryWrite>
 8001e0a:	bf00      	nop
 8001e0c:	2400125c 	.word	0x2400125c

08001e10 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4c03      	ldr	r4, [pc, #12]	; (8001e20 <vRL_A+0x10>)
 8001e14:	4621      	mov	r1, r4
 8001e16:	7860      	ldrb	r0, [r4, #1]
 8001e18:	f001 fa14 	bl	8003244 <ucGBFunctionRL>
 8001e1c:	7060      	strb	r0, [r4, #1]
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	2400125c 	.word	0x2400125c

08001e24 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4c03      	ldr	r4, [pc, #12]	; (8001e34 <vRR_B+0x10>)
 8001e28:	4621      	mov	r1, r4
 8001e2a:	78e0      	ldrb	r0, [r4, #3]
 8001e2c:	f001 fa24 	bl	8003278 <ucGBFunctionRR>
 8001e30:	70e0      	strb	r0, [r4, #3]
 8001e32:	bd10      	pop	{r4, pc}
 8001e34:	2400125c 	.word	0x2400125c

08001e38 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4c03      	ldr	r4, [pc, #12]	; (8001e48 <vRR_C+0x10>)
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	78a0      	ldrb	r0, [r4, #2]
 8001e40:	f001 fa1a 	bl	8003278 <ucGBFunctionRR>
 8001e44:	70a0      	strb	r0, [r4, #2]
 8001e46:	bd10      	pop	{r4, pc}
 8001e48:	2400125c 	.word	0x2400125c

08001e4c <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4c03      	ldr	r4, [pc, #12]	; (8001e5c <vRR_D+0x10>)
 8001e50:	4621      	mov	r1, r4
 8001e52:	7960      	ldrb	r0, [r4, #5]
 8001e54:	f001 fa10 	bl	8003278 <ucGBFunctionRR>
 8001e58:	7160      	strb	r0, [r4, #5]
 8001e5a:	bd10      	pop	{r4, pc}
 8001e5c:	2400125c 	.word	0x2400125c

08001e60 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4c03      	ldr	r4, [pc, #12]	; (8001e70 <vRR_E+0x10>)
 8001e64:	4621      	mov	r1, r4
 8001e66:	7920      	ldrb	r0, [r4, #4]
 8001e68:	f001 fa06 	bl	8003278 <ucGBFunctionRR>
 8001e6c:	7120      	strb	r0, [r4, #4]
 8001e6e:	bd10      	pop	{r4, pc}
 8001e70:	2400125c 	.word	0x2400125c

08001e74 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4c03      	ldr	r4, [pc, #12]	; (8001e84 <vRR_H+0x10>)
 8001e78:	4621      	mov	r1, r4
 8001e7a:	79e0      	ldrb	r0, [r4, #7]
 8001e7c:	f001 f9fc 	bl	8003278 <ucGBFunctionRR>
 8001e80:	71e0      	strb	r0, [r4, #7]
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	2400125c 	.word	0x2400125c

08001e88 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4c03      	ldr	r4, [pc, #12]	; (8001e98 <vRR_L+0x10>)
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	79a0      	ldrb	r0, [r4, #6]
 8001e90:	f001 f9f2 	bl	8003278 <ucGBFunctionRR>
 8001e94:	71a0      	strb	r0, [r4, #6]
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	2400125c 	.word	0x2400125c

08001e9c <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4d07      	ldr	r5, [pc, #28]	; (8001ebc <vRR_HL+0x20>)
 8001ea0:	88ec      	ldrh	r4, [r5, #6]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f001 fb32 	bl	800350c <ucGBMemoryRead>
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f001 f9e5 	bl	8003278 <ucGBFunctionRR>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb6:	f001 bac7 	b.w	8003448 <vGBMemoryWrite>
 8001eba:	bf00      	nop
 8001ebc:	2400125c 	.word	0x2400125c

08001ec0 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4c03      	ldr	r4, [pc, #12]	; (8001ed0 <vRR_A+0x10>)
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	7860      	ldrb	r0, [r4, #1]
 8001ec8:	f001 f9d6 	bl	8003278 <ucGBFunctionRR>
 8001ecc:	7060      	strb	r0, [r4, #1]
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	2400125c 	.word	0x2400125c

08001ed4 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4c03      	ldr	r4, [pc, #12]	; (8001ee4 <vSLA_B+0x10>)
 8001ed8:	4621      	mov	r1, r4
 8001eda:	78e0      	ldrb	r0, [r4, #3]
 8001edc:	f001 f9e8 	bl	80032b0 <ucGBFunctionSLA>
 8001ee0:	70e0      	strb	r0, [r4, #3]
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	2400125c 	.word	0x2400125c

08001ee8 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4c03      	ldr	r4, [pc, #12]	; (8001ef8 <vSLA_C+0x10>)
 8001eec:	4621      	mov	r1, r4
 8001eee:	78a0      	ldrb	r0, [r4, #2]
 8001ef0:	f001 f9de 	bl	80032b0 <ucGBFunctionSLA>
 8001ef4:	70a0      	strb	r0, [r4, #2]
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	2400125c 	.word	0x2400125c

08001efc <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4c03      	ldr	r4, [pc, #12]	; (8001f0c <vSLA_D+0x10>)
 8001f00:	4621      	mov	r1, r4
 8001f02:	7960      	ldrb	r0, [r4, #5]
 8001f04:	f001 f9d4 	bl	80032b0 <ucGBFunctionSLA>
 8001f08:	7160      	strb	r0, [r4, #5]
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	2400125c 	.word	0x2400125c

08001f10 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4c03      	ldr	r4, [pc, #12]	; (8001f20 <vSLA_E+0x10>)
 8001f14:	4621      	mov	r1, r4
 8001f16:	7920      	ldrb	r0, [r4, #4]
 8001f18:	f001 f9ca 	bl	80032b0 <ucGBFunctionSLA>
 8001f1c:	7120      	strb	r0, [r4, #4]
 8001f1e:	bd10      	pop	{r4, pc}
 8001f20:	2400125c 	.word	0x2400125c

08001f24 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4c03      	ldr	r4, [pc, #12]	; (8001f34 <vSLA_H+0x10>)
 8001f28:	4621      	mov	r1, r4
 8001f2a:	79e0      	ldrb	r0, [r4, #7]
 8001f2c:	f001 f9c0 	bl	80032b0 <ucGBFunctionSLA>
 8001f30:	71e0      	strb	r0, [r4, #7]
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	2400125c 	.word	0x2400125c

08001f38 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4c03      	ldr	r4, [pc, #12]	; (8001f48 <vSLA_L+0x10>)
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	79a0      	ldrb	r0, [r4, #6]
 8001f40:	f001 f9b6 	bl	80032b0 <ucGBFunctionSLA>
 8001f44:	71a0      	strb	r0, [r4, #6]
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	2400125c 	.word	0x2400125c

08001f4c <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	4d07      	ldr	r5, [pc, #28]	; (8001f6c <vSLA_HL+0x20>)
 8001f50:	88ec      	ldrh	r4, [r5, #6]
 8001f52:	4620      	mov	r0, r4
 8001f54:	f001 fada 	bl	800350c <ucGBMemoryRead>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f001 f9a9 	bl	80032b0 <ucGBFunctionSLA>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4620      	mov	r0, r4
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f001 ba6f 	b.w	8003448 <vGBMemoryWrite>
 8001f6a:	bf00      	nop
 8001f6c:	2400125c 	.word	0x2400125c

08001f70 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4c03      	ldr	r4, [pc, #12]	; (8001f80 <vSLA_A+0x10>)
 8001f74:	4621      	mov	r1, r4
 8001f76:	7860      	ldrb	r0, [r4, #1]
 8001f78:	f001 f99a 	bl	80032b0 <ucGBFunctionSLA>
 8001f7c:	7060      	strb	r0, [r4, #1]
 8001f7e:	bd10      	pop	{r4, pc}
 8001f80:	2400125c 	.word	0x2400125c

08001f84 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4c03      	ldr	r4, [pc, #12]	; (8001f94 <vSRA_B+0x10>)
 8001f88:	4621      	mov	r1, r4
 8001f8a:	78e0      	ldrb	r0, [r4, #3]
 8001f8c:	f001 f9a8 	bl	80032e0 <ucGBFunctionSRA>
 8001f90:	70e0      	strb	r0, [r4, #3]
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	2400125c 	.word	0x2400125c

08001f98 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4c03      	ldr	r4, [pc, #12]	; (8001fa8 <vSRA_C+0x10>)
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	78a0      	ldrb	r0, [r4, #2]
 8001fa0:	f001 f99e 	bl	80032e0 <ucGBFunctionSRA>
 8001fa4:	70a0      	strb	r0, [r4, #2]
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	2400125c 	.word	0x2400125c

08001fac <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4c03      	ldr	r4, [pc, #12]	; (8001fbc <vSRA_D+0x10>)
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	7960      	ldrb	r0, [r4, #5]
 8001fb4:	f001 f994 	bl	80032e0 <ucGBFunctionSRA>
 8001fb8:	7160      	strb	r0, [r4, #5]
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	2400125c 	.word	0x2400125c

08001fc0 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4c03      	ldr	r4, [pc, #12]	; (8001fd0 <vSRA_E+0x10>)
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	7920      	ldrb	r0, [r4, #4]
 8001fc8:	f001 f98a 	bl	80032e0 <ucGBFunctionSRA>
 8001fcc:	7120      	strb	r0, [r4, #4]
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	2400125c 	.word	0x2400125c

08001fd4 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4c03      	ldr	r4, [pc, #12]	; (8001fe4 <vSRA_H+0x10>)
 8001fd8:	4621      	mov	r1, r4
 8001fda:	79e0      	ldrb	r0, [r4, #7]
 8001fdc:	f001 f980 	bl	80032e0 <ucGBFunctionSRA>
 8001fe0:	71e0      	strb	r0, [r4, #7]
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	2400125c 	.word	0x2400125c

08001fe8 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	4c03      	ldr	r4, [pc, #12]	; (8001ff8 <vSRA_L+0x10>)
 8001fec:	4621      	mov	r1, r4
 8001fee:	79a0      	ldrb	r0, [r4, #6]
 8001ff0:	f001 f976 	bl	80032e0 <ucGBFunctionSRA>
 8001ff4:	71a0      	strb	r0, [r4, #6]
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	2400125c 	.word	0x2400125c

08001ffc <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	; (800201c <vSRA_HL+0x20>)
 8002000:	88ec      	ldrh	r4, [r5, #6]
 8002002:	4620      	mov	r0, r4
 8002004:	f001 fa82 	bl	800350c <ucGBMemoryRead>
 8002008:	4629      	mov	r1, r5
 800200a:	f001 f969 	bl	80032e0 <ucGBFunctionSRA>
 800200e:	4601      	mov	r1, r0
 8002010:	4620      	mov	r0, r4
 8002012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002016:	f001 ba17 	b.w	8003448 <vGBMemoryWrite>
 800201a:	bf00      	nop
 800201c:	2400125c 	.word	0x2400125c

08002020 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 8002020:	b510      	push	{r4, lr}
 8002022:	4c03      	ldr	r4, [pc, #12]	; (8002030 <vSRA_A+0x10>)
 8002024:	4621      	mov	r1, r4
 8002026:	7860      	ldrb	r0, [r4, #1]
 8002028:	f001 f95a 	bl	80032e0 <ucGBFunctionSRA>
 800202c:	7060      	strb	r0, [r4, #1]
 800202e:	bd10      	pop	{r4, pc}
 8002030:	2400125c 	.word	0x2400125c

08002034 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002034:	b510      	push	{r4, lr}
 8002036:	4c03      	ldr	r4, [pc, #12]	; (8002044 <vSWAP_B+0x10>)
 8002038:	4621      	mov	r1, r4
 800203a:	78e0      	ldrb	r0, [r4, #3]
 800203c:	f001 f96a 	bl	8003314 <ucGBFunctionSWAP>
 8002040:	70e0      	strb	r0, [r4, #3]
 8002042:	bd10      	pop	{r4, pc}
 8002044:	2400125c 	.word	0x2400125c

08002048 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002048:	b510      	push	{r4, lr}
 800204a:	4c03      	ldr	r4, [pc, #12]	; (8002058 <vSWAP_C+0x10>)
 800204c:	4621      	mov	r1, r4
 800204e:	78a0      	ldrb	r0, [r4, #2]
 8002050:	f001 f960 	bl	8003314 <ucGBFunctionSWAP>
 8002054:	70a0      	strb	r0, [r4, #2]
 8002056:	bd10      	pop	{r4, pc}
 8002058:	2400125c 	.word	0x2400125c

0800205c <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 800205c:	b510      	push	{r4, lr}
 800205e:	4c03      	ldr	r4, [pc, #12]	; (800206c <vSWAP_D+0x10>)
 8002060:	4621      	mov	r1, r4
 8002062:	7960      	ldrb	r0, [r4, #5]
 8002064:	f001 f956 	bl	8003314 <ucGBFunctionSWAP>
 8002068:	7160      	strb	r0, [r4, #5]
 800206a:	bd10      	pop	{r4, pc}
 800206c:	2400125c 	.word	0x2400125c

08002070 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002070:	b510      	push	{r4, lr}
 8002072:	4c03      	ldr	r4, [pc, #12]	; (8002080 <vSWAP_E+0x10>)
 8002074:	4621      	mov	r1, r4
 8002076:	7920      	ldrb	r0, [r4, #4]
 8002078:	f001 f94c 	bl	8003314 <ucGBFunctionSWAP>
 800207c:	7120      	strb	r0, [r4, #4]
 800207e:	bd10      	pop	{r4, pc}
 8002080:	2400125c 	.word	0x2400125c

08002084 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 8002084:	b510      	push	{r4, lr}
 8002086:	4c03      	ldr	r4, [pc, #12]	; (8002094 <vSWAP_H+0x10>)
 8002088:	4621      	mov	r1, r4
 800208a:	79e0      	ldrb	r0, [r4, #7]
 800208c:	f001 f942 	bl	8003314 <ucGBFunctionSWAP>
 8002090:	71e0      	strb	r0, [r4, #7]
 8002092:	bd10      	pop	{r4, pc}
 8002094:	2400125c 	.word	0x2400125c

08002098 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002098:	b510      	push	{r4, lr}
 800209a:	4c03      	ldr	r4, [pc, #12]	; (80020a8 <vSWAP_L+0x10>)
 800209c:	4621      	mov	r1, r4
 800209e:	79a0      	ldrb	r0, [r4, #6]
 80020a0:	f001 f938 	bl	8003314 <ucGBFunctionSWAP>
 80020a4:	71a0      	strb	r0, [r4, #6]
 80020a6:	bd10      	pop	{r4, pc}
 80020a8:	2400125c 	.word	0x2400125c

080020ac <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d07      	ldr	r5, [pc, #28]	; (80020cc <vSWAP_HL+0x20>)
 80020b0:	88ec      	ldrh	r4, [r5, #6]
 80020b2:	4620      	mov	r0, r4
 80020b4:	f001 fa2a 	bl	800350c <ucGBMemoryRead>
 80020b8:	4629      	mov	r1, r5
 80020ba:	f001 f92b 	bl	8003314 <ucGBFunctionSWAP>
 80020be:	4601      	mov	r1, r0
 80020c0:	4620      	mov	r0, r4
 80020c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020c6:	f001 b9bf 	b.w	8003448 <vGBMemoryWrite>
 80020ca:	bf00      	nop
 80020cc:	2400125c 	.word	0x2400125c

080020d0 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4c03      	ldr	r4, [pc, #12]	; (80020e0 <vSWAP_A+0x10>)
 80020d4:	4621      	mov	r1, r4
 80020d6:	7860      	ldrb	r0, [r4, #1]
 80020d8:	f001 f91c 	bl	8003314 <ucGBFunctionSWAP>
 80020dc:	7060      	strb	r0, [r4, #1]
 80020de:	bd10      	pop	{r4, pc}
 80020e0:	2400125c 	.word	0x2400125c

080020e4 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4c03      	ldr	r4, [pc, #12]	; (80020f4 <vSRL_B+0x10>)
 80020e8:	4621      	mov	r1, r4
 80020ea:	78e0      	ldrb	r0, [r4, #3]
 80020ec:	f001 f928 	bl	8003340 <ucGBFunctionSRL>
 80020f0:	70e0      	strb	r0, [r4, #3]
 80020f2:	bd10      	pop	{r4, pc}
 80020f4:	2400125c 	.word	0x2400125c

080020f8 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4c03      	ldr	r4, [pc, #12]	; (8002108 <vSRL_C+0x10>)
 80020fc:	4621      	mov	r1, r4
 80020fe:	78a0      	ldrb	r0, [r4, #2]
 8002100:	f001 f91e 	bl	8003340 <ucGBFunctionSRL>
 8002104:	70a0      	strb	r0, [r4, #2]
 8002106:	bd10      	pop	{r4, pc}
 8002108:	2400125c 	.word	0x2400125c

0800210c <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 800210c:	b510      	push	{r4, lr}
 800210e:	4c03      	ldr	r4, [pc, #12]	; (800211c <vSRL_D+0x10>)
 8002110:	4621      	mov	r1, r4
 8002112:	7960      	ldrb	r0, [r4, #5]
 8002114:	f001 f914 	bl	8003340 <ucGBFunctionSRL>
 8002118:	7160      	strb	r0, [r4, #5]
 800211a:	bd10      	pop	{r4, pc}
 800211c:	2400125c 	.word	0x2400125c

08002120 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 8002120:	b510      	push	{r4, lr}
 8002122:	4c03      	ldr	r4, [pc, #12]	; (8002130 <vSRL_E+0x10>)
 8002124:	4621      	mov	r1, r4
 8002126:	7920      	ldrb	r0, [r4, #4]
 8002128:	f001 f90a 	bl	8003340 <ucGBFunctionSRL>
 800212c:	7120      	strb	r0, [r4, #4]
 800212e:	bd10      	pop	{r4, pc}
 8002130:	2400125c 	.word	0x2400125c

08002134 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002134:	b510      	push	{r4, lr}
 8002136:	4c03      	ldr	r4, [pc, #12]	; (8002144 <vSRL_H+0x10>)
 8002138:	4621      	mov	r1, r4
 800213a:	79e0      	ldrb	r0, [r4, #7]
 800213c:	f001 f900 	bl	8003340 <ucGBFunctionSRL>
 8002140:	71e0      	strb	r0, [r4, #7]
 8002142:	bd10      	pop	{r4, pc}
 8002144:	2400125c 	.word	0x2400125c

08002148 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002148:	b510      	push	{r4, lr}
 800214a:	4c03      	ldr	r4, [pc, #12]	; (8002158 <vSRL_L+0x10>)
 800214c:	4621      	mov	r1, r4
 800214e:	79a0      	ldrb	r0, [r4, #6]
 8002150:	f001 f8f6 	bl	8003340 <ucGBFunctionSRL>
 8002154:	71a0      	strb	r0, [r4, #6]
 8002156:	bd10      	pop	{r4, pc}
 8002158:	2400125c 	.word	0x2400125c

0800215c <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4d07      	ldr	r5, [pc, #28]	; (800217c <vSRL_HL+0x20>)
 8002160:	88ec      	ldrh	r4, [r5, #6]
 8002162:	4620      	mov	r0, r4
 8002164:	f001 f9d2 	bl	800350c <ucGBMemoryRead>
 8002168:	4629      	mov	r1, r5
 800216a:	f001 f8e9 	bl	8003340 <ucGBFunctionSRL>
 800216e:	4601      	mov	r1, r0
 8002170:	4620      	mov	r0, r4
 8002172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002176:	f001 b967 	b.w	8003448 <vGBMemoryWrite>
 800217a:	bf00      	nop
 800217c:	2400125c 	.word	0x2400125c

08002180 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002180:	b510      	push	{r4, lr}
 8002182:	4c03      	ldr	r4, [pc, #12]	; (8002190 <vSRL_A+0x10>)
 8002184:	4621      	mov	r1, r4
 8002186:	7860      	ldrb	r0, [r4, #1]
 8002188:	f001 f8da 	bl	8003340 <ucGBFunctionSRL>
 800218c:	7060      	strb	r0, [r4, #1]
 800218e:	bd10      	pop	{r4, pc}
 8002190:	2400125c 	.word	0x2400125c

08002194 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <vBIT_0_B+0xc>)
 8002196:	2100      	movs	r1, #0
 8002198:	78d0      	ldrb	r0, [r2, #3]
 800219a:	f001 b8e5 	b.w	8003368 <vGBFunctionBIT>
 800219e:	bf00      	nop
 80021a0:	2400125c 	.word	0x2400125c

080021a4 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021a4:	4a02      	ldr	r2, [pc, #8]	; (80021b0 <vBIT_0_C+0xc>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	7890      	ldrb	r0, [r2, #2]
 80021aa:	f001 b8dd 	b.w	8003368 <vGBFunctionBIT>
 80021ae:	bf00      	nop
 80021b0:	2400125c 	.word	0x2400125c

080021b4 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021b4:	4a02      	ldr	r2, [pc, #8]	; (80021c0 <vBIT_0_D+0xc>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	7950      	ldrb	r0, [r2, #5]
 80021ba:	f001 b8d5 	b.w	8003368 <vGBFunctionBIT>
 80021be:	bf00      	nop
 80021c0:	2400125c 	.word	0x2400125c

080021c4 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021c4:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <vBIT_0_E+0xc>)
 80021c6:	2100      	movs	r1, #0
 80021c8:	7910      	ldrb	r0, [r2, #4]
 80021ca:	f001 b8cd 	b.w	8003368 <vGBFunctionBIT>
 80021ce:	bf00      	nop
 80021d0:	2400125c 	.word	0x2400125c

080021d4 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <vBIT_0_H+0xc>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	79d0      	ldrb	r0, [r2, #7]
 80021da:	f001 b8c5 	b.w	8003368 <vGBFunctionBIT>
 80021de:	bf00      	nop
 80021e0:	2400125c 	.word	0x2400125c

080021e4 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80021e4:	4a02      	ldr	r2, [pc, #8]	; (80021f0 <vBIT_0_L+0xc>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	7990      	ldrb	r0, [r2, #6]
 80021ea:	f001 b8bd 	b.w	8003368 <vGBFunctionBIT>
 80021ee:	bf00      	nop
 80021f0:	2400125c 	.word	0x2400125c

080021f4 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4c05      	ldr	r4, [pc, #20]	; (800220c <vBIT_0_HL+0x18>)
 80021f8:	88e0      	ldrh	r0, [r4, #6]
 80021fa:	f001 f987 	bl	800350c <ucGBMemoryRead>
 80021fe:	4622      	mov	r2, r4
 8002200:	2100      	movs	r1, #0
 8002202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002206:	f001 b8af 	b.w	8003368 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	2400125c 	.word	0x2400125c

08002210 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002210:	4a02      	ldr	r2, [pc, #8]	; (800221c <vBIT_0_A+0xc>)
 8002212:	2101      	movs	r1, #1
 8002214:	7850      	ldrb	r0, [r2, #1]
 8002216:	f001 b8a7 	b.w	8003368 <vGBFunctionBIT>
 800221a:	bf00      	nop
 800221c:	2400125c 	.word	0x2400125c

08002220 <vBIT_1_A>:
 8002220:	f7ff bff6 	b.w	8002210 <vBIT_0_A>

08002224 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <vBIT_1_B+0xc>)
 8002226:	2101      	movs	r1, #1
 8002228:	78d0      	ldrb	r0, [r2, #3]
 800222a:	f001 b89d 	b.w	8003368 <vGBFunctionBIT>
 800222e:	bf00      	nop
 8002230:	2400125c 	.word	0x2400125c

08002234 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <vBIT_1_C+0xc>)
 8002236:	2101      	movs	r1, #1
 8002238:	7890      	ldrb	r0, [r2, #2]
 800223a:	f001 b895 	b.w	8003368 <vGBFunctionBIT>
 800223e:	bf00      	nop
 8002240:	2400125c 	.word	0x2400125c

08002244 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 8002244:	4a02      	ldr	r2, [pc, #8]	; (8002250 <vBIT_1_D+0xc>)
 8002246:	2101      	movs	r1, #1
 8002248:	7950      	ldrb	r0, [r2, #5]
 800224a:	f001 b88d 	b.w	8003368 <vGBFunctionBIT>
 800224e:	bf00      	nop
 8002250:	2400125c 	.word	0x2400125c

08002254 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <vBIT_1_E+0xc>)
 8002256:	2101      	movs	r1, #1
 8002258:	7910      	ldrb	r0, [r2, #4]
 800225a:	f001 b885 	b.w	8003368 <vGBFunctionBIT>
 800225e:	bf00      	nop
 8002260:	2400125c 	.word	0x2400125c

08002264 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 8002264:	4a02      	ldr	r2, [pc, #8]	; (8002270 <vBIT_1_H+0xc>)
 8002266:	2101      	movs	r1, #1
 8002268:	79d0      	ldrb	r0, [r2, #7]
 800226a:	f001 b87d 	b.w	8003368 <vGBFunctionBIT>
 800226e:	bf00      	nop
 8002270:	2400125c 	.word	0x2400125c

08002274 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002274:	4a02      	ldr	r2, [pc, #8]	; (8002280 <vBIT_1_L+0xc>)
 8002276:	2101      	movs	r1, #1
 8002278:	7990      	ldrb	r0, [r2, #6]
 800227a:	f001 b875 	b.w	8003368 <vGBFunctionBIT>
 800227e:	bf00      	nop
 8002280:	2400125c 	.word	0x2400125c

08002284 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002284:	b510      	push	{r4, lr}
 8002286:	4c05      	ldr	r4, [pc, #20]	; (800229c <vBIT_1_HL+0x18>)
 8002288:	88e0      	ldrh	r0, [r4, #6]
 800228a:	f001 f93f 	bl	800350c <ucGBMemoryRead>
 800228e:	4622      	mov	r2, r4
 8002290:	2101      	movs	r1, #1
 8002292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002296:	f001 b867 	b.w	8003368 <vGBFunctionBIT>
 800229a:	bf00      	nop
 800229c:	2400125c 	.word	0x2400125c

080022a0 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <vBIT_2_B+0xc>)
 80022a2:	2102      	movs	r1, #2
 80022a4:	78d0      	ldrb	r0, [r2, #3]
 80022a6:	f001 b85f 	b.w	8003368 <vGBFunctionBIT>
 80022aa:	bf00      	nop
 80022ac:	2400125c 	.word	0x2400125c

080022b0 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <vBIT_2_C+0xc>)
 80022b2:	2102      	movs	r1, #2
 80022b4:	7890      	ldrb	r0, [r2, #2]
 80022b6:	f001 b857 	b.w	8003368 <vGBFunctionBIT>
 80022ba:	bf00      	nop
 80022bc:	2400125c 	.word	0x2400125c

080022c0 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <vBIT_2_D+0xc>)
 80022c2:	2102      	movs	r1, #2
 80022c4:	7950      	ldrb	r0, [r2, #5]
 80022c6:	f001 b84f 	b.w	8003368 <vGBFunctionBIT>
 80022ca:	bf00      	nop
 80022cc:	2400125c 	.word	0x2400125c

080022d0 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022d0:	4a02      	ldr	r2, [pc, #8]	; (80022dc <vBIT_2_E+0xc>)
 80022d2:	2102      	movs	r1, #2
 80022d4:	7910      	ldrb	r0, [r2, #4]
 80022d6:	f001 b847 	b.w	8003368 <vGBFunctionBIT>
 80022da:	bf00      	nop
 80022dc:	2400125c 	.word	0x2400125c

080022e0 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <vBIT_2_H+0xc>)
 80022e2:	2102      	movs	r1, #2
 80022e4:	79d0      	ldrb	r0, [r2, #7]
 80022e6:	f001 b83f 	b.w	8003368 <vGBFunctionBIT>
 80022ea:	bf00      	nop
 80022ec:	2400125c 	.word	0x2400125c

080022f0 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80022f0:	4a02      	ldr	r2, [pc, #8]	; (80022fc <vBIT_2_L+0xc>)
 80022f2:	2102      	movs	r1, #2
 80022f4:	7990      	ldrb	r0, [r2, #6]
 80022f6:	f001 b837 	b.w	8003368 <vGBFunctionBIT>
 80022fa:	bf00      	nop
 80022fc:	2400125c 	.word	0x2400125c

08002300 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002300:	b510      	push	{r4, lr}
 8002302:	4c05      	ldr	r4, [pc, #20]	; (8002318 <vBIT_2_HL+0x18>)
 8002304:	88e0      	ldrh	r0, [r4, #6]
 8002306:	f001 f901 	bl	800350c <ucGBMemoryRead>
 800230a:	4622      	mov	r2, r4
 800230c:	2102      	movs	r1, #2
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002312:	f001 b829 	b.w	8003368 <vGBFunctionBIT>
 8002316:	bf00      	nop
 8002318:	2400125c 	.word	0x2400125c

0800231c <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 800231c:	4a02      	ldr	r2, [pc, #8]	; (8002328 <vBIT_2_A+0xc>)
 800231e:	2102      	movs	r1, #2
 8002320:	7850      	ldrb	r0, [r2, #1]
 8002322:	f001 b821 	b.w	8003368 <vGBFunctionBIT>
 8002326:	bf00      	nop
 8002328:	2400125c 	.word	0x2400125c

0800232c <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 800232c:	4a02      	ldr	r2, [pc, #8]	; (8002338 <vBIT_3_B+0xc>)
 800232e:	2103      	movs	r1, #3
 8002330:	78d0      	ldrb	r0, [r2, #3]
 8002332:	f001 b819 	b.w	8003368 <vGBFunctionBIT>
 8002336:	bf00      	nop
 8002338:	2400125c 	.word	0x2400125c

0800233c <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 800233c:	4a02      	ldr	r2, [pc, #8]	; (8002348 <vBIT_3_C+0xc>)
 800233e:	2103      	movs	r1, #3
 8002340:	7890      	ldrb	r0, [r2, #2]
 8002342:	f001 b811 	b.w	8003368 <vGBFunctionBIT>
 8002346:	bf00      	nop
 8002348:	2400125c 	.word	0x2400125c

0800234c <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 800234c:	4a02      	ldr	r2, [pc, #8]	; (8002358 <vBIT_3_D+0xc>)
 800234e:	2103      	movs	r1, #3
 8002350:	7950      	ldrb	r0, [r2, #5]
 8002352:	f001 b809 	b.w	8003368 <vGBFunctionBIT>
 8002356:	bf00      	nop
 8002358:	2400125c 	.word	0x2400125c

0800235c <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <vBIT_3_E+0xc>)
 800235e:	2103      	movs	r1, #3
 8002360:	7910      	ldrb	r0, [r2, #4]
 8002362:	f001 b801 	b.w	8003368 <vGBFunctionBIT>
 8002366:	bf00      	nop
 8002368:	2400125c 	.word	0x2400125c

0800236c <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <vBIT_3_H+0xc>)
 800236e:	2103      	movs	r1, #3
 8002370:	79d0      	ldrb	r0, [r2, #7]
 8002372:	f000 bff9 	b.w	8003368 <vGBFunctionBIT>
 8002376:	bf00      	nop
 8002378:	2400125c 	.word	0x2400125c

0800237c <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 800237c:	4a02      	ldr	r2, [pc, #8]	; (8002388 <vBIT_3_L+0xc>)
 800237e:	2103      	movs	r1, #3
 8002380:	7990      	ldrb	r0, [r2, #6]
 8002382:	f000 bff1 	b.w	8003368 <vGBFunctionBIT>
 8002386:	bf00      	nop
 8002388:	2400125c 	.word	0x2400125c

0800238c <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 800238c:	b510      	push	{r4, lr}
 800238e:	4c05      	ldr	r4, [pc, #20]	; (80023a4 <vBIT_3_HL+0x18>)
 8002390:	88e0      	ldrh	r0, [r4, #6]
 8002392:	f001 f8bb 	bl	800350c <ucGBMemoryRead>
 8002396:	4622      	mov	r2, r4
 8002398:	2103      	movs	r1, #3
 800239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239e:	f000 bfe3 	b.w	8003368 <vGBFunctionBIT>
 80023a2:	bf00      	nop
 80023a4:	2400125c 	.word	0x2400125c

080023a8 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023a8:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <vBIT_3_A+0xc>)
 80023aa:	2103      	movs	r1, #3
 80023ac:	7850      	ldrb	r0, [r2, #1]
 80023ae:	f000 bfdb 	b.w	8003368 <vGBFunctionBIT>
 80023b2:	bf00      	nop
 80023b4:	2400125c 	.word	0x2400125c

080023b8 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <vBIT_4_B+0xc>)
 80023ba:	2104      	movs	r1, #4
 80023bc:	78d0      	ldrb	r0, [r2, #3]
 80023be:	f000 bfd3 	b.w	8003368 <vGBFunctionBIT>
 80023c2:	bf00      	nop
 80023c4:	2400125c 	.word	0x2400125c

080023c8 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <vBIT_4_C+0xc>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	7890      	ldrb	r0, [r2, #2]
 80023ce:	f000 bfcb 	b.w	8003368 <vGBFunctionBIT>
 80023d2:	bf00      	nop
 80023d4:	2400125c 	.word	0x2400125c

080023d8 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80023d8:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <vBIT_4_D+0xc>)
 80023da:	2104      	movs	r1, #4
 80023dc:	7950      	ldrb	r0, [r2, #5]
 80023de:	f000 bfc3 	b.w	8003368 <vGBFunctionBIT>
 80023e2:	bf00      	nop
 80023e4:	2400125c 	.word	0x2400125c

080023e8 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80023e8:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <vBIT_4_E+0xc>)
 80023ea:	2104      	movs	r1, #4
 80023ec:	7910      	ldrb	r0, [r2, #4]
 80023ee:	f000 bfbb 	b.w	8003368 <vGBFunctionBIT>
 80023f2:	bf00      	nop
 80023f4:	2400125c 	.word	0x2400125c

080023f8 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80023f8:	4a02      	ldr	r2, [pc, #8]	; (8002404 <vBIT_4_H+0xc>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	79d0      	ldrb	r0, [r2, #7]
 80023fe:	f000 bfb3 	b.w	8003368 <vGBFunctionBIT>
 8002402:	bf00      	nop
 8002404:	2400125c 	.word	0x2400125c

08002408 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <vBIT_4_L+0xc>)
 800240a:	2104      	movs	r1, #4
 800240c:	7990      	ldrb	r0, [r2, #6]
 800240e:	f000 bfab 	b.w	8003368 <vGBFunctionBIT>
 8002412:	bf00      	nop
 8002414:	2400125c 	.word	0x2400125c

08002418 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002418:	b510      	push	{r4, lr}
 800241a:	4c05      	ldr	r4, [pc, #20]	; (8002430 <vBIT_4_HL+0x18>)
 800241c:	88e0      	ldrh	r0, [r4, #6]
 800241e:	f001 f875 	bl	800350c <ucGBMemoryRead>
 8002422:	4622      	mov	r2, r4
 8002424:	2104      	movs	r1, #4
 8002426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242a:	f000 bf9d 	b.w	8003368 <vGBFunctionBIT>
 800242e:	bf00      	nop
 8002430:	2400125c 	.word	0x2400125c

08002434 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <vBIT_4_A+0xc>)
 8002436:	2104      	movs	r1, #4
 8002438:	7850      	ldrb	r0, [r2, #1]
 800243a:	f000 bf95 	b.w	8003368 <vGBFunctionBIT>
 800243e:	bf00      	nop
 8002440:	2400125c 	.word	0x2400125c

08002444 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 8002444:	4a02      	ldr	r2, [pc, #8]	; (8002450 <vBIT_5_B+0xc>)
 8002446:	2105      	movs	r1, #5
 8002448:	78d0      	ldrb	r0, [r2, #3]
 800244a:	f000 bf8d 	b.w	8003368 <vGBFunctionBIT>
 800244e:	bf00      	nop
 8002450:	2400125c 	.word	0x2400125c

08002454 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <vBIT_5_C+0xc>)
 8002456:	2105      	movs	r1, #5
 8002458:	7890      	ldrb	r0, [r2, #2]
 800245a:	f000 bf85 	b.w	8003368 <vGBFunctionBIT>
 800245e:	bf00      	nop
 8002460:	2400125c 	.word	0x2400125c

08002464 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002464:	4a02      	ldr	r2, [pc, #8]	; (8002470 <vBIT_5_D+0xc>)
 8002466:	2105      	movs	r1, #5
 8002468:	7950      	ldrb	r0, [r2, #5]
 800246a:	f000 bf7d 	b.w	8003368 <vGBFunctionBIT>
 800246e:	bf00      	nop
 8002470:	2400125c 	.word	0x2400125c

08002474 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002474:	4a02      	ldr	r2, [pc, #8]	; (8002480 <vBIT_5_E+0xc>)
 8002476:	2105      	movs	r1, #5
 8002478:	7910      	ldrb	r0, [r2, #4]
 800247a:	f000 bf75 	b.w	8003368 <vGBFunctionBIT>
 800247e:	bf00      	nop
 8002480:	2400125c 	.word	0x2400125c

08002484 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <vBIT_5_H+0xc>)
 8002486:	2105      	movs	r1, #5
 8002488:	79d0      	ldrb	r0, [r2, #7]
 800248a:	f000 bf6d 	b.w	8003368 <vGBFunctionBIT>
 800248e:	bf00      	nop
 8002490:	2400125c 	.word	0x2400125c

08002494 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <vBIT_5_L+0xc>)
 8002496:	2105      	movs	r1, #5
 8002498:	7990      	ldrb	r0, [r2, #6]
 800249a:	f000 bf65 	b.w	8003368 <vGBFunctionBIT>
 800249e:	bf00      	nop
 80024a0:	2400125c 	.word	0x2400125c

080024a4 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4c05      	ldr	r4, [pc, #20]	; (80024bc <vBIT_5_HL+0x18>)
 80024a8:	88e0      	ldrh	r0, [r4, #6]
 80024aa:	f001 f82f 	bl	800350c <ucGBMemoryRead>
 80024ae:	4622      	mov	r2, r4
 80024b0:	2105      	movs	r1, #5
 80024b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b6:	f000 bf57 	b.w	8003368 <vGBFunctionBIT>
 80024ba:	bf00      	nop
 80024bc:	2400125c 	.word	0x2400125c

080024c0 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <vBIT_5_A+0xc>)
 80024c2:	2105      	movs	r1, #5
 80024c4:	7850      	ldrb	r0, [r2, #1]
 80024c6:	f000 bf4f 	b.w	8003368 <vGBFunctionBIT>
 80024ca:	bf00      	nop
 80024cc:	2400125c 	.word	0x2400125c

080024d0 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024d0:	4a02      	ldr	r2, [pc, #8]	; (80024dc <vBIT_6_B+0xc>)
 80024d2:	2106      	movs	r1, #6
 80024d4:	78d0      	ldrb	r0, [r2, #3]
 80024d6:	f000 bf47 	b.w	8003368 <vGBFunctionBIT>
 80024da:	bf00      	nop
 80024dc:	2400125c 	.word	0x2400125c

080024e0 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80024e0:	4a02      	ldr	r2, [pc, #8]	; (80024ec <vBIT_6_C+0xc>)
 80024e2:	2106      	movs	r1, #6
 80024e4:	7890      	ldrb	r0, [r2, #2]
 80024e6:	f000 bf3f 	b.w	8003368 <vGBFunctionBIT>
 80024ea:	bf00      	nop
 80024ec:	2400125c 	.word	0x2400125c

080024f0 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <vBIT_6_D+0xc>)
 80024f2:	2106      	movs	r1, #6
 80024f4:	7950      	ldrb	r0, [r2, #5]
 80024f6:	f000 bf37 	b.w	8003368 <vGBFunctionBIT>
 80024fa:	bf00      	nop
 80024fc:	2400125c 	.word	0x2400125c

08002500 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002500:	4a02      	ldr	r2, [pc, #8]	; (800250c <vBIT_6_E+0xc>)
 8002502:	2106      	movs	r1, #6
 8002504:	7910      	ldrb	r0, [r2, #4]
 8002506:	f000 bf2f 	b.w	8003368 <vGBFunctionBIT>
 800250a:	bf00      	nop
 800250c:	2400125c 	.word	0x2400125c

08002510 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002510:	4a02      	ldr	r2, [pc, #8]	; (800251c <vBIT_6_H+0xc>)
 8002512:	2106      	movs	r1, #6
 8002514:	79d0      	ldrb	r0, [r2, #7]
 8002516:	f000 bf27 	b.w	8003368 <vGBFunctionBIT>
 800251a:	bf00      	nop
 800251c:	2400125c 	.word	0x2400125c

08002520 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <vBIT_6_L+0xc>)
 8002522:	2106      	movs	r1, #6
 8002524:	7990      	ldrb	r0, [r2, #6]
 8002526:	f000 bf1f 	b.w	8003368 <vGBFunctionBIT>
 800252a:	bf00      	nop
 800252c:	2400125c 	.word	0x2400125c

08002530 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002530:	b510      	push	{r4, lr}
 8002532:	4c05      	ldr	r4, [pc, #20]	; (8002548 <vBIT_6_HL+0x18>)
 8002534:	88e0      	ldrh	r0, [r4, #6]
 8002536:	f000 ffe9 	bl	800350c <ucGBMemoryRead>
 800253a:	4622      	mov	r2, r4
 800253c:	2106      	movs	r1, #6
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002542:	f000 bf11 	b.w	8003368 <vGBFunctionBIT>
 8002546:	bf00      	nop
 8002548:	2400125c 	.word	0x2400125c

0800254c <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <vBIT_6_A+0xc>)
 800254e:	2106      	movs	r1, #6
 8002550:	7850      	ldrb	r0, [r2, #1]
 8002552:	f000 bf09 	b.w	8003368 <vGBFunctionBIT>
 8002556:	bf00      	nop
 8002558:	2400125c 	.word	0x2400125c

0800255c <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 800255c:	4a02      	ldr	r2, [pc, #8]	; (8002568 <vBIT_7_B+0xc>)
 800255e:	2107      	movs	r1, #7
 8002560:	78d0      	ldrb	r0, [r2, #3]
 8002562:	f000 bf01 	b.w	8003368 <vGBFunctionBIT>
 8002566:	bf00      	nop
 8002568:	2400125c 	.word	0x2400125c

0800256c <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <vBIT_7_C+0xc>)
 800256e:	2107      	movs	r1, #7
 8002570:	7890      	ldrb	r0, [r2, #2]
 8002572:	f000 bef9 	b.w	8003368 <vGBFunctionBIT>
 8002576:	bf00      	nop
 8002578:	2400125c 	.word	0x2400125c

0800257c <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <vBIT_7_D+0xc>)
 800257e:	2107      	movs	r1, #7
 8002580:	7950      	ldrb	r0, [r2, #5]
 8002582:	f000 bef1 	b.w	8003368 <vGBFunctionBIT>
 8002586:	bf00      	nop
 8002588:	2400125c 	.word	0x2400125c

0800258c <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <vBIT_7_E+0xc>)
 800258e:	2107      	movs	r1, #7
 8002590:	7910      	ldrb	r0, [r2, #4]
 8002592:	f000 bee9 	b.w	8003368 <vGBFunctionBIT>
 8002596:	bf00      	nop
 8002598:	2400125c 	.word	0x2400125c

0800259c <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <vBIT_7_H+0xc>)
 800259e:	2107      	movs	r1, #7
 80025a0:	79d0      	ldrb	r0, [r2, #7]
 80025a2:	f000 bee1 	b.w	8003368 <vGBFunctionBIT>
 80025a6:	bf00      	nop
 80025a8:	2400125c 	.word	0x2400125c

080025ac <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <vBIT_7_L+0xc>)
 80025ae:	2107      	movs	r1, #7
 80025b0:	7990      	ldrb	r0, [r2, #6]
 80025b2:	f000 bed9 	b.w	8003368 <vGBFunctionBIT>
 80025b6:	bf00      	nop
 80025b8:	2400125c 	.word	0x2400125c

080025bc <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025bc:	b510      	push	{r4, lr}
 80025be:	4c05      	ldr	r4, [pc, #20]	; (80025d4 <vBIT_7_HL+0x18>)
 80025c0:	88e0      	ldrh	r0, [r4, #6]
 80025c2:	f000 ffa3 	bl	800350c <ucGBMemoryRead>
 80025c6:	4622      	mov	r2, r4
 80025c8:	2107      	movs	r1, #7
 80025ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ce:	f000 becb 	b.w	8003368 <vGBFunctionBIT>
 80025d2:	bf00      	nop
 80025d4:	2400125c 	.word	0x2400125c

080025d8 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <vBIT_7_A+0xc>)
 80025da:	2107      	movs	r1, #7
 80025dc:	7850      	ldrb	r0, [r2, #1]
 80025de:	f000 bec3 	b.w	8003368 <vGBFunctionBIT>
 80025e2:	bf00      	nop
 80025e4:	2400125c 	.word	0x2400125c

080025e8 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <vRES_0_HL+0x1c>)
 80025ea:	2100      	movs	r1, #0
 80025ec:	b510      	push	{r4, lr}
 80025ee:	88dc      	ldrh	r4, [r3, #6]
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fed1 	bl	8003398 <ucGBFunctionRESHL>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4620      	mov	r0, r4
 80025fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025fe:	f000 bf23 	b.w	8003448 <vGBMemoryWrite>
 8002602:	bf00      	nop
 8002604:	2400125c 	.word	0x2400125c

08002608 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <vRES_1_HL+0x1c>)
 800260a:	2101      	movs	r1, #1
 800260c:	b510      	push	{r4, lr}
 800260e:	88dc      	ldrh	r4, [r3, #6]
 8002610:	4620      	mov	r0, r4
 8002612:	f000 fec1 	bl	8003398 <ucGBFunctionRESHL>
 8002616:	4601      	mov	r1, r0
 8002618:	4620      	mov	r0, r4
 800261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261e:	f000 bf13 	b.w	8003448 <vGBMemoryWrite>
 8002622:	bf00      	nop
 8002624:	2400125c 	.word	0x2400125c

08002628 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <vRES_2_HL+0x1c>)
 800262a:	2102      	movs	r1, #2
 800262c:	b510      	push	{r4, lr}
 800262e:	88dc      	ldrh	r4, [r3, #6]
 8002630:	4620      	mov	r0, r4
 8002632:	f000 feb1 	bl	8003398 <ucGBFunctionRESHL>
 8002636:	4601      	mov	r1, r0
 8002638:	4620      	mov	r0, r4
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263e:	f000 bf03 	b.w	8003448 <vGBMemoryWrite>
 8002642:	bf00      	nop
 8002644:	2400125c 	.word	0x2400125c

08002648 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <vRES_3_HL+0x1c>)
 800264a:	2103      	movs	r1, #3
 800264c:	b510      	push	{r4, lr}
 800264e:	88dc      	ldrh	r4, [r3, #6]
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fea1 	bl	8003398 <ucGBFunctionRESHL>
 8002656:	4601      	mov	r1, r0
 8002658:	4620      	mov	r0, r4
 800265a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265e:	f000 bef3 	b.w	8003448 <vGBMemoryWrite>
 8002662:	bf00      	nop
 8002664:	2400125c 	.word	0x2400125c

08002668 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <vRES_4_HL+0x1c>)
 800266a:	2104      	movs	r1, #4
 800266c:	b510      	push	{r4, lr}
 800266e:	88dc      	ldrh	r4, [r3, #6]
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fe91 	bl	8003398 <ucGBFunctionRESHL>
 8002676:	4601      	mov	r1, r0
 8002678:	4620      	mov	r0, r4
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	f000 bee3 	b.w	8003448 <vGBMemoryWrite>
 8002682:	bf00      	nop
 8002684:	2400125c 	.word	0x2400125c

08002688 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <vRES_5_HL+0x1c>)
 800268a:	2105      	movs	r1, #5
 800268c:	b510      	push	{r4, lr}
 800268e:	88dc      	ldrh	r4, [r3, #6]
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fe81 	bl	8003398 <ucGBFunctionRESHL>
 8002696:	4601      	mov	r1, r0
 8002698:	4620      	mov	r0, r4
 800269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800269e:	f000 bed3 	b.w	8003448 <vGBMemoryWrite>
 80026a2:	bf00      	nop
 80026a4:	2400125c 	.word	0x2400125c

080026a8 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <vRES_6_HL+0x1c>)
 80026aa:	2106      	movs	r1, #6
 80026ac:	b510      	push	{r4, lr}
 80026ae:	88dc      	ldrh	r4, [r3, #6]
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fe71 	bl	8003398 <ucGBFunctionRESHL>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4620      	mov	r0, r4
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026be:	f000 bec3 	b.w	8003448 <vGBMemoryWrite>
 80026c2:	bf00      	nop
 80026c4:	2400125c 	.word	0x2400125c

080026c8 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <vRES_7_HL+0x1c>)
 80026ca:	2107      	movs	r1, #7
 80026cc:	b510      	push	{r4, lr}
 80026ce:	88dc      	ldrh	r4, [r3, #6]
 80026d0:	4620      	mov	r0, r4
 80026d2:	f000 fe61 	bl	8003398 <ucGBFunctionRESHL>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4620      	mov	r0, r4
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026de:	f000 beb3 	b.w	8003448 <vGBMemoryWrite>
 80026e2:	bf00      	nop
 80026e4:	2400125c 	.word	0x2400125c

080026e8 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <vSET_0_HL+0x1c>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	b510      	push	{r4, lr}
 80026ee:	88dc      	ldrh	r4, [r3, #6]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 fe5d 	bl	80033b0 <ucGBFunctionSETHL>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4620      	mov	r0, r4
 80026fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fe:	f000 bea3 	b.w	8003448 <vGBMemoryWrite>
 8002702:	bf00      	nop
 8002704:	2400125c 	.word	0x2400125c

08002708 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <vSET_1_HL+0x1c>)
 800270a:	2101      	movs	r1, #1
 800270c:	b510      	push	{r4, lr}
 800270e:	88dc      	ldrh	r4, [r3, #6]
 8002710:	4620      	mov	r0, r4
 8002712:	f000 fe4d 	bl	80033b0 <ucGBFunctionSETHL>
 8002716:	4601      	mov	r1, r0
 8002718:	4620      	mov	r0, r4
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271e:	f000 be93 	b.w	8003448 <vGBMemoryWrite>
 8002722:	bf00      	nop
 8002724:	2400125c 	.word	0x2400125c

08002728 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <vSET_2_HL+0x1c>)
 800272a:	2102      	movs	r1, #2
 800272c:	b510      	push	{r4, lr}
 800272e:	88dc      	ldrh	r4, [r3, #6]
 8002730:	4620      	mov	r0, r4
 8002732:	f000 fe3d 	bl	80033b0 <ucGBFunctionSETHL>
 8002736:	4601      	mov	r1, r0
 8002738:	4620      	mov	r0, r4
 800273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273e:	f000 be83 	b.w	8003448 <vGBMemoryWrite>
 8002742:	bf00      	nop
 8002744:	2400125c 	.word	0x2400125c

08002748 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <vSET_3_HL+0x1c>)
 800274a:	2103      	movs	r1, #3
 800274c:	b510      	push	{r4, lr}
 800274e:	88dc      	ldrh	r4, [r3, #6]
 8002750:	4620      	mov	r0, r4
 8002752:	f000 fe2d 	bl	80033b0 <ucGBFunctionSETHL>
 8002756:	4601      	mov	r1, r0
 8002758:	4620      	mov	r0, r4
 800275a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275e:	f000 be73 	b.w	8003448 <vGBMemoryWrite>
 8002762:	bf00      	nop
 8002764:	2400125c 	.word	0x2400125c

08002768 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <vSET_4_HL+0x1c>)
 800276a:	2104      	movs	r1, #4
 800276c:	b510      	push	{r4, lr}
 800276e:	88dc      	ldrh	r4, [r3, #6]
 8002770:	4620      	mov	r0, r4
 8002772:	f000 fe1d 	bl	80033b0 <ucGBFunctionSETHL>
 8002776:	4601      	mov	r1, r0
 8002778:	4620      	mov	r0, r4
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277e:	f000 be63 	b.w	8003448 <vGBMemoryWrite>
 8002782:	bf00      	nop
 8002784:	2400125c 	.word	0x2400125c

08002788 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <vSET_5_HL+0x1c>)
 800278a:	2105      	movs	r1, #5
 800278c:	b510      	push	{r4, lr}
 800278e:	88dc      	ldrh	r4, [r3, #6]
 8002790:	4620      	mov	r0, r4
 8002792:	f000 fe0d 	bl	80033b0 <ucGBFunctionSETHL>
 8002796:	4601      	mov	r1, r0
 8002798:	4620      	mov	r0, r4
 800279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279e:	f000 be53 	b.w	8003448 <vGBMemoryWrite>
 80027a2:	bf00      	nop
 80027a4:	2400125c 	.word	0x2400125c

080027a8 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <vSET_6_HL+0x1c>)
 80027aa:	2106      	movs	r1, #6
 80027ac:	b510      	push	{r4, lr}
 80027ae:	88dc      	ldrh	r4, [r3, #6]
 80027b0:	4620      	mov	r0, r4
 80027b2:	f000 fdfd 	bl	80033b0 <ucGBFunctionSETHL>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027be:	f000 be43 	b.w	8003448 <vGBMemoryWrite>
 80027c2:	bf00      	nop
 80027c4:	2400125c 	.word	0x2400125c

080027c8 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <vSET_7_HL+0x1c>)
 80027ca:	2107      	movs	r1, #7
 80027cc:	b510      	push	{r4, lr}
 80027ce:	88dc      	ldrh	r4, [r3, #6]
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 fded 	bl	80033b0 <ucGBFunctionSETHL>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4620      	mov	r0, r4
 80027da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027de:	f000 be33 	b.w	8003448 <vGBMemoryWrite>
 80027e2:	bf00      	nop
 80027e4:	2400125c 	.word	0x2400125c

080027e8 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <vCCF+0x38>)
 80027ec:	2106      	movs	r1, #6
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f9b2 	bl	8002b58 <resetbit>
 80027f4:	4620      	mov	r0, r4
 80027f6:	2105      	movs	r1, #5
 80027f8:	f000 f9ae 	bl	8002b58 <resetbit>
 80027fc:	7820      	ldrb	r0, [r4, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	f000 f9b2 	bl	8002b68 <checkbit>
 8002804:	b128      	cbz	r0, 8002812 <vCCF+0x2a>
 8002806:	4620      	mov	r0, r4
 8002808:	2104      	movs	r1, #4
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280e:	f000 b9a3 	b.w	8002b58 <resetbit>
 8002812:	4620      	mov	r0, r4
 8002814:	2104      	movs	r1, #4
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	f000 b995 	b.w	8002b48 <setbit>
 800281e:	bf00      	nop
 8002820:	2400125c 	.word	0x2400125c

08002824 <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002824:	4901      	ldr	r1, [pc, #4]	; (800282c <vRET_C.part.0+0x8>)
 8002826:	1e88      	subs	r0, r1, #2
 8002828:	f000 bbca 	b.w	8002fc0 <vGBFunctionRET>
 800282c:	24001266 	.word	0x24001266

08002830 <vRET_NZ>:
 8002830:	b510      	push	{r4, lr}
 8002832:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <vRET_NZ+0x30>)
 8002834:	2107      	movs	r1, #7
 8002836:	7820      	ldrb	r0, [r4, #0]
 8002838:	f000 f996 	bl	8002b68 <checkbit>
 800283c:	2800      	cmp	r0, #0
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <vRET_NZ+0x34>)
 8002840:	f04f 0107 	mov.w	r1, #7
 8002844:	bf14      	ite	ne
 8002846:	2208      	movne	r2, #8
 8002848:	2214      	moveq	r2, #20
 800284a:	7820      	ldrb	r0, [r4, #0]
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	f000 f98b 	bl	8002b68 <checkbit>
 8002852:	b100      	cbz	r0, 8002856 <vRET_NZ+0x26>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800285a:	f7ff bfe3 	b.w	8002824 <vRET_C.part.0>
 800285e:	bf00      	nop
 8002860:	2400125c 	.word	0x2400125c
 8002864:	24001094 	.word	0x24001094

08002868 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002868:	b510      	push	{r4, lr}
 800286a:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <vRET_Z+0x30>)
 800286c:	2107      	movs	r1, #7
 800286e:	7820      	ldrb	r0, [r4, #0]
 8002870:	f000 f97a 	bl	8002b68 <checkbit>
 8002874:	2800      	cmp	r0, #0
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <vRET_Z+0x34>)
 8002878:	f04f 0107 	mov.w	r1, #7
 800287c:	bf14      	ite	ne
 800287e:	2214      	movne	r2, #20
 8002880:	2208      	moveq	r2, #8
 8002882:	7820      	ldrb	r0, [r4, #0]
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	f000 f96f 	bl	8002b68 <checkbit>
 800288a:	b900      	cbnz	r0, 800288e <vRET_Z+0x26>
 800288c:	bd10      	pop	{r4, pc}
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002892:	f7ff bfc7 	b.w	8002824 <vRET_C.part.0>
 8002896:	bf00      	nop
 8002898:	2400125c 	.word	0x2400125c
 800289c:	24001094 	.word	0x24001094

080028a0 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4c0b      	ldr	r4, [pc, #44]	; (80028d0 <vRET_NC+0x30>)
 80028a4:	2104      	movs	r1, #4
 80028a6:	7820      	ldrb	r0, [r4, #0]
 80028a8:	f000 f95e 	bl	8002b68 <checkbit>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <vRET_NC+0x34>)
 80028b0:	f04f 0104 	mov.w	r1, #4
 80028b4:	bf14      	ite	ne
 80028b6:	2208      	movne	r2, #8
 80028b8:	2214      	moveq	r2, #20
 80028ba:	7820      	ldrb	r0, [r4, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	f000 f953 	bl	8002b68 <checkbit>
 80028c2:	b100      	cbz	r0, 80028c6 <vRET_NC+0x26>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ca:	f7ff bfab 	b.w	8002824 <vRET_C.part.0>
 80028ce:	bf00      	nop
 80028d0:	2400125c 	.word	0x2400125c
 80028d4:	24001094 	.word	0x24001094

080028d8 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028d8:	b510      	push	{r4, lr}
 80028da:	4c0b      	ldr	r4, [pc, #44]	; (8002908 <vRET_C+0x30>)
 80028dc:	2104      	movs	r1, #4
 80028de:	7820      	ldrb	r0, [r4, #0]
 80028e0:	f000 f942 	bl	8002b68 <checkbit>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <vRET_C+0x34>)
 80028e8:	f04f 0104 	mov.w	r1, #4
 80028ec:	bf14      	ite	ne
 80028ee:	2214      	movne	r2, #20
 80028f0:	2208      	moveq	r2, #8
 80028f2:	7820      	ldrb	r0, [r4, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	f000 f937 	bl	8002b68 <checkbit>
 80028fa:	b900      	cbnz	r0, 80028fe <vRET_C+0x26>
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002902:	f7ff bf8f 	b.w	8002824 <vRET_C.part.0>
 8002906:	bf00      	nop
 8002908:	2400125c 	.word	0x2400125c
 800290c:	24001094 	.word	0x24001094

08002910 <vLD_A_A>:
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <vLD_B_B>:
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <vLD_C_C>:
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <vLD_D_D>:
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <vLD_E_E>:
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <vLD_H_H>:
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <vLD_L_L>:
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 800292c:	4b01      	ldr	r3, [pc, #4]	; (8002934 <ucGetTstate+0x8>)
}
 800292e:	7818      	ldrb	r0, [r3, #0]
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2400109d 	.word	0x2400109d

08002938 <vGBCPUInterruptHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUInterruptHandler(){
 8002938:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 800293a:	4d39      	ldr	r5, [pc, #228]	; (8002a20 <vGBCPUInterruptHandler+0xe8>)
 800293c:	782c      	ldrb	r4, [r5, #0]
 800293e:	2c01      	cmp	r4, #1
 8002940:	d002      	beq.n	8002948 <vGBCPUInterruptHandler+0x10>

			tStates += 5*4;
		}

	}else{
		ucOneCycleInterruptDelay++;
 8002942:	3401      	adds	r4, #1
 8002944:	702c      	strb	r4, [r5, #0]
	}
}
 8002946:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800294c:	f000 fdde 	bl	800350c <ucGBMemoryRead>
 8002950:	4606      	mov	r6, r0
 8002952:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002956:	f000 fdd9 	bl	800350c <ucGBMemoryRead>
 800295a:	4030      	ands	r0, r6
 800295c:	06c6      	lsls	r6, r0, #27
 800295e:	d0f2      	beq.n	8002946 <vGBCPUInterruptHandler+0xe>
			ucInterruptMasterEnable = 0;
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <vGBCPUInterruptHandler+0xec>)
 8002962:	2600      	movs	r6, #0
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002964:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucInterruptMasterEnable = 0;
 8002968:	701e      	strb	r6, [r3, #0]
			ucOneCycleInterruptDelay = 0;
 800296a:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800296c:	f000 fdce 	bl	800350c <ucGBMemoryRead>
 8002970:	4605      	mov	r5, r0
 8002972:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002976:	f000 fdc9 	bl	800350c <ucGBMemoryRead>
 800297a:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800297c:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800297e:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 8002980:	d40c      	bmi.n	800299c <vGBCPUInterruptHandler+0x64>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 8002982:	0798      	lsls	r0, r3, #30
 8002984:	d417      	bmi.n	80029b6 <vGBCPUInterruptHandler+0x7e>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 8002986:	0759      	lsls	r1, r3, #29
 8002988:	d422      	bmi.n	80029d0 <vGBCPUInterruptHandler+0x98>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 800298a:	071a      	lsls	r2, r3, #28
 800298c:	d42d      	bmi.n	80029ea <vGBCPUInterruptHandler+0xb2>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 800298e:	06db      	lsls	r3, r3, #27
 8002990:	d438      	bmi.n	8002a04 <vGBCPUInterruptHandler+0xcc>
			tStates += 5*4;
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <vGBCPUInterruptHandler+0xf0>)
 8002994:	7813      	ldrb	r3, [r2, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	7013      	strb	r3, [r2, #0]
}
 800299a:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800299c:	4631      	mov	r1, r6
 800299e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029a2:	f000 fd97 	bl	80034d4 <vGBMemoryResetBit>
 80029a6:	4921      	ldr	r1, [pc, #132]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029a8:	1e88      	subs	r0, r1, #2
 80029aa:	f000 fb27 	bl	8002ffc <vGBFunctionPUSH>
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	815a      	strh	r2, [r3, #10]
 80029b4:	e7ed      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029b6:	4621      	mov	r1, r4
 80029b8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029bc:	f000 fd8a 	bl	80034d4 <vGBMemoryResetBit>
 80029c0:	491a      	ldr	r1, [pc, #104]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029c2:	1e88      	subs	r0, r1, #2
 80029c4:	f000 fb1a 	bl	8002ffc <vGBFunctionPUSH>
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029ca:	2248      	movs	r2, #72	; 0x48
 80029cc:	815a      	strh	r2, [r3, #10]
 80029ce:	e7e0      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029d0:	2102      	movs	r1, #2
 80029d2:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029d6:	f000 fd7d 	bl	80034d4 <vGBMemoryResetBit>
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029dc:	1e88      	subs	r0, r1, #2
 80029de:	f000 fb0d 	bl	8002ffc <vGBFunctionPUSH>
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029e4:	2250      	movs	r2, #80	; 0x50
 80029e6:	815a      	strh	r2, [r3, #10]
 80029e8:	e7d3      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 80029ea:	2103      	movs	r1, #3
 80029ec:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029f0:	f000 fd70 	bl	80034d4 <vGBMemoryResetBit>
 80029f4:	490d      	ldr	r1, [pc, #52]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029f6:	1e88      	subs	r0, r1, #2
 80029f8:	f000 fb00 	bl	8002ffc <vGBFunctionPUSH>
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029fe:	2258      	movs	r2, #88	; 0x58
 8002a00:	815a      	strh	r2, [r3, #10]
 8002a02:	e7c6      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 8002a04:	2104      	movs	r1, #4
 8002a06:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a0a:	f000 fd63 	bl	80034d4 <vGBMemoryResetBit>
 8002a0e:	4907      	ldr	r1, [pc, #28]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 8002a10:	1e88      	subs	r0, r1, #2
 8002a12:	f000 faf3 	bl	8002ffc <vGBFunctionPUSH>
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 8002a18:	2260      	movs	r2, #96	; 0x60
 8002a1a:	815a      	strh	r2, [r3, #10]
 8002a1c:	e7b9      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
 8002a1e:	bf00      	nop
 8002a20:	240010a0 	.word	0x240010a0
 8002a24:	2400109f 	.word	0x2400109f
 8002a28:	2400109d 	.word	0x2400109d
 8002a2c:	24001266 	.word	0x24001266
 8002a30:	2400125c 	.word	0x2400125c

08002a34 <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002a34:	b570      	push	{r4, r5, r6, lr}

	if(reg.PC == 0x7f86){
 8002a36:	4d25      	ldr	r5, [pc, #148]	; (8002acc <vGBCPUinstr+0x98>)
 8002a38:	f647 7386 	movw	r3, #32646	; 0x7f86
void vGBCPUinstr(uint8_t opcode){
 8002a3c:	4604      	mov	r4, r0
	if(reg.PC == 0x7f86){
 8002a3e:	896a      	ldrh	r2, [r5, #10]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d103      	bne.n	8002a4c <vGBCPUinstr+0x18>
		num++;
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <vGBCPUinstr+0x9c>)
 8002a46:	7813      	ldrb	r3, [r2, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	7013      	strb	r3, [r2, #0]
	}
	vGBMemorySetOP(opcode);
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 fcb9 	bl	80033c4 <vGBMemorySetOP>

	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a52:	2ccb      	cmp	r4, #203	; 0xcb
 8002a54:	d01f      	beq.n	8002a96 <vGBCPUinstr+0x62>
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <vGBCPUinstr+0xa0>)
 8002a58:	8969      	ldrh	r1, [r5, #10]
 8002a5a:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002a5e:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a62:	7933      	ldrb	r3, [r6, #4]
 8002a64:	440b      	add	r3, r1
 8002a66:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002a68:	4790      	blx	r2

	if (opcode == 0xCB){
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
	}else if(instructions[opcode].Tstate == 255){
 8002a6a:	7973      	ldrb	r3, [r6, #5]
 8002a6c:	2bff      	cmp	r3, #255	; 0xff
 8002a6e:	d006      	beq.n	8002a7e <vGBCPUinstr+0x4a>
		tStates = customDuration;
	}else{
		tStates = instructions[opcode].Tstate;
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <vGBCPUinstr+0xa4>)
 8002a72:	7013      	strb	r3, [r2, #0]
	}

	if(ucInterruptMasterEnable == 1)
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <vGBCPUinstr+0xa8>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d008      	beq.n	8002a8e <vGBCPUinstr+0x5a>
			vGBCPUInterruptHandler();

	//if( print == 1)
	//	vGBMemoryPrint();
}
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
		tStates = customDuration;
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <vGBCPUinstr+0xac>)
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <vGBCPUinstr+0xa4>)
 8002a82:	7812      	ldrb	r2, [r2, #0]
 8002a84:	701a      	strb	r2, [r3, #0]
	if(ucInterruptMasterEnable == 1)
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <vGBCPUinstr+0xa8>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d1f6      	bne.n	8002a7c <vGBCPUinstr+0x48>
}
 8002a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vGBCPUInterruptHandler();
 8002a92:	f7ff bf51 	b.w	8002938 <vGBCPUInterruptHandler>
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a96:	8968      	ldrh	r0, [r5, #10]
 8002a98:	4c12      	ldr	r4, [pc, #72]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	b280      	uxth	r0, r0
 8002a9e:	f000 fd35 	bl	800350c <ucGBMemoryRead>
 8002aa2:	8969      	ldrh	r1, [r5, #10]
 8002aa4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <vGBCPUinstr+0xa0>)
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aaa:	7903      	ldrb	r3, [r0, #4]
	((void (*)(void))instructions[opcode].instr)();
 8002aac:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ab0:	440b      	add	r3, r1
 8002ab2:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002ab4:	4790      	blx	r2
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002ab6:	8968      	ldrh	r0, [r5, #10]
 8002ab8:	3801      	subs	r0, #1
 8002aba:	b280      	uxth	r0, r0
 8002abc:	f000 fd26 	bl	800350c <ucGBMemoryRead>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <vGBCPUinstr+0xa4>)
 8002ac2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002ac6:	7942      	ldrb	r2, [r0, #5]
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e7d3      	b.n	8002a74 <vGBCPUinstr+0x40>
 8002acc:	2400125c 	.word	0x2400125c
 8002ad0:	2400109c 	.word	0x2400109c
 8002ad4:	24000008 	.word	0x24000008
 8002ad8:	2400109d 	.word	0x2400109d
 8002adc:	2400109f 	.word	0x2400109f
 8002ae0:	24001094 	.word	0x24001094
 8002ae4:	24000808 	.word	0x24000808

08002ae8 <vGBCPUboot>:
void vGBCPUboot(){
 8002ae8:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002aea:	4c12      	ldr	r4, [pc, #72]	; (8002b34 <vGBCPUboot+0x4c>)
 8002aec:	8960      	ldrh	r0, [r4, #10]
 8002aee:	28ff      	cmp	r0, #255	; 0xff
 8002af0:	d90a      	bls.n	8002b08 <vGBCPUboot+0x20>
		numcount++;
 8002af2:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <vGBCPUboot+0x50>)
		if(n == 0){
 8002af4:	4d11      	ldr	r5, [pc, #68]	; (8002b3c <vGBCPUboot+0x54>)
		numcount++;
 8002af6:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002afa:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002afc:	3301      	adds	r3, #1
 8002afe:	f141 0100 	adc.w	r1, r1, #0
 8002b02:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002b06:	b12e      	cbz	r6, 8002b14 <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b08:	f000 fd00 	bl	800350c <ucGBMemoryRead>
}
 8002b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b10:	f7ff bf90 	b.w	8002a34 <vGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002b14:	f000 ff3a 	bl	800398c <getRomPointer>
 8002b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1c:	f000 fc68 	bl	80033f0 <vGBMemoryLoad>
			n = 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	8960      	ldrh	r0, [r4, #10]
 8002b24:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b26:	f000 fcf1 	bl	800350c <ucGBMemoryRead>
}
 8002b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b2e:	f7ff bf81 	b.w	8002a34 <vGBCPUinstr>
 8002b32:	bf00      	nop
 8002b34:	2400125c 	.word	0x2400125c
 8002b38:	24001250 	.word	0x24001250
 8002b3c:	24001098 	.word	0x24001098

08002b40 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002b40:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002b44:	b280      	uxth	r0, r0
 8002b46:	4770      	bx	lr

08002b48 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002b48:	2301      	movs	r3, #1
 8002b4a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b4e:	7803      	ldrb	r3, [r0, #0]
 8002b50:	4319      	orrs	r1, r3
 8002b52:	7001      	strb	r1, [r0, #0]
}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b5e:	7803      	ldrb	r3, [r0, #0]
 8002b60:	ea23 0101 	bic.w	r1, r3, r1
 8002b64:	7001      	strb	r1, [r0, #0]
}
 8002b66:	4770      	bx	lr

08002b68 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002b68:	4108      	asrs	r0, r1
}
 8002b6a:	f000 0001 	and.w	r0, r0, #1
 8002b6e:	4770      	bx	lr

08002b70 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002b70:	7803      	ldrb	r3, [r0, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002b78:	780b      	ldrb	r3, [r1, #0]
 8002b7a:	bf0c      	ite	eq
 8002b7c:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002b80:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002b84:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002b86:	7803      	ldrb	r3, [r0, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002b8c:	f991 2000 	ldrsb.w	r2, [r1]
 8002b90:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002b94:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002b96:	7800      	ldrb	r0, [r0, #0]
 8002b98:	b118      	cbz	r0, 8002ba2 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002b9a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002b9e:	700b      	strb	r3, [r1, #0]
}
 8002ba0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	700b      	strb	r3, [r1, #0]
}
 8002baa:	4770      	bx	lr

08002bac <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002bac:	7803      	ldrb	r3, [r0, #0]
 8002bae:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002bb2:	780b      	ldrb	r3, [r1, #0]
 8002bb4:	bf14      	ite	ne
 8002bb6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002bba:	f043 0320 	orreq.w	r3, r3, #32
 8002bbe:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002bc0:	7803      	ldrb	r3, [r0, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002bc6:	f991 3000 	ldrsb.w	r3, [r1]
 8002bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bce:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002bd0:	7802      	ldrb	r2, [r0, #0]
 8002bd2:	b12a      	cbz	r2, 8002be0 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bdc:	700b      	strb	r3, [r1, #0]
}
 8002bde:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002be0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	700b      	strb	r3, [r1, #0]
}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop

08002bec <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002bec:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002bee:	09d3      	lsrs	r3, r2, #7
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	2310      	movne	r3, #16
 8002bf6:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002bf8:	7803      	ldrb	r3, [r0, #0]
 8002bfa:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002bfc:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002c00:	7003      	strb	r3, [r0, #0]
}
 8002c02:	4770      	bx	lr

08002c04 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002c04:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c06:	f013 0301 	ands.w	r3, r3, #1
 8002c0a:	d007      	beq.n	8002c1c <vGBFunctionRRCA+0x18>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c10:	7803      	ldrb	r3, [r0, #0]
 8002c12:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c18:	7003      	strb	r3, [r0, #0]
}
 8002c1a:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c1c:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c1e:	7803      	ldrb	r3, [r0, #0]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop

08002c28 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002c28:	8803      	ldrh	r3, [r0, #0]
 8002c2a:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c2c:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002c2e:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c30:	d517      	bpl.n	8002c62 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002c32:	f992 3000 	ldrsb.w	r3, [r2]
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	b2dc      	uxtb	r4, r3
 8002c3c:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x0FFF) < (*regHL & 0x0FFF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c3e:	f3c1 050b 	ubfx	r5, r1, #0, #12
 8002c42:	8804      	ldrh	r4, [r0, #0]
 8002c44:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8002c48:	42a5      	cmp	r5, r4
 8002c4a:	d211      	bcs.n	8002c70 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002c54:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c56:	7813      	ldrb	r3, [r2, #0]
 8002c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002c5c:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002c5e:	7013      	strb	r3, [r2, #0]
}
 8002c60:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002c62:	f992 4000 	ldrsb.w	r4, [r2]
 8002c66:	f024 0310 	bic.w	r3, r4, #16
 8002c6a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002c6e:	e7e5      	b.n	8002c3c <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002c70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002c74:	e7ed      	b.n	8002c52 <vGBFunction16bitADD+0x2a>
 8002c76:	bf00      	nop

08002c78 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c78:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002c7c:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c7e:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002c80:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c84:	f002 0210 	and.w	r2, r2, #16
 8002c88:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002c8a:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002c8c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002c90:	7003      	strb	r3, [r0, #0]
}
 8002c92:	4770      	bx	lr

08002c94 <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002c94:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002c96:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002c98:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002c9a:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002c9c:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002ca0:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ca2:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002ca4:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002ca6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002caa:	7003      	strb	r3, [r0, #0]
}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002cb0:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002cb2:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002cb4:	09c9      	lsrs	r1, r1, #7
 8002cb6:	d105      	bne.n	8002cc4 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002cb8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002cba:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002cbc:	fa41 f282 	sxtab	r2, r1, r2
 8002cc0:	801a      	strh	r2, [r3, #0]
		return 12;
 8002cc2:	4770      	bx	lr
		return 8;
 8002cc4:	2008      	movs	r0, #8
	}
}
 8002cc6:	4770      	bx	lr

08002cc8 <vGBFunctionDAA>:
	return ((n >> bit) & 0x1);
 8002cc8:	780a      	ldrb	r2, [r1, #0]

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002cca:	b410      	push	{r4}
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002ccc:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002cd0:	7804      	ldrb	r4, [r0, #0]
 8002cd2:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cd4:	d019      	beq.n	8002d0a <vGBFunctionDAA+0x42>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort = ( tempShort - 0x06) & 0xFF;
 8002cd6:	0694      	lsls	r4, r2, #26
 8002cd8:	d501      	bpl.n	8002cde <vGBFunctionDAA+0x16>
 8002cda:	3b06      	subs	r3, #6
 8002cdc:	b2db      	uxtb	r3, r3
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort -= -0x60;
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002cde:	06d2      	lsls	r2, r2, #27
 8002ce0:	d501      	bpl.n	8002ce6 <vGBFunctionDAA+0x1e>
 8002ce2:	3360      	adds	r3, #96	; 0x60
 8002ce4:	b29b      	uxth	r3, r3
	}
	*regA = tempShort;
 8002ce6:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ce8:	f991 4000 	ldrsb.w	r4, [r1]
 8002cec:	f024 0220 	bic.w	r2, r4, #32
 8002cf0:	700a      	strb	r2, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002cf2:	7800      	ldrb	r0, [r0, #0]
 8002cf4:	b198      	cbz	r0, 8002d1e <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002cf6:	f004 025f 	and.w	r2, r4, #95	; 0x5f
	if(tempShort >= 0x100) setbit(flagReg, C_FLAG);
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
}
 8002cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002d00:	bf88      	it	hi
 8002d02:	f042 0210 	orrhi.w	r2, r2, #16
 8002d06:	700a      	strb	r2, [r1, #0]
}
 8002d08:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d0a:	f012 0f20 	tst.w	r2, #32
 8002d0e:	d00a      	beq.n	8002d26 <vGBFunctionDAA+0x5e>
 8002d10:	3306      	adds	r3, #6
 8002d12:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002d14:	2b9f      	cmp	r3, #159	; 0x9f
 8002d16:	d8e4      	bhi.n	8002ce2 <vGBFunctionDAA+0x1a>
 8002d18:	06d2      	lsls	r2, r2, #27
 8002d1a:	d5e4      	bpl.n	8002ce6 <vGBFunctionDAA+0x1e>
 8002d1c:	e7e1      	b.n	8002ce2 <vGBFunctionDAA+0x1a>
	(*n) |= (0x1 << bit);
 8002d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d22:	b2d2      	uxtb	r2, r2
}
 8002d24:	e7e9      	b.n	8002cfa <vGBFunctionDAA+0x32>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d26:	f004 040f 	and.w	r4, r4, #15
 8002d2a:	2c09      	cmp	r4, #9
 8002d2c:	d9f2      	bls.n	8002d14 <vGBFunctionDAA+0x4c>
 8002d2e:	e7ef      	b.n	8002d10 <vGBFunctionDAA+0x48>

08002d30 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002d30:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d32:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d34:	09c9      	lsrs	r1, r1, #7
 8002d36:	d005      	beq.n	8002d44 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002d38:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d3a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d3c:	fa41 f282 	sxtab	r2, r1, r2
 8002d40:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d42:	4770      	bx	lr
	}else{
		return 8;
 8002d44:	2008      	movs	r0, #8
	}
}
 8002d46:	4770      	bx	lr

08002d48 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002d48:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d4a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002d4c:	06c9      	lsls	r1, r1, #27
 8002d4e:	d405      	bmi.n	8002d5c <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002d50:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d52:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d54:	fa41 f282 	sxtab	r2, r1, r2
 8002d58:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d5a:	4770      	bx	lr
		return 8;
 8002d5c:	2008      	movs	r0, #8
	}
}
 8002d5e:	4770      	bx	lr

08002d60 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	460c      	mov	r4, r1
 8002d64:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d66:	f000 fbd1 	bl	800350c <ucGBMemoryRead>
 8002d6a:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002d6e:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d70:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d72:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002d74:	bf0c      	ite	eq
 8002d76:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002d7a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002d7e:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d80:	f000 fbc4 	bl	800350c <ucGBMemoryRead>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4628      	mov	r0, r5
 8002d88:	3101      	adds	r1, #1
 8002d8a:	b2c9      	uxtb	r1, r1
 8002d8c:	f000 fb5c 	bl	8003448 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002d90:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d92:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d9a:	f000 fbb7 	bl	800350c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002d9e:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002da0:	b118      	cbz	r0, 8002daa <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da6:	7023      	strb	r3, [r4, #0]
}
 8002da8:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	7023      	strb	r3, [r4, #0]
}
 8002db0:	bd38      	pop	{r3, r4, r5, pc}
 8002db2:	bf00      	nop

08002db4 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	460c      	mov	r4, r1
 8002db8:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002dba:	f000 fba7 	bl	800350c <ucGBMemoryRead>
 8002dbe:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002dc0:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002dc2:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002dc4:	bf14      	ite	ne
 8002dc6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002dca:	f043 0320 	orreq.w	r3, r3, #32
 8002dce:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002dd0:	f000 fb9c 	bl	800350c <ucGBMemoryRead>
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	3901      	subs	r1, #1
 8002dda:	b2c9      	uxtb	r1, r1
 8002ddc:	f000 fb34 	bl	8003448 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002de0:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002de2:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de8:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dea:	f000 fb8f 	bl	800350c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dee:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002df0:	b118      	cbz	r0, 8002dfa <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df6:	7023      	strb	r3, [r4, #0]
}
 8002df8:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfe:	7023      	strb	r3, [r4, #0]
}
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop

08002e04 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002e04:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e06:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e08:	06c9      	lsls	r1, r1, #27
 8002e0a:	d505      	bpl.n	8002e18 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002e0c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e0e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e10:	fa41 f282 	sxtab	r2, r1, r2
 8002e14:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e16:	4770      	bx	lr
	}else{
		return 8;
 8002e18:	2008      	movs	r0, #8
	}
}
 8002e1a:	4770      	bx	lr

08002e1c <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002e1c:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e1e:	b430      	push	{r4, r5}
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e20:	f002 050f 	and.w	r5, r2, #15
 8002e24:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002e28:	441a      	add	r2, r3
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e2a:	1963      	adds	r3, r4, r5
 8002e2c:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002e2e:	f991 3000 	ldrsb.w	r3, [r1]
 8002e32:	bfc8      	it	gt
 8002e34:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e38:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e3a:	b2d2      	uxtb	r2, r2
	(*n) &= ~(0x1 << bit);
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e40:	bfc8      	it	gt
 8002e42:	f043 0310 	orrgt.w	r3, r3, #16
 8002e46:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002e48:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e4a:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e4c:	b122      	cbz	r2, 8002e58 <vGBFunctionADD+0x3c>
	(*n) &= ~(0x1 << bit);
 8002e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e52:	bc30      	pop	{r4, r5}
 8002e54:	700b      	strb	r3, [r1, #0]
 8002e56:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002e5c:	bc30      	pop	{r4, r5}
 8002e5e:	700b      	strb	r3, [r1, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e64:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e66:	7804      	ldrb	r4, [r0, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e68:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e6c:	780b      	ldrb	r3, [r1, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e6e:	f004 050f 	and.w	r5, r4, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e72:	4422      	add	r2, r4
 8002e74:	f3c3 1400 	ubfx	r4, r3, #4, #1
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e78:	4435      	add	r5, r6
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e7a:	4422      	add	r2, r4
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e7c:	2d0f      	cmp	r5, #15
	(*n) |= (0x1 << bit);
 8002e7e:	bfc8      	it	gt
 8002e80:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e84:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e86:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002e88:	b25b      	sxtb	r3, r3
	(*n) &= ~(0x1 << bit);
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e8e:	bfc8      	it	gt
 8002e90:	f043 0310 	orrgt.w	r3, r3, #16
 8002e94:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002e96:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e98:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e9a:	b122      	cbz	r2, 8002ea6 <vGBFunctionADC+0x42>
	(*n) &= ~(0x1 << bit);
 8002e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ea0:	bc70      	pop	{r4, r5, r6}
 8002ea2:	700b      	strb	r3, [r1, #0]
 8002ea4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002eaa:	bc70      	pop	{r4, r5, r6}
 8002eac:	700b      	strb	r3, [r1, #0]
 8002eae:	4770      	bx	lr

08002eb0 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002eb0:	7803      	ldrb	r3, [r0, #0]
 8002eb2:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002eb4:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002eb6:	d21d      	bcs.n	8002ef4 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002eb8:	f991 3000 	ldrsb.w	r3, [r1]
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	b2dc      	uxtb	r4, r3
 8002ec2:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ec4:	f002 050f 	and.w	r5, r2, #15
 8002ec8:	7804      	ldrb	r4, [r0, #0]
 8002eca:	f004 040f 	and.w	r4, r4, #15
 8002ece:	42a5      	cmp	r5, r4
 8002ed0:	d920      	bls.n	8002f14 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002eda:	7803      	ldrb	r3, [r0, #0]
 8002edc:	1a9a      	subs	r2, r3, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ee2:	b172      	cbz	r2, 8002f02 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002ee4:	780b      	ldrb	r3, [r1, #0]
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002eee:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002ef0:	700b      	strb	r3, [r1, #0]
}
 8002ef2:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002ef4:	f991 4000 	ldrsb.w	r4, [r1]
 8002ef8:	f024 0310 	bic.w	r3, r4, #16
 8002efc:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002f00:	e7df      	b.n	8002ec2 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002f02:	f991 3000 	ldrsb.w	r3, [r1]
 8002f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f0e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f10:	700b      	strb	r3, [r1, #0]
}
 8002f12:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002f18:	e7de      	b.n	8002ed8 <vGBFunctionSUB+0x28>
 8002f1a:	bf00      	nop

08002f1c <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f1c:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f1e:	b430      	push	{r4, r5}
	return ((n >> bit) & 0x1);
 8002f20:	f3c3 1500 	ubfx	r5, r3, #4, #1
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f24:	7804      	ldrb	r4, [r0, #0]
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f26:	442a      	add	r2, r5
 8002f28:	b2d2      	uxtb	r2, r2
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f2a:	4294      	cmp	r4, r2
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f2c:	f002 050f 	and.w	r5, r2, #15
	(*n) |= (0x1 << bit);
 8002f30:	bf34      	ite	cc
 8002f32:	f043 0310 	orrcc.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002f36:	f023 0310 	biccs.w	r3, r3, #16
 8002f3a:	b25c      	sxtb	r4, r3
 8002f3c:	700b      	strb	r3, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f3e:	7803      	ldrb	r3, [r0, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	429d      	cmp	r5, r3
 8002f46:	d910      	bls.n	8002f6a <vGBFunctionSBC+0x4e>
	(*n) |= (0x1 << bit);
 8002f48:	f044 0320 	orr.w	r3, r4, #32
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002f50:	7803      	ldrb	r3, [r0, #0]
 8002f52:	1a9a      	subs	r2, r3, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f58:	b152      	cbz	r2, 8002f70 <vGBFunctionSBC+0x54>
	(*n) &= ~(0x1 << bit);
 8002f5a:	780b      	ldrb	r3, [r1, #0]
 8002f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002f64:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f66:	700b      	strb	r3, [r1, #0]
}
 8002f68:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f6a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
}
 8002f6e:	e7ee      	b.n	8002f4e <vGBFunctionSBC+0x32>
	(*n) |= (0x1 << bit);
 8002f70:	f991 3000 	ldrsb.w	r3, [r1]
 8002f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f7c:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f7e:	700b      	strb	r3, [r1, #0]
}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8002f84:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f88:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8002f8a:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f8c:	f002 040f 	and.w	r4, r2, #15
 8002f90:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8002f94:	bf8c      	ite	hi
 8002f96:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002f9a:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f9e:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8002fa0:	bf8c      	ite	hi
 8002fa2:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fa6:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8002faa:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8002fac:	bf0c      	ite	eq
 8002fae:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8002fb2:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fba:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002fbc:	700b      	strb	r3, [r1, #0]
}
 8002fbe:	4770      	bx	lr

08002fc0 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fc4:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fc6:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fc8:	f000 faa0 	bl	800350c <ucGBMemoryRead>
 8002fcc:	8823      	ldrh	r3, [r4, #0]
 8002fce:	4605      	mov	r5, r0
 8002fd0:	1c58      	adds	r0, r3, #1
 8002fd2:	b280      	uxth	r0, r0
 8002fd4:	f000 fa9a 	bl	800350c <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8002fd8:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fdc:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8002fde:	8823      	ldrh	r3, [r4, #0]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	8023      	strh	r3, [r4, #0]
}
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	bf00      	nop

08002fe8 <vGBFunctionPOP>:
 8002fe8:	f7ff bfea 	b.w	8002fc0 <vGBFunctionRET>

08002fec <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8002fec:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002fee:	09db      	lsrs	r3, r3, #7
 8002ff0:	d102      	bne.n	8002ff8 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8002ff2:	8002      	strh	r2, [r0, #0]
		return 16;
 8002ff4:	2010      	movs	r0, #16
 8002ff6:	4770      	bx	lr
		return 12;
 8002ff8:	200c      	movs	r0, #12
	}
}
 8002ffa:	4770      	bx	lr

08002ffc <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003000:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003002:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003004:	8809      	ldrh	r1, [r1, #0]
 8003006:	3801      	subs	r0, #1
 8003008:	0a09      	lsrs	r1, r1, #8
 800300a:	b280      	uxth	r0, r0
 800300c:	f000 fa1c 	bl	8003448 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003010:	8820      	ldrh	r0, [r4, #0]
 8003012:	7829      	ldrb	r1, [r5, #0]
 8003014:	3802      	subs	r0, #2
 8003016:	b280      	uxth	r0, r0
 8003018:	f000 fa16 	bl	8003448 <vGBMemoryWrite>
	*regSP -= 2;
 800301c:	8823      	ldrh	r3, [r4, #0]
 800301e:	3b02      	subs	r3, #2
 8003020:	8023      	strh	r3, [r4, #0]
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}

08003024 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003024:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003026:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003028:	09db      	lsrs	r3, r3, #7
 800302a:	d001      	beq.n	8003030 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 800302c:	200c      	movs	r0, #12
}
 800302e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003030:	4604      	mov	r4, r0
 8003032:	4610      	mov	r0, r2
 8003034:	4621      	mov	r1, r4
 8003036:	f7ff ffe1 	bl	8002ffc <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800303a:	8820      	ldrh	r0, [r4, #0]
 800303c:	3802      	subs	r0, #2
 800303e:	b280      	uxth	r0, r0
 8003040:	f000 fa64 	bl	800350c <ucGBMemoryRead>
 8003044:	8823      	ldrh	r3, [r4, #0]
 8003046:	4605      	mov	r5, r0
 8003048:	1e58      	subs	r0, r3, #1
 800304a:	b280      	uxth	r0, r0
 800304c:	f000 fa5e 	bl	800350c <ucGBMemoryRead>
 8003050:	4603      	mov	r3, r0
		return 24;
 8003052:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003054:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003058:	8025      	strh	r5, [r4, #0]
}
 800305a:	bd38      	pop	{r3, r4, r5, pc}

0800305c <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 800305c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800305e:	09db      	lsrs	r3, r3, #7
 8003060:	d002      	beq.n	8003068 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 8003062:	8002      	strh	r2, [r0, #0]
		return 16;
 8003064:	2010      	movs	r0, #16
 8003066:	4770      	bx	lr
	}else{
		return 12;
 8003068:	200c      	movs	r0, #12
	}
}
 800306a:	4770      	bx	lr

0800306c <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800306c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800306e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003070:	09db      	lsrs	r3, r3, #7
 8003072:	d101      	bne.n	8003078 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003074:	200c      	movs	r0, #12
	}
}
 8003076:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003078:	4604      	mov	r4, r0
 800307a:	4610      	mov	r0, r2
 800307c:	4621      	mov	r1, r4
 800307e:	f7ff ffbd 	bl	8002ffc <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003082:	8820      	ldrh	r0, [r4, #0]
 8003084:	3802      	subs	r0, #2
 8003086:	b280      	uxth	r0, r0
 8003088:	f000 fa40 	bl	800350c <ucGBMemoryRead>
 800308c:	8823      	ldrh	r3, [r4, #0]
 800308e:	4605      	mov	r5, r0
 8003090:	1e58      	subs	r0, r3, #1
 8003092:	b280      	uxth	r0, r0
 8003094:	f000 fa3a 	bl	800350c <ucGBMemoryRead>
 8003098:	4603      	mov	r3, r0
		return 24;
 800309a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800309c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030a0:	8025      	strh	r5, [r4, #0]
}
 80030a2:	bd38      	pop	{r3, r4, r5, pc}

080030a4 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 80030a4:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030a6:	06db      	lsls	r3, r3, #27
 80030a8:	d402      	bmi.n	80030b0 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 80030aa:	8002      	strh	r2, [r0, #0]
		return 16;
 80030ac:	2010      	movs	r0, #16
 80030ae:	4770      	bx	lr
		return 12;
 80030b0:	200c      	movs	r0, #12
	}
}
 80030b2:	4770      	bx	lr

080030b4 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030b4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030b6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030b8:	06db      	lsls	r3, r3, #27
 80030ba:	d501      	bpl.n	80030c0 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 80030bc:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 80030be:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030c0:	4604      	mov	r4, r0
 80030c2:	4610      	mov	r0, r2
 80030c4:	4621      	mov	r1, r4
 80030c6:	f7ff ff99 	bl	8002ffc <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030ca:	8820      	ldrh	r0, [r4, #0]
 80030cc:	3802      	subs	r0, #2
 80030ce:	b280      	uxth	r0, r0
 80030d0:	f000 fa1c 	bl	800350c <ucGBMemoryRead>
 80030d4:	8823      	ldrh	r3, [r4, #0]
 80030d6:	4605      	mov	r5, r0
 80030d8:	1e58      	subs	r0, r3, #1
 80030da:	b280      	uxth	r0, r0
 80030dc:	f000 fa16 	bl	800350c <ucGBMemoryRead>
 80030e0:	4603      	mov	r3, r0
		return 24;
 80030e2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030e4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030e8:	8025      	strh	r5, [r4, #0]
}
 80030ea:	bd38      	pop	{r3, r4, r5, pc}

080030ec <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 80030ec:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030ee:	06db      	lsls	r3, r3, #27
 80030f0:	d502      	bpl.n	80030f8 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 80030f2:	8002      	strh	r2, [r0, #0]
		return 16;
 80030f4:	2010      	movs	r0, #16
 80030f6:	4770      	bx	lr
	}else{
		return 12;
 80030f8:	200c      	movs	r0, #12
	}
}
 80030fa:	4770      	bx	lr

080030fc <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030fc:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030fe:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003100:	06db      	lsls	r3, r3, #27
 8003102:	d401      	bmi.n	8003108 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003104:	200c      	movs	r0, #12
	}
}
 8003106:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003108:	4604      	mov	r4, r0
 800310a:	4610      	mov	r0, r2
 800310c:	4621      	mov	r1, r4
 800310e:	f7ff ff75 	bl	8002ffc <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003112:	8820      	ldrh	r0, [r4, #0]
 8003114:	3802      	subs	r0, #2
 8003116:	b280      	uxth	r0, r0
 8003118:	f000 f9f8 	bl	800350c <ucGBMemoryRead>
 800311c:	8823      	ldrh	r3, [r4, #0]
 800311e:	4605      	mov	r5, r0
 8003120:	1e58      	subs	r0, r3, #1
 8003122:	b280      	uxth	r0, r0
 8003124:	f000 f9f2 	bl	800350c <ucGBMemoryRead>
 8003128:	4603      	mov	r3, r0
		return 24;
 800312a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800312c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003130:	8025      	strh	r5, [r4, #0]
}
 8003132:	bd38      	pop	{r3, r4, r5, pc}

08003134 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003134:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003136:	8805      	ldrh	r5, [r0, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <vGBFunctionADD_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800313a:	fa45 f582 	sxtab	r5, r5, r2
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800313e:	402b      	ands	r3, r5
 8003140:	b1bb      	cbz	r3, 8003172 <vGBFunctionADD_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 8003142:	f991 3000 	ldrsb.w	r3, [r1]
 8003146:	f043 0310 	orr.w	r3, r3, #16
 800314a:	b2dc      	uxtb	r4, r3
 800314c:	700c      	strb	r4, [r1, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800314e:	f002 020f 	and.w	r2, r2, #15
 8003152:	8804      	ldrh	r4, [r0, #0]
 8003154:	f004 040f 	and.w	r4, r4, #15
 8003158:	4422      	add	r2, r4
 800315a:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 800315c:	bfcc      	ite	gt
 800315e:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003162:	f023 0320 	bicle.w	r3, r3, #32
 8003166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316a:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP = tempRes & 0xFFFF;
 800316c:	8005      	strh	r5, [r0, #0]
}
 800316e:	bc30      	pop	{r4, r5}
 8003170:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003172:	f991 4000 	ldrsb.w	r4, [r1]
 8003176:	f024 0310 	bic.w	r3, r4, #16
 800317a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 800317e:	e7e5      	b.n	800314c <vGBFunctionADD_SP_r8+0x18>
 8003180:	ffff0000 	.word	0xffff0000

08003184 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003184:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003186:	880d      	ldrh	r5, [r1, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003188:	4c11      	ldr	r4, [pc, #68]	; (80031d0 <vGBFunctionLD_HL_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800318a:	fa45 f583 	sxtab	r5, r5, r3
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800318e:	402c      	ands	r4, r5
 8003190:	b1bc      	cbz	r4, 80031c2 <vGBFunctionLD_HL_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 8003192:	f992 4000 	ldrsb.w	r4, [r2]
 8003196:	f044 0410 	orr.w	r4, r4, #16
 800319a:	b2e6      	uxtb	r6, r4
 800319c:	7016      	strb	r6, [r2, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	8809      	ldrh	r1, [r1, #0]
 80031a4:	f001 010f 	and.w	r1, r1, #15
 80031a8:	440b      	add	r3, r1
 80031aa:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 80031ac:	bfcc      	ite	gt
 80031ae:	f044 0420 	orrgt.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 80031b2:	f024 0420 	bicle.w	r4, r4, #32
 80031b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80031ba:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regHL = tempRes & 0xFFFF;
 80031bc:	8005      	strh	r5, [r0, #0]
}
 80031be:	bc70      	pop	{r4, r5, r6}
 80031c0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031c2:	f992 6000 	ldrsb.w	r6, [r2]
 80031c6:	f026 0410 	bic.w	r4, r6, #16
 80031ca:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 80031ce:	e7e5      	b.n	800319c <vGBFunctionLD_HL_SP_r8+0x18>
 80031d0:	ffff0000 	.word	0xffff0000

080031d4 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 80031d4:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 80031d6:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 80031d8:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80031dc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80031e0:	d10a      	bne.n	80031f8 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 80031e2:	f991 3000 	ldrsb.w	r3, [r1]
 80031e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031ea:	b152      	cbz	r2, 8003202 <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 80031ec:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80031f0:	f043 0310 	orr.w	r3, r3, #16
 80031f4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80031f6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031f8:	780b      	ldrb	r3, [r1, #0]
 80031fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d1f4      	bne.n	80031ec <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 8003202:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003206:	700b      	strb	r3, [r1, #0]
}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 800320c:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800320e:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 8003212:	d509      	bpl.n	8003228 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003214:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 800321a:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 800321e:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003220:	f043 0310 	orr.w	r3, r3, #16
 8003224:	700b      	strb	r3, [r1, #0]
}
 8003226:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003228:	b942      	cbnz	r2, 800323c <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 800322a:	f991 3000 	ldrsb.w	r3, [r1]
 800322e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003232:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 8003236:	4610      	mov	r0, r2
 8003238:	700b      	strb	r3, [r1, #0]
 800323a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800323c:	780b      	ldrb	r3, [r1, #0]
 800323e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003242:	e7f6      	b.n	8003232 <ucGBFunctionRRC+0x26>

08003244 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003244:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003246:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 800324a:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 800324e:	bf14      	ite	ne
 8003250:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003254:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 8003258:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 800325c:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800325e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003262:	d105      	bne.n	8003270 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 8003264:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800326e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	700b      	strb	r3, [r1, #0]
}
 8003276:	4770      	bx	lr

08003278 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003278:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800327a:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800327e:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 8003282:	bf14      	ite	ne
 8003284:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003288:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 800328c:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800328e:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 8003290:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003294:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003298:	d105      	bne.n	80032a6 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 800329a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032a4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	700b      	strb	r3, [r1, #0]
}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032b0:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 80032b2:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 80032b6:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 80032ba:	bf4c      	ite	mi
 80032bc:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032c0:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032c4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032c8:	d105      	bne.n	80032d6 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 80032ca:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032d4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	700b      	strb	r3, [r1, #0]
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 80032e0:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032e4:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 80032e8:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 80032ec:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 80032f0:	bf14      	ite	ne
 80032f2:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 80032f6:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032fa:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032fe:	d105      	bne.n	800330c <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003300:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800330a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800330c:	f002 031f 	and.w	r3, r2, #31
 8003310:	700b      	strb	r3, [r1, #0]
}
 8003312:	4770      	bx	lr

08003314 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003314:	0903      	lsrs	r3, r0, #4
 8003316:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800331a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800331e:	d107      	bne.n	8003330 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003320:	f991 3000 	ldrsb.w	r3, [r1]
 8003324:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332c:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 800332e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003330:	780b      	ldrb	r3, [r1, #0]
 8003332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	700b      	strb	r3, [r1, #0]
}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003340:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 8003342:	f991 3000 	ldrsb.w	r3, [r1]
 8003346:	bf4c      	ite	mi
 8003348:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800334c:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003350:	0840      	lsrs	r0, r0, #1
 8003352:	d105      	bne.n	8003360 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 8003354:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800335e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	700b      	strb	r3, [r1, #0]
}
 8003366:	4770      	bx	lr

08003368 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 8003368:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800336c:	07cb      	lsls	r3, r1, #31
 800336e:	d508      	bpl.n	8003382 <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 8003370:	7813      	ldrb	r3, [r2, #0]
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800337a:	f043 0320 	orr.w	r3, r3, #32
 800337e:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 8003380:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003382:	f992 3000 	ldrsb.w	r3, [r2]
 8003386:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800338a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800338e:	f043 0320 	orr.w	r3, r3, #32
 8003392:	7013      	strb	r3, [r2, #0]
}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003398:	b510      	push	{r4, lr}
 800339a:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 800339c:	f000 f8b6 	bl	800350c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 80033a0:	2301      	movs	r3, #1
 80033a2:	fa03 f104 	lsl.w	r1, r3, r4
 80033a6:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 80033aa:	b2c0      	uxtb	r0, r0
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop

080033b0 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 80033b0:	b510      	push	{r4, lr}
 80033b2:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80033b4:	f000 f8aa 	bl	800350c <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 80033b8:	2301      	movs	r3, #1
 80033ba:	fa03 f104 	lsl.w	r1, r3, r4
 80033be:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 80033c0:	b2c0      	uxtb	r0, r0
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
	current_op = op;
 80033c4:	4b01      	ldr	r3, [pc, #4]	; (80033cc <vGBMemorySetOP+0x8>)
 80033c6:	7018      	strb	r0, [r3, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	24001258 	.word	0x24001258

080033d0 <vGBMemoryInit>:
 * @details At start up the Joypad Register should read 0xCF to denote that no Joypad buttons are being pressed. The IF register should read
 * 			0xE1 to set the appropriate flags.
 * @return Nothing
 */
void vGBMemoryInit(){
	mem.ram[0xFF00] = 0xCF;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <vGBMemoryInit+0x1c>)
	mem.ram[0xFF0F] = 0xE1;
 80033d2:	f64f 700f 	movw	r0, #65295	; 0xff0f
	mem.ram[0xFF00] = 0xCF;
 80033d6:	21cf      	movs	r1, #207	; 0xcf
 80033d8:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 80033dc:	b410      	push	{r4}
	mem.ram[0xFF0F] = 0xE1;
 80033de:	24e1      	movs	r4, #225	; 0xe1
	mem.ram[0xFF00] = 0xCF;
 80033e0:	7011      	strb	r1, [r2, #0]
	mem.ram[0xFF0F] = 0xE1;
 80033e2:	541c      	strb	r4, [r3, r0]
}
 80033e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	2400126c 	.word	0x2400126c

080033f0 <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 80033f0:	4603      	mov	r3, r0
 80033f2:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 80033f4:	4801      	ldr	r0, [pc, #4]	; (80033fc <vGBMemoryLoad+0xc>)
 80033f6:	4619      	mov	r1, r3
 80033f8:	f006 ba2c 	b.w	8009854 <memcpy>
 80033fc:	2400126c 	.word	0x2400126c

08003400 <vGBMemoryJoypad>:
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @details
 * @param data data trying to be written to Joypad Register.
 * @return Nothing
 */
uint8_t vGBMemoryJoypad(){
 8003400:	b508      	push	{r3, lr}
	uint32_t value = 0;
	uint8_t mask = 0;

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){
 8003402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003406:	480d      	ldr	r0, [pc, #52]	; (800343c <vGBMemoryJoypad+0x3c>)
 8003408:	f003 fe3e 	bl	8007088 <HAL_GPIO_ReadPin>
		if(joypadSELbut == 0x20){
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <vGBMemoryJoypad+0x40>)
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){
 800340e:	b140      	cbz	r0, 8003422 <vGBMemoryJoypad+0x22>
		if(joypadSELbut == 0x20){
 8003410:	7818      	ldrb	r0, [r3, #0]
 8003412:	2820      	cmp	r0, #32
 8003414:	d00c      	beq.n	8003430 <vGBMemoryJoypad+0x30>
//	    mask = (0x2);
//	}else{
//		mask = (0x1);
//	}

	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <vGBMemoryJoypad+0x44>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4318      	orrs	r0, r3
 800341c:	f040 00cf 	orr.w	r0, r0, #207	; 0xcf
}
 8003420:	bd08      	pop	{r3, pc}
 8003422:	7818      	ldrb	r0, [r3, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <vGBMemoryJoypad+0x44>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4318      	orrs	r0, r3
 800342a:	f040 00cf 	orr.w	r0, r0, #207	; 0xcf
 800342e:	e7f7      	b.n	8003420 <vGBMemoryJoypad+0x20>
			return 0xC0 | (0xF^0x8) | (joypadSELbut | joypadSELdir);
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <vGBMemoryJoypad+0x44>)
 8003432:	7818      	ldrb	r0, [r3, #0]
 8003434:	f040 00e7 	orr.w	r0, r0, #231	; 0xe7
}
 8003438:	bd08      	pop	{r3, pc}
 800343a:	bf00      	nop
 800343c:	58020800 	.word	0x58020800
 8003440:	2401126c 	.word	0x2401126c
 8003444:	24001268 	.word	0x24001268

08003448 <vGBMemoryWrite>:
 * @details
 * @param address
 * @param data
 */
void vGBMemoryWrite(uint16_t address, uint8_t data){
	if(address == JOY_ADDR){
 8003448:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800344c:	d011      	beq.n	8003472 <vGBMemoryWrite+0x2a>
uint8_t ucGBMemoryRead(uint16_t address){
	if(address == JOY_ADDR){
		return vGBMemoryJoypad();

	}
	return mem.ram[address];
 800344e:	4a11      	ldr	r2, [pc, #68]	; (8003494 <vGBMemoryWrite+0x4c>)
 8003450:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b03      	cmp	r3, #3
 800345c:	d003      	beq.n	8003466 <vGBMemoryWrite+0x1e>
	if((address >= 0x0000 && address < 0x8000))
 800345e:	0403      	lsls	r3, r0, #16
	mem.ram[address] = data;
 8003460:	bf48      	it	mi
 8003462:	5411      	strbmi	r1, [r2, r0]
}
 8003464:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 8003466:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	d2f6      	bcs.n	800345e <vGBMemoryWrite+0x16>
 8003470:	e7f8      	b.n	8003464 <vGBMemoryWrite+0x1c>
		if((data >> 4) & 0x1)
 8003472:	06c8      	lsls	r0, r1, #27
 8003474:	ea4f 1311 	mov.w	r3, r1, lsr #4
 8003478:	d406      	bmi.n	8003488 <vGBMemoryWrite+0x40>
		else if((data >> 4) & 0x2)
 800347a:	079a      	lsls	r2, r3, #30
 800347c:	d5f2      	bpl.n	8003464 <vGBMemoryWrite+0x1c>
			joypadSELbut = data & 0x20;
 800347e:	f001 0120 	and.w	r1, r1, #32
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <vGBMemoryWrite+0x50>)
 8003484:	7019      	strb	r1, [r3, #0]
 8003486:	4770      	bx	lr
			joypadSELdir = data & 0x10;
 8003488:	f001 0110 	and.w	r1, r1, #16
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <vGBMemoryWrite+0x54>)
 800348e:	7019      	strb	r1, [r3, #0]
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	2400126c 	.word	0x2400126c
 8003498:	2401126c 	.word	0x2401126c
 800349c:	24001268 	.word	0x24001268

080034a0 <vGBMemorySetBit>:
	return mem.ram[address];
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <vGBMemorySetBit+0x30>)
 80034a2:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d009      	beq.n	80034c4 <vGBMemorySetBit+0x24>
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 80034b0:	b410      	push	{r4}
	mem.ram[address] |= (0x1 << bit);
 80034b2:	2401      	movs	r4, #1
 80034b4:	5c13      	ldrb	r3, [r2, r0]
 80034b6:	fa04 f101 	lsl.w	r1, r4, r1
 80034ba:	4319      	orrs	r1, r3
 80034bc:	5411      	strb	r1, [r2, r0]
}
 80034be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c2:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034c4:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d2f0      	bcs.n	80034b0 <vGBMemorySetBit+0x10>
 80034ce:	4770      	bx	lr
 80034d0:	2400126c 	.word	0x2400126c

080034d4 <vGBMemoryResetBit>:
	return mem.ram[address];
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <vGBMemoryResetBit+0x34>)
 80034d6:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d00a      	beq.n	80034fa <vGBMemoryResetBit+0x26>
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 80034e4:	b410      	push	{r4}
	mem.ram[address] &= ~(0x1 << bit);
 80034e6:	2401      	movs	r4, #1
 80034e8:	5c13      	ldrb	r3, [r2, r0]
 80034ea:	fa04 f101 	lsl.w	r1, r4, r1
 80034ee:	ea23 0101 	bic.w	r1, r3, r1
 80034f2:	5411      	strb	r1, [r2, r0]
}
 80034f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034f8:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034fa:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003502:	d2ef      	bcs.n	80034e4 <vGBMemoryResetBit+0x10>
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	2400126c 	.word	0x2400126c

0800350c <ucGBMemoryRead>:
	if(address == JOY_ADDR){
 800350c:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003510:	d002      	beq.n	8003518 <ucGBMemoryRead+0xc>
	return mem.ram[address];
 8003512:	4b02      	ldr	r3, [pc, #8]	; (800351c <ucGBMemoryRead+0x10>)
}
 8003514:	5c18      	ldrb	r0, [r3, r0]
 8003516:	4770      	bx	lr
		return vGBMemoryJoypad();
 8003518:	f7ff bf72 	b.w	8003400 <vGBMemoryJoypad>
 800351c:	2400126c 	.word	0x2400126c

08003520 <usGBMemoryReadShort>:
 *
 * @param address
 * @return
 */
uint16_t usGBMemoryReadShort(uint16_t address){
	return *((uint16_t*) &mem.ram[address]);
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <usGBMemoryReadShort+0x8>)
}
 8003522:	5a18      	ldrh	r0, [r3, r0]
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	2400126c 	.word	0x2400126c

0800352c <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800352c:	2101      	movs	r1, #1
 800352e:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 8003532:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003534:	f7ff ffce 	bl	80034d4 <vGBMemoryResetBit>
 8003538:	2100      	movs	r1, #0
 800353a:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 800353e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003542:	f7ff bfc7 	b.w	80034d4 <vGBMemoryResetBit>
 8003546:	bf00      	nop

08003548 <vSetFrameBuffer>:
	memset(gb_frame, 0, 160*144*4*3);
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <vSetFrameBuffer+0x10>)
 800354a:	f44f 2287 	mov.w	r2, #276480	; 0x43800
 800354e:	2100      	movs	r1, #0
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	f006 b98d 	b.w	8009870 <memset>
 8003556:	bf00      	nop
 8003558:	24001008 	.word	0x24001008

0800355c <vCheckBGP>:
void vCheckBGP(){
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 800355e:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 8003562:	4f0e      	ldr	r7, [pc, #56]	; (800359c <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003564:	f7ff ffd2 	bl	800350c <ucGBMemoryRead>
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003568:	4e0d      	ldr	r6, [pc, #52]	; (80035a0 <vCheckBGP+0x44>)
 800356a:	490e      	ldr	r1, [pc, #56]	; (80035a4 <vCheckBGP+0x48>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 800356c:	2200      	movs	r2, #0
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 800356e:	4d0e      	ldr	r5, [pc, #56]	; (80035a8 <vCheckBGP+0x4c>)
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003570:	4c0e      	ldr	r4, [pc, #56]	; (80035ac <vCheckBGP+0x50>)
		switch ((BGP >> (i*2)) & 0x03) {
 8003572:	fa40 f302 	asr.w	r3, r0, r2
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d00c      	beq.n	8003598 <vCheckBGP+0x3c>
 800357e:	2b03      	cmp	r3, #3
 8003580:	d008      	beq.n	8003594 <vCheckBGP+0x38>
 8003582:	2b01      	cmp	r3, #1
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 8003584:	bf14      	ite	ne
 8003586:	600c      	strne	r4, [r1, #0]
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 8003588:	600d      	streq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 800358a:	3202      	adds	r2, #2
 800358c:	3104      	adds	r1, #4
 800358e:	2a08      	cmp	r2, #8
 8003590:	d1ef      	bne.n	8003572 <vCheckBGP+0x16>
}
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003594:	600e      	str	r6, [r1, #0]
 8003596:	e7f8      	b.n	800358a <vCheckBGP+0x2e>
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 8003598:	600f      	str	r7, [r1, #0]
 800359a:	e7f6      	b.n	800358a <vCheckBGP+0x2e>
 800359c:	ff306230 	.word	0xff306230
 80035a0:	ff0f380f 	.word	0xff0f380f
 80035a4:	24011278 	.word	0x24011278
 80035a8:	ff8bac0f 	.word	0xff8bac0f
 80035ac:	ff9bbc0f 	.word	0xff9bbc0f

080035b0 <getTileLineData>:
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035b0:	b538      	push	{r3, r4, r5, lr}
	if (BackWinTileDataAddr == 0x8000){
 80035b2:	4d11      	ldr	r5, [pc, #68]	; (80035f8 <getTileLineData+0x48>)
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035b4:	460c      	mov	r4, r1
	if (BackWinTileDataAddr == 0x8000){
 80035b6:	882b      	ldrh	r3, [r5, #0]
 80035b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <getTileLineData+0x4c>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	4418      	add	r0, r3
 80035c2:	b280      	uxth	r0, r0
	if (BackWinTileDataAddr == 0x8000){
 80035c4:	d00c      	beq.n	80035e0 <getTileLineData+0x30>
		int8_t temp  = (int8_t)(ucGBMemoryRead(BackTileDisplayAddr + tile_offset));
 80035c6:	f7ff ffa1 	bl	800350c <ucGBMemoryRead>
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035ca:	8829      	ldrh	r1, [r5, #0]
		uint16_t temp2 =( temp + 128) * 0x10;
 80035cc:	b240      	sxtb	r0, r0
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035ce:	440c      	add	r4, r1
		uint16_t temp2 =( temp + 128) * 0x10;
 80035d0:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035d2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 80035d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035da:	b280      	uxth	r0, r0
 80035dc:	f7ff bfa0 	b.w	8003520 <usGBMemoryReadShort>
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 80035e0:	f7ff ff94 	bl	800350c <ucGBMemoryRead>
 80035e4:	8829      	ldrh	r1, [r5, #0]
 80035e6:	440c      	add	r4, r1
 80035e8:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 80035ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 80035f0:	b280      	uxth	r0, r0
 80035f2:	f7ff bf95 	b.w	8003520 <usGBMemoryReadShort>
 80035f6:	bf00      	nop
 80035f8:	24011276 	.word	0x24011276
 80035fc:	24011288 	.word	0x24011288

08003600 <LYC_check>:
void LYC_check(uint8_t ly){
 8003600:	b510      	push	{r4, lr}
 8003602:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003604:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003608:	f7ff ff80 	bl	800350c <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 800360c:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 800360e:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 8003610:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003614:	d003      	beq.n	800361e <LYC_check+0x1e>
}
 8003616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 800361a:	f7ff bf5b 	b.w	80034d4 <vGBMemoryResetBit>
		vGBMemorySetBit(STAT_ADDR, 2);
 800361e:	f7ff ff3f 	bl	80034a0 <vGBMemorySetBit>
		if(checkbit(ucGBMemoryRead(STAT_ADDR), 6))
 8003622:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003626:	f7ff ff71 	bl	800350c <ucGBMemoryRead>
 800362a:	2106      	movs	r1, #6
 800362c:	f7ff fa9c 	bl	8002b68 <checkbit>
 8003630:	b900      	cbnz	r0, 8003634 <LYC_check+0x34>
}
 8003632:	bd10      	pop	{r4, pc}
			vGBMemorySetBit(IF_ADDR, 1);
 8003634:	2101      	movs	r1, #1
 8003636:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vGBMemorySetBit(IF_ADDR, 1);
 800363e:	f7ff bf2f 	b.w	80034a0 <vGBMemorySetBit>
 8003642:	bf00      	nop

08003644 <setMode>:
void setMode(uint8_t mode){
 8003644:	b508      	push	{r3, lr}
	Mode = mode;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <setMode+0x64>)
 8003648:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 800364a:	2803      	cmp	r0, #3
 800364c:	d82b      	bhi.n	80036a6 <setMode+0x62>
 800364e:	e8df f000 	tbb	[pc, r0]
 8003652:	1202      	.short	0x1202
 8003654:	061e      	.short	0x061e
}
 8003656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800365a:	f7ff bf67 	b.w	800352c <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 800365e:	2101      	movs	r1, #1
 8003660:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003664:	f7ff ff1c 	bl	80034a0 <vGBMemorySetBit>
 8003668:	2100      	movs	r1, #0
 800366a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800366e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003672:	f7ff bf15 	b.w	80034a0 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003676:	2101      	movs	r1, #1
 8003678:	f64f 7041 	movw	r0, #65345	; 0xff41
 800367c:	f7ff ff2a 	bl	80034d4 <vGBMemoryResetBit>
 8003680:	2100      	movs	r1, #0
 8003682:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 800368a:	f7ff bf09 	b.w	80034a0 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800368e:	2101      	movs	r1, #1
 8003690:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003694:	f7ff ff04 	bl	80034a0 <vGBMemorySetBit>
 8003698:	2100      	movs	r1, #0
 800369a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800369e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 80036a2:	f7ff bf17 	b.w	80034d4 <vGBMemoryResetBit>
}
 80036a6:	bd08      	pop	{r3, pc}
 80036a8:	24011274 	.word	0x24011274

080036ac <update_buffer>:
 * @param res
 * @param j
 * @param amt
 */
void update_buffer(uint16_t res, int pixelPos){
	pixelPos *= scaleAmount;
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <update_buffer+0x94>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	fb01 f103 	mul.w	r1, r1, r3
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d041      	beq.n	800373c <update_buffer+0x90>
 80036b8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
			switch (res){
					case 0x0000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[0]; break;
					case 0x0080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[1]; break;
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 80036bc:	4a21      	ldr	r2, [pc, #132]	; (8003744 <update_buffer+0x98>)
void update_buffer(uint16_t res, int pixelPos){
 80036be:	b5f0      	push	{r4, r5, r6, r7, lr}
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 80036c0:	4d21      	ldr	r5, [pc, #132]	; (8003748 <update_buffer+0x9c>)
 80036c2:	24a0      	movs	r4, #160	; 0xa0
 80036c4:	ebc3 7783 	rsb	r7, r3, r3, lsl #30
 80036c8:	f103 0e01 	add.w	lr, r3, #1
 80036cc:	782d      	ldrb	r5, [r5, #0]
 80036ce:	fb14 3403 	smlabb	r4, r4, r3, r3
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 80036d8:	fb15 f503 	smulbb	r5, r5, r3
 80036dc:	00bf      	lsls	r7, r7, #2
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 80036de:	2601      	movs	r6, #1
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 80036e0:	fb03 f305 	mul.w	r3, r3, r5
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
 80036e4:	4d19      	ldr	r5, [pc, #100]	; (800374c <update_buffer+0xa0>)
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 80036e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ea:	eb04 1343 	add.w	r3, r4, r3, lsl #5
			switch (res){
 80036ee:	f248 0480 	movw	r4, #32896	; 0x8080
 80036f2:	440b      	add	r3, r1
 80036f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80036f8:	18bb      	adds	r3, r7, r2
 80036fa:	e006      	b.n	800370a <update_buffer+0x5e>
 80036fc:	2880      	cmp	r0, #128	; 0x80
 80036fe:	d101      	bne.n	8003704 <update_buffer+0x58>
					case 0x0080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[1]; break;
 8003700:	6869      	ldr	r1, [r5, #4]
 8003702:	6019      	str	r1, [r3, #0]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003704:	3304      	adds	r3, #4
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <update_buffer+0x76>
			switch (res){
 800370a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800370e:	d012      	beq.n	8003736 <update_buffer+0x8a>
 8003710:	d80c      	bhi.n	800372c <update_buffer+0x80>
 8003712:	2800      	cmp	r0, #0
 8003714:	d1f2      	bne.n	80036fc <update_buffer+0x50>
					case 0x0000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[0]; break;
 8003716:	6829      	ldr	r1, [r5, #0]
 8003718:	3304      	adds	r3, #4
 800371a:	f843 1c04 	str.w	r1, [r3, #-4]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 800371e:	4293      	cmp	r3, r2
 8003720:	d1f3      	bne.n	800370a <update_buffer+0x5e>
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003722:	3601      	adds	r6, #1
 8003724:	4462      	add	r2, ip
 8003726:	45b6      	cmp	lr, r6
 8003728:	d1e6      	bne.n	80036f8 <update_buffer+0x4c>
			}
		}

	}

}
 800372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (res){
 800372c:	42a0      	cmp	r0, r4
 800372e:	d1e9      	bne.n	8003704 <update_buffer+0x58>
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 8003730:	68e9      	ldr	r1, [r5, #12]
 8003732:	6019      	str	r1, [r3, #0]
 8003734:	e7e6      	b.n	8003704 <update_buffer+0x58>
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
 8003736:	68a9      	ldr	r1, [r5, #8]
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	e7e3      	b.n	8003704 <update_buffer+0x58>
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2400100c 	.word	0x2400100c
 8003744:	24001008 	.word	0x24001008
 8003748:	240010a2 	.word	0x240010a2
 800374c:	24011278 	.word	0x24011278

08003750 <vGBPPUDrawLineBackground>:

void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY){
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003750:	4402      	add	r2, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003756:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 800375a:	08ce      	lsrs	r6, r1, #3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 800375c:	f002 0207 	and.w	r2, r2, #7
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003760:	f001 0407 	and.w	r4, r1, #7
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003764:	eb06 1643 	add.w	r6, r6, r3, lsl #5

	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information

	for(int j = 0; j < 160; j++){
 8003768:	f04f 0900 	mov.w	r9, #0
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 800376c:	ea4f 0842 	mov.w	r8, r2, lsl #1

		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003770:	4f11      	ldr	r7, [pc, #68]	; (80037b8 <vGBPPUDrawLineBackground+0x68>)
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information
 8003772:	4630      	mov	r0, r6
 8003774:	4641      	mov	r1, r8
 8003776:	f7ff ff1b 	bl	80035b0 <getTileLineData>
 800377a:	4605      	mov	r5, r0
	for(int j = 0; j < 160; j++){
 800377c:	e002      	b.n	8003784 <vGBPPUDrawLineBackground+0x34>
 800377e:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
 8003782:	d017      	beq.n	80037b4 <vGBPPUDrawLineBackground+0x64>
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003784:	fa05 f304 	lsl.w	r3, r5, r4
		pixl_offset++;
 8003788:	3401      	adds	r4, #1
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 800378a:	4649      	mov	r1, r9
	for(int j = 0; j < 160; j++){
 800378c:	f109 0901 	add.w	r9, r9, #1
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003790:	403b      	ands	r3, r7
		pixl_offset++;
 8003792:	b2e4      	uxtb	r4, r4
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003794:	b298      	uxth	r0, r3
 8003796:	f7ff ff89 	bl	80036ac <update_buffer>

		if(pixl_offset == 8){
 800379a:	2c08      	cmp	r4, #8
 800379c:	d1ef      	bne.n	800377e <vGBPPUDrawLineBackground+0x2e>
			tile_offset++;
 800379e:	3601      	adds	r6, #1
			pixl_offset = 0;
			tile_data = getTileLineData(tile_offset, line_offset);
 80037a0:	4641      	mov	r1, r8
			pixl_offset = 0;
 80037a2:	2400      	movs	r4, #0
			tile_offset++;
 80037a4:	b2b6      	uxth	r6, r6
			tile_data = getTileLineData(tile_offset, line_offset);
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7ff ff02 	bl	80035b0 <getTileLineData>
	for(int j = 0; j < 160; j++){
 80037ac:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
			tile_data = getTileLineData(tile_offset, line_offset);
 80037b0:	4605      	mov	r5, r0
	for(int j = 0; j < 160; j++){
 80037b2:	d1e7      	bne.n	8003784 <vGBPPUDrawLineBackground+0x34>

		}

	}
}
 80037b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b8:	ffff8080 	.word	0xffff8080

080037bc <vGBPPUDrawLine>:
 * @param ly lY Register Data
 * @param SCX Scroll X Register
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4604      	mov	r4, r0

	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 80037c0:	f64f 7040 	movw	r0, #65344	; 0xff40
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 80037c4:	460d      	mov	r5, r1
 80037c6:	4616      	mov	r6, r2
	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 80037c8:	f7ff fea0 	bl	800350c <ucGBMemoryRead>
 80037cc:	07c3      	lsls	r3, r0, #31
 80037ce:	d405      	bmi.n	80037dc <vGBPPUDrawLine+0x20>
		vGBPPUDrawLineBackground(ly, SCX, SCY);
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
			vGBPPUDrawLineWindow(ly);
	}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 80037d0:	f64f 7040 	movw	r0, #65344	; 0xff40
		vGBPPUDrawLineObjects();
}
 80037d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 80037d8:	f7ff be98 	b.w	800350c <ucGBMemoryRead>
		vGBPPUDrawLineBackground(ly, SCX, SCY);
 80037dc:	4632      	mov	r2, r6
 80037de:	4629      	mov	r1, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ffb5 	bl	8003750 <vGBPPUDrawLineBackground>
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 80037e6:	f64f 7040 	movw	r0, #65344	; 0xff40
 80037ea:	f7ff fe8f 	bl	800350c <ucGBMemoryRead>
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 80037ee:	f64f 7040 	movw	r0, #65344	; 0xff40
}
 80037f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 80037f6:	f7ff be89 	b.w	800350c <ucGBMemoryRead>
 80037fa:	bf00      	nop

080037fc <gbPPUStep>:
void gbPPUStep(){
 80037fc:	b530      	push	{r4, r5, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 80037fe:	f64f 7040 	movw	r0, #65344	; 0xff40
void gbPPUStep(){
 8003802:	b083      	sub	sp, #12
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003804:	f7ff fe82 	bl	800350c <ucGBMemoryRead>
 8003808:	0603      	lsls	r3, r0, #24
 800380a:	d401      	bmi.n	8003810 <gbPPUStep+0x14>
}
 800380c:	b003      	add	sp, #12
 800380e:	bd30      	pop	{r4, r5, pc}
		tStatesTotal += ucGetTstate();
 8003810:	4c57      	ldr	r4, [pc, #348]	; (8003970 <gbPPUStep+0x174>)
 8003812:	f7ff f88b 	bl	800292c <ucGetTstate>
			ly++;
 8003816:	4d57      	ldr	r5, [pc, #348]	; (8003974 <gbPPUStep+0x178>)
		tStatesTotal += ucGetTstate();
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 800381c:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8003820:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003822:	d90d      	bls.n	8003840 <gbPPUStep+0x44>
			ly++;
 8003824:	7829      	ldrb	r1, [r5, #0]
 8003826:	3101      	adds	r1, #1
 8003828:	b2c9      	uxtb	r1, r1
			if(ly > 153){												// end of vblank
 800382a:	2999      	cmp	r1, #153	; 0x99
			ly++;
 800382c:	7029      	strb	r1, [r5, #0]
			if(ly > 153){												// end of vblank
 800382e:	d87e      	bhi.n	800392e <gbPPUStep+0x132>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 8003830:	f64f 7044 	movw	r0, #65348	; 0xff44
 8003834:	f7ff fe08 	bl	8003448 <vGBMemoryWrite>
			tStatesTotal -= 456;
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800383e:	6023      	str	r3, [r4, #0]
		LYC_check(ly);
 8003840:	7828      	ldrb	r0, [r5, #0]
 8003842:	f7ff fedd 	bl	8003600 <LYC_check>
		if (ly > 143){													// vblank
 8003846:	782b      	ldrb	r3, [r5, #0]
 8003848:	2b8f      	cmp	r3, #143	; 0x8f
 800384a:	d80c      	bhi.n	8003866 <gbPPUStep+0x6a>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	2b50      	cmp	r3, #80	; 0x50
 8003850:	d81d      	bhi.n	800388e <gbPPUStep+0x92>
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <gbPPUStep+0x17c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d0d8      	beq.n	800380c <gbPPUStep+0x10>
				setMode(MODE_2);
 800385a:	2002      	movs	r0, #2
}
 800385c:	b003      	add	sp, #12
 800385e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				setMode(MODE_3);
 8003862:	f7ff beef 	b.w	8003644 <setMode>
			setMode(MODE_1);
 8003866:	2001      	movs	r0, #1
 8003868:	f7ff feec 	bl	8003644 <setMode>
			if(checkbit(ucGBMemoryRead(STAT_ADDR), 4))
 800386c:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003870:	f7ff fe4c 	bl	800350c <ucGBMemoryRead>
 8003874:	2104      	movs	r1, #4
 8003876:	f7ff f977 	bl	8002b68 <checkbit>
 800387a:	2800      	cmp	r0, #0
 800387c:	d16c      	bne.n	8003958 <gbPPUStep+0x15c>
			vGBMemorySetBit(IF_ADDR, 0);
 800387e:	2100      	movs	r1, #0
					vGBMemorySetBit(IF_ADDR, 1);
 8003880:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003884:	b003      	add	sp, #12
 8003886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
					vGBMemorySetBit(IF_ADDR, 1);
 800388a:	f7ff be09 	b.w	80034a0 <vGBMemorySetBit>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 800388e:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8003892:	2aab      	cmp	r2, #171	; 0xab
 8003894:	d833      	bhi.n	80038fe <gbPPUStep+0x102>
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <gbPPUStep+0x17c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d0b6      	beq.n	800380c <gbPPUStep+0x10>
				vCheckBGP();
 800389e:	f7ff fe5d 	bl	800355c <vCheckBGP>
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80038a2:	f64f 7040 	movw	r0, #65344	; 0xff40
 80038a6:	f7ff fe31 	bl	800350c <ucGBMemoryRead>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <gbPPUStep+0x180>)
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80038ae:	f64f 7040 	movw	r0, #65344	; 0xff40
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 80038b2:	f012 0f10 	tst.w	r2, #16
 80038b6:	bf14      	ite	ne
 80038b8:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80038bc:	f44f 4208 	moveq.w	r2, #34816	; 0x8800
 80038c0:	801a      	strh	r2, [r3, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80038c2:	f7ff fe23 	bl	800350c <ucGBMemoryRead>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <gbPPUStep+0x184>)
				vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 80038ca:	f64f 7043 	movw	r0, #65347	; 0xff43
 80038ce:	782c      	ldrb	r4, [r5, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 80038d0:	f012 0f08 	tst.w	r2, #8
 80038d4:	bf14      	ite	ne
 80038d6:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 80038da:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
 80038de:	801a      	strh	r2, [r3, #0]
				vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 80038e0:	f7ff fe14 	bl	800350c <ucGBMemoryRead>
 80038e4:	4601      	mov	r1, r0
 80038e6:	f64f 7042 	movw	r0, #65346	; 0xff42
 80038ea:	9101      	str	r1, [sp, #4]
 80038ec:	f7ff fe0e 	bl	800350c <ucGBMemoryRead>
 80038f0:	9901      	ldr	r1, [sp, #4]
 80038f2:	4602      	mov	r2, r0
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff ff61 	bl	80037bc <vGBPPUDrawLine>
				setMode(MODE_3);
 80038fa:	2003      	movs	r0, #3
 80038fc:	e7ae      	b.n	800385c <gbPPUStep+0x60>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0){										// hblank
 80038fe:	3bfd      	subs	r3, #253	; 0xfd
 8003900:	2bcb      	cmp	r3, #203	; 0xcb
 8003902:	d883      	bhi.n	800380c <gbPPUStep+0x10>
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <gbPPUStep+0x17c>)
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	2a00      	cmp	r2, #0
 800390a:	f43f af7f 	beq.w	800380c <gbPPUStep+0x10>
	Mode = mode;
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 8003912:	f7ff fe0b 	bl	800352c <setMode.part.0>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 3))
 8003916:	f64f 7041 	movw	r0, #65345	; 0xff41
 800391a:	f7ff fdf7 	bl	800350c <ucGBMemoryRead>
 800391e:	2103      	movs	r1, #3
 8003920:	f7ff f922 	bl	8002b68 <checkbit>
 8003924:	2800      	cmp	r0, #0
 8003926:	f43f af71 	beq.w	800380c <gbPPUStep+0x10>
					vGBMemorySetBit(IF_ADDR, 1);
 800392a:	2101      	movs	r1, #1
 800392c:	e7a8      	b.n	8003880 <gbPPUStep+0x84>
				displayFrameBuffer(gb_frame, scaleAmount);
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <gbPPUStep+0x188>)
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <gbPPUStep+0x18c>)
 8003932:	7811      	ldrb	r1, [r2, #0]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f000 fadb 	bl	8003ef0 <displayFrameBuffer>
				setMode(MODE_2);
 800393a:	2002      	movs	r0, #2
 800393c:	f7ff fe82 	bl	8003644 <setMode>
				ly = 0;
 8003940:	2300      	movs	r3, #0
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003942:	f64f 7041 	movw	r0, #65345	; 0xff41
				ly = 0;
 8003946:	702b      	strb	r3, [r5, #0]
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003948:	f7ff fde0 	bl	800350c <ucGBMemoryRead>
 800394c:	2105      	movs	r1, #5
 800394e:	f7ff f90b 	bl	8002b68 <checkbit>
 8003952:	b938      	cbnz	r0, 8003964 <gbPPUStep+0x168>
 8003954:	7829      	ldrb	r1, [r5, #0]
 8003956:	e76b      	b.n	8003830 <gbPPUStep+0x34>
				vGBMemorySetBit(IF_ADDR, 1);
 8003958:	2101      	movs	r1, #1
 800395a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800395e:	f7ff fd9f 	bl	80034a0 <vGBMemorySetBit>
 8003962:	e78c      	b.n	800387e <gbPPUStep+0x82>
					vGBMemorySetBit(IF_ADDR, 1);
 8003964:	2101      	movs	r1, #1
 8003966:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800396a:	f7ff fd99 	bl	80034a0 <vGBMemorySetBit>
 800396e:	e7f1      	b.n	8003954 <gbPPUStep+0x158>
 8003970:	24011270 	.word	0x24011270
 8003974:	240010a2 	.word	0x240010a2
 8003978:	24011274 	.word	0x24011274
 800397c:	24011276 	.word	0x24011276
 8003980:	24011288 	.word	0x24011288
 8003984:	2400100c 	.word	0x2400100c
 8003988:	24001008 	.word	0x24001008

0800398c <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 800398c:	4b01      	ldr	r3, [pc, #4]	; (8003994 <getRomPointer+0x8>)
}
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	24001010 	.word	0x24001010

08003998 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003998:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800399a:	2004      	movs	r0, #4
{
 800399c:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800399e:	f003 fdfd 	bl	800759c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039a2:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <SystemClock_Config+0xc8>)
 80039a4:	2300      	movs	r3, #0
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <SystemClock_Config+0xcc>)
 80039ac:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80039b0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039b6:	f002 0201 	and.w	r2, r2, #1
 80039ba:	9201      	str	r2, [sp, #4]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80039c2:	619a      	str	r2, [r3, #24]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80039ce:	6983      	ldr	r3, [r0, #24]
 80039d0:	049b      	lsls	r3, r3, #18
 80039d2:	d5fc      	bpl.n	80039ce <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039d4:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80039da:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039dc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 80039de:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 80039e0:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80039e2:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039e4:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 80039e6:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039e8:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80039ea:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80039ec:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80039ee:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80039f0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80039f2:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 80039f4:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80039f6:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80039f8:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039fc:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003a00:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003a04:	f003 fe06 	bl	8007614 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8003a08:	b108      	cbz	r0, 8003a0e <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003a0e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003a10:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a12:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003a18:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003a1e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a20:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003a24:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003a28:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003a2c:	f004 f988 	bl	8007d40 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8003a30:	b108      	cbz	r0, 8003a36 <SystemClock_Config+0x9e>
 8003a32:	b672      	cpsid	i
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <SystemClock_Config+0xd0>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8003a40:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003a44:	f042 0202 	orr.w	r2, r2, #2
 8003a48:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8003a58:	f001 ffb2 	bl	80059c0 <HAL_EnableCompensationCell>
}
 8003a5c:	b01e      	add	sp, #120	; 0x78
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	58000400 	.word	0x58000400
 8003a64:	58024800 	.word	0x58024800
 8003a68:	58024400 	.word	0x58024400

08003a6c <PeriphCommonClock_Config>:
{
 8003a6c:	b530      	push	{r4, r5, lr}
 8003a6e:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a70:	229c      	movs	r2, #156	; 0x9c
 8003a72:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003a74:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a76:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003a78:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a7a:	f005 fef9 	bl	8009870 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003a82:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003a84:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003a86:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a88:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a8a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003a8c:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003a8e:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003a90:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003a92:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003a94:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003a98:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a9c:	f004 fb94 	bl	80081c8 <HAL_RCCEx_PeriphCLKConfig>
 8003aa0:	b108      	cbz	r0, 8003aa6 <PeriphCommonClock_Config+0x3a>
 8003aa2:	b672      	cpsid	i
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <PeriphCommonClock_Config+0x38>
}
 8003aa6:	b031      	add	sp, #196	; 0xc4
 8003aa8:	bd30      	pop	{r4, r5, pc}
 8003aaa:	bf00      	nop

08003aac <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab0:	49b1      	ldr	r1, [pc, #708]	; (8003d78 <main+0x2cc>)
 8003ab2:	e002      	b.n	8003aba <main+0xe>
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	f000 8108 	beq.w	8003cca <main+0x21e>
 8003aba:	680a      	ldr	r2, [r1, #0]
 8003abc:	0410      	lsls	r0, r2, #16
 8003abe:	d4f9      	bmi.n	8003ab4 <main+0x8>
{
 8003ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac4:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8003ac6:	f001 ff17 	bl	80058f8 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003aca:	4aac      	ldr	r2, [pc, #688]	; (8003d7c <main+0x2d0>)
 8003acc:	6953      	ldr	r3, [r2, #20]
 8003ace:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003ad2:	d111      	bne.n	8003af8 <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ad8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003adc:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ae4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003ae8:	6953      	ldr	r3, [r2, #20]
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003af0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003af4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003af8:	4aa0      	ldr	r2, [pc, #640]	; (8003d7c <main+0x2d0>)
 8003afa:	6953      	ldr	r3, [r2, #20]
 8003afc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003b00:	d124      	bne.n	8003b4c <main+0xa0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b06:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003b0a:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b0e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b12:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b16:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003b1a:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b1c:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b20:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b22:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003b26:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b28:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	d1f8      	bne.n	8003b22 <main+0x76>
    } while(sets-- != 0U);
 8003b30:	3820      	subs	r0, #32
 8003b32:	f110 0f20 	cmn.w	r0, #32
 8003b36:	d1f1      	bne.n	8003b1c <main+0x70>
 8003b38:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003b3c:	6953      	ldr	r3, [r2, #20]
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6153      	str	r3, [r2, #20]
 8003b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b48:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 8003b4c:	4c8a      	ldr	r4, [pc, #552]	; (8003d78 <main+0x2cc>)
  SystemClock_Config();
 8003b4e:	f7ff ff23 	bl	8003998 <SystemClock_Config>
  PeriphCommonClock_Config();
 8003b52:	f7ff ff8b 	bl	8003a6c <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8003b56:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8003b58:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003b5c:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8003b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b62:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003b66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8003b72:	f003 fa9d 	bl	80070b0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8003b76:	2100      	movs	r1, #0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	f003 faa7 	bl	80070cc <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b82:	e002      	b.n	8003b8a <main+0xde>
 8003b84:	3b01      	subs	r3, #1
 8003b86:	f000 80a2 	beq.w	8003cce <main+0x222>
 8003b8a:	682a      	ldr	r2, [r5, #0]
 8003b8c:	0412      	lsls	r2, r2, #16
 8003b8e:	d5f9      	bpl.n	8003b84 <main+0xd8>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003b9e:	f44f 7780 	mov.w	r7, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	a90d      	add	r1, sp, #52	; 0x34
 8003ba4:	4876      	ldr	r0, [pc, #472]	; (8003d80 <main+0x2d4>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003baa:	f44f 2800 	mov.w	r8, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Instance = ADC1;
 8003bb2:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8003d94 <main+0x2e8>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	4033      	ands	r3, r6
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003bc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003bca:	4013      	ands	r3, r2
 8003bcc:	9305      	str	r3, [sp, #20]
 8003bce:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003bdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	9306      	str	r3, [sp, #24]
 8003be6:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003bf4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	9307      	str	r3, [sp, #28]
 8003bfe:	9b07      	ldr	r3, [sp, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c00:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c0c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	9308      	str	r3, [sp, #32]
 8003c16:	9b08      	ldr	r3, [sp, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c18:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c24:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	920e      	str	r2, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c2a:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003c2e:	970d      	str	r7, [sp, #52]	; 0x34
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c30:	9309      	str	r3, [sp, #36]	; 0x24
 8003c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c38:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003c3a:	f003 f907 	bl	8006e4c <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3e:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003c40:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c44:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c48:	a90d      	add	r1, sp, #52	; 0x34
 8003c4a:	484e      	ldr	r0, [pc, #312]	; (8003d84 <main+0x2d8>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c4c:	433b      	orrs	r3, r7
 8003c4e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c52:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c56:	2504      	movs	r5, #4
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003c58:	920d      	str	r2, [sp, #52]	; 0x34
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c5a:	403b      	ands	r3, r7
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	9410      	str	r4, [sp, #64]	; 0x40
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c64:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c66:	f003 f8f1 	bl	8006e4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6e:	a90d      	add	r1, sp, #52	; 0x34
 8003c70:	4845      	ldr	r0, [pc, #276]	; (8003d88 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c72:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7a:	f003 f8e7 	bl	8006e4c <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <main+0x2e0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c80:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c82:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 8003c86:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c88:	9413      	str	r4, [sp, #76]	; 0x4c
  hadc1.Init.NbrOfConversion = 1;
 8003c8a:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c8e:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003c92:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003c96:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c9a:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003c9e:	e9ca 3800 	strd	r3, r8, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ca2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8003ca6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8003caa:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_MultiModeTypeDef multimode = {0};
 8003cae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cb2:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cb6:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003cba:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cbe:	f002 f979 	bl	8005fb4 <HAL_ADC_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	b128      	cbz	r0, 8003cd2 <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc6:	b672      	cpsid	i
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <main+0x21c>
 8003cca:	b672      	cpsid	i
 8003ccc:	e7fe      	b.n	8003ccc <main+0x220>
 8003cce:	b672      	cpsid	i
 8003cd0:	e7fe      	b.n	8003cd0 <main+0x224>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003cd2:	a90a      	add	r1, sp, #40	; 0x28
 8003cd4:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003cd6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003cd8:	f002 fa78 	bl	80061cc <HAL_ADCEx_MultiModeConfigChannel>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	b108      	cbz	r0, 8003ce4 <main+0x238>
 8003ce0:	b672      	cpsid	i
  while (1)
 8003ce2:	e7fe      	b.n	8003ce2 <main+0x236>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ce4:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ce8:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cec:	4650      	mov	r0, sl
 8003cee:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003cf0:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.OffsetSignedSaturation = DISABLE;
 8003cf2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.Channel = ADC_CHANNEL_0;
 8003cf6:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cf8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003cfc:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.Offset = 0;
 8003cfe:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d02:	f001 fe65 	bl	80059d0 <HAL_ADC_ConfigChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b108      	cbz	r0, 8003d0e <main+0x262>
 8003d0a:	b672      	cpsid	i
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <main+0x260>
  hadc3.Instance = ADC3;
 8003d0e:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003d98 <main+0x2ec>
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <main+0x2e4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d14:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003d16:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003d18:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003d1c:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003d20:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003d24:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 8003d28:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8003d2c:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d30:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8003d34:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8003d38:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003d3c:	e9ca 8301 	strd	r8, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d40:	e9ca 3503 	strd	r3, r5, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d44:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d48:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003d4c:	f002 f932 	bl	8005fb4 <HAL_ADC_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	b108      	cbz	r0, 8003d58 <main+0x2ac>
 8003d54:	b672      	cpsid	i
  while (1)
 8003d56:	e7fe      	b.n	8003d56 <main+0x2aa>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003d58:	a90d      	add	r1, sp, #52	; 0x34
 8003d5a:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 8003d5c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d60:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d64:	e9cd 690d 	strd	r6, r9, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003d68:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003d6c:	f001 fe30 	bl	80059d0 <HAL_ADC_ConfigChannel>
 8003d70:	4604      	mov	r4, r0
 8003d72:	b198      	cbz	r0, 8003d9c <main+0x2f0>
 8003d74:	b672      	cpsid	i
  while (1)
 8003d76:	e7fe      	b.n	8003d76 <main+0x2ca>
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	58020000 	.word	0x58020000
 8003d84:	58022000 	.word	0x58022000
 8003d88:	58020800 	.word	0x58020800
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	58026000 	.word	0x58026000
 8003d94:	24011350 	.word	0x24011350
 8003d98:	240113b4 	.word	0x240113b4
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	f001 fc49 	bl	8005634 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8003da2:	4818      	ldr	r0, [pc, #96]	; (8003e04 <main+0x358>)
 8003da4:	f005 fc9c 	bl	80096e0 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8003da8:	4620      	mov	r0, r4
 8003daa:	f005 fccb 	bl	8009744 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	f005 fd1b 	bl	80097ec <UTIL_LCD_Clear>
  UTIL_LCD_FillRect(0, 0, 160*3, 480, UTIL_LCD_COLOR_BLACK);
 8003db6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003dba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	9200      	str	r2, [sp, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f005 fce5 	bl	8009794 <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003dca:	f04f 30ff 	mov.w	r0, #4294967295
 8003dce:	f005 fcd1 	bl	8009774 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8003dd2:	480d      	ldr	r0, [pc, #52]	; (8003e08 <main+0x35c>)
 8003dd4:	f005 fcc6 	bl	8009764 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <main+0x360>)
 8003dda:	f005 fcd3 	bl	8009784 <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <main+0x364>)
 8003de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f7ff fb03 	bl	80033f0 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 8003dea:	4639      	mov	r1, r7
 8003dec:	4809      	ldr	r0, [pc, #36]	; (8003e14 <main+0x368>)
 8003dee:	f7ff faff 	bl	80033f0 <vGBMemoryLoad>
  vGBMemoryInit();
 8003df2:	f7ff faed 	bl	80033d0 <vGBMemoryInit>
  vSetFrameBuffer();
 8003df6:	f7ff fba7 	bl	8003548 <vSetFrameBuffer>
	  vGBCPUboot();
 8003dfa:	f7fe fe75 	bl	8002ae8 <vGBCPUboot>
	  gbPPUStep();
 8003dfe:	f7ff fcfd 	bl	80037fc <gbPPUStep>
  while (1)
 8003e02:	e7fa      	b.n	8003dfa <main+0x34e>
 8003e04:	08011b1c 	.word	0x08011b1c
 8003e08:	ff0000ff 	.word	0xff0000ff
 8003e0c:	2400106c 	.word	0x2400106c
 8003e10:	24001010 	.word	0x24001010
 8003e14:	080118a8 	.word	0x080118a8

08003e18 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_LTDC_LineEventCallback+0x3c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	db15      	blt.n	8003e4c <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e20:	490d      	ldr	r1, [pc, #52]	; (8003e58 <HAL_LTDC_LineEventCallback+0x40>)
 8003e22:	6802      	ldr	r2, [r0, #0]
{
 8003e24:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e26:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8003e28:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e2c:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8003e30:	4d0a      	ldr	r5, [pc, #40]	; (8003e5c <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e32:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003e36:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003e38:	f041 0101 	orr.w	r1, r1, #1
 8003e3c:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003e3e:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8003e44:	601c      	str	r4, [r3, #0]
}
 8003e46:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003e48:	f003 baec 	b.w	8007424 <HAL_LTDC_ProgramLineEvent>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f003 bae9 	b.w	8007424 <HAL_LTDC_ProgramLineEvent>
 8003e52:	bf00      	nop
 8003e54:	24001014 	.word	0x24001014
 8003e58:	080119a8 	.word	0x080119a8
 8003e5c:	240010a4 	.word	0x240010a4

08003e60 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003e66:	4c20      	ldr	r4, [pc, #128]	; (8003ee8 <CopyBuffer+0x88>)
 8003e68:	2500      	movs	r5, #0
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003e6a:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8003e6e:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8003e72:	4681      	mov	r9, r0
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8003e74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003eec <CopyBuffer+0x8c>

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003e78:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003e7a:	f5ca 7b48 	rsb	fp, sl, #800	; 0x320
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003e7e:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8003e80:	6225      	str	r5, [r4, #32]
{
 8003e82:	460f      	mov	r7, r1
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003e84:	6465      	str	r5, [r4, #68]	; 0x44
{
 8003e86:	4690      	mov	r8, r2
 8003e88:	461e      	mov	r6, r3
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003e8a:	f8c4 b00c 	str.w	fp, [r4, #12]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003e8e:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003e92:	e9c4 c500 	strd	ip, r5, [r4]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8003e96:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003e9a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8003e9e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8003ea2:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003ea6:	f002 fabb 	bl	8006420 <HAL_DMA2D_Init>
 8003eaa:	b110      	cbz	r0, 8003eb2 <CopyBuffer+0x52>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
      }
    }
  }
}
 8003eac:	b003      	add	sp, #12
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f002 fb97 	bl	80065e8 <HAL_DMA2D_ConfigLayer>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d1f6      	bne.n	8003eac <CopyBuffer+0x4c>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003ebe:	f44f 7248 	mov.w	r2, #800	; 0x320
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003ec2:	4653      	mov	r3, sl
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4620      	mov	r0, r4
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003ec8:	fb02 8206 	mla	r2, r2, r6, r8
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003ecc:	9500      	str	r5, [sp, #0]
 8003ece:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003ed2:	f002 fae7 	bl	80064a4 <HAL_DMA2D_Start>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d1e8      	bne.n	8003eac <CopyBuffer+0x4c>
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003eda:	4620      	mov	r0, r4
 8003edc:	2164      	movs	r1, #100	; 0x64
}
 8003ede:	b003      	add	sp, #12
 8003ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003ee4:	f002 bafa 	b.w	80064dc <HAL_DMA2D_PollForTransfer>
 8003ee8:	240010a8 	.word	0x240010a8
 8003eec:	52001000 	.word	0x52001000

08003ef0 <displayFrameBuffer>:

void displayFrameBuffer(uint32_t* gb_frame, uint8_t scaleAmount){
 8003ef0:	b530      	push	{r4, r5, lr}
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 8003ef6:	2318      	movs	r3, #24
 8003ef8:	2200      	movs	r2, #0
 8003efa:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8003efe:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003f02:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003f06:	012d      	lsls	r5, r5, #4
 8003f08:	0164      	lsls	r4, r4, #5
 8003f0a:	e9cd 4500 	strd	r4, r5, [sp]
 8003f0e:	f7ff ffa7 	bl	8003e60 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <displayFrameBuffer+0x34>)
 8003f14:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 8003f1e:	b003      	add	sp, #12
 8003f20:	bd30      	pop	{r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	2401146c 	.word	0x2401146c

08003f28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_MspInit+0x20>)
{
 8003f2a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003f30:	f042 0202 	orr.w	r2, r2, #2
 8003f34:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f44:	b002      	add	sp, #8
 8003f46:	4770      	bx	lr
 8003f48:	58024400 	.word	0x58024400

08003f4c <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003f4c:	4938      	ldr	r1, [pc, #224]	; (8004030 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003f50:	6802      	ldr	r2, [r0, #0]
{
 8003f52:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8003f54:	428a      	cmp	r2, r1
{
 8003f56:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003f5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003f60:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003f64:	4933      	ldr	r1, [pc, #204]	; (8004034 <HAL_ADC_MspInit+0xe8>)
 8003f66:	428a      	cmp	r2, r1
 8003f68:	d026      	beq.n	8003fb8 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003f6a:	b00a      	add	sp, #40	; 0x28
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f6e:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003f70:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f74:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003f78:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f7a:	f042 0220 	orr.w	r2, r2, #32
 8003f7e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003f82:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003f86:	f002 0220 	and.w	r2, r2, #32
 8003f8a:	9200      	str	r2, [sp, #0]
 8003f8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003fa6:	f001 fd01 	bl	80059ac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8003faa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fae:	4608      	mov	r0, r1
 8003fb0:	f001 fcfc 	bl	80059ac <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003fb4:	b00a      	add	sp, #40	; 0x28
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8003fba:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fbe:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8003fc0:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003fc2:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8003fc6:	481d      	ldr	r0, [pc, #116]	; (800403c <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003fc8:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8003fcc:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8003fd0:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003fd4:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8003fd8:	9402      	str	r4, [sp, #8]
 8003fda:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fdc:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003fe0:	f044 0420 	orr.w	r4, r4, #32
 8003fe4:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8003fe8:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003fec:	f004 0420 	and.w	r4, r4, #32
 8003ff0:	9403      	str	r4, [sp, #12]
 8003ff2:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff4:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003ff8:	f044 0404 	orr.w	r4, r4, #4
 8003ffc:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004000:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004006:	f002 0204 	and.w	r2, r2, #4
 800400a:	9204      	str	r2, [sp, #16]
 800400c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800400e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004012:	f002 ff1b 	bl	8006e4c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004016:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800401a:	4608      	mov	r0, r1
 800401c:	f001 fcc6 	bl	80059ac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004020:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004024:	4608      	mov	r0, r1
 8004026:	f001 fcc1 	bl	80059ac <HAL_SYSCFG_AnalogSwitchConfig>
}
 800402a:	b00a      	add	sp, #40	; 0x28
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	bf00      	nop
 8004030:	40022000 	.word	0x40022000
 8004034:	58026000 	.word	0x58026000
 8004038:	58024400 	.word	0x58024400
 800403c:	58021400 	.word	0x58021400

08004040 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004044:	4c05      	ldr	r4, [pc, #20]	; (800405c <HardFault_Handler+0x18>)
{
 8004046:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8004048:	4620      	mov	r0, r4
 800404a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800404e:	f003 f825 	bl	800709c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004056:	f001 fc91 	bl	800597c <HAL_Delay>
  while (1)
 800405a:	e7f5      	b.n	8004048 <HardFault_Handler+0x4>
 800405c:	58022000 	.word	0x58022000

08004060 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004060:	e7fe      	b.n	8004060 <MemManage_Handler>
 8004062:	bf00      	nop

08004064 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004064:	e7fe      	b.n	8004064 <BusFault_Handler>
 8004066:	bf00      	nop

08004068 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004068:	e7fe      	b.n	8004068 <UsageFault_Handler>
 800406a:	bf00      	nop

0800406c <SVC_Handler>:
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <DebugMon_Handler>:
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <PendSV_Handler>:
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004078:	f001 bc6e 	b.w	8005958 <HAL_IncTick>

0800407c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <LTDC_IRQHandler+0x8>)
 800407e:	f003 b93f 	b.w	8007300 <HAL_LTDC_IRQHandler>
 8004082:	bf00      	nop
 8004084:	2401146c 	.word	0x2401146c

08004088 <LTDC_ER_IRQHandler>:
 8004088:	f7ff bff8 	b.w	800407c <LTDC_IRQHandler>

0800408c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <DSI_IRQHandler+0x8>)
 800408e:	f002 bbff 	b.w	8006890 <HAL_DSI_IRQHandler>
 8004092:	bf00      	nop
 8004094:	24011530 	.word	0x24011530

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800409c:	f7fc f91c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c6:	f005 fba1 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7ff fcef 	bl	8003aac <main>
  bx  lr
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80040d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040d8:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 80040dc:	08013608 	.word	0x08013608
  ldr r2, =_sbss
 80040e0:	24001078 	.word	0x24001078
  ldr r4, =_ebss
 80040e4:	240115ec 	.word	0x240115ec

080040e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC3_IRQHandler>
	...

080040ec <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80040ee:	4c0e      	ldr	r4, [pc, #56]	; (8004128 <IS42S32800J_ModeRegConfig+0x3c>)
 80040f0:	2304      	movs	r3, #4
{
 80040f2:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 80040f4:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80040f6:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80040f8:	69d7      	ldr	r7, [r2, #28]
 80040fa:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040fe:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004100:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004102:	6955      	ldr	r5, [r2, #20]
 8004104:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004106:	6995      	ldr	r5, [r2, #24]
 8004108:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800410a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800410c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8004110:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004112:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004114:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004116:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004118:	f005 f9fe 	bl	8009518 <HAL_SDRAM_SendCommand>
 800411c:	3800      	subs	r0, #0
 800411e:	bf18      	it	ne
 8004120:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004122:	4240      	negs	r0, r0
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004126:	bf00      	nop
 8004128:	24001110 	.word	0x24001110

0800412c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800412c:	680a      	ldr	r2, [r1, #0]
{
 800412e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004130:	4c22      	ldr	r4, [pc, #136]	; (80041bc <IS42S32800J_Init+0x90>)
 8004132:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004134:	2700      	movs	r7, #0
{
 8004136:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004138:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800413a:	4621      	mov	r1, r4
 800413c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004140:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8004142:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004144:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004146:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004148:	f005 f9e6 	bl	8009518 <HAL_SDRAM_SendCommand>
 800414c:	2800      	cmp	r0, #0
 800414e:	d132      	bne.n	80041b6 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004150:	f001 fc0e 	bl	8005970 <HAL_GetTick>
 8004154:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004156:	f001 fc0b 	bl	8005970 <HAL_GetTick>
 800415a:	4287      	cmp	r7, r0
 800415c:	d0fb      	beq.n	8004156 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800415e:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004160:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8004162:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004164:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004166:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004168:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800416c:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800416e:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8004170:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004172:	4912      	ldr	r1, [pc, #72]	; (80041bc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004174:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004176:	f005 f9cf 	bl	8009518 <HAL_SDRAM_SendCommand>
 800417a:	4603      	mov	r3, r0
 800417c:	b9d8      	cbnz	r0, 80041b6 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800417e:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8004180:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8004182:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004184:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8004188:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800418a:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 800418c:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800418e:	490b      	ldr	r1, [pc, #44]	; (80041bc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004190:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004192:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004194:	f005 f9c0 	bl	8009518 <HAL_SDRAM_SendCommand>
 8004198:	b968      	cbnz	r0, 80041b6 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800419a:	4629      	mov	r1, r5
 800419c:	4630      	mov	r0, r6
 800419e:	f7ff ffa5 	bl	80040ec <IS42S32800J_ModeRegConfig>
 80041a2:	b940      	cbnz	r0, 80041b6 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80041a4:	68a9      	ldr	r1, [r5, #8]
 80041a6:	4630      	mov	r0, r6
 80041a8:	f005 f9d6 	bl	8009558 <HAL_SDRAM_ProgramRefreshRate>
 80041ac:	3800      	subs	r0, #0
 80041ae:	bf18      	it	ne
 80041b0:	2001      	movne	r0, #1
 80041b2:	4240      	negs	r0, r0
}
 80041b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80041ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041bc:	24001110 	.word	0x24001110

080041c0 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80041ca:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	600b      	str	r3, [r1, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	24001120 	.word	0x24001120

080041d8 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80041d8:	4b02      	ldr	r3, [pc, #8]	; (80041e4 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 80041da:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	600b      	str	r3, [r1, #0]
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	24001120 	.word	0x24001120

080041e8 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <OTM8009A_GetXSize+0x1c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b123      	cbz	r3, 80041f8 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 80041ee:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 80041f2:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 80041f4:	600b      	str	r3, [r1, #0]
}
 80041f6:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 80041f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80041fc:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 80041fe:	600b      	str	r3, [r1, #0]
}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	24001120 	.word	0x24001120

08004208 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <OTM8009A_GetYSize+0x1c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b123      	cbz	r3, 8004218 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800420e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004212:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004214:	600b      	str	r3, [r1, #0]
}
 8004216:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004218:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 800421c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800421e:	600b      	str	r3, [r1, #0]
}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	24001120 	.word	0x24001120

08004228 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop

08004230 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop

08004248 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004258:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800425a:	6884      	ldr	r4, [r0, #8]
 800425c:	8800      	ldrh	r0, [r0, #0]
 800425e:	46a4      	mov	ip, r4
}
 8004260:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004264:	4760      	bx	ip
 8004266:	bf00      	nop

08004268 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004268:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800426a:	6844      	ldr	r4, [r0, #4]
 800426c:	8800      	ldrh	r0, [r0, #0]
 800426e:	46a4      	mov	ip, r4
}
 8004270:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004274:	4760      	bx	ip
 8004276:	bf00      	nop

08004278 <OTM8009A_Init>:
{
 8004278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800427c:	2300      	movs	r3, #0
 800427e:	f100 0710 	add.w	r7, r0, #16
{
 8004282:	b082      	sub	sp, #8
 8004284:	4680      	mov	r8, r0
 8004286:	4689      	mov	r9, r1
 8004288:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800428a:	4619      	mov	r1, r3
 800428c:	4ae0      	ldr	r2, [pc, #896]	; (8004610 <OTM8009A_Init+0x398>)
 800428e:	4638      	mov	r0, r7
 8004290:	f000 fcd6 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004294:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004296:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004298:	4ade      	ldr	r2, [pc, #888]	; (8004614 <OTM8009A_Init+0x39c>)
 800429a:	21ff      	movs	r1, #255	; 0xff
 800429c:	4638      	mov	r0, r7
 800429e:	f000 fccf 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80042a4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042a6:	4adc      	ldr	r2, [pc, #880]	; (8004618 <OTM8009A_Init+0x3a0>)
 80042a8:	4619      	mov	r1, r3
 80042aa:	4638      	mov	r0, r7
 80042ac:	f000 fcc8 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80042b0:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80042b2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80042b6:	4ad9      	ldr	r2, [pc, #868]	; (800461c <OTM8009A_Init+0x3a4>)
 80042b8:	21ff      	movs	r1, #255	; 0xff
 80042ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042bc:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80042be:	f000 fcbf 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80042c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042c6:	4ad4      	ldr	r2, [pc, #848]	; (8004618 <OTM8009A_Init+0x3a0>)
 80042c8:	4619      	mov	r1, r3
 80042ca:	4638      	mov	r0, r7
 80042cc:	f000 fcb8 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80042d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042d2:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80042d4:	2300      	movs	r3, #0
 80042d6:	4ad2      	ldr	r2, [pc, #840]	; (8004620 <OTM8009A_Init+0x3a8>)
 80042d8:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80042da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80042dc:	4638      	mov	r0, r7
 80042de:	f000 fcaf 	bl	8004c40 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80042e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80042e6:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 80042e8:	4798      	blx	r3
 80042ea:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80042ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80042f0:	4798      	blx	r3
 80042f2:	1b00      	subs	r0, r0, r4
 80042f4:	2809      	cmp	r0, #9
 80042f6:	d9f9      	bls.n	80042ec <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80042f8:	2300      	movs	r3, #0
 80042fa:	4aca      	ldr	r2, [pc, #808]	; (8004624 <OTM8009A_Init+0x3ac>)
 80042fc:	4638      	mov	r0, r7
 80042fe:	4619      	mov	r1, r3
 8004300:	f000 fc9e 	bl	8004c40 <otm8009a_write_reg>
 8004304:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004306:	2300      	movs	r3, #0
 8004308:	4ac7      	ldr	r2, [pc, #796]	; (8004628 <OTM8009A_Init+0x3b0>)
 800430a:	21c4      	movs	r1, #196	; 0xc4
 800430c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800430e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004310:	f000 fc96 	bl	8004c40 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004314:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004318:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800431a:	4798      	blx	r3
 800431c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800431e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004322:	4798      	blx	r3
 8004324:	1b40      	subs	r0, r0, r5
 8004326:	2809      	cmp	r0, #9
 8004328:	d9f9      	bls.n	800431e <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800432a:	2300      	movs	r3, #0
 800432c:	4abf      	ldr	r2, [pc, #764]	; (800462c <OTM8009A_Init+0x3b4>)
 800432e:	4638      	mov	r0, r7
 8004330:	4619      	mov	r1, r3
 8004332:	f000 fc85 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004336:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004338:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800433a:	4abd      	ldr	r2, [pc, #756]	; (8004630 <OTM8009A_Init+0x3b8>)
 800433c:	21c5      	movs	r1, #197	; 0xc5
 800433e:	4638      	mov	r0, r7
 8004340:	f000 fc7e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004344:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004346:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004348:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800434a:	4619      	mov	r1, r3
 800434c:	4ab9      	ldr	r2, [pc, #740]	; (8004634 <OTM8009A_Init+0x3bc>)
 800434e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004350:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004352:	f000 fc75 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004356:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004358:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800435a:	4ab7      	ldr	r2, [pc, #732]	; (8004638 <OTM8009A_Init+0x3c0>)
 800435c:	21c5      	movs	r1, #197	; 0xc5
 800435e:	4638      	mov	r0, r7
 8004360:	f000 fc6e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004364:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004366:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004368:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800436a:	4619      	mov	r1, r3
 800436c:	4ab3      	ldr	r2, [pc, #716]	; (800463c <OTM8009A_Init+0x3c4>)
 800436e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004370:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004372:	f000 fc65 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004376:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004378:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800437a:	4ab1      	ldr	r2, [pc, #708]	; (8004640 <OTM8009A_Init+0x3c8>)
 800437c:	21c0      	movs	r1, #192	; 0xc0
 800437e:	4638      	mov	r0, r7
 8004380:	f000 fc5e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004384:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004386:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004388:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800438a:	4619      	mov	r1, r3
 800438c:	4aa0      	ldr	r2, [pc, #640]	; (8004610 <OTM8009A_Init+0x398>)
 800438e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004390:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004392:	f000 fc55 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004396:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004398:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800439a:	4aaa      	ldr	r2, [pc, #680]	; (8004644 <OTM8009A_Init+0x3cc>)
 800439c:	21d9      	movs	r1, #217	; 0xd9
 800439e:	4638      	mov	r0, r7
 80043a0:	f000 fc4e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80043a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80043a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043aa:	4619      	mov	r1, r3
 80043ac:	4aa6      	ldr	r2, [pc, #664]	; (8004648 <OTM8009A_Init+0x3d0>)
 80043ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80043b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043b2:	f000 fc45 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80043b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80043ba:	4aa4      	ldr	r2, [pc, #656]	; (800464c <OTM8009A_Init+0x3d4>)
 80043bc:	21c1      	movs	r1, #193	; 0xc1
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 fc3e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80043c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043ca:	4619      	mov	r1, r3
 80043cc:	4aa0      	ldr	r2, [pc, #640]	; (8004650 <OTM8009A_Init+0x3d8>)
 80043ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80043d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043d2:	f000 fc35 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80043d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80043da:	4a9e      	ldr	r2, [pc, #632]	; (8004654 <OTM8009A_Init+0x3dc>)
 80043dc:	21c1      	movs	r1, #193	; 0xc1
 80043de:	4638      	mov	r0, r7
 80043e0:	f000 fc2e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80043e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80043e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80043ea:	4619      	mov	r1, r3
 80043ec:	4a9a      	ldr	r2, [pc, #616]	; (8004658 <OTM8009A_Init+0x3e0>)
 80043ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80043f0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80043f2:	f000 fc25 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80043f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80043f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80043fa:	4a98      	ldr	r2, [pc, #608]	; (800465c <OTM8009A_Init+0x3e4>)
 80043fc:	21c5      	movs	r1, #197	; 0xc5
 80043fe:	4638      	mov	r0, r7
 8004400:	f000 fc1e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004404:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004406:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004408:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800440a:	4619      	mov	r1, r3
 800440c:	4a94      	ldr	r2, [pc, #592]	; (8004660 <OTM8009A_Init+0x3e8>)
 800440e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004410:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004412:	f000 fc15 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004416:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004418:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800441a:	4a87      	ldr	r2, [pc, #540]	; (8004638 <OTM8009A_Init+0x3c0>)
 800441c:	21c5      	movs	r1, #197	; 0xc5
 800441e:	4638      	mov	r0, r7
 8004420:	f000 fc0e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004424:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004426:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004428:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800442a:	4619      	mov	r1, r3
 800442c:	4a78      	ldr	r2, [pc, #480]	; (8004610 <OTM8009A_Init+0x398>)
 800442e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004430:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004432:	f000 fc05 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004436:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004438:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800443a:	4a8a      	ldr	r2, [pc, #552]	; (8004664 <OTM8009A_Init+0x3ec>)
 800443c:	21d8      	movs	r1, #216	; 0xd8
 800443e:	4638      	mov	r0, r7
 8004440:	f000 fbfe 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004444:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004446:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004448:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800444a:	4619      	mov	r1, r3
 800444c:	4a86      	ldr	r2, [pc, #536]	; (8004668 <OTM8009A_Init+0x3f0>)
 800444e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004450:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004452:	f000 fbf5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004456:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004458:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800445a:	4a84      	ldr	r2, [pc, #528]	; (800466c <OTM8009A_Init+0x3f4>)
 800445c:	21c5      	movs	r1, #197	; 0xc5
 800445e:	4638      	mov	r0, r7
 8004460:	f000 fbee 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004464:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004466:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004468:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800446a:	4619      	mov	r1, r3
 800446c:	4a80      	ldr	r2, [pc, #512]	; (8004670 <OTM8009A_Init+0x3f8>)
 800446e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004470:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004472:	f000 fbe5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004476:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004478:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800447a:	4a7e      	ldr	r2, [pc, #504]	; (8004674 <OTM8009A_Init+0x3fc>)
 800447c:	21c0      	movs	r1, #192	; 0xc0
 800447e:	4638      	mov	r0, r7
 8004480:	f000 fbde 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004484:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004486:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004488:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800448a:	4619      	mov	r1, r3
 800448c:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <OTM8009A_Init+0x400>)
 800448e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004490:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004492:	f000 fbd5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004496:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004498:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800449a:	4a78      	ldr	r2, [pc, #480]	; (800467c <OTM8009A_Init+0x404>)
 800449c:	21c5      	movs	r1, #197	; 0xc5
 800449e:	4638      	mov	r0, r7
 80044a0:	f000 fbce 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80044a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80044a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80044a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80044aa:	4619      	mov	r1, r3
 80044ac:	4a66      	ldr	r2, [pc, #408]	; (8004648 <OTM8009A_Init+0x3d0>)
 80044ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80044b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80044b2:	f000 fbc5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80044b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80044b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80044ba:	4a71      	ldr	r2, [pc, #452]	; (8004680 <OTM8009A_Init+0x408>)
 80044bc:	21c4      	movs	r1, #196	; 0xc4
 80044be:	4638      	mov	r0, r7
 80044c0:	f000 fbbe 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80044c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80044c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80044c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80044ca:	4619      	mov	r1, r3
 80044cc:	4a60      	ldr	r2, [pc, #384]	; (8004650 <OTM8009A_Init+0x3d8>)
 80044ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80044d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80044d2:	f000 fbb5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80044d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80044d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80044da:	4a6a      	ldr	r2, [pc, #424]	; (8004684 <OTM8009A_Init+0x40c>)
 80044dc:	21c1      	movs	r1, #193	; 0xc1
 80044de:	4638      	mov	r0, r7
 80044e0:	f000 fbae 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80044e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80044e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80044e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80044ea:	4619      	mov	r1, r3
 80044ec:	4a66      	ldr	r2, [pc, #408]	; (8004688 <OTM8009A_Init+0x410>)
 80044ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80044f0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80044f2:	f000 fba5 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80044f6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80044f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80044fa:	4a64      	ldr	r2, [pc, #400]	; (800468c <OTM8009A_Init+0x414>)
 80044fc:	21b3      	movs	r1, #179	; 0xb3
 80044fe:	4638      	mov	r0, r7
 8004500:	f000 fb9e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004504:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004506:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004508:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800450a:	4619      	mov	r1, r3
 800450c:	4a42      	ldr	r2, [pc, #264]	; (8004618 <OTM8009A_Init+0x3a0>)
 800450e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004510:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004512:	f000 fb95 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004516:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004518:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800451a:	4a5d      	ldr	r2, [pc, #372]	; (8004690 <OTM8009A_Init+0x418>)
 800451c:	21ce      	movs	r1, #206	; 0xce
 800451e:	4638      	mov	r0, r7
 8004520:	f000 fb8e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004524:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004526:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004528:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800452a:	4619      	mov	r1, r3
 800452c:	4a59      	ldr	r2, [pc, #356]	; (8004694 <OTM8009A_Init+0x41c>)
 800452e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004530:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004532:	f000 fb85 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004536:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004538:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800453a:	4a57      	ldr	r2, [pc, #348]	; (8004698 <OTM8009A_Init+0x420>)
 800453c:	21ce      	movs	r1, #206	; 0xce
 800453e:	4638      	mov	r0, r7
 8004540:	f000 fb7e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004544:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004546:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004548:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800454a:	4619      	mov	r1, r3
 800454c:	4a53      	ldr	r2, [pc, #332]	; (800469c <OTM8009A_Init+0x424>)
 800454e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004550:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004552:	f000 fb75 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004556:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004558:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800455a:	4a51      	ldr	r2, [pc, #324]	; (80046a0 <OTM8009A_Init+0x428>)
 800455c:	21ce      	movs	r1, #206	; 0xce
 800455e:	4638      	mov	r0, r7
 8004560:	f000 fb6e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004564:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004566:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004568:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800456a:	4619      	mov	r1, r3
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <OTM8009A_Init+0x42c>)
 800456e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004570:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004572:	f000 fb65 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004576:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004578:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800457a:	4a4b      	ldr	r2, [pc, #300]	; (80046a8 <OTM8009A_Init+0x430>)
 800457c:	21cf      	movs	r1, #207	; 0xcf
 800457e:	4638      	mov	r0, r7
 8004580:	f000 fb5e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004584:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004586:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004588:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800458a:	4619      	mov	r1, r3
 800458c:	4a47      	ldr	r2, [pc, #284]	; (80046ac <OTM8009A_Init+0x434>)
 800458e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004590:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004592:	f000 fb55 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004596:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004598:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800459a:	4a45      	ldr	r2, [pc, #276]	; (80046b0 <OTM8009A_Init+0x438>)
 800459c:	21cf      	movs	r1, #207	; 0xcf
 800459e:	4638      	mov	r0, r7
 80045a0:	f000 fb4e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80045a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80045a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80045a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80045aa:	4619      	mov	r1, r3
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <OTM8009A_Init+0x3a0>)
 80045ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80045b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80045b2:	f000 fb45 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80045b6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80045b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80045ba:	4a3e      	ldr	r2, [pc, #248]	; (80046b4 <OTM8009A_Init+0x43c>)
 80045bc:	21cb      	movs	r1, #203	; 0xcb
 80045be:	4638      	mov	r0, r7
 80045c0:	f000 fb3e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80045c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80045c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80045c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80045ca:	4619      	mov	r1, r3
 80045cc:	4a3a      	ldr	r2, [pc, #232]	; (80046b8 <OTM8009A_Init+0x440>)
 80045ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80045d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80045d2:	f000 fb35 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80045d6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80045d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <OTM8009A_Init+0x444>)
 80045dc:	21cb      	movs	r1, #203	; 0xcb
 80045de:	4638      	mov	r0, r7
 80045e0:	f000 fb2e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80045e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80045e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045ea:	4619      	mov	r1, r3
 80045ec:	4a29      	ldr	r2, [pc, #164]	; (8004694 <OTM8009A_Init+0x41c>)
 80045ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80045f0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045f2:	f000 fb25 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80045f6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80045fa:	4a31      	ldr	r2, [pc, #196]	; (80046c0 <OTM8009A_Init+0x448>)
 80045fc:	21cb      	movs	r1, #203	; 0xcb
 80045fe:	4638      	mov	r0, r7
 8004600:	f000 fb1e 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004604:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004606:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004608:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800460a:	4619      	mov	r1, r3
 800460c:	e05a      	b.n	80046c4 <OTM8009A_Init+0x44c>
 800460e:	bf00      	nop
 8004610:	08011ae9 	.word	0x08011ae9
 8004614:	080119b8 	.word	0x080119b8
 8004618:	08011aea 	.word	0x08011aea
 800461c:	08011a44 	.word	0x08011a44
 8004620:	08011aeb 	.word	0x08011aeb
 8004624:	08011aec 	.word	0x08011aec
 8004628:	08011aed 	.word	0x08011aed
 800462c:	08011aee 	.word	0x08011aee
 8004630:	08011aef 	.word	0x08011aef
 8004634:	08011af0 	.word	0x08011af0
 8004638:	08011af1 	.word	0x08011af1
 800463c:	08011af2 	.word	0x08011af2
 8004640:	08011af3 	.word	0x08011af3
 8004644:	08011af4 	.word	0x08011af4
 8004648:	08011af5 	.word	0x08011af5
 800464c:	08011af6 	.word	0x08011af6
 8004650:	08011af7 	.word	0x08011af7
 8004654:	08011af8 	.word	0x08011af8
 8004658:	08011af9 	.word	0x08011af9
 800465c:	08011afa 	.word	0x08011afa
 8004660:	08011afb 	.word	0x08011afb
 8004664:	08011ab8 	.word	0x08011ab8
 8004668:	08011afc 	.word	0x08011afc
 800466c:	08011afd 	.word	0x08011afd
 8004670:	08011afe 	.word	0x08011afe
 8004674:	08011aff 	.word	0x08011aff
 8004678:	08011b00 	.word	0x08011b00
 800467c:	08011b01 	.word	0x08011b01
 8004680:	08011b02 	.word	0x08011b02
 8004684:	08011b03 	.word	0x08011b03
 8004688:	08011b04 	.word	0x08011b04
 800468c:	08011abc 	.word	0x08011abc
 8004690:	08011ac0 	.word	0x08011ac0
 8004694:	08011b05 	.word	0x08011b05
 8004698:	08011ac8 	.word	0x08011ac8
 800469c:	08011b06 	.word	0x08011b06
 80046a0:	08011ad8 	.word	0x08011ad8
 80046a4:	08011b07 	.word	0x08011b07
 80046a8:	080119bc 	.word	0x080119bc
 80046ac:	08011b08 	.word	0x08011b08
 80046b0:	08011b15 	.word	0x08011b15
 80046b4:	080119c8 	.word	0x080119c8
 80046b8:	08011b09 	.word	0x08011b09
 80046bc:	080119d4 	.word	0x080119d4
 80046c0:	080119e4 	.word	0x080119e4
 80046c4:	4ad1      	ldr	r2, [pc, #836]	; (8004a0c <OTM8009A_Init+0x794>)
 80046c6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80046c8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046ca:	f000 fab9 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80046ce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80046d2:	4acf      	ldr	r2, [pc, #828]	; (8004a10 <OTM8009A_Init+0x798>)
 80046d4:	21cb      	movs	r1, #203	; 0xcb
 80046d6:	4638      	mov	r0, r7
 80046d8:	f000 fab2 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80046dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046de:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80046e0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80046e2:	4619      	mov	r1, r3
 80046e4:	4acb      	ldr	r2, [pc, #812]	; (8004a14 <OTM8009A_Init+0x79c>)
 80046e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80046e8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80046ea:	f000 faa9 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80046ee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80046f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80046f2:	4ac9      	ldr	r2, [pc, #804]	; (8004a18 <OTM8009A_Init+0x7a0>)
 80046f4:	21cb      	movs	r1, #203	; 0xcb
 80046f6:	4638      	mov	r0, r7
 80046f8:	f000 faa2 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80046fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80046fe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004700:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004702:	4619      	mov	r1, r3
 8004704:	4ac5      	ldr	r2, [pc, #788]	; (8004a1c <OTM8009A_Init+0x7a4>)
 8004706:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004708:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800470a:	f000 fa99 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800470e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004710:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004712:	4ac3      	ldr	r2, [pc, #780]	; (8004a20 <OTM8009A_Init+0x7a8>)
 8004714:	21cb      	movs	r1, #203	; 0xcb
 8004716:	4638      	mov	r0, r7
 8004718:	f000 fa92 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800471c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800471e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004720:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004722:	4619      	mov	r1, r3
 8004724:	4abf      	ldr	r2, [pc, #764]	; (8004a24 <OTM8009A_Init+0x7ac>)
 8004726:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004728:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800472a:	f000 fa89 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800472e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004730:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004732:	4abd      	ldr	r2, [pc, #756]	; (8004a28 <OTM8009A_Init+0x7b0>)
 8004734:	21cb      	movs	r1, #203	; 0xcb
 8004736:	4638      	mov	r0, r7
 8004738:	f000 fa82 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800473c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800473e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004740:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004742:	4619      	mov	r1, r3
 8004744:	4ab9      	ldr	r2, [pc, #740]	; (8004a2c <OTM8009A_Init+0x7b4>)
 8004746:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004748:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800474a:	f000 fa79 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800474e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004750:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004752:	4ab7      	ldr	r2, [pc, #732]	; (8004a30 <OTM8009A_Init+0x7b8>)
 8004754:	21cb      	movs	r1, #203	; 0xcb
 8004756:	4638      	mov	r0, r7
 8004758:	f000 fa72 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800475c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800475e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004760:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004762:	4619      	mov	r1, r3
 8004764:	4ab3      	ldr	r2, [pc, #716]	; (8004a34 <OTM8009A_Init+0x7bc>)
 8004766:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004768:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800476a:	f000 fa69 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800476e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004770:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004772:	4ab1      	ldr	r2, [pc, #708]	; (8004a38 <OTM8009A_Init+0x7c0>)
 8004774:	21cc      	movs	r1, #204	; 0xcc
 8004776:	4638      	mov	r0, r7
 8004778:	f000 fa62 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800477c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800477e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004780:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004782:	4619      	mov	r1, r3
 8004784:	4aad      	ldr	r2, [pc, #692]	; (8004a3c <OTM8009A_Init+0x7c4>)
 8004786:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004788:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800478a:	f000 fa59 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800478e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004790:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004792:	4aab      	ldr	r2, [pc, #684]	; (8004a40 <OTM8009A_Init+0x7c8>)
 8004794:	21cc      	movs	r1, #204	; 0xcc
 8004796:	4638      	mov	r0, r7
 8004798:	f000 fa52 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800479c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800479e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80047a0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80047a2:	4619      	mov	r1, r3
 80047a4:	4aa7      	ldr	r2, [pc, #668]	; (8004a44 <OTM8009A_Init+0x7cc>)
 80047a6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80047a8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80047aa:	f000 fa49 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80047ae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80047b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80047b2:	4aa5      	ldr	r2, [pc, #660]	; (8004a48 <OTM8009A_Init+0x7d0>)
 80047b4:	21cc      	movs	r1, #204	; 0xcc
 80047b6:	4638      	mov	r0, r7
 80047b8:	f000 fa42 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80047bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80047be:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80047c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80047c2:	4619      	mov	r1, r3
 80047c4:	4a91      	ldr	r2, [pc, #580]	; (8004a0c <OTM8009A_Init+0x794>)
 80047c6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80047c8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80047ca:	f000 fa39 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80047ce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80047d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80047d2:	4a9e      	ldr	r2, [pc, #632]	; (8004a4c <OTM8009A_Init+0x7d4>)
 80047d4:	21cc      	movs	r1, #204	; 0xcc
 80047d6:	4638      	mov	r0, r7
 80047d8:	f000 fa32 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80047dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80047de:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80047e0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80047e2:	4619      	mov	r1, r3
 80047e4:	4a8b      	ldr	r2, [pc, #556]	; (8004a14 <OTM8009A_Init+0x79c>)
 80047e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80047e8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80047ea:	f000 fa29 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80047ee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80047f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80047f2:	4a97      	ldr	r2, [pc, #604]	; (8004a50 <OTM8009A_Init+0x7d8>)
 80047f4:	21cc      	movs	r1, #204	; 0xcc
 80047f6:	4638      	mov	r0, r7
 80047f8:	f000 fa22 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80047fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80047fe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004800:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004802:	4619      	mov	r1, r3
 8004804:	4a85      	ldr	r2, [pc, #532]	; (8004a1c <OTM8009A_Init+0x7a4>)
 8004806:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004808:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800480a:	f000 fa19 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800480e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004810:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004812:	4a90      	ldr	r2, [pc, #576]	; (8004a54 <OTM8009A_Init+0x7dc>)
 8004814:	21cc      	movs	r1, #204	; 0xcc
 8004816:	4638      	mov	r0, r7
 8004818:	f000 fa12 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800481c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800481e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004820:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004822:	4619      	mov	r1, r3
 8004824:	4a8c      	ldr	r2, [pc, #560]	; (8004a58 <OTM8009A_Init+0x7e0>)
 8004826:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004828:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800482a:	f000 fa09 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800482e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004830:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004832:	4a8a      	ldr	r2, [pc, #552]	; (8004a5c <OTM8009A_Init+0x7e4>)
 8004834:	21c5      	movs	r1, #197	; 0xc5
 8004836:	4638      	mov	r0, r7
 8004838:	f000 fa02 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800483c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800483e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004840:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004842:	4619      	mov	r1, r3
 8004844:	4a86      	ldr	r2, [pc, #536]	; (8004a60 <OTM8009A_Init+0x7e8>)
 8004846:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004848:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800484a:	f000 f9f9 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800484e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004850:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004852:	4a84      	ldr	r2, [pc, #528]	; (8004a64 <OTM8009A_Init+0x7ec>)
 8004854:	21f5      	movs	r1, #245	; 0xf5
 8004856:	4638      	mov	r0, r7
 8004858:	f000 f9f2 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800485c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800485e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004860:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004862:	4619      	mov	r1, r3
 8004864:	4a80      	ldr	r2, [pc, #512]	; (8004a68 <OTM8009A_Init+0x7f0>)
 8004866:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004868:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800486a:	f000 f9e9 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800486e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004870:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004872:	4a7e      	ldr	r2, [pc, #504]	; (8004a6c <OTM8009A_Init+0x7f4>)
 8004874:	21c6      	movs	r1, #198	; 0xc6
 8004876:	4638      	mov	r0, r7
 8004878:	f000 f9e2 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800487c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800487e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004880:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004882:	4619      	mov	r1, r3
 8004884:	4a7a      	ldr	r2, [pc, #488]	; (8004a70 <OTM8009A_Init+0x7f8>)
 8004886:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004888:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800488a:	f000 f9d9 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800488e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004890:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004892:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <OTM8009A_Init+0x7fc>)
 8004894:	21ff      	movs	r1, #255	; 0xff
 8004896:	4638      	mov	r0, r7
 8004898:	f000 f9d2 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800489c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800489e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048a0:	4a73      	ldr	r2, [pc, #460]	; (8004a70 <OTM8009A_Init+0x7f8>)
 80048a2:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80048a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048a6:	4638      	mov	r0, r7
 80048a8:	f000 f9ca 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80048ae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048b2:	4619      	mov	r1, r3
 80048b4:	4a6e      	ldr	r2, [pc, #440]	; (8004a70 <OTM8009A_Init+0x7f8>)
 80048b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048b8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ba:	f000 f9c1 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80048be:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80048c2:	4a6d      	ldr	r2, [pc, #436]	; (8004a78 <OTM8009A_Init+0x800>)
 80048c4:	21e1      	movs	r1, #225	; 0xe1
 80048c6:	4638      	mov	r0, r7
 80048c8:	f000 f9ba 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ce:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80048d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048d2:	4619      	mov	r1, r3
 80048d4:	4a66      	ldr	r2, [pc, #408]	; (8004a70 <OTM8009A_Init+0x7f8>)
 80048d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80048d8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048da:	f000 f9b1 	bl	8004c40 <otm8009a_write_reg>
 80048de:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80048e0:	2310      	movs	r3, #16
 80048e2:	4a66      	ldr	r2, [pc, #408]	; (8004a7c <OTM8009A_Init+0x804>)
 80048e4:	21e2      	movs	r1, #226	; 0xe2
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f9aa 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ec:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80048ee:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80048f0:	2300      	movs	r3, #0
 80048f2:	4a63      	ldr	r2, [pc, #396]	; (8004a80 <OTM8009A_Init+0x808>)
 80048f4:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80048f6:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80048f8:	4638      	mov	r0, r7
 80048fa:	f000 f9a1 	bl	8004c40 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80048fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004902:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004904:	4798      	blx	r3
 8004906:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800490c:	4798      	blx	r3
 800490e:	1b40      	subs	r0, r0, r5
 8004910:	2877      	cmp	r0, #119	; 0x77
 8004912:	d9f9      	bls.n	8004908 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004914:	f1b9 0f00 	cmp.w	r9, #0
 8004918:	d074      	beq.n	8004a04 <OTM8009A_Init+0x78c>
 800491a:	f1b9 0f02 	cmp.w	r9, #2
 800491e:	d14f      	bne.n	80049c0 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004920:	2300      	movs	r3, #0
 8004922:	4a58      	ldr	r2, [pc, #352]	; (8004a84 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004924:	213a      	movs	r1, #58	; 0x3a
 8004926:	4638      	mov	r0, r7
 8004928:	f000 f98a 	bl	8004c40 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800492c:	4d56      	ldr	r5, [pc, #344]	; (8004a88 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800492e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004932:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004934:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004938:	d046      	beq.n	80049c8 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800493a:	2300      	movs	r3, #0
 800493c:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800493e:	2300      	movs	r3, #0
 8004940:	4a52      	ldr	r2, [pc, #328]	; (8004a8c <OTM8009A_Init+0x814>)
 8004942:	2151      	movs	r1, #81	; 0x51
 8004944:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004946:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004948:	f000 f97a 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800494c:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800494e:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004952:	4653      	mov	r3, sl
 8004954:	2153      	movs	r1, #83	; 0x53
 8004956:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004958:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800495c:	f000 f970 	bl	8004c40 <otm8009a_write_reg>
 8004960:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004962:	4653      	mov	r3, sl
 8004964:	4a4b      	ldr	r2, [pc, #300]	; (8004a94 <OTM8009A_Init+0x81c>)
 8004966:	2155      	movs	r1, #85	; 0x55
 8004968:	4638      	mov	r0, r7
 800496a:	f000 f969 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800496e:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004970:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004972:	4653      	mov	r3, sl
 8004974:	4a48      	ldr	r2, [pc, #288]	; (8004a98 <OTM8009A_Init+0x820>)
 8004976:	215e      	movs	r1, #94	; 0x5e
 8004978:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800497a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800497c:	f000 f960 	bl	8004c40 <otm8009a_write_reg>
 8004980:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004982:	4653      	mov	r3, sl
 8004984:	4a45      	ldr	r2, [pc, #276]	; (8004a9c <OTM8009A_Init+0x824>)
 8004986:	2129      	movs	r1, #41	; 0x29
 8004988:	4638      	mov	r0, r7
 800498a:	f000 f959 	bl	8004c40 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800498e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004990:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004992:	4653      	mov	r3, sl
 8004994:	4651      	mov	r1, sl
 8004996:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <OTM8009A_Init+0x7f8>)
 8004998:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800499a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800499c:	f000 f950 	bl	8004c40 <otm8009a_write_reg>
 80049a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80049a2:	4653      	mov	r3, sl
 80049a4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80049a8:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <OTM8009A_Init+0x828>)
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	f000 f948 	bl	8004c40 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80049b0:	42c4      	cmn	r4, r0
}
 80049b2:	bf14      	ite	ne
 80049b4:	f04f 30ff 	movne.w	r0, #4294967295
 80049b8:	4650      	moveq	r0, sl
 80049ba:	b002      	add	sp, #8
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80049c0:	f1ba 0f01 	cmp.w	sl, #1
 80049c4:	4d30      	ldr	r5, [pc, #192]	; (8004a88 <OTM8009A_Init+0x810>)
 80049c6:	d1b8      	bne.n	800493a <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80049c8:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80049ca:	2300      	movs	r3, #0
 80049cc:	f10d 0207 	add.w	r2, sp, #7
 80049d0:	2136      	movs	r1, #54	; 0x36
 80049d2:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80049d4:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80049d8:	f000 f932 	bl	8004c40 <otm8009a_write_reg>
 80049dc:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80049de:	2304      	movs	r3, #4
 80049e0:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <OTM8009A_Init+0x82c>)
 80049e2:	212a      	movs	r1, #42	; 0x2a
 80049e4:	4638      	mov	r0, r7
 80049e6:	f000 f92b 	bl	8004c40 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80049ea:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80049ec:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80049ee:	2304      	movs	r3, #4
 80049f0:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <OTM8009A_Init+0x830>)
 80049f2:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80049f4:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80049f6:	4638      	mov	r0, r7
 80049f8:	f000 f922 	bl	8004c40 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80049fc:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004a00:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004a02:	e79c      	b.n	800493e <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004a04:	464b      	mov	r3, r9
 8004a06:	4a29      	ldr	r2, [pc, #164]	; (8004aac <OTM8009A_Init+0x834>)
 8004a08:	e78c      	b.n	8004924 <OTM8009A_Init+0x6ac>
 8004a0a:	bf00      	nop
 8004a0c:	08011b06 	.word	0x08011b06
 8004a10:	080119f4 	.word	0x080119f4
 8004a14:	08011b07 	.word	0x08011b07
 8004a18:	08011a00 	.word	0x08011a00
 8004a1c:	08011b08 	.word	0x08011b08
 8004a20:	08011a10 	.word	0x08011a10
 8004a24:	08011b0a 	.word	0x08011b0a
 8004a28:	08011a20 	.word	0x08011a20
 8004a2c:	08011b0b 	.word	0x08011b0b
 8004a30:	08011a2c 	.word	0x08011a2c
 8004a34:	08011aea 	.word	0x08011aea
 8004a38:	08011a38 	.word	0x08011a38
 8004a3c:	08011b09 	.word	0x08011b09
 8004a40:	08011a48 	.word	0x08011a48
 8004a44:	08011b05 	.word	0x08011b05
 8004a48:	08011a58 	.word	0x08011a58
 8004a4c:	08011a68 	.word	0x08011a68
 8004a50:	08011a74 	.word	0x08011a74
 8004a54:	08011a84 	.word	0x08011a84
 8004a58:	08011af5 	.word	0x08011af5
 8004a5c:	08011b16 	.word	0x08011b16
 8004a60:	08011b17 	.word	0x08011b17
 8004a64:	08011b18 	.word	0x08011b18
 8004a68:	08011b19 	.word	0x08011b19
 8004a6c:	08011b1a 	.word	0x08011b1a
 8004a70:	08011ae9 	.word	0x08011ae9
 8004a74:	08011a94 	.word	0x08011a94
 8004a78:	08011a98 	.word	0x08011a98
 8004a7c:	08011aa8 	.word	0x08011aa8
 8004a80:	08011b0c 	.word	0x08011b0c
 8004a84:	08011b0d 	.word	0x08011b0d
 8004a88:	24001120 	.word	0x24001120
 8004a8c:	08011b0f 	.word	0x08011b0f
 8004a90:	08011b10 	.word	0x08011b10
 8004a94:	08011b11 	.word	0x08011b11
 8004a98:	08011b12 	.word	0x08011b12
 8004a9c:	08011b13 	.word	0x08011b13
 8004aa0:	08011b14 	.word	0x08011b14
 8004aa4:	080119b0 	.word	0x080119b0
 8004aa8:	080119b4 	.word	0x080119b4
 8004aac:	08011b0e 	.word	0x08011b0e

08004ab0 <OTM8009A_SetBrightness>:
{
 8004ab0:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004ab2:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8004ab6:	4e0b      	ldr	r6, [pc, #44]	; (8004ae4 <OTM8009A_SetBrightness+0x34>)
{
 8004ab8:	b082      	sub	sp, #8
 8004aba:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004abc:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f10d 0207 	add.w	r2, sp, #7
 8004ac6:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004ac8:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004aca:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004acc:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004ad0:	f000 f8b6 	bl	8004c40 <otm8009a_write_reg>
 8004ad4:	b918      	cbnz	r0, 8004ade <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <OTM8009A_SetBrightness+0x38>)
 8004ad8:	609d      	str	r5, [r3, #8]
}
 8004ada:	b002      	add	sp, #8
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004ae2:	e7fa      	b.n	8004ada <OTM8009A_SetBrightness+0x2a>
 8004ae4:	51eb851f 	.word	0x51eb851f
 8004ae8:	24001120 	.word	0x24001120

08004aec <OTM8009A_DisplayOn>:
{
 8004aec:	b500      	push	{lr}
 8004aee:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004af0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004af2:	2129      	movs	r1, #41	; 0x29
 8004af4:	3010      	adds	r0, #16
 8004af6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004afa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004afe:	f000 f89f 	bl	8004c40 <otm8009a_write_reg>
 8004b02:	3800      	subs	r0, #0
 8004b04:	bf18      	it	ne
 8004b06:	2001      	movne	r0, #1
}
 8004b08:	4240      	negs	r0, r0
 8004b0a:	b003      	add	sp, #12
 8004b0c:	f85d fb04 	ldr.w	pc, [sp], #4

08004b10 <OTM8009A_DisplayOff>:
{
 8004b10:	b500      	push	{lr}
 8004b12:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004b14:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004b16:	2128      	movs	r1, #40	; 0x28
 8004b18:	3010      	adds	r0, #16
 8004b1a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004b1e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004b22:	f000 f88d 	bl	8004c40 <otm8009a_write_reg>
 8004b26:	3800      	subs	r0, #0
 8004b28:	bf18      	it	ne
 8004b2a:	2001      	movne	r0, #1
}
 8004b2c:	4240      	negs	r0, r0
 8004b2e:	b003      	add	sp, #12
 8004b30:	f85d fb04 	ldr.w	pc, [sp], #4

08004b34 <OTM8009A_SetOrientation>:
{
 8004b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004b36:	2360      	movs	r3, #96	; 0x60
{
 8004b38:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004b3a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004b3c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004b3e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004b42:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004b46:	d83e      	bhi.n	8004bc6 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004b48:	d020      	beq.n	8004b8c <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004b4a:	f100 0510 	add.w	r5, r0, #16
 8004b4e:	4633      	mov	r3, r6
 8004b50:	f10d 0207 	add.w	r2, sp, #7
 8004b54:	2136      	movs	r1, #54	; 0x36
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f872 	bl	8004c40 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004b5c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004b5e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004b60:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <OTM8009A_SetOrientation+0x98>)
 8004b62:	212a      	movs	r1, #42	; 0x2a
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 f86b 	bl	8004c40 <otm8009a_write_reg>
 8004b6a:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004b70:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <OTM8009A_SetOrientation+0x9c>)
 8004b74:	212b      	movs	r1, #43	; 0x2b
 8004b76:	f000 f863 	bl	8004c40 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004b7a:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004b7c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004b7e:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8004b80:	3800      	subs	r0, #0
 8004b82:	bf18      	it	ne
 8004b84:	2001      	movne	r0, #1
 8004b86:	4240      	negs	r0, r0
}
 8004b88:	b003      	add	sp, #12
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004b8c:	f100 0510 	add.w	r5, r0, #16
 8004b90:	4633      	mov	r3, r6
 8004b92:	460f      	mov	r7, r1
 8004b94:	f10d 0206 	add.w	r2, sp, #6
 8004b98:	2136      	movs	r1, #54	; 0x36
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 f850 	bl	8004c40 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004ba0:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004ba2:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004ba4:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <OTM8009A_SetOrientation+0x98>)
 8004ba6:	212a      	movs	r1, #42	; 0x2a
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f849 	bl	8004c40 <otm8009a_write_reg>
 8004bae:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <OTM8009A_SetOrientation+0x9c>)
 8004bb6:	212b      	movs	r1, #43	; 0x2b
 8004bb8:	f000 f842 	bl	8004c40 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004bbc:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004bc0:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004bc2:	601f      	str	r7, [r3, #0]
 8004bc4:	e7dc      	b.n	8004b80 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004bca:	e7dd      	b.n	8004b88 <OTM8009A_SetOrientation+0x54>
 8004bcc:	080119b0 	.word	0x080119b0
 8004bd0:	080119b4 	.word	0x080119b4
 8004bd4:	24001120 	.word	0x24001120

08004bd8 <OTM8009A_ReadID>:
{ 
 8004bd8:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004bda:	3010      	adds	r0, #16
 8004bdc:	21da      	movs	r1, #218	; 0xda
{ 
 8004bde:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004be0:	2300      	movs	r3, #0
 8004be2:	f000 f825 	bl	8004c30 <otm8009a_read_reg>
 8004be6:	3800      	subs	r0, #0
 8004be8:	bf18      	it	ne
 8004bea:	2001      	movne	r0, #1
}  
 8004bec:	4240      	negs	r0, r0
 8004bee:	bd08      	pop	{r3, pc}

08004bf0 <OTM8009A_DrawVLine>:
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop

08004bf8 <OTM8009A_GetPixel>:
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004c00:	b178      	cbz	r0, 8004c22 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c02:	684a      	ldr	r2, [r1, #4]
 8004c04:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8004c06:	2000      	movs	r0, #0
{
 8004c08:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8004c0a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004c0e:	4906      	ldr	r1, [pc, #24]	; (8004c28 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c10:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004c12:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8004c14:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004c18:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8004c1c:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004c1e:	611a      	str	r2, [r3, #16]
}
 8004c20:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c26:	4770      	bx	lr
 8004c28:	08004259 	.word	0x08004259
 8004c2c:	08004269 	.word	0x08004269

08004c30 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004c30:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004c32:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004c36:	46a4      	mov	ip, r4
}
 8004c38:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004c3c:	4760      	bx	ip
 8004c3e:	bf00      	nop

08004c40 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004c40:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004c42:	6804      	ldr	r4, [r0, #0]
 8004c44:	6880      	ldr	r0, [r0, #8]
 8004c46:	46a4      	mov	ip, r4
}
 8004c48:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004c4c:	4760      	bx	ip
 8004c4e:	bf00      	nop

08004c50 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8004c50:	f000 be8e 	b.w	8005970 <HAL_GetTick>

08004c54 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004c54:	b910      	cbnz	r0, 8004c5c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8004c56:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <BSP_LCD_SetActiveLayer+0x10>)
 8004c58:	6099      	str	r1, [r3, #8]
 8004c5a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004c5c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	24011514 	.word	0x24011514

08004c68 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004c68:	b918      	cbnz	r0, 8004c72 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8004c6a:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <BSP_LCD_GetPixelFormat+0x10>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	600b      	str	r3, [r1, #0]
 8004c70:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004c72:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004c76:	4770      	bx	lr
 8004c78:	24011514 	.word	0x24011514

08004c7c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004c7c:	b948      	cbnz	r0, 8004c92 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <BSP_LCD_GetXSize+0x1c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	b11b      	cbz	r3, 8004c8e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <BSP_LCD_GetXSize+0x20>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	600b      	str	r3, [r1, #0]
 8004c8c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004c8e:	4618      	mov	r0, r3
  }

  return ret;
}
 8004c90:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004c92:	f06f 0001 	mvn.w	r0, #1
 8004c96:	4770      	bx	lr
 8004c98:	24001130 	.word	0x24001130
 8004c9c:	24011514 	.word	0x24011514

08004ca0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004ca0:	b948      	cbnz	r0, 8004cb6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <BSP_LCD_GetYSize+0x1c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	b11b      	cbz	r3, 8004cb2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <BSP_LCD_GetYSize+0x20>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004cb2:	4618      	mov	r0, r3
  }

  return ret;
}
 8004cb4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004cb6:	f06f 0001 	mvn.w	r0, #1
 8004cba:	4770      	bx	lr
 8004cbc:	24001130 	.word	0x24001130
 8004cc0:	24011514 	.word	0x24011514

08004cc4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8004ccc:	b39c      	cbz	r4, 8004d36 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004cd2:	4d1a      	ldr	r5, [pc, #104]	; (8004d3c <BSP_LCD_FillRGBRect+0x78>)
 8004cd4:	eb04 0802 	add.w	r8, r4, r2
 8004cd8:	eb0b 0e01 	add.w	lr, fp, r1
 8004cdc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004ce0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004d40 <BSP_LCD_FillRGBRect+0x7c>
 8004ce4:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8004ce6:	f1bb 0f00 	cmp.w	fp, #0
 8004cea:	d021      	beq.n	8004d30 <BSP_LCD_FillRGBRect+0x6c>
 8004cec:	460c      	mov	r4, r1
 8004cee:	e00a      	b.n	8004d06 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004cf0:	682e      	ldr	r6, [r5, #0]
 8004cf2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004cf4:	fb06 4602 	mla	r6, r6, r2, r4
 8004cf8:	3401      	adds	r4, #1
 8004cfa:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 8004cfe:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004d00:	6928      	ldr	r0, [r5, #16]
 8004d02:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004d04:	d014      	beq.n	8004d30 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d06:	68a8      	ldr	r0, [r5, #8]
 8004d08:	f8d3 9000 	ldr.w	r9, [r3]
 8004d0c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d10:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d14:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d0ea      	beq.n	8004cf0 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d1a:	682e      	ldr	r6, [r5, #0]
 8004d1c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004d1e:	fb06 4602 	mla	r6, r6, r2, r4
 8004d22:	3401      	adds	r4, #1
 8004d24:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8004d28:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004d2a:	6928      	ldr	r0, [r5, #16]
 8004d2c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004d2e:	d1ea      	bne.n	8004d06 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8004d30:	3201      	adds	r2, #1
 8004d32:	4542      	cmp	r2, r8
 8004d34:	d1d7      	bne.n	8004ce6 <BSP_LCD_FillRGBRect+0x22>
}
 8004d36:	2000      	movs	r0, #0
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	24011514 	.word	0x24011514
 8004d40:	2401146c 	.word	0x2401146c

08004d44 <BSP_LCD_ReadPixel>:
{
 8004d44:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d46:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004d4a:	4e10      	ldr	r6, [pc, #64]	; (8004d8c <BSP_LCD_ReadPixel+0x48>)
 8004d4c:	4f10      	ldr	r7, [pc, #64]	; (8004d90 <BSP_LCD_ReadPixel+0x4c>)
 8004d4e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004d52:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004d56:	0080      	lsls	r0, r0, #2
 8004d58:	68ac      	ldr	r4, [r5, #8]
 8004d5a:	fb0c 7404 	mla	r4, ip, r4, r7
 8004d5e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004d60:	b94d      	cbnz	r5, 8004d76 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004d62:	5830      	ldr	r0, [r6, r0]
 8004d64:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004d66:	fb00 1202 	mla	r2, r0, r2, r1
}
 8004d6a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004d6c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8004d70:	bcf0      	pop	{r4, r5, r6, r7}
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004d76:	5835      	ldr	r5, [r6, r0]
 8004d78:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004d7a:	fb05 1202 	mla	r2, r5, r2, r1
 8004d7e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8004d82:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004d84:	b292      	uxth	r2, r2
}
 8004d86:	bcf0      	pop	{r4, r5, r6, r7}
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	4770      	bx	lr
 8004d8c:	24011514 	.word	0x24011514
 8004d90:	2401146c 	.word	0x2401146c

08004d94 <BSP_LCD_WritePixel>:
{
 8004d94:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d96:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004d9a:	4e0f      	ldr	r6, [pc, #60]	; (8004dd8 <BSP_LCD_WritePixel+0x44>)
 8004d9c:	4f0f      	ldr	r7, [pc, #60]	; (8004ddc <BSP_LCD_WritePixel+0x48>)
 8004d9e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004da2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004da6:	0080      	lsls	r0, r0, #2
 8004da8:	68ac      	ldr	r4, [r5, #8]
 8004daa:	fb0c 7404 	mla	r4, ip, r4, r7
 8004dae:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004db0:	b945      	cbnz	r5, 8004dc4 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004db2:	5830      	ldr	r0, [r6, r0]
 8004db4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004db6:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 8004dba:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004dbc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8004dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8004dc2:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004dc4:	5835      	ldr	r5, [r6, r0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004dca:	fb05 1202 	mla	r2, r5, r2, r1
}
 8004dce:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004dd0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4770      	bx	lr
 8004dd8:	24011514 	.word	0x24011514
 8004ddc:	2401146c 	.word	0x2401146c

08004de0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8004de0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004de2:	2406      	movs	r4, #6
{
 8004de4:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004de6:	9101      	str	r1, [sp, #4]
 8004de8:	4601      	mov	r1, r0
 8004dea:	9202      	str	r2, [sp, #8]
 8004dec:	9400      	str	r4, [sp, #0]
 8004dee:	4805      	ldr	r0, [pc, #20]	; (8004e04 <DSI_IO_Read+0x24>)
 8004df0:	f001 ffa4 	bl	8006d3c <HAL_DSI_Read>
 8004df4:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8004df6:	bf14      	ite	ne
 8004df8:	f06f 0007 	mvnne.w	r0, #7
 8004dfc:	2000      	moveq	r0, #0
 8004dfe:	b004      	add	sp, #16
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	24011530 	.word	0x24011530

08004e08 <BSP_LCD_DrawBitmap>:
{
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e0c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004e10:	4e4f      	ldr	r6, [pc, #316]	; (8004f50 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e12:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e14:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004e18:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8004e1c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8004e20:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004f5c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e24:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e26:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e2a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e2e:	68b9      	ldr	r1, [r7, #8]
{
 8004e30:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e32:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e34:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e38:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e3c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004e40:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e44:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e46:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004e4a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e4e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e52:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e54:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e58:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004e5c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e60:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e62:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e66:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e6a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e6e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e70:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8004e74:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e76:	4465      	add	r5, ip
 8004e78:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e7a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e7c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004e7e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004e82:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e86:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e88:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004e8c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004e8e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e92:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8004e98:	d957      	bls.n	8004f4a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8004e9a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8004e9e:	2c08      	cmp	r4, #8
 8004ea0:	bf34      	ite	cc
 8004ea2:	f04f 0b02 	movcc.w	fp, #2
 8004ea6:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004eaa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8004eae:	9c03      	ldr	r4, [sp, #12]
 8004eb0:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004eb4:	fb04 f909 	mul.w	r9, r4, r9
 8004eb8:	fb09 1505 	mla	r5, r9, r5, r1
 8004ebc:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8004ebe:	f1ba 0f00 	cmp.w	sl, #0
 8004ec2:	d03e      	beq.n	8004f42 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004ec4:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8004ec6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8004eca:	2700      	movs	r7, #0
 8004ecc:	4c21      	ldr	r4, [pc, #132]	; (8004f54 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004ece:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004ed2:	e006      	b.n	8004ee2 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004ed4:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8004ed6:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004ed8:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8004eda:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004edc:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8004ee0:	d02f      	beq.n	8004f42 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004ee2:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004ee4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004ee6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004eea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004eee:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8004ef0:	4919      	ldr	r1, [pc, #100]	; (8004f58 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004ef2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8004ef6:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004efa:	bf18      	it	ne
 8004efc:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004efe:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004f00:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004f02:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004f06:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f0a:	4812      	ldr	r0, [pc, #72]	; (8004f54 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8004f0c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f10:	f001 fa86 	bl	8006420 <HAL_DMA2D_Init>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d1dd      	bne.n	8004ed4 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	480e      	ldr	r0, [pc, #56]	; (8004f54 <BSP_LCD_DrawBitmap+0x14c>)
 8004f1c:	f001 fb64 	bl	80065e8 <HAL_DMA2D_ConfigLayer>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1d7      	bne.n	8004ed4 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004f24:	2001      	movs	r0, #1
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	9000      	str	r0, [sp, #0]
 8004f2e:	4809      	ldr	r0, [pc, #36]	; (8004f54 <BSP_LCD_DrawBitmap+0x14c>)
 8004f30:	f001 fab8 	bl	80064a4 <HAL_DMA2D_Start>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1cd      	bne.n	8004ed4 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8004f38:	2132      	movs	r1, #50	; 0x32
 8004f3a:	4806      	ldr	r0, [pc, #24]	; (8004f54 <BSP_LCD_DrawBitmap+0x14c>)
 8004f3c:	f001 face 	bl	80064dc <HAL_DMA2D_PollForTransfer>
 8004f40:	e7c8      	b.n	8004ed4 <BSP_LCD_DrawBitmap+0xcc>
}
 8004f42:	2000      	movs	r0, #0
 8004f44:	b005      	add	sp, #20
 8004f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004f4a:	f04f 0b00 	mov.w	fp, #0
 8004f4e:	e7ac      	b.n	8004eaa <BSP_LCD_DrawBitmap+0xa2>
 8004f50:	24011514 	.word	0x24011514
 8004f54:	2401154c 	.word	0x2401154c
 8004f58:	52001000 	.word	0x52001000
 8004f5c:	2401146c 	.word	0x2401146c

08004f60 <LL_FillBuffer>:
{
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004f68:	4c28      	ldr	r4, [pc, #160]	; (800500c <LL_FillBuffer+0xac>)
{
 8004f6a:	4617      	mov	r7, r2
 8004f6c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8004f72:	4698      	mov	r8, r3
 8004f74:	460e      	mov	r6, r1
 8004f76:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f78:	68c2      	ldr	r2, [r0, #12]
{
 8004f7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f7c:	2a02      	cmp	r2, #2
 8004f7e:	d00f      	beq.n	8004fa0 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004f80:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8004f82:	4c23      	ldr	r4, [pc, #140]	; (8005010 <LL_FillBuffer+0xb0>)
 8004f84:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8004f88:	4922      	ldr	r1, [pc, #136]	; (8005014 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f8a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004f8c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8004f8e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8004f90:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f94:	f001 fa44 	bl	8006420 <HAL_DMA2D_Init>
 8004f98:	b308      	cbz	r0, 8004fde <LL_FillBuffer+0x7e>
}
 8004f9a:	b002      	add	sp, #8
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004fa0:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8004fa4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8004fa8:	f005 041f 	and.w	r4, r5, #31
 8004fac:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8004fb0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8004fb4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004fb8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8004fbc:	3521      	adds	r5, #33	; 0x21
 8004fbe:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8004fc2:	3117      	adds	r1, #23
 8004fc4:	09ad      	lsrs	r5, r5, #6
 8004fc6:	0989      	lsrs	r1, r1, #6
 8004fc8:	022d      	lsls	r5, r5, #8
 8004fca:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8004fce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8004fd2:	3017      	adds	r0, #23
 8004fd4:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8004fd8:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8004fdc:	e7d1      	b.n	8004f82 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 fb01 	bl	80065e8 <HAL_DMA2D_ConfigLayer>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d1d7      	bne.n	8004f9a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004fea:	463b      	mov	r3, r7
 8004fec:	4632      	mov	r2, r6
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f8cd 8000 	str.w	r8, [sp]
 8004ff6:	f001 fa55 	bl	80064a4 <HAL_DMA2D_Start>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d1cd      	bne.n	8004f9a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004ffe:	4620      	mov	r0, r4
 8005000:	2119      	movs	r1, #25
}
 8005002:	b002      	add	sp, #8
 8005004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005008:	f001 ba68 	b.w	80064dc <HAL_DMA2D_PollForTransfer>
 800500c:	24011514 	.word	0x24011514
 8005010:	2401154c 	.word	0x2401154c
 8005014:	52001000 	.word	0x52001000

08005018 <BSP_LCD_DrawHLine>:
{
 8005018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800501c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005020:	4f12      	ldr	r7, [pc, #72]	; (800506c <BSP_LCD_DrawHLine+0x54>)
{
 8005022:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005024:	f8df e048 	ldr.w	lr, [pc, #72]	; 8005070 <BSP_LCD_DrawHLine+0x58>
 8005028:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 800502c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005030:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005034:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005038:	688d      	ldr	r5, [r1, #8]
{
 800503a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800503c:	690e      	ldr	r6, [r1, #16]
 800503e:	fb02 4207 	mla	r2, r2, r7, r4
 8005042:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8005046:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005048:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800504a:	bf38      	it	cc
 800504c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800504e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005050:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8005054:	9a08      	ldr	r2, [sp, #32]
 8005056:	9400      	str	r4, [sp, #0]
 8005058:	9201      	str	r2, [sp, #4]
 800505a:	461a      	mov	r2, r3
 800505c:	2301      	movs	r3, #1
 800505e:	f7ff ff7f 	bl	8004f60 <LL_FillBuffer>
}
 8005062:	4620      	mov	r0, r4
 8005064:	b002      	add	sp, #8
 8005066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800506a:	bf00      	nop
 800506c:	24011514 	.word	0x24011514
 8005070:	2401146c 	.word	0x2401146c

08005074 <BSP_LCD_DrawVLine>:
{
 8005074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005078:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800507c:	4c11      	ldr	r4, [pc, #68]	; (80050c4 <BSP_LCD_DrawVLine+0x50>)
 800507e:	4d12      	ldr	r5, [pc, #72]	; (80050c8 <BSP_LCD_DrawVLine+0x54>)
 8005080:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005084:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005088:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800508c:	eb02 0c03 	add.w	ip, r2, r3
{
 8005090:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005092:	68be      	ldr	r6, [r7, #8]
 8005094:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005098:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800509a:	fb08 5606 	mla	r6, r8, r6, r5
 800509e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80050a0:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050a2:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80050a4:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050a6:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80050aa:	bf88      	it	hi
 80050ac:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80050ae:	9a08      	ldr	r2, [sp, #32]
 80050b0:	e9cd 4200 	strd	r4, r2, [sp]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f7ff ff53 	bl	8004f60 <LL_FillBuffer>
}
 80050ba:	2000      	movs	r0, #0
 80050bc:	b002      	add	sp, #8
 80050be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c2:	bf00      	nop
 80050c4:	24011514 	.word	0x24011514
 80050c8:	2401146c 	.word	0x2401146c

080050cc <BSP_LCD_FillRect>:
{
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050ce:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 80050d2:	4f0e      	ldr	r7, [pc, #56]	; (800510c <BSP_LCD_FillRect+0x40>)
 80050d4:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80050d8:	4d0d      	ldr	r5, [pc, #52]	; (8005110 <BSP_LCD_FillRect+0x44>)
 80050da:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 80050de:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 80050e2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050e4:	68b7      	ldr	r7, [r6, #8]
 80050e6:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80050ea:	1ae4      	subs	r4, r4, r3
 80050ec:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050ee:	fb0e 5507 	mla	r5, lr, r7, r5
 80050f2:	6937      	ldr	r7, [r6, #16]
{
 80050f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050f6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80050f8:	9400      	str	r4, [sp, #0]
 80050fa:	fb07 3101 	mla	r1, r7, r1, r3
 80050fe:	9b08      	ldr	r3, [sp, #32]
 8005100:	9601      	str	r6, [sp, #4]
 8005102:	f7ff ff2d 	bl	8004f60 <LL_FillBuffer>
}
 8005106:	2000      	movs	r0, #0
 8005108:	b003      	add	sp, #12
 800510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510c:	24011514 	.word	0x24011514
 8005110:	2401146c 	.word	0x2401146c

08005114 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005114:	4b0d      	ldr	r3, [pc, #52]	; (800514c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005116:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005118:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800511c:	f042 0208 	orr.w	r2, r2, #8
 8005120:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005124:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005128:	f002 0208 	and.w	r2, r2, #8
 800512c:	9201      	str	r2, [sp, #4]
 800512e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8005130:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800513c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005140:	f022 0208 	bic.w	r2, r2, #8
 8005144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005148:	b002      	add	sp, #8
 800514a:	4770      	bx	lr
 800514c:	58024400 	.word	0x58024400

08005150 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005152:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005154:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005158:	f042 0210 	orr.w	r2, r2, #16
 800515c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005160:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005164:	f002 0210 	and.w	r2, r2, #16
 8005168:	9201      	str	r2, [sp, #4]
 800516a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800516c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800516e:	f042 0210 	orr.w	r2, r2, #16
 8005172:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005174:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005176:	f022 0210 	bic.w	r2, r2, #16
 800517a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800517c:	b002      	add	sp, #8
 800517e:	4770      	bx	lr
 8005180:	58024400 	.word	0x58024400

08005184 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8005184:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8005186:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8005188:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800518c:	f042 0210 	orr.w	r2, r2, #16
 8005190:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005194:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005198:	f002 0210 	and.w	r2, r2, #16
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 80051a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051a4:	f042 0210 	orr.w	r2, r2, #16
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80051ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b0:	f022 0210 	bic.w	r2, r2, #16
 80051b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80051b8:	b002      	add	sp, #8
 80051ba:	4770      	bx	lr
 80051bc:	58024400 	.word	0x58024400

080051c0 <DSI_IO_Write>:
  if(Size <= 1U)
 80051c0:	2b01      	cmp	r3, #1
{
 80051c2:	b530      	push	{r4, r5, lr}
 80051c4:	460d      	mov	r5, r1
 80051c6:	b083      	sub	sp, #12
 80051c8:	4601      	mov	r1, r0
  if(Size <= 1U)
 80051ca:	d909      	bls.n	80051e0 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80051cc:	480a      	ldr	r0, [pc, #40]	; (80051f8 <DSI_IO_Write+0x38>)
 80051ce:	e9cd 5200 	strd	r5, r2, [sp]
 80051d2:	2239      	movs	r2, #57	; 0x39
 80051d4:	f001 fd46 	bl	8006c64 <HAL_DSI_LongWrite>
 80051d8:	b958      	cbnz	r0, 80051f2 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 80051da:	2000      	movs	r0, #0
}
 80051dc:	b003      	add	sp, #12
 80051de:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80051e0:	5cd0      	ldrb	r0, [r2, r3]
 80051e2:	462b      	mov	r3, r5
 80051e4:	2215      	movs	r2, #21
 80051e6:	9000      	str	r0, [sp, #0]
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <DSI_IO_Write+0x38>)
 80051ea:	f001 fd27 	bl	8006c3c <HAL_DSI_ShortWrite>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d0f3      	beq.n	80051da <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 80051f2:	f06f 0007 	mvn.w	r0, #7
 80051f6:	e7f1      	b.n	80051dc <DSI_IO_Write+0x1c>
 80051f8:	24011530 	.word	0x24011530

080051fc <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <BSP_LCD_Reset+0x5c>)
 80051fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005206:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005208:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800520c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800520e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005212:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005214:	4c11      	ldr	r4, [pc, #68]	; (800525c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005216:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800521e:	4620      	mov	r0, r4
 8005220:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005226:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005228:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800522a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800522e:	f001 fe0d 	bl	8006e4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005232:	4629      	mov	r1, r5
 8005234:	4620      	mov	r0, r4
 8005236:	2200      	movs	r2, #0
 8005238:	f001 ff2c 	bl	8007094 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800523c:	2014      	movs	r0, #20
 800523e:	f000 fb9d 	bl	800597c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005242:	4632      	mov	r2, r6
 8005244:	4629      	mov	r1, r5
 8005246:	4620      	mov	r0, r4
 8005248:	f001 ff24 	bl	8007094 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800524c:	200a      	movs	r0, #10
 800524e:	f000 fb95 	bl	800597c <HAL_Delay>
}
 8005252:	b007      	add	sp, #28
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	bf00      	nop
 8005258:	58024400 	.word	0x58024400
 800525c:	58021800 	.word	0x58021800

08005260 <MX_DSIHOST_DSI_Init>:
{
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005264:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005268:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800526a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 800526c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005270:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005272:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005276:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 800527a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800527c:	60c6      	str	r6, [r0, #12]
{
 800527e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005280:	4669      	mov	r1, sp
{
 8005282:	4604      	mov	r4, r0
 8005284:	4690      	mov	r8, r2
 8005286:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005288:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 800528a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800528e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005292:	f001 fa3b 	bl	800670c <HAL_DSI_Init>
 8005296:	b118      	cbz	r0, 80052a0 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005298:	4630      	mov	r0, r6
}
 800529a:	b01e      	add	sp, #120	; 0x78
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80052a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052a4:	4a22      	ldr	r2, [pc, #136]	; (8005330 <MX_DSIHOST_DSI_Init+0xd0>)
 80052a6:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80052a8:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80052aa:	fb03 2207 	mla	r2, r3, r7, r2
 80052ae:	4b21      	ldr	r3, [pc, #132]	; (8005334 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80052b0:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 80052b2:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80052b4:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 80052b8:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80052bc:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 80052c0:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80052c4:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 80052c6:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80052c8:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80052ca:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 80052cc:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80052ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 80052d2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 80052d6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 80052da:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80052dc:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80052de:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80052e2:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 80052e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 80052e8:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 80052ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 80052ee:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 80052f2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80052f6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80052fa:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 80052fc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005300:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005302:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005306:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800530a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800530e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005310:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005314:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005318:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800531c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005320:	f001 fb2c 	bl	800697c <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005324:	3800      	subs	r0, #0
 8005326:	bf18      	it	ne
 8005328:	2001      	movne	r0, #1
}
 800532a:	b01e      	add	sp, #120	; 0x78
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	0042c1d8 	.word	0x0042c1d8
 8005334:	4c751ce3 	.word	0x4c751ce3

08005338 <MX_LTDC_Init>:
{
 8005338:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 800533a:	4d0e      	ldr	r5, [pc, #56]	; (8005374 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800533c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005340:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005342:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005344:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005346:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005348:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800534a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800534c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800534e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005350:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005352:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005354:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005356:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005358:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800535a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 800535c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800535e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005362:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005364:	6181      	str	r1, [r0, #24]
}
 8005366:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005368:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800536c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005370:	f001 bf4e 	b.w	8007210 <HAL_LTDC_Init>
 8005374:	50001000 	.word	0x50001000

08005378 <MX_LTDC_ConfigLayer>:
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	4613      	mov	r3, r2
 800537c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 800537e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005380:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005382:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005384:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005386:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005388:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 800538c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 800538e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005390:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005394:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005398:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 800539c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800539e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 80053a0:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80053a2:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80053a4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 80053a6:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80053a8:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 80053aa:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80053ac:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 80053ae:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80053b2:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80053b6:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80053b8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 80053ba:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80053bc:	f002 f802 	bl	80073c4 <HAL_LTDC_ConfigLayer>
}
 80053c0:	b00f      	add	sp, #60	; 0x3c
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053c4 <MX_LTDC_ClockConfig>:
{
 80053c4:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80053c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 80053ca:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80053cc:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80053ce:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 80053d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80053d4:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 80053d6:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80053d8:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 80053da:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80053dc:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80053de:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 80053e0:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80053e2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 80053e6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80053ea:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80053ee:	f002 feeb 	bl	80081c8 <HAL_RCCEx_PeriphCLKConfig>
}
 80053f2:	b031      	add	sp, #196	; 0xc4
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <BSP_LCD_InitEx>:
{
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80053fc:	2901      	cmp	r1, #1
{
 80053fe:	b093      	sub	sp, #76	; 0x4c
 8005400:	461d      	mov	r5, r3
 8005402:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005406:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005408:	f200 80f2 	bhi.w	80055f0 <BSP_LCD_InitEx+0x1f8>
 800540c:	1e03      	subs	r3, r0, #0
 800540e:	bf18      	it	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2800      	cmp	r0, #0
 8005414:	f040 80ec 	bne.w	80055f0 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005418:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800541a:	2901      	cmp	r1, #1
 800541c:	f200 80e8 	bhi.w	80055f0 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005420:	2a02      	cmp	r2, #2
 8005422:	f000 80ab 	beq.w	800557c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005426:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005428:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800542a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800542c:	4c72      	ldr	r4, [pc, #456]	; (80055f8 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 800542e:	2000      	movs	r0, #0
 8005430:	4f72      	ldr	r7, [pc, #456]	; (80055fc <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005432:	2600      	movs	r6, #0
 8005434:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005436:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800543a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800543c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005440:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005442:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005446:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005448:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 800544c:	f7ff fed6 	bl	80051fc <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005450:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005454:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005456:	a90c      	add	r1, sp, #48	; 0x30
 8005458:	4869      	ldr	r0, [pc, #420]	; (8005600 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800545a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800545e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005462:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005466:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800546a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800546e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005470:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005472:	f8cd c014 	str.w	ip, [sp, #20]
 8005476:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800547a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800547e:	f001 fce5 	bl	8006e4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005482:	2201      	movs	r2, #1
 8005484:	4649      	mov	r1, r9
 8005486:	485e      	ldr	r0, [pc, #376]	; (8005600 <BSP_LCD_InitEx+0x208>)
 8005488:	f001 fe04 	bl	8007094 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800548c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005490:	a90c      	add	r1, sp, #48	; 0x30
 8005492:	485b      	ldr	r0, [pc, #364]	; (8005600 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005494:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005498:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005630 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 800549c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80054a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80054a4:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 80054a6:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054aa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80054ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 80054b2:	9406      	str	r4, [sp, #24]
 80054b4:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80054b6:	f001 fcc9 	bl	8006e4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 80054ba:	2201      	movs	r2, #1
 80054bc:	4651      	mov	r1, sl
 80054be:	4850      	ldr	r0, [pc, #320]	; (8005600 <BSP_LCD_InitEx+0x208>)
 80054c0:	f001 fde8 	bl	8007094 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 80054c4:	4632      	mov	r2, r6
 80054c6:	210f      	movs	r1, #15
 80054c8:	2058      	movs	r0, #88	; 0x58
 80054ca:	f000 fefb 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80054ce:	2058      	movs	r0, #88	; 0x58
 80054d0:	f000 ff32 	bl	8006338 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 80054d4:	4632      	mov	r2, r6
 80054d6:	210f      	movs	r1, #15
 80054d8:	205a      	movs	r0, #90	; 0x5a
 80054da:	f000 fef3 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80054de:	205a      	movs	r0, #90	; 0x5a
 80054e0:	f000 ff2a 	bl	8006338 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 80054e4:	4632      	mov	r2, r6
 80054e6:	210f      	movs	r1, #15
 80054e8:	207b      	movs	r0, #123	; 0x7b
 80054ea:	f000 feeb 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80054ee:	207b      	movs	r0, #123	; 0x7b
 80054f0:	f000 ff22 	bl	8006338 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 80054f4:	4c43      	ldr	r4, [pc, #268]	; (8005604 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 80054f6:	4844      	ldr	r0, [pc, #272]	; (8005608 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 80054f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80054fc:	4943      	ldr	r1, [pc, #268]	; (800560c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 80054fe:	4e44      	ldr	r6, [pc, #272]	; (8005610 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005500:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005502:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005504:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005508:	f7ff fe04 	bl	8005114 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 800550c:	f8d9 2000 	ldr.w	r2, [r9]
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	4282      	cmp	r2, r0
 8005514:	d03a      	beq.n	800558c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005516:	680a      	ldr	r2, [r1, #0]
 8005518:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800551c:	d031      	beq.n	8005582 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800551e:	4642      	mov	r2, r8
 8005520:	4629      	mov	r1, r5
 8005522:	483a      	ldr	r0, [pc, #232]	; (800560c <BSP_LCD_InitEx+0x214>)
 8005524:	f7ff fe9c 	bl	8005260 <MX_DSIHOST_DSI_Init>
 8005528:	2800      	cmp	r0, #0
 800552a:	d15c      	bne.n	80055e6 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800552c:	4835      	ldr	r0, [pc, #212]	; (8005604 <BSP_LCD_InitEx+0x20c>)
 800552e:	f7ff ff49 	bl	80053c4 <MX_LTDC_ClockConfig>
 8005532:	2800      	cmp	r0, #0
 8005534:	d157      	bne.n	80055e6 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005536:	4642      	mov	r2, r8
 8005538:	4629      	mov	r1, r5
 800553a:	4832      	ldr	r0, [pc, #200]	; (8005604 <BSP_LCD_InitEx+0x20c>)
 800553c:	f7ff fefc 	bl	8005338 <MX_LTDC_Init>
 8005540:	2800      	cmp	r0, #0
 8005542:	d150      	bne.n	80055e6 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005544:	f000 f8b2 	bl	80056ac <BSP_SDRAM_Init>
 8005548:	2800      	cmp	r0, #0
 800554a:	d14c      	bne.n	80055e6 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 800554c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 800554e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005552:	4601      	mov	r1, r0
      config.X0          = 0;
 8005554:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005556:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005558:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 800555c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005560:	4828      	ldr	r0, [pc, #160]	; (8005604 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005562:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005566:	f7ff ff07 	bl	8005378 <MX_LTDC_ConfigLayer>
 800556a:	4604      	mov	r4, r0
 800556c:	b190      	cbz	r0, 8005594 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800556e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	b013      	add	sp, #76	; 0x4c
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 800557c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800557e:	9201      	str	r2, [sp, #4]
 8005580:	e754      	b.n	800542c <BSP_LCD_InitEx+0x34>
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	f7ff fdfe 	bl	8005184 <DSI_MspInit.part.0>
 8005588:	9b02      	ldr	r3, [sp, #8]
 800558a:	e7c8      	b.n	800551e <BSP_LCD_InitEx+0x126>
 800558c:	f7ff fde0 	bl	8005150 <DMA2D_MspInit.part.0>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	e7c0      	b.n	8005516 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005594:	481d      	ldr	r0, [pc, #116]	; (800560c <BSP_LCD_InitEx+0x214>)
 8005596:	f001 fb29 	bl	8006bec <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800559a:	2104      	movs	r1, #4
 800559c:	481b      	ldr	r0, [pc, #108]	; (800560c <BSP_LCD_InitEx+0x214>)
 800559e:	f001 fb11 	bl	8006bc4 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80055a4:	4d1c      	ldr	r5, [pc, #112]	; (8005618 <BSP_LCD_InitEx+0x220>)
 80055a6:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 80055aa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80055ac:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 80055ae:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 80055b0:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 80055b4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80055b8:	f7ff fb22 	bl	8004c00 <OTM8009A_RegisterBusIO>
 80055bc:	b980      	cbnz	r0, 80055e0 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 80055be:	4c19      	ldr	r4, [pc, #100]	; (8005624 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80055c0:	4628      	mov	r0, r5
 80055c2:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 80055c4:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80055c6:	f7ff fb07 	bl	8004bd8 <OTM8009A_ReadID>
 80055ca:	b948      	cbnz	r0, 80055e0 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80055cc:	4b16      	ldr	r3, [pc, #88]	; (8005628 <BSP_LCD_InitEx+0x230>)
 80055ce:	4d17      	ldr	r5, [pc, #92]	; (800562c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	9a03      	ldr	r2, [sp, #12]
 80055d4:	9901      	ldr	r1, [sp, #4]
 80055d6:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80055d8:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80055da:	47a0      	blx	r4
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0c8      	beq.n	8005572 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055e0:	f06f 0006 	mvn.w	r0, #6
 80055e4:	e7c5      	b.n	8005572 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80055e6:	f06f 0003 	mvn.w	r0, #3
}
 80055ea:	b013      	add	sp, #76	; 0x4c
 80055ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80055f0:	f06f 0001 	mvn.w	r0, #1
 80055f4:	e7bf      	b.n	8005576 <BSP_LCD_InitEx+0x17e>
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	24011514 	.word	0x24011514
 8005600:	58022400 	.word	0x58022400
 8005604:	2401146c 	.word	0x2401146c
 8005608:	52001000 	.word	0x52001000
 800560c:	24011530 	.word	0x24011530
 8005610:	50001000 	.word	0x50001000
 8005614:	08004c51 	.word	0x08004c51
 8005618:	24001134 	.word	0x24001134
 800561c:	080051c1 	.word	0x080051c1
 8005620:	08004de1 	.word	0x08004de1
 8005624:	2400112c 	.word	0x2400112c
 8005628:	24001018 	.word	0x24001018
 800562c:	24001130 	.word	0x24001130
 8005630:	2401154c 	.word	0x2401154c

08005634 <BSP_LCD_Init>:
{
 8005634:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005636:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800563a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800563c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005640:	2201      	movs	r2, #1
 8005642:	9400      	str	r4, [sp, #0]
 8005644:	f7ff fed8 	bl	80053f8 <BSP_LCD_InitEx>
}
 8005648:	b002      	add	sp, #8
 800564a:	bd10      	pop	{r4, pc}

0800564c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 800564c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800564e:	4915      	ldr	r1, [pc, #84]	; (80056a4 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005650:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005652:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005654:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005658:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 800565c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005660:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005664:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005666:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005668:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800566a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800566c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800566e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005670:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005672:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005674:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005676:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005678:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800567a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800567c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 800567e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005680:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005682:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005684:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005686:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005688:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800568c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005690:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005692:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005696:	f003 ff15 	bl	80094c4 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 800569a:	1b40      	subs	r0, r0, r5
 800569c:	bf18      	it	ne
 800569e:	2001      	movne	r0, #1
 80056a0:	b009      	add	sp, #36	; 0x24
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a4:	52004140 	.word	0x52004140
 80056a8:	240115b4 	.word	0x240115b4

080056ac <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f040 80e1 	bne.w	8005874 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80056b2:	4b73      	ldr	r3, [pc, #460]	; (8005880 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056b4:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 80056b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 80056be:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80056c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 80056c4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 80056c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056ca:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056cc:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056ce:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80056d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d4:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80056d6:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80056de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056e2:	430a      	orrs	r2, r1
 80056e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80056e8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056ec:	400a      	ands	r2, r1
 80056ee:	9202      	str	r2, [sp, #8]
 80056f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80056fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005702:	f002 0208 	and.w	r2, r2, #8
 8005706:	9203      	str	r2, [sp, #12]
 8005708:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800570a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800570e:	f042 0210 	orr.w	r2, r2, #16
 8005712:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005716:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800571a:	f002 0210 	and.w	r2, r2, #16
 800571e:	9204      	str	r2, [sp, #16]
 8005720:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005722:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005726:	f042 0220 	orr.w	r2, r2, #32
 800572a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800572e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005732:	f002 0220 	and.w	r2, r2, #32
 8005736:	9205      	str	r2, [sp, #20]
 8005738:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800573a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800573e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005742:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005746:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800574a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800574e:	9206      	str	r2, [sp, #24]
 8005750:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005752:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800575a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800575e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005762:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005766:	9207      	str	r2, [sp, #28]
 8005768:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800576a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800576e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005772:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005776:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800577e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005784:	483f      	ldr	r0, [pc, #252]	; (8005884 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005786:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005788:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800578a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800578e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005790:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005792:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005794:	f001 fb5a 	bl	8006e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005798:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800579c:	a909      	add	r1, sp, #36	; 0x24
 800579e:	483a      	ldr	r0, [pc, #232]	; (8005888 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80057a2:	f001 fb53 	bl	8006e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80057a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80057aa:	a909      	add	r1, sp, #36	; 0x24
 80057ac:	4837      	ldr	r0, [pc, #220]	; (800588c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80057b0:	f001 fb4c 	bl	8006e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80057b4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80057b8:	a909      	add	r1, sp, #36	; 0x24
 80057ba:	4835      	ldr	r0, [pc, #212]	; (8005890 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80057be:	f001 fb45 	bl	8006e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80057c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80057c6:	a909      	add	r1, sp, #36	; 0x24
 80057c8:	4832      	ldr	r0, [pc, #200]	; (8005894 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80057ca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80057cc:	f001 fb3e 	bl	8006e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80057d0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80057d4:	a909      	add	r1, sp, #36	; 0x24
 80057d6:	4830      	ldr	r0, [pc, #192]	; (8005898 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80057d8:	4c30      	ldr	r4, [pc, #192]	; (800589c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80057da:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80057dc:	f001 fb36 	bl	8006e4c <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80057e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80057e4:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80057e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80057ec:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80057ee:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80057f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80057f4:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80057f6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80057f8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80057fc:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80057fe:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005800:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005802:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005804:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005806:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005808:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800580c:	4e25      	ldr	r6, [pc, #148]	; (80058a4 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800580e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005810:	6334      	str	r4, [r6, #48]	; 0x30
 8005812:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005814:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800581c:	f001 fe9c 	bl	8007558 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005820:	4620      	mov	r0, r4
 8005822:	f001 fe1f 	bl	8007464 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005826:	462a      	mov	r2, r5
 8005828:	210f      	movs	r1, #15
 800582a:	207a      	movs	r0, #122	; 0x7a
 800582c:	f000 fd4a 	bl	80062c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005830:	207a      	movs	r0, #122	; 0x7a
 8005832:	f000 fd81 	bl	8006338 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff ff08 	bl	800564c <MX_SDRAM_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	b9e0      	cbnz	r0, 800587a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005840:	4919      	ldr	r1, [pc, #100]	; (80058a8 <BSP_SDRAM_Init+0x1fc>)
 8005842:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005846:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800584a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800584e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005850:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005852:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005854:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005856:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005858:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800585a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800585e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005860:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005862:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005864:	f7fe fc62 	bl	800412c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005868:	2800      	cmp	r0, #0
 800586a:	bf18      	it	ne
 800586c:	f06f 0004 	mvnne.w	r0, #4
}
 8005870:	b00f      	add	sp, #60	; 0x3c
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005874:	f06f 0001 	mvn.w	r0, #1
}
 8005878:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	e7f7      	b.n	8005870 <BSP_SDRAM_Init+0x1c4>
 8005880:	58024400 	.word	0x58024400
 8005884:	58020c00 	.word	0x58020c00
 8005888:	58021000 	.word	0x58021000
 800588c:	58021400 	.word	0x58021400
 8005890:	58021800 	.word	0x58021800
 8005894:	58021c00 	.word	0x58021c00
 8005898:	58022000 	.word	0x58022000
 800589c:	24001154 	.word	0x24001154
 80058a0:	52000040 	.word	0x52000040
 80058a4:	240115b4 	.word	0x240115b4
 80058a8:	240011c0 	.word	0x240011c0

080058ac <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_InitTick+0x40>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b90b      	cbnz	r3, 80058b6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80058b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80058b4:	4770      	bx	lr
{
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80058ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_InitTick+0x44>)
 80058c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80058c4:	6810      	ldr	r0, [r2, #0]
 80058c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80058ca:	f000 fd43 	bl	8006354 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058ce:	2c0f      	cmp	r4, #15
 80058d0:	d800      	bhi.n	80058d4 <HAL_InitTick+0x28>
 80058d2:	b108      	cbz	r0, 80058d8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80058d4:	2001      	movs	r0, #1
}
 80058d6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058d8:	2200      	movs	r2, #0
 80058da:	4621      	mov	r1, r4
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	f000 fcf0 	bl	80062c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <HAL_InitTick+0x48>)
 80058e6:	2000      	movs	r0, #0
 80058e8:	601c      	str	r4, [r3, #0]
}
 80058ea:	bd10      	pop	{r4, pc}
 80058ec:	24001064 	.word	0x24001064
 80058f0:	24000000 	.word	0x24000000
 80058f4:	24001068 	.word	0x24001068

080058f8 <HAL_Init>:
{
 80058f8:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058fa:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058fc:	4c12      	ldr	r4, [pc, #72]	; (8005948 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058fe:	f000 fccd 	bl	800629c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005902:	4d12      	ldr	r5, [pc, #72]	; (800594c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005904:	f002 f97c 	bl	8007c00 <HAL_RCC_GetSysClockFreq>
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <HAL_Init+0x58>)
 800590a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800590c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800590e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005910:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005912:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005916:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005918:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800591a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800591c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005920:	4c0c      	ldr	r4, [pc, #48]	; (8005954 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005922:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005926:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800592c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800592e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005930:	f7ff ffbc 	bl	80058ac <HAL_InitTick>
 8005934:	b110      	cbz	r0, 800593c <HAL_Init+0x44>
    return HAL_ERROR;
 8005936:	2401      	movs	r4, #1
}
 8005938:	4620      	mov	r0, r4
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	4604      	mov	r4, r0
  HAL_MspInit();
 800593e:	f7fe faf3 	bl	8003f28 <HAL_MspInit>
}
 8005942:	4620      	mov	r0, r4
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	08009898 	.word	0x08009898
 800594c:	24000004 	.word	0x24000004
 8005950:	58024400 	.word	0x58024400
 8005954:	24000000 	.word	0x24000000

08005958 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005958:	4a03      	ldr	r2, [pc, #12]	; (8005968 <HAL_IncTick+0x10>)
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <HAL_IncTick+0x14>)
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	440b      	add	r3, r1
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	240115e8 	.word	0x240115e8
 800596c:	24001064 	.word	0x24001064

08005970 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005970:	4b01      	ldr	r3, [pc, #4]	; (8005978 <HAL_GetTick+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	240115e8 	.word	0x240115e8

0800597c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005980:	f7ff fff6 	bl	8005970 <HAL_GetTick>
 8005984:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005986:	1c63      	adds	r3, r4, #1
 8005988:	d002      	beq.n	8005990 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <HAL_Delay+0x20>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005990:	f7ff ffee 	bl	8005970 <HAL_GetTick>
 8005994:	1b43      	subs	r3, r0, r5
 8005996:	42a3      	cmp	r3, r4
 8005998:	d3fa      	bcc.n	8005990 <HAL_Delay+0x14>
  {
  }
}
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	24001064 	.word	0x24001064

080059a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80059a0:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <HAL_GetREVID+0x8>)
 80059a2:	6818      	ldr	r0, [r3, #0]
}
 80059a4:	0c00      	lsrs	r0, r0, #16
 80059a6:	4770      	bx	lr
 80059a8:	5c001000 	.word	0x5c001000

080059ac <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80059ac:	4a03      	ldr	r2, [pc, #12]	; (80059bc <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80059ae:	6853      	ldr	r3, [r2, #4]
 80059b0:	ea23 0000 	bic.w	r0, r3, r0
 80059b4:	4301      	orrs	r1, r0
 80059b6:	6051      	str	r1, [r2, #4]
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58000400 	.word	0x58000400

080059c0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80059c0:	4a02      	ldr	r2, [pc, #8]	; (80059cc <HAL_EnableCompensationCell+0xc>)
 80059c2:	6a13      	ldr	r3, [r2, #32]
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6213      	str	r3, [r2, #32]
}
 80059ca:	4770      	bx	lr
 80059cc:	58000400 	.word	0x58000400

080059d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80059d2:	2200      	movs	r2, #0
{
 80059d4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80059d6:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059d8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80059dc:	2a01      	cmp	r2, #1
 80059de:	f000 813a 	beq.w	8005c56 <HAL_ADC_ConfigChannel+0x286>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059e6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80059e8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059ec:	6894      	ldr	r4, [r2, #8]
 80059ee:	0766      	lsls	r6, r4, #29
 80059f0:	f100 8099 	bmi.w	8005b26 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80059f4:	680c      	ldr	r4, [r1, #0]
 80059f6:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80059fa:	2d00      	cmp	r5, #0
 80059fc:	f040 809e 	bne.w	8005b3c <HAL_ADC_ConfigChannel+0x16c>
 8005a00:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005a04:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a08:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8005a0a:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005a0c:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a0e:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8005a10:	4034      	ands	r4, r6
 8005a12:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a14:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8005a18:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8005a1c:	40a6      	lsls	r6, r4
 8005a1e:	61d0      	str	r0, [r2, #28]
 8005a20:	fa0c f404 	lsl.w	r4, ip, r4
 8005a24:	5978      	ldr	r0, [r7, r5]
 8005a26:	ea20 0006 	bic.w	r0, r0, r6
 8005a2a:	4320      	orrs	r0, r4
 8005a2c:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a2e:	6890      	ldr	r0, [r2, #8]
 8005a30:	0745      	lsls	r5, r0, #29
 8005a32:	f100 8081 	bmi.w	8005b38 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a36:	6895      	ldr	r5, [r2, #8]
 8005a38:	f015 0508 	ands.w	r5, r5, #8
 8005a3c:	d157      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a3e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a40:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005a44:	2007      	movs	r0, #7
 8005a46:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a48:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8005a4c:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a50:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005a54:	fa00 fe04 	lsl.w	lr, r0, r4
 8005a58:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a5c:	4fc3      	ldr	r7, [pc, #780]	; (8005d6c <HAL_ADC_ConfigChannel+0x39c>)
 8005a5e:	f85c 0006 	ldr.w	r0, [ip, r6]
 8005a62:	ea20 000e 	bic.w	r0, r0, lr
 8005a66:	4320      	orrs	r0, r4
 8005a68:	f84c 0006 	str.w	r0, [ip, r6]
 8005a6c:	6838      	ldr	r0, [r7, #0]
 8005a6e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005a72:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005a76:	f000 8098 	beq.w	8005baa <HAL_ADC_ConfigChannel+0x1da>
 8005a7a:	68d0      	ldr	r0, [r2, #12]
 8005a7c:	68d6      	ldr	r6, [r2, #12]
 8005a7e:	f010 0f10 	tst.w	r0, #16
 8005a82:	6948      	ldr	r0, [r1, #20]
 8005a84:	f040 8107 	bne.w	8005c96 <HAL_ADC_ConfigChannel+0x2c6>
 8005a88:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005a8c:	0076      	lsls	r6, r6, #1
 8005a8e:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a92:	690f      	ldr	r7, [r1, #16]
 8005a94:	2f04      	cmp	r7, #4
 8005a96:	f000 80e1 	beq.w	8005c5c <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a9a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8005a9e:	6808      	ldr	r0, [r1, #0]
 8005aa0:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8005aa4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005aa8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005aac:	ea40 000c 	orr.w	r0, r0, ip
 8005ab0:	4330      	orrs	r0, r6
 8005ab2:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ab6:	7e4f      	ldrb	r7, [r1, #25]
 8005ab8:	690e      	ldr	r6, [r1, #16]
 8005aba:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005abc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005ac0:	bf0c      	ite	eq
 8005ac2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8005ac6:	2700      	movne	r7, #0
 8005ac8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005acc:	4338      	orrs	r0, r7
 8005ace:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ad2:	7e0c      	ldrb	r4, [r1, #24]
 8005ad4:	6908      	ldr	r0, [r1, #16]
 8005ad6:	2c01      	cmp	r4, #1
 8005ad8:	d104      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x114>
 8005ada:	f000 001f 	and.w	r0, r0, #31
 8005ade:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005ae2:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005ae4:	6910      	ldr	r0, [r2, #16]
 8005ae6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8005aea:	4305      	orrs	r5, r0
 8005aec:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aee:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af0:	07c4      	lsls	r4, r0, #31
 8005af2:	d416      	bmi.n	8005b22 <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005af4:	68ce      	ldr	r6, [r1, #12]
 8005af6:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005af8:	f006 0718 	and.w	r7, r6, #24
 8005afc:	4c9c      	ldr	r4, [pc, #624]	; (8005d70 <HAL_ADC_ConfigChannel+0x3a0>)
 8005afe:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8005b02:	40fc      	lsrs	r4, r7
 8005b04:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b08:	f8df c288 	ldr.w	ip, [pc, #648]	; 8005d94 <HAL_ADC_ConfigChannel+0x3c4>
 8005b0c:	4004      	ands	r4, r0
 8005b0e:	ea25 0507 	bic.w	r5, r5, r7
 8005b12:	4566      	cmp	r6, ip
 8005b14:	ea44 0405 	orr.w	r4, r4, r5
 8005b18:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8005b1c:	d04d      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	db15      	blt.n	8005b4e <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b22:	2000      	movs	r0, #0
 8005b24:	e003      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b28:	f042 0220 	orr.w	r2, r2, #32
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8005b34:	b003      	add	sp, #12
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b38:	6890      	ldr	r0, [r2, #8]
 8005b3a:	e7d8      	b.n	8005aee <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b40:	b115      	cbz	r5, 8005b48 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005b42:	fab5 f585 	clz	r5, r5
 8005b46:	40a8      	lsls	r0, r5
 8005b48:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005b4c:	e75c      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b4e:	4989      	ldr	r1, [pc, #548]	; (8005d74 <HAL_ADC_ConfigChannel+0x3a4>)
 8005b50:	428a      	cmp	r2, r1
 8005b52:	f000 80c6 	beq.w	8005ce2 <HAL_ADC_ConfigChannel+0x312>
 8005b56:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005b5a:	428a      	cmp	r2, r1
 8005b5c:	f000 80c1 	beq.w	8005ce2 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b60:	4e85      	ldr	r6, [pc, #532]	; (8005d78 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b62:	4d86      	ldr	r5, [pc, #536]	; (8005d7c <HAL_ADC_ConfigChannel+0x3ac>)
 8005b64:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b66:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b68:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b6c:	43e4      	mvns	r4, r4
 8005b6e:	f004 0401 	and.w	r4, r4, #1
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	f000 80c3 	beq.w	8005cfe <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b78:	4c81      	ldr	r4, [pc, #516]	; (8005d80 <HAL_ADC_ConfigChannel+0x3b0>)
 8005b7a:	42a0      	cmp	r0, r4
 8005b7c:	f000 810c 	beq.w	8005d98 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b80:	4c80      	ldr	r4, [pc, #512]	; (8005d84 <HAL_ADC_ConfigChannel+0x3b4>)
 8005b82:	42a0      	cmp	r0, r4
 8005b84:	f000 812b 	beq.w	8005dde <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b88:	4c7f      	ldr	r4, [pc, #508]	; (8005d88 <HAL_ADC_ConfigChannel+0x3b8>)
 8005b8a:	42a0      	cmp	r0, r4
 8005b8c:	d1c9      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005b8e:	0249      	lsls	r1, r1, #9
 8005b90:	d4c7      	bmi.n	8005b22 <HAL_ADC_ConfigChannel+0x152>
 8005b92:	4979      	ldr	r1, [pc, #484]	; (8005d78 <HAL_ADC_ConfigChannel+0x3a8>)
 8005b94:	428a      	cmp	r2, r1
 8005b96:	d1c4      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b98:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005ba0:	4332      	orrs	r2, r6
 8005ba2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ba6:	60aa      	str	r2, [r5, #8]
}
 8005ba8:	e7c1      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005baa:	68d6      	ldr	r6, [r2, #12]
 8005bac:	6948      	ldr	r0, [r1, #20]
 8005bae:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005bb2:	0076      	lsls	r6, r6, #1
 8005bb4:	fa00 f606 	lsl.w	r6, r0, r6
 8005bb8:	e76b      	b.n	8005a92 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bba:	2f00      	cmp	r7, #0
 8005bbc:	d071      	beq.n	8005ca2 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005bc2:	2c00      	cmp	r4, #0
 8005bc4:	f000 80af 	beq.w	8005d26 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8005bc8:	fab4 f484 	clz	r4, r4
 8005bcc:	3401      	adds	r4, #1
 8005bce:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bd2:	2c09      	cmp	r4, #9
 8005bd4:	f240 80a7 	bls.w	8005d26 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005bdc:	2d00      	cmp	r5, #0
 8005bde:	f000 8112 	beq.w	8005e06 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005be2:	fab5 f585 	clz	r5, r5
 8005be6:	3501      	adds	r5, #1
 8005be8:	06ad      	lsls	r5, r5, #26
 8005bea:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bee:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005bf2:	2c00      	cmp	r4, #0
 8005bf4:	f000 8105 	beq.w	8005e02 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8005bf8:	2601      	movs	r6, #1
 8005bfa:	fab4 f484 	clz	r4, r4
 8005bfe:	4434      	add	r4, r6
 8005c00:	f004 041f 	and.w	r4, r4, #31
 8005c04:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c08:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f000 80f5 	beq.w	8005dfe <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8005c14:	fab0 f480 	clz	r4, r0
 8005c18:	3401      	adds	r4, #1
 8005c1a:	f004 041f 	and.w	r4, r4, #31
 8005c1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005c22:	f1a4 001e 	sub.w	r0, r4, #30
 8005c26:	0500      	lsls	r0, r0, #20
 8005c28:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c2c:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8005c2e:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c32:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005c36:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c38:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8005c3a:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c3e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8005c42:	fa0c fc00 	lsl.w	ip, ip, r0
 8005c46:	4086      	lsls	r6, r0
 8005c48:	597c      	ldr	r4, [r7, r5]
 8005c4a:	ea24 000c 	bic.w	r0, r4, ip
 8005c4e:	4330      	orrs	r0, r6
 8005c50:	5178      	str	r0, [r7, r5]
 8005c52:	6808      	ldr	r0, [r1, #0]
}
 8005c54:	e763      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8005c56:	2002      	movs	r0, #2
}
 8005c58:	b003      	add	sp, #12
 8005c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c5c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005c5e:	680d      	ldr	r5, [r1, #0]
 8005c60:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c64:	06ac      	lsls	r4, r5, #26
 8005c66:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8005c6a:	d030      	beq.n	8005cce <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c6c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005c6e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c72:	4284      	cmp	r4, r0
 8005c74:	d026      	beq.n	8005cc4 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c76:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005c78:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c7c:	4284      	cmp	r4, r0
 8005c7e:	d02b      	beq.n	8005cd8 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c80:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c82:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c86:	4284      	cmp	r4, r0
 8005c88:	f47f af31 	bne.w	8005aee <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005c8c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c92:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005c94:	e72b      	b.n	8005aee <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c96:	0876      	lsrs	r6, r6, #1
 8005c98:	f006 0608 	and.w	r6, r6, #8
 8005c9c:	fa00 f606 	lsl.w	r6, r0, r6
 8005ca0:	e6f7      	b.n	8005a92 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ca2:	0e80      	lsrs	r0, r0, #26
 8005ca4:	1c44      	adds	r4, r0, #1
 8005ca6:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005caa:	2e09      	cmp	r6, #9
 8005cac:	d82d      	bhi.n	8005d0a <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cae:	06a5      	lsls	r5, r4, #26
 8005cb0:	2401      	movs	r4, #1
 8005cb2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005cb6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005cba:	fa04 f606 	lsl.w	r6, r4, r6
 8005cbe:	0500      	lsls	r0, r0, #20
 8005cc0:	4335      	orrs	r5, r6
 8005cc2:	e7b3      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005cc4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005cc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cca:	6650      	str	r0, [r2, #100]	; 0x64
 8005ccc:	e7d3      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005cce:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005cd0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cd4:	6610      	str	r0, [r2, #96]	; 0x60
 8005cd6:	e7c9      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005cd8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005cda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cde:	6690      	str	r0, [r2, #104]	; 0x68
 8005ce0:	e7ce      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ce2:	492a      	ldr	r1, [pc, #168]	; (8005d8c <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ce4:	4e23      	ldr	r6, [pc, #140]	; (8005d74 <HAL_ADC_ConfigChannel+0x3a4>)
 8005ce6:	4c2a      	ldr	r4, [pc, #168]	; (8005d90 <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ce8:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005cea:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cec:	68b7      	ldr	r7, [r6, #8]
 8005cee:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005cf0:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cf4:	433c      	orrs	r4, r7
 8005cf6:	43e4      	mvns	r4, r4
 8005cf8:	f004 0401 	and.w	r4, r4, #1
 8005cfc:	e739      	b.n	8005b72 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d00:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d02:	f042 0220 	orr.w	r2, r2, #32
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d08:	e711      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d0a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d0e:	2701      	movs	r7, #1
 8005d10:	06a5      	lsls	r5, r4, #26
 8005d12:	381e      	subs	r0, #30
 8005d14:	fa07 f606 	lsl.w	r6, r7, r6
 8005d18:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d1c:	0500      	lsls	r0, r0, #20
 8005d1e:	4335      	orrs	r5, r6
 8005d20:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005d24:	e782      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d073      	beq.n	8005e16 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005d2e:	fab4 f484 	clz	r4, r4
 8005d32:	3401      	adds	r4, #1
 8005d34:	06a4      	lsls	r4, r4, #26
 8005d36:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d067      	beq.n	8005e12 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8005d42:	2501      	movs	r5, #1
 8005d44:	fab6 f686 	clz	r6, r6
 8005d48:	442e      	add	r6, r5
 8005d4a:	f006 061f 	and.w	r6, r6, #31
 8005d4e:	40b5      	lsls	r5, r6
 8005d50:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d058      	beq.n	8005e0c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005d5a:	fab0 f480 	clz	r4, r0
 8005d5e:	3401      	adds	r4, #1
 8005d60:	f004 041f 	and.w	r4, r4, #31
 8005d64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005d68:	0520      	lsls	r0, r4, #20
 8005d6a:	e75f      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x25c>
 8005d6c:	5c001000 	.word	0x5c001000
 8005d70:	000fffff 	.word	0x000fffff
 8005d74:	40022000 	.word	0x40022000
 8005d78:	58026000 	.word	0x58026000
 8005d7c:	58026300 	.word	0x58026300
 8005d80:	cb840000 	.word	0xcb840000
 8005d84:	c7520000 	.word	0xc7520000
 8005d88:	cfb80000 	.word	0xcfb80000
 8005d8c:	40022300 	.word	0x40022300
 8005d90:	40022100 	.word	0x40022100
 8005d94:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d98:	0208      	lsls	r0, r1, #8
 8005d9a:	f53f aec2 	bmi.w	8005b22 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d9e:	491f      	ldr	r1, [pc, #124]	; (8005e1c <HAL_ADC_ConfigChannel+0x44c>)
 8005da0:	428a      	cmp	r2, r1
 8005da2:	f47f aebe 	bne.w	8005b22 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005da6:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <HAL_ADC_ConfigChannel+0x450>)
 8005da8:	481e      	ldr	r0, [pc, #120]	; (8005e24 <HAL_ADC_ConfigChannel+0x454>)
 8005daa:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005dac:	68a9      	ldr	r1, [r5, #8]
 8005dae:	0992      	lsrs	r2, r2, #6
 8005db0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005db4:	fba0 0202 	umull	r0, r2, r0, r2
 8005db8:	4331      	orrs	r1, r6
 8005dba:	0992      	lsrs	r2, r2, #6
 8005dbc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005dc0:	3201      	adds	r2, #1
 8005dc2:	60a9      	str	r1, [r5, #8]
 8005dc4:	0052      	lsls	r2, r2, #1
 8005dc6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005dc8:	9a01      	ldr	r2, [sp, #4]
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	f43f aea9 	beq.w	8005b22 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8005dd0:	9a01      	ldr	r2, [sp, #4]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005dd6:	9a01      	ldr	r2, [sp, #4]
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	d1f9      	bne.n	8005dd0 <HAL_ADC_ConfigChannel+0x400>
 8005ddc:	e6a1      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005dde:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8005de2:	f47f ae9e 	bne.w	8005b22 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005de6:	490d      	ldr	r1, [pc, #52]	; (8005e1c <HAL_ADC_ConfigChannel+0x44c>)
 8005de8:	428a      	cmp	r2, r1
 8005dea:	f47f ae9a 	bne.w	8005b22 <HAL_ADC_ConfigChannel+0x152>
 8005dee:	68aa      	ldr	r2, [r5, #8]
 8005df0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005df4:	4332      	orrs	r2, r6
 8005df6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005dfa:	60aa      	str	r2, [r5, #8]
}
 8005dfc:	e697      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x15e>
 8005dfe:	480a      	ldr	r0, [pc, #40]	; (8005e28 <HAL_ADC_ConfigChannel+0x458>)
 8005e00:	e714      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x25c>
 8005e02:	2402      	movs	r4, #2
 8005e04:	e700      	b.n	8005c08 <HAL_ADC_ConfigChannel+0x238>
 8005e06:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005e0a:	e6f0      	b.n	8005bee <HAL_ADC_ConfigChannel+0x21e>
 8005e0c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005e10:	e70c      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x25c>
 8005e12:	2502      	movs	r5, #2
 8005e14:	e79c      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x380>
 8005e16:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005e1a:	e78e      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x36a>
 8005e1c:	58026000 	.word	0x58026000
 8005e20:	24000000 	.word	0x24000000
 8005e24:	053e2d63 	.word	0x053e2d63
 8005e28:	fe500000 	.word	0xfe500000

08005e2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e2e:	4a5a      	ldr	r2, [pc, #360]	; (8005f98 <ADC_ConfigureBoostMode+0x16c>)
{
 8005e30:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d029      	beq.n	8005e8c <ADC_ConfigureBoostMode+0x60>
 8005e38:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d025      	beq.n	8005e8c <ADC_ConfigureBoostMode+0x60>
 8005e40:	4b56      	ldr	r3, [pc, #344]	; (8005f9c <ADC_ConfigureBoostMode+0x170>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b333      	cbz	r3, 8005e9e <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e50:	f002 f8a0 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005e54:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005e56:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e5c:	f000 808b 	beq.w	8005f76 <ADC_ConfigureBoostMode+0x14a>
 8005e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e64:	d06f      	beq.n	8005f46 <ADC_ConfigureBoostMode+0x11a>
 8005e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6a:	f000 8084 	beq.w	8005f76 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005e6e:	f7ff fd97 	bl	80059a0 <HAL_GetREVID>
 8005e72:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e76:	4298      	cmp	r0, r3
 8005e78:	d84e      	bhi.n	8005f18 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8005e7a:	4b49      	ldr	r3, [pc, #292]	; (8005fa0 <ADC_ConfigureBoostMode+0x174>)
 8005e7c:	429d      	cmp	r5, r3
 8005e7e:	d92d      	bls.n	8005edc <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	6893      	ldr	r3, [r2, #8]
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <ADC_ConfigureBoostMode+0x178>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1d8      	bne.n	8005e50 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ea2:	f003 f98b 	bl	80091bc <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005ea6:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005ea8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005eaa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005eae:	d06c      	beq.n	8005f8a <ADC_ConfigureBoostMode+0x15e>
 8005eb0:	d808      	bhi.n	8005ec4 <ADC_ConfigureBoostMode+0x98>
 8005eb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eb6:	d050      	beq.n	8005f5a <ADC_ConfigureBoostMode+0x12e>
 8005eb8:	d916      	bls.n	8005ee8 <ADC_ConfigureBoostMode+0xbc>
 8005eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ebe:	d1d6      	bne.n	8005e6e <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8005ec0:	0945      	lsrs	r5, r0, #5
        break;
 8005ec2:	e7d4      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8005ec4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ec8:	d045      	beq.n	8005f56 <ADC_ConfigureBoostMode+0x12a>
 8005eca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ece:	d1ce      	bne.n	8005e6e <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ed0:	f7ff fd66 	bl	80059a0 <HAL_GetREVID>
 8005ed4:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	d840      	bhi.n	8005f5e <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	6893      	ldr	r3, [r2, #8]
 8005ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee4:	6093      	str	r3, [r2, #8]
}
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eec:	d006      	beq.n	8005efc <ADC_ConfigureBoostMode+0xd0>
 8005eee:	d90a      	bls.n	8005f06 <ADC_ConfigureBoostMode+0xda>
 8005ef0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ef4:	d002      	beq.n	8005efc <ADC_ConfigureBoostMode+0xd0>
 8005ef6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005efa:	d1b8      	bne.n	8005e6e <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005efc:	0c9b      	lsrs	r3, r3, #18
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8005f04:	e7b3      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8005f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f0a:	d0f7      	beq.n	8005efc <ADC_ConfigureBoostMode+0xd0>
 8005f0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f10:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8005f14:	d0f2      	beq.n	8005efc <ADC_ConfigureBoostMode+0xd0>
 8005f16:	e7aa      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8005f18:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <ADC_ConfigureBoostMode+0x17c>)
 8005f1a:	429d      	cmp	r5, r3
 8005f1c:	d805      	bhi.n	8005f2a <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	6893      	ldr	r3, [r2, #8]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	6093      	str	r3, [r2, #8]
}
 8005f28:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8005f2a:	4b20      	ldr	r3, [pc, #128]	; (8005fac <ADC_ConfigureBoostMode+0x180>)
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	d91a      	bls.n	8005f66 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8005f30:	4b1f      	ldr	r3, [pc, #124]	; (8005fb0 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f32:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8005f34:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f36:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8005f38:	d829      	bhi.n	8005f8e <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f42:	6093      	str	r3, [r2, #8]
}
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8005f46:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005f48:	f7ff fd2a 	bl	80059a0 <HAL_GetREVID>
 8005f4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f50:	4298      	cmp	r0, r3
 8005f52:	d8e1      	bhi.n	8005f18 <ADC_ConfigureBoostMode+0xec>
 8005f54:	e791      	b.n	8005e7a <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8005f56:	09c5      	lsrs	r5, r0, #7
        break;
 8005f58:	e789      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8005f5a:	0905      	lsrs	r5, r0, #4
        break;
 8005f5c:	e787      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <ADC_ConfigureBoostMode+0x17c>)
 8005f60:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8005f64:	d2db      	bcs.n	8005f1e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	6893      	ldr	r3, [r2, #8]
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	6093      	str	r3, [r2, #8]
}
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005f7c:	f7ff fd10 	bl	80059a0 <HAL_GetREVID>
 8005f80:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f84:	4298      	cmp	r0, r3
 8005f86:	d8c7      	bhi.n	8005f18 <ADC_ConfigureBoostMode+0xec>
 8005f88:	e777      	b.n	8005e7a <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8005f8a:	0985      	lsrs	r5, r0, #6
        break;
 8005f8c:	e76f      	b.n	8005e6e <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005f8e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f92:	6093      	str	r3, [r2, #8]
}
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	58026300 	.word	0x58026300
 8005fa0:	01312d00 	.word	0x01312d00
 8005fa4:	40022300 	.word	0x40022300
 8005fa8:	00bebc21 	.word	0x00bebc21
 8005fac:	017d7841 	.word	0x017d7841
 8005fb0:	02faf081 	.word	0x02faf081

08005fb4 <HAL_ADC_Init>:
{
 8005fb4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8005fb6:	2300      	movs	r3, #0
{
 8005fb8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8005fba:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f000 80d0 	beq.w	8006162 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005fc2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	f000 80ba 	beq.w	8006140 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fcc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005fce:	6893      	ldr	r3, [r2, #8]
 8005fd0:	009d      	lsls	r5, r3, #2
 8005fd2:	d503      	bpl.n	8005fdc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005fd4:	6891      	ldr	r1, [r2, #8]
 8005fd6:	4b71      	ldr	r3, [pc, #452]	; (800619c <HAL_ADC_Init+0x1e8>)
 8005fd8:	400b      	ands	r3, r1
 8005fda:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fdc:	6893      	ldr	r3, [r2, #8]
 8005fde:	00d8      	lsls	r0, r3, #3
 8005fe0:	d416      	bmi.n	8006010 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <HAL_ADC_Init+0x1ec>)
 8005fe4:	4d6f      	ldr	r5, [pc, #444]	; (80061a4 <HAL_ADC_Init+0x1f0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005fe8:	6890      	ldr	r0, [r2, #8]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	496e      	ldr	r1, [pc, #440]	; (80061a8 <HAL_ADC_Init+0x1f4>)
 8005fee:	fba5 5303 	umull	r5, r3, r5, r3
 8005ff2:	4001      	ands	r1, r0
 8005ff4:	099b      	lsrs	r3, r3, #6
 8005ff6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6091      	str	r1, [r2, #8]
 8005ffe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	b12b      	cbz	r3, 8006010 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800600a:	9b01      	ldr	r3, [sp, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f9      	bne.n	8006004 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006010:	6893      	ldr	r3, [r2, #8]
 8006012:	00d9      	lsls	r1, r3, #3
 8006014:	d424      	bmi.n	8006060 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006016:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006018:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800601a:	f043 0310 	orr.w	r3, r3, #16
 800601e:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006022:	432b      	orrs	r3, r5
 8006024:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006026:	6893      	ldr	r3, [r2, #8]
 8006028:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800602c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800602e:	d11d      	bne.n	800606c <HAL_ADC_Init+0xb8>
 8006030:	06db      	lsls	r3, r3, #27
 8006032:	d41b      	bmi.n	800606c <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006034:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006036:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800603a:	f043 0302 	orr.w	r3, r3, #2
 800603e:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006040:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006042:	07de      	lsls	r6, r3, #31
 8006044:	d428      	bmi.n	8006098 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006046:	4b59      	ldr	r3, [pc, #356]	; (80061ac <HAL_ADC_Init+0x1f8>)
 8006048:	429a      	cmp	r2, r3
 800604a:	d017      	beq.n	800607c <HAL_ADC_Init+0xc8>
 800604c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006050:	429a      	cmp	r2, r3
 8006052:	d013      	beq.n	800607c <HAL_ADC_Init+0xc8>
 8006054:	4b56      	ldr	r3, [pc, #344]	; (80061b0 <HAL_ADC_Init+0x1fc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	07d9      	lsls	r1, r3, #31
 800605a:	d41d      	bmi.n	8006098 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800605c:	4a55      	ldr	r2, [pc, #340]	; (80061b4 <HAL_ADC_Init+0x200>)
 800605e:	e015      	b.n	800608c <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006060:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006062:	2500      	movs	r5, #0
 8006064:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006068:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800606a:	d0e1      	beq.n	8006030 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800606c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800606e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006070:	f043 0310 	orr.w	r3, r3, #16
}
 8006074:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006076:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006078:	b002      	add	sp, #8
 800607a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800607c:	4a4b      	ldr	r2, [pc, #300]	; (80061ac <HAL_ADC_Init+0x1f8>)
 800607e:	4b4e      	ldr	r3, [pc, #312]	; (80061b8 <HAL_ADC_Init+0x204>)
 8006080:	6892      	ldr	r2, [r2, #8]
 8006082:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006084:	4313      	orrs	r3, r2
 8006086:	07d8      	lsls	r0, r3, #31
 8006088:	d406      	bmi.n	8006098 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800608a:	4a4c      	ldr	r2, [pc, #304]	; (80061bc <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	6861      	ldr	r1, [r4, #4]
 8006090:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006094:	430b      	orrs	r3, r1
 8006096:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006098:	f7ff fc82 	bl	80059a0 <HAL_GetREVID>
 800609c:	f241 0303 	movw	r3, #4099	; 0x1003
 80060a0:	68a1      	ldr	r1, [r4, #8]
 80060a2:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060a4:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80060a6:	d851      	bhi.n	800614c <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060a8:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060aa:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80060ae:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 80060b2:	4302      	orrs	r2, r0
 80060b4:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d103      	bne.n	80060c2 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060ba:	6a23      	ldr	r3, [r4, #32]
 80060bc:	3b01      	subs	r3, #1
 80060be:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c4:	b123      	cbz	r3, 80060d0 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c6:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80060ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80060cc:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060ce:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	493b      	ldr	r1, [pc, #236]	; (80061c0 <HAL_ADC_Init+0x20c>)
 80060d4:	68d8      	ldr	r0, [r3, #12]
 80060d6:	4001      	ands	r1, r0
 80060d8:	430a      	orrs	r2, r1
 80060da:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060e2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060e4:	d11c      	bne.n	8006120 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060e6:	0712      	lsls	r2, r2, #28
 80060e8:	d41a      	bmi.n	8006120 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060ea:	68d9      	ldr	r1, [r3, #12]
 80060ec:	4a35      	ldr	r2, [pc, #212]	; (80061c4 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80060ee:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060f0:	400a      	ands	r2, r1
 80060f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060f4:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80060fc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006100:	2a01      	cmp	r2, #1
 8006102:	d03a      	beq.n	800617a <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800610c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800610e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006112:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006116:	430a      	orrs	r2, r1
 8006118:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800611a:	f7ff fe87 	bl	8005e2c <ADC_ConfigureBoostMode>
 800611e:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006120:	68e2      	ldr	r2, [r4, #12]
 8006122:	2a01      	cmp	r2, #1
 8006124:	d021      	beq.n	800616a <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006128:	f022 020f 	bic.w	r2, r2, #15
 800612c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800612e:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006130:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800613c:	b002      	add	sp, #8
 800613e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006140:	f7fd ff04 	bl	8003f4c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006144:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006146:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800614a:	e73f      	b.n	8005fcc <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800614c:	2910      	cmp	r1, #16
 800614e:	d1ab      	bne.n	80060a8 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006150:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006152:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006154:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006156:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800615a:	430a      	orrs	r2, r1
 800615c:	f042 021c 	orr.w	r2, r2, #28
 8006160:	e7a9      	b.n	80060b6 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006162:	2501      	movs	r5, #1
}
 8006164:	4628      	mov	r0, r5
 8006166:	b002      	add	sp, #8
 8006168:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800616a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800616c:	69a2      	ldr	r2, [r4, #24]
 800616e:	f021 010f 	bic.w	r1, r1, #15
 8006172:	3a01      	subs	r2, #1
 8006174:	430a      	orrs	r2, r1
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
 8006178:	e7d9      	b.n	800612e <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800617a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800617e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006180:	3901      	subs	r1, #1
 8006182:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006184:	4332      	orrs	r2, r6
 8006186:	691e      	ldr	r6, [r3, #16]
 8006188:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800618c:	490e      	ldr	r1, [pc, #56]	; (80061c8 <HAL_ADC_Init+0x214>)
 800618e:	4302      	orrs	r2, r0
 8006190:	4031      	ands	r1, r6
 8006192:	430a      	orrs	r2, r1
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	611a      	str	r2, [r3, #16]
 800619a:	e7b7      	b.n	800610c <HAL_ADC_Init+0x158>
 800619c:	5fffffc0 	.word	0x5fffffc0
 80061a0:	24000000 	.word	0x24000000
 80061a4:	053e2d63 	.word	0x053e2d63
 80061a8:	6fffffc0 	.word	0x6fffffc0
 80061ac:	40022000 	.word	0x40022000
 80061b0:	58026000 	.word	0x58026000
 80061b4:	58026300 	.word	0x58026300
 80061b8:	40022100 	.word	0x40022100
 80061bc:	40022300 	.word	0x40022300
 80061c0:	fff0c003 	.word	0xfff0c003
 80061c4:	ffffbffc 	.word	0xffffbffc
 80061c8:	fc00f81e 	.word	0xfc00f81e

080061cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061cc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061ce:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80061d2:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061d4:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80061d6:	2a01      	cmp	r2, #1
 80061d8:	d04d      	beq.n	8006276 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80061da:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061dc:	4c2b      	ldr	r4, [pc, #172]	; (800628c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80061de:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80061e0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061e2:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80061e4:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061e6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80061e8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80061ec:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061ee:	d008      	beq.n	8006202 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f0:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f6:	f041 0120 	orr.w	r1, r1, #32
 80061fa:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80061fc:	b01a      	add	sp, #104	; 0x68
 80061fe:	bcf0      	pop	{r4, r5, r6, r7}
 8006200:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006202:	4c23      	ldr	r4, [pc, #140]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006204:	68a2      	ldr	r2, [r4, #8]
 8006206:	0752      	lsls	r2, r2, #29
 8006208:	d50b      	bpl.n	8006222 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800620a:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800620c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800620e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800621c:	b01a      	add	sp, #104	; 0x68
 800621e:	bcf0      	pop	{r4, r5, r6, r7}
 8006220:	4770      	bx	lr
 8006222:	68a8      	ldr	r0, [r5, #8]
 8006224:	f010 0004 	ands.w	r0, r0, #4
 8006228:	d1f0      	bne.n	800620c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800622a:	b1c6      	cbz	r6, 800625e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800622c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006298 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006230:	684f      	ldr	r7, [r1, #4]
 8006232:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006236:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800623a:	433a      	orrs	r2, r7
 800623c:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006240:	68ad      	ldr	r5, [r5, #8]
 8006242:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006244:	432a      	orrs	r2, r5
 8006246:	07d4      	lsls	r4, r2, #31
 8006248:	d413      	bmi.n	8006272 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800624a:	688a      	ldr	r2, [r1, #8]
 800624c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006250:	4910      	ldr	r1, [pc, #64]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006252:	4316      	orrs	r6, r2
 8006254:	4021      	ands	r1, r4
 8006256:	430e      	orrs	r6, r1
 8006258:	f8cc 6008 	str.w	r6, [ip, #8]
 800625c:	e7db      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800625e:	490e      	ldr	r1, [pc, #56]	; (8006298 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006260:	688a      	ldr	r2, [r1, #8]
 8006262:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006266:	608a      	str	r2, [r1, #8]
 8006268:	68a8      	ldr	r0, [r5, #8]
 800626a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800626c:	4302      	orrs	r2, r0
 800626e:	07d0      	lsls	r0, r2, #31
 8006270:	d505      	bpl.n	800627e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006272:	2000      	movs	r0, #0
 8006274:	e7cf      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006276:	2002      	movs	r0, #2
}
 8006278:	b01a      	add	sp, #104	; 0x68
 800627a:	bcf0      	pop	{r4, r5, r6, r7}
 800627c:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800627e:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006280:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006284:	4022      	ands	r2, r4
 8006286:	608a      	str	r2, [r1, #8]
 8006288:	e7c5      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800628a:	bf00      	nop
 800628c:	40022000 	.word	0x40022000
 8006290:	40022100 	.word	0x40022100
 8006294:	fffff0e0 	.word	0xfffff0e0
 8006298:	40022300 	.word	0x40022300

0800629c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800629c:	4907      	ldr	r1, [pc, #28]	; (80062bc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800629e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062a2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062a8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062aa:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80062ae:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062b0:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062b4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80062b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80062b8:	60cb      	str	r3, [r1, #12]
 80062ba:	4770      	bx	lr
 80062bc:	e000ed00 	.word	0xe000ed00
 80062c0:	05fa0000 	.word	0x05fa0000

080062c4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_NVIC_SetPriority+0x68>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062cc:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ce:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d2:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062d4:	2d04      	cmp	r5, #4
 80062d6:	bf28      	it	cs
 80062d8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062da:	2c06      	cmp	r4, #6
 80062dc:	d919      	bls.n	8006312 <HAL_NVIC_SetPriority+0x4e>
 80062de:	3b03      	subs	r3, #3
 80062e0:	f04f 34ff 	mov.w	r4, #4294967295
 80062e4:	409c      	lsls	r4, r3
 80062e6:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80062ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f0:	fa04 f405 	lsl.w	r4, r4, r5
 80062f4:	ea21 0104 	bic.w	r1, r1, r4
 80062f8:	fa01 f103 	lsl.w	r1, r1, r3
 80062fc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006300:	db0a      	blt.n	8006318 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006302:	0109      	lsls	r1, r1, #4
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <HAL_NVIC_SetPriority+0x6c>)
 8006306:	b2c9      	uxtb	r1, r1
 8006308:	4403      	add	r3, r0
 800630a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800630e:	bc30      	pop	{r4, r5}
 8006310:	4770      	bx	lr
 8006312:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006314:	4613      	mov	r3, r2
 8006316:	e7e8      	b.n	80062ea <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006318:	f000 000f 	and.w	r0, r0, #15
 800631c:	0109      	lsls	r1, r1, #4
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_NVIC_SetPriority+0x70>)
 8006320:	b2c9      	uxtb	r1, r1
 8006322:	4403      	add	r3, r0
 8006324:	7619      	strb	r1, [r3, #24]
 8006326:	bc30      	pop	{r4, r5}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000ed00 	.word	0xe000ed00
 8006330:	e000e100 	.word	0xe000e100
 8006334:	e000ecfc 	.word	0xe000ecfc

08006338 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006338:	2800      	cmp	r0, #0
 800633a:	db07      	blt.n	800634c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633c:	2301      	movs	r3, #1
 800633e:	f000 011f 	and.w	r1, r0, #31
 8006342:	4a03      	ldr	r2, [pc, #12]	; (8006350 <HAL_NVIC_EnableIRQ+0x18>)
 8006344:	0940      	lsrs	r0, r0, #5
 8006346:	408b      	lsls	r3, r1
 8006348:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e100 	.word	0xe000e100

08006354 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006354:	3801      	subs	r0, #1
 8006356:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800635a:	d20d      	bcs.n	8006378 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800635e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006360:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006362:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006364:	25f0      	movs	r5, #240	; 0xf0
 8006366:	4c06      	ldr	r4, [pc, #24]	; (8006380 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006368:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800636a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006372:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006374:	bc30      	pop	{r4, r5}
 8006376:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006378:	2001      	movs	r0, #1
 800637a:	4770      	bx	lr
 800637c:	e000e010 	.word	0xe000e010
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006384:	b470      	push	{r4, r5, r6}
 8006386:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006388:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800638c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006390:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006392:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006396:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800639a:	ea43 0304 	orr.w	r3, r3, r4
 800639e:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80063a0:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80063a2:	d008      	beq.n	80063b6 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80063a4:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80063a8:	d002      	beq.n	80063b0 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80063aa:	60e9      	str	r1, [r5, #12]
  }
}
 80063ac:	bc70      	pop	{r4, r5, r6}
 80063ae:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80063b0:	6169      	str	r1, [r5, #20]
}
 80063b2:	bc70      	pop	{r4, r5, r6}
 80063b4:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80063b6:	6883      	ldr	r3, [r0, #8]
 80063b8:	b1b3      	cbz	r3, 80063e8 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d017      	beq.n	80063ee <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80063be:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80063c0:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80063c4:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80063c8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80063ca:	d01e      	beq.n	800640a <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80063cc:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80063ce:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80063d2:	d00f      	beq.n	80063f4 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80063d4:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80063d6:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80063d8:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80063da:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80063dc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80063e0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80063e4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80063e8:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80063ea:	bc70      	pop	{r4, r5, r6}
 80063ec:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 80063ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80063f2:	e7f9      	b.n	80063e8 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 80063f4:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 80063f6:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80063f8:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 80063fa:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80063fc:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8006400:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8006404:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006408:	e7ee      	b.n	80063e8 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 800640a:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800640c:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800640e:	02c9      	lsls	r1, r1, #11
 8006410:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006414:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006418:	e7e6      	b.n	80063e8 <DMA2D_SetConfig+0x64>
 800641a:	bf00      	nop

0800641c <HAL_DMA2D_MspInit>:
}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop

08006420 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006420:	2800      	cmp	r0, #0
 8006422:	d036      	beq.n	8006492 <HAL_DMA2D_Init+0x72>
{
 8006424:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006426:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800642a:	4604      	mov	r4, r0
 800642c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006430:	b353      	cbz	r3, 8006488 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006432:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006434:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006436:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006438:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800643a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800643e:	4916      	ldr	r1, [pc, #88]	; (8006498 <HAL_DMA2D_Init+0x78>)
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	4031      	ands	r1, r6
 8006446:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006448:	4814      	ldr	r0, [pc, #80]	; (800649c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800644a:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800644c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800644e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006450:	69a1      	ldr	r1, [r4, #24]
 8006452:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006454:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006456:	4912      	ldr	r1, [pc, #72]	; (80064a0 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006458:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800645a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800645c:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800645e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006464:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006466:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006468:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800646a:	0552      	lsls	r2, r2, #21
 800646c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800646e:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006472:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8006476:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006478:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800647c:	430a      	orrs	r2, r1
 800647e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006480:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006482:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8006486:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006488:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800648c:	f7ff ffc6 	bl	800641c <HAL_DMA2D_MspInit>
 8006490:	e7cf      	b.n	8006432 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8006492:	2001      	movs	r0, #1
}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	fff8ffbf 	.word	0xfff8ffbf
 800649c:	fffffef8 	.word	0xfffffef8
 80064a0:	ffff0000 	.word	0xffff0000

080064a4 <HAL_DMA2D_Start>:
{
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80064a6:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 80064aa:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80064ac:	2d01      	cmp	r5, #1
 80064ae:	d011      	beq.n	80064d4 <HAL_DMA2D_Start+0x30>
 80064b0:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80064b2:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064b4:	2502      	movs	r5, #2
 80064b6:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80064b8:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80064ba:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064be:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80064c2:	f7ff ff5f 	bl	8006384 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80064c6:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80064c8:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	4333      	orrs	r3, r6
 80064ce:	6013      	str	r3, [r2, #0]
}
 80064d0:	b003      	add	sp, #12
 80064d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80064d4:	2002      	movs	r0, #2
}
 80064d6:	b003      	add	sp, #12
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064da:	bf00      	nop

080064dc <HAL_DMA2D_PollForTransfer>:
{
 80064dc:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80064de:	2300      	movs	r3, #0
{
 80064e0:	b082      	sub	sp, #8
 80064e2:	4605      	mov	r5, r0
 80064e4:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 80064e6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80064e8:	6803      	ldr	r3, [r0, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	07d2      	lsls	r2, r2, #31
 80064ee:	d40f      	bmi.n	8006510 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80064f0:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80064f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064f4:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 80064f6:	0692      	lsls	r2, r2, #26
 80064f8:	d433      	bmi.n	8006562 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 80064fa:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80064fc:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80064fe:	2101      	movs	r1, #1
  return HAL_OK;
 8006500:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006502:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8006504:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006508:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 800650c:	b002      	add	sp, #8
 800650e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006510:	f7ff fa2e 	bl	8005970 <HAL_GetTick>
 8006514:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	e001      	b.n	800651e <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 800651a:	1c60      	adds	r0, r4, #1
 800651c:	d148      	bne.n	80065b0 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	0791      	lsls	r1, r2, #30
 8006522:	d4e5      	bmi.n	80064f0 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006528:	9a01      	ldr	r2, [sp, #4]
 800652a:	f012 0f21 	tst.w	r2, #33	; 0x21
 800652e:	d0f4      	beq.n	800651a <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006530:	9a01      	ldr	r2, [sp, #4]
 8006532:	0696      	lsls	r6, r2, #26
 8006534:	d503      	bpl.n	800653e <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006536:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006538:	f042 0202 	orr.w	r2, r2, #2
 800653c:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800653e:	9a01      	ldr	r2, [sp, #4]
 8006540:	07d4      	lsls	r4, r2, #31
 8006542:	d503      	bpl.n	800654c <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006544:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800654c:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800654e:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8006550:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006552:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006554:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006556:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800655a:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 800655e:	b002      	add	sp, #8
 8006560:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006562:	f7ff fa05 	bl	8005970 <HAL_GetTick>
 8006566:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	e001      	b.n	8006570 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 800656c:	1c61      	adds	r1, r4, #1
 800656e:	d132      	bne.n	80065d6 <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	06d2      	lsls	r2, r2, #27
 8006574:	d4c1      	bmi.n	80064fa <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800657a:	9a01      	ldr	r2, [sp, #4]
 800657c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8006580:	d0f4      	beq.n	800656c <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	0716      	lsls	r6, r2, #28
 8006586:	d503      	bpl.n	8006590 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006588:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800658a:	f042 0204 	orr.w	r2, r2, #4
 800658e:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006590:	9a01      	ldr	r2, [sp, #4]
 8006592:	0694      	lsls	r4, r2, #26
 8006594:	d503      	bpl.n	800659e <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006596:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006598:	f042 0202 	orr.w	r2, r2, #2
 800659c:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800659e:	9a01      	ldr	r2, [sp, #4]
 80065a0:	07d0      	lsls	r0, r2, #31
 80065a2:	d503      	bpl.n	80065ac <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065a4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80065ac:	2429      	movs	r4, #41	; 0x29
 80065ae:	e7ce      	b.n	800654e <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065b0:	f7ff f9de 	bl	8005970 <HAL_GetTick>
 80065b4:	1b80      	subs	r0, r0, r6
 80065b6:	42a0      	cmp	r0, r4
 80065b8:	d801      	bhi.n	80065be <HAL_DMA2D_PollForTransfer+0xe2>
 80065ba:	2c00      	cmp	r4, #0
 80065bc:	d1ab      	bne.n	8006516 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80065be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80065c0:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80065c2:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80065c4:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80065c8:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80065ca:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80065ce:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80065d0:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 80065d4:	e79a      	b.n	800650c <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7ff f9cb 	bl	8005970 <HAL_GetTick>
 80065da:	1b80      	subs	r0, r0, r6
 80065dc:	42a0      	cmp	r0, r4
 80065de:	d8ee      	bhi.n	80065be <HAL_DMA2D_PollForTransfer+0xe2>
 80065e0:	2c00      	cmp	r4, #0
 80065e2:	d1c1      	bne.n	8006568 <HAL_DMA2D_PollForTransfer+0x8c>
 80065e4:	e7eb      	b.n	80065be <HAL_DMA2D_PollForTransfer+0xe2>
 80065e6:	bf00      	nop

080065e8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80065e8:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 80065ec:	2a01      	cmp	r2, #1
 80065ee:	d063      	beq.n	80066b8 <HAL_DMA2D_ConfigLayer+0xd0>
 80065f0:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80065f2:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065f6:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80065f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80065fc:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 80065fe:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006600:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8006604:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006608:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800660a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800660c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800660e:	0512      	lsls	r2, r2, #20
 8006610:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006612:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006616:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800661a:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800661c:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800661e:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006622:	d922      	bls.n	800666a <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006624:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006626:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800662a:	b981      	cbnz	r1, 800664e <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	4923      	ldr	r1, [pc, #140]	; (80066bc <HAL_DMA2D_ConfigLayer+0xd4>)
 8006630:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006632:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006634:	4029      	ands	r1, r5
 8006636:	430a      	orrs	r2, r1
 8006638:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800663a:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800663c:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800663e:	2101      	movs	r1, #1
  return HAL_OK;
 8006640:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006642:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 8006646:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800664a:	bc70      	pop	{r4, r5, r6}
 800664c:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800664e:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006650:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006652:	d129      	bne.n	80066a8 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006654:	69e6      	ldr	r6, [r4, #28]
 8006656:	491a      	ldr	r1, [pc, #104]	; (80066c0 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006658:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800665a:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800665c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800665e:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8006662:	430a      	orrs	r2, r1
 8006664:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006666:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006668:	e7e8      	b.n	800663c <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800666a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800666c:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8006670:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006672:	b161      	cbz	r1, 800668e <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	4c11      	ldr	r4, [pc, #68]	; (80066bc <HAL_DMA2D_ConfigLayer+0xd4>)
 8006678:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800667a:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800667c:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800667e:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006680:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006684:	4322      	orrs	r2, r4
 8006686:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006688:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800668a:	620d      	str	r5, [r1, #32]
 800668c:	e7d6      	b.n	800663c <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	4c0a      	ldr	r4, [pc, #40]	; (80066bc <HAL_DMA2D_ConfigLayer+0xd4>)
 8006692:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006694:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006696:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006698:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800669a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800669e:	4322      	orrs	r2, r4
 80066a0:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066a2:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80066a4:	6288      	str	r0, [r1, #40]	; 0x28
 80066a6:	e7c9      	b.n	800663c <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066a8:	69e5      	ldr	r5, [r4, #28]
 80066aa:	4904      	ldr	r1, [pc, #16]	; (80066bc <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066ae:	4029      	ands	r1, r5
 80066b0:	430a      	orrs	r2, r1
 80066b2:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066b4:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066b6:	e7c1      	b.n	800663c <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80066b8:	2002      	movs	r0, #2
}
 80066ba:	4770      	bx	lr
 80066bc:	00ccfff0 	.word	0x00ccfff0
 80066c0:	00c0fff0 	.word	0x00c0fff0

080066c4 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4605      	mov	r5, r0
 80066ca:	4688      	mov	r8, r1
 80066cc:	4617      	mov	r7, r2
 80066ce:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80066d0:	f7ff f94e 	bl	8005970 <HAL_GetTick>
 80066d4:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80066d6:	e005      	b.n	80066e4 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80066d8:	f7ff f94a 	bl	8005970 <HAL_GetTick>
 80066dc:	1b84      	subs	r4, r0, r6
 80066de:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80066e2:	d80e      	bhi.n	8006702 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80066e4:	682c      	ldr	r4, [r5, #0]
 80066e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80066e8:	07db      	lsls	r3, r3, #31
 80066ea:	d5f5      	bpl.n	80066d8 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80066ec:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 80066f0:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 80066f2:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80066f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80066f8:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 80066fc:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 80066fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8006702:	2003      	movs	r0, #3
}
 8006704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006708 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop

0800670c <HAL_DSI_Init>:
  if (hdsi == NULL)
 800670c:	2800      	cmp	r0, #0
 800670e:	f000 80b3 	beq.w	8006878 <HAL_DSI_Init+0x16c>
{
 8006712:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006714:	7c43      	ldrb	r3, [r0, #17]
{
 8006716:	b083      	sub	sp, #12
 8006718:	460d      	mov	r5, r1
 800671a:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a8 	beq.w	8006872 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8006722:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006724:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8006726:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006728:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800672a:	9200      	str	r2, [sp, #0]
 800672c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006730:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006734:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006738:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800673c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006744:	f7ff f914 	bl	8005970 <HAL_GetTick>
 8006748:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800674a:	e006      	b.n	800675a <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800674c:	f7ff f910 	bl	8005970 <HAL_GetTick>
 8006750:	1b83      	subs	r3, r0, r6
 8006752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006756:	f200 8089 	bhi.w	800686c <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006760:	04d1      	lsls	r1, r2, #19
 8006762:	d5f3      	bpl.n	800674c <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006764:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006766:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006768:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800676c:	682e      	ldr	r6, [r5, #0]
 800676e:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006770:	4942      	ldr	r1, [pc, #264]	; (800687c <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006772:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8006776:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006778:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800677a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800677e:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006782:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8006786:	430a      	orrs	r2, r1
 8006788:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800678c:	9001      	str	r0, [sp, #4]
 800678e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800679a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80067a6:	f7ff f8e3 	bl	8005970 <HAL_GetTick>
 80067aa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067ac:	e005      	b.n	80067ba <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067ae:	f7ff f8df 	bl	8005970 <HAL_GetTick>
 80067b2:	1b80      	subs	r0, r0, r6
 80067b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80067b8:	d858      	bhi.n	800686c <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80067c0:	05d2      	lsls	r2, r2, #23
 80067c2:	d5f4      	bpl.n	80067ae <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067c8:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067cc:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 80067ce:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067d0:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80067d4:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80067d6:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80067de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80067e2:	f022 0203 	bic.w	r2, r2, #3
 80067e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067ea:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067ee:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067f0:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067f2:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067f4:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067f8:	bf38      	it	cc
 80067fa:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067fc:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006800:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006804:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006806:	f020 0003 	bic.w	r0, r0, #3
 800680a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800680e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006812:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006814:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006816:	682d      	ldr	r5, [r5, #0]
 8006818:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800681c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006820:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006822:	fb0c f505 	mul.w	r5, ip, r5
 8006826:	4a16      	ldr	r2, [pc, #88]	; (8006880 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006828:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800682c:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006830:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006832:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006834:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006836:	ea46 060e 	orr.w	r6, r6, lr
 800683a:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 800683c:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800683e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006842:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006846:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800684a:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800684e:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006850:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8006854:	432a      	orrs	r2, r5
 8006856:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800685a:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800685e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006862:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8006864:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006866:	7466      	strb	r6, [r4, #17]
}
 8006868:	b003      	add	sp, #12
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800686c:	2003      	movs	r0, #3
}
 800686e:	b003      	add	sp, #12
 8006870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8006872:	f7ff ff49 	bl	8006708 <HAL_DSI_MspInit>
 8006876:	e754      	b.n	8006722 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8006878:	2001      	movs	r0, #1
}
 800687a:	4770      	bx	lr
 800687c:	fffc8603 	.word	0xfffc8603
 8006880:	003d0900 	.word	0x003d0900

08006884 <HAL_DSI_TearingEffectCallback>:
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop

08006888 <HAL_DSI_EndOfRefreshCallback>:
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop

0800688c <HAL_DSI_ErrorCallback>:
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006890:	6803      	ldr	r3, [r0, #0]
 8006892:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006896:	07d1      	lsls	r1, r2, #31
{
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800689c:	d503      	bpl.n	80068a6 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800689e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80068a2:	07d2      	lsls	r2, r2, #31
 80068a4:	d462      	bmi.n	800696c <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80068a6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80068aa:	0791      	lsls	r1, r2, #30
 80068ac:	d503      	bpl.n	80068b6 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80068ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80068b2:	0792      	lsls	r2, r2, #30
 80068b4:	d44f      	bmi.n	8006956 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80068b6:	69a3      	ldr	r3, [r4, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d04b      	beq.n	8006954 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80068bc:	6821      	ldr	r1, [r4, #0]
 80068be:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80068c2:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80068c6:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80068ca:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80068cc:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80068d0:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80068d2:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80068d4:	b119      	cbz	r1, 80068de <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80068d6:	6961      	ldr	r1, [r4, #20]
 80068d8:	f041 0101 	orr.w	r1, r1, #1
 80068dc:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80068de:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80068e2:	d003      	beq.n	80068ec <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80068e4:	6962      	ldr	r2, [r4, #20]
 80068e6:	f042 0202 	orr.w	r2, r2, #2
 80068ea:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80068ec:	07d8      	lsls	r0, r3, #31
 80068ee:	d503      	bpl.n	80068f8 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80068f0:	6962      	ldr	r2, [r4, #20]
 80068f2:	f042 0204 	orr.w	r2, r2, #4
 80068f6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80068f8:	0799      	lsls	r1, r3, #30
 80068fa:	d503      	bpl.n	8006904 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80068fc:	6962      	ldr	r2, [r4, #20]
 80068fe:	f042 0208 	orr.w	r2, r2, #8
 8006902:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006904:	f013 0f0c 	tst.w	r3, #12
 8006908:	d003      	beq.n	8006912 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800690a:	6962      	ldr	r2, [r4, #20]
 800690c:	f042 0210 	orr.w	r2, r2, #16
 8006910:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006912:	06da      	lsls	r2, r3, #27
 8006914:	d503      	bpl.n	800691e <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006916:	6962      	ldr	r2, [r4, #20]
 8006918:	f042 0220 	orr.w	r2, r2, #32
 800691c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800691e:	0698      	lsls	r0, r3, #26
 8006920:	d503      	bpl.n	800692a <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006922:	6962      	ldr	r2, [r4, #20]
 8006924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006928:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800692a:	0659      	lsls	r1, r3, #25
 800692c:	d503      	bpl.n	8006936 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800692e:	6962      	ldr	r2, [r4, #20]
 8006930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006934:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006936:	061a      	lsls	r2, r3, #24
 8006938:	d503      	bpl.n	8006942 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800693a:	6962      	ldr	r2, [r4, #20]
 800693c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006940:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006942:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006946:	d003      	beq.n	8006950 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006948:	6963      	ldr	r3, [r4, #20]
 800694a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800694e:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006950:	6963      	ldr	r3, [r4, #20]
 8006952:	b93b      	cbnz	r3, 8006964 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006954:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006956:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006958:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800695a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800695e:	f7ff ff93 	bl	8006888 <HAL_DSI_EndOfRefreshCallback>
 8006962:	e7a8      	b.n	80068b6 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff ff91 	bl	800688c <HAL_DSI_ErrorCallback>
}
 800696a:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800696c:	2201      	movs	r2, #1
 800696e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8006972:	f7ff ff87 	bl	8006884 <HAL_DSI_TearingEffectCallback>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	e795      	b.n	80068a6 <HAL_DSI_IRQHandler+0x16>
 800697a:	bf00      	nop

0800697c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800697c:	7c03      	ldrb	r3, [r0, #16]
 800697e:	2b01      	cmp	r3, #1
 8006980:	f000 8113 	beq.w	8006baa <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006984:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8006986:	2201      	movs	r2, #1
{
 8006988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800698c:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800698e:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006992:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006994:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006998:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800699c:	4e84      	ldr	r6, [pc, #528]	; (8006bb0 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800699e:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80069a0:	4d84      	ldr	r5, [pc, #528]	; (8006bb4 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80069a2:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80069a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80069b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b6:	f022 0203 	bic.w	r2, r2, #3
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80069bc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80069be:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80069c2:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80069c6:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80069c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ca:	ea06 0602 	and.w	r6, r6, r2
 80069ce:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80069d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80069d6:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80069da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80069dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069de:	ea02 0205 	and.w	r2, r2, r5
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80069e4:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80069e6:	ea47 0708 	orr.w	r7, r7, r8
 80069ea:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80069ec:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80069ee:	ea06 0605 	and.w	r6, r6, r5
 80069f2:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80069f4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80069f6:	ea45 050e 	orr.w	r5, r5, lr
 80069fa:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80069fc:	68dd      	ldr	r5, [r3, #12]
 80069fe:	f025 0503 	bic.w	r5, r5, #3
 8006a02:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	ea42 020c 	orr.w	r2, r2, ip
 8006a0a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a0c:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a0e:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a10:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a14:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a18:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a1a:	ea42 0206 	orr.w	r2, r2, r6
 8006a1e:	695d      	ldr	r5, [r3, #20]
 8006a20:	ea42 0207 	orr.w	r2, r2, r7
 8006a24:	ea42 0205 	orr.w	r2, r2, r5
 8006a28:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	f022 020f 	bic.w	r2, r2, #15
 8006a30:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	ea42 0200 	orr.w	r2, r2, r0
 8006a38:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006a3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006a3e:	f022 020e 	bic.w	r2, r2, #14
 8006a42:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006a46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006a4a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006a4e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006a52:	d107      	bne.n	8006a64 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006a54:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006a56:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006a58:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006a5c:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	432a      	orrs	r2, r5
 8006a62:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006a64:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a66:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006a68:	4a53      	ldr	r2, [pc, #332]	; (8006bb8 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006a6a:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006a6c:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006a6e:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006a72:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006a76:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006a78:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006a7a:	4f50      	ldr	r7, [pc, #320]	; (8006bbc <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006a7c:	4305      	orrs	r5, r0
 8006a7e:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8006a80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a82:	4010      	ands	r0, r2
 8006a84:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006a88:	484d      	ldr	r0, [pc, #308]	; (8006bc0 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006a8a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006a8e:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a96:	4017      	ands	r7, r2
 8006a98:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006a9a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8006a9c:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006aa0:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006aa4:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006aa6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006aa8:	4005      	ands	r5, r0
 8006aaa:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aae:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006ab2:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006aba:	4002      	ands	r2, r0
 8006abc:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006abe:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006ac0:	4a3b      	ldr	r2, [pc, #236]	; (8006bb0 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006ac2:	ea47 070e 	orr.w	r7, r7, lr
 8006ac6:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006ac8:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006aca:	4007      	ands	r7, r0

  return HAL_OK;
 8006acc:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006ace:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006ad0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006ad2:	ea45 050c 	orr.w	r5, r5, ip
 8006ad6:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006ad8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006ada:	402a      	ands	r2, r5
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006ade:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006ae0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006ae2:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006ae6:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006ae8:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006aec:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8006aee:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006af0:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8006af4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af8:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006afc:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8006b02:	699f      	ldr	r7, [r3, #24]
 8006b04:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8006b08:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006b0a:	699d      	ldr	r5, [r3, #24]
 8006b0c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006b10:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006b14:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8006b16:	699d      	ldr	r5, [r3, #24]
 8006b18:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006b1c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006b24:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006b28:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8006b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006b32:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006b34:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006b38:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006b3c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8006b3e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006b40:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8006b44:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006b46:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006b48:	ea45 050e 	orr.w	r5, r5, lr
 8006b4c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006b4e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006b50:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8006b54:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	ea42 020c 	orr.w	r2, r2, ip
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006b5e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006b60:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006b62:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006b66:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006b6a:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6e:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006b70:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006b7e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006b80:	ea45 050e 	orr.w	r5, r5, lr
 8006b84:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8006b86:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006b88:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006b8c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8006b8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006b90:	ea41 010c 	orr.w	r1, r1, ip
 8006b94:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8006b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006b98:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006b9c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	433a      	orrs	r2, r7
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8006ba4:	7426      	strb	r6, [r4, #16]
}
 8006ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8006baa:	2002      	movs	r0, #2
}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	ffffc000 	.word	0xffffc000
 8006bb4:	ffffe000 	.word	0xffffe000
 8006bb8:	fffff000 	.word	0xfffff000
 8006bbc:	ffff8000 	.word	0xffff8000
 8006bc0:	fffffc00 	.word	0xfffffc00

08006bc4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bc4:	7c02      	ldrb	r2, [r0, #16]
 8006bc6:	2a01      	cmp	r2, #1
 8006bc8:	d00e      	beq.n	8006be8 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006bca:	6802      	ldr	r2, [r0, #0]
 8006bcc:	4603      	mov	r3, r0
{
 8006bce:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006bd0:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bd2:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006bd4:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8006bd8:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006bda:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006bdc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006bde:	4321      	orrs	r1, r4
 8006be0:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8006be2:	741d      	strb	r5, [r3, #16]
}
 8006be4:	bc30      	pop	{r4, r5}
 8006be6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006be8:	2002      	movs	r0, #2
}
 8006bea:	4770      	bx	lr

08006bec <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bec:	7c03      	ldrb	r3, [r0, #16]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d021      	beq.n	8006c36 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006bf2:	6803      	ldr	r3, [r0, #0]
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006bf8:	4608      	mov	r0, r1
{
 8006bfa:	b410      	push	{r4}
 8006bfc:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8006bfe:	9100      	str	r1, [sp, #0]
 8006c00:	685c      	ldr	r4, [r3, #4]
 8006c02:	f044 0401 	orr.w	r4, r4, #1
 8006c06:	605c      	str	r4, [r3, #4]
 8006c08:	685c      	ldr	r4, [r3, #4]
 8006c0a:	f004 0401 	and.w	r4, r4, #1
 8006c0e:	9400      	str	r4, [sp, #0]
 8006c10:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c12:	9101      	str	r1, [sp, #4]
 8006c14:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8006c18:	f044 0408 	orr.w	r4, r4, #8
 8006c1c:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8006c20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8006c24:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	9b01      	ldr	r3, [sp, #4]
}
 8006c2e:	b003      	add	sp, #12
 8006c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c34:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c36:	2002      	movs	r0, #2
}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop

08006c3c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c3e:	7c05      	ldrb	r5, [r0, #16]
{
 8006c40:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006c42:	2d01      	cmp	r5, #1
 8006c44:	d00a      	beq.n	8006c5c <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006c46:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8006c48:	2501      	movs	r5, #1
 8006c4a:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006c4c:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8006c4e:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006c50:	f7ff fd38 	bl	80066c4 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c54:	2300      	movs	r3, #0
 8006c56:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8006c5c:	2002      	movs	r0, #2
}
 8006c5e:	b002      	add	sp, #8
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
 8006c62:	bf00      	nop

08006c64 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c6a:	7c03      	ldrb	r3, [r0, #16]
{
 8006c6c:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d05e      	beq.n	8006d30 <HAL_DSI_LongWrite+0xcc>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4607      	mov	r7, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	4692      	mov	sl, r2
 8006c7a:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c7c:	f7fe fe78 	bl	8005970 <HAL_GetTick>
 8006c80:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006c82:	e005      	b.n	8006c90 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006c84:	f7fe fe74 	bl	8005970 <HAL_GetTick>
 8006c88:	1b40      	subs	r0, r0, r5
 8006c8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006c8e:	d84b      	bhi.n	8006d28 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8006c94:	f014 0401 	ands.w	r4, r4, #1
 8006c98:	d0f4      	beq.n	8006c84 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	2803      	cmp	r0, #3
 8006c9e:	bf28      	it	cs
 8006ca0:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8006ca2:	f1b8 0f00 	cmp.w	r8, #0
 8006ca6:	d046      	beq.n	8006d36 <HAL_DSI_LongWrite+0xd2>
 8006ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006caa:	1e5c      	subs	r4, r3, #1
 8006cac:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8006cb4:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8006cb6:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006cb8:	fa02 f205 	lsl.w	r2, r2, r5
 8006cbc:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8006cc0:	d3f5      	bcc.n	8006cae <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8006cc4:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8006cc6:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006cc8:	ebb8 0000 	subs.w	r0, r8, r0
 8006ccc:	d017      	beq.n	8006cfe <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006cce:	2804      	cmp	r0, #4
 8006cd0:	4684      	mov	ip, r0
 8006cd2:	f04f 0500 	mov.w	r5, #0
 8006cd6:	bf28      	it	cs
 8006cd8:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8006cdc:	462b      	mov	r3, r5
 8006cde:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006ce2:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006ce6:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8006ce8:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cea:	f105 0508 	add.w	r5, r5, #8
 8006cee:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8006cf2:	d1f6      	bne.n	8006ce2 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8006cf4:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8006cf8:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8006cfa:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006cfc:	d1e7      	bne.n	8006cce <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006cfe:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d02:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d06:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d08:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8006d0c:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d0e:	46c8      	mov	r8, r9
 8006d10:	fa1f f989 	uxth.w	r9, r9
 8006d14:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8006d18:	ea43 0309 	orr.w	r3, r3, r9
 8006d1c:	ea43 0308 	orr.w	r3, r3, r8
 8006d20:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006d22:	743a      	strb	r2, [r7, #16]
}
 8006d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8006d28:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006d2a:	743c      	strb	r4, [r7, #16]
}
 8006d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8006d30:	2002      	movs	r0, #2
}
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 8006d36:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006d38:	e7e1      	b.n	8006cfe <HAL_DSI_LongWrite+0x9a>
 8006d3a:	bf00      	nop

08006d3c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d42:	7c02      	ldrb	r2, [r0, #16]
{
 8006d44:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006d46:	2a01      	cmp	r2, #1
{
 8006d48:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 8006d4a:	d070      	beq.n	8006e2e <HAL_DSI_Read+0xf2>
 8006d4c:	461e      	mov	r6, r3
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4607      	mov	r7, r0
 8006d52:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006d54:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006d56:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006d58:	d80d      	bhi.n	8006d76 <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006d5a:	2c06      	cmp	r4, #6
 8006d5c:	d017      	beq.n	8006d8e <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006d5e:	2c04      	cmp	r4, #4
 8006d60:	d04f      	beq.n	8006e02 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006d62:	2c14      	cmp	r4, #20
 8006d64:	d067      	beq.n	8006e36 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006d66:	2c24      	cmp	r4, #36	; 0x24
 8006d68:	d052      	beq.n	8006e10 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 8006d6a:	2300      	movs	r3, #0
      return HAL_ERROR;
 8006d6c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006d6e:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006d70:	b002      	add	sp, #8
 8006d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006d76:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8006d7a:	b2f3      	uxtb	r3, r6
 8006d7c:	2237      	movs	r2, #55	; 0x37
 8006d7e:	f8cd c000 	str.w	ip, [sp]
 8006d82:	f7ff fc9f 	bl	80066c4 <DSI_ShortWrite>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d1ef      	bne.n	8006d6a <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006d8a:	2c06      	cmp	r4, #6
 8006d8c:	d1e7      	bne.n	8006d5e <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006d90:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8006d98:	f043 0306 	orr.w	r3, r3, #6
 8006d9c:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006d9e:	f7fe fde7 	bl	8005970 <HAL_GetTick>
 8006da2:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8006da4:	e006      	b.n	8006db4 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006da6:	f7fe fde3 	bl	8005970 <HAL_GetTick>
 8006daa:	eba0 0008 	sub.w	r0, r0, r8
 8006dae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006db2:	d81b      	bhi.n	8006dec <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	dd1f      	ble.n	8006df8 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8006dbc:	f011 0110 	ands.w	r1, r1, #16
 8006dc0:	d1f1      	bne.n	8006da6 <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006dc2:	2e04      	cmp	r6, #4
 8006dc4:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8006dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006dc8:	bf28      	it	cs
 8006dca:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8006dcc:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006dce:	fa22 f401 	lsr.w	r4, r2, r1
 8006dd2:	3108      	adds	r1, #8
 8006dd4:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8006dd8:	429d      	cmp	r5, r3
 8006dda:	d1f8      	bne.n	8006dce <HAL_DSI_Read+0x92>
 8006ddc:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006dde:	f7fe fdc7 	bl	8005970 <HAL_GetTick>
 8006de2:	eba0 0008 	sub.w	r0, r0, r8
 8006de6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006dea:	d9e3      	bls.n	8006db4 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8006dec:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006dee:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006df0:	743b      	strb	r3, [r7, #16]
}
 8006df2:	b002      	add	sp, #8
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8006df8:	2000      	movs	r0, #0
 8006dfa:	7438      	strb	r0, [r7, #16]
}
 8006dfc:	b002      	add	sp, #8
 8006dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e02:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006e06:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e08:	f043 0304 	orr.w	r3, r3, #4
 8006e0c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006e0e:	e7c6      	b.n	8006d9e <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e12:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e18:	7852      	ldrb	r2, [r2, #1]
 8006e1a:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e20:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e26:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006e2a:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006e2c:	e7b7      	b.n	8006d9e <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8006e2e:	2002      	movs	r0, #2
}
 8006e30:	b002      	add	sp, #8
 8006e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e38:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e3c:	7811      	ldrb	r1, [r2, #0]
 8006e3e:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e44:	f043 0314 	orr.w	r3, r3, #20
 8006e48:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006e4a:	e7a8      	b.n	8006d9e <HAL_DSI_Read+0x62>

08006e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e50:	680e      	ldr	r6, [r1, #0]
{
 8006e52:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	f000 80d3 	beq.w	8007000 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8006e5a:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5c:	f8df a220 	ldr.w	sl, [pc, #544]	; 8007080 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e60:	f8df b220 	ldr.w	fp, [pc, #544]	; 8007084 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e64:	46b1      	mov	r9, r6
 8006e66:	e020      	b.n	8006eaa <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8006e68:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e6a:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e6e:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e72:	f04f 0e0f 	mov.w	lr, #15
 8006e76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e7a:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e80:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8006e84:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e86:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e8a:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e8e:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e92:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006e96:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8006e98:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e9a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e9c:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8006e9e:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8006ea0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ea2:	fa39 f203 	lsrs.w	r2, r9, r3
 8006ea6:	f000 80ab 	beq.w	8007000 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006eaa:	2201      	movs	r2, #1
 8006eac:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8006eae:	ea12 0809 	ands.w	r8, r2, r9
 8006eb2:	d0f5      	beq.n	8006ea0 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006eb4:	684c      	ldr	r4, [r1, #4]
 8006eb6:	005f      	lsls	r7, r3, #1
 8006eb8:	f024 0c10 	bic.w	ip, r4, #16
 8006ebc:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ec0:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ec2:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ec6:	f200 809e 	bhi.w	8007006 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006eca:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8006ece:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ed2:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ed4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ed6:	ea2e 0e05 	bic.w	lr, lr, r5
 8006eda:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006edc:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ede:	68ce      	ldr	r6, [r1, #12]
 8006ee0:	40be      	lsls	r6, r7
 8006ee2:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ee6:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8006ee8:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8006eec:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ef0:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ef4:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8006ef6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8006ef8:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006efa:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006efe:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f00:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f04:	fa02 f207 	lsl.w	r2, r2, r7
 8006f08:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8006f0c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f0e:	d0ab      	beq.n	8006e68 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8006f10:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f12:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f16:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f18:	fa02 f707 	lsl.w	r7, r2, r7
 8006f1c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8006f1e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f20:	00e6      	lsls	r6, r4, #3
 8006f22:	d5bd      	bpl.n	8006ea0 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f24:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8006f28:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f2c:	f003 0203 	and.w	r2, r3, #3
 8006f30:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f32:	f046 0602 	orr.w	r6, r6, #2
 8006f36:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f3a:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f3c:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8006f40:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006f44:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f48:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f4c:	f006 0602 	and.w	r6, r6, #2
 8006f50:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f52:	4e42      	ldr	r6, [pc, #264]	; (800705c <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f54:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f56:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f58:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f5a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f5e:	d020      	beq.n	8006fa2 <HAL_GPIO_Init+0x156>
 8006f60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006f64:	42b0      	cmp	r0, r6
 8006f66:	d056      	beq.n	8007016 <HAL_GPIO_Init+0x1ca>
 8006f68:	4e3d      	ldr	r6, [pc, #244]	; (8007060 <HAL_GPIO_Init+0x214>)
 8006f6a:	42b0      	cmp	r0, r6
 8006f6c:	d058      	beq.n	8007020 <HAL_GPIO_Init+0x1d4>
 8006f6e:	4e3d      	ldr	r6, [pc, #244]	; (8007064 <HAL_GPIO_Init+0x218>)
 8006f70:	42b0      	cmp	r0, r6
 8006f72:	d04b      	beq.n	800700c <HAL_GPIO_Init+0x1c0>
 8006f74:	4e3c      	ldr	r6, [pc, #240]	; (8007068 <HAL_GPIO_Init+0x21c>)
 8006f76:	42b0      	cmp	r0, r6
 8006f78:	d05c      	beq.n	8007034 <HAL_GPIO_Init+0x1e8>
 8006f7a:	4e3c      	ldr	r6, [pc, #240]	; (800706c <HAL_GPIO_Init+0x220>)
 8006f7c:	42b0      	cmp	r0, r6
 8006f7e:	d05e      	beq.n	800703e <HAL_GPIO_Init+0x1f2>
 8006f80:	4e3b      	ldr	r6, [pc, #236]	; (8007070 <HAL_GPIO_Init+0x224>)
 8006f82:	42b0      	cmp	r0, r6
 8006f84:	d051      	beq.n	800702a <HAL_GPIO_Init+0x1de>
 8006f86:	4e3b      	ldr	r6, [pc, #236]	; (8007074 <HAL_GPIO_Init+0x228>)
 8006f88:	42b0      	cmp	r0, r6
 8006f8a:	d05d      	beq.n	8007048 <HAL_GPIO_Init+0x1fc>
 8006f8c:	4e3a      	ldr	r6, [pc, #232]	; (8007078 <HAL_GPIO_Init+0x22c>)
 8006f8e:	42b0      	cmp	r0, r6
 8006f90:	d05f      	beq.n	8007052 <HAL_GPIO_Init+0x206>
 8006f92:	4e3a      	ldr	r6, [pc, #232]	; (800707c <HAL_GPIO_Init+0x230>)
 8006f94:	42b0      	cmp	r0, r6
 8006f96:	bf0c      	ite	eq
 8006f98:	2609      	moveq	r6, #9
 8006f9a:	260a      	movne	r6, #10
 8006f9c:	fa06 f202 	lsl.w	r2, r6, r2
 8006fa0:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fa2:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006fa4:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8006fa8:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fac:	03e5      	lsls	r5, r4, #15
    position++;
 8006fae:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8006fb2:	bf54      	ite	pl
 8006fb4:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8006fb6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006fba:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fbe:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8006fc0:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8006fc8:	bf54      	ite	pl
 8006fca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006fcc:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006fd0:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8006fd2:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006fd6:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8006fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8006fdc:	bf54      	ite	pl
 8006fde:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006fe0:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006fe4:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8006fe6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8006fea:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8006fec:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8006fee:	bf54      	ite	pl
 8006ff0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8006ff2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8006ff6:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ff8:	fa39 f203 	lsrs.w	r2, r9, r3
 8006ffc:	f47f af55 	bne.w	8006eaa <HAL_GPIO_Init+0x5e>
  }
}
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	40bd      	lsls	r5, r7
 8007008:	43ed      	mvns	r5, r5
 800700a:	e775      	b.n	8006ef8 <HAL_GPIO_Init+0xac>
 800700c:	2603      	movs	r6, #3
 800700e:	fa06 f202 	lsl.w	r2, r6, r2
 8007012:	4315      	orrs	r5, r2
 8007014:	e7c5      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 8007016:	2601      	movs	r6, #1
 8007018:	fa06 f202 	lsl.w	r2, r6, r2
 800701c:	4315      	orrs	r5, r2
 800701e:	e7c0      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 8007020:	2602      	movs	r6, #2
 8007022:	fa06 f202 	lsl.w	r2, r6, r2
 8007026:	4315      	orrs	r5, r2
 8007028:	e7bb      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 800702a:	2606      	movs	r6, #6
 800702c:	fa06 f202 	lsl.w	r2, r6, r2
 8007030:	4315      	orrs	r5, r2
 8007032:	e7b6      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 8007034:	2604      	movs	r6, #4
 8007036:	fa06 f202 	lsl.w	r2, r6, r2
 800703a:	4315      	orrs	r5, r2
 800703c:	e7b1      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 800703e:	2605      	movs	r6, #5
 8007040:	fa06 f202 	lsl.w	r2, r6, r2
 8007044:	4315      	orrs	r5, r2
 8007046:	e7ac      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 8007048:	2607      	movs	r6, #7
 800704a:	fa06 f202 	lsl.w	r2, r6, r2
 800704e:	4315      	orrs	r5, r2
 8007050:	e7a7      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 8007052:	2608      	movs	r6, #8
 8007054:	fa06 f202 	lsl.w	r2, r6, r2
 8007058:	4315      	orrs	r5, r2
 800705a:	e7a2      	b.n	8006fa2 <HAL_GPIO_Init+0x156>
 800705c:	58020000 	.word	0x58020000
 8007060:	58020800 	.word	0x58020800
 8007064:	58020c00 	.word	0x58020c00
 8007068:	58021000 	.word	0x58021000
 800706c:	58021400 	.word	0x58021400
 8007070:	58021800 	.word	0x58021800
 8007074:	58021c00 	.word	0x58021c00
 8007078:	58022000 	.word	0x58022000
 800707c:	58022400 	.word	0x58022400
 8007080:	58024400 	.word	0x58024400
 8007084:	58000080 	.word	0x58000080

08007088 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007088:	6903      	ldr	r3, [r0, #16]
 800708a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800708c:	bf14      	ite	ne
 800708e:	2001      	movne	r0, #1
 8007090:	2000      	moveq	r0, #0
 8007092:	4770      	bx	lr

08007094 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007094:	b902      	cbnz	r2, 8007098 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007096:	0409      	lsls	r1, r1, #16
 8007098:	6181      	str	r1, [r0, #24]
  }
}
 800709a:	4770      	bx	lr

0800709c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800709c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800709e:	ea01 0203 	and.w	r2, r1, r3
 80070a2:	ea21 0103 	bic.w	r1, r1, r3
 80070a6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070aa:	6181      	str	r1, [r0, #24]
}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop

080070b0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80070b0:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <HAL_HSEM_FastTake+0x14>)
 80070b2:	3020      	adds	r0, #32
 80070b4:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <HAL_HSEM_FastTake+0x18>)
 80070b6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80070ba:	1ac0      	subs	r0, r0, r3
 80070bc:	bf18      	it	ne
 80070be:	2001      	movne	r0, #1
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	58026400 	.word	0x58026400
 80070c8:	80000300 	.word	0x80000300

080070cc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80070cc:	4b02      	ldr	r3, [pc, #8]	; (80070d8 <HAL_HSEM_Release+0xc>)
 80070ce:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80070d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80070d6:	4770      	bx	lr
 80070d8:	58026400 	.word	0x58026400

080070dc <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80070dc:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80070de:	f04f 0c00 	mov.w	ip, #0
{
 80070e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80070e6:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070e8:	6804      	ldr	r4, [r0, #0]
 80070ea:	6848      	ldr	r0, [r1, #4]
{
 80070ec:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80070ee:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070f0:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070f2:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80070f6:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070fa:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070fe:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007100:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007104:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007108:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800710a:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800710e:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007110:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007112:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007114:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007118:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800711c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007120:	4f38      	ldr	r7, [pc, #224]	; (8007204 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007122:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007124:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007128:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800712c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800712e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007132:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007134:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007138:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800713c:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800713e:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007142:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007144:	68e5      	ldr	r5, [r4, #12]
 8007146:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800714a:	444d      	add	r5, r9
 800714c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007150:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007152:	691d      	ldr	r5, [r3, #16]
 8007154:	f025 0507 	bic.w	r5, r5, #7
 8007158:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800715a:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800715e:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007160:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007164:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007168:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800716c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007170:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007174:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8007178:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800717c:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800717e:	695d      	ldr	r5, [r3, #20]
 8007180:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007184:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007186:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800718a:	69dd      	ldr	r5, [r3, #28]
 800718c:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800718e:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007190:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007192:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007196:	4305      	orrs	r5, r0
 8007198:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800719a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800719c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80071a0:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80071a2:	f1be 0f00 	cmp.w	lr, #0
 80071a6:	d00b      	beq.n	80071c0 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80071a8:	f1be 0f01 	cmp.w	lr, #1
 80071ac:	d026      	beq.n	80071fc <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071ae:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071b2:	2d02      	cmp	r5, #2
 80071b4:	d902      	bls.n	80071bc <LTDC_SetConfig+0xe0>
 80071b6:	f1be 0f07 	cmp.w	lr, #7
 80071ba:	d121      	bne.n	8007200 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80071bc:	2702      	movs	r7, #2
 80071be:	e000      	b.n	80071c2 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 80071c0:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071c2:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80071c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071c6:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80071c8:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071cc:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80071d0:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071d4:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80071d6:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071d8:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80071dc:	490a      	ldr	r1, [pc, #40]	; (8007208 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80071e2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80071e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071e6:	4001      	ands	r1, r0
 80071e8:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80071ea:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80071ee:	58a3      	ldr	r3, [r4, r2]
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	50a3      	str	r3, [r4, r2]
}
 80071f6:	b003      	add	sp, #12
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 80071fc:	2703      	movs	r7, #3
 80071fe:	e7e0      	b.n	80071c2 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8007200:	2701      	movs	r7, #1
 8007202:	e7de      	b.n	80071c2 <LTDC_SetConfig+0xe6>
 8007204:	fffff8f8 	.word	0xfffff8f8
 8007208:	fffff800 	.word	0xfffff800

0800720c <HAL_LTDC_MspInit>:
}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007210:	2800      	cmp	r0, #0
 8007212:	d06d      	beq.n	80072f0 <HAL_LTDC_Init+0xe0>
{
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007216:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800721a:	4604      	mov	r4, r0
 800721c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007220:	2b00      	cmp	r3, #0
 8007222:	d060      	beq.n	80072e6 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007224:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007226:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007228:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800722a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800722c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007230:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007232:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007234:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007238:	e9d4 3200 	ldrd	r3, r2, [r4]
 800723c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800723e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007240:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007242:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007246:	4e2b      	ldr	r6, [pc, #172]	; (80072f4 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007248:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800724a:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800724c:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800724e:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007250:	4302      	orrs	r2, r0
 8007252:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	4032      	ands	r2, r6
 8007258:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800725a:	6898      	ldr	r0, [r3, #8]
 800725c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007260:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007262:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007266:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800726a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800726c:	68d8      	ldr	r0, [r3, #12]
 800726e:	4030      	ands	r0, r6
 8007270:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007278:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800727a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800727e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007282:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	4032      	ands	r2, r6
 8007288:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800728a:	6918      	ldr	r0, [r3, #16]
 800728c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007290:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007292:	ea40 000c 	orr.w	r0, r0, ip
 8007296:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007298:	6958      	ldr	r0, [r3, #20]
 800729a:	4006      	ands	r6, r0
 800729c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80072a2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80072a6:	4302      	orrs	r2, r0
 80072a8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072ac:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072b0:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072b4:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072b8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072bc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80072c0:	4302      	orrs	r2, r0
  return HAL_OK;
 80072c2:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072c4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80072c8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80072ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072d0:	f042 0206 	orr.w	r2, r2, #6
 80072d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	432a      	orrs	r2, r5
 80072da:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80072dc:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80072e0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 80072e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80072e6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80072ea:	f7ff ff8f 	bl	800720c <HAL_LTDC_MspInit>
 80072ee:	e799      	b.n	8007224 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80072f0:	2001      	movs	r0, #1
}
 80072f2:	4770      	bx	lr
 80072f4:	f000f800 	.word	0xf000f800

080072f8 <HAL_LTDC_ErrorCallback>:
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop

080072fc <HAL_LTDC_ReloadEventCallback>:
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop

08007300 <HAL_LTDC_IRQHandler>:
{
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007302:	6803      	ldr	r3, [r0, #0]
{
 8007304:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007306:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007308:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800730a:	0769      	lsls	r1, r5, #29
 800730c:	d501      	bpl.n	8007312 <HAL_LTDC_IRQHandler+0x12>
 800730e:	0772      	lsls	r2, r6, #29
 8007310:	d41d      	bmi.n	800734e <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007312:	07ab      	lsls	r3, r5, #30
 8007314:	d501      	bpl.n	800731a <HAL_LTDC_IRQHandler+0x1a>
 8007316:	07b7      	lsls	r7, r6, #30
 8007318:	d42d      	bmi.n	8007376 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800731a:	07e8      	lsls	r0, r5, #31
 800731c:	d501      	bpl.n	8007322 <HAL_LTDC_IRQHandler+0x22>
 800731e:	07f1      	lsls	r1, r6, #31
 8007320:	d440      	bmi.n	80073a4 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007322:	072a      	lsls	r2, r5, #28
 8007324:	d501      	bpl.n	800732a <HAL_LTDC_IRQHandler+0x2a>
 8007326:	0733      	lsls	r3, r6, #28
 8007328:	d400      	bmi.n	800732c <HAL_LTDC_IRQHandler+0x2c>
}
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800732c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800732e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8007330:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8007332:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007336:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007338:	f022 0208 	bic.w	r2, r2, #8
 800733c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800733e:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007340:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007344:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007348:	f7ff ffd8 	bl	80072fc <HAL_LTDC_ReloadEventCallback>
}
 800734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800734e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007350:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8007352:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007354:	f022 0204 	bic.w	r2, r2, #4
 8007358:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800735a:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800735c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007360:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800736c:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007370:	f7ff ffc2 	bl	80072f8 <HAL_LTDC_ErrorCallback>
 8007374:	e7cd      	b.n	8007312 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007376:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007378:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800737a:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800737c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800737e:	f022 0202 	bic.w	r2, r2, #2
 8007382:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8007384:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007386:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8007388:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800738a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800738e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007392:	f043 0302 	orr.w	r3, r3, #2
 8007396:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800739a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800739e:	f7ff ffab 	bl	80072f8 <HAL_LTDC_ErrorCallback>
 80073a2:	e7ba      	b.n	800731a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073a4:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80073a6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80073a8:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80073aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80073b4:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80073b6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80073ba:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80073be:	f7fc fd2b 	bl	8003e18 <HAL_LTDC_LineEventCallback>
 80073c2:	e7ae      	b.n	8007322 <HAL_LTDC_IRQHandler+0x22>

080073c4 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80073c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d028      	beq.n	800741e <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073cc:	2302      	movs	r3, #2
 80073ce:	4694      	mov	ip, r2
{
 80073d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073d4:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80073d6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073da:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073dc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073e0:	fb04 0402 	mla	r4, r4, r2, r0
 80073e4:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80073e6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073ea:	460f      	mov	r7, r1
 80073ec:	3438      	adds	r4, #56	; 0x38
 80073ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073fa:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80073fc:	4662      	mov	r2, ip
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007402:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007404:	f7ff fe6a 	bl	80070dc <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8007408:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800740a:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 800740c:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800740e:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007412:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007416:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 800741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800741e:	2002      	movs	r0, #2
}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007424:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8007428:	2a01      	cmp	r2, #1
 800742a:	d017      	beq.n	800745c <HAL_LTDC_ProgramLineEvent+0x38>
 800742c:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800742e:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007430:	681a      	ldr	r2, [r3, #0]
{
 8007432:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007434:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8007438:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800743a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 800743c:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 800743e:	4e08      	ldr	r6, [pc, #32]	; (8007460 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007440:	f020 0001 	bic.w	r0, r0, #1
 8007444:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 8007446:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8007448:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800744a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800744c:	4329      	orrs	r1, r5
 800744e:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007450:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007454:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8007458:	bc70      	pop	{r4, r5, r6}
 800745a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800745c:	2002      	movs	r0, #2
}
 800745e:	4770      	bx	lr
 8007460:	50001000 	.word	0x50001000

08007464 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007468:	f7fe fa82 	bl	8005970 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800746c:	2c00      	cmp	r4, #0
 800746e:	d05a      	beq.n	8007526 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007470:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007472:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007474:	2100      	movs	r1, #0
 8007476:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007478:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800747c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007488:	e005      	b.n	8007496 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800748a:	f7fe fa71 	bl	8005970 <HAL_GetTick>
 800748e:	1b43      	subs	r3, r0, r5
 8007490:	2b05      	cmp	r3, #5
 8007492:	d841      	bhi.n	8007518 <HAL_MDMA_Init+0xb4>
 8007494:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	07d2      	lsls	r2, r2, #31
 800749a:	d4f6      	bmi.n	800748a <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800749c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80074a0:	69e1      	ldr	r1, [r4, #28]
 80074a2:	4302      	orrs	r2, r0
 80074a4:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80074ac:	432a      	orrs	r2, r5
 80074ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80074b0:	4302      	orrs	r2, r0
 80074b2:	68a0      	ldr	r0, [r4, #8]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80074b8:	432a      	orrs	r2, r5
 80074ba:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80074bc:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80074be:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80074c0:	6920      	ldr	r0, [r4, #16]
 80074c2:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074c4:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80074c6:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074ca:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80074ce:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80074d0:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074d2:	d103      	bne.n	80074dc <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80074da:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80074dc:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80074de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80074e0:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 80074e2:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80074e4:	db30      	blt.n	8007548 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80074e6:	b292      	uxth	r2, r2
 80074e8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80074ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	db1c      	blt.n	800752a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80074f0:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80074f2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80074f6:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80074fa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80074fc:	d021      	beq.n	8007542 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80074fe:	b2c9      	uxtb	r1, r1
 8007500:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007502:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007504:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007508:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800750a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800750c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800750e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007512:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007516:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007518:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800751a:	2303      	movs	r3, #3
      return HAL_ERROR;
 800751c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800751e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007524:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007526:	2001      	movs	r0, #1
}
 8007528:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800752a:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800752c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800752e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007532:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007536:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007538:	6a18      	ldr	r0, [r3, #32]
 800753a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800753e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007540:	d1dd      	bne.n	80074fe <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8007542:	2200      	movs	r2, #0
 8007544:	629a      	str	r2, [r3, #40]	; 0x28
 8007546:	e7dc      	b.n	8007502 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007548:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800754a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800754c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007550:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007552:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007554:	621a      	str	r2, [r3, #32]
 8007556:	e7c8      	b.n	80074ea <HAL_MDMA_Init+0x86>

08007558 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007558:	b1f0      	cbz	r0, 8007598 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 800755a:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	4601      	mov	r1, r0
  return HAL_OK;
 8007560:	4618      	mov	r0, r3
{
 8007562:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8007564:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007566:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007568:	f024 0401 	bic.w	r4, r4, #1
 800756c:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800756e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8007570:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8007572:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007574:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007576:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007578:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800757a:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800757c:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800757e:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007580:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007582:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007584:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8007586:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 800758a:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 800758e:	664b      	str	r3, [r1, #100]	; 0x64
}
 8007590:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8007592:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8007596:	4770      	bx	lr
    return HAL_ERROR;
 8007598:	2001      	movs	r0, #1
}
 800759a:	4770      	bx	lr

0800759c <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_PWREx_ConfigSupply+0x74>)
 800759e:	68d3      	ldr	r3, [r2, #12]
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075a6:	68d3      	ldr	r3, [r2, #12]
{
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80075ac:	d005      	beq.n	80075ba <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80075b2:	1a18      	subs	r0, r3, r0
 80075b4:	bf18      	it	ne
 80075b6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80075b8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075be:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075c0:	4303      	orrs	r3, r0
 80075c2:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80075c4:	f7fe f9d4 	bl	8005970 <HAL_GetTick>
 80075c8:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075ca:	e005      	b.n	80075d8 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075cc:	f7fe f9d0 	bl	8005970 <HAL_GetTick>
 80075d0:	1b43      	subs	r3, r0, r5
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d819      	bhi.n	800760c <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075d8:	6873      	ldr	r3, [r6, #4]
 80075da:	049a      	lsls	r2, r3, #18
 80075dc:	d5f6      	bpl.n	80075cc <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80075de:	f1a4 031d 	sub.w	r3, r4, #29
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d905      	bls.n	80075f2 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80075e6:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80075ea:	2801      	cmp	r0, #1
 80075ec:	d901      	bls.n	80075f2 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80075ee:	2000      	movs	r0, #0
}
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80075f2:	f7fe f9bd 	bl	8005970 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80075f6:	4d06      	ldr	r5, [pc, #24]	; (8007610 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80075f8:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80075fa:	68eb      	ldr	r3, [r5, #12]
 80075fc:	03db      	lsls	r3, r3, #15
 80075fe:	d4f6      	bmi.n	80075ee <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007600:	f7fe f9b6 	bl	8005970 <HAL_GetTick>
 8007604:	1b00      	subs	r0, r0, r4
 8007606:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800760a:	d9f6      	bls.n	80075fa <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800760c:	2001      	movs	r0, #1
}
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	58024800 	.word	0x58024800

08007614 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007614:	2800      	cmp	r0, #0
 8007616:	f000 81f7 	beq.w	8007a08 <HAL_RCC_OscConfig+0x3f4>
{
 800761a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761c:	6803      	ldr	r3, [r0, #0]
 800761e:	4604      	mov	r4, r0
 8007620:	07d9      	lsls	r1, r3, #31
 8007622:	d52e      	bpl.n	8007682 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007624:	49b4      	ldr	r1, [pc, #720]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007626:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007628:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800762a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800762e:	2a10      	cmp	r2, #16
 8007630:	f000 812c 	beq.w	800788c <HAL_RCC_OscConfig+0x278>
 8007634:	2a18      	cmp	r2, #24
 8007636:	f000 8124 	beq.w	8007882 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007640:	f000 8167 	beq.w	8007912 <HAL_RCC_OscConfig+0x2fe>
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 817f 	beq.w	8007948 <HAL_RCC_OscConfig+0x334>
 800764a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800764e:	4baa      	ldr	r3, [pc, #680]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	f000 8278 	beq.w	8007b46 <HAL_RCC_OscConfig+0x532>
 8007656:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007662:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fe f984 	bl	8005970 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007668:	4ea3      	ldr	r6, [pc, #652]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 800766a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766c:	e005      	b.n	800767a <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800766e:	f7fe f97f 	bl	8005970 <HAL_GetTick>
 8007672:	1b40      	subs	r0, r0, r5
 8007674:	2864      	cmp	r0, #100	; 0x64
 8007676:	f200 8165 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800767a:	6833      	ldr	r3, [r6, #0]
 800767c:	039f      	lsls	r7, r3, #14
 800767e:	d5f6      	bpl.n	800766e <HAL_RCC_OscConfig+0x5a>
 8007680:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007682:	0799      	lsls	r1, r3, #30
 8007684:	d521      	bpl.n	80076ca <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007686:	4a9c      	ldr	r2, [pc, #624]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007688:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800768a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800768c:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007690:	f040 80a8 	bne.w	80077e4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007694:	4b98      	ldr	r3, [pc, #608]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	075b      	lsls	r3, r3, #29
 800769a:	d503      	bpl.n	80076a4 <HAL_RCC_OscConfig+0x90>
 800769c:	68e3      	ldr	r3, [r4, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80ed 	beq.w	800787e <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a4:	f7fe f97c 	bl	80059a0 <HAL_GetREVID>
 80076a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80076ac:	4298      	cmp	r0, r3
 80076ae:	f200 8189 	bhi.w	80079c4 <HAL_RCC_OscConfig+0x3b0>
 80076b2:	6922      	ldr	r2, [r4, #16]
 80076b4:	2a40      	cmp	r2, #64	; 0x40
 80076b6:	f000 824e 	beq.w	8007b56 <HAL_RCC_OscConfig+0x542>
 80076ba:	498f      	ldr	r1, [pc, #572]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076ca:	06d9      	lsls	r1, r3, #27
 80076cc:	d456      	bmi.n	800777c <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ce:	071d      	lsls	r5, r3, #28
 80076d0:	d517      	bpl.n	8007702 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076d2:	6963      	ldr	r3, [r4, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80b4 	beq.w	8007842 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076da:	4b87      	ldr	r3, [pc, #540]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 80076dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076de:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80076e6:	f7fe f943 	bl	8005970 <HAL_GetTick>
 80076ea:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ec:	e005      	b.n	80076fa <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ee:	f7fe f93f 	bl	8005970 <HAL_GetTick>
 80076f2:	1b40      	subs	r0, r0, r5
 80076f4:	2802      	cmp	r0, #2
 80076f6:	f200 8125 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076fa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80076fc:	0798      	lsls	r0, r3, #30
 80076fe:	d5f6      	bpl.n	80076ee <HAL_RCC_OscConfig+0xda>
 8007700:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007702:	069a      	lsls	r2, r3, #26
 8007704:	d517      	bpl.n	8007736 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007706:	69a3      	ldr	r3, [r4, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8134 	beq.w	8007976 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800770e:	4b7a      	ldr	r3, [pc, #488]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007710:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007712:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8007714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800771a:	f7fe f929 	bl	8005970 <HAL_GetTick>
 800771e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007720:	e005      	b.n	800772e <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007722:	f7fe f925 	bl	8005970 <HAL_GetTick>
 8007726:	1b40      	subs	r0, r0, r5
 8007728:	2802      	cmp	r0, #2
 800772a:	f200 810b 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800772e:	6833      	ldr	r3, [r6, #0]
 8007730:	049f      	lsls	r7, r3, #18
 8007732:	d5f6      	bpl.n	8007722 <HAL_RCC_OscConfig+0x10e>
 8007734:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007736:	0759      	lsls	r1, r3, #29
 8007738:	f100 80b2 	bmi.w	80078a0 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800773c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800773e:	b1d8      	cbz	r0, 8007778 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007740:	4b6d      	ldr	r3, [pc, #436]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007748:	2a18      	cmp	r2, #24
 800774a:	f000 81ce 	beq.w	8007aea <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007750:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007752:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007754:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007758:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800775a:	f000 8161 	beq.w	8007a20 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775e:	f7fe f907 	bl	8005970 <HAL_GetTick>
 8007762:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007764:	e005      	b.n	8007772 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007766:	f7fe f903 	bl	8005970 <HAL_GetTick>
 800776a:	1b00      	subs	r0, r0, r4
 800776c:	2802      	cmp	r0, #2
 800776e:	f200 80e9 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	d4f6      	bmi.n	8007766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007778:	2000      	movs	r0, #0
}
 800777a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800777c:	4a5e      	ldr	r2, [pc, #376]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 800777e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007780:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007782:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007786:	2b08      	cmp	r3, #8
 8007788:	d072      	beq.n	8007870 <HAL_RCC_OscConfig+0x25c>
 800778a:	2b18      	cmp	r3, #24
 800778c:	d06c      	beq.n	8007868 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800778e:	69e3      	ldr	r3, [r4, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8103 	beq.w	800799c <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8007796:	4b58      	ldr	r3, [pc, #352]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007798:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800779a:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 800779c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80077a2:	f7fe f8e5 	bl	8005970 <HAL_GetTick>
 80077a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077a8:	e005      	b.n	80077b6 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077aa:	f7fe f8e1 	bl	8005970 <HAL_GetTick>
 80077ae:	1b40      	subs	r0, r0, r5
 80077b0:	2802      	cmp	r0, #2
 80077b2:	f200 80c7 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077b6:	6833      	ldr	r3, [r6, #0]
 80077b8:	05db      	lsls	r3, r3, #23
 80077ba:	d5f6      	bpl.n	80077aa <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077bc:	f7fe f8f0 	bl	80059a0 <HAL_GetREVID>
 80077c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80077c4:	4298      	cmp	r0, r3
 80077c6:	f200 81e9 	bhi.w	8007b9c <HAL_RCC_OscConfig+0x588>
 80077ca:	6a22      	ldr	r2, [r4, #32]
 80077cc:	6873      	ldr	r3, [r6, #4]
 80077ce:	2a20      	cmp	r2, #32
 80077d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077d4:	bf0c      	ite	eq
 80077d6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80077da:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80077de:	6073      	str	r3, [r6, #4]
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	e774      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80077e4:	2b18      	cmp	r3, #24
 80077e6:	f000 810b 	beq.w	8007a00 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077ea:	68e2      	ldr	r2, [r4, #12]
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	f000 80f3 	beq.w	80079d8 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077f2:	4941      	ldr	r1, [pc, #260]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 80077f4:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f6:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077f8:	f023 0319 	bic.w	r3, r3, #25
 80077fc:	4313      	orrs	r3, r2
 80077fe:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8007800:	f7fe f8b6 	bl	8005970 <HAL_GetTick>
 8007804:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007806:	e005      	b.n	8007814 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007808:	f7fe f8b2 	bl	8005970 <HAL_GetTick>
 800780c:	1b40      	subs	r0, r0, r5
 800780e:	2802      	cmp	r0, #2
 8007810:	f200 8098 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	075f      	lsls	r7, r3, #29
 8007818:	d5f6      	bpl.n	8007808 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781a:	f7fe f8c1 	bl	80059a0 <HAL_GetREVID>
 800781e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007822:	4298      	cmp	r0, r3
 8007824:	f200 81c3 	bhi.w	8007bae <HAL_RCC_OscConfig+0x59a>
 8007828:	6922      	ldr	r2, [r4, #16]
 800782a:	6873      	ldr	r3, [r6, #4]
 800782c:	2a40      	cmp	r2, #64	; 0x40
 800782e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007832:	bf0c      	ite	eq
 8007834:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8007838:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800783c:	6073      	str	r3, [r6, #4]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	e743      	b.n	80076ca <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8007842:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007844:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007846:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800784e:	f7fe f88f 	bl	8005970 <HAL_GetTick>
 8007852:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007854:	e004      	b.n	8007860 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007856:	f7fe f88b 	bl	8005970 <HAL_GetTick>
 800785a:	1b40      	subs	r0, r0, r5
 800785c:	2802      	cmp	r0, #2
 800785e:	d871      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007860:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007862:	0799      	lsls	r1, r3, #30
 8007864:	d4f7      	bmi.n	8007856 <HAL_RCC_OscConfig+0x242>
 8007866:	e74b      	b.n	8007700 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007868:	f002 0203 	and.w	r2, r2, #3
 800786c:	2a01      	cmp	r2, #1
 800786e:	d18e      	bne.n	800778e <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007870:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	05da      	lsls	r2, r3, #23
 8007876:	d552      	bpl.n	800791e <HAL_RCC_OscConfig+0x30a>
 8007878:	69e3      	ldr	r3, [r4, #28]
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d04f      	beq.n	800791e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 800787e:	2001      	movs	r0, #1
}
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007882:	f001 0103 	and.w	r1, r1, #3
 8007886:	2902      	cmp	r1, #2
 8007888:	f47f aed7 	bne.w	800763a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800788c:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	0392      	lsls	r2, r2, #14
 8007892:	f57f aef6 	bpl.w	8007682 <HAL_RCC_OscConfig+0x6e>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	2a00      	cmp	r2, #0
 800789a:	f47f aef2 	bne.w	8007682 <HAL_RCC_OscConfig+0x6e>
 800789e:	e7ee      	b.n	800787e <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80078a0:	4b16      	ldr	r3, [pc, #88]	; (80078fc <HAL_RCC_OscConfig+0x2e8>)
 80078a2:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078a4:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80078a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80078ac:	f7fe f860 	bl	8005970 <HAL_GetTick>
 80078b0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078b2:	e004      	b.n	80078be <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078b4:	f7fe f85c 	bl	8005970 <HAL_GetTick>
 80078b8:	1b40      	subs	r0, r0, r5
 80078ba:	2864      	cmp	r0, #100	; 0x64
 80078bc:	d842      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078be:	6833      	ldr	r3, [r6, #0]
 80078c0:	05da      	lsls	r2, r3, #23
 80078c2:	d5f7      	bpl.n	80078b4 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078c4:	68a3      	ldr	r3, [r4, #8]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	f000 817a 	beq.w	8007bc0 <HAL_RCC_OscConfig+0x5ac>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 814b 	beq.w	8007b68 <HAL_RCC_OscConfig+0x554>
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
 80078d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078d8:	f000 8187 	beq.w	8007bea <HAL_RCC_OscConfig+0x5d6>
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	671a      	str	r2, [r3, #112]	; 0x70
 80078e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078e4:	f022 0204 	bic.w	r2, r2, #4
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80078ea:	f7fe f841 	bl	8005970 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ee:	4e02      	ldr	r6, [pc, #8]	; (80078f8 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078f0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80078f4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x2f6>
 80078f8:	58024400 	.word	0x58024400
 80078fc:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007900:	f7fe f836 	bl	8005970 <HAL_GetTick>
 8007904:	1b40      	subs	r0, r0, r5
 8007906:	42b8      	cmp	r0, r7
 8007908:	d81c      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800790a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d5f7      	bpl.n	8007900 <HAL_RCC_OscConfig+0x2ec>
 8007910:	e714      	b.n	800773c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007912:	4aae      	ldr	r2, [pc, #696]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007914:	6813      	ldr	r3, [r2, #0]
 8007916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800791c:	e6a2      	b.n	8007664 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800791e:	f7fe f83f 	bl	80059a0 <HAL_GetREVID>
 8007922:	f241 0303 	movw	r3, #4099	; 0x1003
 8007926:	4298      	cmp	r0, r3
 8007928:	d870      	bhi.n	8007a0c <HAL_RCC_OscConfig+0x3f8>
 800792a:	6a22      	ldr	r2, [r4, #32]
 800792c:	2a20      	cmp	r2, #32
 800792e:	f000 8153 	beq.w	8007bd8 <HAL_RCC_OscConfig+0x5c4>
 8007932:	49a6      	ldr	r1, [pc, #664]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007934:	684b      	ldr	r3, [r1, #4]
 8007936:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800793a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800793e:	604b      	str	r3, [r1, #4]
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	e6c4      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8007944:	2003      	movs	r0, #3
}
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007948:	4ba0      	ldr	r3, [pc, #640]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 800794a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800794c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800794e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800795a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800795c:	f7fe f808 	bl	8005970 <HAL_GetTick>
 8007960:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007962:	e004      	b.n	800796e <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007964:	f7fe f804 	bl	8005970 <HAL_GetTick>
 8007968:	1b40      	subs	r0, r0, r5
 800796a:	2864      	cmp	r0, #100	; 0x64
 800796c:	d8ea      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800796e:	6833      	ldr	r3, [r6, #0]
 8007970:	0398      	lsls	r0, r3, #14
 8007972:	d4f7      	bmi.n	8007964 <HAL_RCC_OscConfig+0x350>
 8007974:	e684      	b.n	8007680 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8007976:	4b95      	ldr	r3, [pc, #596]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007978:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800797a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 800797c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007980:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007982:	f7fd fff5 	bl	8005970 <HAL_GetTick>
 8007986:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007988:	e004      	b.n	8007994 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800798a:	f7fd fff1 	bl	8005970 <HAL_GetTick>
 800798e:	1b40      	subs	r0, r0, r5
 8007990:	2802      	cmp	r0, #2
 8007992:	d8d7      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	0498      	lsls	r0, r3, #18
 8007998:	d4f7      	bmi.n	800798a <HAL_RCC_OscConfig+0x376>
 800799a:	e6cb      	b.n	8007734 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 800799c:	4b8b      	ldr	r3, [pc, #556]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 800799e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079a0:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80079a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079a8:	f7fd ffe2 	bl	8005970 <HAL_GetTick>
 80079ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079ae:	e004      	b.n	80079ba <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80079b0:	f7fd ffde 	bl	8005970 <HAL_GetTick>
 80079b4:	1b40      	subs	r0, r0, r5
 80079b6:	2802      	cmp	r0, #2
 80079b8:	d8c4      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079ba:	6833      	ldr	r3, [r6, #0]
 80079bc:	05df      	lsls	r7, r3, #23
 80079be:	d4f7      	bmi.n	80079b0 <HAL_RCC_OscConfig+0x39c>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	e684      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c4:	4a81      	ldr	r2, [pc, #516]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	6853      	ldr	r3, [r2, #4]
 80079ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80079ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80079d2:	6053      	str	r3, [r2, #4]
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	e678      	b.n	80076ca <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 80079d8:	4b7c      	ldr	r3, [pc, #496]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 80079da:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079dc:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 80079de:	f022 0201 	bic.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079e4:	f7fd ffc4 	bl	8005970 <HAL_GetTick>
 80079e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079ea:	e004      	b.n	80079f6 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079ec:	f7fd ffc0 	bl	8005970 <HAL_GetTick>
 80079f0:	1b40      	subs	r0, r0, r5
 80079f2:	2802      	cmp	r0, #2
 80079f4:	d8a6      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079f6:	6833      	ldr	r3, [r6, #0]
 80079f8:	0758      	lsls	r0, r3, #29
 80079fa:	d4f7      	bmi.n	80079ec <HAL_RCC_OscConfig+0x3d8>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	e664      	b.n	80076ca <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a00:	0792      	lsls	r2, r2, #30
 8007a02:	f47f aef2 	bne.w	80077ea <HAL_RCC_OscConfig+0x1d6>
 8007a06:	e645      	b.n	8007694 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8007a08:	2001      	movs	r0, #1
}
 8007a0a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a0c:	4a6f      	ldr	r2, [pc, #444]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007a0e:	6a21      	ldr	r1, [r4, #32]
 8007a10:	68d3      	ldr	r3, [r2, #12]
 8007a12:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007a16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a1a:	60d3      	str	r3, [r2, #12]
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	e656      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8007a20:	f7fd ffa6 	bl	8005970 <HAL_GetTick>
 8007a24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a26:	e004      	b.n	8007a32 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a28:	f7fd ffa2 	bl	8005970 <HAL_GetTick>
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	2802      	cmp	r0, #2
 8007a30:	d888      	bhi.n	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	0199      	lsls	r1, r3, #6
 8007a36:	d4f7      	bmi.n	8007a28 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007a3a:	4b65      	ldr	r3, [pc, #404]	; (8007bd0 <HAL_RCC_OscConfig+0x5bc>)
 8007a3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007a3e:	4013      	ands	r3, r2
 8007a40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a42:	4964      	ldr	r1, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a44:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a46:	4e61      	ldr	r6, [pc, #388]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a48:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007a4c:	62ab      	str	r3, [r5, #40]	; 0x28
 8007a4e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007a50:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007a54:	3f01      	subs	r7, #1
 8007a56:	1e50      	subs	r0, r2, #1
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007a5c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	0400      	lsls	r0, r0, #16
 8007a64:	3a01      	subs	r2, #1
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007a6c:	0612      	lsls	r2, r2, #24
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007a74:	433b      	orrs	r3, r7
 8007a76:	4313      	orrs	r3, r2
 8007a78:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8007a7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a82:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007a84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a86:	4011      	ands	r1, r2
 8007a88:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007a8c:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007a90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a92:	f023 030c 	bic.w	r3, r3, #12
 8007a96:	4313      	orrs	r3, r2
 8007a98:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007a9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007a9e:	f023 0302 	bic.w	r3, r3, #2
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007aa6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aac:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ab6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007abc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007abe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007acc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007ace:	f7fd ff4f 	bl	8005970 <HAL_GetTick>
 8007ad2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ad4:	e005      	b.n	8007ae2 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ad6:	f7fd ff4b 	bl	8005970 <HAL_GetTick>
 8007ada:	1b00      	subs	r0, r0, r4
 8007adc:	2802      	cmp	r0, #2
 8007ade:	f63f af31 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ae2:	6833      	ldr	r3, [r6, #0]
 8007ae4:	019a      	lsls	r2, r3, #6
 8007ae6:	d5f6      	bpl.n	8007ad6 <HAL_RCC_OscConfig+0x4c2>
 8007ae8:	e646      	b.n	8007778 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aea:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007aee:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af0:	f43f ae43 	beq.w	800777a <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af4:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007afa:	428b      	cmp	r3, r1
 8007afc:	f47f aebf 	bne.w	800787e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b00:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	f47f aeb9 	bne.w	800787e <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b0e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8007b12:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b14:	429a      	cmp	r2, r3
 8007b16:	f47f aeb2 	bne.w	800787e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b1c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8007b20:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b22:	429a      	cmp	r2, r3
 8007b24:	f47f aeab 	bne.w	800787e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b2a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8007b2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b30:	429a      	cmp	r2, r3
 8007b32:	f47f aea4 	bne.w	800787e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007b38:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8007b3c:	3801      	subs	r0, #1
  return HAL_OK;
 8007b3e:	1a28      	subs	r0, r5, r0
 8007b40:	bf18      	it	ne
 8007b42:	2001      	movne	r0, #1
}
 8007b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e586      	b.n	8007664 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b56:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007b58:	6853      	ldr	r3, [r2, #4]
 8007b5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b62:	6053      	str	r3, [r2, #4]
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	e5b0      	b.n	80076ca <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b68:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b70:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	671a      	str	r2, [r3, #112]	; 0x70
 8007b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b7a:	f022 0204 	bic.w	r2, r2, #4
 8007b7e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007b80:	f7fd fef6 	bl	8005970 <HAL_GetTick>
 8007b84:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b86:	e005      	b.n	8007b94 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b88:	f7fd fef2 	bl	8005970 <HAL_GetTick>
 8007b8c:	1b40      	subs	r0, r0, r5
 8007b8e:	42b8      	cmp	r0, r7
 8007b90:	f63f aed8 	bhi.w	8007944 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b94:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007b96:	0798      	lsls	r0, r3, #30
 8007b98:	d4f6      	bmi.n	8007b88 <HAL_RCC_OscConfig+0x574>
 8007b9a:	e5cf      	b.n	800773c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b9c:	68f3      	ldr	r3, [r6, #12]
 8007b9e:	6a22      	ldr	r2, [r4, #32]
 8007ba0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007ba4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ba8:	60f3      	str	r3, [r6, #12]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	e58f      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bae:	6873      	ldr	r3, [r6, #4]
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007bb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bba:	6073      	str	r3, [r6, #4]
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	e584      	b.n	80076ca <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc0:	4a02      	ldr	r2, [pc, #8]	; (8007bcc <HAL_RCC_OscConfig+0x5b8>)
 8007bc2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bca:	e68e      	b.n	80078ea <HAL_RCC_OscConfig+0x2d6>
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	fffffc0c 	.word	0xfffffc0c
 8007bd4:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bd8:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <HAL_RCC_OscConfig+0x5e8>)
 8007bda:	6853      	ldr	r3, [r2, #4]
 8007bdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	e571      	b.n	80076ce <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bea:	f042 0204 	orr.w	r2, r2, #4
 8007bee:	671a      	str	r2, [r3, #112]	; 0x70
 8007bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	671a      	str	r2, [r3, #112]	; 0x70
 8007bf8:	e677      	b.n	80078ea <HAL_RCC_OscConfig+0x2d6>
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400

08007c00 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c00:	4a47      	ldr	r2, [pc, #284]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x120>)
 8007c02:	6913      	ldr	r3, [r2, #16]
 8007c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c08:	2b10      	cmp	r3, #16
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCC_GetSysClockFreq+0x16>
 8007c0c:	2b18      	cmp	r3, #24
 8007c0e:	d00d      	beq.n	8007c2c <HAL_RCC_GetSysClockFreq+0x2c>
 8007c10:	b11b      	cbz	r3, 8007c1a <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c12:	4844      	ldr	r0, [pc, #272]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x124>)
 8007c14:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c16:	4844      	ldr	r0, [pc, #272]	; (8007d28 <HAL_RCC_GetSysClockFreq+0x128>)
 8007c18:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c1a:	6813      	ldr	r3, [r2, #0]
 8007c1c:	0699      	lsls	r1, r3, #26
 8007c1e:	d54a      	bpl.n	8007cb6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c20:	6813      	ldr	r3, [r2, #0]
 8007c22:	4842      	ldr	r0, [pc, #264]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x12c>)
 8007c24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c28:	40d8      	lsrs	r0, r3
 8007c2a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8007c2e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c30:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007c34:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c38:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c3c:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8007c3e:	d038      	beq.n	8007cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c40:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c44:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c48:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c4c:	fb01 f105 	mul.w	r1, r1, r5
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	ee07 1a90 	vmov	s15, r1
 8007c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007c5a:	d002      	beq.n	8007c62 <HAL_RCC_GetSysClockFreq+0x62>
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d02c      	beq.n	8007cba <HAL_RCC_GetSysClockFreq+0xba>
 8007c60:	b393      	cbz	r3, 8007cc8 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c62:	ee07 0a90 	vmov	s15, r0
 8007c66:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007d30 <HAL_RCC_GetSysClockFreq+0x130>
 8007c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007c70:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007c74:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8007d34 <HAL_RCC_GetSysClockFreq+0x134>
 8007c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c88:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c8c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007c90:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c94:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x120>)
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007c9c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cae:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007cb2:	bc30      	pop	{r4, r5}
 8007cb4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007cb6:	481d      	ldr	r0, [pc, #116]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8007cb8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cba:	ee07 0a90 	vmov	s15, r0
 8007cbe:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8007d38 <HAL_RCC_GetSysClockFreq+0x138>
 8007cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cc6:	e7d2      	b.n	8007c6e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc8:	6813      	ldr	r3, [r2, #0]
 8007cca:	069b      	lsls	r3, r3, #26
 8007ccc:	d520      	bpl.n	8007d10 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cce:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cd0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cd4:	4915      	ldr	r1, [pc, #84]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cd6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cda:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ce4:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ce6:	eddf 4a13 	vldr	s9, [pc, #76]	; 8007d34 <HAL_RCC_GetSysClockFreq+0x134>
 8007cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cee:	ee06 1a10 	vmov	s12, r1
 8007cf2:	ee06 3a90 	vmov	s13, r3
 8007cf6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007cfa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007cfe:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8007d02:	eee7 6a24 	vfma.f32	s13, s14, s9
 8007d06:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007d0a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007d0e:	e7c1      	b.n	8007c94 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d10:	ee07 0a90 	vmov	s15, r0
 8007d14:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007d3c <HAL_RCC_GetSysClockFreq+0x13c>
 8007d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d1c:	e7a7      	b.n	8007c6e <HAL_RCC_GetSysClockFreq+0x6e>
 8007d1e:	bf00      	nop
 8007d20:	58024400 	.word	0x58024400
 8007d24:	003d0900 	.word	0x003d0900
 8007d28:	017d7840 	.word	0x017d7840
 8007d2c:	03d09000 	.word	0x03d09000
 8007d30:	4a742400 	.word	0x4a742400
 8007d34:	39000000 	.word	0x39000000
 8007d38:	4bbebc20 	.word	0x4bbebc20
 8007d3c:	4c742400 	.word	0x4c742400

08007d40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f000 810e 	beq.w	8007f62 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d46:	4a8d      	ldr	r2, [pc, #564]	; (8007f7c <HAL_RCC_ClockConfig+0x23c>)
 8007d48:	6813      	ldr	r3, [r2, #0]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	428b      	cmp	r3, r1
{
 8007d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d58:	d20c      	bcs.n	8007d74 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	f023 030f 	bic.w	r3, r3, #15
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d64:	6813      	ldr	r3, [r2, #0]
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	428b      	cmp	r3, r1
 8007d6c:	d002      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007d6e:	2001      	movs	r0, #1
}
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	075f      	lsls	r7, r3, #29
 8007d78:	d50b      	bpl.n	8007d92 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d7a:	4981      	ldr	r1, [pc, #516]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d7c:	6920      	ldr	r0, [r4, #16]
 8007d7e:	698a      	ldr	r2, [r1, #24]
 8007d80:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007d84:	4290      	cmp	r0, r2
 8007d86:	d904      	bls.n	8007d92 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d88:	698a      	ldr	r2, [r1, #24]
 8007d8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d8e:	4302      	orrs	r2, r0
 8007d90:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d92:	071e      	lsls	r6, r3, #28
 8007d94:	d50b      	bpl.n	8007dae <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d96:	497a      	ldr	r1, [pc, #488]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d98:	6960      	ldr	r0, [r4, #20]
 8007d9a:	69ca      	ldr	r2, [r1, #28]
 8007d9c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007da0:	4290      	cmp	r0, r2
 8007da2:	d904      	bls.n	8007dae <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007da4:	69ca      	ldr	r2, [r1, #28]
 8007da6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007daa:	4302      	orrs	r2, r0
 8007dac:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dae:	06d8      	lsls	r0, r3, #27
 8007db0:	d50b      	bpl.n	8007dca <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007db2:	4973      	ldr	r1, [pc, #460]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007db4:	69a0      	ldr	r0, [r4, #24]
 8007db6:	69ca      	ldr	r2, [r1, #28]
 8007db8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007dbc:	4290      	cmp	r0, r2
 8007dbe:	d904      	bls.n	8007dca <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dc0:	69ca      	ldr	r2, [r1, #28]
 8007dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dc6:	4302      	orrs	r2, r0
 8007dc8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dca:	0699      	lsls	r1, r3, #26
 8007dcc:	d50b      	bpl.n	8007de6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dce:	496c      	ldr	r1, [pc, #432]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007dd0:	69e0      	ldr	r0, [r4, #28]
 8007dd2:	6a0a      	ldr	r2, [r1, #32]
 8007dd4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007dd8:	4290      	cmp	r0, r2
 8007dda:	d904      	bls.n	8007de6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ddc:	6a0a      	ldr	r2, [r1, #32]
 8007dde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007de2:	4302      	orrs	r2, r0
 8007de4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de6:	079a      	lsls	r2, r3, #30
 8007de8:	f140 80ad 	bpl.w	8007f46 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007dec:	4864      	ldr	r0, [pc, #400]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007dee:	68e1      	ldr	r1, [r4, #12]
 8007df0:	6982      	ldr	r2, [r0, #24]
 8007df2:	f002 020f 	and.w	r2, r2, #15
 8007df6:	4291      	cmp	r1, r2
 8007df8:	d904      	bls.n	8007e04 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dfa:	6982      	ldr	r2, [r0, #24]
 8007dfc:	f022 020f 	bic.w	r2, r2, #15
 8007e00:	430a      	orrs	r2, r1
 8007e02:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e04:	07d8      	lsls	r0, r3, #31
 8007e06:	d531      	bpl.n	8007e6c <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e08:	4a5d      	ldr	r2, [pc, #372]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007e0a:	68a1      	ldr	r1, [r4, #8]
 8007e0c:	6993      	ldr	r3, [r2, #24]
 8007e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e12:	430b      	orrs	r3, r1
 8007e14:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e16:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e18:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e1a:	2902      	cmp	r1, #2
 8007e1c:	f000 80a3 	beq.w	8007f66 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e20:	2903      	cmp	r1, #3
 8007e22:	f000 809a 	beq.w	8007f5a <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e26:	2901      	cmp	r1, #1
 8007e28:	f000 80a3 	beq.w	8007f72 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e2c:	0758      	lsls	r0, r3, #29
 8007e2e:	d59e      	bpl.n	8007d6e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e30:	4a53      	ldr	r2, [pc, #332]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e32:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e36:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e38:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8007e42:	f7fd fd95 	bl	8005970 <HAL_GetTick>
 8007e46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e48:	e005      	b.n	8007e56 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e4a:	f7fd fd91 	bl	8005970 <HAL_GetTick>
 8007e4e:	1b80      	subs	r0, r0, r6
 8007e50:	4540      	cmp	r0, r8
 8007e52:	f200 808c 	bhi.w	8007f6e <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6862      	ldr	r2, [r4, #4]
 8007e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e5e:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007e62:	d1f2      	bne.n	8007e4a <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	0799      	lsls	r1, r3, #30
 8007e68:	d506      	bpl.n	8007e78 <HAL_RCC_ClockConfig+0x138>
 8007e6a:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e6c:	4844      	ldr	r0, [pc, #272]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007e6e:	6982      	ldr	r2, [r0, #24]
 8007e70:	f002 020f 	and.w	r2, r2, #15
 8007e74:	428a      	cmp	r2, r1
 8007e76:	d86a      	bhi.n	8007f4e <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e78:	4940      	ldr	r1, [pc, #256]	; (8007f7c <HAL_RCC_ClockConfig+0x23c>)
 8007e7a:	680a      	ldr	r2, [r1, #0]
 8007e7c:	f002 020f 	and.w	r2, r2, #15
 8007e80:	42aa      	cmp	r2, r5
 8007e82:	d90a      	bls.n	8007e9a <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e84:	680a      	ldr	r2, [r1, #0]
 8007e86:	f022 020f 	bic.w	r2, r2, #15
 8007e8a:	432a      	orrs	r2, r5
 8007e8c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8e:	680a      	ldr	r2, [r1, #0]
 8007e90:	f002 020f 	and.w	r2, r2, #15
 8007e94:	42aa      	cmp	r2, r5
 8007e96:	f47f af6a 	bne.w	8007d6e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e9a:	075a      	lsls	r2, r3, #29
 8007e9c:	d50b      	bpl.n	8007eb6 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e9e:	4938      	ldr	r1, [pc, #224]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007ea0:	6920      	ldr	r0, [r4, #16]
 8007ea2:	698a      	ldr	r2, [r1, #24]
 8007ea4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007ea8:	4290      	cmp	r0, r2
 8007eaa:	d204      	bcs.n	8007eb6 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007eac:	698a      	ldr	r2, [r1, #24]
 8007eae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007eb2:	4302      	orrs	r2, r0
 8007eb4:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb6:	071f      	lsls	r7, r3, #28
 8007eb8:	d50b      	bpl.n	8007ed2 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eba:	4931      	ldr	r1, [pc, #196]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007ebc:	6960      	ldr	r0, [r4, #20]
 8007ebe:	69ca      	ldr	r2, [r1, #28]
 8007ec0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007ec4:	4290      	cmp	r0, r2
 8007ec6:	d204      	bcs.n	8007ed2 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ec8:	69ca      	ldr	r2, [r1, #28]
 8007eca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ece:	4302      	orrs	r2, r0
 8007ed0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed2:	06de      	lsls	r6, r3, #27
 8007ed4:	d50b      	bpl.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ed6:	492a      	ldr	r1, [pc, #168]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007ed8:	69a0      	ldr	r0, [r4, #24]
 8007eda:	69ca      	ldr	r2, [r1, #28]
 8007edc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007ee0:	4290      	cmp	r0, r2
 8007ee2:	d204      	bcs.n	8007eee <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ee4:	69ca      	ldr	r2, [r1, #28]
 8007ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007eea:	4302      	orrs	r2, r0
 8007eec:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007eee:	069d      	lsls	r5, r3, #26
 8007ef0:	d50b      	bpl.n	8007f0a <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ef2:	4a23      	ldr	r2, [pc, #140]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007ef4:	69e1      	ldr	r1, [r4, #28]
 8007ef6:	6a13      	ldr	r3, [r2, #32]
 8007ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007efc:	4299      	cmp	r1, r3
 8007efe:	d204      	bcs.n	8007f0a <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f00:	6a13      	ldr	r3, [r2, #32]
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f0a:	f7ff fe79 	bl	8007c00 <HAL_RCC_GetSysClockFreq>
 8007f0e:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007f10:	4602      	mov	r2, r0
 8007f12:	481c      	ldr	r0, [pc, #112]	; (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007f14:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f16:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f18:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8007f1c:	4d1a      	ldr	r5, [pc, #104]	; (8007f88 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	4c1a      	ldr	r4, [pc, #104]	; (8007f8c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f24:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f26:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f28:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8007f2c:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f2e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8007f32:	4d17      	ldr	r5, [pc, #92]	; (8007f90 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f34:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f36:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8007f3a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f3c:	6023      	str	r3, [r4, #0]
}
 8007f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007f42:	f7fd bcb3 	b.w	80058ac <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f46:	07da      	lsls	r2, r3, #31
 8007f48:	f53f af5e 	bmi.w	8007e08 <HAL_RCC_ClockConfig+0xc8>
 8007f4c:	e794      	b.n	8007e78 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f4e:	6982      	ldr	r2, [r0, #24]
 8007f50:	f022 020f 	bic.w	r2, r2, #15
 8007f54:	4311      	orrs	r1, r2
 8007f56:	6181      	str	r1, [r0, #24]
 8007f58:	e78e      	b.n	8007e78 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f5a:	019f      	lsls	r7, r3, #6
 8007f5c:	f53f af68 	bmi.w	8007e30 <HAL_RCC_ClockConfig+0xf0>
 8007f60:	e705      	b.n	8007d6e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007f62:	2001      	movs	r0, #1
}
 8007f64:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f66:	039b      	lsls	r3, r3, #14
 8007f68:	f53f af62 	bmi.w	8007e30 <HAL_RCC_ClockConfig+0xf0>
 8007f6c:	e6ff      	b.n	8007d6e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8007f6e:	2003      	movs	r0, #3
 8007f70:	e6fe      	b.n	8007d70 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f72:	05de      	lsls	r6, r3, #23
 8007f74:	f53f af5c 	bmi.w	8007e30 <HAL_RCC_ClockConfig+0xf0>
 8007f78:	e6f9      	b.n	8007d6e <HAL_RCC_ClockConfig+0x2e>
 8007f7a:	bf00      	nop
 8007f7c:	52002000 	.word	0x52002000
 8007f80:	58024400 	.word	0x58024400
 8007f84:	08009898 	.word	0x08009898
 8007f88:	24001068 	.word	0x24001068
 8007f8c:	24000004 	.word	0x24000004
 8007f90:	24000000 	.word	0x24000000

08007f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f94:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f96:	f7ff fe33 	bl	8007c00 <HAL_RCC_GetSysClockFreq>
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f9c:	490b      	ldr	r1, [pc, #44]	; (8007fcc <HAL_RCC_GetHCLKFreq+0x38>)
 8007f9e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fa0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007fa2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fa6:	4c0a      	ldr	r4, [pc, #40]	; (8007fd0 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007fa8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fac:	4d09      	ldr	r5, [pc, #36]	; (8007fd4 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007fae:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fb0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007fb2:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fb6:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007fba:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fbe:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8007fc2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fc4:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	58024400 	.word	0x58024400
 8007fcc:	08009898 	.word	0x08009898
 8007fd0:	24000004 	.word	0x24000004
 8007fd4:	24000000 	.word	0x24000000

08007fd8 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fd8:	4a3b      	ldr	r2, [pc, #236]	; (80080c8 <RCCEx_PLL2_Config+0xf0>)
{
 8007fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d069      	beq.n	80080ba <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fe6:	6813      	ldr	r3, [r2, #0]
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fec:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8007fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ff2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007ff4:	f7fd fcbc 	bl	8005970 <HAL_GetTick>
 8007ff8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ffa:	e004      	b.n	8008006 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ffc:	f7fd fcb8 	bl	8005970 <HAL_GetTick>
 8008000:	1b43      	subs	r3, r0, r5
 8008002:	2b02      	cmp	r3, #2
 8008004:	d857      	bhi.n	80080b6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	011a      	lsls	r2, r3, #4
 800800a:	d4f7      	bmi.n	8007ffc <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800800c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800800e:	6832      	ldr	r2, [r6, #0]
 8008010:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008014:	492d      	ldr	r1, [pc, #180]	; (80080cc <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008016:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800801a:	62a3      	str	r3, [r4, #40]	; 0x28
 800801c:	6875      	ldr	r5, [r6, #4]
 800801e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008022:	3d01      	subs	r5, #1
 8008024:	1e50      	subs	r0, r2, #1
 8008026:	3b01      	subs	r3, #1
 8008028:	6932      	ldr	r2, [r6, #16]
 800802a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800802e:	025b      	lsls	r3, r3, #9
 8008030:	0400      	lsls	r0, r0, #16
 8008032:	3a01      	subs	r2, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800803a:	0612      	lsls	r2, r2, #24
 800803c:	4303      	orrs	r3, r0
 800803e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008042:	432b      	orrs	r3, r5
 8008044:	4313      	orrs	r3, r2
 8008046:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800804a:	6972      	ldr	r2, [r6, #20]
 800804c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008050:	4313      	orrs	r3, r2
 8008052:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008056:	69b2      	ldr	r2, [r6, #24]
 8008058:	f023 0320 	bic.w	r3, r3, #32
 800805c:	4313      	orrs	r3, r2
 800805e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008062:	f023 0310 	bic.w	r3, r3, #16
 8008066:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008068:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800806a:	69f3      	ldr	r3, [r6, #28]
 800806c:	4011      	ands	r1, r2
 800806e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008072:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008076:	f043 0310 	orr.w	r3, r3, #16
 800807a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800807c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800807e:	b1f7      	cbz	r7, 80080be <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008080:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008082:	bf0c      	ite	eq
 8008084:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008088:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800808c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800808e:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <RCCEx_PLL2_Config+0xf0>)
 8008090:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008092:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008094:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008098:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800809a:	f7fd fc69 	bl	8005970 <HAL_GetTick>
 800809e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080a0:	e004      	b.n	80080ac <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a2:	f7fd fc65 	bl	8005970 <HAL_GetTick>
 80080a6:	1b00      	subs	r0, r0, r4
 80080a8:	2802      	cmp	r0, #2
 80080aa:	d804      	bhi.n	80080b6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	d5f7      	bpl.n	80080a2 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80080b2:	2000      	movs	r0, #0
}
 80080b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80080b6:	2003      	movs	r0, #3
}
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80080ba:	2001      	movs	r0, #1
}
 80080bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080c4:	e7e3      	b.n	800808e <RCCEx_PLL2_Config+0xb6>
 80080c6:	bf00      	nop
 80080c8:	58024400 	.word	0x58024400
 80080cc:	ffff0007 	.word	0xffff0007

080080d0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080d0:	4a3b      	ldr	r2, [pc, #236]	; (80081c0 <RCCEx_PLL3_Config+0xf0>)
{
 80080d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d069      	beq.n	80081b2 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	4606      	mov	r6, r0
 80080e2:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080e4:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80080e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80080ec:	f7fd fc40 	bl	8005970 <HAL_GetTick>
 80080f0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080f2:	e004      	b.n	80080fe <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080f4:	f7fd fc3c 	bl	8005970 <HAL_GetTick>
 80080f8:	1b43      	subs	r3, r0, r5
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d857      	bhi.n	80081ae <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	009a      	lsls	r2, r3, #2
 8008102:	d4f7      	bmi.n	80080f4 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008106:	6832      	ldr	r2, [r6, #0]
 8008108:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800810c:	492d      	ldr	r1, [pc, #180]	; (80081c4 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800810e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008112:	62a3      	str	r3, [r4, #40]	; 0x28
 8008114:	6875      	ldr	r5, [r6, #4]
 8008116:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800811a:	3d01      	subs	r5, #1
 800811c:	1e50      	subs	r0, r2, #1
 800811e:	3b01      	subs	r3, #1
 8008120:	6932      	ldr	r2, [r6, #16]
 8008122:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008126:	025b      	lsls	r3, r3, #9
 8008128:	0400      	lsls	r0, r0, #16
 800812a:	3a01      	subs	r2, #1
 800812c:	b29b      	uxth	r3, r3
 800812e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008132:	0612      	lsls	r2, r2, #24
 8008134:	4303      	orrs	r3, r0
 8008136:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800813a:	432b      	orrs	r3, r5
 800813c:	4313      	orrs	r3, r2
 800813e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008142:	6972      	ldr	r2, [r6, #20]
 8008144:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008148:	4313      	orrs	r3, r2
 800814a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800814c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800814e:	69b2      	ldr	r2, [r6, #24]
 8008150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008154:	4313      	orrs	r3, r2
 8008156:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800815a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008160:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008162:	69f3      	ldr	r3, [r6, #28]
 8008164:	4011      	ands	r1, r2
 8008166:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800816a:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800816c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800816e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008172:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008176:	b1f7      	cbz	r7, 80081b6 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008178:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800817a:	bf0c      	ite	eq
 800817c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008180:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008184:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008186:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <RCCEx_PLL3_Config+0xf0>)
 8008188:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800818a:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 800818c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008192:	f7fd fbed 	bl	8005970 <HAL_GetTick>
 8008196:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008198:	e004      	b.n	80081a4 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800819a:	f7fd fbe9 	bl	8005970 <HAL_GetTick>
 800819e:	1b00      	subs	r0, r0, r4
 80081a0:	2802      	cmp	r0, #2
 80081a2:	d804      	bhi.n	80081ae <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	d5f7      	bpl.n	800819a <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80081aa:	2000      	movs	r0, #0
}
 80081ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80081ae:	2003      	movs	r0, #3
}
 80081b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80081b2:	2001      	movs	r0, #1
}
 80081b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081bc:	e7e3      	b.n	8008186 <RCCEx_PLL3_Config+0xb6>
 80081be:	bf00      	nop
 80081c0:	58024400 	.word	0x58024400
 80081c4:	ffff0007 	.word	0xffff0007

080081c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081cc:	6803      	ldr	r3, [r0, #0]
{
 80081ce:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081d0:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80081d4:	d01c      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80081d6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80081d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80081dc:	f000 84c7 	beq.w	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80081e0:	d823      	bhi.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	f000 842c 	beq.w	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x878>
 80081e8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80081ec:	d120      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081ee:	2102      	movs	r1, #2
 80081f0:	3004      	adds	r0, #4
 80081f2:	f7ff fef1 	bl	8007fd8 <RCCEx_PLL2_Config>
 80081f6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80081f8:	2e00      	cmp	r6, #0
 80081fa:	f040 84c0 	bne.w	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 80081fe:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008200:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008202:	48b0      	ldr	r0, [pc, #704]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008204:	2600      	movs	r6, #0
 8008206:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008208:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800820c:	430a      	orrs	r2, r1
 800820e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008210:	05da      	lsls	r2, r3, #23
 8008212:	d511      	bpl.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008214:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008216:	2a04      	cmp	r2, #4
 8008218:	f200 8580 	bhi.w	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xb54>
 800821c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008220:	04c104ba 	.word	0x04c104ba
 8008224:	033b04b2 	.word	0x033b04b2
 8008228:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 800822a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800822e:	d0e8      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008230:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008232:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008236:	d4ed      	bmi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008238:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800823a:	059f      	lsls	r7, r3, #22
 800823c:	d51b      	bpl.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800823e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008240:	2a80      	cmp	r2, #128	; 0x80
 8008242:	f000 84b7 	beq.w	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8008246:	f200 8127 	bhi.w	8008498 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800824a:	2a00      	cmp	r2, #0
 800824c:	f000 83e6 	beq.w	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x854>
 8008250:	2a40      	cmp	r2, #64	; 0x40
 8008252:	f040 8128 	bne.w	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008256:	2100      	movs	r1, #0
 8008258:	1d20      	adds	r0, r4, #4
 800825a:	f7ff febd 	bl	8007fd8 <RCCEx_PLL2_Config>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008262:	2d00      	cmp	r5, #0
 8008264:	f040 83cc 	bne.w	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008268:	4996      	ldr	r1, [pc, #600]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800826a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800826c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800826e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008272:	4302      	orrs	r2, r0
 8008274:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008276:	0558      	lsls	r0, r3, #21
 8008278:	d51f      	bpl.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800827a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800827e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008282:	f000 8462 	beq.w	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008286:	f200 8111 	bhi.w	80084ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800828a:	2a00      	cmp	r2, #0
 800828c:	f000 83c0 	beq.w	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008290:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008294:	f040 8112 	bne.w	80084bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008298:	2100      	movs	r1, #0
 800829a:	1d20      	adds	r0, r4, #4
 800829c:	f7ff fe9c 	bl	8007fd8 <RCCEx_PLL2_Config>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	f040 83b1 	bne.w	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80082aa:	4986      	ldr	r1, [pc, #536]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80082ac:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80082b0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80082b2:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80082b6:	4302      	orrs	r2, r0
 80082b8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80082ba:	0519      	lsls	r1, r3, #20
 80082bc:	d51f      	bpl.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 80082be:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80082c2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80082c6:	f000 8437 	beq.w	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80082ca:	f200 80fd 	bhi.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	f000 83aa 	beq.w	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80082d4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80082d8:	f040 80fe 	bne.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082dc:	2100      	movs	r1, #0
 80082de:	1d20      	adds	r0, r4, #4
 80082e0:	f7ff fe7a 	bl	8007fd8 <RCCEx_PLL2_Config>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	f040 8387 	bne.w	80089fc <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80082ee:	4975      	ldr	r1, [pc, #468]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80082f0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80082f4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80082f6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80082fa:	4302      	orrs	r2, r0
 80082fc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80082fe:	019a      	lsls	r2, r3, #6
 8008300:	d518      	bpl.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008302:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008304:	2a20      	cmp	r2, #32
 8008306:	f000 840d 	beq.w	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800830a:	f200 80e8 	bhi.w	80084de <HAL_RCCEx_PeriphCLKConfig+0x316>
 800830e:	b13a      	cbz	r2, 8008320 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008310:	2a10      	cmp	r2, #16
 8008312:	f040 80e7 	bne.w	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008316:	496b      	ldr	r1, [pc, #428]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008318:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800831a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800831e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008320:	2d00      	cmp	r5, #0
 8008322:	f040 83ba 	bne.w	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008326:	4967      	ldr	r1, [pc, #412]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008328:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800832a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800832c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008330:	4302      	orrs	r2, r0
 8008332:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008334:	04df      	lsls	r7, r3, #19
 8008336:	d51d      	bpl.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008338:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800833a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800833e:	f000 840d 	beq.w	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x994>
 8008342:	f200 80d2 	bhi.w	80084ea <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008346:	2a00      	cmp	r2, #0
 8008348:	f000 8374 	beq.w	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800834c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008350:	f040 80d3 	bne.w	80084fa <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008354:	2100      	movs	r1, #0
 8008356:	1d20      	adds	r0, r4, #4
 8008358:	f7ff fe3e 	bl	8007fd8 <RCCEx_PLL2_Config>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008360:	2d00      	cmp	r5, #0
 8008362:	f040 834f 	bne.w	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008366:	4957      	ldr	r1, [pc, #348]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008368:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800836a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800836c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008370:	4302      	orrs	r2, r0
 8008372:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008374:	0498      	lsls	r0, r3, #18
 8008376:	d51b      	bpl.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008378:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800837a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800837e:	f000 83bd 	beq.w	8008afc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008382:	f200 80bd 	bhi.w	8008500 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008386:	b14a      	cbz	r2, 800839c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008388:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800838c:	f040 80c2 	bne.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008390:	2101      	movs	r1, #1
 8008392:	1d20      	adds	r0, r4, #4
 8008394:	f7ff fe20 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800839c:	2d00      	cmp	r5, #0
 800839e:	f040 837e 	bne.w	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083a2:	4948      	ldr	r1, [pc, #288]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80083a6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80083a8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80083ac:	4302      	orrs	r2, r0
 80083ae:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083b0:	0459      	lsls	r1, r3, #17
 80083b2:	d51d      	bpl.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 80083b4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80083b8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80083bc:	f000 83a8 	beq.w	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80083c0:	f200 80ab 	bhi.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x352>
 80083c4:	b14a      	cbz	r2, 80083da <HAL_RCCEx_PeriphCLKConfig+0x212>
 80083c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80083ca:	f040 80b0 	bne.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083ce:	2101      	movs	r1, #1
 80083d0:	1d20      	adds	r0, r4, #4
 80083d2:	f7ff fe01 	bl	8007fd8 <RCCEx_PLL2_Config>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f040 8363 	bne.w	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083e0:	4938      	ldr	r1, [pc, #224]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083e2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80083e6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80083e8:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80083ec:	4302      	orrs	r2, r0
 80083ee:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	d509      	bpl.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 80083f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	f000 8264 	beq.w	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 80083fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008400:	f000 825a 	beq.w	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8008404:	2601      	movs	r6, #1
 8008406:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008408:	041f      	lsls	r7, r3, #16
 800840a:	d50d      	bpl.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 800840c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800840e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008412:	f000 8420 	beq.w	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008416:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800841a:	f000 82ce 	beq.w	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800841e:	2a00      	cmp	r2, #0
 8008420:	f000 82d1 	beq.w	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008424:	2601      	movs	r6, #1
 8008426:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008428:	01d8      	lsls	r0, r3, #7
 800842a:	f100 81cf 	bmi.w	80087cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800842e:	0259      	lsls	r1, r3, #9
 8008430:	f100 81ef 	bmi.w	8008812 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008434:	07df      	lsls	r7, r3, #31
 8008436:	f140 8088 	bpl.w	800854a <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 800843a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800843c:	2a28      	cmp	r2, #40	; 0x28
 800843e:	f200 81cf 	bhi.w	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008442:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008446:	007e      	.short	0x007e
 8008448:	01cd01cd 	.word	0x01cd01cd
 800844c:	01cd01cd 	.word	0x01cd01cd
 8008450:	01cd01cd 	.word	0x01cd01cd
 8008454:	03d401cd 	.word	0x03d401cd
 8008458:	01cd01cd 	.word	0x01cd01cd
 800845c:	01cd01cd 	.word	0x01cd01cd
 8008460:	01cd01cd 	.word	0x01cd01cd
 8008464:	007701cd 	.word	0x007701cd
 8008468:	01cd01cd 	.word	0x01cd01cd
 800846c:	01cd01cd 	.word	0x01cd01cd
 8008470:	01cd01cd 	.word	0x01cd01cd
 8008474:	007e01cd 	.word	0x007e01cd
 8008478:	01cd01cd 	.word	0x01cd01cd
 800847c:	01cd01cd 	.word	0x01cd01cd
 8008480:	01cd01cd 	.word	0x01cd01cd
 8008484:	007e01cd 	.word	0x007e01cd
 8008488:	01cd01cd 	.word	0x01cd01cd
 800848c:	01cd01cd 	.word	0x01cd01cd
 8008490:	01cd01cd 	.word	0x01cd01cd
 8008494:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8008498:	2ac0      	cmp	r2, #192	; 0xc0
 800849a:	f43f aee2 	beq.w	8008262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800849e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80084a2:	f43f aede 	beq.w	8008262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80084a6:	2601      	movs	r6, #1
 80084a8:	4635      	mov	r5, r6
 80084aa:	e6e4      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80084ac:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80084b0:	f43f aef8 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80084b4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80084b8:	f43f aef4 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80084bc:	2601      	movs	r6, #1
 80084be:	4635      	mov	r5, r6
 80084c0:	e6fb      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80084c2:	bf00      	nop
 80084c4:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 80084c8:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80084cc:	f43f af0c 	beq.w	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80084d0:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80084d4:	f43f af08 	beq.w	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80084d8:	2601      	movs	r6, #1
 80084da:	4635      	mov	r5, r6
 80084dc:	e70f      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80084de:	2a30      	cmp	r2, #48	; 0x30
 80084e0:	f43f af1e 	beq.w	8008320 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80084e4:	2601      	movs	r6, #1
 80084e6:	4635      	mov	r5, r6
 80084e8:	e724      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80084ea:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80084ee:	f43f af37 	beq.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084f2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80084f6:	f43f af33 	beq.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084fa:	2601      	movs	r6, #1
 80084fc:	4635      	mov	r5, r6
 80084fe:	e739      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008500:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008504:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008508:	f43f af48 	beq.w	800839c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800850c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008510:	f43f af44 	beq.w	800839c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008514:	2601      	movs	r6, #1
 8008516:	4635      	mov	r5, r6
 8008518:	e74a      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800851a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800851e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008522:	f43f af5a 	beq.w	80083da <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008526:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800852a:	f43f af56 	beq.w	80083da <HAL_RCCEx_PeriphCLKConfig+0x212>
 800852e:	2601      	movs	r6, #1
 8008530:	4635      	mov	r5, r6
 8008532:	e75d      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008534:	2101      	movs	r1, #1
 8008536:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800853a:	f7ff fdc9 	bl	80080d0 <RCCEx_PLL3_Config>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008542:	2d00      	cmp	r5, #0
 8008544:	f000 82c0 	beq.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8008548:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800854a:	0798      	lsls	r0, r3, #30
 800854c:	d516      	bpl.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800854e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008550:	2a05      	cmp	r2, #5
 8008552:	f200 83e6 	bhi.w	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008556:	e8df f012 	tbh	[pc, r2, lsl #1]
 800855a:	000d      	.short	0x000d
 800855c:	00060336 	.word	0x00060336
 8008560:	000d000d 	.word	0x000d000d
 8008564:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008566:	2101      	movs	r1, #1
 8008568:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800856c:	f7ff fdb0 	bl	80080d0 <RCCEx_PLL3_Config>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008574:	2d00      	cmp	r5, #0
 8008576:	f000 8279 	beq.w	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800857a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800857c:	0759      	lsls	r1, r3, #29
 800857e:	d517      	bpl.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008580:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8008584:	2a05      	cmp	r2, #5
 8008586:	f200 83c6 	bhi.w	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 800858a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800858e:	000d      	.short	0x000d
 8008590:	00060326 	.word	0x00060326
 8008594:	000d000d 	.word	0x000d000d
 8008598:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800859a:	2101      	movs	r1, #1
 800859c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085a0:	f7ff fd96 	bl	80080d0 <RCCEx_PLL3_Config>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	f000 826a 	beq.w	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80085ae:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085b0:	069a      	lsls	r2, r3, #26
 80085b2:	d51d      	bpl.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085b4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80085b8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80085bc:	f000 8340 	beq.w	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80085c0:	f200 81af 	bhi.w	8008922 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80085c4:	b14a      	cbz	r2, 80085da <HAL_RCCEx_PeriphCLKConfig+0x412>
 80085c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80085ca:	f040 81b4 	bne.w	8008936 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085ce:	2100      	movs	r1, #0
 80085d0:	1d20      	adds	r0, r4, #4
 80085d2:	f7ff fd01 	bl	8007fd8 <RCCEx_PLL2_Config>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085da:	2d00      	cmp	r5, #0
 80085dc:	f040 823c 	bne.w	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085e0:	49b3      	ldr	r1, [pc, #716]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80085e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80085e6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80085e8:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80085ec:	4302      	orrs	r2, r0
 80085ee:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085f0:	065f      	lsls	r7, r3, #25
 80085f2:	d51d      	bpl.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80085f4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80085f8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80085fc:	f000 8334 	beq.w	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8008600:	f200 817f 	bhi.w	8008902 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008604:	b14a      	cbz	r2, 800861a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008606:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800860a:	f040 8184 	bne.w	8008916 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800860e:	2100      	movs	r1, #0
 8008610:	1d20      	adds	r0, r4, #4
 8008612:	f7ff fce1 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800861a:	2d00      	cmp	r5, #0
 800861c:	f040 8221 	bne.w	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008620:	49a3      	ldr	r1, [pc, #652]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008622:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8008626:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008628:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800862c:	4302      	orrs	r2, r0
 800862e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008630:	0618      	lsls	r0, r3, #24
 8008632:	d51d      	bpl.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008634:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8008638:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800863c:	f000 831f 	beq.w	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008640:	f200 814f 	bhi.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8008644:	b14a      	cbz	r2, 800865a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008646:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800864a:	f040 8154 	bne.w	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800864e:	2100      	movs	r1, #0
 8008650:	1d20      	adds	r0, r4, #4
 8008652:	f7ff fcc1 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800865a:	2d00      	cmp	r5, #0
 800865c:	f040 81f7 	bne.w	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008660:	4993      	ldr	r1, [pc, #588]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008662:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8008666:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008668:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800866c:	4302      	orrs	r2, r0
 800866e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008670:	0719      	lsls	r1, r3, #28
 8008672:	d50b      	bpl.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008674:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008678:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800867c:	f000 831e 	beq.w	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008680:	488b      	ldr	r0, [pc, #556]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008682:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008684:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008688:	430a      	orrs	r2, r1
 800868a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800868c:	06da      	lsls	r2, r3, #27
 800868e:	d50b      	bpl.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008690:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008694:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008698:	f000 8305 	beq.w	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800869c:	4884      	ldr	r0, [pc, #528]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800869e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80086a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80086a4:	430a      	orrs	r2, r1
 80086a6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086a8:	031f      	lsls	r7, r3, #12
 80086aa:	d50e      	bpl.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 80086ac:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80086b0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80086b4:	f000 816b 	beq.w	800898e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80086b8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80086bc:	f000 816e 	beq.w	800899c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80086c0:	2900      	cmp	r1, #0
 80086c2:	f000 82e7 	beq.w	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80086c6:	2601      	movs	r6, #1
 80086c8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086ca:	0358      	lsls	r0, r3, #13
 80086cc:	d50f      	bpl.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 80086ce:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80086d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80086d6:	f000 8144 	beq.w	8008962 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80086da:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80086de:	f000 8147 	beq.w	8008970 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80086e2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80086e6:	f000 82a2 	beq.w	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80086ea:	2601      	movs	r6, #1
 80086ec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086ee:	03d9      	lsls	r1, r3, #15
 80086f0:	d517      	bpl.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80086f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	f000 8288 	beq.w	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xa42>
 80086fa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80086fe:	f040 817a 	bne.w	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008702:	2102      	movs	r1, #2
 8008704:	1d20      	adds	r0, r4, #4
 8008706:	f7ff fc67 	bl	8007fd8 <RCCEx_PLL2_Config>
 800870a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	2d00      	cmp	r5, #0
 8008710:	f040 81e5 	bne.w	8008ade <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008714:	4966      	ldr	r1, [pc, #408]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008716:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008718:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800871a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800871e:	4302      	orrs	r2, r0
 8008720:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008722:	009a      	lsls	r2, r3, #2
 8008724:	f100 815c 	bmi.w	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008728:	039f      	lsls	r7, r3, #14
 800872a:	d43f      	bmi.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800872c:	1e30      	subs	r0, r6, #0
 800872e:	bf18      	it	ne
 8008730:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008732:	02de      	lsls	r6, r3, #11
 8008734:	d506      	bpl.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008736:	495e      	ldr	r1, [pc, #376]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008738:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800873a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800873c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008740:	432a      	orrs	r2, r5
 8008742:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008744:	00dd      	lsls	r5, r3, #3
 8008746:	d507      	bpl.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008748:	4959      	ldr	r1, [pc, #356]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800874a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800874e:	690a      	ldr	r2, [r1, #16]
 8008750:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008754:	432a      	orrs	r2, r5
 8008756:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008758:	0299      	lsls	r1, r3, #10
 800875a:	d506      	bpl.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800875c:	4954      	ldr	r1, [pc, #336]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800875e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8008760:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008762:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008766:	432a      	orrs	r2, r5
 8008768:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800876a:	005a      	lsls	r2, r3, #1
 800876c:	d509      	bpl.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800876e:	4a50      	ldr	r2, [pc, #320]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008770:	6911      	ldr	r1, [r2, #16]
 8008772:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008776:	6111      	str	r1, [r2, #16]
 8008778:	6911      	ldr	r1, [r2, #16]
 800877a:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800877e:	4329      	orrs	r1, r5
 8008780:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008782:	2b00      	cmp	r3, #0
 8008784:	da06      	bge.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008786:	494a      	ldr	r1, [pc, #296]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008788:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800878a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800878c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008790:	432a      	orrs	r2, r5
 8008792:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	d507      	bpl.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008798:	4a45      	ldr	r2, [pc, #276]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800879a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800879e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80087a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80087a4:	430b      	orrs	r3, r1
 80087a6:	6553      	str	r3, [r2, #84]	; 0x54
}
 80087a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80087ac:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80087b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80087b4:	f000 8232 	beq.w	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80087b8:	f240 80c3 	bls.w	8008942 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80087bc:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80087c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80087c4:	f000 80c0 	beq.w	8008948 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80087c8:	2001      	movs	r0, #1
 80087ca:	e7b2      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 80087cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80087ce:	2a03      	cmp	r2, #3
 80087d0:	f200 82aa 	bhi.w	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80087d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80087d8:	018a0010 	.word	0x018a0010
 80087dc:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 80087e0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087e2:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 80087e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087e6:	f57f aec9 	bpl.w	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80087ea:	e6b0      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087ec:	2102      	movs	r1, #2
 80087ee:	1d20      	adds	r0, r4, #4
 80087f0:	f7ff fbf2 	bl	8007fd8 <RCCEx_PLL2_Config>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	f040 8152 	bne.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80087fe:	492c      	ldr	r1, [pc, #176]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008800:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008802:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008804:	f022 0203 	bic.w	r2, r2, #3
 8008808:	4302      	orrs	r2, r0
 800880a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800880c:	0259      	lsls	r1, r3, #9
 800880e:	f57f ae11 	bpl.w	8008434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008812:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8008814:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008816:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800881c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800881e:	f7fd f8a7 	bl	8005970 <HAL_GetTick>
 8008822:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008824:	e005      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008826:	f7fd f8a3 	bl	8005970 <HAL_GetTick>
 800882a:	1bc0      	subs	r0, r0, r7
 800882c:	2864      	cmp	r0, #100	; 0x64
 800882e:	f200 81e8 	bhi.w	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008832:	f8d8 3000 	ldr.w	r3, [r8]
 8008836:	05da      	lsls	r2, r3, #23
 8008838:	d5f5      	bpl.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 800883a:	2d00      	cmp	r5, #0
 800883c:	f040 8267 	bne.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008840:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008842:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008846:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008848:	4059      	eors	r1, r3
 800884a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800884e:	d00b      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008850:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008852:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008854:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008858:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800885c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800885e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8008860:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008864:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008866:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886c:	f000 8231 	beq.w	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008870:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008874:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008878:	f000 823f 	beq.w	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xb32>
 800887c:	490c      	ldr	r1, [pc, #48]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800887e:	690a      	ldr	r2, [r1, #16]
 8008880:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008884:	610a      	str	r2, [r1, #16]
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800888c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800888e:	430b      	orrs	r3, r1
 8008890:	6713      	str	r3, [r2, #112]	; 0x70
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	e5ce      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008896:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8008898:	2d00      	cmp	r5, #0
 800889a:	f040 80b5 	bne.w	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800889e:	4904      	ldr	r1, [pc, #16]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80088a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088a2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80088a4:	f022 0207 	bic.w	r2, r2, #7
 80088a8:	4302      	orrs	r2, r0
 80088aa:	650a      	str	r2, [r1, #80]	; 0x50
 80088ac:	e4c5      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80088ae:	bf00      	nop
 80088b0:	58024400 	.word	0x58024400
 80088b4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088b8:	2101      	movs	r1, #1
 80088ba:	1d20      	adds	r0, r4, #4
 80088bc:	f7ff fb8c 	bl	8007fd8 <RCCEx_PLL2_Config>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	f040 810c 	bne.w	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80088ca:	49b9      	ldr	r1, [pc, #740]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088cc:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80088ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80088d0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80088d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088d6:	ea42 0200 	orr.w	r2, r2, r0
 80088da:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088dc:	f57f ada4 	bpl.w	8008428 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80088e0:	e594      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088e2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80088e6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80088ea:	f43f aeb6 	beq.w	800865a <HAL_RCCEx_PeriphCLKConfig+0x492>
 80088ee:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80088f2:	f43f aeb2 	beq.w	800865a <HAL_RCCEx_PeriphCLKConfig+0x492>
 80088f6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088f8:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088fa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088fc:	f57f aec6 	bpl.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008900:	e6b8      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008902:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8008906:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800890a:	f43f ae86 	beq.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800890e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008912:	f43f ae82 	beq.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008916:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008918:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800891a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800891c:	f57f aea8 	bpl.w	8008670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008920:	e688      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008922:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008926:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800892a:	f43f ae56 	beq.w	80085da <HAL_RCCEx_PeriphCLKConfig+0x412>
 800892e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008932:	f43f ae52 	beq.w	80085da <HAL_RCCEx_PeriphCLKConfig+0x412>
 8008936:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008938:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 800893a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800893c:	f57f ae78 	bpl.w	8008630 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008940:	e658      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8008942:	2a00      	cmp	r2, #0
 8008944:	f47f af40 	bne.w	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8008948:	2d00      	cmp	r5, #0
 800894a:	f47f af3d 	bne.w	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800894e:	4d98      	ldr	r5, [pc, #608]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008950:	1e30      	subs	r0, r6, #0
 8008952:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008954:	bf18      	it	ne
 8008956:	2001      	movne	r0, #1
 8008958:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800895c:	430a      	orrs	r2, r1
 800895e:	656a      	str	r2, [r5, #84]	; 0x54
 8008960:	e6e7      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008962:	2101      	movs	r1, #1
 8008964:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008968:	f7ff fbb2 	bl	80080d0 <RCCEx_PLL3_Config>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008970:	2d00      	cmp	r5, #0
 8008972:	f040 80a4 	bne.w	8008abe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008976:	498e      	ldr	r1, [pc, #568]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008978:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800897c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800897e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008982:	4302      	orrs	r2, r0
 8008984:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008986:	03d9      	lsls	r1, r3, #15
 8008988:	f57f aecb 	bpl.w	8008722 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800898c:	e6b1      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800898e:	2102      	movs	r1, #2
 8008990:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008994:	f7ff fb9c 	bl	80080d0 <RCCEx_PLL3_Config>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800899c:	2d00      	cmp	r5, #0
 800899e:	f040 8089 	bne.w	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089a2:	4983      	ldr	r1, [pc, #524]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80089a4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80089a8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80089aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80089ae:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089b0:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089b2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089b4:	f57f ae9b 	bpl.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 80089b8:	e689      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089ba:	2101      	movs	r1, #1
 80089bc:	1d20      	adds	r0, r4, #4
 80089be:	f7ff fb0b 	bl	8007fd8 <RCCEx_PLL2_Config>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	d16f      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089ca:	4979      	ldr	r1, [pc, #484]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80089cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80089ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80089d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80089d4:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089d6:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089d8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089da:	f57f ad28 	bpl.w	800842e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80089de:	e6f5      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089e0:	2102      	movs	r1, #2
 80089e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089e6:	f7ff fb73 	bl	80080d0 <RCCEx_PLL3_Config>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f43f ae9b 	beq.w	8008728 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 80089f2:	2601      	movs	r6, #1
 80089f4:	e698      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 80089f6:	2601      	movs	r6, #1
 80089f8:	4635      	mov	r5, r6
 80089fa:	e692      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80089fc:	462e      	mov	r6, r5
 80089fe:	e47e      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a00:	462e      	mov	r6, r5
 8008a02:	e438      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8008a04:	462e      	mov	r6, r5
 8008a06:	e4b5      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8008a08:	462e      	mov	r6, r5
 8008a0a:	e416      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008a0c:	462e      	mov	r6, r5
 8008a0e:	e454      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a10:	4967      	ldr	r1, [pc, #412]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a18:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a1a:	e443      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a1c:	4964      	ldr	r1, [pc, #400]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a1e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a24:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a26:	e41c      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a28:	4961      	ldr	r1, [pc, #388]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a2a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a30:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a32:	e459      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a34:	495e      	ldr	r1, [pc, #376]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a3c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a3e:	e48f      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a40:	485b      	ldr	r0, [pc, #364]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a42:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008a44:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008a48:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008a4a:	f7ff bbda 	b.w	8008202 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a4e:	0719      	lsls	r1, r3, #28
 8008a50:	462e      	mov	r6, r5
 8008a52:	f57f ae1b 	bpl.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008a56:	e60d      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a58:	065f      	lsls	r7, r3, #25
 8008a5a:	462e      	mov	r6, r5
 8008a5c:	f57f ade8 	bpl.w	8008630 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008a60:	e5c8      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a62:	0618      	lsls	r0, r3, #24
 8008a64:	462e      	mov	r6, r5
 8008a66:	f57f ae03 	bpl.w	8008670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008a6a:	e5e3      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a6c:	4950      	ldr	r1, [pc, #320]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a6e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008a70:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008a72:	f022 0207 	bic.w	r2, r2, #7
 8008a76:	4302      	orrs	r2, r0
 8008a78:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a7a:	0759      	lsls	r1, r3, #29
 8008a7c:	f57f ad98 	bpl.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008a80:	e57e      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a82:	494b      	ldr	r1, [pc, #300]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a84:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8008a88:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008a8a:	f022 0207 	bic.w	r2, r2, #7
 8008a8e:	4302      	orrs	r2, r0
 8008a90:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a92:	069a      	lsls	r2, r3, #26
 8008a94:	f57f adac 	bpl.w	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008a98:	e58c      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008a9a:	462e      	mov	r6, r5
 8008a9c:	e44a      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008a9e:	462e      	mov	r6, r5
 8008aa0:	e486      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008aa2:	462e      	mov	r6, r5
 8008aa4:	e4c3      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008aa6:	462e      	mov	r6, r5
 8008aa8:	e4a2      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008aaa:	01d8      	lsls	r0, r3, #7
 8008aac:	462e      	mov	r6, r5
 8008aae:	f57f acbe 	bpl.w	800842e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008ab2:	e68b      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ab4:	0358      	lsls	r0, r3, #13
 8008ab6:	462e      	mov	r6, r5
 8008ab8:	f57f ae19 	bpl.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008abc:	e607      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008abe:	03d9      	lsls	r1, r3, #15
 8008ac0:	462e      	mov	r6, r5
 8008ac2:	f57f ae2e 	bpl.w	8008722 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008ac6:	e614      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ac8:	4939      	ldr	r1, [pc, #228]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008aca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008acc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008ace:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8008ad2:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ad4:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ad6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ad8:	f57f ad50 	bpl.w	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8008adc:	e537      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8008ade:	462e      	mov	r6, r5
 8008ae0:	e61f      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ae2:	041f      	lsls	r7, r3, #16
 8008ae4:	462e      	mov	r6, r5
 8008ae6:	f57f ac9f 	bpl.w	8008428 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008aea:	e48f      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aec:	4930      	ldr	r1, [pc, #192]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008aee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008af0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008af4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	d1d3      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008afa:	e680      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008afc:	2101      	movs	r1, #1
 8008afe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b02:	f7ff fae5 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b06:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	2d00      	cmp	r5, #0
 8008b0c:	d1c7      	bne.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8008b0e:	e448      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b10:	2101      	movs	r1, #1
 8008b12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b16:	f7ff fadb 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	d1c1      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008b22:	e45d      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b24:	2102      	movs	r1, #2
 8008b26:	1d20      	adds	r0, r4, #4
 8008b28:	f7ff fa56 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008b2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	d1b2      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8008b34:	f7ff bbf7 	b.w	8008326 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b38:	2100      	movs	r1, #0
 8008b3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b3e:	f7ff fac7 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4605      	mov	r5, r0
      break;
 8008b46:	f7ff bbcf 	b.w	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b50:	f7ff fabe 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	4605      	mov	r5, r0
      break;
 8008b58:	f7ff bba4 	b.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b62:	f7ff fab5 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	4605      	mov	r5, r0
      break;
 8008b6a:	f7ff bbf9 	b.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b6e:	2102      	movs	r1, #2
 8008b70:	3024      	adds	r0, #36	; 0x24
 8008b72:	f7ff faad 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b76:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008b78:	2e00      	cmp	r6, #0
 8008b7a:	f43f ab40 	beq.w	80081fe <HAL_RCCEx_PeriphCLKConfig+0x36>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f7ff bb46 	b.w	8008210 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b84:	2100      	movs	r1, #0
 8008b86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b8a:	f7ff faa1 	bl	80080d0 <RCCEx_PLL3_Config>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	4605      	mov	r5, r0
      break;
 8008b92:	e681      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b94:	4906      	ldr	r1, [pc, #24]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8008b96:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b98:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008b9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b9e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008ba0:	e67a      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	1d20      	adds	r0, r4, #4
 8008ba6:	f7ff fa17 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4605      	mov	r5, r0
      break;
 8008bae:	e673      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8008bb0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bba:	f7ff fa89 	bl	80080d0 <RCCEx_PLL3_Config>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	4605      	mov	r5, r0
      break;
 8008bc2:	f7ff bb4e 	b.w	8008262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	1d20      	adds	r0, r4, #4
 8008bca:	f7ff fa05 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008bce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	f47f acd1 	bne.w	800857a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8008bd8:	e748      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bda:	2101      	movs	r1, #1
 8008bdc:	1d20      	adds	r0, r4, #4
 8008bde:	f7ff f9fb 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008be2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	f47f ace1 	bne.w	80085ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008bec:	e749      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bee:	2101      	movs	r1, #1
 8008bf0:	1d20      	adds	r0, r4, #4
 8008bf2:	f7ff f9f1 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008bf6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	f47f aca4 	bne.w	8008548 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8008c00:	e762      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8008c02:	2603      	movs	r6, #3
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	4635      	mov	r5, r6
 8008c08:	e414      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c0a:	4949      	ldr	r1, [pc, #292]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c0c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c12:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	f47f af62 	bne.w	8008ade <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008c1a:	e57b      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1c:	4844      	ldr	r0, [pc, #272]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008c20:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008c24:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	f47f adce 	bne.w	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8008c2c:	e68f      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2e:	4940      	ldr	r1, [pc, #256]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c30:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c36:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	f47f af40 	bne.w	8008abe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8008c3e:	e69a      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c40:	2102      	movs	r1, #2
 8008c42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c46:	f7ff fa43 	bl	80080d0 <RCCEx_PLL3_Config>
 8008c4a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	f47f af02 	bne.w	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8008c54:	e4c4      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c56:	4936      	ldr	r1, [pc, #216]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c58:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c5e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	f47f af22 	bne.w	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008c66:	e6b0      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c68:	2102      	movs	r1, #2
 8008c6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c6e:	f7ff fa2f 	bl	80080d0 <RCCEx_PLL3_Config>
 8008c72:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	f47f aef3 	bne.w	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8008c7c:	e4d0      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c7e:	2102      	movs	r1, #2
 8008c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c84:	f7ff fa24 	bl	80080d0 <RCCEx_PLL3_Config>
 8008c88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	2d00      	cmp	r5, #0
 8008c8e:	f47f aede 	bne.w	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8008c92:	e4e5      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c94:	1d20      	adds	r0, r4, #4
 8008c96:	f7ff f99f 	bl	8007fd8 <RCCEx_PLL2_Config>
 8008c9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	f47f af08 	bne.w	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008ca4:	e67d      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cac:	f7ff fa10 	bl	80080d0 <RCCEx_PLL3_Config>
 8008cb0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008cb4:	b100      	cbz	r0, 8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8008cb6:	2601      	movs	r6, #1
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	e4ef      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cc2:	f7ff fa05 	bl	80080d0 <RCCEx_PLL3_Config>
 8008cc6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008cca:	b100      	cbz	r0, 8008cce <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8008ccc:	2601      	movs	r6, #1
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	e4d6      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8008cd2:	f7fc fe4d 	bl	8005970 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cd6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008cde:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ce2:	f7fc fe45 	bl	8005970 <HAL_GetTick>
 8008ce6:	1bc0      	subs	r0, r0, r7
 8008ce8:	4548      	cmp	r0, r9
 8008cea:	d88a      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cec:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008cf0:	079b      	lsls	r3, r3, #30
 8008cf2:	d5f6      	bpl.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008cf4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008cf8:	e5ba      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cfa:	480d      	ldr	r0, [pc, #52]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 8008cfe:	6901      	ldr	r1, [r0, #16]
 8008d00:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008d04:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	6102      	str	r2, [r0, #16]
 8008d0c:	e5bb      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008d0e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008d10:	462e      	mov	r6, r5
 8008d12:	f7ff bb8f 	b.w	8008434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d16:	2601      	movs	r6, #1
 8008d18:	4635      	mov	r5, r6
 8008d1a:	e449      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d1c:	2601      	movs	r6, #1
 8008d1e:	f7ff ba8b 	b.w	8008238 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d22:	2601      	movs	r6, #1
 8008d24:	4635      	mov	r5, r6
 8008d26:	e429      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8008d28:	2601      	movs	r6, #1
 8008d2a:	4635      	mov	r5, r6
 8008d2c:	f7ff bb7f 	b.w	800842e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008d30:	58024400 	.word	0x58024400
 8008d34:	00ffffcf 	.word	0x00ffffcf

08008d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d38:	4b58      	ldr	r3, [pc, #352]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8008d3a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d3e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8008d42:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d46:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d4a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8008d4c:	d05c      	beq.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d4e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d52:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d56:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d5a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008d5e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d60:	ee07 4a90 	vmov	s15, r4
 8008d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008d68:	d003      	beq.n	8008d72 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008d6a:	2902      	cmp	r1, #2
 8008d6c:	d075      	beq.n	8008e5a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8008d6e:	2900      	cmp	r1, #0
 8008d70:	d04f      	beq.n	8008e12 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d72:	ee07 2a90 	vmov	s15, r2
 8008d76:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8008d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008d84:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8c:	ee06 3a90 	vmov	s13, r3
 8008d90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008d94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008d98:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008d9c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008da0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008da4:	4a3d      	ldr	r2, [pc, #244]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 8008da6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008daa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008dac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008db0:	ee07 3a10 	vmov	s14, r3
 8008db4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008db8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008dba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008dca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008dcc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008dd0:	ee07 3a10 	vmov	s14, r3
 8008dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008dd8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008de8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008dea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008df6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e02:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008e06:	4770      	bx	lr
 8008e08:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e0a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e0e:	6082      	str	r2, [r0, #8]
}
 8008e10:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	0689      	lsls	r1, r1, #26
 8008e16:	d527      	bpl.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e18:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e1a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e1e:	4a22      	ldr	r2, [pc, #136]	; (8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e20:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e24:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e2e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e30:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	ee06 2a10 	vmov	s12, r2
 8008e3c:	ee06 3a90 	vmov	s13, r3
 8008e40:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008e44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e48:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8008e4c:	eee7 6a24 	vfma.f32	s13, s14, s9
 8008e50:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008e54:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008e58:	e7a4      	b.n	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e5a:	ee07 2a90 	vmov	s15, r2
 8008e5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 8008e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e66:	e78a      	b.n	8008d7e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e68:	ee07 2a90 	vmov	s15, r2
 8008e6c:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e7a:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e8e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008e92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008e9a:	e783      	b.n	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	4a742400 	.word	0x4a742400
 8008ea4:	39000000 	.word	0x39000000
 8008ea8:	03d09000 	.word	0x03d09000
 8008eac:	4bbebc20 	.word	0x4bbebc20
 8008eb0:	4c742400 	.word	0x4c742400

08008eb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb4:	4b58      	ldr	r3, [pc, #352]	; (8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 8008eb6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008eba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ebc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8008ebe:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008ec2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008ec6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8008ec8:	d05c      	beq.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008eca:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ece:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ed2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008ed6:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008eda:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008edc:	ee07 4a90 	vmov	s15, r4
 8008ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008ee4:	d003      	beq.n	8008eee <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008ee6:	2902      	cmp	r1, #2
 8008ee8:	d075      	beq.n	8008fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d04f      	beq.n	8008f8e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eee:	ee07 2a90 	vmov	s15, r2
 8008ef2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8008ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008f00:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8008f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f08:	ee06 3a90 	vmov	s13, r3
 8008f0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008f10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008f14:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008f18:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008f1c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f20:	4a3d      	ldr	r2, [pc, #244]	; (8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 8008f22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008f26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f28:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008f2c:	ee07 3a10 	vmov	s14, r3
 8008f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008f34:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f36:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f42:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f48:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008f4c:	ee07 3a10 	vmov	s14, r3
 8008f50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008f54:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f60:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008f64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f66:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008f7e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008f82:	4770      	bx	lr
 8008f84:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f86:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f8a:	6082      	str	r2, [r0, #8]
}
 8008f8c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f8e:	6819      	ldr	r1, [r3, #0]
 8008f90:	0689      	lsls	r1, r1, #26
 8008f92:	d527      	bpl.n	8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f94:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f96:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f9a:	4a22      	ldr	r2, [pc, #136]	; (8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f9c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fa0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008faa:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fac:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8008fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb4:	ee06 2a10 	vmov	s12, r2
 8008fb8:	ee06 3a90 	vmov	s13, r3
 8008fbc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008fc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008fc4:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8008fc8:	eee7 6a24 	vfma.f32	s13, s14, s9
 8008fcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008fd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008fd4:	e7a4      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fd6:	ee07 2a90 	vmov	s15, r2
 8008fda:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8008fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fe2:	e78a      	b.n	8008efa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fe4:	ee07 2a90 	vmov	s15, r2
 8008fe8:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800902c <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ff6:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800900e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009012:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009016:	e783      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009018:	58024400 	.word	0x58024400
 800901c:	4a742400 	.word	0x4a742400
 8009020:	39000000 	.word	0x39000000
 8009024:	03d09000 	.word	0x03d09000
 8009028:	4bbebc20 	.word	0x4bbebc20
 800902c:	4c742400 	.word	0x4c742400

08009030 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009030:	4b5c      	ldr	r3, [pc, #368]	; (80091a4 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 8009032:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009034:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009036:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009038:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800903a:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800903e:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009042:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009044:	d05c      	beq.n	8009100 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009046:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800904a:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800904e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009052:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009056:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009058:	ee07 4a90 	vmov	s15, r4
 800905c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009060:	d07e      	beq.n	8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009062:	2902      	cmp	r1, #2
 8009064:	d075      	beq.n	8009152 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009066:	2900      	cmp	r1, #0
 8009068:	d04f      	beq.n	800910a <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800906a:	ee07 2a90 	vmov	s15, r2
 800906e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800907c:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 80091ac <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009084:	ee06 3a90 	vmov	s13, r3
 8009088:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800908c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009090:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009094:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009098:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800909c:	4a41      	ldr	r2, [pc, #260]	; (80091a4 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800909e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80090a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80090a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80090a8:	ee07 3a10 	vmov	s14, r3
 80090ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80090b0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80090b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80090b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090be:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80090c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80090c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80090c8:	ee07 3a10 	vmov	s14, r3
 80090cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80090d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80090d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090dc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80090e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80090e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80090f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80090fa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80090fe:	4770      	bx	lr
 8009100:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009102:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009106:	6082      	str	r2, [r0, #8]
}
 8009108:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800910a:	6819      	ldr	r1, [r3, #0]
 800910c:	0689      	lsls	r1, r1, #26
 800910e:	d52e      	bpl.n	800916e <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009110:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009112:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009116:	4a26      	ldr	r2, [pc, #152]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009118:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800911c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009126:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009128:	eddf 4a20 	vldr	s9, [pc, #128]	; 80091ac <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800912c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009130:	ee06 2a10 	vmov	s12, r2
 8009134:	ee06 3a90 	vmov	s13, r3
 8009138:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800913c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009140:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009144:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009148:	ee76 6a85 	vadd.f32	s13, s13, s10
 800914c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009150:	e7a4      	b.n	800909c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009152:	ee07 2a90 	vmov	s15, r2
 8009156:	eddf 6a17 	vldr	s13, [pc, #92]	; 80091b4 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 800915a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800915e:	e78a      	b.n	8009076 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009160:	ee07 2a90 	vmov	s15, r2
 8009164:	eddf 6a14 	vldr	s13, [pc, #80]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800916c:	e783      	b.n	8009076 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800916e:	ee07 2a90 	vmov	s15, r2
 8009172:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009178:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800917c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009180:	eddf 5a0a 	vldr	s11, [pc, #40]	; 80091ac <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009188:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009194:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009198:	ee77 7a86 	vadd.f32	s15, s15, s12
 800919c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80091a0:	e77c      	b.n	800909c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	4c742400 	.word	0x4c742400
 80091ac:	39000000 	.word	0x39000000
 80091b0:	03d09000 	.word	0x03d09000
 80091b4:	4bbebc20 	.word	0x4bbebc20
 80091b8:	4a742400 	.word	0x4a742400

080091bc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091bc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80091c0:	b500      	push	{lr}
 80091c2:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091c4:	d077      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80091c6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80091ca:	d02e      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80091cc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80091d0:	f000 80cf 	beq.w	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80091d4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80091d8:	f000 8080 	beq.w	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091dc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80091e0:	d05a      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80091e2:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80091e6:	f000 8105 	beq.w	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80091ea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80091ee:	f000 8110 	beq.w	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091f2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80091f6:	f000 80e2 	beq.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80091fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80091fe:	d13a      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009200:	4ba9      	ldr	r3, [pc, #676]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800920c:	f000 808e 	beq.w	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009214:	f000 812e 	beq.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009218:	bb6b      	cbnz	r3, 8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800921a:	4aa3      	ldr	r2, [pc, #652]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 800921c:	4ba3      	ldr	r3, [pc, #652]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800921e:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009220:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009224:	bf18      	it	ne
 8009226:	4618      	movne	r0, r3
 8009228:	e042      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800922a:	4a9f      	ldr	r2, [pc, #636]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800922c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800922e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009232:	2b80      	cmp	r3, #128	; 0x80
 8009234:	f000 8098 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009238:	d921      	bls.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800923a:	2bc0      	cmp	r3, #192	; 0xc0
 800923c:	d037      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800923e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009242:	d118      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009244:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009246:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800924c:	0749      	lsls	r1, r1, #29
 800924e:	d502      	bpl.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 80ae 	beq.w	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009256:	4a94      	ldr	r2, [pc, #592]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009258:	6812      	ldr	r2, [r2, #0]
 800925a:	05d0      	lsls	r0, r2, #23
 800925c:	d503      	bpl.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800925e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009262:	f000 80fb 	beq.w	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009266:	4a90      	ldr	r2, [pc, #576]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	0391      	lsls	r1, r2, #14
 800926c:	d503      	bpl.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800926e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009272:	f000 80bd 	beq.w	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009276:	2000      	movs	r0, #0
}
 8009278:	b005      	add	sp, #20
 800927a:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04b      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d1f7      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009286:	6810      	ldr	r0, [r2, #0]
 8009288:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800928c:	d010      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928e:	a801      	add	r0, sp, #4
 8009290:	f7ff fd52 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009294:	9801      	ldr	r0, [sp, #4]
 8009296:	e00b      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009298:	4a83      	ldr	r2, [pc, #524]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800929a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800929c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80092a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a4:	d060      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80092a6:	d936      	bls.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80092a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092ac:	d178      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 80092ae:	4880      	ldr	r0, [pc, #512]	; (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 80092b0:	b005      	add	sp, #20
 80092b2:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80092b6:	4b7c      	ldr	r3, [pc, #496]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d8d9      	bhi.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	0800932d 	.word	0x0800932d
 80092cc:	08009351 	.word	0x08009351
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	080092af 	.word	0x080092af
 80092d8:	08009339 	.word	0x08009339
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80092dc:	4a72      	ldr	r2, [pc, #456]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80092de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80092e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80092e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092e8:	d03e      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80092ea:	d937      	bls.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80092ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092f0:	d0dd      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80092f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092f6:	d1be      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092fa:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009300:	0752      	lsls	r2, r2, #29
 8009302:	d5a8      	bpl.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1a6      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009308:	4b67      	ldr	r3, [pc, #412]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800930a:	486a      	ldr	r0, [pc, #424]	; (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009312:	40d8      	lsrs	r0, r3
 8009314:	e7cc      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009316:	2b00      	cmp	r3, #0
 8009318:	d146      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800931a:	6810      	ldr	r0, [r2, #0]
 800931c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009320:	d0c6      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009322:	a801      	add	r0, sp, #4
 8009324:	f7ff fe84 	bl	8009030 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009328:	9802      	ldr	r0, [sp, #8]
 800932a:	e7c1      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800932c:	4b5e      	ldr	r3, [pc, #376]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009334:	d0bc      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009336:	e7f4      	b.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009338:	4a5b      	ldr	r2, [pc, #364]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800933a:	e783      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800933c:	4b5a      	ldr	r3, [pc, #360]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009344:	d0b4      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009346:	a801      	add	r0, sp, #4
 8009348:	f7ff fdb4 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800934c:	9801      	ldr	r0, [sp, #4]
 800934e:	e7af      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009350:	4b55      	ldr	r3, [pc, #340]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009358:	d0aa      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800935a:	e798      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0dc      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009364:	d08f      	beq.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009366:	e786      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009368:	6810      	ldr	r0, [r2, #0]
 800936a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800936e:	d09f      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009370:	e7e9      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009372:	4a4d      	ldr	r2, [pc, #308]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009374:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009376:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800937a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800937e:	d0f3      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009380:	d806      	bhi.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0c9      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938a:	f43f af7c 	beq.w	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800938e:	e772      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009390:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009394:	d08b      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800939a:	f43f af53 	beq.w	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800939e:	e76a      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 80093a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093a4:	d0a8      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80093a6:	e766      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ac:	f43f af6b 	beq.w	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80093b0:	e761      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	483f      	ldr	r0, [pc, #252]	; (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80093b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093ba:	40d8      	lsrs	r0, r3
 80093bc:	e778      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80093be:	4a3a      	ldr	r2, [pc, #232]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80093c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ca:	d066      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80093cc:	d82f      	bhi.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093d2:	d04f      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d8:	d131      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093da:	4b33      	ldr	r3, [pc, #204]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80093e2:	f43f af65 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fd64 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093ec:	9802      	ldr	r0, [sp, #8]
 80093ee:	e75f      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 80093f0:	482e      	ldr	r0, [pc, #184]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80093f2:	e75d      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80093f4:	4a2c      	ldr	r2, [pc, #176]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80093fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009400:	d02e      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009406:	f43f af77 	beq.w	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800940a:	2b00      	cmp	r3, #0
 800940c:	f47f af33 	bne.w	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009410:	e739      	b.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009412:	4b25      	ldr	r3, [pc, #148]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009414:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009416:	03d2      	lsls	r2, r2, #15
 8009418:	d589      	bpl.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009420:	f43f af46 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009424:	a801      	add	r0, sp, #4
 8009426:	f7ff fc87 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800942a:	9803      	ldr	r0, [sp, #12]
 800942c:	e740      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009432:	d02a      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009438:	f43f aeef 	beq.w	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800943c:	e71b      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800943e:	2b00      	cmp	r3, #0
 8009440:	f47f af19 	bne.w	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009444:	f7fe fda6 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8009448:	4b17      	ldr	r3, [pc, #92]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800944a:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009452:	5cd3      	ldrb	r3, [r2, r3]
 8009454:	f003 031f 	and.w	r3, r3, #31
 8009458:	40d8      	lsrs	r0, r3
          break;
 800945a:	e729      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800945c:	4817      	ldr	r0, [pc, #92]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800945e:	e727      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009460:	6810      	ldr	r0, [r2, #0]
 8009462:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009466:	f43f af23 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800946a:	a801      	add	r0, sp, #4
 800946c:	f7ff fd22 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009470:	9803      	ldr	r0, [sp, #12]
 8009472:	e71d      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009474:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800947c:	f43f af18 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009480:	a801      	add	r0, sp, #4
 8009482:	f7ff fc59 	bl	8008d38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009486:	9802      	ldr	r0, [sp, #8]
 8009488:	e712      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800948a:	4a07      	ldr	r2, [pc, #28]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800948c:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800948e:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009490:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009494:	bf18      	it	ne
 8009496:	4618      	movne	r0, r3
 8009498:	e70a      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800949a:	6810      	ldr	r0, [r2, #0]
 800949c:	f010 0004 	ands.w	r0, r0, #4
 80094a0:	f43f af06 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80094a4:	e730      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80094a6:	bf00      	nop
 80094a8:	58024400 	.word	0x58024400
 80094ac:	017d7840 	.word	0x017d7840
 80094b0:	00bb8000 	.word	0x00bb8000
 80094b4:	03d09000 	.word	0x03d09000
 80094b8:	08009898 	.word	0x08009898
 80094bc:	003d0900 	.word	0x003d0900

080094c0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop

080094c4 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 80094c4:	b318      	cbz	r0, 800950e <HAL_SDRAM_Init+0x4a>
{
 80094c6:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80094c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80094cc:	460d      	mov	r5, r1
 80094ce:	4604      	mov	r4, r0
 80094d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80094d4:	b1b3      	cbz	r3, 8009504 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094d6:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094d8:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094de:	f851 0b04 	ldr.w	r0, [r1], #4
 80094e2:	f000 f851 	bl	8009588 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80094e6:	4629      	mov	r1, r5
 80094e8:	e9d4 0200 	ldrd	r0, r2, [r4]
 80094ec:	f000 f888 	bl	8009600 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80094f0:	4a08      	ldr	r2, [pc, #32]	; (8009514 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094f2:	2101      	movs	r1, #1
  return HAL_OK;
 80094f4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094fc:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094fe:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8009502:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009504:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009508:	f7ff ffda 	bl	80094c0 <HAL_SDRAM_MspInit>
 800950c:	e7e3      	b.n	80094d6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800950e:	2001      	movs	r0, #1
}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	52004000 	.word	0x52004000

08009518 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009518:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800951a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800951e:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009520:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009522:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009524:	d004      	beq.n	8009530 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009526:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800952a:	2c01      	cmp	r4, #1
 800952c:	d001      	beq.n	8009532 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800952e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009530:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009532:	2302      	movs	r3, #2
 8009534:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009536:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009538:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800953c:	f000 f8ac 	bl	8009698 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009540:	6833      	ldr	r3, [r6, #0]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d003      	beq.n	800954e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8009546:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009548:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 800954c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800954e:	2305      	movs	r3, #5
  return HAL_OK;
 8009550:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009552:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009558:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800955a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800955e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009560:	2b02      	cmp	r3, #2
 8009562:	b2d8      	uxtb	r0, r3
 8009564:	d005      	beq.n	8009572 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009566:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800956a:	2b01      	cmp	r3, #1
 800956c:	b2dd      	uxtb	r5, r3
 800956e:	d001      	beq.n	8009574 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8009570:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009572:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009574:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009576:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009578:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800957c:	f000 f8a2 	bl	80096c4 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8009580:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009582:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009586:	bd38      	pop	{r3, r4, r5, pc}

08009588 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009588:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800958a:	6802      	ldr	r2, [r0, #0]
{
 800958c:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800958e:	b9c3      	cbnz	r3, 80095c2 <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009590:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009594:	684c      	ldr	r4, [r1, #4]
 8009596:	698e      	ldr	r6, [r1, #24]
 8009598:	4013      	ands	r3, r2
 800959a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800959e:	4323      	orrs	r3, r4
 80095a0:	690c      	ldr	r4, [r1, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	694a      	ldr	r2, [r1, #20]
 80095a6:	432b      	orrs	r3, r5
 80095a8:	69cd      	ldr	r5, [r1, #28]
 80095aa:	4323      	orrs	r3, r4
 80095ac:	4313      	orrs	r3, r2
 80095ae:	4333      	orrs	r3, r6
 80095b0:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 80095b4:	432b      	orrs	r3, r5
 80095b6:	4323      	orrs	r3, r4
 80095b8:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80095ba:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095bc:	6003      	str	r3, [r0, #0]
}
 80095be:	2000      	movs	r0, #0
 80095c0:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095c2:	69cb      	ldr	r3, [r1, #28]
 80095c4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095c8:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095ca:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095cc:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095ce:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 80095d2:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095d4:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095d6:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095d8:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095da:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095dc:	6842      	ldr	r2, [r0, #4]
 80095de:	4013      	ands	r3, r2
 80095e0:	432b      	orrs	r3, r5
 80095e2:	690d      	ldr	r5, [r1, #16]
 80095e4:	4323      	orrs	r3, r4
 80095e6:	4333      	orrs	r3, r6
 80095e8:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80095ec:	432b      	orrs	r3, r5
 80095ee:	4323      	orrs	r3, r4
 80095f0:	4313      	orrs	r3, r2
}
 80095f2:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095f4:	6043      	str	r3, [r0, #4]
}
 80095f6:	2000      	movs	r0, #0
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	ffff8000 	.word	0xffff8000

08009600 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009600:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009602:	bb0a      	cbnz	r2, 8009648 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009604:	684c      	ldr	r4, [r1, #4]
 8009606:	6882      	ldr	r2, [r0, #8]
 8009608:	680d      	ldr	r5, [r1, #0]
 800960a:	1e63      	subs	r3, r4, #1
 800960c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009610:	688c      	ldr	r4, [r1, #8]
 8009612:	1e6e      	subs	r6, r5, #1
 8009614:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8009618:	1e65      	subs	r5, r4, #1
 800961a:	68cc      	ldr	r4, [r1, #12]
 800961c:	4333      	orrs	r3, r6
 800961e:	690a      	ldr	r2, [r1, #16]
 8009620:	1e66      	subs	r6, r4, #1
 8009622:	694c      	ldr	r4, [r1, #20]
 8009624:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009628:	1e55      	subs	r5, r2, #1
 800962a:	698a      	ldr	r2, [r1, #24]
 800962c:	1e61      	subs	r1, r4, #1
 800962e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 8009632:	3a01      	subs	r2, #1
 8009634:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009638:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800963c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009640:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009642:	6083      	str	r3, [r0, #8]
}
 8009644:	2000      	movs	r0, #0
 8009646:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009648:	6882      	ldr	r2, [r0, #8]
 800964a:	68cb      	ldr	r3, [r1, #12]
 800964c:	4c11      	ldr	r4, [pc, #68]	; (8009694 <FMC_SDRAM_Timing_Init+0x94>)
 800964e:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009650:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009652:	4014      	ands	r4, r2
 8009654:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009656:	1e5e      	subs	r6, r3, #1
 8009658:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800965a:	3a01      	subs	r2, #1
 800965c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009660:	688d      	ldr	r5, [r1, #8]
 8009662:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009664:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009668:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800966a:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800966c:	68c2      	ldr	r2, [r0, #12]
 800966e:	690c      	ldr	r4, [r1, #16]
 8009670:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009674:	6989      	ldr	r1, [r1, #24]
 8009676:	3c01      	subs	r4, #1
 8009678:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800967c:	3901      	subs	r1, #1
 800967e:	4313      	orrs	r3, r2
 8009680:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009684:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009688:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800968c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800968e:	60c3      	str	r3, [r0, #12]
}
 8009690:	2000      	movs	r0, #0
 8009692:	4770      	bx	lr
 8009694:	ff0f0fff 	.word	0xff0f0fff

08009698 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009698:	b470      	push	{r4, r5, r6}
 800969a:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800969c:	68ce      	ldr	r6, [r1, #12]
 800969e:	4c08      	ldr	r4, [pc, #32]	; (80096c0 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80096a0:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80096a2:	e9d1 3500 	ldrd	r3, r5, [r1]
 80096a6:	6889      	ldr	r1, [r1, #8]
 80096a8:	432b      	orrs	r3, r5
 80096aa:	6915      	ldr	r5, [r2, #16]
 80096ac:	3901      	subs	r1, #1
 80096ae:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 80096b2:	402c      	ands	r4, r5
 80096b4:	4323      	orrs	r3, r4
 80096b6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 80096ba:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80096bc:	6113      	str	r3, [r2, #16]
}
 80096be:	4770      	bx	lr
 80096c0:	ffc00000 	.word	0xffc00000

080096c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80096c4:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 80096c8:	2000      	movs	r0, #0
{
 80096ca:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096cc:	6954      	ldr	r4, [r2, #20]
 80096ce:	4023      	ands	r3, r4
}
 80096d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096d4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80096d8:	6151      	str	r1, [r2, #20]
}
 80096da:	4770      	bx	lr
 80096dc:	ffffc001 	.word	0xffffc001

080096e0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80096e0:	4603      	mov	r3, r0
 80096e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80096e6:	4c15      	ldr	r4, [pc, #84]	; (800973c <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 80096e8:	2500      	movs	r5, #0
 80096ea:	4e15      	ldr	r6, [pc, #84]	; (8009740 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80096ec:	4628      	mov	r0, r5
 80096ee:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80096f2:	e9d3 7200 	ldrd	r7, r2, [r3]
 80096f6:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80096fa:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 80096fe:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8009700:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8009704:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8009706:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8009708:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800970a:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800970e:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8009712:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8009716:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800971a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800971c:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800971e:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8009720:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8009722:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8009724:	6a23      	ldr	r3, [r4, #32]
 8009726:	f106 0118 	add.w	r1, r6, #24
 800972a:	4628      	mov	r0, r5
 800972c:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800972e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009730:	f106 011c 	add.w	r1, r6, #28
 8009734:	4628      	mov	r0, r5
}
 8009736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800973a:	4718      	bx	r3
 800973c:	24001220 	.word	0x24001220
 8009740:	240011e0 	.word	0x240011e0

08009744 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8009744:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8009746:	4b05      	ldr	r3, [pc, #20]	; (800975c <UTIL_LCD_SetLayer+0x18>)
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	b133      	cbz	r3, 800975a <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800974c:	4d04      	ldr	r5, [pc, #16]	; (8009760 <UTIL_LCD_SetLayer+0x1c>)
 800974e:	4604      	mov	r4, r0
 8009750:	4601      	mov	r1, r0
 8009752:	6928      	ldr	r0, [r5, #16]
 8009754:	4798      	blx	r3
 8009756:	b900      	cbnz	r0, 800975a <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8009758:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	24001220 	.word	0x24001220
 8009760:	240011e0 	.word	0x240011e0

08009764 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8009764:	4a02      	ldr	r2, [pc, #8]	; (8009770 <UTIL_LCD_SetTextColor+0xc>)
 8009766:	68d3      	ldr	r3, [r2, #12]
 8009768:	015b      	lsls	r3, r3, #5
 800976a:	50d0      	str	r0, [r2, r3]
}
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	240011e0 	.word	0x240011e0

08009774 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <UTIL_LCD_SetBackColor+0xc>)
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800977c:	6058      	str	r0, [r3, #4]
}
 800977e:	4770      	bx	lr
 8009780:	240011e0 	.word	0x240011e0

08009784 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8009784:	4b02      	ldr	r3, [pc, #8]	; (8009790 <UTIL_LCD_SetFont+0xc>)
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800978c:	6098      	str	r0, [r3, #8]
}
 800978e:	4770      	bx	lr
 8009790:	240011e0 	.word	0x240011e0

08009794 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8009794:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009796:	4e13      	ldr	r6, [pc, #76]	; (80097e4 <UTIL_LCD_FillRect+0x50>)
{
 8009798:	4615      	mov	r5, r2
 800979a:	b083      	sub	sp, #12
 800979c:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800979e:	69f7      	ldr	r7, [r6, #28]
{
 80097a0:	462b      	mov	r3, r5
 80097a2:	460a      	mov	r2, r1
 80097a4:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80097a6:	2f02      	cmp	r7, #2
 80097a8:	d008      	beq.n	80097bc <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80097aa:	4f0f      	ldr	r7, [pc, #60]	; (80097e8 <UTIL_LCD_FillRect+0x54>)
 80097ac:	4601      	mov	r1, r0
 80097ae:	e9cd 4500 	strd	r4, r5, [sp]
 80097b2:	693c      	ldr	r4, [r7, #16]
 80097b4:	6930      	ldr	r0, [r6, #16]
 80097b6:	47a0      	blx	r4
  }
}
 80097b8:	b003      	add	sp, #12
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80097bc:	096f      	lsrs	r7, r5, #5
 80097be:	9400      	str	r4, [sp, #0]
 80097c0:	0a29      	lsrs	r1, r5, #8
 80097c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80097c6:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 80097ca:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 80097ce:	4601      	mov	r1, r0
 80097d0:	6930      	ldr	r0, [r6, #16]
 80097d2:	433c      	orrs	r4, r7
 80097d4:	4e04      	ldr	r6, [pc, #16]	; (80097e8 <UTIL_LCD_FillRect+0x54>)
 80097d6:	4325      	orrs	r5, r4
 80097d8:	6934      	ldr	r4, [r6, #16]
 80097da:	9501      	str	r5, [sp, #4]
 80097dc:	47a0      	blx	r4
}
 80097de:	b003      	add	sp, #12
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e2:	bf00      	nop
 80097e4:	240011e0 	.word	0x240011e0
 80097e8:	24001220 	.word	0x24001220

080097ec <UTIL_LCD_Clear>:
{
 80097ec:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80097ee:	2100      	movs	r1, #0
{
 80097f0:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80097f2:	4a05      	ldr	r2, [pc, #20]	; (8009808 <UTIL_LCD_Clear+0x1c>)
 80097f4:	9000      	str	r0, [sp, #0]
 80097f6:	4608      	mov	r0, r1
 80097f8:	6993      	ldr	r3, [r2, #24]
 80097fa:	6952      	ldr	r2, [r2, #20]
 80097fc:	f7ff ffca 	bl	8009794 <UTIL_LCD_FillRect>
}
 8009800:	b003      	add	sp, #12
 8009802:	f85d fb04 	ldr.w	pc, [sp], #4
 8009806:	bf00      	nop
 8009808:	240011e0 	.word	0x240011e0

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	; (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	; (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	; (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	; (8009850 <__libc_init_array+0x44>)
 8009820:	f000 f82e 	bl	8009880 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	08013600 	.word	0x08013600
 8009848:	08013600 	.word	0x08013600
 800984c:	08013600 	.word	0x08013600
 8009850:	08013604 	.word	0x08013604

08009854 <memcpy>:
 8009854:	440a      	add	r2, r1
 8009856:	4291      	cmp	r1, r2
 8009858:	f100 33ff 	add.w	r3, r0, #4294967295
 800985c:	d100      	bne.n	8009860 <memcpy+0xc>
 800985e:	4770      	bx	lr
 8009860:	b510      	push	{r4, lr}
 8009862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986a:	4291      	cmp	r1, r2
 800986c:	d1f9      	bne.n	8009862 <memcpy+0xe>
 800986e:	bd10      	pop	{r4, pc}

08009870 <memset>:
 8009870:	4402      	add	r2, r0
 8009872:	4603      	mov	r3, r0
 8009874:	4293      	cmp	r3, r2
 8009876:	d100      	bne.n	800987a <memset+0xa>
 8009878:	4770      	bx	lr
 800987a:	f803 1b01 	strb.w	r1, [r3], #1
 800987e:	e7f9      	b.n	8009874 <memset+0x4>

08009880 <_init>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr

0800988c <_fini>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr
