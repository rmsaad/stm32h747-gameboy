
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008274  08008274  000208c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008274  08008274  000208c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008274  08008274  000208c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008c8  24000000  0800827c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010304  240008c8  08008b44  000208c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24010bcc  08008b44  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000208c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039045  00000000  00000000  000208f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005be8  00000000  00000000  0005993b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012668  00000000  00000000  0005f523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00071b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e18  00000000  00000000  00072f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004487c  00000000  00000000  00074da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b39  00000000  00000000  000b9624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b766e  00000000  00000000  000db15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002927cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c8c  00000000  00000000  00292820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240008c8 	.word	0x240008c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006470 	.word	0x08006470

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240008cc 	.word	0x240008cc
 80002dc:	08006470 	.word	0x08006470

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000380:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000382:	492e      	ldr	r1, [pc, #184]	; (800043c <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000388:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800038c:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800038e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000392:	691a      	ldr	r2, [r3, #16]
 8000394:	f042 0210 	orr.w	r2, r2, #16
 8000398:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800039a:	680b      	ldr	r3, [r1, #0]
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	2b06      	cmp	r3, #6
 80003a2:	d805      	bhi.n	80003b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003a4:	680b      	ldr	r3, [r1, #0]
 80003a6:	f023 030f 	bic.w	r3, r3, #15
 80003aa:	f043 0307 	orr.w	r3, r3, #7
 80003ae:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003b2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003b4:	4a23      	ldr	r2, [pc, #140]	; (8000444 <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 80003b6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b8:	4820      	ldr	r0, [pc, #128]	; (800043c <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 80003ba:	f041 0101 	orr.w	r1, r1, #1
 80003be:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80003c0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c8:	6803      	ldr	r3, [r0, #0]
 80003ca:	071b      	lsls	r3, r3, #28
 80003cc:	d505      	bpl.n	80003da <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ce:	6803      	ldr	r3, [r0, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	f043 0307 	orr.w	r3, r3, #7
 80003d8:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <SystemInit+0xc0>)
 80003dc:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80003de:	491a      	ldr	r1, [pc, #104]	; (8000448 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 80003e0:	4c1a      	ldr	r4, [pc, #104]	; (800044c <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 80003e2:	481b      	ldr	r0, [pc, #108]	; (8000450 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 80003e4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80003e6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80003e8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80003ea:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80003ec:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80003ee:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80003f2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80003f4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80003f6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003fa:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003fc:	4c15      	ldr	r4, [pc, #84]	; (8000454 <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 80003fe:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000402:	4d15      	ldr	r5, [pc, #84]	; (8000458 <SystemInit+0xd8>)
 8000404:	4915      	ldr	r1, [pc, #84]	; (800045c <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 8000406:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000408:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800040a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800040c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000410:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000412:	682b      	ldr	r3, [r5, #0]
 8000414:	4019      	ands	r1, r3
 8000416:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800041a:	d202      	bcs.n	8000422 <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <SystemInit+0xe0>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000422:	4910      	ldr	r1, [pc, #64]	; (8000464 <SystemInit+0xe4>)
 8000424:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <SystemInit+0xb8>)
 800042a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800042e:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000430:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000432:	bc30      	pop	{r4, r5}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00
 800043c:	52002000 	.word	0x52002000
 8000440:	58024400 	.word	0x58024400
 8000444:	eaf6ed7f 	.word	0xeaf6ed7f
 8000448:	01010280 	.word	0x01010280
 800044c:	02020200 	.word	0x02020200
 8000450:	01ff0000 	.word	0x01ff0000
 8000454:	580000c0 	.word	0x580000c0
 8000458:	5c001000 	.word	0x5c001000
 800045c:	ffff0000 	.word	0xffff0000
 8000460:	51008108 	.word	0x51008108
 8000464:	52004000 	.word	0x52004000

08000468 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 800046c:	4a02      	ldr	r2, [pc, #8]	; (8000478 <vINCs_BC+0xc>)
 800046e:	8853      	ldrh	r3, [r2, #2]
 8000470:	3301      	adds	r3, #1
 8000472:	8053      	strh	r3, [r2, #2]
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	24000a30 	.word	0x24000a30

0800047c <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
void vRLCA(){}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)), reg.SP); reg.PC += 2;}
void vADDs_HL_BC(){}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 800047c:	4a02      	ldr	r2, [pc, #8]	; (8000488 <vDECs_BC+0xc>)
 800047e:	8853      	ldrh	r3, [r2, #2]
 8000480:	3b01      	subs	r3, #1
 8000482:	8053      	strh	r3, [r2, #2]
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	24000a30 	.word	0x24000a30

0800048c <vINCs_DE>:

/*********************0x1X*/
void vSTOP(){}
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 800048c:	4a02      	ldr	r2, [pc, #8]	; (8000498 <vINCs_DE+0xc>)
 800048e:	8893      	ldrh	r3, [r2, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	8093      	strh	r3, [r2, #4]
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	24000a30 	.word	0x24000a30

0800049c <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
void vRLA(){}
void vJR_r8(){}
void vADDs_HL_DE(){}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 800049c:	4a02      	ldr	r2, [pc, #8]	; (80004a8 <vDECs_DE+0xc>)
 800049e:	8893      	ldrh	r3, [r2, #4]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	8093      	strh	r3, [r2, #4]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	24000a30 	.word	0x24000a30

080004ac <vINCs_HL>:

/*0x2X*/
void vJR_NZ_r8(){}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 80004ac:	4a02      	ldr	r2, [pc, #8]	; (80004b8 <vINCs_HL+0xc>)
 80004ae:	88d3      	ldrh	r3, [r2, #6]
 80004b0:	3301      	adds	r3, #1
 80004b2:	80d3      	strh	r3, [r2, #6]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24000a30 	.word	0x24000a30

080004bc <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
void vDAA(){}
void vJR_Z_r8(){}
void vADDs_HL_HL(){}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 80004bc:	4a02      	ldr	r2, [pc, #8]	; (80004c8 <vDECs_HL+0xc>)
 80004be:	88d3      	ldrh	r3, [r2, #6]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	80d3      	strh	r3, [r2, #6]
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	24000a30 	.word	0x24000a30

080004cc <vINCs_SP>:

/*0x3X*/
void vJR_NC_r8(){}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 80004cc:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <vINCs_SP+0xc>)
 80004ce:	8913      	ldrh	r3, [r2, #8]
 80004d0:	3301      	adds	r3, #1
 80004d2:	8113      	strh	r3, [r2, #8]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	24000a30 	.word	0x24000a30

080004dc <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC + 1)); reg.PC += 1;}
void vSCF(){}
void vJR_C_r8(){}
void vADDs_HL_SP(){}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 80004dc:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <vDECs_SP+0xc>)
 80004de:	8913      	ldrh	r3, [r2, #8]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	8113      	strh	r3, [r2, #8]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	24000a30 	.word	0x24000a30

080004ec <vAND_B>:
void vSBC_A_L(){}
void vSBC_A_HL(){}
void vSBC_A_A(){}

/*0xAX*/
void vAND_B(){ reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <vAND_B+0x18>)
 80004ee:	785a      	ldrb	r2, [r3, #1]
 80004f0:	78d9      	ldrb	r1, [r3, #3]
 80004f2:	400a      	ands	r2, r1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	705a      	strb	r2, [r3, #1]
 80004f8:	bf0c      	ite	eq
 80004fa:	22a0      	moveq	r2, #160	; 0xa0
 80004fc:	2220      	movne	r2, #32
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	24000a30 	.word	0x24000a30

08000508 <vAND_C>:
void vAND_C(){ reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <vAND_C+0x18>)
 800050a:	785a      	ldrb	r2, [r3, #1]
 800050c:	7899      	ldrb	r1, [r3, #2]
 800050e:	400a      	ands	r2, r1
 8000510:	2a00      	cmp	r2, #0
 8000512:	705a      	strb	r2, [r3, #1]
 8000514:	bf0c      	ite	eq
 8000516:	22a0      	moveq	r2, #160	; 0xa0
 8000518:	2220      	movne	r2, #32
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	24000a30 	.word	0x24000a30

08000524 <vAND_D>:
void vAND_D(){ reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <vAND_D+0x18>)
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	7959      	ldrb	r1, [r3, #5]
 800052a:	400a      	ands	r2, r1
 800052c:	2a00      	cmp	r2, #0
 800052e:	705a      	strb	r2, [r3, #1]
 8000530:	bf0c      	ite	eq
 8000532:	22a0      	moveq	r2, #160	; 0xa0
 8000534:	2220      	movne	r2, #32
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	24000a30 	.word	0x24000a30

08000540 <vAND_E>:
void vAND_E(){ reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <vAND_E+0x18>)
 8000542:	785a      	ldrb	r2, [r3, #1]
 8000544:	7919      	ldrb	r1, [r3, #4]
 8000546:	400a      	ands	r2, r1
 8000548:	2a00      	cmp	r2, #0
 800054a:	705a      	strb	r2, [r3, #1]
 800054c:	bf0c      	ite	eq
 800054e:	22a0      	moveq	r2, #160	; 0xa0
 8000550:	2220      	movne	r2, #32
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	24000a30 	.word	0x24000a30

0800055c <vAND_H>:
void vAND_H(){ reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <vAND_H+0x18>)
 800055e:	785a      	ldrb	r2, [r3, #1]
 8000560:	79d9      	ldrb	r1, [r3, #7]
 8000562:	400a      	ands	r2, r1
 8000564:	2a00      	cmp	r2, #0
 8000566:	705a      	strb	r2, [r3, #1]
 8000568:	bf0c      	ite	eq
 800056a:	22a0      	moveq	r2, #160	; 0xa0
 800056c:	2220      	movne	r2, #32
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	24000a30 	.word	0x24000a30

08000578 <vAND_L>:
void vAND_L(){ reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <vAND_L+0x18>)
 800057a:	785a      	ldrb	r2, [r3, #1]
 800057c:	7999      	ldrb	r1, [r3, #6]
 800057e:	400a      	ands	r2, r1
 8000580:	2a00      	cmp	r2, #0
 8000582:	705a      	strb	r2, [r3, #1]
 8000584:	bf0c      	ite	eq
 8000586:	22a0      	moveq	r2, #160	; 0xa0
 8000588:	2220      	movne	r2, #32
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	24000a30 	.word	0x24000a30

08000594 <vAND_A>:
void vAND_HL(){ reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){ reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <vAND_A+0x10>)
 8000596:	785a      	ldrb	r2, [r3, #1]
 8000598:	2a00      	cmp	r2, #0
 800059a:	bf0c      	ite	eq
 800059c:	22a0      	moveq	r2, #160	; 0xa0
 800059e:	2220      	movne	r2, #32
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	4770      	bx	lr
 80005a4:	24000a30 	.word	0x24000a30

080005a8 <vXOR_B>:
void vXOR_B(){ reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <vXOR_B+0x18>)
 80005aa:	785a      	ldrb	r2, [r3, #1]
 80005ac:	78d9      	ldrb	r1, [r3, #3]
 80005ae:	ea82 0001 	eor.w	r0, r2, r1
 80005b2:	428a      	cmp	r2, r1
 80005b4:	bf0c      	ite	eq
 80005b6:	2280      	moveq	r2, #128	; 0x80
 80005b8:	2200      	movne	r2, #0
 80005ba:	7058      	strb	r0, [r3, #1]
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	4770      	bx	lr
 80005c0:	24000a30 	.word	0x24000a30

080005c4 <vXOR_C>:
void vXOR_C(){ reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <vXOR_C+0x18>)
 80005c6:	785a      	ldrb	r2, [r3, #1]
 80005c8:	7899      	ldrb	r1, [r3, #2]
 80005ca:	ea82 0001 	eor.w	r0, r2, r1
 80005ce:	428a      	cmp	r2, r1
 80005d0:	bf0c      	ite	eq
 80005d2:	2280      	moveq	r2, #128	; 0x80
 80005d4:	2200      	movne	r2, #0
 80005d6:	7058      	strb	r0, [r3, #1]
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	4770      	bx	lr
 80005dc:	24000a30 	.word	0x24000a30

080005e0 <vXOR_D>:
void vXOR_D(){ reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <vXOR_D+0x18>)
 80005e2:	785a      	ldrb	r2, [r3, #1]
 80005e4:	7959      	ldrb	r1, [r3, #5]
 80005e6:	ea82 0001 	eor.w	r0, r2, r1
 80005ea:	428a      	cmp	r2, r1
 80005ec:	bf0c      	ite	eq
 80005ee:	2280      	moveq	r2, #128	; 0x80
 80005f0:	2200      	movne	r2, #0
 80005f2:	7058      	strb	r0, [r3, #1]
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	4770      	bx	lr
 80005f8:	24000a30 	.word	0x24000a30

080005fc <vXOR_E>:
void vXOR_E(){ reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <vXOR_E+0x18>)
 80005fe:	785a      	ldrb	r2, [r3, #1]
 8000600:	7919      	ldrb	r1, [r3, #4]
 8000602:	ea82 0001 	eor.w	r0, r2, r1
 8000606:	428a      	cmp	r2, r1
 8000608:	bf0c      	ite	eq
 800060a:	2280      	moveq	r2, #128	; 0x80
 800060c:	2200      	movne	r2, #0
 800060e:	7058      	strb	r0, [r3, #1]
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	4770      	bx	lr
 8000614:	24000a30 	.word	0x24000a30

08000618 <vXOR_H>:
void vXOR_H(){ reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <vXOR_H+0x18>)
 800061a:	785a      	ldrb	r2, [r3, #1]
 800061c:	79d9      	ldrb	r1, [r3, #7]
 800061e:	ea82 0001 	eor.w	r0, r2, r1
 8000622:	428a      	cmp	r2, r1
 8000624:	bf0c      	ite	eq
 8000626:	2280      	moveq	r2, #128	; 0x80
 8000628:	2200      	movne	r2, #0
 800062a:	7058      	strb	r0, [r3, #1]
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	4770      	bx	lr
 8000630:	24000a30 	.word	0x24000a30

08000634 <vXOR_L>:
void vXOR_L(){ reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <vXOR_L+0x18>)
 8000636:	785a      	ldrb	r2, [r3, #1]
 8000638:	7999      	ldrb	r1, [r3, #6]
 800063a:	ea82 0001 	eor.w	r0, r2, r1
 800063e:	428a      	cmp	r2, r1
 8000640:	bf0c      	ite	eq
 8000642:	2280      	moveq	r2, #128	; 0x80
 8000644:	2200      	movne	r2, #0
 8000646:	7058      	strb	r0, [r3, #1]
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	4770      	bx	lr
 800064c:	24000a30 	.word	0x24000a30

08000650 <vXOR_A>:
void vXOR_HL(){ reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){ reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <vXOR_A+0x8>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	801a      	strh	r2, [r3, #0]
 8000656:	4770      	bx	lr
 8000658:	24000a30 	.word	0x24000a30

0800065c <vOR_B>:

/*0xBX*/
void vOR_B(){ reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <vOR_B+0x18>)
 800065e:	785a      	ldrb	r2, [r3, #1]
 8000660:	78d9      	ldrb	r1, [r3, #3]
 8000662:	430a      	orrs	r2, r1
 8000664:	2a00      	cmp	r2, #0
 8000666:	705a      	strb	r2, [r3, #1]
 8000668:	bf0c      	ite	eq
 800066a:	2280      	moveq	r2, #128	; 0x80
 800066c:	2200      	movne	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	24000a30 	.word	0x24000a30

08000678 <vOR_C>:
void vOR_C(){ reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <vOR_C+0x18>)
 800067a:	785a      	ldrb	r2, [r3, #1]
 800067c:	7899      	ldrb	r1, [r3, #2]
 800067e:	430a      	orrs	r2, r1
 8000680:	2a00      	cmp	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]
 8000684:	bf0c      	ite	eq
 8000686:	2280      	moveq	r2, #128	; 0x80
 8000688:	2200      	movne	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	24000a30 	.word	0x24000a30

08000694 <vOR_D>:
void vOR_D(){ reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <vOR_D+0x18>)
 8000696:	785a      	ldrb	r2, [r3, #1]
 8000698:	7959      	ldrb	r1, [r3, #5]
 800069a:	430a      	orrs	r2, r1
 800069c:	2a00      	cmp	r2, #0
 800069e:	705a      	strb	r2, [r3, #1]
 80006a0:	bf0c      	ite	eq
 80006a2:	2280      	moveq	r2, #128	; 0x80
 80006a4:	2200      	movne	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	24000a30 	.word	0x24000a30

080006b0 <vOR_E>:
void vOR_E(){ reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <vOR_E+0x18>)
 80006b2:	785a      	ldrb	r2, [r3, #1]
 80006b4:	7919      	ldrb	r1, [r3, #4]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	705a      	strb	r2, [r3, #1]
 80006bc:	bf0c      	ite	eq
 80006be:	2280      	moveq	r2, #128	; 0x80
 80006c0:	2200      	movne	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	24000a30 	.word	0x24000a30

080006cc <vOR_H>:
void vOR_H(){ reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <vOR_H+0x18>)
 80006ce:	785a      	ldrb	r2, [r3, #1]
 80006d0:	79d9      	ldrb	r1, [r3, #7]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	705a      	strb	r2, [r3, #1]
 80006d8:	bf0c      	ite	eq
 80006da:	2280      	moveq	r2, #128	; 0x80
 80006dc:	2200      	movne	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	24000a30 	.word	0x24000a30

080006e8 <vOR_L>:
void vOR_L(){ reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <vOR_L+0x18>)
 80006ea:	785a      	ldrb	r2, [r3, #1]
 80006ec:	7999      	ldrb	r1, [r3, #6]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	bf0c      	ite	eq
 80006f6:	2280      	moveq	r2, #128	; 0x80
 80006f8:	2200      	movne	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	24000a30 	.word	0x24000a30

08000704 <vOR_A>:
void vOR_HL(){ reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){ reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <vOR_A+0x10>)
 8000706:	785a      	ldrb	r2, [r3, #1]
 8000708:	2a00      	cmp	r2, #0
 800070a:	bf0c      	ite	eq
 800070c:	2280      	moveq	r2, #128	; 0x80
 800070e:	2200      	movne	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	4770      	bx	lr
 8000714:	24000a30 	.word	0x24000a30

08000718 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){}
void vOR_d8(){}
void vRST_30H(){}
void vLDs_HL_SP_r8(){}
void vLDs_SP_HL(){ reg.SP = reg.HL;}
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <vLDs_SP_HL+0x8>)
 800071a:	88da      	ldrh	r2, [r3, #6]
 800071c:	811a      	strh	r2, [r3, #8]
 800071e:	4770      	bx	lr
 8000720:	24000a30 	.word	0x24000a30

08000724 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 8000724:	b510      	push	{r4, lr}
 8000726:	4c05      	ldr	r4, [pc, #20]	; (800073c <vLD_B_d8+0x18>)
 8000728:	8960      	ldrh	r0, [r4, #10]
 800072a:	3001      	adds	r0, #1
 800072c:	b280      	uxth	r0, r0
 800072e:	f000 fb8b 	bl	8000e48 <ucGBMemoryRead>
 8000732:	8963      	ldrh	r3, [r4, #10]
 8000734:	70e0      	strb	r0, [r4, #3]
 8000736:	3301      	adds	r3, #1
 8000738:	8163      	strh	r3, [r4, #10]
 800073a:	bd10      	pop	{r4, pc}
 800073c:	24000a30 	.word	0x24000a30

08000740 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 8000740:	b510      	push	{r4, lr}
 8000742:	4c03      	ldr	r4, [pc, #12]	; (8000750 <vLD_A_BC+0x10>)
 8000744:	8860      	ldrh	r0, [r4, #2]
 8000746:	f000 fb7f 	bl	8000e48 <ucGBMemoryRead>
 800074a:	7060      	strb	r0, [r4, #1]
 800074c:	bd10      	pop	{r4, pc}
 800074e:	bf00      	nop
 8000750:	24000a30 	.word	0x24000a30

08000754 <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 8000754:	b510      	push	{r4, lr}
 8000756:	4c05      	ldr	r4, [pc, #20]	; (800076c <vLD_C_d8+0x18>)
 8000758:	8960      	ldrh	r0, [r4, #10]
 800075a:	3001      	adds	r0, #1
 800075c:	b280      	uxth	r0, r0
 800075e:	f000 fb73 	bl	8000e48 <ucGBMemoryRead>
 8000762:	8963      	ldrh	r3, [r4, #10]
 8000764:	70a0      	strb	r0, [r4, #2]
 8000766:	3301      	adds	r3, #1
 8000768:	8163      	strh	r3, [r4, #10]
 800076a:	bd10      	pop	{r4, pc}
 800076c:	24000a30 	.word	0x24000a30

08000770 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 8000770:	b510      	push	{r4, lr}
 8000772:	4c05      	ldr	r4, [pc, #20]	; (8000788 <vLD_D_d8+0x18>)
 8000774:	8960      	ldrh	r0, [r4, #10]
 8000776:	3001      	adds	r0, #1
 8000778:	b280      	uxth	r0, r0
 800077a:	f000 fb65 	bl	8000e48 <ucGBMemoryRead>
 800077e:	8963      	ldrh	r3, [r4, #10]
 8000780:	7160      	strb	r0, [r4, #5]
 8000782:	3301      	adds	r3, #1
 8000784:	8163      	strh	r3, [r4, #10]
 8000786:	bd10      	pop	{r4, pc}
 8000788:	24000a30 	.word	0x24000a30

0800078c <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 800078c:	b510      	push	{r4, lr}
 800078e:	4c03      	ldr	r4, [pc, #12]	; (800079c <vLD_A_DE+0x10>)
 8000790:	88a0      	ldrh	r0, [r4, #4]
 8000792:	f000 fb59 	bl	8000e48 <ucGBMemoryRead>
 8000796:	7060      	strb	r0, [r4, #1]
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	24000a30 	.word	0x24000a30

080007a0 <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 80007a0:	b510      	push	{r4, lr}
 80007a2:	4c05      	ldr	r4, [pc, #20]	; (80007b8 <vLD_E_d8+0x18>)
 80007a4:	8960      	ldrh	r0, [r4, #10]
 80007a6:	3001      	adds	r0, #1
 80007a8:	b280      	uxth	r0, r0
 80007aa:	f000 fb4d 	bl	8000e48 <ucGBMemoryRead>
 80007ae:	8963      	ldrh	r3, [r4, #10]
 80007b0:	7120      	strb	r0, [r4, #4]
 80007b2:	3301      	adds	r3, #1
 80007b4:	8163      	strh	r3, [r4, #10]
 80007b6:	bd10      	pop	{r4, pc}
 80007b8:	24000a30 	.word	0x24000a30

080007bc <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 80007bc:	b510      	push	{r4, lr}
 80007be:	4c05      	ldr	r4, [pc, #20]	; (80007d4 <vLD_H_d8+0x18>)
 80007c0:	8960      	ldrh	r0, [r4, #10]
 80007c2:	3001      	adds	r0, #1
 80007c4:	b280      	uxth	r0, r0
 80007c6:	f000 fb3f 	bl	8000e48 <ucGBMemoryRead>
 80007ca:	8963      	ldrh	r3, [r4, #10]
 80007cc:	71e0      	strb	r0, [r4, #7]
 80007ce:	3301      	adds	r3, #1
 80007d0:	8163      	strh	r3, [r4, #10]
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	24000a30 	.word	0x24000a30

080007d8 <vLD_L_d8>:
 80007d8:	f7ff bff0 	b.w	80007bc <vLD_H_d8>

080007dc <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 80007dc:	b510      	push	{r4, lr}
 80007de:	4c04      	ldr	r4, [pc, #16]	; (80007f0 <vLD_A_HLI+0x14>)
 80007e0:	88e0      	ldrh	r0, [r4, #6]
 80007e2:	f000 fb31 	bl	8000e48 <ucGBMemoryRead>
 80007e6:	88e3      	ldrh	r3, [r4, #6]
 80007e8:	7060      	strb	r0, [r4, #1]
 80007ea:	3301      	adds	r3, #1
 80007ec:	80e3      	strh	r3, [r4, #6]
 80007ee:	bd10      	pop	{r4, pc}
 80007f0:	24000a30 	.word	0x24000a30

080007f4 <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 80007f4:	b510      	push	{r4, lr}
 80007f6:	4c04      	ldr	r4, [pc, #16]	; (8000808 <vLD_A_HLD+0x14>)
 80007f8:	88e0      	ldrh	r0, [r4, #6]
 80007fa:	f000 fb25 	bl	8000e48 <ucGBMemoryRead>
 80007fe:	88e3      	ldrh	r3, [r4, #6]
 8000800:	7060      	strb	r0, [r4, #1]
 8000802:	3b01      	subs	r3, #1
 8000804:	80e3      	strh	r3, [r4, #6]
 8000806:	bd10      	pop	{r4, pc}
 8000808:	24000a30 	.word	0x24000a30

0800080c <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC + 1); reg.PC += 1;}
 800080c:	b510      	push	{r4, lr}
 800080e:	4c05      	ldr	r4, [pc, #20]	; (8000824 <vLD_A_d8+0x18>)
 8000810:	8960      	ldrh	r0, [r4, #10]
 8000812:	3001      	adds	r0, #1
 8000814:	b280      	uxth	r0, r0
 8000816:	f000 fb17 	bl	8000e48 <ucGBMemoryRead>
 800081a:	8963      	ldrh	r3, [r4, #10]
 800081c:	7060      	strb	r0, [r4, #1]
 800081e:	3301      	adds	r3, #1
 8000820:	8163      	strh	r3, [r4, #10]
 8000822:	bd10      	pop	{r4, pc}
 8000824:	24000a30 	.word	0x24000a30

08000828 <vAND_HL>:
void vAND_HL(){ reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000828:	b510      	push	{r4, lr}
 800082a:	4c06      	ldr	r4, [pc, #24]	; (8000844 <vAND_HL+0x1c>)
 800082c:	88e0      	ldrh	r0, [r4, #6]
 800082e:	f000 fb0b 	bl	8000e48 <ucGBMemoryRead>
 8000832:	7863      	ldrb	r3, [r4, #1]
 8000834:	4018      	ands	r0, r3
 8000836:	2800      	cmp	r0, #0
 8000838:	7060      	strb	r0, [r4, #1]
 800083a:	bf0c      	ite	eq
 800083c:	23a0      	moveq	r3, #160	; 0xa0
 800083e:	2320      	movne	r3, #32
 8000840:	7023      	strb	r3, [r4, #0]
 8000842:	bd10      	pop	{r4, pc}
 8000844:	24000a30 	.word	0x24000a30

08000848 <vXOR_HL>:
void vXOR_HL(){ reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000848:	b510      	push	{r4, lr}
 800084a:	4c07      	ldr	r4, [pc, #28]	; (8000868 <vXOR_HL+0x20>)
 800084c:	88e0      	ldrh	r0, [r4, #6]
 800084e:	f000 fafb 	bl	8000e48 <ucGBMemoryRead>
 8000852:	7863      	ldrb	r3, [r4, #1]
 8000854:	ea83 0200 	eor.w	r2, r3, r0
 8000858:	4283      	cmp	r3, r0
 800085a:	bf0c      	ite	eq
 800085c:	2080      	moveq	r0, #128	; 0x80
 800085e:	2000      	movne	r0, #0
 8000860:	7062      	strb	r2, [r4, #1]
 8000862:	7020      	strb	r0, [r4, #0]
 8000864:	bd10      	pop	{r4, pc}
 8000866:	bf00      	nop
 8000868:	24000a30 	.word	0x24000a30

0800086c <vOR_HL>:
void vOR_HL(){ reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	b510      	push	{r4, lr}
 800086e:	4c07      	ldr	r4, [pc, #28]	; (800088c <vOR_HL+0x20>)
 8000870:	88e0      	ldrh	r0, [r4, #6]
 8000872:	f000 fae9 	bl	8000e48 <ucGBMemoryRead>
 8000876:	7863      	ldrb	r3, [r4, #1]
 8000878:	4318      	orrs	r0, r3
 800087a:	b2c0      	uxtb	r0, r0
 800087c:	2800      	cmp	r0, #0
 800087e:	7060      	strb	r0, [r4, #1]
 8000880:	bf0c      	ite	eq
 8000882:	2380      	moveq	r3, #128	; 0x80
 8000884:	2300      	movne	r3, #0
 8000886:	7023      	strb	r3, [r4, #0]
 8000888:	bd10      	pop	{r4, pc}
 800088a:	bf00      	nop
 800088c:	24000a30 	.word	0x24000a30

08000890 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
 8000890:	b538      	push	{r3, r4, r5, lr}
 8000892:	4c0a      	ldr	r4, [pc, #40]	; (80008bc <vLDs_BC_d16+0x2c>)
 8000894:	8960      	ldrh	r0, [r4, #10]
 8000896:	3001      	adds	r0, #1
 8000898:	b280      	uxth	r0, r0
 800089a:	f000 fad5 	bl	8000e48 <ucGBMemoryRead>
 800089e:	8963      	ldrh	r3, [r4, #10]
 80008a0:	4605      	mov	r5, r0
 80008a2:	1c98      	adds	r0, r3, #2
 80008a4:	b280      	uxth	r0, r0
 80008a6:	f000 facf 	bl	8000e48 <ucGBMemoryRead>
 80008aa:	4601      	mov	r1, r0
 80008ac:	4628      	mov	r0, r5
 80008ae:	f000 fa6f 	bl	8000d90 <concat_16bit_bigEndian>
 80008b2:	8963      	ldrh	r3, [r4, #10]
 80008b4:	8060      	strh	r0, [r4, #2]
 80008b6:	3302      	adds	r3, #2
 80008b8:	8163      	strh	r3, [r4, #10]
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	24000a30 	.word	0x24000a30

080008c0 <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
 80008c0:	b538      	push	{r3, r4, r5, lr}
 80008c2:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <vLDs_DE_d16+0x2c>)
 80008c4:	8960      	ldrh	r0, [r4, #10]
 80008c6:	3001      	adds	r0, #1
 80008c8:	b280      	uxth	r0, r0
 80008ca:	f000 fabd 	bl	8000e48 <ucGBMemoryRead>
 80008ce:	8963      	ldrh	r3, [r4, #10]
 80008d0:	4605      	mov	r5, r0
 80008d2:	1c98      	adds	r0, r3, #2
 80008d4:	b280      	uxth	r0, r0
 80008d6:	f000 fab7 	bl	8000e48 <ucGBMemoryRead>
 80008da:	4601      	mov	r1, r0
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 fa57 	bl	8000d90 <concat_16bit_bigEndian>
 80008e2:	8963      	ldrh	r3, [r4, #10]
 80008e4:	80a0      	strh	r0, [r4, #4]
 80008e6:	3302      	adds	r3, #2
 80008e8:	8163      	strh	r3, [r4, #10]
 80008ea:	bd38      	pop	{r3, r4, r5, pc}
 80008ec:	24000a30 	.word	0x24000a30

080008f0 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4c0a      	ldr	r4, [pc, #40]	; (800091c <vLDs_HL_d16+0x2c>)
 80008f4:	8960      	ldrh	r0, [r4, #10]
 80008f6:	3001      	adds	r0, #1
 80008f8:	b280      	uxth	r0, r0
 80008fa:	f000 faa5 	bl	8000e48 <ucGBMemoryRead>
 80008fe:	8963      	ldrh	r3, [r4, #10]
 8000900:	4605      	mov	r5, r0
 8000902:	1c98      	adds	r0, r3, #2
 8000904:	b280      	uxth	r0, r0
 8000906:	f000 fa9f 	bl	8000e48 <ucGBMemoryRead>
 800090a:	4601      	mov	r1, r0
 800090c:	4628      	mov	r0, r5
 800090e:	f000 fa3f 	bl	8000d90 <concat_16bit_bigEndian>
 8000912:	8963      	ldrh	r3, [r4, #10]
 8000914:	80e0      	strh	r0, [r4, #6]
 8000916:	3302      	adds	r3, #2
 8000918:	8163      	strh	r3, [r4, #10]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	24000a30 	.word	0x24000a30

08000920 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)); reg.PC += 2;}
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4c0a      	ldr	r4, [pc, #40]	; (800094c <vLDs_SP_d16+0x2c>)
 8000924:	8960      	ldrh	r0, [r4, #10]
 8000926:	3001      	adds	r0, #1
 8000928:	b280      	uxth	r0, r0
 800092a:	f000 fa8d 	bl	8000e48 <ucGBMemoryRead>
 800092e:	8963      	ldrh	r3, [r4, #10]
 8000930:	4605      	mov	r5, r0
 8000932:	1c98      	adds	r0, r3, #2
 8000934:	b280      	uxth	r0, r0
 8000936:	f000 fa87 	bl	8000e48 <ucGBMemoryRead>
 800093a:	4601      	mov	r1, r0
 800093c:	4628      	mov	r0, r5
 800093e:	f000 fa27 	bl	8000d90 <concat_16bit_bigEndian>
 8000942:	8963      	ldrh	r3, [r4, #10]
 8000944:	8120      	strh	r0, [r4, #8]
 8000946:	3302      	adds	r3, #2
 8000948:	8163      	strh	r3, [r4, #10]
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	24000a30 	.word	0x24000a30

08000950 <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <vLD_BC_A+0xc>)
 8000952:	7859      	ldrb	r1, [r3, #1]
 8000954:	8858      	ldrh	r0, [r3, #2]
 8000956:	f000 ba71 	b.w	8000e3c <vGBMemoryWrite>
 800095a:	bf00      	nop
 800095c:	24000a30 	.word	0x24000a30

08000960 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC + 1), ucGBMemoryRead(reg.PC + 2)), reg.SP); reg.PC += 2;}
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <vLDs_a16_SP+0x30>)
 8000964:	8960      	ldrh	r0, [r4, #10]
 8000966:	3001      	adds	r0, #1
 8000968:	b280      	uxth	r0, r0
 800096a:	f000 fa6d 	bl	8000e48 <ucGBMemoryRead>
 800096e:	8963      	ldrh	r3, [r4, #10]
 8000970:	4605      	mov	r5, r0
 8000972:	1c98      	adds	r0, r3, #2
 8000974:	b280      	uxth	r0, r0
 8000976:	f000 fa67 	bl	8000e48 <ucGBMemoryRead>
 800097a:	4601      	mov	r1, r0
 800097c:	4628      	mov	r0, r5
 800097e:	f000 fa07 	bl	8000d90 <concat_16bit_bigEndian>
 8000982:	7a21      	ldrb	r1, [r4, #8]
 8000984:	f000 fa5a 	bl	8000e3c <vGBMemoryWrite>
 8000988:	8963      	ldrh	r3, [r4, #10]
 800098a:	3302      	adds	r3, #2
 800098c:	8163      	strh	r3, [r4, #10]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	24000a30 	.word	0x24000a30

08000994 <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000994:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <vLD_DE_A+0xc>)
 8000996:	7859      	ldrb	r1, [r3, #1]
 8000998:	8898      	ldrh	r0, [r3, #4]
 800099a:	f000 ba4f 	b.w	8000e3c <vGBMemoryWrite>
 800099e:	bf00      	nop
 80009a0:	24000a30 	.word	0x24000a30

080009a4 <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 80009a4:	b510      	push	{r4, lr}
 80009a6:	4c04      	ldr	r4, [pc, #16]	; (80009b8 <vLD_HLI_A+0x14>)
 80009a8:	7861      	ldrb	r1, [r4, #1]
 80009aa:	88e0      	ldrh	r0, [r4, #6]
 80009ac:	f000 fa46 	bl	8000e3c <vGBMemoryWrite>
 80009b0:	88e3      	ldrh	r3, [r4, #6]
 80009b2:	3301      	adds	r3, #1
 80009b4:	80e3      	strh	r3, [r4, #6]
 80009b6:	bd10      	pop	{r4, pc}
 80009b8:	24000a30 	.word	0x24000a30

080009bc <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 80009bc:	b510      	push	{r4, lr}
 80009be:	4c04      	ldr	r4, [pc, #16]	; (80009d0 <vLD_HLD_A+0x14>)
 80009c0:	7861      	ldrb	r1, [r4, #1]
 80009c2:	88e0      	ldrh	r0, [r4, #6]
 80009c4:	f000 fa3a 	bl	8000e3c <vGBMemoryWrite>
 80009c8:	88e3      	ldrh	r3, [r4, #6]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	80e3      	strh	r3, [r4, #6]
 80009ce:	bd10      	pop	{r4, pc}
 80009d0:	24000a30 	.word	0x24000a30

080009d4 <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC + 1)); reg.PC += 1;}
 80009d4:	b538      	push	{r3, r4, r5, lr}
 80009d6:	4c07      	ldr	r4, [pc, #28]	; (80009f4 <vLD_HL_d8+0x20>)
 80009d8:	8960      	ldrh	r0, [r4, #10]
 80009da:	88e5      	ldrh	r5, [r4, #6]
 80009dc:	3001      	adds	r0, #1
 80009de:	b280      	uxth	r0, r0
 80009e0:	f000 fa32 	bl	8000e48 <ucGBMemoryRead>
 80009e4:	4601      	mov	r1, r0
 80009e6:	4628      	mov	r0, r5
 80009e8:	f000 fa28 	bl	8000e3c <vGBMemoryWrite>
 80009ec:	8963      	ldrh	r3, [r4, #10]
 80009ee:	3301      	adds	r3, #1
 80009f0:	8163      	strh	r3, [r4, #10]
 80009f2:	bd38      	pop	{r3, r4, r5, pc}
 80009f4:	24000a30 	.word	0x24000a30

080009f8 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 80009f8:	4901      	ldr	r1, [pc, #4]	; (8000a00 <vINC_B+0x8>)
 80009fa:	1cc8      	adds	r0, r1, #3
 80009fc:	f000 b9d2 	b.w	8000da4 <v8bitRegisterINC>
 8000a00:	24000a30 	.word	0x24000a30

08000a04 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000a04:	4901      	ldr	r1, [pc, #4]	; (8000a0c <vINC_C+0x8>)
 8000a06:	1c88      	adds	r0, r1, #2
 8000a08:	f000 b9cc 	b.w	8000da4 <v8bitRegisterINC>
 8000a0c:	24000a30 	.word	0x24000a30

08000a10 <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000a10:	4901      	ldr	r1, [pc, #4]	; (8000a18 <vINC_D+0x8>)
 8000a12:	1d48      	adds	r0, r1, #5
 8000a14:	f000 b9c6 	b.w	8000da4 <v8bitRegisterINC>
 8000a18:	24000a30 	.word	0x24000a30

08000a1c <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000a1c:	4901      	ldr	r1, [pc, #4]	; (8000a24 <vINC_E+0x8>)
 8000a1e:	1d08      	adds	r0, r1, #4
 8000a20:	f000 b9c0 	b.w	8000da4 <v8bitRegisterINC>
 8000a24:	24000a30 	.word	0x24000a30

08000a28 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000a28:	4901      	ldr	r1, [pc, #4]	; (8000a30 <vINC_H+0x8>)
 8000a2a:	1dc8      	adds	r0, r1, #7
 8000a2c:	f000 b9ba 	b.w	8000da4 <v8bitRegisterINC>
 8000a30:	24000a30 	.word	0x24000a30

08000a34 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000a34:	4901      	ldr	r1, [pc, #4]	; (8000a3c <vINC_L+0x8>)
 8000a36:	1d88      	adds	r0, r1, #6
 8000a38:	f000 b9b4 	b.w	8000da4 <v8bitRegisterINC>
 8000a3c:	24000a30 	.word	0x24000a30

08000a40 <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000a40:	4901      	ldr	r1, [pc, #4]	; (8000a48 <vINC_A+0x8>)
 8000a42:	1c48      	adds	r0, r1, #1
 8000a44:	f000 b9ae 	b.w	8000da4 <v8bitRegisterINC>
 8000a48:	24000a30 	.word	0x24000a30

08000a4c <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000a4c:	4901      	ldr	r1, [pc, #4]	; (8000a54 <vDEC_B+0x8>)
 8000a4e:	1cc8      	adds	r0, r1, #3
 8000a50:	f000 b9c6 	b.w	8000de0 <v8bitRegisterDEC>
 8000a54:	24000a30 	.word	0x24000a30

08000a58 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000a58:	4901      	ldr	r1, [pc, #4]	; (8000a60 <vDEC_C+0x8>)
 8000a5a:	1c88      	adds	r0, r1, #2
 8000a5c:	f000 b9c0 	b.w	8000de0 <v8bitRegisterDEC>
 8000a60:	24000a30 	.word	0x24000a30

08000a64 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000a64:	4901      	ldr	r1, [pc, #4]	; (8000a6c <vDEC_D+0x8>)
 8000a66:	1d48      	adds	r0, r1, #5
 8000a68:	f000 b9ba 	b.w	8000de0 <v8bitRegisterDEC>
 8000a6c:	24000a30 	.word	0x24000a30

08000a70 <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000a70:	4901      	ldr	r1, [pc, #4]	; (8000a78 <vDEC_E+0x8>)
 8000a72:	1d08      	adds	r0, r1, #4
 8000a74:	f000 b9b4 	b.w	8000de0 <v8bitRegisterDEC>
 8000a78:	24000a30 	.word	0x24000a30

08000a7c <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000a7c:	4901      	ldr	r1, [pc, #4]	; (8000a84 <vDEC_H+0x8>)
 8000a7e:	1dc8      	adds	r0, r1, #7
 8000a80:	f000 b9ae 	b.w	8000de0 <v8bitRegisterDEC>
 8000a84:	24000a30 	.word	0x24000a30

08000a88 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000a88:	4901      	ldr	r1, [pc, #4]	; (8000a90 <vDEC_L+0x8>)
 8000a8a:	1d88      	adds	r0, r1, #6
 8000a8c:	f000 b9a8 	b.w	8000de0 <v8bitRegisterDEC>
 8000a90:	24000a30 	.word	0x24000a30

08000a94 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000a94:	4901      	ldr	r1, [pc, #4]	; (8000a9c <vDEC_A+0x8>)
 8000a96:	1c48      	adds	r0, r1, #1
 8000a98:	f000 b9a2 	b.w	8000de0 <v8bitRegisterDEC>
 8000a9c:	24000a30 	.word	0x24000a30

08000aa0 <vRST_38H>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <vRLCA>:
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <vADDs_HL_BC>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <vRRCA>:
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <vSTOP>:
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <vRLA>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <vJR_r8>:
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <vADDs_HL_DE>:
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <vRRA>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <vJR_NZ_r8>:
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <vDAA>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <vJR_Z_r8>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <vADDs_HL_HL>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <vCPL>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vJR_NC_r8>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <vINC_HL>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <vDEC_HL>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <vSCF>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <vJR_C_r8>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <vADDs_HL_SP>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <vCCF>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <vLD_B_B>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <vLD_B_C>:
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <vLD_B_D>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <vLD_B_E>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <vLD_B_H>:
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <vLD_B_L>:
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <vLD_B_HL>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <vLD_B_A>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <vLD_C_B>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <vLD_C_C>:
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <vLD_C_D>:
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <vLD_C_E>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <vLD_C_H>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <vLD_C_L>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <vLD_C_HL>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <vLD_C_A>:
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <vLD_D_B>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <vLD_D_C>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <vLD_D_D>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <vLD_D_E>:
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <vLD_D_H>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <vLD_D_L>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <vLD_D_HL>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <vLD_D_A>:
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <vLD_E_B>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <vLD_E_C>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <vLD_E_D>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <vLD_E_E>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <vLD_E_H>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <vLD_E_L>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <vLD_E_HL>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <vLD_E_A>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <vLD_H_B>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <vLD_H_C>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <vLD_H_D>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <vLD_H_E>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vLD_H_H>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <vLD_H_L>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <vLD_H_HL>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <vLD_H_A>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <vLD_L_B>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <vLD_L_C>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <vLD_L_D>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <vLD_L_E>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <vLD_L_H>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <vLD_L_L>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <vLD_L_HL>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <vLD_L_A>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <vLD_HL_B>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <vLD_HL_C>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vLD_HL_D>:
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <vLD_HL_E>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vLD_HL_H>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <vLD_HL_L>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <vHALT>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <vLD_HL_A>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <vLD_A_B>:
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <vLD_A_C>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <vLD_A_D>:
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <vLD_A_E>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <vLD_A_H>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <vLD_A_L>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <vLD_A_HL>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <vLD_A_A>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <vADD_A_B>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <vADD_A_C>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <vADD_A_D>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <vADD_A_E>:
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <vADD_A_H>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <vADD_A_L>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <vADD_A_HL>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <vADD_A_A>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <vADC_A_B>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <vADC_A_C>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <vADC_A_D>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <vADC_A_E>:
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <vADC_A_H>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <vADC_A_L>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <vADC_A_HL>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <vADC_A_A>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <vSUB_B>:
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <vSUB_C>:
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <vSUB_D>:
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <vSUB_E>:
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <vSUB_H>:
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <vSUB_L>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <vSUB_HL>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <vSUB_A>:
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <vSBC_A_B>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <vSBC_A_C>:
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <vSBC_A_D>:
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <vSBC_A_E>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <vSBC_A_H>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <vSBC_A_L>:
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <vSBC_A_HL>:
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <vSBC_A_A>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <vCP_B>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <vCP_C>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <vCP_D>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <vCP_E>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <vCP_H>:
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <vCP_L>:
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <vCP_HL>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <vCP_A>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <vRET_NZ>:
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <vPOP_BC>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <vJP_NZ_a16>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <vJP_a16>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <vCALL_NZ_a16>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <vPUSH_BC>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <vADD_A_d8>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <vRST_00H>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <vRET_Z>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <vRET>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <vJP_Z_a16>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <vPREFIX>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <vCALL_Z_a16>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <vCALL_a16>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <vADC_A_d8>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <vRST_08H>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <vRET_NC>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <vPOP_DE>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <vJP_NC_a16>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <vCALL_NC_a16>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <vPUSH_DE>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <vSUB_d8>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <vRST_10H>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <vRET_C>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <vRETI>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <vJP_C_a16>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <vCALL_C_a16>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <vSBC_A_d8>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <vRST_18H>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <vLDH_a8_A>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <vPOP_HL>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <vLD_fC_A>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <vPUSH_HL>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <vAND_d8>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <vRST20H>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <vADDs_SP_r8>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <vJP_HL>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <vLD_a16_A>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <vXOR_d8>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <vRST_28H>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <vLDH_A_a8>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <vPOP_AF>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <vLD_A_fC>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <vDI>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <vPUSH_AF>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <vOR_d8>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <vRST_30H>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <vLDs_HL_SP_r8>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <vLD_A_a16>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <vEI>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <vCP_d8>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <vGBCPUboot>:
	reg.BC = 0x0013;
	reg.DE = 0x00D8;
	reg.HL = 0x014D;
}

void vGBCPUboot(){
 8000d60:	b538      	push	{r3, r4, r5, lr}
	if(reg.PC <= 0xFF){
 8000d62:	4c09      	ldr	r4, [pc, #36]	; (8000d88 <vGBCPUboot+0x28>)
 8000d64:	8960      	ldrh	r0, [r4, #10]
 8000d66:	28ff      	cmp	r0, #255	; 0xff
 8000d68:	d900      	bls.n	8000d6c <vGBCPUboot+0xc>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
	}
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8000d6c:	f000 f86c 	bl	8000e48 <ucGBMemoryRead>
 8000d70:	4605      	mov	r5, r0

void vGBCPUinstr(uint8_t opcode){
	vGBMemorySetOP(opcode);
 8000d72:	f000 f855 	bl	8000e20 <vGBMemorySetOP>
	((void (*)(void))instructions[opcode].instr)();
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <vGBCPUboot+0x2c>)
 8000d78:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8000d7c:	4798      	blx	r3
	reg.PC++;
 8000d7e:	8963      	ldrh	r3, [r4, #10]
 8000d80:	3301      	adds	r3, #1
 8000d82:	8163      	strh	r3, [r4, #10]
}
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop
 8000d88:	24000a30 	.word	0x24000a30
 8000d8c:	24000008 	.word	0x24000008

08000d90 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	uint16_t pow = 16;
    while(x >= pow)
 8000d90:	280f      	cmp	r0, #15
	uint16_t pow = 16;
 8000d92:	bf8c      	ite	hi
 8000d94:	f44f 7380 	movhi.w	r3, #256	; 0x100
 8000d98:	2310      	movls	r3, #16
        pow *= 16;
    return y * pow + x;
 8000d9a:	fb01 0003 	mla	r0, r1, r3, r0
}
 8000d9e:	b280      	uxth	r0, r0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <v8bitRegisterINC>:
uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
}

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0f) == 0x0f) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8000da4:	7803      	ldrb	r3, [r0, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8000dac:	780b      	ldrb	r3, [r1, #0]
 8000dae:	bf0c      	ite	eq
 8000db0:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8000db4:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8000db8:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8000dba:	7803      	ldrb	r3, [r0, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8000dc0:	f991 2000 	ldrsb.w	r2, [r1]
 8000dc4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8000dc8:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8000dca:	7800      	ldrb	r0, [r0, #0]
 8000dcc:	b118      	cbz	r0, 8000dd6 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8000dce:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8000dd2:	700b      	strb	r3, [r1, #0]
}
 8000dd4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8000dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	700b      	strb	r3, [r1, #0]
}
 8000dde:	4770      	bx	lr

08000de0 <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0f) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8000de0:	7803      	ldrb	r3, [r0, #0]
 8000de2:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8000de6:	780b      	ldrb	r3, [r1, #0]
 8000de8:	bf14      	ite	ne
 8000dea:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8000dee:	f043 0320 	orreq.w	r3, r3, #32
 8000df2:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8000df4:	7803      	ldrb	r3, [r0, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8000dfa:	f991 3000 	ldrsb.w	r3, [r1]
 8000dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e02:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8000e04:	7802      	ldrb	r2, [r0, #0]
 8000e06:	b12a      	cbz	r2, 8000e14 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8000e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	700b      	strb	r3, [r1, #0]
}
 8000e12:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8000e14:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	700b      	strb	r3, [r1, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <vGBMemorySetOP>:
registers reg;
memory mem;
uint8_t current_op;

void vGBMemorySetOP(uint8_t op){
	current_op = op;
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <vGBMemorySetOP+0x8>)
 8000e22:	7018      	strb	r0, [r3, #0]
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	24000a2c 	.word	0x24000a2c

08000e2c <vGBMemoryLoad>:

// loads data into memory map
void vGBMemoryLoad(const void* data){
 8000e2c:	4601      	mov	r1, r0
	memcpy(mem.ram , data, 256);
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	4801      	ldr	r0, [pc, #4]	; (8000e38 <vGBMemoryLoad+0xc>)
 8000e34:	f004 beee 	b.w	8005c14 <memcpy>
 8000e38:	24000a3c 	.word	0x24000a3c

08000e3c <vGBMemoryWrite>:
}

void vGBMemoryWrite(uint16_t address, uint8_t data){
	mem.ram[address] = data;
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <vGBMemoryWrite+0x8>)
 8000e3e:	5419      	strb	r1, [r3, r0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24000a3c 	.word	0x24000a3c

08000e48 <ucGBMemoryRead>:

// reads a location from memory map
uint8_t ucGBMemoryRead(uint16_t address){
	return mem.ram[address];
 8000e48:	4b01      	ldr	r3, [pc, #4]	; (8000e50 <ucGBMemoryRead+0x8>)
}
 8000e4a:	5c18      	ldrb	r0, [r3, r0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	24000a3c 	.word	0x24000a3c

08000e54 <vGBMemoryPrint>:

void vGBMemoryPrint(){
 8000e54:	b530      	push	{r4, r5, lr}
	char temp[15];
	sprintf(temp,"Opcode: 0x%.2x", current_op);
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <vGBMemoryPrint+0xf4>)
void vGBMemoryPrint(){
 8000e58:	b085      	sub	sp, #20
	sprintf(temp,"Opcode: 0x%.2x", current_op);
 8000e5a:	493c      	ldr	r1, [pc, #240]	; (8000f4c <vGBMemoryPrint+0xf8>)
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	4668      	mov	r0, sp
 8000e60:	f004 fee6 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(6), (uint8_t *) temp, LEFT_MODE);
	sprintf(temp,"AF: 0x%.4x",reg.AF);
 8000e64:	4c3a      	ldr	r4, [pc, #232]	; (8000f50 <vGBMemoryPrint+0xfc>)
	UTIL_LCD_DisplayStringAt(500, LINE(6), (uint8_t *) temp, LEFT_MODE);
 8000e66:	f004 fd69 	bl	800593c <UTIL_LCD_GetFont>
 8000e6a:	88c1      	ldrh	r1, [r0, #6]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	466a      	mov	r2, sp
 8000e70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e78:	0049      	lsls	r1, r1, #1
 8000e7a:	f004 fe15 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"AF: 0x%.4x",reg.AF);
 8000e7e:	8822      	ldrh	r2, [r4, #0]
 8000e80:	4934      	ldr	r1, [pc, #208]	; (8000f54 <vGBMemoryPrint+0x100>)
 8000e82:	4668      	mov	r0, sp
 8000e84:	f004 fed4 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(7), (uint8_t *) temp, LEFT_MODE);
 8000e88:	f004 fd58 	bl	800593c <UTIL_LCD_GetFont>
 8000e8c:	88c1      	ldrh	r1, [r0, #6]
 8000e8e:	2303      	movs	r3, #3
 8000e90:	466a      	mov	r2, sp
 8000e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e96:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000e9a:	f004 fe05 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"BC: 0x%.4x",reg.BC);
 8000e9e:	8862      	ldrh	r2, [r4, #2]
 8000ea0:	492d      	ldr	r1, [pc, #180]	; (8000f58 <vGBMemoryPrint+0x104>)
 8000ea2:	4668      	mov	r0, sp
 8000ea4:	f004 fec4 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(8), (uint8_t *) temp, LEFT_MODE);
 8000ea8:	f004 fd48 	bl	800593c <UTIL_LCD_GetFont>
 8000eac:	2303      	movs	r3, #3
 8000eae:	88c1      	ldrh	r1, [r0, #6]
 8000eb0:	466a      	mov	r2, sp
 8000eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb6:	4099      	lsls	r1, r3
 8000eb8:	f004 fdf6 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"DE: 0x%.4x",reg.DE);
 8000ebc:	88a2      	ldrh	r2, [r4, #4]
 8000ebe:	4927      	ldr	r1, [pc, #156]	; (8000f5c <vGBMemoryPrint+0x108>)
 8000ec0:	4668      	mov	r0, sp
 8000ec2:	f004 feb5 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(9), (uint8_t *) temp, LEFT_MODE);
 8000ec6:	f004 fd39 	bl	800593c <UTIL_LCD_GetFont>
 8000eca:	88c1      	ldrh	r1, [r0, #6]
 8000ecc:	2303      	movs	r3, #3
 8000ece:	466a      	mov	r2, sp
 8000ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000ed8:	f004 fde6 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"HL: 0x%.4x",reg.HL);
 8000edc:	88e2      	ldrh	r2, [r4, #6]
 8000ede:	4920      	ldr	r1, [pc, #128]	; (8000f60 <vGBMemoryPrint+0x10c>)
 8000ee0:	4668      	mov	r0, sp
 8000ee2:	f004 fea5 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(10), (uint8_t *) temp, LEFT_MODE);
 8000ee6:	f004 fd29 	bl	800593c <UTIL_LCD_GetFont>
 8000eea:	88c1      	ldrh	r1, [r0, #6]
 8000eec:	2303      	movs	r3, #3
 8000eee:	466a      	mov	r2, sp
 8000ef0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef8:	0049      	lsls	r1, r1, #1
 8000efa:	f004 fdd5 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"SP: 0x%.4x",reg.SP);
 8000efe:	8922      	ldrh	r2, [r4, #8]
 8000f00:	4918      	ldr	r1, [pc, #96]	; (8000f64 <vGBMemoryPrint+0x110>)
 8000f02:	4668      	mov	r0, sp
 8000f04:	f004 fe94 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(11), (uint8_t *) temp, LEFT_MODE);
 8000f08:	f004 fd18 	bl	800593c <UTIL_LCD_GetFont>
 8000f0c:	88c1      	ldrh	r1, [r0, #6]
 8000f0e:	2303      	movs	r3, #3
 8000f10:	466a      	mov	r2, sp
 8000f12:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000f16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8000f1e:	f004 fdc3 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
	sprintf(temp,"PC: 0x%.4x",reg.PC);
 8000f22:	8962      	ldrh	r2, [r4, #10]
 8000f24:	4910      	ldr	r1, [pc, #64]	; (8000f68 <vGBMemoryPrint+0x114>)
 8000f26:	4668      	mov	r0, sp
 8000f28:	f004 fe82 	bl	8005c30 <siprintf>
	UTIL_LCD_DisplayStringAt(500, LINE(12), (uint8_t *) temp, LEFT_MODE);
 8000f2c:	f004 fd06 	bl	800593c <UTIL_LCD_GetFont>
 8000f30:	88c1      	ldrh	r1, [r0, #6]
 8000f32:	466a      	mov	r2, sp
 8000f34:	2303      	movs	r3, #3
 8000f36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3e:	0089      	lsls	r1, r1, #2
 8000f40:	f004 fdb2 	bl	8005aa8 <UTIL_LCD_DisplayStringAt>
}
 8000f44:	b005      	add	sp, #20
 8000f46:	bd30      	pop	{r4, r5, pc}
 8000f48:	24000a2c 	.word	0x24000a2c
 8000f4c:	08006498 	.word	0x08006498
 8000f50:	24000a30 	.word	0x24000a30
 8000f54:	080064a8 	.word	0x080064a8
 8000f58:	080064b4 	.word	0x080064b4
 8000f5c:	080064c0 	.word	0x080064c0
 8000f60:	080064cc 	.word	0x080064cc
 8000f64:	080064d8 	.word	0x080064d8
 8000f68:	080064e4 	.word	0x080064e4

08000f6c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f6e:	2004      	movs	r0, #4
{
 8000f70:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f72:	f002 ffcd 	bl	8003f10 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f76:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <SystemClock_Config+0xc8>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <SystemClock_Config+0xcc>)
 8000f80:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f84:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f86:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f8a:	f002 0201 	and.w	r2, r2, #1
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	699a      	ldr	r2, [r3, #24]
 8000f92:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa2:	6983      	ldr	r3, [r0, #24]
 8000fa4:	049b      	lsls	r3, r3, #18
 8000fa6:	d5fc      	bpl.n	8000fa2 <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000fae:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000fb2:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000fb4:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb6:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fba:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000fbe:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000fc0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000fc2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fc4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fca:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fcc:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000fd4:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000fd8:	f002 ffd6 	bl	8003f88 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000fdc:	b108      	cbz	r0, 8000fe2 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fde:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe2:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000fe4:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000fee:	4629      	mov	r1, r5
 8000ff0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ff2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ffc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001000:	f003 fb58 	bl	80046b4 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8001004:	b108      	cbz	r0, 800100a <SystemClock_Config+0x9e>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <SystemClock_Config+0xd0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001012:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001014:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001018:	f042 0202 	orr.w	r2, r2, #2
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 800102c:	f001 fe06 	bl	8002c3c <HAL_EnableCompensationCell>
}
 8001030:	b01f      	add	sp, #124	; 0x7c
 8001032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001034:	58000400 	.word	0x58000400
 8001038:	58024800 	.word	0x58024800
 800103c:	58024400 	.word	0x58024400

08001040 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	498d      	ldr	r1, [pc, #564]	; (800127c <main+0x23c>)
 8001046:	e002      	b.n	800104e <main+0xe>
 8001048:	3b01      	subs	r3, #1
 800104a:	f000 8113 	beq.w	8001274 <main+0x234>
 800104e:	680a      	ldr	r2, [r1, #0]
 8001050:	0412      	lsls	r2, r2, #16
 8001052:	d4f9      	bmi.n	8001048 <main+0x8>
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001058:	f001 fd96 	bl	8002b88 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800105c:	4a88      	ldr	r2, [pc, #544]	; (8001280 <main+0x240>)
 800105e:	6953      	ldr	r3, [r2, #20]
 8001060:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001064:	d111      	bne.n	800108a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800106a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800106e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001072:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001076:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800107a:	6953      	ldr	r3, [r2, #20]
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001086:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800108a:	4a7d      	ldr	r2, [pc, #500]	; (8001280 <main+0x240>)
 800108c:	6953      	ldr	r3, [r2, #20]
 800108e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001092:	d124      	bne.n	80010de <main+0x9e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001094:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800109c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010a0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010a4:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010a8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80010ac:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010ae:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010b2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010b4:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010b8:	3b01      	subs	r3, #1
 80010ba:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010bc:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80010c0:	d1f8      	bne.n	80010b4 <main+0x74>
    } while(sets-- != 0U);
 80010c2:	3820      	subs	r0, #32
 80010c4:	f110 0f20 	cmn.w	r0, #32
 80010c8:	d1f1      	bne.n	80010ae <main+0x6e>
 80010ca:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010ce:	6953      	ldr	r3, [r2, #20]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010da:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 80010de:	4c67      	ldr	r4, [pc, #412]	; (800127c <main+0x23c>)
  SystemClock_Config();
 80010e0:	f7ff ff44 	bl	8000f6c <SystemClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 80010e4:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 80010e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80010f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 80010fe:	f002 fcaf 	bl	8003a60 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001102:	2100      	movs	r1, #0
 8001104:	4608      	mov	r0, r1
 8001106:	f002 fcb9 	bl	8003a7c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800110a:	4623      	mov	r3, r4
 800110c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001110:	e002      	b.n	8001118 <main+0xd8>
 8001112:	3a01      	subs	r2, #1
 8001114:	f000 80b0 	beq.w	8001278 <main+0x238>
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	0409      	lsls	r1, r1, #16
 800111c:	d5f9      	bpl.n	8001112 <main+0xd2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2401      	movs	r4, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	2600      	movs	r6, #0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001126:	f44f 4570 	mov.w	r5, #61440	; 0xf000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	f042 0204 	orr.w	r2, r2, #4
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800112e:	a907      	add	r1, sp, #28
 8001130:	4854      	ldr	r0, [pc, #336]	; (8001284 <main+0x244>)
  UTIL_LCD_FillRect(0, 0, 160*3, 480, UTIL_LCD_COLOR_BLACK);
 8001132:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800113a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800113e:	f002 0204 	and.w	r2, r2, #4
 8001142:	9204      	str	r2, [sp, #16]
 8001144:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114a:	4322      	orrs	r2, r4
 800114c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001150:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001154:	4022      	ands	r2, r4
 8001156:	9205      	str	r2, [sp, #20]
 8001158:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800115e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001162:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001166:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	960b      	str	r6, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001170:	9206      	str	r2, [sp, #24]
 8001172:	9a06      	ldr	r2, [sp, #24]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001174:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800117c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	9609      	str	r6, [sp, #36]	; 0x24
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800118c:	9507      	str	r5, [sp, #28]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800118e:	9303      	str	r3, [sp, #12]
 8001190:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001194:	f002 fb32 	bl	80037fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	a907      	add	r1, sp, #28
 800119e:	483a      	ldr	r0, [pc, #232]	; (8001288 <main+0x248>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	960a      	str	r6, [sp, #40]	; 0x28
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){									// read the button input
 80011a4:	4d38      	ldr	r5, [pc, #224]	; (8001288 <main+0x248>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	e9cd 6608 	strd	r6, r6, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f002 fb27 	bl	80037fc <HAL_GPIO_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80011ae:	4621      	mov	r1, r4
 80011b0:	4630      	mov	r0, r6
  UTIL_LCD_FillRect(0, (480 - (144*3))/2, 160*3, 144*3, UTIL_LCD_COLOR_BLUE);
 80011b2:	4c36      	ldr	r4, [pc, #216]	; (800128c <main+0x24c>)
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80011b4:	f001 fb84 	bl	80028c0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80011b8:	4835      	ldr	r0, [pc, #212]	; (8001290 <main+0x250>)
 80011ba:	f004 fb65 	bl	8005888 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80011be:	4630      	mov	r0, r6
 80011c0:	f004 fb94 	bl	80058ec <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f004 fcea 	bl	8005ba0 <UTIL_LCD_Clear>
  UTIL_LCD_FillRect(0, 0, 160*3, 480, UTIL_LCD_COLOR_BLACK);
 80011cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011d0:	4631      	mov	r1, r6
 80011d2:	4630      	mov	r0, r6
 80011d4:	461a      	mov	r2, r3
 80011d6:	9700      	str	r7, [sp, #0]
 80011d8:	f004 fcb6 	bl	8005b48 <UTIL_LCD_FillRect>
  UTIL_LCD_FillRect(0, (480 - (144*3))/2, 160*3, 144*3, UTIL_LCD_COLOR_BLUE);
 80011dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011e4:	2118      	movs	r1, #24
 80011e6:	4630      	mov	r0, r6
 80011e8:	9400      	str	r4, [sp, #0]
 80011ea:	f004 fcad 	bl	8005b48 <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	f004 fb93 	bl	800591c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80011f6:	4620      	mov	r0, r4
 80011f8:	f004 fb88 	bl	800590c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 80011fc:	4825      	ldr	r0, [pc, #148]	; (8001294 <main+0x254>)
 80011fe:	f004 fb95 	bl	800592c <UTIL_LCD_SetFont>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8001202:	f04f 30ff 	mov.w	r0, #4294967295
 8001206:	f004 fccb 	bl	8005ba0 <UTIL_LCD_Clear>
  UTIL_LCD_FillRect(0, 0, 160*3, 480, UTIL_LCD_COLOR_BLACK);
 800120a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800120e:	4631      	mov	r1, r6
 8001210:	4630      	mov	r0, r6
 8001212:	461a      	mov	r2, r3
 8001214:	9700      	str	r7, [sp, #0]
 8001216:	f004 fc97 	bl	8005b48 <UTIL_LCD_FillRect>
  UTIL_LCD_FillRect(0, (480 - (144*3))/2, 160*3, 144*3, UTIL_LCD_COLOR_BLUE);
 800121a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800121e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001222:	2118      	movs	r1, #24
 8001224:	4630      	mov	r0, r6
 8001226:	9400      	str	r4, [sp, #0]
 8001228:	f004 fc8e 	bl	8005b48 <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f004 fb74 	bl	800591c <UTIL_LCD_SetBackColor>
		  vGBMemoryLoad(dmg_boot_bin);													// load boot rom into approiate place in memory map
 8001234:	4e18      	ldr	r6, [pc, #96]	; (8001298 <main+0x258>)
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8001236:	4620      	mov	r0, r4
		  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);										// toggle debug light
 8001238:	4c12      	ldr	r4, [pc, #72]	; (8001284 <main+0x244>)
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800123a:	f004 fb67 	bl	800590c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <main+0x254>)
 8001240:	f004 fb74 	bl	800592c <UTIL_LCD_SetFont>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){									// read the button input
 8001244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001248:	4628      	mov	r0, r5
 800124a:	f002 fbf5 	bl	8003a38 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
		  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);										// toggle debug light
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	4620      	mov	r0, r4
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){									// read the button input
 8001256:	b143      	cbz	r3, 800126a <main+0x22a>
		  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);										// toggle debug light
 8001258:	f002 fbf8 	bl	8003a4c <HAL_GPIO_TogglePin>
		  vGBMemoryLoad(dmg_boot_bin);													// load boot rom into approiate place in memory map
 800125c:	4630      	mov	r0, r6
 800125e:	f7ff fde5 	bl	8000e2c <vGBMemoryLoad>
		  vGBCPUboot();
 8001262:	f7ff fd7d 	bl	8000d60 <vGBCPUboot>
		  vGBMemoryPrint();
 8001266:	f7ff fdf5 	bl	8000e54 <vGBMemoryPrint>
  HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f001 fccd 	bl	8002c0c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){									// read the button input
 8001272:	e7e7      	b.n	8001244 <main+0x204>
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
  while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x236>
 8001278:	b672      	cpsid	i
 800127a:	e7fe      	b.n	800127a <main+0x23a>
 800127c:	58024400 	.word	0x58024400
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	58022000 	.word	0x58022000
 8001288:	58020800 	.word	0x58020800
 800128c:	ff0000ff 	.word	0xff0000ff
 8001290:	0800675c 	.word	0x0800675c
 8001294:	2400085c 	.word	0x2400085c
 8001298:	080064f0 	.word	0x080064f0

0800129c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <HardFault_Handler>
 80012a2:	bf00      	nop

080012a4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler>
 80012a6:	bf00      	nop

080012a8 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <BusFault_Handler>
 80012aa:	bf00      	nop

080012ac <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler>
 80012ae:	bf00      	nop

080012b0 <SVC_Handler>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <DebugMon_Handler>:
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <PendSV_Handler>:
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80012bc:	f001 bc94 	b.w	8002be8 <HAL_IncTick>

080012c0 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <LTDC_IRQHandler+0x8>)
 80012c2:	f002 bcf7 	b.w	8003cb4 <HAL_LTDC_IRQHandler>
 80012c6:	bf00      	nop
 80012c8:	24010a3c 	.word	0x24010a3c

080012cc <LTDC_ER_IRQHandler>:
 80012cc:	f7ff bff8 	b.w	80012c0 <LTDC_IRQHandler>

080012d0 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80012d0:	4801      	ldr	r0, [pc, #4]	; (80012d8 <DSI_IRQHandler+0x8>)
 80012d2:	f001 bfb5 	b.w	8003240 <HAL_DSI_IRQHandler>
 80012d6:	bf00      	nop
 80012d8:	24010b00 	.word	0x24010b00

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012de:	4c0d      	ldr	r4, [pc, #52]	; (8001314 <_sbrk+0x38>)
{
 80012e0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <_sbrk+0x3c>)
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80012e6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 80012ea:	b12a      	cbz	r2, 80012f8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ec:	4413      	add	r3, r2
 80012ee:	428b      	cmp	r3, r1
 80012f0:	d808      	bhi.n	8001304 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80012f2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80012f4:	6023      	str	r3, [r4, #0]
}
 80012f6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <_sbrk+0x44>)
 80012fa:	4602      	mov	r2, r0
 80012fc:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4413      	add	r3, r2
 8001300:	428b      	cmp	r3, r1
 8001302:	d9f6      	bls.n	80012f2 <_sbrk+0x16>
    errno = ENOMEM;
 8001304:	f004 fc5c 	bl	8005bc0 <__errno>
 8001308:	230c      	movs	r3, #12
    return (void *)-1;
 800130a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800130e:	6003      	str	r3, [r0, #0]
}
 8001310:	4610      	mov	r0, r2
 8001312:	bd10      	pop	{r4, pc}
 8001314:	240008e4 	.word	0x240008e4
 8001318:	24040000 	.word	0x24040000
 800131c:	00000400 	.word	0x00000400
 8001320:	24010bd0 	.word	0x24010bd0

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001328:	f7ff f82a 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f004 fc3b 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff fe73 	bl	8001040 <main>
  bx  lr
 800135a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001360:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001364:	240008c8 	.word	0x240008c8
  ldr r2, =_sidata
 8001368:	0800827c 	.word	0x0800827c
  ldr r2, =_sbss
 800136c:	240008c8 	.word	0x240008c8
  ldr r4, =_ebss
 8001370:	24010bcc 	.word	0x24010bcc

08001374 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC3_IRQHandler>
	...

08001378 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800137a:	4c0e      	ldr	r4, [pc, #56]	; (80013b4 <IS42S32800J_ModeRegConfig+0x3c>)
 800137c:	2304      	movs	r3, #4
{
 800137e:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8001380:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8001382:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001384:	69d7      	ldr	r7, [r2, #28]
 8001386:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800138a:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800138c:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 800138e:	6955      	ldr	r5, [r2, #20]
 8001390:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8001392:	6995      	ldr	r5, [r2, #24]
 8001394:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 8001396:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8001398:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 800139c:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800139e:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 80013a0:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 80013a2:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013a4:	f004 f98c 	bl	80056c0 <HAL_SDRAM_SendCommand>
 80013a8:	3800      	subs	r0, #0
 80013aa:	bf18      	it	ne
 80013ac:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80013ae:	4240      	negs	r0, r0
 80013b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	240008e8 	.word	0x240008e8

080013b8 <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80013b8:	680a      	ldr	r2, [r1, #0]
{
 80013ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80013bc:	4c22      	ldr	r4, [pc, #136]	; (8001448 <IS42S32800J_Init+0x90>)
 80013be:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 80013c0:	2700      	movs	r7, #0
{
 80013c2:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 80013c4:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013c6:	4621      	mov	r1, r4
 80013c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80013cc:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 80013ce:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80013d0:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 80013d2:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013d4:	f004 f974 	bl	80056c0 <HAL_SDRAM_SendCommand>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d132      	bne.n	8001442 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80013dc:	f001 fc10 	bl	8002c00 <HAL_GetTick>
 80013e0:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80013e2:	f001 fc0d 	bl	8002c00 <HAL_GetTick>
 80013e6:	4287      	cmp	r7, r0
 80013e8:	d0fb      	beq.n	80013e2 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80013ea:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80013ec:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 80013ee:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 80013f0:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80013f2:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80013f8:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013fa:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 80013fc:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80013fe:	4912      	ldr	r1, [pc, #72]	; (8001448 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8001400:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8001402:	f004 f95d 	bl	80056c0 <HAL_SDRAM_SendCommand>
 8001406:	4603      	mov	r3, r0
 8001408:	b9d8      	cbnz	r0, 8001442 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800140a:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 800140c:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 800140e:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8001414:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8001416:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 8001418:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800141a:	490b      	ldr	r1, [pc, #44]	; (8001448 <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 800141c:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 800141e:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8001420:	f004 f94e 	bl	80056c0 <HAL_SDRAM_SendCommand>
 8001424:	b968      	cbnz	r0, 8001442 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8001426:	4629      	mov	r1, r5
 8001428:	4630      	mov	r0, r6
 800142a:	f7ff ffa5 	bl	8001378 <IS42S32800J_ModeRegConfig>
 800142e:	b940      	cbnz	r0, 8001442 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001430:	68a9      	ldr	r1, [r5, #8]
 8001432:	4630      	mov	r0, r6
 8001434:	f004 f964 	bl	8005700 <HAL_SDRAM_ProgramRefreshRate>
 8001438:	3800      	subs	r0, #0
 800143a:	bf18      	it	ne
 800143c:	2001      	movne	r0, #1
 800143e:	4240      	negs	r0, r0
}
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8001442:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001448:	240008e8 	.word	0x240008e8

0800144c <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8001456:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	600b      	str	r3, [r1, #0]
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	240008f8 	.word	0x240008f8

08001464 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8001466:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	600b      	str	r3, [r1, #0]
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	240008f8 	.word	0x240008f8

08001474 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <OTM8009A_GetXSize+0x1c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b123      	cbz	r3, 8001484 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800147a:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 800147e:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8001480:	600b      	str	r3, [r1, #0]
}
 8001482:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8001484:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8001488:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800148a:	600b      	str	r3, [r1, #0]
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	240008f8 	.word	0x240008f8

08001494 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <OTM8009A_GetYSize+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b123      	cbz	r3, 80014a4 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800149a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 800149e:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 80014a0:	600b      	str	r3, [r1, #0]
}
 80014a2:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 80014a4:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 80014a8:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 80014aa:	600b      	str	r3, [r1, #0]
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	240008f8 	.word	0x240008f8

080014b4 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80014e4:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80014e6:	6884      	ldr	r4, [r0, #8]
 80014e8:	8800      	ldrh	r0, [r0, #0]
 80014ea:	46a4      	mov	ip, r4
}
 80014ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80014f0:	4760      	bx	ip
 80014f2:	bf00      	nop

080014f4 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014f4:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80014f6:	6844      	ldr	r4, [r0, #4]
 80014f8:	8800      	ldrh	r0, [r0, #0]
 80014fa:	46a4      	mov	ip, r4
}
 80014fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001500:	4760      	bx	ip
 8001502:	bf00      	nop

08001504 <OTM8009A_Init>:
{
 8001504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001508:	2300      	movs	r3, #0
 800150a:	f100 0710 	add.w	r7, r0, #16
{
 800150e:	b082      	sub	sp, #8
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001516:	4619      	mov	r1, r3
 8001518:	4ae0      	ldr	r2, [pc, #896]	; (800189c <OTM8009A_Init+0x398>)
 800151a:	4638      	mov	r0, r7
 800151c:	f000 fcd6 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8001520:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001522:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8001524:	4ade      	ldr	r2, [pc, #888]	; (80018a0 <OTM8009A_Init+0x39c>)
 8001526:	21ff      	movs	r1, #255	; 0xff
 8001528:	4638      	mov	r0, r7
 800152a:	f000 fccf 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800152e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8001530:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001532:	4adc      	ldr	r2, [pc, #880]	; (80018a4 <OTM8009A_Init+0x3a0>)
 8001534:	4619      	mov	r1, r3
 8001536:	4638      	mov	r0, r7
 8001538:	f000 fcc8 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800153c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800153e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001540:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8001542:	4ad9      	ldr	r2, [pc, #868]	; (80018a8 <OTM8009A_Init+0x3a4>)
 8001544:	21ff      	movs	r1, #255	; 0xff
 8001546:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001548:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800154a:	f000 fcbf 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800154e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8001550:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001552:	4ad4      	ldr	r2, [pc, #848]	; (80018a4 <OTM8009A_Init+0x3a0>)
 8001554:	4619      	mov	r1, r3
 8001556:	4638      	mov	r0, r7
 8001558:	f000 fcb8 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800155c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800155e:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8001560:	2300      	movs	r3, #0
 8001562:	4ad2      	ldr	r2, [pc, #840]	; (80018ac <OTM8009A_Init+0x3a8>)
 8001564:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001566:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8001568:	4638      	mov	r0, r7
 800156a:	f000 fcaf 	bl	8001ecc <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800156e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8001572:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8001574:	4798      	blx	r3
 8001576:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800157c:	4798      	blx	r3
 800157e:	1b00      	subs	r0, r0, r4
 8001580:	2809      	cmp	r0, #9
 8001582:	d9f9      	bls.n	8001578 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8001584:	2300      	movs	r3, #0
 8001586:	4aca      	ldr	r2, [pc, #808]	; (80018b0 <OTM8009A_Init+0x3ac>)
 8001588:	4638      	mov	r0, r7
 800158a:	4619      	mov	r1, r3
 800158c:	f000 fc9e 	bl	8001ecc <otm8009a_write_reg>
 8001590:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8001592:	2300      	movs	r3, #0
 8001594:	4ac7      	ldr	r2, [pc, #796]	; (80018b4 <OTM8009A_Init+0x3b0>)
 8001596:	21c4      	movs	r1, #196	; 0xc4
 8001598:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800159a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800159c:	f000 fc96 	bl	8001ecc <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80015a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80015a4:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80015a6:	4798      	blx	r3
 80015a8:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80015ae:	4798      	blx	r3
 80015b0:	1b40      	subs	r0, r0, r5
 80015b2:	2809      	cmp	r0, #9
 80015b4:	d9f9      	bls.n	80015aa <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80015b6:	2300      	movs	r3, #0
 80015b8:	4abf      	ldr	r2, [pc, #764]	; (80018b8 <OTM8009A_Init+0x3b4>)
 80015ba:	4638      	mov	r0, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	f000 fc85 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80015c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80015c4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80015c6:	4abd      	ldr	r2, [pc, #756]	; (80018bc <OTM8009A_Init+0x3b8>)
 80015c8:	21c5      	movs	r1, #197	; 0xc5
 80015ca:	4638      	mov	r0, r7
 80015cc:	f000 fc7e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80015d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80015d2:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80015d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80015d6:	4619      	mov	r1, r3
 80015d8:	4ab9      	ldr	r2, [pc, #740]	; (80018c0 <OTM8009A_Init+0x3bc>)
 80015da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80015dc:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80015de:	f000 fc75 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80015e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80015e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80015e6:	4ab7      	ldr	r2, [pc, #732]	; (80018c4 <OTM8009A_Init+0x3c0>)
 80015e8:	21c5      	movs	r1, #197	; 0xc5
 80015ea:	4638      	mov	r0, r7
 80015ec:	f000 fc6e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80015f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80015f2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80015f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80015f6:	4619      	mov	r1, r3
 80015f8:	4ab3      	ldr	r2, [pc, #716]	; (80018c8 <OTM8009A_Init+0x3c4>)
 80015fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80015fc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80015fe:	f000 fc65 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8001602:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8001604:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8001606:	4ab1      	ldr	r2, [pc, #708]	; (80018cc <OTM8009A_Init+0x3c8>)
 8001608:	21c0      	movs	r1, #192	; 0xc0
 800160a:	4638      	mov	r0, r7
 800160c:	f000 fc5e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001610:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8001612:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8001614:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001616:	4619      	mov	r1, r3
 8001618:	4aa0      	ldr	r2, [pc, #640]	; (800189c <OTM8009A_Init+0x398>)
 800161a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800161c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800161e:	f000 fc55 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8001622:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001624:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8001626:	4aaa      	ldr	r2, [pc, #680]	; (80018d0 <OTM8009A_Init+0x3cc>)
 8001628:	21d9      	movs	r1, #217	; 0xd9
 800162a:	4638      	mov	r0, r7
 800162c:	f000 fc4e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001630:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001632:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8001634:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001636:	4619      	mov	r1, r3
 8001638:	4aa6      	ldr	r2, [pc, #664]	; (80018d4 <OTM8009A_Init+0x3d0>)
 800163a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800163c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800163e:	f000 fc45 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8001642:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001644:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8001646:	4aa4      	ldr	r2, [pc, #656]	; (80018d8 <OTM8009A_Init+0x3d4>)
 8001648:	21c1      	movs	r1, #193	; 0xc1
 800164a:	4638      	mov	r0, r7
 800164c:	f000 fc3e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001650:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001652:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8001654:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001656:	4619      	mov	r1, r3
 8001658:	4aa0      	ldr	r2, [pc, #640]	; (80018dc <OTM8009A_Init+0x3d8>)
 800165a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800165c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800165e:	f000 fc35 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8001662:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001664:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8001666:	4a9e      	ldr	r2, [pc, #632]	; (80018e0 <OTM8009A_Init+0x3dc>)
 8001668:	21c1      	movs	r1, #193	; 0xc1
 800166a:	4638      	mov	r0, r7
 800166c:	f000 fc2e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8001670:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001672:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8001674:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8001676:	4619      	mov	r1, r3
 8001678:	4a9a      	ldr	r2, [pc, #616]	; (80018e4 <OTM8009A_Init+0x3e0>)
 800167a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800167c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800167e:	f000 fc25 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8001682:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8001684:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8001686:	4a98      	ldr	r2, [pc, #608]	; (80018e8 <OTM8009A_Init+0x3e4>)
 8001688:	21c5      	movs	r1, #197	; 0xc5
 800168a:	4638      	mov	r0, r7
 800168c:	f000 fc1e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8001690:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8001692:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8001694:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8001696:	4619      	mov	r1, r3
 8001698:	4a94      	ldr	r2, [pc, #592]	; (80018ec <OTM8009A_Init+0x3e8>)
 800169a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800169c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800169e:	f000 fc15 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80016a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80016a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80016a6:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <OTM8009A_Init+0x3c0>)
 80016a8:	21c5      	movs	r1, #197	; 0xc5
 80016aa:	4638      	mov	r0, r7
 80016ac:	f000 fc0e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80016b2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80016b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016b6:	4619      	mov	r1, r3
 80016b8:	4a78      	ldr	r2, [pc, #480]	; (800189c <OTM8009A_Init+0x398>)
 80016ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80016bc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016be:	f000 fc05 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80016c2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016c4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80016c6:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <OTM8009A_Init+0x3ec>)
 80016c8:	21d8      	movs	r1, #216	; 0xd8
 80016ca:	4638      	mov	r0, r7
 80016cc:	f000 fbfe 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016d2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80016d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016d6:	4619      	mov	r1, r3
 80016d8:	4a86      	ldr	r2, [pc, #536]	; (80018f4 <OTM8009A_Init+0x3f0>)
 80016da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80016dc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016de:	f000 fbf5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80016e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80016e6:	4a84      	ldr	r2, [pc, #528]	; (80018f8 <OTM8009A_Init+0x3f4>)
 80016e8:	21c5      	movs	r1, #197	; 0xc5
 80016ea:	4638      	mov	r0, r7
 80016ec:	f000 fbee 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80016f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016f2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80016f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80016f6:	4619      	mov	r1, r3
 80016f8:	4a80      	ldr	r2, [pc, #512]	; (80018fc <OTM8009A_Init+0x3f8>)
 80016fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80016fc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80016fe:	f000 fbe5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8001702:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8001704:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8001706:	4a7e      	ldr	r2, [pc, #504]	; (8001900 <OTM8009A_Init+0x3fc>)
 8001708:	21c0      	movs	r1, #192	; 0xc0
 800170a:	4638      	mov	r0, r7
 800170c:	f000 fbde 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8001710:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8001712:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8001714:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8001716:	4619      	mov	r1, r3
 8001718:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <OTM8009A_Init+0x400>)
 800171a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800171c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800171e:	f000 fbd5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8001722:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8001724:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8001726:	4a78      	ldr	r2, [pc, #480]	; (8001908 <OTM8009A_Init+0x404>)
 8001728:	21c5      	movs	r1, #197	; 0xc5
 800172a:	4638      	mov	r0, r7
 800172c:	f000 fbce 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001730:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8001732:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8001734:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001736:	4619      	mov	r1, r3
 8001738:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <OTM8009A_Init+0x3d0>)
 800173a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800173c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800173e:	f000 fbc5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8001742:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001744:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <OTM8009A_Init+0x408>)
 8001748:	21c4      	movs	r1, #196	; 0xc4
 800174a:	4638      	mov	r0, r7
 800174c:	f000 fbbe 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001750:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001752:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8001754:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001756:	4619      	mov	r1, r3
 8001758:	4a60      	ldr	r2, [pc, #384]	; (80018dc <OTM8009A_Init+0x3d8>)
 800175a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800175c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800175e:	f000 fbb5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8001762:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001764:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8001766:	4a6a      	ldr	r2, [pc, #424]	; (8001910 <OTM8009A_Init+0x40c>)
 8001768:	21c1      	movs	r1, #193	; 0xc1
 800176a:	4638      	mov	r0, r7
 800176c:	f000 fbae 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8001770:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001772:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8001774:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8001776:	4619      	mov	r1, r3
 8001778:	4a66      	ldr	r2, [pc, #408]	; (8001914 <OTM8009A_Init+0x410>)
 800177a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800177c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800177e:	f000 fba5 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8001782:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8001784:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8001786:	4a64      	ldr	r2, [pc, #400]	; (8001918 <OTM8009A_Init+0x414>)
 8001788:	21b3      	movs	r1, #179	; 0xb3
 800178a:	4638      	mov	r0, r7
 800178c:	f000 fb9e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001790:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8001792:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8001794:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001796:	4619      	mov	r1, r3
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <OTM8009A_Init+0x3a0>)
 800179a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800179c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800179e:	f000 fb95 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80017a2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80017a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80017a6:	4a5d      	ldr	r2, [pc, #372]	; (800191c <OTM8009A_Init+0x418>)
 80017a8:	21ce      	movs	r1, #206	; 0xce
 80017aa:	4638      	mov	r0, r7
 80017ac:	f000 fb8e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80017b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80017b2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80017b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80017b6:	4619      	mov	r1, r3
 80017b8:	4a59      	ldr	r2, [pc, #356]	; (8001920 <OTM8009A_Init+0x41c>)
 80017ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80017bc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80017be:	f000 fb85 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80017c2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80017c4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80017c6:	4a57      	ldr	r2, [pc, #348]	; (8001924 <OTM8009A_Init+0x420>)
 80017c8:	21ce      	movs	r1, #206	; 0xce
 80017ca:	4638      	mov	r0, r7
 80017cc:	f000 fb7e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80017d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80017d2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80017d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80017d6:	4619      	mov	r1, r3
 80017d8:	4a53      	ldr	r2, [pc, #332]	; (8001928 <OTM8009A_Init+0x424>)
 80017da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80017dc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80017de:	f000 fb75 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80017e2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80017e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80017e6:	4a51      	ldr	r2, [pc, #324]	; (800192c <OTM8009A_Init+0x428>)
 80017e8:	21ce      	movs	r1, #206	; 0xce
 80017ea:	4638      	mov	r0, r7
 80017ec:	f000 fb6e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80017f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80017f2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80017f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80017f6:	4619      	mov	r1, r3
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <OTM8009A_Init+0x42c>)
 80017fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80017fc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80017fe:	f000 fb65 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8001802:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001804:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8001806:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <OTM8009A_Init+0x430>)
 8001808:	21cf      	movs	r1, #207	; 0xcf
 800180a:	4638      	mov	r0, r7
 800180c:	f000 fb5e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001810:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001812:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8001814:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001816:	4619      	mov	r1, r3
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <OTM8009A_Init+0x434>)
 800181a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800181c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800181e:	f000 fb55 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8001822:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001824:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8001826:	4a45      	ldr	r2, [pc, #276]	; (800193c <OTM8009A_Init+0x438>)
 8001828:	21cf      	movs	r1, #207	; 0xcf
 800182a:	4638      	mov	r0, r7
 800182c:	f000 fb4e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001830:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001832:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8001834:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001836:	4619      	mov	r1, r3
 8001838:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <OTM8009A_Init+0x3a0>)
 800183a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800183c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800183e:	f000 fb45 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8001842:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001844:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <OTM8009A_Init+0x43c>)
 8001848:	21cb      	movs	r1, #203	; 0xcb
 800184a:	4638      	mov	r0, r7
 800184c:	f000 fb3e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001850:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001852:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8001854:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001856:	4619      	mov	r1, r3
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <OTM8009A_Init+0x440>)
 800185a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800185c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800185e:	f000 fb35 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8001862:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001864:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8001866:	4a38      	ldr	r2, [pc, #224]	; (8001948 <OTM8009A_Init+0x444>)
 8001868:	21cb      	movs	r1, #203	; 0xcb
 800186a:	4638      	mov	r0, r7
 800186c:	f000 fb2e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001870:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001872:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8001874:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001876:	4619      	mov	r1, r3
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <OTM8009A_Init+0x41c>)
 800187a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800187c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800187e:	f000 fb25 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001882:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001884:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001886:	4a31      	ldr	r2, [pc, #196]	; (800194c <OTM8009A_Init+0x448>)
 8001888:	21cb      	movs	r1, #203	; 0xcb
 800188a:	4638      	mov	r0, r7
 800188c:	f000 fb1e 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001890:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001892:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001894:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001896:	4619      	mov	r1, r3
 8001898:	e05a      	b.n	8001950 <OTM8009A_Init+0x44c>
 800189a:	bf00      	nop
 800189c:	08006729 	.word	0x08006729
 80018a0:	080065f8 	.word	0x080065f8
 80018a4:	0800672a 	.word	0x0800672a
 80018a8:	08006684 	.word	0x08006684
 80018ac:	0800672b 	.word	0x0800672b
 80018b0:	0800672c 	.word	0x0800672c
 80018b4:	0800672d 	.word	0x0800672d
 80018b8:	0800672e 	.word	0x0800672e
 80018bc:	0800672f 	.word	0x0800672f
 80018c0:	08006730 	.word	0x08006730
 80018c4:	08006731 	.word	0x08006731
 80018c8:	08006732 	.word	0x08006732
 80018cc:	08006733 	.word	0x08006733
 80018d0:	08006734 	.word	0x08006734
 80018d4:	08006735 	.word	0x08006735
 80018d8:	08006736 	.word	0x08006736
 80018dc:	08006737 	.word	0x08006737
 80018e0:	08006738 	.word	0x08006738
 80018e4:	08006739 	.word	0x08006739
 80018e8:	0800673a 	.word	0x0800673a
 80018ec:	0800673b 	.word	0x0800673b
 80018f0:	080066f8 	.word	0x080066f8
 80018f4:	0800673c 	.word	0x0800673c
 80018f8:	0800673d 	.word	0x0800673d
 80018fc:	0800673e 	.word	0x0800673e
 8001900:	0800673f 	.word	0x0800673f
 8001904:	08006740 	.word	0x08006740
 8001908:	08006741 	.word	0x08006741
 800190c:	08006742 	.word	0x08006742
 8001910:	08006743 	.word	0x08006743
 8001914:	08006744 	.word	0x08006744
 8001918:	080066fc 	.word	0x080066fc
 800191c:	08006700 	.word	0x08006700
 8001920:	08006745 	.word	0x08006745
 8001924:	08006708 	.word	0x08006708
 8001928:	08006746 	.word	0x08006746
 800192c:	08006718 	.word	0x08006718
 8001930:	08006747 	.word	0x08006747
 8001934:	080065fc 	.word	0x080065fc
 8001938:	08006748 	.word	0x08006748
 800193c:	08006755 	.word	0x08006755
 8001940:	08006608 	.word	0x08006608
 8001944:	08006749 	.word	0x08006749
 8001948:	08006614 	.word	0x08006614
 800194c:	08006624 	.word	0x08006624
 8001950:	4ad1      	ldr	r2, [pc, #836]	; (8001c98 <OTM8009A_Init+0x794>)
 8001952:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001954:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001956:	f000 fab9 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800195a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800195c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800195e:	4acf      	ldr	r2, [pc, #828]	; (8001c9c <OTM8009A_Init+0x798>)
 8001960:	21cb      	movs	r1, #203	; 0xcb
 8001962:	4638      	mov	r0, r7
 8001964:	f000 fab2 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001968:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800196a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800196c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800196e:	4619      	mov	r1, r3
 8001970:	4acb      	ldr	r2, [pc, #812]	; (8001ca0 <OTM8009A_Init+0x79c>)
 8001972:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8001974:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001976:	f000 faa9 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800197a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800197c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800197e:	4ac9      	ldr	r2, [pc, #804]	; (8001ca4 <OTM8009A_Init+0x7a0>)
 8001980:	21cb      	movs	r1, #203	; 0xcb
 8001982:	4638      	mov	r0, r7
 8001984:	f000 faa2 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001988:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800198a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800198c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800198e:	4619      	mov	r1, r3
 8001990:	4ac5      	ldr	r2, [pc, #788]	; (8001ca8 <OTM8009A_Init+0x7a4>)
 8001992:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8001994:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001996:	f000 fa99 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800199a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800199c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800199e:	4ac3      	ldr	r2, [pc, #780]	; (8001cac <OTM8009A_Init+0x7a8>)
 80019a0:	21cb      	movs	r1, #203	; 0xcb
 80019a2:	4638      	mov	r0, r7
 80019a4:	f000 fa92 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80019a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80019aa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80019ac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80019ae:	4619      	mov	r1, r3
 80019b0:	4abf      	ldr	r2, [pc, #764]	; (8001cb0 <OTM8009A_Init+0x7ac>)
 80019b2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80019b4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80019b6:	f000 fa89 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80019ba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80019bc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80019be:	4abd      	ldr	r2, [pc, #756]	; (8001cb4 <OTM8009A_Init+0x7b0>)
 80019c0:	21cb      	movs	r1, #203	; 0xcb
 80019c2:	4638      	mov	r0, r7
 80019c4:	f000 fa82 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80019c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80019ca:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80019cc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80019ce:	4619      	mov	r1, r3
 80019d0:	4ab9      	ldr	r2, [pc, #740]	; (8001cb8 <OTM8009A_Init+0x7b4>)
 80019d2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80019d4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80019d6:	f000 fa79 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80019da:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80019dc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80019de:	4ab7      	ldr	r2, [pc, #732]	; (8001cbc <OTM8009A_Init+0x7b8>)
 80019e0:	21cb      	movs	r1, #203	; 0xcb
 80019e2:	4638      	mov	r0, r7
 80019e4:	f000 fa72 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80019e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80019ea:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80019ec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80019ee:	4619      	mov	r1, r3
 80019f0:	4ab3      	ldr	r2, [pc, #716]	; (8001cc0 <OTM8009A_Init+0x7bc>)
 80019f2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80019f4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80019f6:	f000 fa69 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80019fa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80019fc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80019fe:	4ab1      	ldr	r2, [pc, #708]	; (8001cc4 <OTM8009A_Init+0x7c0>)
 8001a00:	21cc      	movs	r1, #204	; 0xcc
 8001a02:	4638      	mov	r0, r7
 8001a04:	f000 fa62 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001a08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001a0a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8001a0c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4aad      	ldr	r2, [pc, #692]	; (8001cc8 <OTM8009A_Init+0x7c4>)
 8001a12:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8001a14:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001a16:	f000 fa59 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001a1a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001a1c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001a1e:	4aab      	ldr	r2, [pc, #684]	; (8001ccc <OTM8009A_Init+0x7c8>)
 8001a20:	21cc      	movs	r1, #204	; 0xcc
 8001a22:	4638      	mov	r0, r7
 8001a24:	f000 fa52 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001a28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001a2a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001a2c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4aa7      	ldr	r2, [pc, #668]	; (8001cd0 <OTM8009A_Init+0x7cc>)
 8001a32:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001a34:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001a36:	f000 fa49 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001a3a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001a3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001a3e:	4aa5      	ldr	r2, [pc, #660]	; (8001cd4 <OTM8009A_Init+0x7d0>)
 8001a40:	21cc      	movs	r1, #204	; 0xcc
 8001a42:	4638      	mov	r0, r7
 8001a44:	f000 fa42 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001a48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001a4a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001a4c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4a91      	ldr	r2, [pc, #580]	; (8001c98 <OTM8009A_Init+0x794>)
 8001a52:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001a54:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001a56:	f000 fa39 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001a5a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001a5c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001a5e:	4a9e      	ldr	r2, [pc, #632]	; (8001cd8 <OTM8009A_Init+0x7d4>)
 8001a60:	21cc      	movs	r1, #204	; 0xcc
 8001a62:	4638      	mov	r0, r7
 8001a64:	f000 fa32 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001a6a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001a6c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4a8b      	ldr	r2, [pc, #556]	; (8001ca0 <OTM8009A_Init+0x79c>)
 8001a72:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001a74:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a76:	f000 fa29 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001a7a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a7c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001a7e:	4a97      	ldr	r2, [pc, #604]	; (8001cdc <OTM8009A_Init+0x7d8>)
 8001a80:	21cc      	movs	r1, #204	; 0xcc
 8001a82:	4638      	mov	r0, r7
 8001a84:	f000 fa22 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001a88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a8a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001a8c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4a85      	ldr	r2, [pc, #532]	; (8001ca8 <OTM8009A_Init+0x7a4>)
 8001a92:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001a94:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001a96:	f000 fa19 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8001a9a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001a9c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8001a9e:	4a90      	ldr	r2, [pc, #576]	; (8001ce0 <OTM8009A_Init+0x7dc>)
 8001aa0:	21cc      	movs	r1, #204	; 0xcc
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	f000 fa12 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001aa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001aaa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8001aac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4a8c      	ldr	r2, [pc, #560]	; (8001ce4 <OTM8009A_Init+0x7e0>)
 8001ab2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8001ab4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001ab6:	f000 fa09 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001aba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001abc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001abe:	4a8a      	ldr	r2, [pc, #552]	; (8001ce8 <OTM8009A_Init+0x7e4>)
 8001ac0:	21c5      	movs	r1, #197	; 0xc5
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f000 fa02 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001ac8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001aca:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001acc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4a86      	ldr	r2, [pc, #536]	; (8001cec <OTM8009A_Init+0x7e8>)
 8001ad2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001ad4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001ad6:	f000 f9f9 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001ada:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001adc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001ade:	4a84      	ldr	r2, [pc, #528]	; (8001cf0 <OTM8009A_Init+0x7ec>)
 8001ae0:	21f5      	movs	r1, #245	; 0xf5
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	f000 f9f2 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001ae8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001aea:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001aec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001aee:	4619      	mov	r1, r3
 8001af0:	4a80      	ldr	r2, [pc, #512]	; (8001cf4 <OTM8009A_Init+0x7f0>)
 8001af2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001af4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001af6:	f000 f9e9 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001afa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001afc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001afe:	4a7e      	ldr	r2, [pc, #504]	; (8001cf8 <OTM8009A_Init+0x7f4>)
 8001b00:	21c6      	movs	r1, #198	; 0xc6
 8001b02:	4638      	mov	r0, r7
 8001b04:	f000 f9e2 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001b0a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001b0c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <OTM8009A_Init+0x7f8>)
 8001b12:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001b14:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b16:	f000 f9d9 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001b1a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b1c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001b1e:	4a78      	ldr	r2, [pc, #480]	; (8001d00 <OTM8009A_Init+0x7fc>)
 8001b20:	21ff      	movs	r1, #255	; 0xff
 8001b22:	4638      	mov	r0, r7
 8001b24:	f000 f9d2 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b2a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b2c:	4a73      	ldr	r2, [pc, #460]	; (8001cfc <OTM8009A_Init+0x7f8>)
 8001b2e:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001b30:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b32:	4638      	mov	r0, r7
 8001b34:	f000 f9ca 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001b3a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <OTM8009A_Init+0x7f8>)
 8001b42:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b44:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b46:	f000 f9c1 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001b4a:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b4c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001b4e:	4a6d      	ldr	r2, [pc, #436]	; (8001d04 <OTM8009A_Init+0x800>)
 8001b50:	21e1      	movs	r1, #225	; 0xe1
 8001b52:	4638      	mov	r0, r7
 8001b54:	f000 f9ba 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b5a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001b5c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <OTM8009A_Init+0x7f8>)
 8001b62:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001b64:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b66:	f000 f9b1 	bl	8001ecc <otm8009a_write_reg>
 8001b6a:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <OTM8009A_Init+0x804>)
 8001b70:	21e2      	movs	r1, #226	; 0xe2
 8001b72:	4638      	mov	r0, r7
 8001b74:	f000 f9aa 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001b78:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8001b7a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <OTM8009A_Init+0x808>)
 8001b80:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8001b82:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001b84:	4638      	mov	r0, r7
 8001b86:	f000 f9a1 	bl	8001ecc <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8001b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001b8e:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8001b90:	4798      	blx	r3
 8001b92:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001b94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001b98:	4798      	blx	r3
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	2877      	cmp	r0, #119	; 0x77
 8001b9e:	d9f9      	bls.n	8001b94 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8001ba0:	f1b9 0f00 	cmp.w	r9, #0
 8001ba4:	d074      	beq.n	8001c90 <OTM8009A_Init+0x78c>
 8001ba6:	f1b9 0f02 	cmp.w	r9, #2
 8001baa:	d14f      	bne.n	8001c4c <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8001bac:	2300      	movs	r3, #0
 8001bae:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001bb0:	213a      	movs	r1, #58	; 0x3a
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	f000 f98a 	bl	8001ecc <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8001bb8:	4d56      	ldr	r5, [pc, #344]	; (8001d14 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001bba:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001bbe:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8001bc0:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001bc4:	d046      	beq.n	8001c54 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <OTM8009A_Init+0x814>)
 8001bce:	2151      	movs	r1, #81	; 0x51
 8001bd0:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8001bd2:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001bd4:	f000 f97a 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001bda:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001bde:	4653      	mov	r3, sl
 8001be0:	2153      	movs	r1, #83	; 0x53
 8001be2:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8001be4:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001be8:	f000 f970 	bl	8001ecc <otm8009a_write_reg>
 8001bec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001bee:	4653      	mov	r3, sl
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <OTM8009A_Init+0x81c>)
 8001bf2:	2155      	movs	r1, #85	; 0x55
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f000 f969 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001bfa:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001bfc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001bfe:	4653      	mov	r3, sl
 8001c00:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <OTM8009A_Init+0x820>)
 8001c02:	215e      	movs	r1, #94	; 0x5e
 8001c04:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001c06:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001c08:	f000 f960 	bl	8001ecc <otm8009a_write_reg>
 8001c0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001c0e:	4653      	mov	r3, sl
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <OTM8009A_Init+0x824>)
 8001c12:	2129      	movs	r1, #41	; 0x29
 8001c14:	4638      	mov	r0, r7
 8001c16:	f000 f959 	bl	8001ecc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001c1a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001c1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001c1e:	4653      	mov	r3, sl
 8001c20:	4651      	mov	r1, sl
 8001c22:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <OTM8009A_Init+0x7f8>)
 8001c24:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001c26:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001c28:	f000 f950 	bl	8001ecc <otm8009a_write_reg>
 8001c2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001c2e:	4653      	mov	r3, sl
 8001c30:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001c32:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001c34:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <OTM8009A_Init+0x828>)
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	f000 f948 	bl	8001ecc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8001c3c:	42c4      	cmn	r4, r0
}
 8001c3e:	bf14      	ite	ne
 8001c40:	f04f 30ff 	movne.w	r0, #4294967295
 8001c44:	4650      	moveq	r0, sl
 8001c46:	b002      	add	sp, #8
 8001c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001c4c:	f1ba 0f01 	cmp.w	sl, #1
 8001c50:	4d30      	ldr	r5, [pc, #192]	; (8001d14 <OTM8009A_Init+0x810>)
 8001c52:	d1b8      	bne.n	8001bc6 <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001c54:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001c56:	2300      	movs	r3, #0
 8001c58:	f10d 0207 	add.w	r2, sp, #7
 8001c5c:	2136      	movs	r1, #54	; 0x36
 8001c5e:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001c60:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001c64:	f000 f932 	bl	8001ecc <otm8009a_write_reg>
 8001c68:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <OTM8009A_Init+0x82c>)
 8001c6e:	212a      	movs	r1, #42	; 0x2a
 8001c70:	4638      	mov	r0, r7
 8001c72:	f000 f92b 	bl	8001ecc <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001c76:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001c78:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <OTM8009A_Init+0x830>)
 8001c7e:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001c80:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001c82:	4638      	mov	r0, r7
 8001c84:	f000 f922 	bl	8001ecc <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001c88:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001c8c:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001c8e:	e79c      	b.n	8001bca <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001c90:	464b      	mov	r3, r9
 8001c92:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <OTM8009A_Init+0x834>)
 8001c94:	e78c      	b.n	8001bb0 <OTM8009A_Init+0x6ac>
 8001c96:	bf00      	nop
 8001c98:	08006746 	.word	0x08006746
 8001c9c:	08006634 	.word	0x08006634
 8001ca0:	08006747 	.word	0x08006747
 8001ca4:	08006640 	.word	0x08006640
 8001ca8:	08006748 	.word	0x08006748
 8001cac:	08006650 	.word	0x08006650
 8001cb0:	0800674a 	.word	0x0800674a
 8001cb4:	08006660 	.word	0x08006660
 8001cb8:	0800674b 	.word	0x0800674b
 8001cbc:	0800666c 	.word	0x0800666c
 8001cc0:	0800672a 	.word	0x0800672a
 8001cc4:	08006678 	.word	0x08006678
 8001cc8:	08006749 	.word	0x08006749
 8001ccc:	08006688 	.word	0x08006688
 8001cd0:	08006745 	.word	0x08006745
 8001cd4:	08006698 	.word	0x08006698
 8001cd8:	080066a8 	.word	0x080066a8
 8001cdc:	080066b4 	.word	0x080066b4
 8001ce0:	080066c4 	.word	0x080066c4
 8001ce4:	08006735 	.word	0x08006735
 8001ce8:	08006756 	.word	0x08006756
 8001cec:	08006757 	.word	0x08006757
 8001cf0:	08006758 	.word	0x08006758
 8001cf4:	08006759 	.word	0x08006759
 8001cf8:	0800675a 	.word	0x0800675a
 8001cfc:	08006729 	.word	0x08006729
 8001d00:	080066d4 	.word	0x080066d4
 8001d04:	080066d8 	.word	0x080066d8
 8001d08:	080066e8 	.word	0x080066e8
 8001d0c:	0800674c 	.word	0x0800674c
 8001d10:	0800674d 	.word	0x0800674d
 8001d14:	240008f8 	.word	0x240008f8
 8001d18:	0800674f 	.word	0x0800674f
 8001d1c:	08006750 	.word	0x08006750
 8001d20:	08006751 	.word	0x08006751
 8001d24:	08006752 	.word	0x08006752
 8001d28:	08006753 	.word	0x08006753
 8001d2c:	08006754 	.word	0x08006754
 8001d30:	080065f0 	.word	0x080065f0
 8001d34:	080065f4 	.word	0x080065f4
 8001d38:	0800674e 	.word	0x0800674e

08001d3c <OTM8009A_SetBrightness>:
{
 8001d3c:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001d3e:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8001d42:	4e0b      	ldr	r6, [pc, #44]	; (8001d70 <OTM8009A_SetBrightness+0x34>)
{
 8001d44:	b082      	sub	sp, #8
 8001d46:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001d48:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f10d 0207 	add.w	r2, sp, #7
 8001d52:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001d54:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8001d56:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001d58:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8001d5c:	f000 f8b6 	bl	8001ecc <otm8009a_write_reg>
 8001d60:	b918      	cbnz	r0, 8001d6a <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <OTM8009A_SetBrightness+0x38>)
 8001d64:	609d      	str	r5, [r3, #8]
}
 8001d66:	b002      	add	sp, #8
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8001d6a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8001d6e:	e7fa      	b.n	8001d66 <OTM8009A_SetBrightness+0x2a>
 8001d70:	51eb851f 	.word	0x51eb851f
 8001d74:	240008f8 	.word	0x240008f8

08001d78 <OTM8009A_DisplayOn>:
{
 8001d78:	b500      	push	{lr}
 8001d7a:	b083      	sub	sp, #12
  uint8_t display = 0;
 8001d7c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8001d7e:	2129      	movs	r1, #41	; 0x29
 8001d80:	3010      	adds	r0, #16
 8001d82:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8001d86:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8001d8a:	f000 f89f 	bl	8001ecc <otm8009a_write_reg>
 8001d8e:	3800      	subs	r0, #0
 8001d90:	bf18      	it	ne
 8001d92:	2001      	movne	r0, #1
}
 8001d94:	4240      	negs	r0, r0
 8001d96:	b003      	add	sp, #12
 8001d98:	f85d fb04 	ldr.w	pc, [sp], #4

08001d9c <OTM8009A_DisplayOff>:
{
 8001d9c:	b500      	push	{lr}
 8001d9e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8001da0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001da2:	2128      	movs	r1, #40	; 0x28
 8001da4:	3010      	adds	r0, #16
 8001da6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8001daa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001dae:	f000 f88d 	bl	8001ecc <otm8009a_write_reg>
 8001db2:	3800      	subs	r0, #0
 8001db4:	bf18      	it	ne
 8001db6:	2001      	movne	r0, #1
}
 8001db8:	4240      	negs	r0, r0
 8001dba:	b003      	add	sp, #12
 8001dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc0 <OTM8009A_SetOrientation>:
{
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001dc2:	2360      	movs	r3, #96	; 0x60
{
 8001dc4:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001dc6:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001dc8:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001dca:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001dce:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001dd2:	d83e      	bhi.n	8001e52 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001dd4:	d020      	beq.n	8001e18 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8001dd6:	f100 0510 	add.w	r5, r0, #16
 8001dda:	4633      	mov	r3, r6
 8001ddc:	f10d 0207 	add.w	r2, sp, #7
 8001de0:	2136      	movs	r1, #54	; 0x36
 8001de2:	4628      	mov	r0, r5
 8001de4:	f000 f872 	bl	8001ecc <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001de8:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8001dea:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <OTM8009A_SetOrientation+0x98>)
 8001dee:	212a      	movs	r1, #42	; 0x2a
 8001df0:	4628      	mov	r0, r5
 8001df2:	f000 f86b 	bl	8001ecc <otm8009a_write_reg>
 8001df6:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001df8:	2304      	movs	r3, #4
 8001dfa:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001dfc:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <OTM8009A_SetOrientation+0x9c>)
 8001e00:	212b      	movs	r1, #43	; 0x2b
 8001e02:	f000 f863 	bl	8001ecc <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001e08:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001e0a:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8001e0c:	3800      	subs	r0, #0
 8001e0e:	bf18      	it	ne
 8001e10:	2001      	movne	r0, #1
 8001e12:	4240      	negs	r0, r0
}
 8001e14:	b003      	add	sp, #12
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001e18:	f100 0510 	add.w	r5, r0, #16
 8001e1c:	4633      	mov	r3, r6
 8001e1e:	460f      	mov	r7, r1
 8001e20:	f10d 0206 	add.w	r2, sp, #6
 8001e24:	2136      	movs	r1, #54	; 0x36
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 f850 	bl	8001ecc <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001e2c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001e2e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001e30:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <OTM8009A_SetOrientation+0x98>)
 8001e32:	212a      	movs	r1, #42	; 0x2a
 8001e34:	4628      	mov	r0, r5
 8001e36:	f000 f849 	bl	8001ecc <otm8009a_write_reg>
 8001e3a:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	4628      	mov	r0, r5
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <OTM8009A_SetOrientation+0x9c>)
 8001e42:	212b      	movs	r1, #43	; 0x2b
 8001e44:	f000 f842 	bl	8001ecc <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001e48:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001e4c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001e4e:	601f      	str	r7, [r3, #0]
 8001e50:	e7dc      	b.n	8001e0c <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001e56:	e7dd      	b.n	8001e14 <OTM8009A_SetOrientation+0x54>
 8001e58:	080065f0 	.word	0x080065f0
 8001e5c:	080065f4 	.word	0x080065f4
 8001e60:	240008f8 	.word	0x240008f8

08001e64 <OTM8009A_ReadID>:
{ 
 8001e64:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8001e66:	3010      	adds	r0, #16
 8001e68:	21da      	movs	r1, #218	; 0xda
{ 
 8001e6a:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f000 f825 	bl	8001ebc <otm8009a_read_reg>
 8001e72:	3800      	subs	r0, #0
 8001e74:	bf18      	it	ne
 8001e76:	2001      	movne	r0, #1
}  
 8001e78:	4240      	negs	r0, r0
 8001e7a:	bd08      	pop	{r3, pc}

08001e7c <OTM8009A_DrawVLine>:
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <OTM8009A_GetPixel>:
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8001e8c:	b178      	cbz	r0, 8001eae <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e8e:	684a      	ldr	r2, [r1, #4]
 8001e90:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8001e92:	2000      	movs	r0, #0
{
 8001e94:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8001e96:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001e9a:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e9c:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8001e9e:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8001ea0:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001ea4:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8001ea8:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8001eaa:	611a      	str	r2, [r3, #16]
}
 8001eac:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001eb2:	4770      	bx	lr
 8001eb4:	080014e5 	.word	0x080014e5
 8001eb8:	080014f5 	.word	0x080014f5

08001ebc <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001ebc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001ebe:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001ec2:	46a4      	mov	ip, r4
}
 8001ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001ec8:	4760      	bx	ip
 8001eca:	bf00      	nop

08001ecc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001ecc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001ece:	6804      	ldr	r4, [r0, #0]
 8001ed0:	6880      	ldr	r0, [r0, #8]
 8001ed2:	46a4      	mov	ip, r4
}
 8001ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001ed8:	4760      	bx	ip
 8001eda:	bf00      	nop

08001edc <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8001edc:	f000 be90 	b.w	8002c00 <HAL_GetTick>

08001ee0 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001ee0:	b910      	cbnz	r0, 8001ee8 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8001ee2:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <BSP_LCD_SetActiveLayer+0x10>)
 8001ee4:	6099      	str	r1, [r3, #8]
 8001ee6:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001ee8:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	24010ae4 	.word	0x24010ae4

08001ef4 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001ef4:	b918      	cbnz	r0, 8001efe <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <BSP_LCD_GetPixelFormat+0x10>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001efe:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001f02:	4770      	bx	lr
 8001f04:	24010ae4 	.word	0x24010ae4

08001f08 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001f08:	b948      	cbnz	r0, 8001f1e <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <BSP_LCD_GetXSize+0x1c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	b11b      	cbz	r3, 8001f1a <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <BSP_LCD_GetXSize+0x20>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8001f1a:	4618      	mov	r0, r3
  }

  return ret;
}
 8001f1c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001f1e:	f06f 0001 	mvn.w	r0, #1
 8001f22:	4770      	bx	lr
 8001f24:	24000908 	.word	0x24000908
 8001f28:	24010ae4 	.word	0x24010ae4

08001f2c <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001f2c:	b948      	cbnz	r0, 8001f42 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <BSP_LCD_GetYSize+0x1c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	b11b      	cbz	r3, 8001f3e <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <BSP_LCD_GetYSize+0x20>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8001f3e:	4618      	mov	r0, r3
  }

  return ret;
}
 8001f40:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001f42:	f06f 0001 	mvn.w	r0, #1
 8001f46:	4770      	bx	lr
 8001f48:	24000908 	.word	0x24000908
 8001f4c:	24010ae4 	.word	0x24010ae4

08001f50 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f54:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8001f58:	b39c      	cbz	r4, 8001fc2 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001f5e:	4d1a      	ldr	r5, [pc, #104]	; (8001fc8 <BSP_LCD_FillRGBRect+0x78>)
 8001f60:	eb04 0802 	add.w	r8, r4, r2
 8001f64:	eb0b 0e01 	add.w	lr, fp, r1
 8001f68:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001f6c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001fcc <BSP_LCD_FillRGBRect+0x7c>
 8001f70:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8001f72:	f1bb 0f00 	cmp.w	fp, #0
 8001f76:	d021      	beq.n	8001fbc <BSP_LCD_FillRGBRect+0x6c>
 8001f78:	460c      	mov	r4, r1
 8001f7a:	e00a      	b.n	8001f92 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001f7c:	682e      	ldr	r6, [r5, #0]
 8001f7e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001f80:	fb06 4602 	mla	r6, r6, r2, r4
 8001f84:	3401      	adds	r4, #1
 8001f86:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 8001f8a:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8001f8c:	6928      	ldr	r0, [r5, #16]
 8001f8e:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8001f90:	d014      	beq.n	8001fbc <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f92:	68a8      	ldr	r0, [r5, #8]
 8001f94:	f8d3 9000 	ldr.w	r9, [r3]
 8001f98:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001f9c:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001fa0:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8001fa2:	2e00      	cmp	r6, #0
 8001fa4:	d0ea      	beq.n	8001f7c <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001fa6:	682e      	ldr	r6, [r5, #0]
 8001fa8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001faa:	fb06 4602 	mla	r6, r6, r2, r4
 8001fae:	3401      	adds	r4, #1
 8001fb0:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8001fb4:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8001fb6:	6928      	ldr	r0, [r5, #16]
 8001fb8:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8001fba:	d1ea      	bne.n	8001f92 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8001fbc:	3201      	adds	r2, #1
 8001fbe:	4542      	cmp	r2, r8
 8001fc0:	d1d7      	bne.n	8001f72 <BSP_LCD_FillRGBRect+0x22>
}
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc8:	24010ae4 	.word	0x24010ae4
 8001fcc:	24010a3c 	.word	0x24010a3c

08001fd0 <BSP_LCD_ReadPixel>:
{
 8001fd0:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001fd2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001fd6:	4e10      	ldr	r6, [pc, #64]	; (8002018 <BSP_LCD_ReadPixel+0x48>)
 8001fd8:	4f10      	ldr	r7, [pc, #64]	; (800201c <BSP_LCD_ReadPixel+0x4c>)
 8001fda:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8001fde:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8001fe2:	0080      	lsls	r0, r0, #2
 8001fe4:	68ac      	ldr	r4, [r5, #8]
 8001fe6:	fb0c 7404 	mla	r4, ip, r4, r7
 8001fea:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001fec:	b94d      	cbnz	r5, 8002002 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001fee:	5830      	ldr	r0, [r6, r0]
 8001ff0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8001ff2:	fb00 1202 	mla	r2, r0, r2, r1
}
 8001ff6:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001ff8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8001ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002002:	5835      	ldr	r5, [r6, r0]
 8002004:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002006:	fb05 1202 	mla	r2, r5, r2, r1
 800200a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 800200e:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002010:	b292      	uxth	r2, r2
}
 8002012:	bcf0      	pop	{r4, r5, r6, r7}
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	4770      	bx	lr
 8002018:	24010ae4 	.word	0x24010ae4
 800201c:	24010a3c 	.word	0x24010a3c

08002020 <BSP_LCD_WritePixel>:
{
 8002020:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002022:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002026:	4e0f      	ldr	r6, [pc, #60]	; (8002064 <BSP_LCD_WritePixel+0x44>)
 8002028:	4f0f      	ldr	r7, [pc, #60]	; (8002068 <BSP_LCD_WritePixel+0x48>)
 800202a:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800202e:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8002032:	0080      	lsls	r0, r0, #2
 8002034:	68ac      	ldr	r4, [r5, #8]
 8002036:	fb0c 7404 	mla	r4, ip, r4, r7
 800203a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800203c:	b945      	cbnz	r5, 8002050 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800203e:	5830      	ldr	r0, [r6, r0]
 8002040:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8002042:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 8002046:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002048:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 800204c:	bcf0      	pop	{r4, r5, r6, r7}
 800204e:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002050:	5835      	ldr	r5, [r6, r0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002056:	fb05 1202 	mla	r2, r5, r2, r1
}
 800205a:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800205c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8002060:	2000      	movs	r0, #0
 8002062:	4770      	bx	lr
 8002064:	24010ae4 	.word	0x24010ae4
 8002068:	24010a3c 	.word	0x24010a3c

0800206c <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800206c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800206e:	2406      	movs	r4, #6
{
 8002070:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8002072:	9101      	str	r1, [sp, #4]
 8002074:	4601      	mov	r1, r0
 8002076:	9202      	str	r2, [sp, #8]
 8002078:	9400      	str	r4, [sp, #0]
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <DSI_IO_Read+0x24>)
 800207c:	f001 fb36 	bl	80036ec <HAL_DSI_Read>
 8002080:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8002082:	bf14      	ite	ne
 8002084:	f06f 0007 	mvnne.w	r0, #7
 8002088:	2000      	moveq	r0, #0
 800208a:	b004      	add	sp, #16
 800208c:	bd10      	pop	{r4, pc}
 800208e:	bf00      	nop
 8002090:	24010b00 	.word	0x24010b00

08002094 <BSP_LCD_DrawBitmap>:
{
 8002094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002098:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800209c:	4e4f      	ldr	r6, [pc, #316]	; (80021dc <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800209e:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020a0:	f04f 0934 	mov.w	r9, #52	; 0x34
 80020a4:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80020a8:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 80020ac:	f8df e138 	ldr.w	lr, [pc, #312]	; 80021e8 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80020b0:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020b2:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80020b6:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020ba:	68b9      	ldr	r1, [r7, #8]
{
 80020bc:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80020be:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80020c0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020c4:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80020c8:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80020cc:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80020d0:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80020d2:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80020d6:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80020da:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020de:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80020e0:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020e4:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80020e8:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80020ec:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80020ee:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80020f2:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80020f6:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80020fa:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80020fc:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8002100:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002102:	4465      	add	r5, ip
 8002104:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002106:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002108:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800210a:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 800210e:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002112:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002114:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8002118:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800211a:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800211e:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002120:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8002124:	d957      	bls.n	80021d6 <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8002126:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800212a:	2c08      	cmp	r4, #8
 800212c:	bf34      	ite	cc
 800212e:	f04f 0b02 	movcc.w	fp, #2
 8002132:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002136:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800213a:	9c03      	ldr	r4, [sp, #12]
 800213c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8002140:	fb04 f909 	mul.w	r9, r4, r9
 8002144:	fb09 1505 	mla	r5, r9, r5, r1
 8002148:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800214a:	f1ba 0f00 	cmp.w	sl, #0
 800214e:	d03e      	beq.n	80021ce <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8002150:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8002152:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8002156:	2700      	movs	r7, #0
 8002158:	4c21      	ldr	r4, [pc, #132]	; (80021e0 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800215a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800215e:	e006      	b.n	800216e <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002160:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8002162:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002164:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8002166:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002168:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800216c:	d02f      	beq.n	80021ce <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800216e:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002170:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002172:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002176:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800217a:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 800217c:	4919      	ldr	r1, [pc, #100]	; (80021e4 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800217e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8002182:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002186:	bf18      	it	ne
 8002188:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800218a:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800218c:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800218e:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002192:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002196:	4812      	ldr	r0, [pc, #72]	; (80021e0 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8002198:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800219c:	f000 fe18 	bl	8002dd0 <HAL_DMA2D_Init>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d1dd      	bne.n	8002160 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80021a4:	2101      	movs	r1, #1
 80021a6:	480e      	ldr	r0, [pc, #56]	; (80021e0 <BSP_LCD_DrawBitmap+0x14c>)
 80021a8:	f000 fef6 	bl	8002f98 <HAL_DMA2D_ConfigLayer>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d1d7      	bne.n	8002160 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80021b0:	2001      	movs	r0, #1
 80021b2:	9b03      	ldr	r3, [sp, #12]
 80021b4:	4642      	mov	r2, r8
 80021b6:	4629      	mov	r1, r5
 80021b8:	9000      	str	r0, [sp, #0]
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <BSP_LCD_DrawBitmap+0x14c>)
 80021bc:	f000 fe4a 	bl	8002e54 <HAL_DMA2D_Start>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1cd      	bne.n	8002160 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80021c4:	2132      	movs	r1, #50	; 0x32
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <BSP_LCD_DrawBitmap+0x14c>)
 80021c8:	f000 fe60 	bl	8002e8c <HAL_DMA2D_PollForTransfer>
 80021cc:	e7c8      	b.n	8002160 <BSP_LCD_DrawBitmap+0xcc>
}
 80021ce:	2000      	movs	r0, #0
 80021d0:	b005      	add	sp, #20
 80021d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80021d6:	f04f 0b00 	mov.w	fp, #0
 80021da:	e7ac      	b.n	8002136 <BSP_LCD_DrawBitmap+0xa2>
 80021dc:	24010ae4 	.word	0x24010ae4
 80021e0:	24010b1c 	.word	0x24010b1c
 80021e4:	52001000 	.word	0x52001000
 80021e8:	24010a3c 	.word	0x24010a3c

080021ec <LL_FillBuffer>:
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 80021f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80021f4:	4c28      	ldr	r4, [pc, #160]	; (8002298 <LL_FillBuffer+0xac>)
{
 80021f6:	4617      	mov	r7, r2
 80021f8:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 80021fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 80021fe:	4698      	mov	r8, r3
 8002200:	460e      	mov	r6, r1
 8002202:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8002204:	68c2      	ldr	r2, [r0, #12]
{
 8002206:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8002208:	2a02      	cmp	r2, #2
 800220a:	d00f      	beq.n	800222c <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800220c:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800220e:	4c23      	ldr	r4, [pc, #140]	; (800229c <LL_FillBuffer+0xb0>)
 8002210:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8002214:	4922      	ldr	r1, [pc, #136]	; (80022a0 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002216:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002218:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800221a:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800221c:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002220:	f000 fdd6 	bl	8002dd0 <HAL_DMA2D_Init>
 8002224:	b308      	cbz	r0, 800226a <LL_FillBuffer+0x7e>
}
 8002226:	b002      	add	sp, #8
 8002228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800222c:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8002230:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8002234:	f005 041f 	and.w	r4, r5, #31
 8002238:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 800223c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8002240:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002244:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8002248:	3521      	adds	r5, #33	; 0x21
 800224a:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 800224e:	3117      	adds	r1, #23
 8002250:	09ad      	lsrs	r5, r5, #6
 8002252:	0989      	lsrs	r1, r1, #6
 8002254:	022d      	lsls	r5, r5, #8
 8002256:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800225a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800225e:	3017      	adds	r0, #23
 8002260:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8002264:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8002268:	e7d1      	b.n	800220e <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800226a:	2101      	movs	r1, #1
 800226c:	4620      	mov	r0, r4
 800226e:	f000 fe93 	bl	8002f98 <HAL_DMA2D_ConfigLayer>
 8002272:	2800      	cmp	r0, #0
 8002274:	d1d7      	bne.n	8002226 <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002276:	463b      	mov	r3, r7
 8002278:	4632      	mov	r2, r6
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f8cd 8000 	str.w	r8, [sp]
 8002282:	f000 fde7 	bl	8002e54 <HAL_DMA2D_Start>
 8002286:	2800      	cmp	r0, #0
 8002288:	d1cd      	bne.n	8002226 <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800228a:	4620      	mov	r0, r4
 800228c:	2119      	movs	r1, #25
}
 800228e:	b002      	add	sp, #8
 8002290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8002294:	f000 bdfa 	b.w	8002e8c <HAL_DMA2D_PollForTransfer>
 8002298:	24010ae4 	.word	0x24010ae4
 800229c:	24010b1c 	.word	0x24010b1c
 80022a0:	52001000 	.word	0x52001000

080022a4 <BSP_LCD_DrawHLine>:
{
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022a8:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80022ac:	4f12      	ldr	r7, [pc, #72]	; (80022f8 <BSP_LCD_DrawHLine+0x54>)
{
 80022ae:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022b0:	f8df e048 	ldr.w	lr, [pc, #72]	; 80022fc <BSP_LCD_DrawHLine+0x58>
 80022b4:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80022b8:	f04f 0834 	mov.w	r8, #52	; 0x34
 80022bc:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80022c0:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022c4:	688d      	ldr	r5, [r1, #8]
{
 80022c6:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022c8:	690e      	ldr	r6, [r1, #16]
 80022ca:	fb02 4207 	mla	r2, r2, r7, r4
 80022ce:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80022d2:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022d4:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80022d6:	bf38      	it	cc
 80022d8:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80022da:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80022dc:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80022e0:	9a08      	ldr	r2, [sp, #32]
 80022e2:	9400      	str	r4, [sp, #0]
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	2301      	movs	r3, #1
 80022ea:	f7ff ff7f 	bl	80021ec <LL_FillBuffer>
}
 80022ee:	4620      	mov	r0, r4
 80022f0:	b002      	add	sp, #8
 80022f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022f6:	bf00      	nop
 80022f8:	24010ae4 	.word	0x24010ae4
 80022fc:	24010a3c 	.word	0x24010a3c

08002300 <BSP_LCD_DrawVLine>:
{
 8002300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002304:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8002308:	4c11      	ldr	r4, [pc, #68]	; (8002350 <BSP_LCD_DrawVLine+0x50>)
 800230a:	4d12      	ldr	r5, [pc, #72]	; (8002354 <BSP_LCD_DrawVLine+0x54>)
 800230c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8002310:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8002314:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002318:	eb02 0c03 	add.w	ip, r2, r3
{
 800231c:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800231e:	68be      	ldr	r6, [r7, #8]
 8002320:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002324:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002326:	fb08 5606 	mla	r6, r8, r6, r5
 800232a:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800232c:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800232e:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002330:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002332:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002336:	bf88      	it	hi
 8002338:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800233a:	9a08      	ldr	r2, [sp, #32]
 800233c:	e9cd 4200 	strd	r4, r2, [sp]
 8002340:	2201      	movs	r2, #1
 8002342:	f7ff ff53 	bl	80021ec <LL_FillBuffer>
}
 8002346:	2000      	movs	r0, #0
 8002348:	b002      	add	sp, #8
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234e:	bf00      	nop
 8002350:	24010ae4 	.word	0x24010ae4
 8002354:	24010a3c 	.word	0x24010a3c

08002358 <BSP_LCD_FillRect>:
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800235a:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 800235e:	4f0e      	ldr	r7, [pc, #56]	; (8002398 <BSP_LCD_FillRect+0x40>)
 8002360:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8002364:	4d0d      	ldr	r5, [pc, #52]	; (800239c <BSP_LCD_FillRect+0x44>)
 8002366:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800236a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 800236e:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002370:	68b7      	ldr	r7, [r6, #8]
 8002372:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002376:	1ae4      	subs	r4, r4, r3
 8002378:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800237a:	fb0e 5507 	mla	r5, lr, r7, r5
 800237e:	6937      	ldr	r7, [r6, #16]
{
 8002380:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002382:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002384:	9400      	str	r4, [sp, #0]
 8002386:	fb07 3101 	mla	r1, r7, r1, r3
 800238a:	9b08      	ldr	r3, [sp, #32]
 800238c:	9601      	str	r6, [sp, #4]
 800238e:	f7ff ff2d 	bl	80021ec <LL_FillBuffer>
}
 8002392:	2000      	movs	r0, #0
 8002394:	b003      	add	sp, #12
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	24010ae4 	.word	0x24010ae4
 800239c:	24010a3c 	.word	0x24010a3c

080023a0 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 80023a2:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023a4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80023a8:	f042 0208 	orr.w	r2, r2, #8
 80023ac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80023b0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80023b4:	f002 0208 	and.w	r2, r2, #8
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 80023bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80023c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80023d4:	b002      	add	sp, #8
 80023d6:	4770      	bx	lr
 80023d8:	58024400 	.word	0x58024400

080023dc <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 80023de:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80023e4:	f042 0210 	orr.w	r2, r2, #16
 80023e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80023ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80023f0:	f002 0210 	and.w	r2, r2, #16
 80023f4:	9201      	str	r2, [sp, #4]
 80023f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002400:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002408:	b002      	add	sp, #8
 800240a:	4770      	bx	lr
 800240c:	58024400 	.word	0x58024400

08002410 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8002412:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8002414:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002418:	f042 0210 	orr.w	r2, r2, #16
 800241c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8002420:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002424:	f002 0210 	and.w	r2, r2, #16
 8002428:	9201      	str	r2, [sp, #4]
 800242a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 800242c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002430:	f042 0210 	orr.w	r2, r2, #16
 8002434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8002438:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800243c:	f022 0210 	bic.w	r2, r2, #16
 8002440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002444:	b002      	add	sp, #8
 8002446:	4770      	bx	lr
 8002448:	58024400 	.word	0x58024400

0800244c <DSI_IO_Write>:
  if(Size <= 1U)
 800244c:	2b01      	cmp	r3, #1
{
 800244e:	b530      	push	{r4, r5, lr}
 8002450:	460d      	mov	r5, r1
 8002452:	b083      	sub	sp, #12
 8002454:	4601      	mov	r1, r0
  if(Size <= 1U)
 8002456:	d909      	bls.n	800246c <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002458:	480a      	ldr	r0, [pc, #40]	; (8002484 <DSI_IO_Write+0x38>)
 800245a:	e9cd 5200 	strd	r5, r2, [sp]
 800245e:	2239      	movs	r2, #57	; 0x39
 8002460:	f001 f8d8 	bl	8003614 <HAL_DSI_LongWrite>
 8002464:	b958      	cbnz	r0, 800247e <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8002466:	2000      	movs	r0, #0
}
 8002468:	b003      	add	sp, #12
 800246a:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800246c:	5cd0      	ldrb	r0, [r2, r3]
 800246e:	462b      	mov	r3, r5
 8002470:	2215      	movs	r2, #21
 8002472:	9000      	str	r0, [sp, #0]
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <DSI_IO_Write+0x38>)
 8002476:	f001 f8b9 	bl	80035ec <HAL_DSI_ShortWrite>
 800247a:	2800      	cmp	r0, #0
 800247c:	d0f3      	beq.n	8002466 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 800247e:	f06f 0007 	mvn.w	r0, #7
 8002482:	e7f1      	b.n	8002468 <DSI_IO_Write+0x1c>
 8002484:	24010b00 	.word	0x24010b00

08002488 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <BSP_LCD_Reset+0x5c>)
 800248a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800248e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8002492:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8002494:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8002498:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800249e:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024a0:	4c11      	ldr	r4, [pc, #68]	; (80024e8 <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024a2:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024aa:	4620      	mov	r0, r4
 80024ac:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80024b2:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80024b6:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80024ba:	f001 f99f 	bl	80037fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80024be:	4629      	mov	r1, r5
 80024c0:	4620      	mov	r0, r4
 80024c2:	2200      	movs	r2, #0
 80024c4:	f001 fabe 	bl	8003a44 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80024c8:	2014      	movs	r0, #20
 80024ca:	f000 fb9f 	bl	8002c0c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80024ce:	4632      	mov	r2, r6
 80024d0:	4629      	mov	r1, r5
 80024d2:	4620      	mov	r0, r4
 80024d4:	f001 fab6 	bl	8003a44 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80024d8:	200a      	movs	r0, #10
 80024da:	f000 fb97 	bl	8002c0c <HAL_Delay>
}
 80024de:	b007      	add	sp, #28
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	58021800 	.word	0x58021800

080024ec <MX_DSIHOST_DSI_Init>:
{
 80024ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 80024f0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 80024f4:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80024f6:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 80024f8:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80024fc:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 80024fe:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8002502:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8002506:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002508:	60c6      	str	r6, [r0, #12]
{
 800250a:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800250c:	4669      	mov	r1, sp
{
 800250e:	4604      	mov	r4, r0
 8002510:	4690      	mov	r8, r2
 8002512:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8002514:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8002516:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800251a:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800251e:	f000 fdcd 	bl	80030bc <HAL_DSI_Init>
 8002522:	b118      	cbz	r0, 800252c <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8002524:	4630      	mov	r0, r6
}
 8002526:	b01e      	add	sp, #120	; 0x78
 8002528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800252c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <MX_DSIHOST_DSI_Init+0xd0>)
 8002532:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8002534:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8002536:	fb03 2207 	mla	r2, r3, r7, r2
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800253c:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800253e:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8002540:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8002544:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8002548:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800254c:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8002550:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8002552:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8002554:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002556:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8002558:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800255a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 800255e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8002562:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8002566:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8002568:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800256a:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800256e:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8002570:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8002574:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8002576:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800257a:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800257e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8002582:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002586:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8002588:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800258c:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800258e:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8002592:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8002596:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800259a:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 800259c:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 80025a0:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 80025a4:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80025a8:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80025ac:	f000 febe 	bl	800332c <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 80025b0:	3800      	subs	r0, #0
 80025b2:	bf18      	it	ne
 80025b4:	2001      	movne	r0, #1
}
 80025b6:	b01e      	add	sp, #120	; 0x78
 80025b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025bc:	0042c1d8 	.word	0x0042c1d8
 80025c0:	4c751ce3 	.word	0x4c751ce3

080025c4 <MX_LTDC_Init>:
{
 80025c4:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 80025c6:	4d0e      	ldr	r5, [pc, #56]	; (8002600 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80025c8:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80025cc:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80025ce:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 80025d0:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80025d2:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80025d4:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80025d6:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80025d8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80025da:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025dc:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80025de:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80025e0:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80025e2:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80025e4:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80025e6:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 80025e8:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 80025ea:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80025ee:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 80025f0:	6181      	str	r1, [r0, #24]
}
 80025f2:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025f4:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025f8:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 80025fc:	f001 bae0 	b.w	8003bc0 <HAL_LTDC_Init>
 8002600:	50001000 	.word	0x50001000

08002604 <MX_LTDC_ConfigLayer>:
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	4613      	mov	r3, r2
 8002608:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 800260a:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800260c:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 800260e:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8002610:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8002612:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002614:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8002618:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 800261a:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 800261c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8002620:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8002624:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8002628:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800262a:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 800262c:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800262e:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002630:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8002632:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002634:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8002636:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002638:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 800263a:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800263e:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002642:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002644:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8002646:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002648:	f001 fb96 	bl	8003d78 <HAL_LTDC_ConfigLayer>
}
 800264c:	b00f      	add	sp, #60	; 0x3c
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002650 <MX_LTDC_ClockConfig>:
{
 8002650:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002652:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8002656:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8002658:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800265a:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800265c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002660:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8002662:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002664:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8002666:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8002668:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800266a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800266c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800266e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8002672:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002676:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800267a:	f002 fa3d 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
}
 800267e:	b031      	add	sp, #196	; 0xc4
 8002680:	bd30      	pop	{r4, r5, pc}
 8002682:	bf00      	nop

08002684 <BSP_LCD_InitEx>:
{
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002688:	2901      	cmp	r1, #1
{
 800268a:	b093      	sub	sp, #76	; 0x4c
 800268c:	461d      	mov	r5, r3
 800268e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8002692:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002694:	f200 80f2 	bhi.w	800287c <BSP_LCD_InitEx+0x1f8>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	bf18      	it	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2800      	cmp	r0, #0
 80026a0:	f040 80ec 	bne.w	800287c <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 80026a4:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80026a6:	2901      	cmp	r1, #1
 80026a8:	f200 80e8 	bhi.w	800287c <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80026ac:	2a02      	cmp	r2, #2
 80026ae:	f000 80ab 	beq.w	8002808 <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 80026b2:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 80026b4:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 80026b6:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026b8:	4c72      	ldr	r4, [pc, #456]	; (8002884 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 80026ba:	2000      	movs	r0, #0
 80026bc:	4f72      	ldr	r7, [pc, #456]	; (8002888 <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80026be:	2600      	movs	r6, #0
 80026c0:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80026c2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80026c6:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80026c8:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80026cc:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80026ce:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 80026d2:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80026d4:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 80026d8:	f7ff fed6 	bl	8002488 <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026dc:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80026e0:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80026e2:	a90c      	add	r1, sp, #48	; 0x30
 80026e4:	4869      	ldr	r0, [pc, #420]	; (800288c <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026e6:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 80026ea:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80026ee:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80026f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026f6:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80026fa:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80026fc:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026fe:	f8cd c014 	str.w	ip, [sp, #20]
 8002702:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002706:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800270a:	f001 f877 	bl	80037fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	4649      	mov	r1, r9
 8002712:	485e      	ldr	r0, [pc, #376]	; (800288c <BSP_LCD_InitEx+0x208>)
 8002714:	f001 f996 	bl	8003a44 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8002718:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800271c:	a90c      	add	r1, sp, #48	; 0x30
 800271e:	485b      	ldr	r0, [pc, #364]	; (800288c <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8002720:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8002724:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80028bc <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8002728:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 800272c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002730:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8002732:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002736:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800273a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 800273e:	9406      	str	r4, [sp, #24]
 8002740:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002742:	f001 f85b 	bl	80037fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8002746:	2201      	movs	r2, #1
 8002748:	4651      	mov	r1, sl
 800274a:	4850      	ldr	r0, [pc, #320]	; (800288c <BSP_LCD_InitEx+0x208>)
 800274c:	f001 f97a 	bl	8003a44 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8002750:	4632      	mov	r2, r6
 8002752:	210f      	movs	r1, #15
 8002754:	2058      	movs	r0, #88	; 0x58
 8002756:	f000 fa8d 	bl	8002c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800275a:	2058      	movs	r0, #88	; 0x58
 800275c:	f000 fac4 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8002760:	4632      	mov	r2, r6
 8002762:	210f      	movs	r1, #15
 8002764:	205a      	movs	r0, #90	; 0x5a
 8002766:	f000 fa85 	bl	8002c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800276a:	205a      	movs	r0, #90	; 0x5a
 800276c:	f000 fabc 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8002770:	4632      	mov	r2, r6
 8002772:	210f      	movs	r1, #15
 8002774:	207b      	movs	r0, #123	; 0x7b
 8002776:	f000 fa7d 	bl	8002c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800277a:	207b      	movs	r0, #123	; 0x7b
 800277c:	f000 fab4 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8002780:	4c43      	ldr	r4, [pc, #268]	; (8002890 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8002782:	4844      	ldr	r0, [pc, #272]	; (8002894 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8002784:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002788:	4943      	ldr	r1, [pc, #268]	; (8002898 <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 800278a:	4e44      	ldr	r6, [pc, #272]	; (800289c <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 800278c:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 800278e:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002790:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8002794:	f7ff fe04 	bl	80023a0 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8002798:	f8d9 2000 	ldr.w	r2, [r9]
 800279c:	9b02      	ldr	r3, [sp, #8]
 800279e:	4282      	cmp	r2, r0
 80027a0:	d03a      	beq.n	8002818 <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 80027a2:	680a      	ldr	r2, [r1, #0]
 80027a4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80027a8:	d031      	beq.n	800280e <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80027aa:	4642      	mov	r2, r8
 80027ac:	4629      	mov	r1, r5
 80027ae:	483a      	ldr	r0, [pc, #232]	; (8002898 <BSP_LCD_InitEx+0x214>)
 80027b0:	f7ff fe9c 	bl	80024ec <MX_DSIHOST_DSI_Init>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d15c      	bne.n	8002872 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80027b8:	4835      	ldr	r0, [pc, #212]	; (8002890 <BSP_LCD_InitEx+0x20c>)
 80027ba:	f7ff ff49 	bl	8002650 <MX_LTDC_ClockConfig>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d157      	bne.n	8002872 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80027c2:	4642      	mov	r2, r8
 80027c4:	4629      	mov	r1, r5
 80027c6:	4832      	ldr	r0, [pc, #200]	; (8002890 <BSP_LCD_InitEx+0x20c>)
 80027c8:	f7ff fefc 	bl	80025c4 <MX_LTDC_Init>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d150      	bne.n	8002872 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80027d0:	f000 f8b2 	bl	8002938 <BSP_SDRAM_Init>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d14c      	bne.n	8002872 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 80027d8:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 80027da:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027de:	4601      	mov	r1, r0
      config.X0          = 0;
 80027e0:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027e2:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 80027e4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 80027e8:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027ec:	4828      	ldr	r0, [pc, #160]	; (8002890 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 80027ee:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027f2:	f7ff ff07 	bl	8002604 <MX_LTDC_ConfigLayer>
 80027f6:	4604      	mov	r4, r0
 80027f8:	b190      	cbz	r0, 8002820 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80027fa:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
}
 8002802:	b013      	add	sp, #76	; 0x4c
 8002804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002808:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800280a:	9201      	str	r2, [sp, #4]
 800280c:	e754      	b.n	80026b8 <BSP_LCD_InitEx+0x34>
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	f7ff fdfe 	bl	8002410 <DSI_MspInit.part.0>
 8002814:	9b02      	ldr	r3, [sp, #8]
 8002816:	e7c8      	b.n	80027aa <BSP_LCD_InitEx+0x126>
 8002818:	f7ff fde0 	bl	80023dc <DMA2D_MspInit.part.0>
 800281c:	9b02      	ldr	r3, [sp, #8]
 800281e:	e7c0      	b.n	80027a2 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8002820:	481d      	ldr	r0, [pc, #116]	; (8002898 <BSP_LCD_InitEx+0x214>)
 8002822:	f000 febb 	bl	800359c <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8002826:	2104      	movs	r1, #4
 8002828:	481b      	ldr	r0, [pc, #108]	; (8002898 <BSP_LCD_InitEx+0x214>)
 800282a:	f000 fea3 	bl	8003574 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8002830:	4d1c      	ldr	r5, [pc, #112]	; (80028a4 <BSP_LCD_InitEx+0x220>)
 8002832:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8002836:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8002838:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 800283c:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8002840:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8002844:	f7ff fb22 	bl	8001e8c <OTM8009A_RegisterBusIO>
 8002848:	b980      	cbnz	r0, 800286c <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800284a:	4c19      	ldr	r4, [pc, #100]	; (80028b0 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800284c:	4628      	mov	r0, r5
 800284e:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8002850:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8002852:	f7ff fb07 	bl	8001e64 <OTM8009A_ReadID>
 8002856:	b948      	cbnz	r0, 800286c <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <BSP_LCD_InitEx+0x230>)
 800285a:	4d17      	ldr	r5, [pc, #92]	; (80028b8 <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	9a03      	ldr	r2, [sp, #12]
 8002860:	9901      	ldr	r1, [sp, #4]
 8002862:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8002864:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8002866:	47a0      	blx	r4
 8002868:	2800      	cmp	r0, #0
 800286a:	d0c8      	beq.n	80027fe <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800286c:	f06f 0006 	mvn.w	r0, #6
 8002870:	e7c5      	b.n	80027fe <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002872:	f06f 0003 	mvn.w	r0, #3
}
 8002876:	b013      	add	sp, #76	; 0x4c
 8002878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800287c:	f06f 0001 	mvn.w	r0, #1
 8002880:	e7bf      	b.n	8002802 <BSP_LCD_InitEx+0x17e>
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400
 8002888:	24010ae4 	.word	0x24010ae4
 800288c:	58022400 	.word	0x58022400
 8002890:	24010a3c 	.word	0x24010a3c
 8002894:	52001000 	.word	0x52001000
 8002898:	24010b00 	.word	0x24010b00
 800289c:	50001000 	.word	0x50001000
 80028a0:	08001edd 	.word	0x08001edd
 80028a4:	2400090c 	.word	0x2400090c
 80028a8:	0800244d 	.word	0x0800244d
 80028ac:	0800206d 	.word	0x0800206d
 80028b0:	24000904 	.word	0x24000904
 80028b4:	24000808 	.word	0x24000808
 80028b8:	24000908 	.word	0x24000908
 80028bc:	24010b1c 	.word	0x24010b1c

080028c0 <BSP_LCD_Init>:
{
 80028c0:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80028c2:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 80028c6:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80028c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028cc:	2201      	movs	r2, #1
 80028ce:	9400      	str	r4, [sp, #0]
 80028d0:	f7ff fed8 	bl	8002684 <BSP_LCD_InitEx>
}
 80028d4:	b002      	add	sp, #8
 80028d6:	bd10      	pop	{r4, pc}

080028d8 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80028da:	4915      	ldr	r1, [pc, #84]	; (8002930 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80028dc:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028de:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80028e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80028e4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 80028e8:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80028ec:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80028f0:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80028f2:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80028f4:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80028f6:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028f8:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028fa:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80028fc:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80028fe:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002900:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8002902:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002904:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002906:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002908:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 800290a:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 800290c:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 800290e:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8002910:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8002912:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002914:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8002918:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800291c:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 800291e:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8002922:	f002 fea3 	bl	800566c <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8002926:	1b40      	subs	r0, r0, r5
 8002928:	bf18      	it	ne
 800292a:	2001      	movne	r0, #1
 800292c:	b009      	add	sp, #36	; 0x24
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	52004140 	.word	0x52004140
 8002934:	24010b84 	.word	0x24010b84

08002938 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8002938:	2800      	cmp	r0, #0
 800293a:	f040 80e1 	bne.w	8002b00 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002940:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8002942:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002946:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800294c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8002950:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8002952:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002956:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002958:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800295a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 800295c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8002962:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800296a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800296e:	430a      	orrs	r2, r1
 8002970:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002974:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002978:	400a      	ands	r2, r1
 800297a:	9202      	str	r2, [sp, #8]
 800297c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002982:	f042 0208 	orr.w	r2, r2, #8
 8002986:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800298a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800298e:	f002 0208 	and.w	r2, r2, #8
 8002992:	9203      	str	r2, [sp, #12]
 8002994:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002996:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800299a:	f042 0210 	orr.w	r2, r2, #16
 800299e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029a6:	f002 0210 	and.w	r2, r2, #16
 80029aa:	9204      	str	r2, [sp, #16]
 80029ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029be:	f002 0220 	and.w	r2, r2, #32
 80029c2:	9205      	str	r2, [sp, #20]
 80029c4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029d6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80029da:	9206      	str	r2, [sp, #24]
 80029dc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029f2:	9207      	str	r2, [sp, #28]
 80029f4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002a02:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a0a:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002a10:	483f      	ldr	r0, [pc, #252]	; (8002b10 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002a12:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002a14:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a16:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002a18:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a1a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002a1c:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002a20:	f000 feec 	bl	80037fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a24:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a28:	a909      	add	r1, sp, #36	; 0x24
 8002a2a:	483a      	ldr	r0, [pc, #232]	; (8002b14 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a2c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a2e:	f000 fee5 	bl	80037fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a32:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a36:	a909      	add	r1, sp, #36	; 0x24
 8002a38:	4837      	ldr	r0, [pc, #220]	; (8002b18 <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a3c:	f000 fede 	bl	80037fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8002a40:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a44:	a909      	add	r1, sp, #36	; 0x24
 8002a46:	4835      	ldr	r0, [pc, #212]	; (8002b1c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8002a48:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a4a:	f000 fed7 	bl	80037fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002a52:	a909      	add	r1, sp, #36	; 0x24
 8002a54:	4832      	ldr	r0, [pc, #200]	; (8002b20 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002a56:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002a58:	f000 fed0 	bl	80037fc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a5c:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a60:	a909      	add	r1, sp, #36	; 0x24
 8002a62:	4830      	ldr	r0, [pc, #192]	; (8002b24 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8002a64:	4c30      	ldr	r4, [pc, #192]	; (8002b28 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a66:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a68:	f000 fec8 	bl	80037fc <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8002a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002a70:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002a78:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8002a7a:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002a80:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002a82:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002a84:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002a86:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002a88:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8002a8a:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8002a8c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002a8e:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002a90:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002a92:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002a94:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8002a98:	4e25      	ldr	r6, [pc, #148]	; (8002b30 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8002a9a:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8002a9c:	6334      	str	r4, [r6, #48]	; 0x30
 8002a9e:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8002aa0:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8002aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8002aa8:	f001 fa10 	bl	8003ecc <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8002aac:	4620      	mov	r0, r4
 8002aae:	f001 f993 	bl	8003dd8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8002ab2:	462a      	mov	r2, r5
 8002ab4:	210f      	movs	r1, #15
 8002ab6:	207a      	movs	r0, #122	; 0x7a
 8002ab8:	f000 f8dc 	bl	8002c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8002abc:	207a      	movs	r0, #122	; 0x7a
 8002abe:	f000 f913 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f7ff ff08 	bl	80028d8 <MX_SDRAM_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b9e0      	cbnz	r0, 8002b06 <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002acc:	4919      	ldr	r1, [pc, #100]	; (8002b34 <BSP_SDRAM_Init+0x1fc>)
 8002ace:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8002ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002ad6:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8002ada:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8002adc:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8002ade:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8002ae0:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8002ae2:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8002ae4:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ae6:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002aea:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8002aec:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8002aee:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8002af0:	f7fe fc62 	bl	80013b8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002af4:	2800      	cmp	r0, #0
 8002af6:	bf18      	it	ne
 8002af8:	f06f 0004 	mvnne.w	r0, #4
}
 8002afc:	b00f      	add	sp, #60	; 0x3c
 8002afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8002b00:	f06f 0001 	mvn.w	r0, #1
}
 8002b04:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0a:	e7f7      	b.n	8002afc <BSP_SDRAM_Init+0x1c4>
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58020c00 	.word	0x58020c00
 8002b14:	58021000 	.word	0x58021000
 8002b18:	58021400 	.word	0x58021400
 8002b1c:	58021800 	.word	0x58021800
 8002b20:	58021c00 	.word	0x58021c00
 8002b24:	58022000 	.word	0x58022000
 8002b28:	2400092c 	.word	0x2400092c
 8002b2c:	52000040 	.word	0x52000040
 8002b30:	24010b84 	.word	0x24010b84
 8002b34:	24000998 	.word	0x24000998

08002b38 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_InitTick+0x40>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b90b      	cbnz	r3, 8002b46 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002b44:	4770      	bx	lr
{
 8002b46:	b510      	push	{r4, lr}
 8002b48:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_InitTick+0x44>)
 8002b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b54:	6810      	ldr	r0, [r2, #0]
 8002b56:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b5a:	f000 f8d3 	bl	8002d04 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5e:	2c0f      	cmp	r4, #15
 8002b60:	d800      	bhi.n	8002b64 <HAL_InitTick+0x28>
 8002b62:	b108      	cbz	r0, 8002b68 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002b64:	2001      	movs	r0, #1
}
 8002b66:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f880 	bl	8002c74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_InitTick+0x48>)
 8002b76:	2000      	movs	r0, #0
 8002b78:	601c      	str	r4, [r3, #0]
}
 8002b7a:	bd10      	pop	{r4, pc}
 8002b7c:	24000854 	.word	0x24000854
 8002b80:	24000000 	.word	0x24000000
 8002b84:	24000858 	.word	0x24000858

08002b88 <HAL_Init>:
{
 8002b88:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b8c:	4c12      	ldr	r4, [pc, #72]	; (8002bd8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8e:	f000 f85d 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b92:	4d12      	ldr	r5, [pc, #72]	; (8002bdc <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b94:	f001 fcee 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_Init+0x58>)
 8002b9a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b9e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ba0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ba6:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba8:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002baa:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bac:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8002bb0:	4c0c      	ldr	r4, [pc, #48]	; (8002be4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bb2:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bb6:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8002bbc:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bbe:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bc0:	f7ff ffbc 	bl	8002b3c <HAL_InitTick>
 8002bc4:	b110      	cbz	r0, 8002bcc <HAL_Init+0x44>
    return HAL_ERROR;
 8002bc6:	2401      	movs	r4, #1
}
 8002bc8:	4620      	mov	r0, r4
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	4604      	mov	r4, r0
  HAL_MspInit();
 8002bce:	f7ff ffb3 	bl	8002b38 <HAL_MspInit>
}
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	bd38      	pop	{r3, r4, r5, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08006488 	.word	0x08006488
 8002bdc:	24000004 	.word	0x24000004
 8002be0:	58024400 	.word	0x58024400
 8002be4:	24000000 	.word	0x24000000

08002be8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_IncTick+0x10>)
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_IncTick+0x14>)
 8002bec:	6811      	ldr	r1, [r2, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	24010bb8 	.word	0x24010bb8
 8002bfc:	24000854 	.word	0x24000854

08002c00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c00:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <HAL_GetTick+0x8>)
 8002c02:	6818      	ldr	r0, [r3, #0]
}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	24010bb8 	.word	0x24010bb8

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fff6 	bl	8002c00 <HAL_GetTick>
 8002c14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	1c63      	adds	r3, r4, #1
 8002c18:	d002      	beq.n	8002c20 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_Delay+0x20>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	1b43      	subs	r3, r0, r5
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	d3fa      	bcc.n	8002c20 <HAL_Delay+0x14>
  {
  }
}
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	24000854 	.word	0x24000854

08002c30 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <HAL_GetREVID+0x8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
}
 8002c34:	0c00      	lsrs	r0, r0, #16
 8002c36:	4770      	bx	lr
 8002c38:	5c001000 	.word	0x5c001000

08002c3c <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8002c3c:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_EnableCompensationCell+0xc>)
 8002c3e:	6a13      	ldr	r3, [r2, #32]
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6213      	str	r3, [r2, #32]
}
 8002c46:	4770      	bx	lr
 8002c48:	58000400 	.word	0x58000400

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c52:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002c5e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c60:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002c66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	05fa0000 	.word	0x05fa0000

08002c74 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_NVIC_SetPriority+0x68>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	2d04      	cmp	r5, #4
 8002c86:	bf28      	it	cs
 8002c88:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	2c06      	cmp	r4, #6
 8002c8c:	d919      	bls.n	8002cc2 <HAL_NVIC_SetPriority+0x4e>
 8002c8e:	3b03      	subs	r3, #3
 8002c90:	f04f 34ff 	mov.w	r4, #4294967295
 8002c94:	409c      	lsls	r4, r3
 8002c96:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9a:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002c9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	fa04 f405 	lsl.w	r4, r4, r5
 8002ca4:	ea21 0104 	bic.w	r1, r1, r4
 8002ca8:	fa01 f103 	lsl.w	r1, r1, r3
 8002cac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	db0a      	blt.n	8002cc8 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	0109      	lsls	r1, r1, #4
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_NVIC_SetPriority+0x6c>)
 8002cb6:	b2c9      	uxtb	r1, r1
 8002cb8:	4403      	add	r3, r0
 8002cba:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002cbe:	bc30      	pop	{r4, r5}
 8002cc0:	4770      	bx	lr
 8002cc2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	e7e8      	b.n	8002c9a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	f000 000f 	and.w	r0, r0, #15
 8002ccc:	0109      	lsls	r1, r1, #4
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_NVIC_SetPriority+0x70>)
 8002cd0:	b2c9      	uxtb	r1, r1
 8002cd2:	4403      	add	r3, r0
 8002cd4:	7619      	strb	r1, [r3, #24]
 8002cd6:	bc30      	pop	{r4, r5}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ecfc 	.word	0xe000ecfc

08002ce8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	db07      	blt.n	8002cfc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cec:	2301      	movs	r3, #1
 8002cee:	f000 011f 	and.w	r1, r0, #31
 8002cf2:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_NVIC_EnableIRQ+0x18>)
 8002cf4:	0940      	lsrs	r0, r0, #5
 8002cf6:	408b      	lsls	r3, r1
 8002cf8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	3801      	subs	r0, #1
 8002d06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002d0a:	d20d      	bcs.n	8002d28 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d10:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	25f0      	movs	r5, #240	; 0xf0
 8002d16:	4c06      	ldr	r4, [pc, #24]	; (8002d30 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d18:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d22:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002d24:	bc30      	pop	{r4, r5}
 8002d26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d28:	2001      	movs	r0, #1
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e010 	.word	0xe000e010
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002d34:	b470      	push	{r4, r5, r6}
 8002d36:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d38:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8002d40:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d42:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d46:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002d4a:	ea43 0304 	orr.w	r3, r3, r4
 8002d4e:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002d50:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d52:	d008      	beq.n	8002d66 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002d54:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8002d58:	d002      	beq.n	8002d60 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d5a:	60e9      	str	r1, [r5, #12]
  }
}
 8002d5c:	bc70      	pop	{r4, r5, r6}
 8002d5e:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002d60:	6169      	str	r1, [r5, #20]
}
 8002d62:	bc70      	pop	{r4, r5, r6}
 8002d64:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002d66:	6883      	ldr	r3, [r0, #8]
 8002d68:	b1b3      	cbz	r3, 8002d98 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d017      	beq.n	8002d9e <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d6e:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002d70:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002d74:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002d78:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d7a:	d01e      	beq.n	8002dba <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d7c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d7e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d82:	d00f      	beq.n	8002da4 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8002d84:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8002d86:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d88:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8002d8a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d8c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002d94:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d98:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8002d9a:	bc70      	pop	{r4, r5, r6}
 8002d9c:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8002d9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002da2:	e7f9      	b.n	8002d98 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8002da4:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8002da6:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002da8:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8002daa:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002dac:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8002db0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002db4:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002db8:	e7ee      	b.n	8002d98 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8002dba:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8002dbc:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002dbe:	02c9      	lsls	r1, r1, #11
 8002dc0:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8002dc4:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002dc8:	e7e6      	b.n	8002d98 <DMA2D_SetConfig+0x64>
 8002dca:	bf00      	nop

08002dcc <HAL_DMA2D_MspInit>:
}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA2D_Init+0x72>
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002dd6:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8002dda:	4604      	mov	r4, r0
 8002ddc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002de0:	b353      	cbz	r3, 8002e38 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002de2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002de4:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002de6:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002de8:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dea:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002dee:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_DMA2D_Init+0x78>)
 8002df0:	681e      	ldr	r6, [r3, #0]
 8002df2:	6862      	ldr	r2, [r4, #4]
 8002df4:	4031      	ands	r1, r6
 8002df6:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002df8:	4814      	ldr	r0, [pc, #80]	; (8002e4c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002dfa:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002dfc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002dfe:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002e00:	69a1      	ldr	r1, [r4, #24]
 8002e02:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002e04:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e06:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002e08:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e0a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002e0c:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e0e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e14:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002e16:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e18:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002e1a:	0552      	lsls	r2, r2, #21
 8002e1c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e1e:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e22:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8002e26:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002e28:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e30:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e32:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002e38:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8002e3c:	f7ff ffc6 	bl	8002dcc <HAL_DMA2D_MspInit>
 8002e40:	e7cf      	b.n	8002de2 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8002e42:	2001      	movs	r0, #1
}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	fff8ffbf 	.word	0xfff8ffbf
 8002e4c:	fffffef8 	.word	0xfffffef8
 8002e50:	ffff0000 	.word	0xffff0000

08002e54 <HAL_DMA2D_Start>:
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002e56:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8002e5a:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8002e5c:	2d01      	cmp	r5, #1
 8002e5e:	d011      	beq.n	8002e84 <HAL_DMA2D_Start+0x30>
 8002e60:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e62:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e64:	2502      	movs	r5, #2
 8002e66:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e68:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8002e6a:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e6e:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e72:	f7ff ff5f 	bl	8002d34 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e76:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8002e78:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	4333      	orrs	r3, r6
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	b003      	add	sp, #12
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8002e84:	2002      	movs	r0, #2
}
 8002e86:	b003      	add	sp, #12
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8a:	bf00      	nop

08002e8c <HAL_DMA2D_PollForTransfer>:
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002e8e:	2300      	movs	r3, #0
{
 8002e90:	b082      	sub	sp, #8
 8002e92:	4605      	mov	r5, r0
 8002e94:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8002e96:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e98:	6803      	ldr	r3, [r0, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	07d2      	lsls	r2, r2, #31
 8002e9e:	d40f      	bmi.n	8002ec0 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002ea0:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ea2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ea4:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8002ea6:	0692      	lsls	r2, r2, #26
 8002ea8:	d433      	bmi.n	8002f12 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8002eaa:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002eac:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eae:	2101      	movs	r1, #1
  return HAL_OK;
 8002eb0:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002eb2:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002eb4:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eb8:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002ec0:	f7ff fe9e 	bl	8002c00 <HAL_GetTick>
 8002ec4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	e001      	b.n	8002ece <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8002eca:	1c60      	adds	r0, r4, #1
 8002ecc:	d148      	bne.n	8002f60 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	0791      	lsls	r1, r2, #30
 8002ed2:	d4e5      	bmi.n	8002ea0 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ed8:	9a01      	ldr	r2, [sp, #4]
 8002eda:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002ede:	d0f4      	beq.n	8002eca <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ee0:	9a01      	ldr	r2, [sp, #4]
 8002ee2:	0696      	lsls	r6, r2, #26
 8002ee4:	d503      	bpl.n	8002eee <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ee6:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002ee8:	f042 0202 	orr.w	r2, r2, #2
 8002eec:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eee:	9a01      	ldr	r2, [sp, #4]
 8002ef0:	07d4      	lsls	r4, r2, #31
 8002ef2:	d503      	bpl.n	8002efc <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ef4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002efe:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8002f00:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f04:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f06:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8002f0a:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002f12:	f7ff fe75 	bl	8002c00 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	e001      	b.n	8002f20 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8002f1c:	1c61      	adds	r1, r4, #1
 8002f1e:	d132      	bne.n	8002f86 <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	06d2      	lsls	r2, r2, #27
 8002f24:	d4c1      	bmi.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f2a:	9a01      	ldr	r2, [sp, #4]
 8002f2c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002f30:	d0f4      	beq.n	8002f1c <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f32:	9a01      	ldr	r2, [sp, #4]
 8002f34:	0716      	lsls	r6, r2, #28
 8002f36:	d503      	bpl.n	8002f40 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f38:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002f3a:	f042 0204 	orr.w	r2, r2, #4
 8002f3e:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f40:	9a01      	ldr	r2, [sp, #4]
 8002f42:	0694      	lsls	r4, r2, #26
 8002f44:	d503      	bpl.n	8002f4e <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f46:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002f48:	f042 0202 	orr.w	r2, r2, #2
 8002f4c:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f4e:	9a01      	ldr	r2, [sp, #4]
 8002f50:	07d0      	lsls	r0, r2, #31
 8002f52:	d503      	bpl.n	8002f5c <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f54:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f5c:	2429      	movs	r4, #41	; 0x29
 8002f5e:	e7ce      	b.n	8002efe <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7ff fe4e 	bl	8002c00 <HAL_GetTick>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	42a0      	cmp	r0, r4
 8002f68:	d801      	bhi.n	8002f6e <HAL_DMA2D_PollForTransfer+0xe2>
 8002f6a:	2c00      	cmp	r4, #0
 8002f6c:	d1ab      	bne.n	8002ec6 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f70:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8002f72:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f74:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8002f78:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8002f7a:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f7e:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f80:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8002f84:	e79a      	b.n	8002ebc <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7ff fe3b 	bl	8002c00 <HAL_GetTick>
 8002f8a:	1b80      	subs	r0, r0, r6
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d8ee      	bhi.n	8002f6e <HAL_DMA2D_PollForTransfer+0xe2>
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d1c1      	bne.n	8002f18 <HAL_DMA2D_PollForTransfer+0x8c>
 8002f94:	e7eb      	b.n	8002f6e <HAL_DMA2D_PollForTransfer+0xe2>
 8002f96:	bf00      	nop

08002f98 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002f98:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d063      	beq.n	8003068 <HAL_DMA2D_ConfigLayer+0xd0>
 8002fa0:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fa2:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fa6:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8002fac:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8002fae:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8002fb4:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002fb8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fba:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002fbc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002fbe:	0512      	lsls	r2, r2, #20
 8002fc0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fc2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fc6:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fca:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fcc:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002fce:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fd2:	d922      	bls.n	800301a <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fd4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002fd6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fda:	b981      	cbnz	r1, 8002ffe <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	4923      	ldr	r1, [pc, #140]	; (800306c <HAL_DMA2D_ConfigLayer+0xd4>)
 8002fe0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fe2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fe4:	4029      	ands	r1, r5
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fea:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8002fec:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fee:	2101      	movs	r1, #1
  return HAL_OK;
 8002ff0:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ff2:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 8002ff6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8002ffa:	bc70      	pop	{r4, r5, r6}
 8002ffc:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002ffe:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003000:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003002:	d129      	bne.n	8003058 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003004:	69e6      	ldr	r6, [r4, #28]
 8003006:	491a      	ldr	r1, [pc, #104]	; (8003070 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003008:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800300a:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800300c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800300e:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8003012:	430a      	orrs	r2, r1
 8003014:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003016:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003018:	e7e8      	b.n	8002fec <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800301a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800301c:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8003020:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003022:	b161      	cbz	r1, 800303e <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	4c11      	ldr	r4, [pc, #68]	; (800306c <HAL_DMA2D_ConfigLayer+0xd4>)
 8003028:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800302a:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800302c:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800302e:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003030:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003034:	4322      	orrs	r2, r4
 8003036:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003038:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800303a:	620d      	str	r5, [r1, #32]
 800303c:	e7d6      	b.n	8002fec <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <HAL_DMA2D_ConfigLayer+0xd4>)
 8003042:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003044:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003046:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003048:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800304a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800304e:	4322      	orrs	r2, r4
 8003050:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003052:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003054:	6288      	str	r0, [r1, #40]	; 0x28
 8003056:	e7c9      	b.n	8002fec <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003058:	69e5      	ldr	r5, [r4, #28]
 800305a:	4904      	ldr	r1, [pc, #16]	; (800306c <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800305c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800305e:	4029      	ands	r1, r5
 8003060:	430a      	orrs	r2, r1
 8003062:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003064:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003066:	e7c1      	b.n	8002fec <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8003068:	2002      	movs	r0, #2
}
 800306a:	4770      	bx	lr
 800306c:	00ccfff0 	.word	0x00ccfff0
 8003070:	00c0fff0 	.word	0x00c0fff0

08003074 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003078:	4605      	mov	r5, r0
 800307a:	4688      	mov	r8, r1
 800307c:	4617      	mov	r7, r2
 800307e:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003080:	f7ff fdbe 	bl	8002c00 <HAL_GetTick>
 8003084:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003086:	e005      	b.n	8003094 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003088:	f7ff fdba 	bl	8002c00 <HAL_GetTick>
 800308c:	1b84      	subs	r4, r0, r6
 800308e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003092:	d80e      	bhi.n	80030b2 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003094:	682c      	ldr	r4, [r5, #0]
 8003096:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003098:	07db      	lsls	r3, r3, #31
 800309a:	d5f5      	bpl.n	8003088 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800309c:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 80030a0:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 80030a2:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80030a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80030a8:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 80030ac:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 80030ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
}
 80030b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080030b8 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop

080030bc <HAL_DSI_Init>:
  if (hdsi == NULL)
 80030bc:	2800      	cmp	r0, #0
 80030be:	f000 80b3 	beq.w	8003228 <HAL_DSI_Init+0x16c>
{
 80030c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80030c4:	7c43      	ldrb	r3, [r0, #17]
{
 80030c6:	b083      	sub	sp, #12
 80030c8:	460d      	mov	r5, r1
 80030ca:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a8 	beq.w	8003222 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 80030d2:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 80030d4:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 80030d6:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 80030d8:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80030da:	9200      	str	r2, [sp, #0]
 80030dc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030e4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80030e8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80030f4:	f7ff fd84 	bl	8002c00 <HAL_GetTick>
 80030f8:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030fa:	e006      	b.n	800310a <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030fc:	f7ff fd80 	bl	8002c00 <HAL_GetTick>
 8003100:	1b83      	subs	r3, r0, r6
 8003102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003106:	f200 8089 	bhi.w	800321c <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003110:	04d1      	lsls	r1, r2, #19
 8003112:	d5f3      	bpl.n	80030fc <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003114:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003116:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003118:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800311c:	682e      	ldr	r6, [r5, #0]
 800311e:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003120:	4942      	ldr	r1, [pc, #264]	; (800322c <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003122:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 8003126:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003128:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800312a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800312e:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003132:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003136:	430a      	orrs	r2, r1
 8003138:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800313c:	9001      	str	r0, [sp, #4]
 800313e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800314a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8003156:	f7ff fd53 	bl	8002c00 <HAL_GetTick>
 800315a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800315c:	e005      	b.n	800316a <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800315e:	f7ff fd4f 	bl	8002c00 <HAL_GetTick>
 8003162:	1b80      	subs	r0, r0, r6
 8003164:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003168:	d858      	bhi.n	800321c <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003170:	05d2      	lsls	r2, r2, #23
 8003172:	d5f4      	bpl.n	800315e <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003174:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003178:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800317c:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 800317e:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003180:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003184:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003186:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800318a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800318e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003192:	f022 0203 	bic.w	r2, r2, #3
 8003196:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800319a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800319e:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031a0:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031a2:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031a4:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031a8:	bf38      	it	cc
 80031aa:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031ac:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80031b0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031b4:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80031b6:	f020 0003 	bic.w	r0, r0, #3
 80031ba:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80031be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031c2:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80031c4:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031c6:	682d      	ldr	r5, [r5, #0]
 80031c8:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80031cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031d0:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031d8:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031dc:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031e0:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80031e2:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031e4:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80031e6:	ea46 060e 	orr.w	r6, r6, lr
 80031ea:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 80031ec:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80031ee:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031f2:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80031f6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80031fa:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 80031fe:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003200:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8003204:	432a      	orrs	r2, r5
 8003206:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800320a:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800320e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003212:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8003214:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8003216:	7466      	strb	r6, [r4, #17]
}
 8003218:	b003      	add	sp, #12
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800321c:	2003      	movs	r0, #3
}
 800321e:	b003      	add	sp, #12
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8003222:	f7ff ff49 	bl	80030b8 <HAL_DSI_MspInit>
 8003226:	e754      	b.n	80030d2 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8003228:	2001      	movs	r0, #1
}
 800322a:	4770      	bx	lr
 800322c:	fffc8603 	.word	0xfffc8603
 8003230:	003d0900 	.word	0x003d0900

08003234 <HAL_DSI_TearingEffectCallback>:
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <HAL_DSI_EndOfRefreshCallback>:
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_DSI_ErrorCallback>:
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003240:	6803      	ldr	r3, [r0, #0]
 8003242:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003246:	07d1      	lsls	r1, r2, #31
{
 8003248:	b510      	push	{r4, lr}
 800324a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800324c:	d503      	bpl.n	8003256 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800324e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003252:	07d2      	lsls	r2, r2, #31
 8003254:	d462      	bmi.n	800331c <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003256:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800325a:	0791      	lsls	r1, r2, #30
 800325c:	d503      	bpl.n	8003266 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800325e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003262:	0792      	lsls	r2, r2, #30
 8003264:	d44f      	bmi.n	8003306 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003266:	69a3      	ldr	r3, [r4, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d04b      	beq.n	8003304 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800326c:	6821      	ldr	r1, [r4, #0]
 800326e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003272:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003276:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800327a:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800327c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003280:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003282:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003284:	b119      	cbz	r1, 800328e <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003286:	6961      	ldr	r1, [r4, #20]
 8003288:	f041 0101 	orr.w	r1, r1, #1
 800328c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800328e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8003292:	d003      	beq.n	800329c <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003294:	6962      	ldr	r2, [r4, #20]
 8003296:	f042 0202 	orr.w	r2, r2, #2
 800329a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800329c:	07d8      	lsls	r0, r3, #31
 800329e:	d503      	bpl.n	80032a8 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80032a0:	6962      	ldr	r2, [r4, #20]
 80032a2:	f042 0204 	orr.w	r2, r2, #4
 80032a6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80032a8:	0799      	lsls	r1, r3, #30
 80032aa:	d503      	bpl.n	80032b4 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80032ac:	6962      	ldr	r2, [r4, #20]
 80032ae:	f042 0208 	orr.w	r2, r2, #8
 80032b2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80032b4:	f013 0f0c 	tst.w	r3, #12
 80032b8:	d003      	beq.n	80032c2 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80032ba:	6962      	ldr	r2, [r4, #20]
 80032bc:	f042 0210 	orr.w	r2, r2, #16
 80032c0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80032c2:	06da      	lsls	r2, r3, #27
 80032c4:	d503      	bpl.n	80032ce <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80032c6:	6962      	ldr	r2, [r4, #20]
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80032ce:	0698      	lsls	r0, r3, #26
 80032d0:	d503      	bpl.n	80032da <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80032d2:	6962      	ldr	r2, [r4, #20]
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80032da:	0659      	lsls	r1, r3, #25
 80032dc:	d503      	bpl.n	80032e6 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80032de:	6962      	ldr	r2, [r4, #20]
 80032e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80032e6:	061a      	lsls	r2, r3, #24
 80032e8:	d503      	bpl.n	80032f2 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80032ea:	6962      	ldr	r2, [r4, #20]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80032f2:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 80032f6:	d003      	beq.n	8003300 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80032f8:	6963      	ldr	r3, [r4, #20]
 80032fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fe:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003300:	6963      	ldr	r3, [r4, #20]
 8003302:	b93b      	cbnz	r3, 8003314 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003304:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003306:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003308:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800330a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800330e:	f7ff ff93 	bl	8003238 <HAL_DSI_EndOfRefreshCallback>
 8003312:	e7a8      	b.n	8003266 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff91 	bl	800323c <HAL_DSI_ErrorCallback>
}
 800331a:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800331c:	2201      	movs	r2, #1
 800331e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8003322:	f7ff ff87 	bl	8003234 <HAL_DSI_TearingEffectCallback>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	e795      	b.n	8003256 <HAL_DSI_IRQHandler+0x16>
 800332a:	bf00      	nop

0800332c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800332c:	7c03      	ldrb	r3, [r0, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	f000 8113 	beq.w	800355a <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003334:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8003336:	2201      	movs	r2, #1
{
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800333c:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800333e:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003342:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003344:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003348:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800334c:	4e84      	ldr	r6, [pc, #528]	; (8003560 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800334e:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003350:	4d84      	ldr	r5, [pc, #528]	; (8003564 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003352:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003358:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003366:	f022 0203 	bic.w	r2, r2, #3
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800336c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800336e:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003372:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003376:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337a:	ea06 0602 	and.w	r6, r6, r2
 800337e:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003382:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003386:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800338c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338e:	ea02 0205 	and.w	r2, r2, r5
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003394:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8003396:	ea47 0708 	orr.w	r7, r7, r8
 800339a:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800339c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800339e:	ea06 0605 	and.w	r6, r6, r5
 80033a2:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80033a4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80033a6:	ea45 050e 	orr.w	r5, r5, lr
 80033aa:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80033ac:	68dd      	ldr	r5, [r3, #12]
 80033ae:	f025 0503 	bic.w	r5, r5, #3
 80033b2:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	ea42 020c 	orr.w	r2, r2, ip
 80033ba:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033bc:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033be:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033c0:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033c4:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033c8:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033ca:	ea42 0206 	orr.w	r2, r2, r6
 80033ce:	695d      	ldr	r5, [r3, #20]
 80033d0:	ea42 0207 	orr.w	r2, r2, r7
 80033d4:	ea42 0205 	orr.w	r2, r2, r5
 80033d8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	f022 020f 	bic.w	r2, r2, #15
 80033e0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	ea42 0200 	orr.w	r2, r2, r0
 80033e8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80033ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033ee:	f022 020e 	bic.w	r2, r2, #14
 80033f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80033f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033fa:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80033fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003402:	d107      	bne.n	8003414 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003404:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003406:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003408:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800340c:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	432a      	orrs	r2, r5
 8003412:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003414:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003416:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003418:	4a53      	ldr	r2, [pc, #332]	; (8003568 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800341a:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800341c:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800341e:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003422:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003426:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003428:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800342a:	4f50      	ldr	r7, [pc, #320]	; (800356c <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800342c:	4305      	orrs	r5, r0
 800342e:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003430:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003432:	4010      	ands	r0, r2
 8003434:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003438:	484d      	ldr	r0, [pc, #308]	; (8003570 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800343a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800343e:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003442:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003446:	4017      	ands	r7, r2
 8003448:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800344a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800344c:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003450:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003454:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003456:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8003458:	4005      	ands	r5, r0
 800345a:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800345c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800345e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003462:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800346a:	4002      	ands	r2, r0
 800346c:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800346e:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003470:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003472:	ea47 070e 	orr.w	r7, r7, lr
 8003476:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003478:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800347a:	4007      	ands	r7, r0

  return HAL_OK;
 800347c:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800347e:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003480:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8003482:	ea45 050c 	orr.w	r5, r5, ip
 8003486:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003488:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800348a:	402a      	ands	r2, r5
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800348e:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8003490:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003492:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003496:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003498:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800349c:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800349e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80034a0:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 80034a4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80034a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a8:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80034ac:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80034b2:	699f      	ldr	r7, [r3, #24]
 80034b4:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 80034b8:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80034ba:	699d      	ldr	r5, [r3, #24]
 80034bc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80034c0:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80034c4:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80034c6:	699d      	ldr	r5, [r3, #24]
 80034c8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80034cc:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80034d4:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80034d8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80034da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80034e2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80034e4:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80034e8:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80034ec:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80034ee:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80034f0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80034f4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80034f6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80034f8:	ea45 050e 	orr.w	r5, r5, lr
 80034fc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80034fe:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8003500:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003504:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	ea42 020c 	orr.w	r2, r2, ip
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800350e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003510:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003512:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003516:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800351a:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800351c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351e:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003520:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800352e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8003530:	ea45 050e 	orr.w	r5, r5, lr
 8003534:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003536:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8003538:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800353c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800353e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003540:	ea41 010c 	orr.w	r1, r1, ip
 8003544:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003546:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003548:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800354c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800354e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003550:	433a      	orrs	r2, r7
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8003554:	7426      	strb	r6, [r4, #16]
}
 8003556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 800355a:	2002      	movs	r0, #2
}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	ffffc000 	.word	0xffffc000
 8003564:	ffffe000 	.word	0xffffe000
 8003568:	fffff000 	.word	0xfffff000
 800356c:	ffff8000 	.word	0xffff8000
 8003570:	fffffc00 	.word	0xfffffc00

08003574 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003574:	7c02      	ldrb	r2, [r0, #16]
 8003576:	2a01      	cmp	r2, #1
 8003578:	d00e      	beq.n	8003598 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800357a:	6802      	ldr	r2, [r0, #0]
 800357c:	4603      	mov	r3, r0
{
 800357e:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003580:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003582:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003584:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8003588:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800358a:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800358c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800358e:	4321      	orrs	r1, r4
 8003590:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8003592:	741d      	strb	r5, [r3, #16]
}
 8003594:	bc30      	pop	{r4, r5}
 8003596:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003598:	2002      	movs	r0, #2
}
 800359a:	4770      	bx	lr

0800359c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800359c:	7c03      	ldrb	r3, [r0, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d021      	beq.n	80035e6 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80035a2:	6803      	ldr	r3, [r0, #0]
 80035a4:	2100      	movs	r1, #0
 80035a6:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80035a8:	4608      	mov	r0, r1
{
 80035aa:	b410      	push	{r4}
 80035ac:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 80035ae:	9100      	str	r1, [sp, #0]
 80035b0:	685c      	ldr	r4, [r3, #4]
 80035b2:	f044 0401 	orr.w	r4, r4, #1
 80035b6:	605c      	str	r4, [r3, #4]
 80035b8:	685c      	ldr	r4, [r3, #4]
 80035ba:	f004 0401 	and.w	r4, r4, #1
 80035be:	9400      	str	r4, [sp, #0]
 80035c0:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80035c2:	9101      	str	r1, [sp, #4]
 80035c4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80035c8:	f044 0408 	orr.w	r4, r4, #8
 80035cc:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 80035d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 80035d4:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	9b01      	ldr	r3, [sp, #4]
}
 80035de:	b003      	add	sp, #12
 80035e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80035e6:	2002      	movs	r0, #2
}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop

080035ec <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80035ee:	7c05      	ldrb	r5, [r0, #16]
{
 80035f0:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80035f2:	2d01      	cmp	r5, #1
 80035f4:	d00a      	beq.n	800360c <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80035f6:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 80035f8:	2501      	movs	r5, #1
 80035fa:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80035fc:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 80035fe:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003600:	f7ff fd38 	bl	8003074 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003604:	2300      	movs	r3, #0
 8003606:	7423      	strb	r3, [r4, #16]

  return status;
}
 8003608:	b002      	add	sp, #8
 800360a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 800360c:	2002      	movs	r0, #2
}
 800360e:	b002      	add	sp, #8
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	bf00      	nop

08003614 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800361a:	7c03      	ldrb	r3, [r0, #16]
{
 800361c:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 800361e:	2b01      	cmp	r3, #1
 8003620:	d05e      	beq.n	80036e0 <HAL_DSI_LongWrite+0xcc>
 8003622:	2301      	movs	r3, #1
 8003624:	4607      	mov	r7, r0
 8003626:	4689      	mov	r9, r1
 8003628:	4692      	mov	sl, r2
 800362a:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7ff fae8 	bl	8002c00 <HAL_GetTick>
 8003630:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003632:	e005      	b.n	8003640 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003634:	f7ff fae4 	bl	8002c00 <HAL_GetTick>
 8003638:	1b40      	subs	r0, r0, r5
 800363a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800363e:	d84b      	bhi.n	80036d8 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8003644:	f014 0401 	ands.w	r4, r4, #1
 8003648:	d0f4      	beq.n	8003634 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800364a:	4640      	mov	r0, r8
 800364c:	2803      	cmp	r0, #3
 800364e:	bf28      	it	cs
 8003650:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8003652:	f1b8 0f00 	cmp.w	r8, #0
 8003656:	d046      	beq.n	80036e6 <HAL_DSI_LongWrite+0xd2>
 8003658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800365a:	1e5c      	subs	r4, r3, #1
 800365c:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800365e:	3301      	adds	r3, #1
 8003660:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8003664:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8003666:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003668:	fa02 f205 	lsl.w	r2, r2, r5
 800366c:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8003670:	d3f5      	bcc.n	800365e <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8003672:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8003674:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8003676:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003678:	ebb8 0000 	subs.w	r0, r8, r0
 800367c:	d017      	beq.n	80036ae <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800367e:	2804      	cmp	r0, #4
 8003680:	4684      	mov	ip, r0
 8003682:	f04f 0500 	mov.w	r5, #0
 8003686:	bf28      	it	cs
 8003688:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 800368c:	462b      	mov	r3, r5
 800368e:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003692:	f816 4b01 	ldrb.w	r4, [r6], #1
 8003696:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8003698:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800369a:	f105 0508 	add.w	r5, r5, #8
 800369e:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 80036a2:	d1f6      	bne.n	8003692 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 80036a4:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 80036a8:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 80036aa:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80036ac:	d1e7      	bne.n	800367e <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80036ae:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80036b2:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036b6:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80036b8:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 80036bc:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80036be:	46c8      	mov	r8, r9
 80036c0:	fa1f f989 	uxth.w	r9, r9
 80036c4:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 80036c8:	ea43 0309 	orr.w	r3, r3, r9
 80036cc:	ea43 0308 	orr.w	r3, r3, r8
 80036d0:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80036d2:	743a      	strb	r2, [r7, #16]
}
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 80036d8:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80036da:	743c      	strb	r4, [r7, #16]
}
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 80036e0:	2002      	movs	r0, #2
}
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 80036e6:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80036e8:	e7e1      	b.n	80036ae <HAL_DSI_LongWrite+0x9a>
 80036ea:	bf00      	nop

080036ec <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80036ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f0:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80036f2:	7c02      	ldrb	r2, [r0, #16]
{
 80036f4:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80036f6:	2a01      	cmp	r2, #1
{
 80036f8:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 80036fa:	d070      	beq.n	80037de <HAL_DSI_Read+0xf2>
 80036fc:	461e      	mov	r6, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	4607      	mov	r7, r0
 8003702:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8003704:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8003706:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8003708:	d80d      	bhi.n	8003726 <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800370a:	2c06      	cmp	r4, #6
 800370c:	d017      	beq.n	800373e <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800370e:	2c04      	cmp	r4, #4
 8003710:	d04f      	beq.n	80037b2 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8003712:	2c14      	cmp	r4, #20
 8003714:	d067      	beq.n	80037e6 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8003716:	2c24      	cmp	r4, #36	; 0x24
 8003718:	d052      	beq.n	80037c0 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 800371a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800371c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800371e:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8003720:	b002      	add	sp, #8
 8003722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8003726:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800372a:	b2f3      	uxtb	r3, r6
 800372c:	2237      	movs	r2, #55	; 0x37
 800372e:	f8cd c000 	str.w	ip, [sp]
 8003732:	f7ff fc9f 	bl	8003074 <DSI_ShortWrite>
 8003736:	2800      	cmp	r0, #0
 8003738:	d1ef      	bne.n	800371a <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800373a:	2c06      	cmp	r4, #6
 800373c:	d1e7      	bne.n	800370e <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800373e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8003740:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8003748:	f043 0306 	orr.w	r3, r3, #6
 800374c:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800374e:	f7ff fa57 	bl	8002c00 <HAL_GetTick>
 8003752:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8003754:	e006      	b.n	8003764 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003756:	f7ff fa53 	bl	8002c00 <HAL_GetTick>
 800375a:	eba0 0008 	sub.w	r0, r0, r8
 800375e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003762:	d81b      	bhi.n	800379c <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8003764:	2e00      	cmp	r6, #0
 8003766:	dd1f      	ble.n	80037a8 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800376c:	f011 0110 	ands.w	r1, r1, #16
 8003770:	d1f1      	bne.n	8003756 <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8003772:	2e04      	cmp	r6, #4
 8003774:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8003776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8003778:	bf28      	it	cs
 800377a:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 800377c:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800377e:	fa22 f401 	lsr.w	r4, r2, r1
 8003782:	3108      	adds	r1, #8
 8003784:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8003788:	429d      	cmp	r5, r3
 800378a:	d1f8      	bne.n	800377e <HAL_DSI_Read+0x92>
 800378c:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800378e:	f7ff fa37 	bl	8002c00 <HAL_GetTick>
 8003792:	eba0 0008 	sub.w	r0, r0, r8
 8003796:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800379a:	d9e3      	bls.n	8003764 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 800379c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800379e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80037a0:	743b      	strb	r3, [r7, #16]
}
 80037a2:	b002      	add	sp, #8
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 80037a8:	2000      	movs	r0, #0
 80037aa:	7438      	strb	r0, [r7, #16]
}
 80037ac:	b002      	add	sp, #8
 80037ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037b2:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80037b6:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80037be:	e7c6      	b.n	800374e <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80037c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037c2:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80037c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037c8:	7852      	ldrb	r2, [r2, #1]
 80037ca:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80037d0:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037d6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80037da:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80037dc:	e7b7      	b.n	800374e <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 80037de:	2002      	movs	r0, #2
}
 80037e0:	b002      	add	sp, #8
 80037e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80037e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037e8:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80037ec:	7811      	ldrb	r1, [r2, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80037f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037f4:	f043 0314 	orr.w	r3, r3, #20
 80037f8:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80037fa:	e7a8      	b.n	800374e <HAL_DSI_Read+0x62>

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003800:	680e      	ldr	r6, [r1, #0]
{
 8003802:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003804:	2e00      	cmp	r6, #0
 8003806:	f000 80d3 	beq.w	80039b0 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800380a:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380c:	f8df a220 	ldr.w	sl, [pc, #544]	; 8003a30 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003810:	f8df b220 	ldr.w	fp, [pc, #544]	; 8003a34 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003814:	46b1      	mov	r9, r6
 8003816:	e020      	b.n	800385a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8003818:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800381a:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381e:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003822:	f04f 0e0f 	mov.w	lr, #15
 8003826:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800382a:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800382c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8003834:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003836:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800383a:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800383e:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003842:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003846:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003848:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800384a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800384c:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800384e:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8003850:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003852:	fa39 f203 	lsrs.w	r2, r9, r3
 8003856:	f000 80ab 	beq.w	80039b0 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800385a:	2201      	movs	r2, #1
 800385c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800385e:	ea12 0809 	ands.w	r8, r2, r9
 8003862:	d0f5      	beq.n	8003850 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003864:	684c      	ldr	r4, [r1, #4]
 8003866:	005f      	lsls	r7, r3, #1
 8003868:	f024 0c10 	bic.w	ip, r4, #16
 800386c:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003870:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003872:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003876:	f200 809e 	bhi.w	80039b6 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800387a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800387e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003882:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003884:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003886:	ea2e 0e05 	bic.w	lr, lr, r5
 800388a:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800388c:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388e:	68ce      	ldr	r6, [r1, #12]
 8003890:	40be      	lsls	r6, r7
 8003892:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003896:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8003898:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800389c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038a0:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038a4:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80038a6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80038a8:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038aa:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ae:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b0:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b4:	fa02 f207 	lsl.w	r2, r2, r7
 80038b8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 80038bc:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038be:	d0ab      	beq.n	8003818 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 80038c0:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c2:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038c6:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c8:	fa02 f707 	lsl.w	r7, r2, r7
 80038cc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80038ce:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d0:	00e6      	lsls	r6, r4, #3
 80038d2:	d5bd      	bpl.n	8003850 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d4:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80038d8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	f046 0602 	orr.w	r6, r6, #2
 80038e6:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038ea:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ec:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80038f0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80038f4:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f8:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fc:	f006 0602 	and.w	r6, r6, #2
 8003900:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003902:	4e42      	ldr	r6, [pc, #264]	; (8003a0c <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003904:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003906:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003908:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800390a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800390e:	d020      	beq.n	8003952 <HAL_GPIO_Init+0x156>
 8003910:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003914:	42b0      	cmp	r0, r6
 8003916:	d056      	beq.n	80039c6 <HAL_GPIO_Init+0x1ca>
 8003918:	4e3d      	ldr	r6, [pc, #244]	; (8003a10 <HAL_GPIO_Init+0x214>)
 800391a:	42b0      	cmp	r0, r6
 800391c:	d058      	beq.n	80039d0 <HAL_GPIO_Init+0x1d4>
 800391e:	4e3d      	ldr	r6, [pc, #244]	; (8003a14 <HAL_GPIO_Init+0x218>)
 8003920:	42b0      	cmp	r0, r6
 8003922:	d04b      	beq.n	80039bc <HAL_GPIO_Init+0x1c0>
 8003924:	4e3c      	ldr	r6, [pc, #240]	; (8003a18 <HAL_GPIO_Init+0x21c>)
 8003926:	42b0      	cmp	r0, r6
 8003928:	d05c      	beq.n	80039e4 <HAL_GPIO_Init+0x1e8>
 800392a:	4e3c      	ldr	r6, [pc, #240]	; (8003a1c <HAL_GPIO_Init+0x220>)
 800392c:	42b0      	cmp	r0, r6
 800392e:	d05e      	beq.n	80039ee <HAL_GPIO_Init+0x1f2>
 8003930:	4e3b      	ldr	r6, [pc, #236]	; (8003a20 <HAL_GPIO_Init+0x224>)
 8003932:	42b0      	cmp	r0, r6
 8003934:	d051      	beq.n	80039da <HAL_GPIO_Init+0x1de>
 8003936:	4e3b      	ldr	r6, [pc, #236]	; (8003a24 <HAL_GPIO_Init+0x228>)
 8003938:	42b0      	cmp	r0, r6
 800393a:	d05d      	beq.n	80039f8 <HAL_GPIO_Init+0x1fc>
 800393c:	4e3a      	ldr	r6, [pc, #232]	; (8003a28 <HAL_GPIO_Init+0x22c>)
 800393e:	42b0      	cmp	r0, r6
 8003940:	d05f      	beq.n	8003a02 <HAL_GPIO_Init+0x206>
 8003942:	4e3a      	ldr	r6, [pc, #232]	; (8003a2c <HAL_GPIO_Init+0x230>)
 8003944:	42b0      	cmp	r0, r6
 8003946:	bf0c      	ite	eq
 8003948:	2609      	moveq	r6, #9
 800394a:	260a      	movne	r6, #10
 800394c:	fa06 f202 	lsl.w	r2, r6, r2
 8003950:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003952:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8003954:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8003958:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800395c:	03e5      	lsls	r5, r4, #15
    position++;
 800395e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8003962:	bf54      	ite	pl
 8003964:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8003966:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800396a:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800396e:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8003970:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8003974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003978:	bf54      	ite	pl
 800397a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800397c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003980:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8003982:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8003986:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8003988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800398c:	bf54      	ite	pl
 800398e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003990:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003994:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8003996:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800399a:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800399c:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800399e:	bf54      	ite	pl
 80039a0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80039a2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80039a6:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039a8:	fa39 f203 	lsrs.w	r2, r9, r3
 80039ac:	f47f af55 	bne.w	800385a <HAL_GPIO_Init+0x5e>
  }
}
 80039b0:	b005      	add	sp, #20
 80039b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b6:	40bd      	lsls	r5, r7
 80039b8:	43ed      	mvns	r5, r5
 80039ba:	e775      	b.n	80038a8 <HAL_GPIO_Init+0xac>
 80039bc:	2603      	movs	r6, #3
 80039be:	fa06 f202 	lsl.w	r2, r6, r2
 80039c2:	4315      	orrs	r5, r2
 80039c4:	e7c5      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039c6:	2601      	movs	r6, #1
 80039c8:	fa06 f202 	lsl.w	r2, r6, r2
 80039cc:	4315      	orrs	r5, r2
 80039ce:	e7c0      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039d0:	2602      	movs	r6, #2
 80039d2:	fa06 f202 	lsl.w	r2, r6, r2
 80039d6:	4315      	orrs	r5, r2
 80039d8:	e7bb      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039da:	2606      	movs	r6, #6
 80039dc:	fa06 f202 	lsl.w	r2, r6, r2
 80039e0:	4315      	orrs	r5, r2
 80039e2:	e7b6      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039e4:	2604      	movs	r6, #4
 80039e6:	fa06 f202 	lsl.w	r2, r6, r2
 80039ea:	4315      	orrs	r5, r2
 80039ec:	e7b1      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039ee:	2605      	movs	r6, #5
 80039f0:	fa06 f202 	lsl.w	r2, r6, r2
 80039f4:	4315      	orrs	r5, r2
 80039f6:	e7ac      	b.n	8003952 <HAL_GPIO_Init+0x156>
 80039f8:	2607      	movs	r6, #7
 80039fa:	fa06 f202 	lsl.w	r2, r6, r2
 80039fe:	4315      	orrs	r5, r2
 8003a00:	e7a7      	b.n	8003952 <HAL_GPIO_Init+0x156>
 8003a02:	2608      	movs	r6, #8
 8003a04:	fa06 f202 	lsl.w	r2, r6, r2
 8003a08:	4315      	orrs	r5, r2
 8003a0a:	e7a2      	b.n	8003952 <HAL_GPIO_Init+0x156>
 8003a0c:	58020000 	.word	0x58020000
 8003a10:	58020800 	.word	0x58020800
 8003a14:	58020c00 	.word	0x58020c00
 8003a18:	58021000 	.word	0x58021000
 8003a1c:	58021400 	.word	0x58021400
 8003a20:	58021800 	.word	0x58021800
 8003a24:	58021c00 	.word	0x58021c00
 8003a28:	58022000 	.word	0x58022000
 8003a2c:	58022400 	.word	0x58022400
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58000080 	.word	0x58000080

08003a38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a38:	6903      	ldr	r3, [r0, #16]
 8003a3a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a3c:	bf14      	ite	ne
 8003a3e:	2001      	movne	r0, #1
 8003a40:	2000      	moveq	r0, #0
 8003a42:	4770      	bx	lr

08003a44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a44:	b902      	cbnz	r2, 8003a48 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a46:	0409      	lsls	r1, r1, #16
 8003a48:	6181      	str	r1, [r0, #24]
  }
}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a4c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a4e:	ea01 0203 	and.w	r2, r1, r3
 8003a52:	ea21 0103 	bic.w	r1, r1, r3
 8003a56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003a5a:	6181      	str	r1, [r0, #24]
}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop

08003a60 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_HSEM_FastTake+0x14>)
 8003a62:	3020      	adds	r0, #32
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_HSEM_FastTake+0x18>)
 8003a66:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8003a6a:	1ac0      	subs	r0, r0, r3
 8003a6c:	bf18      	it	ne
 8003a6e:	2001      	movne	r0, #1
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	58026400 	.word	0x58026400
 8003a78:	80000300 	.word	0x80000300

08003a7c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_HSEM_Release+0xc>)
 8003a7e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8003a82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8003a86:	4770      	bx	lr
 8003a88:	58026400 	.word	0x58026400

08003a8c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a8c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003a8e:	f04f 0c00 	mov.w	ip, #0
{
 8003a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a96:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a98:	6804      	ldr	r4, [r0, #0]
 8003a9a:	6848      	ldr	r0, [r1, #4]
{
 8003a9c:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a9e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003aa0:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003aa2:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003aa6:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003aaa:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003aae:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ab0:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ab4:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ab8:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003aba:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003abe:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ac0:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ac2:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ac4:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ac8:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003acc:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003ad0:	4f38      	ldr	r7, [pc, #224]	; (8003bb4 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ad2:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ad4:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ad8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8003adc:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ade:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ae2:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ae4:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ae8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003aec:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003aee:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003af2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003af4:	68e5      	ldr	r5, [r4, #12]
 8003af6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003afa:	444d      	add	r5, r9
 8003afc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8003b00:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b02:	691d      	ldr	r5, [r3, #16]
 8003b04:	f025 0507 	bic.w	r5, r5, #7
 8003b08:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b0a:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b0e:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b10:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b14:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b18:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b1c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003b20:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8003b24:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8003b28:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8003b2c:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b2e:	695d      	ldr	r5, [r3, #20]
 8003b30:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003b34:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b36:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b3a:	69dd      	ldr	r5, [r3, #28]
 8003b3c:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b3e:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b40:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b42:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8003b46:	4305      	orrs	r5, r0
 8003b48:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003b4a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8003b4c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003b50:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b52:	f1be 0f00 	cmp.w	lr, #0
 8003b56:	d00b      	beq.n	8003b70 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003b58:	f1be 0f01 	cmp.w	lr, #1
 8003b5c:	d026      	beq.n	8003bac <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b5e:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b62:	2d02      	cmp	r5, #2
 8003b64:	d902      	bls.n	8003b6c <LTDC_SetConfig+0xe0>
 8003b66:	f1be 0f07 	cmp.w	lr, #7
 8003b6a:	d121      	bne.n	8003bb0 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8003b6c:	2702      	movs	r7, #2
 8003b6e:	e000      	b.n	8003b72 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8003b70:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b72:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b74:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b76:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b78:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b7c:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b80:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b84:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b86:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b88:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b8c:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003b92:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b96:	4001      	ands	r1, r0
 8003b98:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b9a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b9e:	58a3      	ldr	r3, [r4, r2]
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	50a3      	str	r3, [r4, r2]
}
 8003ba6:	b003      	add	sp, #12
 8003ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8003bac:	2703      	movs	r7, #3
 8003bae:	e7e0      	b.n	8003b72 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8003bb0:	2701      	movs	r7, #1
 8003bb2:	e7de      	b.n	8003b72 <LTDC_SetConfig+0xe6>
 8003bb4:	fffff8f8 	.word	0xfffff8f8
 8003bb8:	fffff800 	.word	0xfffff800

08003bbc <HAL_LTDC_MspInit>:
}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop

08003bc0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d06d      	beq.n	8003ca0 <HAL_LTDC_Init+0xe0>
{
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bc6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003bca:	4604      	mov	r4, r0
 8003bcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d060      	beq.n	8003c96 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bd4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bd6:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bd8:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bda:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bdc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003be0:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003be2:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003be4:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003be8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003bec:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bee:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bf0:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bf2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bf6:	4e2b      	ldr	r6, [pc, #172]	; (8003ca4 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bf8:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bfa:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bfc:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bfe:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c00:	4302      	orrs	r2, r0
 8003c02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	4032      	ands	r2, r6
 8003c08:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c0a:	6898      	ldr	r0, [r3, #8]
 8003c0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c10:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c12:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c16:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c1a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c1c:	68d8      	ldr	r0, [r3, #12]
 8003c1e:	4030      	ands	r0, r6
 8003c20:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c28:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c2a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c2e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c32:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	4032      	ands	r2, r6
 8003c38:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c3a:	6918      	ldr	r0, [r3, #16]
 8003c3c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c42:	ea40 000c 	orr.w	r0, r0, ip
 8003c46:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c48:	6958      	ldr	r0, [r3, #20]
 8003c4a:	4006      	ands	r6, r0
 8003c4c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c52:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8003c56:	4302      	orrs	r2, r0
 8003c58:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c5c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c60:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c64:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c68:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c6a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c6c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003c70:	4302      	orrs	r2, r0
  return HAL_OK;
 8003c72:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c74:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003c78:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c80:	f042 0206 	orr.w	r2, r2, #6
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	432a      	orrs	r2, r5
 8003c8a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c8c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c90:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8003c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003c96:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003c9a:	f7ff ff8f 	bl	8003bbc <HAL_LTDC_MspInit>
 8003c9e:	e799      	b.n	8003bd4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8003ca0:	2001      	movs	r0, #1
}
 8003ca2:	4770      	bx	lr
 8003ca4:	f000f800 	.word	0xf000f800

08003ca8 <HAL_LTDC_ErrorCallback>:
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop

08003cac <HAL_LTDC_LineEventCallback>:
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <HAL_LTDC_ReloadEventCallback>:
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <HAL_LTDC_IRQHandler>:
{
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003cb6:	6803      	ldr	r3, [r0, #0]
{
 8003cb8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003cba:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003cbc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003cbe:	0769      	lsls	r1, r5, #29
 8003cc0:	d501      	bpl.n	8003cc6 <HAL_LTDC_IRQHandler+0x12>
 8003cc2:	0772      	lsls	r2, r6, #29
 8003cc4:	d41d      	bmi.n	8003d02 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003cc6:	07ab      	lsls	r3, r5, #30
 8003cc8:	d501      	bpl.n	8003cce <HAL_LTDC_IRQHandler+0x1a>
 8003cca:	07b7      	lsls	r7, r6, #30
 8003ccc:	d42d      	bmi.n	8003d2a <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003cce:	07e8      	lsls	r0, r5, #31
 8003cd0:	d501      	bpl.n	8003cd6 <HAL_LTDC_IRQHandler+0x22>
 8003cd2:	07f1      	lsls	r1, r6, #31
 8003cd4:	d440      	bmi.n	8003d58 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003cd6:	072a      	lsls	r2, r5, #28
 8003cd8:	d501      	bpl.n	8003cde <HAL_LTDC_IRQHandler+0x2a>
 8003cda:	0733      	lsls	r3, r6, #28
 8003cdc:	d400      	bmi.n	8003ce0 <HAL_LTDC_IRQHandler+0x2c>
}
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ce0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ce2:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ce4:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8003ce6:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003cea:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cec:	f022 0208 	bic.w	r2, r2, #8
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003cf2:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003cf4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003cf8:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003cfc:	f7ff ffd8 	bl	8003cb0 <HAL_LTDC_ReloadEventCallback>
}
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d04:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8003d06:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d08:	f022 0204 	bic.w	r2, r2, #4
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d0e:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d10:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8003d14:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d20:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8003d24:	f7ff ffc0 	bl	8003ca8 <HAL_LTDC_ErrorCallback>
 8003d28:	e7cd      	b.n	8003cc6 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003d2a:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003d2c:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d2e:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d32:	f022 0202 	bic.w	r2, r2, #2
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8003d38:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003d3a:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8003d3c:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003d3e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8003d42:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d4e:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8003d52:	f7ff ffa9 	bl	8003ca8 <HAL_LTDC_ErrorCallback>
 8003d56:	e7ba      	b.n	8003cce <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003d58:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003d5a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8003d5c:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8003d5e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003d68:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d6a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003d6e:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003d72:	f7ff ff9b 	bl	8003cac <HAL_LTDC_LineEventCallback>
 8003d76:	e7ae      	b.n	8003cd6 <HAL_LTDC_IRQHandler+0x22>

08003d78 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8003d78:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d028      	beq.n	8003dd2 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d80:	2302      	movs	r3, #2
 8003d82:	4694      	mov	ip, r2
{
 8003d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d88:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8003d8a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d8e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d90:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d94:	fb04 0402 	mla	r4, r4, r2, r0
 8003d98:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8003d9a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d9e:	460f      	mov	r7, r1
 8003da0:	3438      	adds	r4, #56	; 0x38
 8003da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dae:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003db0:	4662      	mov	r2, ip
 8003db2:	4630      	mov	r0, r6
 8003db4:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003db6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003db8:	f7ff fe68 	bl	8003a8c <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8003dbc:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dbe:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8003dc0:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dc2:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003dc6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003dca:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8003dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003dd2:	2002      	movs	r0, #2
}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7fe ff10 	bl	8002c00 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003de0:	2c00      	cmp	r4, #0
 8003de2:	d05a      	beq.n	8003e9a <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003de4:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003de6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8003de8:	2100      	movs	r1, #0
 8003dea:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003dec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8003df0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003dfc:	e005      	b.n	8003e0a <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003dfe:	f7fe feff 	bl	8002c00 <HAL_GetTick>
 8003e02:	1b43      	subs	r3, r0, r5
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d841      	bhi.n	8003e8c <HAL_MDMA_Init+0xb4>
 8003e08:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	07d2      	lsls	r2, r2, #31
 8003e0e:	d4f6      	bmi.n	8003dfe <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003e10:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8003e14:	69e1      	ldr	r1, [r4, #28]
 8003e16:	4302      	orrs	r2, r0
 8003e18:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e20:	432a      	orrs	r2, r5
 8003e22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003e24:	4302      	orrs	r2, r0
 8003e26:	68a0      	ldr	r0, [r4, #8]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003e2c:	432a      	orrs	r2, r5
 8003e2e:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003e30:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003e32:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003e34:	6920      	ldr	r0, [r4, #16]
 8003e36:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003e38:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003e3a:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003e3e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003e42:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003e44:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003e46:	d103      	bne.n	8003e50 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003e4e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003e50:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003e52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e54:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8003e56:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003e58:	db30      	blt.n	8003ebc <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003e5a:	b292      	uxth	r2, r2
 8003e5c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003e5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	db1c      	blt.n	8003e9e <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003e64:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003e66:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003e6a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8003e6e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003e70:	d021      	beq.n	8003eb6 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003e72:	b2c9      	uxtb	r1, r1
 8003e74:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003e76:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8003e78:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8003e7c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003e7e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8003e80:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8003e82:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8003e86:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003e8c:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003e8e:	2303      	movs	r3, #3
      return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003e92:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003e94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003e9a:	2001      	movs	r0, #1
}
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003e9e:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003ea0:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003ea2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003ea6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8003eaa:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003eac:	6a18      	ldr	r0, [r3, #32]
 8003eae:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8003eb2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003eb4:	d1dd      	bne.n	8003e72 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eba:	e7dc      	b.n	8003e76 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003ebc:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003ebe:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003ec0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003ec4:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003ec6:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003ec8:	621a      	str	r2, [r3, #32]
 8003eca:	e7c8      	b.n	8003e5e <HAL_MDMA_Init+0x86>

08003ecc <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8003ecc:	b1f0      	cbz	r0, 8003f0c <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8003ece:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4601      	mov	r1, r0
  return HAL_OK;
 8003ed4:	4618      	mov	r0, r3
{
 8003ed6:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8003ed8:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003eda:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8003edc:	f024 0401 	bic.w	r4, r4, #1
 8003ee0:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8003ee2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8003ee4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8003ee6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8003ee8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8003eea:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8003eec:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8003eee:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8003ef0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8003ef2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8003ef4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003ef6:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003ef8:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8003efa:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003efe:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8003f02:	664b      	str	r3, [r1, #100]	; 0x64
}
 8003f04:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8003f06:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8003f0a:	4770      	bx	lr
    return HAL_ERROR;
 8003f0c:	2001      	movs	r0, #1
}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_PWREx_ConfigSupply+0x74>)
 8003f12:	68d3      	ldr	r3, [r2, #12]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f1a:	68d3      	ldr	r3, [r2, #12]
{
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f20:	d005      	beq.n	8003f2e <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f26:	1a18      	subs	r0, r3, r0
 8003f28:	bf18      	it	ne
 8003f2a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f32:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f34:	4303      	orrs	r3, r0
 8003f36:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8003f38:	f7fe fe62 	bl	8002c00 <HAL_GetTick>
 8003f3c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f3e:	e005      	b.n	8003f4c <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f40:	f7fe fe5e 	bl	8002c00 <HAL_GetTick>
 8003f44:	1b43      	subs	r3, r0, r5
 8003f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4a:	d819      	bhi.n	8003f80 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f4c:	6873      	ldr	r3, [r6, #4]
 8003f4e:	049a      	lsls	r2, r3, #18
 8003f50:	d5f6      	bpl.n	8003f40 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f52:	f1a4 031d 	sub.w	r3, r4, #29
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d905      	bls.n	8003f66 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8003f5a:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f5e:	2801      	cmp	r0, #1
 8003f60:	d901      	bls.n	8003f66 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8003f62:	2000      	movs	r0, #0
}
 8003f64:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8003f66:	f7fe fe4b 	bl	8002c00 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f6a:	4d06      	ldr	r5, [pc, #24]	; (8003f84 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8003f6c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f6e:	68eb      	ldr	r3, [r5, #12]
 8003f70:	03db      	lsls	r3, r3, #15
 8003f72:	d4f6      	bmi.n	8003f62 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f74:	f7fe fe44 	bl	8002c00 <HAL_GetTick>
 8003f78:	1b00      	subs	r0, r0, r4
 8003f7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f7e:	d9f6      	bls.n	8003f6e <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8003f80:	2001      	movs	r0, #1
}
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	58024800 	.word	0x58024800

08003f88 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f000 81f7 	beq.w	800437c <HAL_RCC_OscConfig+0x3f4>
{
 8003f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f90:	6803      	ldr	r3, [r0, #0]
 8003f92:	4604      	mov	r4, r0
 8003f94:	07d9      	lsls	r1, r3, #31
 8003f96:	d52e      	bpl.n	8003ff6 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f98:	49b4      	ldr	r1, [pc, #720]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8003f9a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fa2:	2a10      	cmp	r2, #16
 8003fa4:	f000 812c 	beq.w	8004200 <HAL_RCC_OscConfig+0x278>
 8003fa8:	2a18      	cmp	r2, #24
 8003faa:	f000 8124 	beq.w	80041f6 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fae:	6863      	ldr	r3, [r4, #4]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	f000 8167 	beq.w	8004286 <HAL_RCC_OscConfig+0x2fe>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 817f 	beq.w	80042bc <HAL_RCC_OscConfig+0x334>
 8003fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc2:	4baa      	ldr	r3, [pc, #680]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f000 8278 	beq.w	80044ba <HAL_RCC_OscConfig+0x532>
 8003fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fe12 	bl	8002c00 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fdc:	4ea3      	ldr	r6, [pc, #652]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8003fde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe0:	e005      	b.n	8003fee <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe2:	f7fe fe0d 	bl	8002c00 <HAL_GetTick>
 8003fe6:	1b40      	subs	r0, r0, r5
 8003fe8:	2864      	cmp	r0, #100	; 0x64
 8003fea:	f200 8165 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fee:	6833      	ldr	r3, [r6, #0]
 8003ff0:	039f      	lsls	r7, r3, #14
 8003ff2:	d5f6      	bpl.n	8003fe2 <HAL_RCC_OscConfig+0x5a>
 8003ff4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	0799      	lsls	r1, r3, #30
 8003ff8:	d521      	bpl.n	800403e <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffa:	4a9c      	ldr	r2, [pc, #624]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8003ffc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ffe:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004000:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004004:	f040 80a8 	bne.w	8004158 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004008:	4b98      	ldr	r3, [pc, #608]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	075b      	lsls	r3, r3, #29
 800400e:	d503      	bpl.n	8004018 <HAL_RCC_OscConfig+0x90>
 8004010:	68e3      	ldr	r3, [r4, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80ed 	beq.w	80041f2 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004018:	f7fe fe0a 	bl	8002c30 <HAL_GetREVID>
 800401c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004020:	4298      	cmp	r0, r3
 8004022:	f200 8189 	bhi.w	8004338 <HAL_RCC_OscConfig+0x3b0>
 8004026:	6922      	ldr	r2, [r4, #16]
 8004028:	2a40      	cmp	r2, #64	; 0x40
 800402a:	f000 824e 	beq.w	80044ca <HAL_RCC_OscConfig+0x542>
 800402e:	498f      	ldr	r1, [pc, #572]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8004030:	684b      	ldr	r3, [r1, #4]
 8004032:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004036:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800403e:	06d9      	lsls	r1, r3, #27
 8004040:	d456      	bmi.n	80040f0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	071d      	lsls	r5, r3, #28
 8004044:	d517      	bpl.n	8004076 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004046:	6963      	ldr	r3, [r4, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80b4 	beq.w	80041b6 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b87      	ldr	r3, [pc, #540]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8004050:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004052:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800405a:	f7fe fdd1 	bl	8002c00 <HAL_GetTick>
 800405e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004060:	e005      	b.n	800406e <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004062:	f7fe fdcd 	bl	8002c00 <HAL_GetTick>
 8004066:	1b40      	subs	r0, r0, r5
 8004068:	2802      	cmp	r0, #2
 800406a:	f200 8125 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800406e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004070:	0798      	lsls	r0, r3, #30
 8004072:	d5f6      	bpl.n	8004062 <HAL_RCC_OscConfig+0xda>
 8004074:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004076:	069a      	lsls	r2, r3, #26
 8004078:	d517      	bpl.n	80040aa <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800407a:	69a3      	ldr	r3, [r4, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8134 	beq.w	80042ea <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8004084:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004086:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8004088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800408e:	f7fe fdb7 	bl	8002c00 <HAL_GetTick>
 8004092:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004094:	e005      	b.n	80040a2 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004096:	f7fe fdb3 	bl	8002c00 <HAL_GetTick>
 800409a:	1b40      	subs	r0, r0, r5
 800409c:	2802      	cmp	r0, #2
 800409e:	f200 810b 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a2:	6833      	ldr	r3, [r6, #0]
 80040a4:	049f      	lsls	r7, r3, #18
 80040a6:	d5f6      	bpl.n	8004096 <HAL_RCC_OscConfig+0x10e>
 80040a8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040aa:	0759      	lsls	r1, r3, #29
 80040ac:	f100 80b2 	bmi.w	8004214 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80040b2:	b1d8      	cbz	r0, 80040ec <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040b4:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80040bc:	2a18      	cmp	r2, #24
 80040be:	f000 81ce 	beq.w	800445e <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c4:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80040c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80040cc:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ce:	f000 8161 	beq.w	8004394 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fe fd95 	bl	8002c00 <HAL_GetTick>
 80040d6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040d8:	e005      	b.n	80040e6 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe fd91 	bl	8002c00 <HAL_GetTick>
 80040de:	1b00      	subs	r0, r0, r4
 80040e0:	2802      	cmp	r0, #2
 80040e2:	f200 80e9 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	019b      	lsls	r3, r3, #6
 80040ea:	d4f6      	bmi.n	80040da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80040ec:	2000      	movs	r0, #0
}
 80040ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 80040f2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d072      	beq.n	80041e4 <HAL_RCC_OscConfig+0x25c>
 80040fe:	2b18      	cmp	r3, #24
 8004100:	d06c      	beq.n	80041dc <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004102:	69e3      	ldr	r3, [r4, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8103 	beq.w	8004310 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 800410a:	4b58      	ldr	r3, [pc, #352]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 800410c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800410e:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8004110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004114:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004116:	f7fe fd73 	bl	8002c00 <HAL_GetTick>
 800411a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800411c:	e005      	b.n	800412a <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800411e:	f7fe fd6f 	bl	8002c00 <HAL_GetTick>
 8004122:	1b40      	subs	r0, r0, r5
 8004124:	2802      	cmp	r0, #2
 8004126:	f200 80c7 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800412a:	6833      	ldr	r3, [r6, #0]
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	d5f6      	bpl.n	800411e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004130:	f7fe fd7e 	bl	8002c30 <HAL_GetREVID>
 8004134:	f241 0303 	movw	r3, #4099	; 0x1003
 8004138:	4298      	cmp	r0, r3
 800413a:	f200 81e9 	bhi.w	8004510 <HAL_RCC_OscConfig+0x588>
 800413e:	6a22      	ldr	r2, [r4, #32]
 8004140:	6873      	ldr	r3, [r6, #4]
 8004142:	2a20      	cmp	r2, #32
 8004144:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004148:	bf0c      	ite	eq
 800414a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800414e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004152:	6073      	str	r3, [r6, #4]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	e774      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004158:	2b18      	cmp	r3, #24
 800415a:	f000 810b 	beq.w	8004374 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800415e:	68e2      	ldr	r2, [r4, #12]
 8004160:	2a00      	cmp	r2, #0
 8004162:	f000 80f3 	beq.w	800434c <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004166:	4941      	ldr	r1, [pc, #260]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8004168:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800416a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800416c:	f023 0319 	bic.w	r3, r3, #25
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8004174:	f7fe fd44 	bl	8002c00 <HAL_GetTick>
 8004178:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417a:	e005      	b.n	8004188 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe fd40 	bl	8002c00 <HAL_GetTick>
 8004180:	1b40      	subs	r0, r0, r5
 8004182:	2802      	cmp	r0, #2
 8004184:	f200 8098 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004188:	6833      	ldr	r3, [r6, #0]
 800418a:	075f      	lsls	r7, r3, #29
 800418c:	d5f6      	bpl.n	800417c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	f7fe fd4f 	bl	8002c30 <HAL_GetREVID>
 8004192:	f241 0303 	movw	r3, #4099	; 0x1003
 8004196:	4298      	cmp	r0, r3
 8004198:	f200 81c3 	bhi.w	8004522 <HAL_RCC_OscConfig+0x59a>
 800419c:	6922      	ldr	r2, [r4, #16]
 800419e:	6873      	ldr	r3, [r6, #4]
 80041a0:	2a40      	cmp	r2, #64	; 0x40
 80041a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041a6:	bf0c      	ite	eq
 80041a8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80041ac:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80041b0:	6073      	str	r3, [r6, #4]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	e743      	b.n	800403e <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 80041b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ba:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80041c2:	f7fe fd1d 	bl	8002c00 <HAL_GetTick>
 80041c6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041c8:	e004      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fe fd19 	bl	8002c00 <HAL_GetTick>
 80041ce:	1b40      	subs	r0, r0, r5
 80041d0:	2802      	cmp	r0, #2
 80041d2:	d871      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041d4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80041d6:	0799      	lsls	r1, r3, #30
 80041d8:	d4f7      	bmi.n	80041ca <HAL_RCC_OscConfig+0x242>
 80041da:	e74b      	b.n	8004074 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041dc:	f002 0203 	and.w	r2, r2, #3
 80041e0:	2a01      	cmp	r2, #1
 80041e2:	d18e      	bne.n	8004102 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	05da      	lsls	r2, r3, #23
 80041ea:	d552      	bpl.n	8004292 <HAL_RCC_OscConfig+0x30a>
 80041ec:	69e3      	ldr	r3, [r4, #28]
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d04f      	beq.n	8004292 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
}
 80041f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041f6:	f001 0103 	and.w	r1, r1, #3
 80041fa:	2902      	cmp	r1, #2
 80041fc:	f47f aed7 	bne.w	8003fae <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4a1a      	ldr	r2, [pc, #104]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	0392      	lsls	r2, r2, #14
 8004206:	f57f aef6 	bpl.w	8003ff6 <HAL_RCC_OscConfig+0x6e>
 800420a:	6862      	ldr	r2, [r4, #4]
 800420c:	2a00      	cmp	r2, #0
 800420e:	f47f aef2 	bne.w	8003ff6 <HAL_RCC_OscConfig+0x6e>
 8004212:	e7ee      	b.n	80041f2 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCC_OscConfig+0x2e8>)
 8004216:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004218:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004220:	f7fe fcee 	bl	8002c00 <HAL_GetTick>
 8004224:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004226:	e004      	b.n	8004232 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fe fcea 	bl	8002c00 <HAL_GetTick>
 800422c:	1b40      	subs	r0, r0, r5
 800422e:	2864      	cmp	r0, #100	; 0x64
 8004230:	d842      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004232:	6833      	ldr	r3, [r6, #0]
 8004234:	05da      	lsls	r2, r3, #23
 8004236:	d5f7      	bpl.n	8004228 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	2b01      	cmp	r3, #1
 800423c:	f000 817a 	beq.w	8004534 <HAL_RCC_OscConfig+0x5ac>
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 814b 	beq.w	80044dc <HAL_RCC_OscConfig+0x554>
 8004246:	2b05      	cmp	r3, #5
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
 800424a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800424c:	f000 8187 	beq.w	800455e <HAL_RCC_OscConfig+0x5d6>
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	671a      	str	r2, [r3, #112]	; 0x70
 8004256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800425e:	f7fe fccf 	bl	8002c00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004262:	4e02      	ldr	r6, [pc, #8]	; (800426c <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004268:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x2f6>
 800426c:	58024400 	.word	0x58024400
 8004270:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fe fcc4 	bl	8002c00 <HAL_GetTick>
 8004278:	1b40      	subs	r0, r0, r5
 800427a:	42b8      	cmp	r0, r7
 800427c:	d81c      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800427e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004280:	079b      	lsls	r3, r3, #30
 8004282:	d5f7      	bpl.n	8004274 <HAL_RCC_OscConfig+0x2ec>
 8004284:	e714      	b.n	80040b0 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004286:	4aae      	ldr	r2, [pc, #696]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	e6a2      	b.n	8003fd8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004292:	f7fe fccd 	bl	8002c30 <HAL_GetREVID>
 8004296:	f241 0303 	movw	r3, #4099	; 0x1003
 800429a:	4298      	cmp	r0, r3
 800429c:	d870      	bhi.n	8004380 <HAL_RCC_OscConfig+0x3f8>
 800429e:	6a22      	ldr	r2, [r4, #32]
 80042a0:	2a20      	cmp	r2, #32
 80042a2:	f000 8153 	beq.w	800454c <HAL_RCC_OscConfig+0x5c4>
 80042a6:	49a6      	ldr	r1, [pc, #664]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 80042a8:	684b      	ldr	r3, [r1, #4]
 80042aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042ae:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80042b2:	604b      	str	r3, [r1, #4]
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	e6c4      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80042b8:	2003      	movs	r0, #3
}
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042bc:	4ba0      	ldr	r3, [pc, #640]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 80042be:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042c0:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042d0:	f7fe fc96 	bl	8002c00 <HAL_GetTick>
 80042d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042d6:	e004      	b.n	80042e2 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fe fc92 	bl	8002c00 <HAL_GetTick>
 80042dc:	1b40      	subs	r0, r0, r5
 80042de:	2864      	cmp	r0, #100	; 0x64
 80042e0:	d8ea      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042e2:	6833      	ldr	r3, [r6, #0]
 80042e4:	0398      	lsls	r0, r3, #14
 80042e6:	d4f7      	bmi.n	80042d8 <HAL_RCC_OscConfig+0x350>
 80042e8:	e684      	b.n	8003ff4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80042ea:	4b95      	ldr	r3, [pc, #596]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 80042ec:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ee:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80042f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80042f6:	f7fe fc83 	bl	8002c00 <HAL_GetTick>
 80042fa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042fc:	e004      	b.n	8004308 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042fe:	f7fe fc7f 	bl	8002c00 <HAL_GetTick>
 8004302:	1b40      	subs	r0, r0, r5
 8004304:	2802      	cmp	r0, #2
 8004306:	d8d7      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	0498      	lsls	r0, r3, #18
 800430c:	d4f7      	bmi.n	80042fe <HAL_RCC_OscConfig+0x376>
 800430e:	e6cb      	b.n	80040a8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8004310:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 8004312:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004314:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8004316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800431c:	f7fe fc70 	bl	8002c00 <HAL_GetTick>
 8004320:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004322:	e004      	b.n	800432e <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004324:	f7fe fc6c 	bl	8002c00 <HAL_GetTick>
 8004328:	1b40      	subs	r0, r0, r5
 800432a:	2802      	cmp	r0, #2
 800432c:	d8c4      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800432e:	6833      	ldr	r3, [r6, #0]
 8004330:	05df      	lsls	r7, r3, #23
 8004332:	d4f7      	bmi.n	8004324 <HAL_RCC_OscConfig+0x39c>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	e684      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4a81      	ldr	r2, [pc, #516]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 800433a:	6921      	ldr	r1, [r4, #16]
 800433c:	6853      	ldr	r3, [r2, #4]
 800433e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004346:	6053      	str	r3, [r2, #4]
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	e678      	b.n	800403e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 800434c:	4b7c      	ldr	r3, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 800434e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004350:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004358:	f7fe fc52 	bl	8002c00 <HAL_GetTick>
 800435c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800435e:	e004      	b.n	800436a <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe fc4e 	bl	8002c00 <HAL_GetTick>
 8004364:	1b40      	subs	r0, r0, r5
 8004366:	2802      	cmp	r0, #2
 8004368:	d8a6      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800436a:	6833      	ldr	r3, [r6, #0]
 800436c:	0758      	lsls	r0, r3, #29
 800436e:	d4f7      	bmi.n	8004360 <HAL_RCC_OscConfig+0x3d8>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	e664      	b.n	800403e <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004374:	0792      	lsls	r2, r2, #30
 8004376:	f47f aef2 	bne.w	800415e <HAL_RCC_OscConfig+0x1d6>
 800437a:	e645      	b.n	8004008 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 800437c:	2001      	movs	r0, #1
}
 800437e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004380:	4a6f      	ldr	r2, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 8004382:	6a21      	ldr	r1, [r4, #32]
 8004384:	68d3      	ldr	r3, [r2, #12]
 8004386:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800438a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800438e:	60d3      	str	r3, [r2, #12]
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	e656      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8004394:	f7fe fc34 	bl	8002c00 <HAL_GetTick>
 8004398:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800439a:	e004      	b.n	80043a6 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fe fc30 	bl	8002c00 <HAL_GetTick>
 80043a0:	1b80      	subs	r0, r0, r6
 80043a2:	2802      	cmp	r0, #2
 80043a4:	d888      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	0199      	lsls	r1, r3, #6
 80043aa:	d4f7      	bmi.n	800439c <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x5bc>)
 80043b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043b2:	4013      	ands	r3, r2
 80043b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043b6:	4964      	ldr	r1, [pc, #400]	; (8004548 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b8:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ba:	4e61      	ldr	r6, [pc, #388]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043c0:	62ab      	str	r3, [r5, #40]	; 0x28
 80043c2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80043c4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80043c8:	3f01      	subs	r7, #1
 80043ca:	1e50      	subs	r0, r2, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80043d0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80043d4:	025b      	lsls	r3, r3, #9
 80043d6:	0400      	lsls	r0, r0, #16
 80043d8:	3a01      	subs	r2, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80043e0:	0612      	lsls	r2, r2, #24
 80043e2:	4303      	orrs	r3, r0
 80043e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80043e8:	433b      	orrs	r3, r7
 80043ea:	4313      	orrs	r3, r2
 80043ec:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80043ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043fa:	4011      	ands	r1, r2
 80043fc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004400:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004402:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004404:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004406:	f023 030c 	bic.w	r3, r3, #12
 800440a:	4313      	orrs	r3, r2
 800440c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800440e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004410:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004412:	f023 0302 	bic.w	r3, r3, #2
 8004416:	4313      	orrs	r3, r2
 8004418:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800441a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004428:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800442a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004432:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004440:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004442:	f7fe fbdd 	bl	8002c00 <HAL_GetTick>
 8004446:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004448:	e005      	b.n	8004456 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe fbd9 	bl	8002c00 <HAL_GetTick>
 800444e:	1b00      	subs	r0, r0, r4
 8004450:	2802      	cmp	r0, #2
 8004452:	f63f af31 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004456:	6833      	ldr	r3, [r6, #0]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	d5f6      	bpl.n	800444a <HAL_RCC_OscConfig+0x4c2>
 800445c:	e646      	b.n	80040ec <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004462:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004464:	f43f ae43 	beq.w	80040ee <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800446e:	428b      	cmp	r3, r1
 8004470:	f47f aebf 	bne.w	80041f2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004474:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	f47f aeb9 	bne.w	80041f2 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004482:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8004486:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	f47f aeb2 	bne.w	80041f2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800448e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004490:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8004494:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	f47f aeab 	bne.w	80041f2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800449c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800449e:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80044a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	f47f aea4 	bne.w	80041f2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044ac:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80044b0:	3801      	subs	r0, #1
  return HAL_OK;
 80044b2:	1a28      	subs	r0, r5, r0
 80044b4:	bf18      	it	ne
 80044b6:	2001      	movne	r0, #1
}
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e586      	b.n	8003fd8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 80044cc:	6853      	ldr	r3, [r2, #4]
 80044ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d6:	6053      	str	r3, [r2, #4]
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	e5b0      	b.n	800403e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044e4:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	671a      	str	r2, [r3, #112]	; 0x70
 80044ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80044f4:	f7fe fb84 	bl	8002c00 <HAL_GetTick>
 80044f8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044fa:	e005      	b.n	8004508 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fe fb80 	bl	8002c00 <HAL_GetTick>
 8004500:	1b40      	subs	r0, r0, r5
 8004502:	42b8      	cmp	r0, r7
 8004504:	f63f aed8 	bhi.w	80042b8 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004508:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800450a:	0798      	lsls	r0, r3, #30
 800450c:	d4f6      	bmi.n	80044fc <HAL_RCC_OscConfig+0x574>
 800450e:	e5cf      	b.n	80040b0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004510:	68f3      	ldr	r3, [r6, #12]
 8004512:	6a22      	ldr	r2, [r4, #32]
 8004514:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004518:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800451c:	60f3      	str	r3, [r6, #12]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	e58f      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004522:	6873      	ldr	r3, [r6, #4]
 8004524:	6922      	ldr	r2, [r4, #16]
 8004526:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800452a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800452e:	6073      	str	r3, [r6, #4]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	e584      	b.n	800403e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004534:	4a02      	ldr	r2, [pc, #8]	; (8004540 <HAL_RCC_OscConfig+0x5b8>)
 8004536:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800453e:	e68e      	b.n	800425e <HAL_RCC_OscConfig+0x2d6>
 8004540:	58024400 	.word	0x58024400
 8004544:	fffffc0c 	.word	0xfffffc0c
 8004548:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x5e8>)
 800454e:	6853      	ldr	r3, [r2, #4]
 8004550:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004558:	6053      	str	r3, [r2, #4]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	e571      	b.n	8004042 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455e:	f042 0204 	orr.w	r2, r2, #4
 8004562:	671a      	str	r2, [r3, #112]	; 0x70
 8004564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	671a      	str	r2, [r3, #112]	; 0x70
 800456c:	e677      	b.n	800425e <HAL_RCC_OscConfig+0x2d6>
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400

08004574 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004574:	4a47      	ldr	r2, [pc, #284]	; (8004694 <HAL_RCC_GetSysClockFreq+0x120>)
 8004576:	6913      	ldr	r3, [r2, #16]
 8004578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457c:	2b10      	cmp	r3, #16
 800457e:	d004      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x16>
 8004580:	2b18      	cmp	r3, #24
 8004582:	d00d      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x2c>
 8004584:	b11b      	cbz	r3, 800458e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004586:	4844      	ldr	r0, [pc, #272]	; (8004698 <HAL_RCC_GetSysClockFreq+0x124>)
 8004588:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458a:	4844      	ldr	r0, [pc, #272]	; (800469c <HAL_RCC_GetSysClockFreq+0x128>)
 800458c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	d54a      	bpl.n	800462a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	4842      	ldr	r0, [pc, #264]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004598:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800459c:	40d8      	lsrs	r0, r3
 800459e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80045a2:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045a4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80045a8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045ac:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045b0:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 80045b2:	d038      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045b4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045b8:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045bc:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045c0:	fb01 f105 	mul.w	r1, r1, r5
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	ee07 1a90 	vmov	s15, r1
 80045ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80045ce:	d002      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x62>
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d02c      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0xba>
 80045d4:	b393      	cbz	r3, 800463c <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d6:	ee07 0a90 	vmov	s15, r0
 80045da:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x130>
 80045de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045e4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80045e8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x134>
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80045f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fc:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004600:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004604:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_GetSysClockFreq+0x120>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004610:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004622:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004626:	bc30      	pop	{r4, r5}
 8004628:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800462a:	481d      	ldr	r0, [pc, #116]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800462c:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800462e:	ee07 0a90 	vmov	s15, r0
 8004632:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 80046ac <HAL_RCC_GetSysClockFreq+0x138>
 8004636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463a:	e7d2      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	069b      	lsls	r3, r3, #26
 8004640:	d520      	bpl.n	8004684 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004642:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004644:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004648:	4915      	ldr	r1, [pc, #84]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800464a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800464e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004656:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004658:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800465a:	eddf 4a13 	vldr	s9, [pc, #76]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x134>
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee06 1a10 	vmov	s12, r1
 8004666:	ee06 3a90 	vmov	s13, r3
 800466a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800466e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004672:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8004676:	eee7 6a24 	vfma.f32	s13, s14, s9
 800467a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800467e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004682:	e7c1      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004684:	ee07 0a90 	vmov	s15, r0
 8004688:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x13c>
 800468c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004690:	e7a7      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x6e>
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	003d0900 	.word	0x003d0900
 800469c:	017d7840 	.word	0x017d7840
 80046a0:	03d09000 	.word	0x03d09000
 80046a4:	4a742400 	.word	0x4a742400
 80046a8:	39000000 	.word	0x39000000
 80046ac:	4bbebc20 	.word	0x4bbebc20
 80046b0:	4c742400 	.word	0x4c742400

080046b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f000 810e 	beq.w	80048d6 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ba:	4a8d      	ldr	r2, [pc, #564]	; (80048f0 <HAL_RCC_ClockConfig+0x23c>)
 80046bc:	6813      	ldr	r3, [r2, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	428b      	cmp	r3, r1
{
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	d20c      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	f023 030f 	bic.w	r3, r3, #15
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	428b      	cmp	r3, r1
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
}
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	075f      	lsls	r7, r3, #29
 80046ec:	d50b      	bpl.n	8004706 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046ee:	4981      	ldr	r1, [pc, #516]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80046f0:	6920      	ldr	r0, [r4, #16]
 80046f2:	698a      	ldr	r2, [r1, #24]
 80046f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80046f8:	4290      	cmp	r0, r2
 80046fa:	d904      	bls.n	8004706 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046fc:	698a      	ldr	r2, [r1, #24]
 80046fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004702:	4302      	orrs	r2, r0
 8004704:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004706:	071e      	lsls	r6, r3, #28
 8004708:	d50b      	bpl.n	8004722 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800470a:	497a      	ldr	r1, [pc, #488]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 800470c:	6960      	ldr	r0, [r4, #20]
 800470e:	69ca      	ldr	r2, [r1, #28]
 8004710:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004714:	4290      	cmp	r0, r2
 8004716:	d904      	bls.n	8004722 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004718:	69ca      	ldr	r2, [r1, #28]
 800471a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800471e:	4302      	orrs	r2, r0
 8004720:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	06d8      	lsls	r0, r3, #27
 8004724:	d50b      	bpl.n	800473e <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004726:	4973      	ldr	r1, [pc, #460]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004728:	69a0      	ldr	r0, [r4, #24]
 800472a:	69ca      	ldr	r2, [r1, #28]
 800472c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004730:	4290      	cmp	r0, r2
 8004732:	d904      	bls.n	800473e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004734:	69ca      	ldr	r2, [r1, #28]
 8004736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800473a:	4302      	orrs	r2, r0
 800473c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800473e:	0699      	lsls	r1, r3, #26
 8004740:	d50b      	bpl.n	800475a <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004742:	496c      	ldr	r1, [pc, #432]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004744:	69e0      	ldr	r0, [r4, #28]
 8004746:	6a0a      	ldr	r2, [r1, #32]
 8004748:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800474c:	4290      	cmp	r0, r2
 800474e:	d904      	bls.n	800475a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004750:	6a0a      	ldr	r2, [r1, #32]
 8004752:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004756:	4302      	orrs	r2, r0
 8004758:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475a:	079a      	lsls	r2, r3, #30
 800475c:	f140 80ad 	bpl.w	80048ba <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004760:	4864      	ldr	r0, [pc, #400]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004762:	68e1      	ldr	r1, [r4, #12]
 8004764:	6982      	ldr	r2, [r0, #24]
 8004766:	f002 020f 	and.w	r2, r2, #15
 800476a:	4291      	cmp	r1, r2
 800476c:	d904      	bls.n	8004778 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476e:	6982      	ldr	r2, [r0, #24]
 8004770:	f022 020f 	bic.w	r2, r2, #15
 8004774:	430a      	orrs	r2, r1
 8004776:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004778:	07d8      	lsls	r0, r3, #31
 800477a:	d531      	bpl.n	80047e0 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800477c:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 800477e:	68a1      	ldr	r1, [r4, #8]
 8004780:	6993      	ldr	r3, [r2, #24]
 8004782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004786:	430b      	orrs	r3, r1
 8004788:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800478c:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	2902      	cmp	r1, #2
 8004790:	f000 80a3 	beq.w	80048da <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004794:	2903      	cmp	r1, #3
 8004796:	f000 809a 	beq.w	80048ce <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800479a:	2901      	cmp	r1, #1
 800479c:	f000 80a3 	beq.w	80048e6 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a0:	0758      	lsls	r0, r3, #29
 80047a2:	d59e      	bpl.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047a4:	4a53      	ldr	r2, [pc, #332]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a6:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ac:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 80047b6:	f7fe fa23 	bl	8002c00 <HAL_GetTick>
 80047ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047bc:	e005      	b.n	80047ca <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047be:	f7fe fa1f 	bl	8002c00 <HAL_GetTick>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	4540      	cmp	r0, r8
 80047c6:	f200 808c 	bhi.w	80048e2 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80047d6:	d1f2      	bne.n	80047be <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	0799      	lsls	r1, r3, #30
 80047dc:	d506      	bpl.n	80047ec <HAL_RCC_ClockConfig+0x138>
 80047de:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047e0:	4844      	ldr	r0, [pc, #272]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80047e2:	6982      	ldr	r2, [r0, #24]
 80047e4:	f002 020f 	and.w	r2, r2, #15
 80047e8:	428a      	cmp	r2, r1
 80047ea:	d86a      	bhi.n	80048c2 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ec:	4940      	ldr	r1, [pc, #256]	; (80048f0 <HAL_RCC_ClockConfig+0x23c>)
 80047ee:	680a      	ldr	r2, [r1, #0]
 80047f0:	f002 020f 	and.w	r2, r2, #15
 80047f4:	42aa      	cmp	r2, r5
 80047f6:	d90a      	bls.n	800480e <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f8:	680a      	ldr	r2, [r1, #0]
 80047fa:	f022 020f 	bic.w	r2, r2, #15
 80047fe:	432a      	orrs	r2, r5
 8004800:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	680a      	ldr	r2, [r1, #0]
 8004804:	f002 020f 	and.w	r2, r2, #15
 8004808:	42aa      	cmp	r2, r5
 800480a:	f47f af6a 	bne.w	80046e2 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800480e:	075a      	lsls	r2, r3, #29
 8004810:	d50b      	bpl.n	800482a <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004812:	4938      	ldr	r1, [pc, #224]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004814:	6920      	ldr	r0, [r4, #16]
 8004816:	698a      	ldr	r2, [r1, #24]
 8004818:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800481c:	4290      	cmp	r0, r2
 800481e:	d204      	bcs.n	800482a <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004820:	698a      	ldr	r2, [r1, #24]
 8004822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004826:	4302      	orrs	r2, r0
 8004828:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482a:	071f      	lsls	r7, r3, #28
 800482c:	d50b      	bpl.n	8004846 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800482e:	4931      	ldr	r1, [pc, #196]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004830:	6960      	ldr	r0, [r4, #20]
 8004832:	69ca      	ldr	r2, [r1, #28]
 8004834:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004838:	4290      	cmp	r0, r2
 800483a:	d204      	bcs.n	8004846 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800483c:	69ca      	ldr	r2, [r1, #28]
 800483e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004842:	4302      	orrs	r2, r0
 8004844:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	06de      	lsls	r6, r3, #27
 8004848:	d50b      	bpl.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800484a:	492a      	ldr	r1, [pc, #168]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 800484c:	69a0      	ldr	r0, [r4, #24]
 800484e:	69ca      	ldr	r2, [r1, #28]
 8004850:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004854:	4290      	cmp	r0, r2
 8004856:	d204      	bcs.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004858:	69ca      	ldr	r2, [r1, #28]
 800485a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800485e:	4302      	orrs	r2, r0
 8004860:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004862:	069d      	lsls	r5, r3, #26
 8004864:	d50b      	bpl.n	800487e <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004868:	69e1      	ldr	r1, [r4, #28]
 800486a:	6a13      	ldr	r3, [r2, #32]
 800486c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004870:	4299      	cmp	r1, r3
 8004872:	d204      	bcs.n	800487e <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004874:	6a13      	ldr	r3, [r2, #32]
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	430b      	orrs	r3, r1
 800487c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800487e:	f7ff fe79 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004884:	4602      	mov	r2, r0
 8004886:	481c      	ldr	r0, [pc, #112]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004888:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488a:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800488c:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8004890:	4d1a      	ldr	r5, [pc, #104]	; (80048fc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4c1a      	ldr	r4, [pc, #104]	; (8004900 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004898:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800489a:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800489c:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80048a0:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048a2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 80048a6:	4d17      	ldr	r5, [pc, #92]	; (8004904 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048a8:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80048ae:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b0:	6023      	str	r3, [r4, #0]
}
 80048b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80048b6:	f7fe b941 	b.w	8002b3c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	07da      	lsls	r2, r3, #31
 80048bc:	f53f af5e 	bmi.w	800477c <HAL_RCC_ClockConfig+0xc8>
 80048c0:	e794      	b.n	80047ec <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c2:	6982      	ldr	r2, [r0, #24]
 80048c4:	f022 020f 	bic.w	r2, r2, #15
 80048c8:	4311      	orrs	r1, r2
 80048ca:	6181      	str	r1, [r0, #24]
 80048cc:	e78e      	b.n	80047ec <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ce:	019f      	lsls	r7, r3, #6
 80048d0:	f53f af68 	bmi.w	80047a4 <HAL_RCC_ClockConfig+0xf0>
 80048d4:	e705      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
}
 80048d8:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048da:	039b      	lsls	r3, r3, #14
 80048dc:	f53f af62 	bmi.w	80047a4 <HAL_RCC_ClockConfig+0xf0>
 80048e0:	e6ff      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80048e2:	2003      	movs	r0, #3
 80048e4:	e6fe      	b.n	80046e4 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048e6:	05de      	lsls	r6, r3, #23
 80048e8:	f53f af5c 	bmi.w	80047a4 <HAL_RCC_ClockConfig+0xf0>
 80048ec:	e6f9      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
 80048ee:	bf00      	nop
 80048f0:	52002000 	.word	0x52002000
 80048f4:	58024400 	.word	0x58024400
 80048f8:	08006488 	.word	0x08006488
 80048fc:	24000858 	.word	0x24000858
 8004900:	24000004 	.word	0x24000004
 8004904:	24000000 	.word	0x24000000

08004908 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004908:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <RCCEx_PLL2_Config+0xf0>)
{
 800490a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800490c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b03      	cmp	r3, #3
 8004914:	d069      	beq.n	80049ea <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800491c:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800491e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004922:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004924:	f7fe f96c 	bl	8002c00 <HAL_GetTick>
 8004928:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800492a:	e004      	b.n	8004936 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800492c:	f7fe f968 	bl	8002c00 <HAL_GetTick>
 8004930:	1b43      	subs	r3, r0, r5
 8004932:	2b02      	cmp	r3, #2
 8004934:	d857      	bhi.n	80049e6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	d4f7      	bmi.n	800492c <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800493c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800493e:	6832      	ldr	r2, [r6, #0]
 8004940:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004944:	492d      	ldr	r1, [pc, #180]	; (80049fc <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004946:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800494a:	62a3      	str	r3, [r4, #40]	; 0x28
 800494c:	6875      	ldr	r5, [r6, #4]
 800494e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004952:	3d01      	subs	r5, #1
 8004954:	1e50      	subs	r0, r2, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	6932      	ldr	r2, [r6, #16]
 800495a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	0400      	lsls	r0, r0, #16
 8004962:	3a01      	subs	r2, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800496a:	0612      	lsls	r2, r2, #24
 800496c:	4303      	orrs	r3, r0
 800496e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004972:	432b      	orrs	r3, r5
 8004974:	4313      	orrs	r3, r2
 8004976:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004978:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800497a:	6972      	ldr	r2, [r6, #20]
 800497c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004980:	4313      	orrs	r3, r2
 8004982:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004984:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004986:	69b2      	ldr	r2, [r6, #24]
 8004988:	f023 0320 	bic.w	r3, r3, #32
 800498c:	4313      	orrs	r3, r2
 800498e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004998:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800499a:	69f3      	ldr	r3, [r6, #28]
 800499c:	4011      	ands	r1, r2
 800499e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80049a2:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049a6:	f043 0310 	orr.w	r3, r3, #16
 80049aa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80049ae:	b1f7      	cbz	r7, 80049ee <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049b0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049b2:	bf0c      	ite	eq
 80049b4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049b8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80049bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <RCCEx_PLL2_Config+0xf0>)
 80049c0:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049c2:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 80049c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80049c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80049ca:	f7fe f919 	bl	8002c00 <HAL_GetTick>
 80049ce:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049d0:	e004      	b.n	80049dc <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049d2:	f7fe f915 	bl	8002c00 <HAL_GetTick>
 80049d6:	1b00      	subs	r0, r0, r4
 80049d8:	2802      	cmp	r0, #2
 80049da:	d804      	bhi.n	80049e6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	d5f7      	bpl.n	80049d2 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80049e2:	2000      	movs	r0, #0
}
 80049e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
}
 80049e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
}
 80049ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049f4:	e7e3      	b.n	80049be <RCCEx_PLL2_Config+0xb6>
 80049f6:	bf00      	nop
 80049f8:	58024400 	.word	0x58024400
 80049fc:	ffff0007 	.word	0xffff0007

08004a00 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <RCCEx_PLL3_Config+0xf0>)
{
 8004a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a04:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d069      	beq.n	8004ae2 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	4606      	mov	r6, r0
 8004a12:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a14:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8004a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a1c:	f7fe f8f0 	bl	8002c00 <HAL_GetTick>
 8004a20:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a22:	e004      	b.n	8004a2e <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a24:	f7fe f8ec 	bl	8002c00 <HAL_GetTick>
 8004a28:	1b43      	subs	r3, r0, r5
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d857      	bhi.n	8004ade <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	009a      	lsls	r2, r3, #2
 8004a32:	d4f7      	bmi.n	8004a24 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a36:	6832      	ldr	r2, [r6, #0]
 8004a38:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a3c:	492d      	ldr	r1, [pc, #180]	; (8004af4 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004a42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a44:	6875      	ldr	r5, [r6, #4]
 8004a46:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004a4a:	3d01      	subs	r5, #1
 8004a4c:	1e50      	subs	r0, r2, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6932      	ldr	r2, [r6, #16]
 8004a52:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004a56:	025b      	lsls	r3, r3, #9
 8004a58:	0400      	lsls	r0, r0, #16
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8004a62:	0612      	lsls	r2, r2, #24
 8004a64:	4303      	orrs	r3, r0
 8004a66:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004a6a:	432b      	orrs	r3, r5
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a72:	6972      	ldr	r2, [r6, #20]
 8004a74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a7e:	69b2      	ldr	r2, [r6, #24]
 8004a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a90:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a92:	69f3      	ldr	r3, [r6, #28]
 8004a94:	4011      	ands	r1, r2
 8004a96:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004a9a:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004aa6:	b1f7      	cbz	r7, 8004ae6 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004aa8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004aaa:	bf0c      	ite	eq
 8004aac:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ab0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <RCCEx_PLL3_Config+0xf0>)
 8004ab8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aba:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8004abc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ac0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004ac2:	f7fe f89d 	bl	8002c00 <HAL_GetTick>
 8004ac6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ac8:	e004      	b.n	8004ad4 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aca:	f7fe f899 	bl	8002c00 <HAL_GetTick>
 8004ace:	1b00      	subs	r0, r0, r4
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	d804      	bhi.n	8004ade <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	d5f7      	bpl.n	8004aca <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8004ada:	2000      	movs	r0, #0
}
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004ade:	2003      	movs	r0, #3
}
 8004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004ae2:	2001      	movs	r0, #1
}
 8004ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aec:	e7e3      	b.n	8004ab6 <RCCEx_PLL3_Config+0xb6>
 8004aee:	bf00      	nop
 8004af0:	58024400 	.word	0x58024400
 8004af4:	ffff0007 	.word	0xffff0007

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004afc:	6803      	ldr	r3, [r0, #0]
{
 8004afe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b00:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8004b04:	d01c      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b06:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004b08:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004b0c:	f000 84c7 	beq.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8004b10:	d823      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b12:	2a00      	cmp	r2, #0
 8004b14:	f000 842c 	beq.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004b18:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004b1c:	d120      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b1e:	2102      	movs	r1, #2
 8004b20:	3004      	adds	r0, #4
 8004b22:	f7ff fef1 	bl	8004908 <RCCEx_PLL2_Config>
 8004b26:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	f040 84c0 	bne.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8004b2e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004b30:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b32:	48b0      	ldr	r0, [pc, #704]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004b34:	2600      	movs	r6, #0
 8004b36:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004b38:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b40:	05da      	lsls	r2, r3, #23
 8004b42:	d511      	bpl.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b44:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004b46:	2a04      	cmp	r2, #4
 8004b48:	f200 8580 	bhi.w	800564c <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8004b4c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004b50:	04c104ba 	.word	0x04c104ba
 8004b54:	033b04b2 	.word	0x033b04b2
 8004b58:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b5a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8004b5e:	d0e8      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b60:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b62:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b66:	d4ed      	bmi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b68:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b6a:	059f      	lsls	r7, r3, #22
 8004b6c:	d51b      	bpl.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b70:	2a80      	cmp	r2, #128	; 0x80
 8004b72:	f000 84b7 	beq.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8004b76:	f200 8127 	bhi.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	f000 83e6 	beq.w	800534c <HAL_RCCEx_PeriphCLKConfig+0x854>
 8004b80:	2a40      	cmp	r2, #64	; 0x40
 8004b82:	f040 8128 	bne.w	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b86:	2100      	movs	r1, #0
 8004b88:	1d20      	adds	r0, r4, #4
 8004b8a:	f7ff febd 	bl	8004908 <RCCEx_PLL2_Config>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	f040 83cc 	bne.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b98:	4996      	ldr	r1, [pc, #600]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004b9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004b9c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004b9e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8004ba2:	4302      	orrs	r2, r0
 8004ba4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ba6:	0558      	lsls	r0, r3, #21
 8004ba8:	d51f      	bpl.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004baa:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8004bae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004bb2:	f000 8462 	beq.w	800547a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8004bb6:	f200 8111 	bhi.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	f000 83c0 	beq.w	8005340 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004bc0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004bc4:	f040 8112 	bne.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	1d20      	adds	r0, r4, #4
 8004bcc:	f7ff fe9c 	bl	8004908 <RCCEx_PLL2_Config>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	f040 83b1 	bne.w	800533c <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bda:	4986      	ldr	r1, [pc, #536]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004bdc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8004be0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004be2:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8004be6:	4302      	orrs	r2, r0
 8004be8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bea:	0519      	lsls	r1, r3, #20
 8004bec:	d51f      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bee:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004bf2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8004bf6:	f000 8437 	beq.w	8005468 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8004bfa:	f200 80fd 	bhi.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	f000 83aa 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004c04:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8004c08:	f040 80fe 	bne.w	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	1d20      	adds	r0, r4, #4
 8004c10:	f7ff fe7a 	bl	8004908 <RCCEx_PLL2_Config>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	f040 8387 	bne.w	800532c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c1e:	4975      	ldr	r1, [pc, #468]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c20:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004c24:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004c26:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004c2a:	4302      	orrs	r2, r0
 8004c2c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c2e:	019a      	lsls	r2, r3, #6
 8004c30:	d518      	bpl.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8004c32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c34:	2a20      	cmp	r2, #32
 8004c36:	f000 840d 	beq.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004c3a:	f200 80e8 	bhi.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004c3e:	b13a      	cbz	r2, 8004c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004c40:	2a10      	cmp	r2, #16
 8004c42:	f040 80e7 	bne.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c46:	496b      	ldr	r1, [pc, #428]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c48:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004c4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c4e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	f040 83ba 	bne.w	80053ca <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c56:	4967      	ldr	r1, [pc, #412]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004c5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004c5c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004c60:	4302      	orrs	r2, r0
 8004c62:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c64:	04df      	lsls	r7, r3, #19
 8004c66:	d51d      	bpl.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c68:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004c6a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c6e:	f000 840d 	beq.w	800548c <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004c72:	f200 80d2 	bhi.w	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	f000 8374 	beq.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8004c7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004c80:	f040 80d3 	bne.w	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c84:	2100      	movs	r1, #0
 8004c86:	1d20      	adds	r0, r4, #4
 8004c88:	f7ff fe3e 	bl	8004908 <RCCEx_PLL2_Config>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c90:	2d00      	cmp	r5, #0
 8004c92:	f040 834f 	bne.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c96:	4957      	ldr	r1, [pc, #348]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c98:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c9a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004c9c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ca0:	4302      	orrs	r2, r0
 8004ca2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ca4:	0498      	lsls	r0, r3, #18
 8004ca6:	d51b      	bpl.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ca8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004caa:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004cae:	f000 83bd 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004cb2:	f200 80bd 	bhi.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004cb6:	b14a      	cbz	r2, 8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004cb8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004cbc:	f040 80c2 	bne.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	1d20      	adds	r0, r4, #4
 8004cc4:	f7ff fe20 	bl	8004908 <RCCEx_PLL2_Config>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	f040 837e 	bne.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cd2:	4948      	ldr	r1, [pc, #288]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004cd4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004cd6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004cd8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8004cdc:	4302      	orrs	r2, r0
 8004cde:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ce0:	0459      	lsls	r1, r3, #17
 8004ce2:	d51d      	bpl.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ce4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004ce8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004cec:	f000 83a8 	beq.w	8005440 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004cf0:	f200 80ab 	bhi.w	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004cf4:	b14a      	cbz	r2, 8004d0a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004cf6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004cfa:	f040 80b0 	bne.w	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cfe:	2101      	movs	r1, #1
 8004d00:	1d20      	adds	r0, r4, #4
 8004d02:	f7ff fe01 	bl	8004908 <RCCEx_PLL2_Config>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	f040 8363 	bne.w	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d10:	4938      	ldr	r1, [pc, #224]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d12:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8004d16:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004d18:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004d1c:	4302      	orrs	r2, r0
 8004d1e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	d509      	bpl.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8004d24:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004d26:	2a00      	cmp	r2, #0
 8004d28:	f000 8264 	beq.w	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8004d2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004d30:	f000 825a 	beq.w	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004d34:	2601      	movs	r6, #1
 8004d36:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d38:	041f      	lsls	r7, r3, #16
 8004d3a:	d50d      	bpl.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8004d3c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004d3e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004d42:	f000 8420 	beq.w	8005586 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8004d46:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004d4a:	f000 82ce 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	f000 82d1 	beq.w	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004d54:	2601      	movs	r6, #1
 8004d56:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d58:	01d8      	lsls	r0, r3, #7
 8004d5a:	f100 81cf 	bmi.w	80050fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5e:	0259      	lsls	r1, r3, #9
 8004d60:	f100 81ef 	bmi.w	8005142 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d64:	07df      	lsls	r7, r3, #31
 8004d66:	f140 8088 	bpl.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d6a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004d6c:	2a28      	cmp	r2, #40	; 0x28
 8004d6e:	f200 81cf 	bhi.w	8005110 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004d72:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004d76:	007e      	.short	0x007e
 8004d78:	01cd01cd 	.word	0x01cd01cd
 8004d7c:	01cd01cd 	.word	0x01cd01cd
 8004d80:	01cd01cd 	.word	0x01cd01cd
 8004d84:	03d401cd 	.word	0x03d401cd
 8004d88:	01cd01cd 	.word	0x01cd01cd
 8004d8c:	01cd01cd 	.word	0x01cd01cd
 8004d90:	01cd01cd 	.word	0x01cd01cd
 8004d94:	007701cd 	.word	0x007701cd
 8004d98:	01cd01cd 	.word	0x01cd01cd
 8004d9c:	01cd01cd 	.word	0x01cd01cd
 8004da0:	01cd01cd 	.word	0x01cd01cd
 8004da4:	007e01cd 	.word	0x007e01cd
 8004da8:	01cd01cd 	.word	0x01cd01cd
 8004dac:	01cd01cd 	.word	0x01cd01cd
 8004db0:	01cd01cd 	.word	0x01cd01cd
 8004db4:	007e01cd 	.word	0x007e01cd
 8004db8:	01cd01cd 	.word	0x01cd01cd
 8004dbc:	01cd01cd 	.word	0x01cd01cd
 8004dc0:	01cd01cd 	.word	0x01cd01cd
 8004dc4:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8004dc8:	2ac0      	cmp	r2, #192	; 0xc0
 8004dca:	f43f aee2 	beq.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004dce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004dd2:	f43f aede 	beq.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004dd6:	2601      	movs	r6, #1
 8004dd8:	4635      	mov	r5, r6
 8004dda:	e6e4      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004ddc:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8004de0:	f43f aef8 	beq.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004de4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004de8:	f43f aef4 	beq.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004dec:	2601      	movs	r6, #1
 8004dee:	4635      	mov	r5, r6
 8004df0:	e6fb      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8004df8:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004dfc:	f43f af0c 	beq.w	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004e00:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004e04:	f43f af08 	beq.w	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004e08:	2601      	movs	r6, #1
 8004e0a:	4635      	mov	r5, r6
 8004e0c:	e70f      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8004e0e:	2a30      	cmp	r2, #48	; 0x30
 8004e10:	f43f af1e 	beq.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004e14:	2601      	movs	r6, #1
 8004e16:	4635      	mov	r5, r6
 8004e18:	e724      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e1a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004e1e:	f43f af37 	beq.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e22:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004e26:	f43f af33 	beq.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e2a:	2601      	movs	r6, #1
 8004e2c:	4635      	mov	r5, r6
 8004e2e:	e739      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e30:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004e34:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8004e38:	f43f af48 	beq.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e3c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004e40:	f43f af44 	beq.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e44:	2601      	movs	r6, #1
 8004e46:	4635      	mov	r5, r6
 8004e48:	e74a      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e4a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8004e4e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004e52:	f43f af5a 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004e56:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004e5a:	f43f af56 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004e5e:	2601      	movs	r6, #1
 8004e60:	4635      	mov	r5, r6
 8004e62:	e75d      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e64:	2101      	movs	r1, #1
 8004e66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e6a:	f7ff fdc9 	bl	8004a00 <RCCEx_PLL3_Config>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004e72:	2d00      	cmp	r5, #0
 8004e74:	f000 82c0 	beq.w	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004e78:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e7a:	0798      	lsls	r0, r3, #30
 8004e7c:	d516      	bpl.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e7e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004e80:	2a05      	cmp	r2, #5
 8004e82:	f200 83e6 	bhi.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8004e86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004e8a:	000d      	.short	0x000d
 8004e8c:	00060336 	.word	0x00060336
 8004e90:	000d000d 	.word	0x000d000d
 8004e94:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e96:	2101      	movs	r1, #1
 8004e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e9c:	f7ff fdb0 	bl	8004a00 <RCCEx_PLL3_Config>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	f000 8279 	beq.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8004eaa:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eac:	0759      	lsls	r1, r3, #29
 8004eae:	d517      	bpl.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eb0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004eb4:	2a05      	cmp	r2, #5
 8004eb6:	f200 83c6 	bhi.w	8005646 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8004eba:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004ebe:	000d      	.short	0x000d
 8004ec0:	00060326 	.word	0x00060326
 8004ec4:	000d000d 	.word	0x000d000d
 8004ec8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eca:	2101      	movs	r1, #1
 8004ecc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ed0:	f7ff fd96 	bl	8004a00 <RCCEx_PLL3_Config>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	f000 826a 	beq.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8004ede:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ee0:	069a      	lsls	r2, r3, #26
 8004ee2:	d51d      	bpl.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ee4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004ee8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004eec:	f000 8340 	beq.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8004ef0:	f200 81af 	bhi.w	8005252 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ef4:	b14a      	cbz	r2, 8004f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
 8004ef6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004efa:	f040 81b4 	bne.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004efe:	2100      	movs	r1, #0
 8004f00:	1d20      	adds	r0, r4, #4
 8004f02:	f7ff fd01 	bl	8004908 <RCCEx_PLL2_Config>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	f040 823c 	bne.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f10:	49b3      	ldr	r1, [pc, #716]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004f12:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004f16:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004f18:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004f1c:	4302      	orrs	r2, r0
 8004f1e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f20:	065f      	lsls	r7, r3, #25
 8004f22:	d51d      	bpl.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f24:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8004f28:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004f2c:	f000 8334 	beq.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8004f30:	f200 817f 	bhi.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004f34:	b14a      	cbz	r2, 8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004f36:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004f3a:	f040 8184 	bne.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	1d20      	adds	r0, r4, #4
 8004f42:	f7ff fce1 	bl	8004908 <RCCEx_PLL2_Config>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	f040 8221 	bne.w	8005392 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f50:	49a3      	ldr	r1, [pc, #652]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004f52:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004f56:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004f58:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004f5c:	4302      	orrs	r2, r0
 8004f5e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f60:	0618      	lsls	r0, r3, #24
 8004f62:	d51d      	bpl.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f64:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8004f68:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004f6c:	f000 831f 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004f70:	f200 814f 	bhi.w	8005212 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004f74:	b14a      	cbz	r2, 8004f8a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8004f76:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004f7a:	f040 8154 	bne.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f7e:	2100      	movs	r1, #0
 8004f80:	1d20      	adds	r0, r4, #4
 8004f82:	f7ff fcc1 	bl	8004908 <RCCEx_PLL2_Config>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	f040 81f7 	bne.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f90:	4993      	ldr	r1, [pc, #588]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004f92:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004f96:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004f98:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f9c:	4302      	orrs	r2, r0
 8004f9e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fa0:	0719      	lsls	r1, r3, #28
 8004fa2:	d50b      	bpl.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004fa4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004fa8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004fac:	f000 831e 	beq.w	80055ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004fb0:	488b      	ldr	r0, [pc, #556]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004fb2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004fb4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fbc:	06da      	lsls	r2, r3, #27
 8004fbe:	d50b      	bpl.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004fc0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004fc4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004fc8:	f000 8305 	beq.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fcc:	4884      	ldr	r0, [pc, #528]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004fce:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004fd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fd8:	031f      	lsls	r7, r3, #12
 8004fda:	d50e      	bpl.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8004fdc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004fe0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004fe4:	f000 816b 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8004fe8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004fec:	f000 816e 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	f000 82e7 	beq.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ff6:	2601      	movs	r6, #1
 8004ff8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ffa:	0358      	lsls	r0, r3, #13
 8004ffc:	d50f      	bpl.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8004ffe:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8005002:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005006:	f000 8144 	beq.w	8005292 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800500a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800500e:	f000 8147 	beq.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8005012:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005016:	f000 82a2 	beq.w	800555e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800501a:	2601      	movs	r6, #1
 800501c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800501e:	03d9      	lsls	r1, r3, #15
 8005020:	d517      	bpl.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005022:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005024:	2a00      	cmp	r2, #0
 8005026:	f000 8288 	beq.w	800553a <HAL_RCCEx_PeriphCLKConfig+0xa42>
 800502a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800502e:	f040 817a 	bne.w	8005326 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005032:	2102      	movs	r1, #2
 8005034:	1d20      	adds	r0, r4, #4
 8005036:	f7ff fc67 	bl	8004908 <RCCEx_PLL2_Config>
 800503a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	2d00      	cmp	r5, #0
 8005040:	f040 81e5 	bne.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005044:	4966      	ldr	r1, [pc, #408]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8005046:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005048:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800504a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800504e:	4302      	orrs	r2, r0
 8005050:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	f100 815c 	bmi.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005058:	039f      	lsls	r7, r3, #14
 800505a:	d43f      	bmi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800505c:	1e30      	subs	r0, r6, #0
 800505e:	bf18      	it	ne
 8005060:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005062:	02de      	lsls	r6, r3, #11
 8005064:	d506      	bpl.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005066:	495e      	ldr	r1, [pc, #376]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8005068:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800506a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800506c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005070:	432a      	orrs	r2, r5
 8005072:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005074:	00dd      	lsls	r5, r3, #3
 8005076:	d507      	bpl.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005078:	4959      	ldr	r1, [pc, #356]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800507a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800507e:	690a      	ldr	r2, [r1, #16]
 8005080:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005084:	432a      	orrs	r2, r5
 8005086:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005088:	0299      	lsls	r1, r3, #10
 800508a:	d506      	bpl.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800508c:	4954      	ldr	r1, [pc, #336]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800508e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005090:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005092:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005096:	432a      	orrs	r2, r5
 8005098:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800509a:	005a      	lsls	r2, r3, #1
 800509c:	d509      	bpl.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800509e:	4a50      	ldr	r2, [pc, #320]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80050a0:	6911      	ldr	r1, [r2, #16]
 80050a2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80050a6:	6111      	str	r1, [r2, #16]
 80050a8:	6911      	ldr	r1, [r2, #16]
 80050aa:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80050ae:	4329      	orrs	r1, r5
 80050b0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da06      	bge.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050b6:	494a      	ldr	r1, [pc, #296]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80050b8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80050ba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80050bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050c0:	432a      	orrs	r2, r5
 80050c2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	d507      	bpl.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050c8:	4a45      	ldr	r2, [pc, #276]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80050ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80050ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80050d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6553      	str	r3, [r2, #84]	; 0x54
}
 80050d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80050dc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80050e0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80050e4:	f000 8232 	beq.w	800554c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80050e8:	f240 80c3 	bls.w	8005272 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80050ec:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80050f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80050f4:	f000 80c0 	beq.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80050f8:	2001      	movs	r0, #1
 80050fa:	e7b2      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 80050fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80050fe:	2a03      	cmp	r2, #3
 8005100:	f200 82aa 	bhi.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8005104:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005108:	018a0010 	.word	0x018a0010
 800510c:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8005110:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005112:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8005114:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005116:	f57f aec9 	bpl.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800511a:	e6b0      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800511c:	2102      	movs	r1, #2
 800511e:	1d20      	adds	r0, r4, #4
 8005120:	f7ff fbf2 	bl	8004908 <RCCEx_PLL2_Config>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005128:	2d00      	cmp	r5, #0
 800512a:	f040 8152 	bne.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800512e:	492c      	ldr	r1, [pc, #176]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8005130:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005132:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005134:	f022 0203 	bic.w	r2, r2, #3
 8005138:	4302      	orrs	r2, r0
 800513a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800513c:	0259      	lsls	r1, r3, #9
 800513e:	f57f ae11 	bpl.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8005144:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005146:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800514e:	f7fd fd57 	bl	8002c00 <HAL_GetTick>
 8005152:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005154:	e005      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fd fd53 	bl	8002c00 <HAL_GetTick>
 800515a:	1bc0      	subs	r0, r0, r7
 800515c:	2864      	cmp	r0, #100	; 0x64
 800515e:	f200 81e8 	bhi.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005162:	f8d8 3000 	ldr.w	r3, [r8]
 8005166:	05da      	lsls	r2, r3, #23
 8005168:	d5f5      	bpl.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 800516a:	2d00      	cmp	r5, #0
 800516c:	f040 8267 	bne.w	800563e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005170:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8005172:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8005176:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005178:	4059      	eors	r1, r3
 800517a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005180:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005182:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005184:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005188:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800518c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800518e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005190:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005194:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005196:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519c:	f000 8231 	beq.w	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80051a4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80051a8:	f000 823f 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0xb32>
 80051ac:	490c      	ldr	r1, [pc, #48]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80051ae:	690a      	ldr	r2, [r1, #16]
 80051b0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80051b4:	610a      	str	r2, [r1, #16]
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80051b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051bc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80051be:	430b      	orrs	r3, r1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	e5ce      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051c6:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	f040 80b5 	bne.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ce:	4904      	ldr	r1, [pc, #16]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80051d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80051d4:	f022 0207 	bic.w	r2, r2, #7
 80051d8:	4302      	orrs	r2, r0
 80051da:	650a      	str	r2, [r1, #80]	; 0x50
 80051dc:	e4c5      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e8:	2101      	movs	r1, #1
 80051ea:	1d20      	adds	r0, r4, #4
 80051ec:	f7ff fb8c 	bl	8004908 <RCCEx_PLL2_Config>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	f040 810c 	bne.w	8005412 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80051fa:	49b9      	ldr	r1, [pc, #740]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051fc:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80051fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005200:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005206:	ea42 0200 	orr.w	r2, r2, r0
 800520a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800520c:	f57f ada4 	bpl.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8005210:	e594      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005212:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005216:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800521a:	f43f aeb6 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x492>
 800521e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005222:	f43f aeb2 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x492>
 8005226:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005228:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 800522a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800522c:	f57f aec6 	bpl.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8005230:	e6b8      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005232:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8005236:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800523a:	f43f ae86 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800523e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005242:	f43f ae82 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005246:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005248:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800524a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800524c:	f57f aea8 	bpl.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005250:	e688      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005252:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8005256:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800525a:	f43f ae56 	beq.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
 800525e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005262:	f43f ae52 	beq.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
 8005266:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005268:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 800526a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800526c:	f57f ae78 	bpl.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8005270:	e658      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8005272:	2a00      	cmp	r2, #0
 8005274:	f47f af40 	bne.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8005278:	2d00      	cmp	r5, #0
 800527a:	f47f af3d 	bne.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800527e:	4d98      	ldr	r5, [pc, #608]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005280:	1e30      	subs	r0, r6, #0
 8005282:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005284:	bf18      	it	ne
 8005286:	2001      	movne	r0, #1
 8005288:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800528c:	430a      	orrs	r2, r1
 800528e:	656a      	str	r2, [r5, #84]	; 0x54
 8005290:	e6e7      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005292:	2101      	movs	r1, #1
 8005294:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005298:	f7ff fbb2 	bl	8004a00 <RCCEx_PLL3_Config>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	f040 80a4 	bne.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a6:	498e      	ldr	r1, [pc, #568]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80052a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80052ac:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80052ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80052b2:	4302      	orrs	r2, r0
 80052b4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052b6:	03d9      	lsls	r1, r3, #15
 80052b8:	f57f aecb 	bpl.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80052bc:	e6b1      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052be:	2102      	movs	r1, #2
 80052c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052c4:	f7ff fb9c 	bl	8004a00 <RCCEx_PLL3_Config>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	f040 8089 	bne.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052d2:	4983      	ldr	r1, [pc, #524]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80052d4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80052d8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80052da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80052de:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052e0:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052e2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052e4:	f57f ae9b 	bpl.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80052e8:	e689      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052ea:	2101      	movs	r1, #1
 80052ec:	1d20      	adds	r0, r4, #4
 80052ee:	f7ff fb0b 	bl	8004908 <RCCEx_PLL2_Config>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	d16f      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052fa:	4979      	ldr	r1, [pc, #484]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80052fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80052fe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005304:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005306:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005308:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800530a:	f57f ad28 	bpl.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x266>
 800530e:	e6f5      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005310:	2102      	movs	r1, #2
 8005312:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005316:	f7ff fb73 	bl	8004a00 <RCCEx_PLL3_Config>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	2800      	cmp	r0, #0
 800531e:	f43f ae9b 	beq.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8005322:	2601      	movs	r6, #1
 8005324:	e698      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005326:	2601      	movs	r6, #1
 8005328:	4635      	mov	r5, r6
 800532a:	e692      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800532c:	462e      	mov	r6, r5
 800532e:	e47e      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005330:	462e      	mov	r6, r5
 8005332:	e438      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8005334:	462e      	mov	r6, r5
 8005336:	e4b5      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8005338:	462e      	mov	r6, r5
 800533a:	e416      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800533c:	462e      	mov	r6, r5
 800533e:	e454      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4967      	ldr	r1, [pc, #412]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005342:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005344:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005348:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800534a:	e443      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534c:	4964      	ldr	r1, [pc, #400]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800534e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005350:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005354:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005356:	e41c      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4961      	ldr	r1, [pc, #388]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800535a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800535c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005360:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005362:	e459      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	495e      	ldr	r1, [pc, #376]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005366:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005368:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800536c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800536e:	e48f      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005370:	485b      	ldr	r0, [pc, #364]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005372:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005374:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005378:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800537a:	f7ff bbda 	b.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800537e:	0719      	lsls	r1, r3, #28
 8005380:	462e      	mov	r6, r5
 8005382:	f57f ae1b 	bpl.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8005386:	e60d      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005388:	065f      	lsls	r7, r3, #25
 800538a:	462e      	mov	r6, r5
 800538c:	f57f ade8 	bpl.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8005390:	e5c8      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005392:	0618      	lsls	r0, r3, #24
 8005394:	462e      	mov	r6, r5
 8005396:	f57f ae03 	bpl.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800539a:	e5e3      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800539c:	4950      	ldr	r1, [pc, #320]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800539e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80053a0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80053a2:	f022 0207 	bic.w	r2, r2, #7
 80053a6:	4302      	orrs	r2, r0
 80053a8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053aa:	0759      	lsls	r1, r3, #29
 80053ac:	f57f ad98 	bpl.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80053b0:	e57e      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b2:	494b      	ldr	r1, [pc, #300]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80053b4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80053b8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80053ba:	f022 0207 	bic.w	r2, r2, #7
 80053be:	4302      	orrs	r2, r0
 80053c0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053c2:	069a      	lsls	r2, r3, #26
 80053c4:	f57f adac 	bpl.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80053c8:	e58c      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80053ca:	462e      	mov	r6, r5
 80053cc:	e44a      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80053ce:	462e      	mov	r6, r5
 80053d0:	e486      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053d2:	462e      	mov	r6, r5
 80053d4:	e4c3      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80053d6:	462e      	mov	r6, r5
 80053d8:	e4a2      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053da:	01d8      	lsls	r0, r3, #7
 80053dc:	462e      	mov	r6, r5
 80053de:	f57f acbe 	bpl.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80053e2:	e68b      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053e4:	0358      	lsls	r0, r3, #13
 80053e6:	462e      	mov	r6, r5
 80053e8:	f57f ae19 	bpl.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80053ec:	e607      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053ee:	03d9      	lsls	r1, r3, #15
 80053f0:	462e      	mov	r6, r5
 80053f2:	f57f ae2e 	bpl.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80053f6:	e614      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053f8:	4939      	ldr	r1, [pc, #228]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80053fa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80053fc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80053fe:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8005402:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005404:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005406:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005408:	f57f ad50 	bpl.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800540c:	e537      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x386>
 800540e:	462e      	mov	r6, r5
 8005410:	e61f      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005412:	041f      	lsls	r7, r3, #16
 8005414:	462e      	mov	r6, r5
 8005416:	f57f ac9f 	bpl.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800541a:	e48f      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541c:	4930      	ldr	r1, [pc, #192]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800541e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005420:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005424:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005426:	2d00      	cmp	r5, #0
 8005428:	d1d3      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800542a:	e680      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800542c:	2101      	movs	r1, #1
 800542e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005432:	f7ff fae5 	bl	8004a00 <RCCEx_PLL3_Config>
 8005436:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	2d00      	cmp	r5, #0
 800543c:	d1c7      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800543e:	e448      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005440:	2101      	movs	r1, #1
 8005442:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005446:	f7ff fadb 	bl	8004a00 <RCCEx_PLL3_Config>
 800544a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	2d00      	cmp	r5, #0
 8005450:	d1c1      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005452:	e45d      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005454:	2102      	movs	r1, #2
 8005456:	1d20      	adds	r0, r4, #4
 8005458:	f7ff fa56 	bl	8004908 <RCCEx_PLL2_Config>
 800545c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	2d00      	cmp	r5, #0
 8005462:	d1b2      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8005464:	f7ff bbf7 	b.w	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005468:	2100      	movs	r1, #0
 800546a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800546e:	f7ff fac7 	bl	8004a00 <RCCEx_PLL3_Config>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	4605      	mov	r5, r0
      break;
 8005476:	f7ff bbcf 	b.w	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800547a:	2100      	movs	r1, #0
 800547c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005480:	f7ff fabe 	bl	8004a00 <RCCEx_PLL3_Config>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	4605      	mov	r5, r0
      break;
 8005488:	f7ff bba4 	b.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800548c:	2100      	movs	r1, #0
 800548e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005492:	f7ff fab5 	bl	8004a00 <RCCEx_PLL3_Config>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4605      	mov	r5, r0
      break;
 800549a:	f7ff bbf9 	b.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800549e:	2102      	movs	r1, #2
 80054a0:	3024      	adds	r0, #36	; 0x24
 80054a2:	f7ff faad 	bl	8004a00 <RCCEx_PLL3_Config>
 80054a6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	f43f ab40 	beq.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f7ff bb46 	b.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054b4:	2100      	movs	r1, #0
 80054b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054ba:	f7ff faa1 	bl	8004a00 <RCCEx_PLL3_Config>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	4605      	mov	r5, r0
      break;
 80054c2:	e681      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4906      	ldr	r1, [pc, #24]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 80054c6:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80054ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054ce:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80054d0:	e67a      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d2:	2100      	movs	r1, #0
 80054d4:	1d20      	adds	r0, r4, #4
 80054d6:	f7ff fa17 	bl	8004908 <RCCEx_PLL2_Config>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	4605      	mov	r5, r0
      break;
 80054de:	e673      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80054e0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054e4:	2100      	movs	r1, #0
 80054e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054ea:	f7ff fa89 	bl	8004a00 <RCCEx_PLL3_Config>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	4605      	mov	r5, r0
      break;
 80054f2:	f7ff bb4e 	b.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f6:	2101      	movs	r1, #1
 80054f8:	1d20      	adds	r0, r4, #4
 80054fa:	f7ff fa05 	bl	8004908 <RCCEx_PLL2_Config>
 80054fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	2d00      	cmp	r5, #0
 8005504:	f47f acd1 	bne.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005508:	e748      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800550a:	2101      	movs	r1, #1
 800550c:	1d20      	adds	r0, r4, #4
 800550e:	f7ff f9fb 	bl	8004908 <RCCEx_PLL2_Config>
 8005512:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	2d00      	cmp	r5, #0
 8005518:	f47f ace1 	bne.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800551c:	e749      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800551e:	2101      	movs	r1, #1
 8005520:	1d20      	adds	r0, r4, #4
 8005522:	f7ff f9f1 	bl	8004908 <RCCEx_PLL2_Config>
 8005526:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	2d00      	cmp	r5, #0
 800552c:	f47f aca4 	bne.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8005530:	e762      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8005532:	2603      	movs	r6, #3
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	4635      	mov	r5, r6
 8005538:	e414      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553a:	4949      	ldr	r1, [pc, #292]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800553c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800553e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005542:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005544:	2d00      	cmp	r5, #0
 8005546:	f47f af62 	bne.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x916>
 800554a:	e57b      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554c:	4844      	ldr	r0, [pc, #272]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800554e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005550:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005554:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8005556:	2d00      	cmp	r5, #0
 8005558:	f47f adce 	bne.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800555c:	e68f      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555e:	4940      	ldr	r1, [pc, #256]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8005560:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005562:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005566:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005568:	2d00      	cmp	r5, #0
 800556a:	f47f af40 	bne.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800556e:	e69a      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005570:	2102      	movs	r1, #2
 8005572:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005576:	f7ff fa43 	bl	8004a00 <RCCEx_PLL3_Config>
 800557a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	2d00      	cmp	r5, #0
 8005580:	f47f af02 	bne.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8005584:	e4c4      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005586:	4936      	ldr	r1, [pc, #216]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8005588:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800558a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800558e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005590:	2d00      	cmp	r5, #0
 8005592:	f47f af22 	bne.w	80053da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005596:	e6b0      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005598:	2102      	movs	r1, #2
 800559a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800559e:	f7ff fa2f 	bl	8004a00 <RCCEx_PLL3_Config>
 80055a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	f47f aef3 	bne.w	8005392 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80055ac:	e4d0      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055ae:	2102      	movs	r1, #2
 80055b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055b4:	f7ff fa24 	bl	8004a00 <RCCEx_PLL3_Config>
 80055b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	2d00      	cmp	r5, #0
 80055be:	f47f aede 	bne.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x886>
 80055c2:	e4e5      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055c4:	1d20      	adds	r0, r4, #4
 80055c6:	f7ff f99f 	bl	8004908 <RCCEx_PLL2_Config>
 80055ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	f47f af08 	bne.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80055d4:	e67d      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055d6:	2102      	movs	r1, #2
 80055d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055dc:	f7ff fa10 	bl	8004a00 <RCCEx_PLL3_Config>
 80055e0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80055e4:	b100      	cbz	r0, 80055e8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 80055e6:	2601      	movs	r6, #1
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	e4ef      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055ec:	2102      	movs	r1, #2
 80055ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055f2:	f7ff fa05 	bl	8004a00 <RCCEx_PLL3_Config>
 80055f6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80055fa:	b100      	cbz	r0, 80055fe <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 80055fc:	2601      	movs	r6, #1
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	e4d6      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8005602:	f7fd fafd 	bl	8002c00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005606:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800560e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005610:	e004      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7fd faf5 	bl	8002c00 <HAL_GetTick>
 8005616:	1bc0      	subs	r0, r0, r7
 8005618:	4548      	cmp	r0, r9
 800561a:	d88a      	bhi.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800561c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005620:	079b      	lsls	r3, r3, #30
 8005622:	d5f6      	bpl.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005624:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8005628:	e5ba      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562a:	480d      	ldr	r0, [pc, #52]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800562e:	6901      	ldr	r1, [r0, #16]
 8005630:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005634:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005638:	430a      	orrs	r2, r1
 800563a:	6102      	str	r2, [r0, #16]
 800563c:	e5bb      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800563e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005640:	462e      	mov	r6, r5
 8005642:	f7ff bb8f 	b.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005646:	2601      	movs	r6, #1
 8005648:	4635      	mov	r5, r6
 800564a:	e449      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800564c:	2601      	movs	r6, #1
 800564e:	f7ff ba8b 	b.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005652:	2601      	movs	r6, #1
 8005654:	4635      	mov	r5, r6
 8005656:	e429      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8005658:	2601      	movs	r6, #1
 800565a:	4635      	mov	r5, r6
 800565c:	f7ff bb7f 	b.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005660:	58024400 	.word	0x58024400
 8005664:	00ffffcf 	.word	0x00ffffcf

08005668 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop

0800566c <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800566c:	b318      	cbz	r0, 80056b6 <HAL_SDRAM_Init+0x4a>
{
 800566e:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005670:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005674:	460d      	mov	r5, r1
 8005676:	4604      	mov	r4, r0
 8005678:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800567c:	b1b3      	cbz	r3, 80056ac <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800567e:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005680:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005682:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005686:	f851 0b04 	ldr.w	r0, [r1], #4
 800568a:	f000 f851 	bl	8005730 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800568e:	4629      	mov	r1, r5
 8005690:	e9d4 0200 	ldrd	r0, r2, [r4]
 8005694:	f000 f888 	bl	80057a8 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 800569a:	2101      	movs	r1, #1
  return HAL_OK;
 800569c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056a6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80056ac:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80056b0:	f7ff ffda 	bl	8005668 <HAL_SDRAM_MspInit>
 80056b4:	e7e3      	b.n	800567e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80056b6:	2001      	movs	r0, #1
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	52004000 	.word	0x52004000

080056c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80056c0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80056c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80056c6:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80056c8:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80056ca:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80056cc:	d004      	beq.n	80056d8 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80056ce:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80056d2:	2c01      	cmp	r4, #1
 80056d4:	d001      	beq.n	80056da <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80056d6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056da:	2302      	movs	r3, #2
 80056dc:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80056de:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056e0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80056e4:	f000 f8ac 	bl	8005840 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d003      	beq.n	80056f6 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 80056ee:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 80056f0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80056f6:	2305      	movs	r3, #5
  return HAL_OK;
 80056f8:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80056fa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80056fe:	bd70      	pop	{r4, r5, r6, pc}

08005700 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005700:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005702:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005706:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005708:	2b02      	cmp	r3, #2
 800570a:	b2d8      	uxtb	r0, r3
 800570c:	d005      	beq.n	800571a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800570e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005712:	2b01      	cmp	r3, #1
 8005714:	b2dd      	uxtb	r5, r3
 8005716:	d001      	beq.n	800571c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005718:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800571a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800571c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800571e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005720:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005724:	f000 f8a2 	bl	800586c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8005728:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800572a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800572e:	bd38      	pop	{r3, r4, r5, pc}

08005730 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005730:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005732:	6802      	ldr	r2, [r0, #0]
{
 8005734:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005736:	b9c3      	cbnz	r3, 800576a <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005738:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800573c:	684c      	ldr	r4, [r1, #4]
 800573e:	698e      	ldr	r6, [r1, #24]
 8005740:	4013      	ands	r3, r2
 8005742:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005746:	4323      	orrs	r3, r4
 8005748:	690c      	ldr	r4, [r1, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	694a      	ldr	r2, [r1, #20]
 800574e:	432b      	orrs	r3, r5
 8005750:	69cd      	ldr	r5, [r1, #28]
 8005752:	4323      	orrs	r3, r4
 8005754:	4313      	orrs	r3, r2
 8005756:	4333      	orrs	r3, r6
 8005758:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800575c:	432b      	orrs	r3, r5
 800575e:	4323      	orrs	r3, r4
 8005760:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005762:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005764:	6003      	str	r3, [r0, #0]
}
 8005766:	2000      	movs	r0, #0
 8005768:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800576a:	69cb      	ldr	r3, [r1, #28]
 800576c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005770:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005772:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005776:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800577a:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800577c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800577e:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005780:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005782:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005784:	6842      	ldr	r2, [r0, #4]
 8005786:	4013      	ands	r3, r2
 8005788:	432b      	orrs	r3, r5
 800578a:	690d      	ldr	r5, [r1, #16]
 800578c:	4323      	orrs	r3, r4
 800578e:	4333      	orrs	r3, r6
 8005790:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8005794:	432b      	orrs	r3, r5
 8005796:	4323      	orrs	r3, r4
 8005798:	4313      	orrs	r3, r2
}
 800579a:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800579c:	6043      	str	r3, [r0, #4]
}
 800579e:	2000      	movs	r0, #0
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	ffff8000 	.word	0xffff8000

080057a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80057a8:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80057aa:	bb0a      	cbnz	r2, 80057f0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057ac:	684c      	ldr	r4, [r1, #4]
 80057ae:	6882      	ldr	r2, [r0, #8]
 80057b0:	680d      	ldr	r5, [r1, #0]
 80057b2:	1e63      	subs	r3, r4, #1
 80057b4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80057b8:	688c      	ldr	r4, [r1, #8]
 80057ba:	1e6e      	subs	r6, r5, #1
 80057bc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80057c0:	1e65      	subs	r5, r4, #1
 80057c2:	68cc      	ldr	r4, [r1, #12]
 80057c4:	4333      	orrs	r3, r6
 80057c6:	690a      	ldr	r2, [r1, #16]
 80057c8:	1e66      	subs	r6, r4, #1
 80057ca:	694c      	ldr	r4, [r1, #20]
 80057cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80057d0:	1e55      	subs	r5, r2, #1
 80057d2:	698a      	ldr	r2, [r1, #24]
 80057d4:	1e61      	subs	r1, r4, #1
 80057d6:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80057da:	3a01      	subs	r2, #1
 80057dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80057e0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80057e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80057e8:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057ea:	6083      	str	r3, [r0, #8]
}
 80057ec:	2000      	movs	r0, #0
 80057ee:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057f0:	6882      	ldr	r2, [r0, #8]
 80057f2:	68cb      	ldr	r3, [r1, #12]
 80057f4:	4c11      	ldr	r4, [pc, #68]	; (800583c <FMC_SDRAM_Timing_Init+0x94>)
 80057f6:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80057f8:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057fa:	4014      	ands	r4, r2
 80057fc:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80057fe:	1e5e      	subs	r6, r3, #1
 8005800:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005802:	3a01      	subs	r2, #1
 8005804:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005808:	688d      	ldr	r5, [r1, #8]
 800580a:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800580c:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005810:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005812:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005814:	68c2      	ldr	r2, [r0, #12]
 8005816:	690c      	ldr	r4, [r1, #16]
 8005818:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800581c:	6989      	ldr	r1, [r1, #24]
 800581e:	3c01      	subs	r4, #1
 8005820:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8005824:	3901      	subs	r1, #1
 8005826:	4313      	orrs	r3, r2
 8005828:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800582c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005830:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8005834:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005836:	60c3      	str	r3, [r0, #12]
}
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr
 800583c:	ff0f0fff 	.word	0xff0f0fff

08005840 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005840:	b470      	push	{r4, r5, r6}
 8005842:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005844:	68ce      	ldr	r6, [r1, #12]
 8005846:	4c08      	ldr	r4, [pc, #32]	; (8005868 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8005848:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800584a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800584e:	6889      	ldr	r1, [r1, #8]
 8005850:	432b      	orrs	r3, r5
 8005852:	6915      	ldr	r5, [r2, #16]
 8005854:	3901      	subs	r1, #1
 8005856:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800585a:	402c      	ands	r4, r5
 800585c:	4323      	orrs	r3, r4
 800585e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 8005862:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005864:	6113      	str	r3, [r2, #16]
}
 8005866:	4770      	bx	lr
 8005868:	ffc00000 	.word	0xffc00000

0800586c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800586c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8005870:	2000      	movs	r0, #0
{
 8005872:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005874:	6954      	ldr	r4, [r2, #20]
 8005876:	4023      	ands	r3, r4
}
 8005878:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800587c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005880:	6151      	str	r1, [r2, #20]
}
 8005882:	4770      	bx	lr
 8005884:	ffffc001 	.word	0xffffc001

08005888 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8005888:	4603      	mov	r3, r0
 800588a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800588e:	4c15      	ldr	r4, [pc, #84]	; (80058e4 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8005890:	2500      	movs	r5, #0
 8005892:	4e15      	ldr	r6, [pc, #84]	; (80058e8 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005894:	4628      	mov	r0, r5
 8005896:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800589a:	e9d3 7200 	ldrd	r7, r2, [r3]
 800589e:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80058a2:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 80058a6:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80058a8:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 80058ac:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 80058ae:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 80058b0:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80058b2:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 80058b6:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80058ba:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 80058be:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80058c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80058c4:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80058c6:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80058c8:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80058ca:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80058cc:	6a23      	ldr	r3, [r4, #32]
 80058ce:	f106 0118 	add.w	r1, r6, #24
 80058d2:	4628      	mov	r0, r5
 80058d4:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80058d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058d8:	f106 011c 	add.w	r1, r6, #28
 80058dc:	4628      	mov	r0, r5
}
 80058de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80058e2:	4718      	bx	r3
 80058e4:	240009f8 	.word	0x240009f8
 80058e8:	240009b8 	.word	0x240009b8

080058ec <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 80058ec:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <UTIL_LCD_SetLayer+0x18>)
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	b133      	cbz	r3, 8005902 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 80058f4:	4d04      	ldr	r5, [pc, #16]	; (8005908 <UTIL_LCD_SetLayer+0x1c>)
 80058f6:	4604      	mov	r4, r0
 80058f8:	4601      	mov	r1, r0
 80058fa:	6928      	ldr	r0, [r5, #16]
 80058fc:	4798      	blx	r3
 80058fe:	b900      	cbnz	r0, 8005902 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8005900:	60ec      	str	r4, [r5, #12]
    }
  }
}
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	240009f8 	.word	0x240009f8
 8005908:	240009b8 	.word	0x240009b8

0800590c <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800590c:	4a02      	ldr	r2, [pc, #8]	; (8005918 <UTIL_LCD_SetTextColor+0xc>)
 800590e:	68d3      	ldr	r3, [r2, #12]
 8005910:	015b      	lsls	r3, r3, #5
 8005912:	50d0      	str	r0, [r2, r3]
}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	240009b8 	.word	0x240009b8

0800591c <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800591c:	4b02      	ldr	r3, [pc, #8]	; (8005928 <UTIL_LCD_SetBackColor+0xc>)
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005924:	6058      	str	r0, [r3, #4]
}
 8005926:	4770      	bx	lr
 8005928:	240009b8 	.word	0x240009b8

0800592c <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <UTIL_LCD_SetFont+0xc>)
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005934:	6098      	str	r0, [r3, #8]
}
 8005936:	4770      	bx	lr
 8005938:	240009b8 	.word	0x240009b8

0800593c <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <UTIL_LCD_GetFont+0xc>)
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 8005944:	6898      	ldr	r0, [r3, #8]
 8005946:	4770      	bx	lr
 8005948:	240009b8 	.word	0x240009b8

0800594c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8005950:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8005aa0 <UTIL_LCD_DisplayChar+0x154>
{
 8005954:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8005956:	3a20      	subs	r2, #32
{
 8005958:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800595a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800595e:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 8005962:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8005966:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8005968:	8886      	ldrh	r6, [r0, #4]
 800596a:	88c5      	ldrh	r5, [r0, #6]
 800596c:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800596e:	6804      	ldr	r4, [r0, #0]
 8005970:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8005974:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8005976:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800597a:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 800597e:	9303      	str	r3, [sp, #12]

  for(i = 0; i < height; i++)
 8005980:	2d00      	cmp	r5, #0
 8005982:	f000 8085 	beq.w	8005a90 <UTIL_LCD_DisplayChar+0x144>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8005986:	08fb      	lsrs	r3, r7, #3
 8005988:	4414      	add	r4, r2
 800598a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005aa4 <UTIL_LCD_DisplayChar+0x158>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 800598e:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	194b      	adds	r3, r1, r5
 8005996:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 8005998:	9904      	ldr	r1, [sp, #16]
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	ab14      	add	r3, sp, #80	; 0x50
 800599e:	2901      	cmp	r1, #1
 80059a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80059a4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80059a8:	9305      	str	r3, [sp, #20]
 80059aa:	ab08      	add	r3, sp, #32
 80059ac:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80059b0:	9306      	str	r3, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 80059b2:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 80059b4:	d038      	beq.n	8005a28 <UTIL_LCD_DisplayChar+0xdc>
 80059b6:	2902      	cmp	r1, #2
 80059b8:	d06d      	beq.n	8005a96 <UTIL_LCD_DisplayChar+0x14a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80059ba:	7861      	ldrb	r1, [r4, #1]
 80059bc:	7827      	ldrb	r7, [r4, #0]
 80059be:	0209      	lsls	r1, r1, #8
 80059c0:	78a0      	ldrb	r0, [r4, #2]
 80059c2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80059c6:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80059c8:	4443      	add	r3, r8
 80059ca:	69d8      	ldr	r0, [r3, #28]
 80059cc:	2802      	cmp	r0, #2
 80059ce:	d030      	beq.n	8005a32 <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 80059d0:	b196      	cbz	r6, 80059f8 <UTIL_LCD_DisplayChar+0xac>
 80059d2:	9803      	ldr	r0, [sp, #12]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80059d4:	f8d3 e000 	ldr.w	lr, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80059d8:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80059dc:	3801      	subs	r0, #1
 80059de:	ab14      	add	r3, sp, #80	; 0x50
        if(line & (1 << (width- j + offset- 1)))
 80059e0:	fa09 f700 	lsl.w	r7, r9, r0
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80059e4:	3801      	subs	r0, #1
 80059e6:	420f      	tst	r7, r1
 80059e8:	bf14      	ite	ne
 80059ea:	4677      	movne	r7, lr
 80059ec:	4667      	moveq	r7, ip
 80059ee:	f843 7b04 	str.w	r7, [r3], #4
      for (j = 0; j < width; j++)
 80059f2:	9f05      	ldr	r7, [sp, #20]
 80059f4:	429f      	cmp	r7, r3
 80059f6:	d1f3      	bne.n	80059e0 <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80059f8:	ab14      	add	r3, sp, #80	; 0x50
 80059fa:	f8da 7004 	ldr.w	r7, [sl, #4]
 80059fe:	4659      	mov	r1, fp
 8005a00:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005a04:	e9cd 6900 	strd	r6, r9, [sp]
 8005a08:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	441c      	add	r4, r3
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	429d      	cmp	r5, r3
 8005a12:	d03d      	beq.n	8005a90 <UTIL_LCD_DisplayChar+0x144>
    switch(((width + 7)/8))
 8005a14:	9904      	ldr	r1, [sp, #16]
 8005a16:	3501      	adds	r5, #1
 8005a18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a1c:	2901      	cmp	r1, #1
 8005a1e:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a22:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005a26:	d1c6      	bne.n	80059b6 <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005a28:	4443      	add	r3, r8
      line =  pchar[0];
 8005a2a:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005a2c:	69d8      	ldr	r0, [r3, #28]
 8005a2e:	2802      	cmp	r0, #2
 8005a30:	d1ce      	bne.n	80059d0 <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 8005a32:	b1fe      	cbz	r6, 8005a74 <UTIL_LCD_DisplayChar+0x128>
 8005a34:	9803      	ldr	r0, [sp, #12]
 8005a36:	f10d 0c20 	add.w	ip, sp, #32
 8005a3a:	ee07 2a90 	vmov	s15, r2
 8005a3e:	f100 3eff 	add.w	lr, r0, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 8005a42:	fa09 f00e 	lsl.w	r0, r9, lr
 8005a46:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005a4a:	4208      	tst	r0, r1
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8005a4c:	bf14      	ite	ne
 8005a4e:	681f      	ldrne	r7, [r3, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8005a50:	685f      	ldreq	r7, [r3, #4]
 8005a52:	0cfa      	lsrs	r2, r7, #19
 8005a54:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8005a58:	097f      	lsrs	r7, r7, #5
 8005a5a:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
      for (j = 0; j < width; j++)
 8005a5e:	9a06      	ldr	r2, [sp, #24]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8005a60:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8005a64:	4338      	orrs	r0, r7
 8005a66:	b280      	uxth	r0, r0
 8005a68:	f82c 0b02 	strh.w	r0, [ip], #2
      for (j = 0; j < width; j++)
 8005a6c:	4594      	cmp	ip, r2
 8005a6e:	d1e8      	bne.n	8005a42 <UTIL_LCD_DisplayChar+0xf6>
 8005a70:	ee17 2a90 	vmov	r2, s15
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8005a74:	ab08      	add	r3, sp, #32
 8005a76:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005a7a:	4659      	mov	r1, fp
 8005a7c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005a80:	e9cd 6900 	strd	r6, r9, [sp]
 8005a84:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8005a86:	9b04      	ldr	r3, [sp, #16]
 8005a88:	441c      	add	r4, r3
 8005a8a:	9b07      	ldr	r3, [sp, #28]
 8005a8c:	429d      	cmp	r5, r3
 8005a8e:	d1c1      	bne.n	8005a14 <UTIL_LCD_DisplayChar+0xc8>
}
 8005a90:	b02d      	add	sp, #180	; 0xb4
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 8005a96:	8821      	ldrh	r1, [r4, #0]
 8005a98:	ba49      	rev16	r1, r1
 8005a9a:	b289      	uxth	r1, r1
      break;
 8005a9c:	e794      	b.n	80059c8 <UTIL_LCD_DisplayChar+0x7c>
 8005a9e:	bf00      	nop
 8005aa0:	240009b8 	.word	0x240009b8
 8005aa4:	240009f8 	.word	0x240009f8

08005aa8 <UTIL_LCD_DisplayStringAt>:
{
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 8005aae:	4611      	mov	r1, r2
{
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 8005ab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab8:	2a00      	cmp	r2, #0
 8005aba:	d041      	beq.n	8005b40 <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 8005abc:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 8005abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	2c00      	cmp	r4, #0
 8005ac6:	d1fa      	bne.n	8005abe <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8005ac8:	4f1e      	ldr	r7, [pc, #120]	; (8005b44 <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 8005aca:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8005acc:	68fc      	ldr	r4, [r7, #12]
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 8005ad4:	68a4      	ldr	r4, [r4, #8]
 8005ad6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8005ada:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 8005ade:	d029      	beq.n	8005b34 <UTIL_LCD_DisplayStringAt+0x8c>
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d103      	bne.n	8005aec <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8005ae4:	1a20      	subs	r0, r4, r0
 8005ae6:	fb0c f000 	mul.w	r0, ip, r0
 8005aea:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005aec:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8005aee:	1e68      	subs	r0, r5, #1
 8005af0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 8005af4:	4298      	cmp	r0, r3
 8005af6:	bf88      	it	hi
 8005af8:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005afa:	458c      	cmp	ip, r1
 8005afc:	d818      	bhi.n	8005b30 <UTIL_LCD_DisplayStringAt+0x88>
 8005afe:	b1ba      	cbz	r2, 8005b30 <UTIL_LCD_DisplayStringAt+0x88>
 8005b00:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8005b04:	4628      	mov	r0, r5
 8005b06:	4649      	mov	r1, r9
 8005b08:	f7ff ff20 	bl	800594c <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005b12:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8005b14:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005b18:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8005b1c:	6880      	ldr	r0, [r0, #8]
 8005b1e:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005b20:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8005b24:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d801      	bhi.n	8005b30 <UTIL_LCD_DisplayStringAt+0x88>
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	d1e9      	bne.n	8005b04 <UTIL_LCD_DisplayStringAt+0x5c>
}
 8005b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8005b34:	1a20      	subs	r0, r4, r0
 8005b36:	fb0c f000 	mul.w	r0, ip, r0
 8005b3a:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 8005b3e:	e7d5      	b.n	8005aec <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 8005b40:	4610      	mov	r0, r2
 8005b42:	e7c1      	b.n	8005ac8 <UTIL_LCD_DisplayStringAt+0x20>
 8005b44:	240009b8 	.word	0x240009b8

08005b48 <UTIL_LCD_FillRect>:
{
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005b4a:	4e13      	ldr	r6, [pc, #76]	; (8005b98 <UTIL_LCD_FillRect+0x50>)
{
 8005b4c:	4615      	mov	r5, r2
 8005b4e:	b083      	sub	sp, #12
 8005b50:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005b52:	69f7      	ldr	r7, [r6, #28]
{
 8005b54:	462b      	mov	r3, r5
 8005b56:	460a      	mov	r2, r1
 8005b58:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005b5a:	2f02      	cmp	r7, #2
 8005b5c:	d008      	beq.n	8005b70 <UTIL_LCD_FillRect+0x28>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8005b5e:	4f0f      	ldr	r7, [pc, #60]	; (8005b9c <UTIL_LCD_FillRect+0x54>)
 8005b60:	4601      	mov	r1, r0
 8005b62:	e9cd 4500 	strd	r4, r5, [sp]
 8005b66:	693c      	ldr	r4, [r7, #16]
 8005b68:	6930      	ldr	r0, [r6, #16]
 8005b6a:	47a0      	blx	r4
}
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8005b70:	096f      	lsrs	r7, r5, #5
 8005b72:	9400      	str	r4, [sp, #0]
 8005b74:	0a29      	lsrs	r1, r5, #8
 8005b76:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8005b7a:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 8005b7e:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 8005b82:	4601      	mov	r1, r0
 8005b84:	6930      	ldr	r0, [r6, #16]
 8005b86:	433c      	orrs	r4, r7
 8005b88:	4e04      	ldr	r6, [pc, #16]	; (8005b9c <UTIL_LCD_FillRect+0x54>)
 8005b8a:	4325      	orrs	r5, r4
 8005b8c:	6934      	ldr	r4, [r6, #16]
 8005b8e:	9501      	str	r5, [sp, #4]
 8005b90:	47a0      	blx	r4
}
 8005b92:	b003      	add	sp, #12
 8005b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b96:	bf00      	nop
 8005b98:	240009b8 	.word	0x240009b8
 8005b9c:	240009f8 	.word	0x240009f8

08005ba0 <UTIL_LCD_Clear>:
{
 8005ba0:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8005ba2:	2100      	movs	r1, #0
{
 8005ba4:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8005ba6:	4a05      	ldr	r2, [pc, #20]	; (8005bbc <UTIL_LCD_Clear+0x1c>)
 8005ba8:	9000      	str	r0, [sp, #0]
 8005baa:	4608      	mov	r0, r1
 8005bac:	6993      	ldr	r3, [r2, #24]
 8005bae:	6952      	ldr	r2, [r2, #20]
 8005bb0:	f7ff ffca 	bl	8005b48 <UTIL_LCD_FillRect>
}
 8005bb4:	b003      	add	sp, #12
 8005bb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bba:	bf00      	nop
 8005bbc:	240009b8 	.word	0x240009b8

08005bc0 <__errno>:
 8005bc0:	4b01      	ldr	r3, [pc, #4]	; (8005bc8 <__errno+0x8>)
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	24000864 	.word	0x24000864

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4d0d      	ldr	r5, [pc, #52]	; (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	; (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b64      	subs	r4, r4, r5
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4d0b      	ldr	r5, [pc, #44]	; (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	; (8005c10 <__libc_init_array+0x44>)
 8005be0:	f000 fc46 	bl	8006470 <_init>
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08008274 	.word	0x08008274
 8005c08:	08008274 	.word	0x08008274
 8005c0c:	08008274 	.word	0x08008274
 8005c10:	08008278 	.word	0x08008278

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <siprintf>:
 8005c30:	b40e      	push	{r1, r2, r3}
 8005c32:	b500      	push	{lr}
 8005c34:	b09c      	sub	sp, #112	; 0x70
 8005c36:	ab1d      	add	r3, sp, #116	; 0x74
 8005c38:	9002      	str	r0, [sp, #8]
 8005c3a:	9006      	str	r0, [sp, #24]
 8005c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c40:	4809      	ldr	r0, [pc, #36]	; (8005c68 <siprintf+0x38>)
 8005c42:	9107      	str	r1, [sp, #28]
 8005c44:	9104      	str	r1, [sp, #16]
 8005c46:	4909      	ldr	r1, [pc, #36]	; (8005c6c <siprintf+0x3c>)
 8005c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c4c:	9105      	str	r1, [sp, #20]
 8005c4e:	6800      	ldr	r0, [r0, #0]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	a902      	add	r1, sp, #8
 8005c54:	f000 f868 	bl	8005d28 <_svfiprintf_r>
 8005c58:	9b02      	ldr	r3, [sp, #8]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	b01c      	add	sp, #112	; 0x70
 8005c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c64:	b003      	add	sp, #12
 8005c66:	4770      	bx	lr
 8005c68:	24000864 	.word	0x24000864
 8005c6c:	ffff0208 	.word	0xffff0208

08005c70 <__ssputs_r>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	688e      	ldr	r6, [r1, #8]
 8005c76:	429e      	cmp	r6, r3
 8005c78:	4682      	mov	sl, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	4690      	mov	r8, r2
 8005c7e:	461f      	mov	r7, r3
 8005c80:	d838      	bhi.n	8005cf4 <__ssputs_r+0x84>
 8005c82:	898a      	ldrh	r2, [r1, #12]
 8005c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c88:	d032      	beq.n	8005cf0 <__ssputs_r+0x80>
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	6909      	ldr	r1, [r1, #16]
 8005c8e:	eba5 0901 	sub.w	r9, r5, r1
 8005c92:	6965      	ldr	r5, [r4, #20]
 8005c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	444b      	add	r3, r9
 8005ca0:	106d      	asrs	r5, r5, #1
 8005ca2:	429d      	cmp	r5, r3
 8005ca4:	bf38      	it	cc
 8005ca6:	461d      	movcc	r5, r3
 8005ca8:	0553      	lsls	r3, r2, #21
 8005caa:	d531      	bpl.n	8005d10 <__ssputs_r+0xa0>
 8005cac:	4629      	mov	r1, r5
 8005cae:	f000 fb39 	bl	8006324 <_malloc_r>
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	b950      	cbnz	r0, 8005ccc <__ssputs_r+0x5c>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	f8ca 3000 	str.w	r3, [sl]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ccc:	6921      	ldr	r1, [r4, #16]
 8005cce:	464a      	mov	r2, r9
 8005cd0:	f7ff ffa0 	bl	8005c14 <memcpy>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	81a3      	strh	r3, [r4, #12]
 8005ce0:	6126      	str	r6, [r4, #16]
 8005ce2:	6165      	str	r5, [r4, #20]
 8005ce4:	444e      	add	r6, r9
 8005ce6:	eba5 0509 	sub.w	r5, r5, r9
 8005cea:	6026      	str	r6, [r4, #0]
 8005cec:	60a5      	str	r5, [r4, #8]
 8005cee:	463e      	mov	r6, r7
 8005cf0:	42be      	cmp	r6, r7
 8005cf2:	d900      	bls.n	8005cf6 <__ssputs_r+0x86>
 8005cf4:	463e      	mov	r6, r7
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	6820      	ldr	r0, [r4, #0]
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	f000 faa8 	bl	8006250 <memmove>
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	1b9b      	subs	r3, r3, r6
 8005d06:	4432      	add	r2, r6
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7db      	b.n	8005cc8 <__ssputs_r+0x58>
 8005d10:	462a      	mov	r2, r5
 8005d12:	f000 fb61 	bl	80063d8 <_realloc_r>
 8005d16:	4606      	mov	r6, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1e1      	bne.n	8005ce0 <__ssputs_r+0x70>
 8005d1c:	6921      	ldr	r1, [r4, #16]
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f000 fab0 	bl	8006284 <_free_r>
 8005d24:	e7c7      	b.n	8005cb6 <__ssputs_r+0x46>
	...

08005d28 <_svfiprintf_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	4698      	mov	r8, r3
 8005d2e:	898b      	ldrh	r3, [r1, #12]
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	b09d      	sub	sp, #116	; 0x74
 8005d34:	4607      	mov	r7, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	d50e      	bpl.n	8005d5a <_svfiprintf_r+0x32>
 8005d3c:	690b      	ldr	r3, [r1, #16]
 8005d3e:	b963      	cbnz	r3, 8005d5a <_svfiprintf_r+0x32>
 8005d40:	2140      	movs	r1, #64	; 0x40
 8005d42:	f000 faef 	bl	8006324 <_malloc_r>
 8005d46:	6028      	str	r0, [r5, #0]
 8005d48:	6128      	str	r0, [r5, #16]
 8005d4a:	b920      	cbnz	r0, 8005d56 <_svfiprintf_r+0x2e>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	e0d1      	b.n	8005efa <_svfiprintf_r+0x1d2>
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	616b      	str	r3, [r5, #20]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5e:	2320      	movs	r3, #32
 8005d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d68:	2330      	movs	r3, #48	; 0x30
 8005d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f14 <_svfiprintf_r+0x1ec>
 8005d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d72:	f04f 0901 	mov.w	r9, #1
 8005d76:	4623      	mov	r3, r4
 8005d78:	469a      	mov	sl, r3
 8005d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d7e:	b10a      	cbz	r2, 8005d84 <_svfiprintf_r+0x5c>
 8005d80:	2a25      	cmp	r2, #37	; 0x25
 8005d82:	d1f9      	bne.n	8005d78 <_svfiprintf_r+0x50>
 8005d84:	ebba 0b04 	subs.w	fp, sl, r4
 8005d88:	d00b      	beq.n	8005da2 <_svfiprintf_r+0x7a>
 8005d8a:	465b      	mov	r3, fp
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff ff6d 	bl	8005c70 <__ssputs_r>
 8005d96:	3001      	adds	r0, #1
 8005d98:	f000 80aa 	beq.w	8005ef0 <_svfiprintf_r+0x1c8>
 8005d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d9e:	445a      	add	r2, fp
 8005da0:	9209      	str	r2, [sp, #36]	; 0x24
 8005da2:	f89a 3000 	ldrb.w	r3, [sl]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a2 	beq.w	8005ef0 <_svfiprintf_r+0x1c8>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db6:	f10a 0a01 	add.w	sl, sl, #1
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	9307      	str	r3, [sp, #28]
 8005dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8005dc4:	4654      	mov	r4, sl
 8005dc6:	2205      	movs	r2, #5
 8005dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dcc:	4851      	ldr	r0, [pc, #324]	; (8005f14 <_svfiprintf_r+0x1ec>)
 8005dce:	f7fa fa87 	bl	80002e0 <memchr>
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	b9d8      	cbnz	r0, 8005e0e <_svfiprintf_r+0xe6>
 8005dd6:	06d0      	lsls	r0, r2, #27
 8005dd8:	bf44      	itt	mi
 8005dda:	2320      	movmi	r3, #32
 8005ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005de0:	0711      	lsls	r1, r2, #28
 8005de2:	bf44      	itt	mi
 8005de4:	232b      	movmi	r3, #43	; 0x2b
 8005de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dea:	f89a 3000 	ldrb.w	r3, [sl]
 8005dee:	2b2a      	cmp	r3, #42	; 0x2a
 8005df0:	d015      	beq.n	8005e1e <_svfiprintf_r+0xf6>
 8005df2:	9a07      	ldr	r2, [sp, #28]
 8005df4:	4654      	mov	r4, sl
 8005df6:	2000      	movs	r0, #0
 8005df8:	f04f 0c0a 	mov.w	ip, #10
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e02:	3b30      	subs	r3, #48	; 0x30
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d94e      	bls.n	8005ea6 <_svfiprintf_r+0x17e>
 8005e08:	b1b0      	cbz	r0, 8005e38 <_svfiprintf_r+0x110>
 8005e0a:	9207      	str	r2, [sp, #28]
 8005e0c:	e014      	b.n	8005e38 <_svfiprintf_r+0x110>
 8005e0e:	eba0 0308 	sub.w	r3, r0, r8
 8005e12:	fa09 f303 	lsl.w	r3, r9, r3
 8005e16:	4313      	orrs	r3, r2
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	46a2      	mov	sl, r4
 8005e1c:	e7d2      	b.n	8005dc4 <_svfiprintf_r+0x9c>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	9103      	str	r1, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfbb      	ittet	lt
 8005e2a:	425b      	neglt	r3, r3
 8005e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e30:	9307      	strge	r3, [sp, #28]
 8005e32:	9307      	strlt	r3, [sp, #28]
 8005e34:	bfb8      	it	lt
 8005e36:	9204      	strlt	r2, [sp, #16]
 8005e38:	7823      	ldrb	r3, [r4, #0]
 8005e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e3c:	d10c      	bne.n	8005e58 <_svfiprintf_r+0x130>
 8005e3e:	7863      	ldrb	r3, [r4, #1]
 8005e40:	2b2a      	cmp	r3, #42	; 0x2a
 8005e42:	d135      	bne.n	8005eb0 <_svfiprintf_r+0x188>
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	1d1a      	adds	r2, r3, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	9203      	str	r2, [sp, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bfb8      	it	lt
 8005e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e54:	3402      	adds	r4, #2
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f24 <_svfiprintf_r+0x1fc>
 8005e5c:	7821      	ldrb	r1, [r4, #0]
 8005e5e:	2203      	movs	r2, #3
 8005e60:	4650      	mov	r0, sl
 8005e62:	f7fa fa3d 	bl	80002e0 <memchr>
 8005e66:	b140      	cbz	r0, 8005e7a <_svfiprintf_r+0x152>
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	eba0 000a 	sub.w	r0, r0, sl
 8005e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	4303      	orrs	r3, r0
 8005e76:	3401      	adds	r4, #1
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e7e:	4826      	ldr	r0, [pc, #152]	; (8005f18 <_svfiprintf_r+0x1f0>)
 8005e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e84:	2206      	movs	r2, #6
 8005e86:	f7fa fa2b 	bl	80002e0 <memchr>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d038      	beq.n	8005f00 <_svfiprintf_r+0x1d8>
 8005e8e:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <_svfiprintf_r+0x1f4>)
 8005e90:	bb1b      	cbnz	r3, 8005eda <_svfiprintf_r+0x1b2>
 8005e92:	9b03      	ldr	r3, [sp, #12]
 8005e94:	3307      	adds	r3, #7
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	9303      	str	r3, [sp, #12]
 8005e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea0:	4433      	add	r3, r6
 8005ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea4:	e767      	b.n	8005d76 <_svfiprintf_r+0x4e>
 8005ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eaa:	460c      	mov	r4, r1
 8005eac:	2001      	movs	r0, #1
 8005eae:	e7a5      	b.n	8005dfc <_svfiprintf_r+0xd4>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	3401      	adds	r4, #1
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f04f 0c0a 	mov.w	ip, #10
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec2:	3a30      	subs	r2, #48	; 0x30
 8005ec4:	2a09      	cmp	r2, #9
 8005ec6:	d903      	bls.n	8005ed0 <_svfiprintf_r+0x1a8>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0c5      	beq.n	8005e58 <_svfiprintf_r+0x130>
 8005ecc:	9105      	str	r1, [sp, #20]
 8005ece:	e7c3      	b.n	8005e58 <_svfiprintf_r+0x130>
 8005ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e7f0      	b.n	8005ebc <_svfiprintf_r+0x194>
 8005eda:	ab03      	add	r3, sp, #12
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <_svfiprintf_r+0x1f8>)
 8005ee2:	a904      	add	r1, sp, #16
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f3af 8000 	nop.w
 8005eea:	1c42      	adds	r2, r0, #1
 8005eec:	4606      	mov	r6, r0
 8005eee:	d1d6      	bne.n	8005e9e <_svfiprintf_r+0x176>
 8005ef0:	89ab      	ldrh	r3, [r5, #12]
 8005ef2:	065b      	lsls	r3, r3, #25
 8005ef4:	f53f af2c 	bmi.w	8005d50 <_svfiprintf_r+0x28>
 8005ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005efa:	b01d      	add	sp, #116	; 0x74
 8005efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f00:	ab03      	add	r3, sp, #12
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	462a      	mov	r2, r5
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <_svfiprintf_r+0x1f8>)
 8005f08:	a904      	add	r1, sp, #16
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f000 f87a 	bl	8006004 <_printf_i>
 8005f10:	e7eb      	b.n	8005eea <_svfiprintf_r+0x1c2>
 8005f12:	bf00      	nop
 8005f14:	08008240 	.word	0x08008240
 8005f18:	0800824a 	.word	0x0800824a
 8005f1c:	00000000 	.word	0x00000000
 8005f20:	08005c71 	.word	0x08005c71
 8005f24:	08008246 	.word	0x08008246

08005f28 <_printf_common>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	4699      	mov	r9, r3
 8005f30:	688a      	ldr	r2, [r1, #8]
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	bfb8      	it	lt
 8005f3c:	4613      	movlt	r3, r2
 8005f3e:	6033      	str	r3, [r6, #0]
 8005f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f44:	4607      	mov	r7, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	b10a      	cbz	r2, 8005f4e <_printf_common+0x26>
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6033      	str	r3, [r6, #0]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	0699      	lsls	r1, r3, #26
 8005f52:	bf42      	ittt	mi
 8005f54:	6833      	ldrmi	r3, [r6, #0]
 8005f56:	3302      	addmi	r3, #2
 8005f58:	6033      	strmi	r3, [r6, #0]
 8005f5a:	6825      	ldr	r5, [r4, #0]
 8005f5c:	f015 0506 	ands.w	r5, r5, #6
 8005f60:	d106      	bne.n	8005f70 <_printf_common+0x48>
 8005f62:	f104 0a19 	add.w	sl, r4, #25
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	6832      	ldr	r2, [r6, #0]
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dc26      	bgt.n	8005fbe <_printf_common+0x96>
 8005f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f74:	1e13      	subs	r3, r2, #0
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	bf18      	it	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	0692      	lsls	r2, r2, #26
 8005f7e:	d42b      	bmi.n	8005fd8 <_printf_common+0xb0>
 8005f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f84:	4649      	mov	r1, r9
 8005f86:	4638      	mov	r0, r7
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d01e      	beq.n	8005fcc <_printf_common+0xa4>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	68e5      	ldr	r5, [r4, #12]
 8005f92:	6832      	ldr	r2, [r6, #0]
 8005f94:	f003 0306 	and.w	r3, r3, #6
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf08      	it	eq
 8005f9c:	1aad      	subeq	r5, r5, r2
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	bf0c      	ite	eq
 8005fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa8:	2500      	movne	r5, #0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfc4      	itt	gt
 8005fae:	1a9b      	subgt	r3, r3, r2
 8005fb0:	18ed      	addgt	r5, r5, r3
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	341a      	adds	r4, #26
 8005fb6:	42b5      	cmp	r5, r6
 8005fb8:	d11a      	bne.n	8005ff0 <_printf_common+0xc8>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e008      	b.n	8005fd0 <_printf_common+0xa8>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	47c0      	blx	r8
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d103      	bne.n	8005fd4 <_printf_common+0xac>
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	3501      	adds	r5, #1
 8005fd6:	e7c6      	b.n	8005f66 <_printf_common+0x3e>
 8005fd8:	18e1      	adds	r1, r4, r3
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	2030      	movs	r0, #48	; 0x30
 8005fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fe2:	4422      	add	r2, r4
 8005fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fec:	3302      	adds	r3, #2
 8005fee:	e7c7      	b.n	8005f80 <_printf_common+0x58>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c0      	blx	r8
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d0e6      	beq.n	8005fcc <_printf_common+0xa4>
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7d9      	b.n	8005fb6 <_printf_common+0x8e>
	...

08006004 <_printf_i>:
 8006004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	460c      	mov	r4, r1
 800600a:	4691      	mov	r9, r2
 800600c:	7e27      	ldrb	r7, [r4, #24]
 800600e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006010:	2f78      	cmp	r7, #120	; 0x78
 8006012:	4680      	mov	r8, r0
 8006014:	469a      	mov	sl, r3
 8006016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800601a:	d807      	bhi.n	800602c <_printf_i+0x28>
 800601c:	2f62      	cmp	r7, #98	; 0x62
 800601e:	d80a      	bhi.n	8006036 <_printf_i+0x32>
 8006020:	2f00      	cmp	r7, #0
 8006022:	f000 80d8 	beq.w	80061d6 <_printf_i+0x1d2>
 8006026:	2f58      	cmp	r7, #88	; 0x58
 8006028:	f000 80a3 	beq.w	8006172 <_printf_i+0x16e>
 800602c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006034:	e03a      	b.n	80060ac <_printf_i+0xa8>
 8006036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800603a:	2b15      	cmp	r3, #21
 800603c:	d8f6      	bhi.n	800602c <_printf_i+0x28>
 800603e:	a001      	add	r0, pc, #4	; (adr r0, 8006044 <_printf_i+0x40>)
 8006040:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006044:	0800609d 	.word	0x0800609d
 8006048:	080060b1 	.word	0x080060b1
 800604c:	0800602d 	.word	0x0800602d
 8006050:	0800602d 	.word	0x0800602d
 8006054:	0800602d 	.word	0x0800602d
 8006058:	0800602d 	.word	0x0800602d
 800605c:	080060b1 	.word	0x080060b1
 8006060:	0800602d 	.word	0x0800602d
 8006064:	0800602d 	.word	0x0800602d
 8006068:	0800602d 	.word	0x0800602d
 800606c:	0800602d 	.word	0x0800602d
 8006070:	080061bd 	.word	0x080061bd
 8006074:	080060e1 	.word	0x080060e1
 8006078:	0800619f 	.word	0x0800619f
 800607c:	0800602d 	.word	0x0800602d
 8006080:	0800602d 	.word	0x0800602d
 8006084:	080061df 	.word	0x080061df
 8006088:	0800602d 	.word	0x0800602d
 800608c:	080060e1 	.word	0x080060e1
 8006090:	0800602d 	.word	0x0800602d
 8006094:	0800602d 	.word	0x0800602d
 8006098:	080061a7 	.word	0x080061a7
 800609c:	680b      	ldr	r3, [r1, #0]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	600a      	str	r2, [r1, #0]
 80060a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0a3      	b.n	80061f8 <_printf_i+0x1f4>
 80060b0:	6825      	ldr	r5, [r4, #0]
 80060b2:	6808      	ldr	r0, [r1, #0]
 80060b4:	062e      	lsls	r6, r5, #24
 80060b6:	f100 0304 	add.w	r3, r0, #4
 80060ba:	d50a      	bpl.n	80060d2 <_printf_i+0xce>
 80060bc:	6805      	ldr	r5, [r0, #0]
 80060be:	600b      	str	r3, [r1, #0]
 80060c0:	2d00      	cmp	r5, #0
 80060c2:	da03      	bge.n	80060cc <_printf_i+0xc8>
 80060c4:	232d      	movs	r3, #45	; 0x2d
 80060c6:	426d      	negs	r5, r5
 80060c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060cc:	485e      	ldr	r0, [pc, #376]	; (8006248 <_printf_i+0x244>)
 80060ce:	230a      	movs	r3, #10
 80060d0:	e019      	b.n	8006106 <_printf_i+0x102>
 80060d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060d6:	6805      	ldr	r5, [r0, #0]
 80060d8:	600b      	str	r3, [r1, #0]
 80060da:	bf18      	it	ne
 80060dc:	b22d      	sxthne	r5, r5
 80060de:	e7ef      	b.n	80060c0 <_printf_i+0xbc>
 80060e0:	680b      	ldr	r3, [r1, #0]
 80060e2:	6825      	ldr	r5, [r4, #0]
 80060e4:	1d18      	adds	r0, r3, #4
 80060e6:	6008      	str	r0, [r1, #0]
 80060e8:	0628      	lsls	r0, r5, #24
 80060ea:	d501      	bpl.n	80060f0 <_printf_i+0xec>
 80060ec:	681d      	ldr	r5, [r3, #0]
 80060ee:	e002      	b.n	80060f6 <_printf_i+0xf2>
 80060f0:	0669      	lsls	r1, r5, #25
 80060f2:	d5fb      	bpl.n	80060ec <_printf_i+0xe8>
 80060f4:	881d      	ldrh	r5, [r3, #0]
 80060f6:	4854      	ldr	r0, [pc, #336]	; (8006248 <_printf_i+0x244>)
 80060f8:	2f6f      	cmp	r7, #111	; 0x6f
 80060fa:	bf0c      	ite	eq
 80060fc:	2308      	moveq	r3, #8
 80060fe:	230a      	movne	r3, #10
 8006100:	2100      	movs	r1, #0
 8006102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006106:	6866      	ldr	r6, [r4, #4]
 8006108:	60a6      	str	r6, [r4, #8]
 800610a:	2e00      	cmp	r6, #0
 800610c:	bfa2      	ittt	ge
 800610e:	6821      	ldrge	r1, [r4, #0]
 8006110:	f021 0104 	bicge.w	r1, r1, #4
 8006114:	6021      	strge	r1, [r4, #0]
 8006116:	b90d      	cbnz	r5, 800611c <_printf_i+0x118>
 8006118:	2e00      	cmp	r6, #0
 800611a:	d04d      	beq.n	80061b8 <_printf_i+0x1b4>
 800611c:	4616      	mov	r6, r2
 800611e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006122:	fb03 5711 	mls	r7, r3, r1, r5
 8006126:	5dc7      	ldrb	r7, [r0, r7]
 8006128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800612c:	462f      	mov	r7, r5
 800612e:	42bb      	cmp	r3, r7
 8006130:	460d      	mov	r5, r1
 8006132:	d9f4      	bls.n	800611e <_printf_i+0x11a>
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10b      	bne.n	8006150 <_printf_i+0x14c>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07df      	lsls	r7, r3, #31
 800613c:	d508      	bpl.n	8006150 <_printf_i+0x14c>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	bfde      	ittt	le
 8006146:	2330      	movle	r3, #48	; 0x30
 8006148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800614c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006150:	1b92      	subs	r2, r2, r6
 8006152:	6122      	str	r2, [r4, #16]
 8006154:	f8cd a000 	str.w	sl, [sp]
 8006158:	464b      	mov	r3, r9
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff fee2 	bl	8005f28 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14c      	bne.n	8006202 <_printf_i+0x1fe>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	b004      	add	sp, #16
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006172:	4835      	ldr	r0, [pc, #212]	; (8006248 <_printf_i+0x244>)
 8006174:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	680e      	ldr	r6, [r1, #0]
 800617c:	061f      	lsls	r7, r3, #24
 800617e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006182:	600e      	str	r6, [r1, #0]
 8006184:	d514      	bpl.n	80061b0 <_printf_i+0x1ac>
 8006186:	07d9      	lsls	r1, r3, #31
 8006188:	bf44      	itt	mi
 800618a:	f043 0320 	orrmi.w	r3, r3, #32
 800618e:	6023      	strmi	r3, [r4, #0]
 8006190:	b91d      	cbnz	r5, 800619a <_printf_i+0x196>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f023 0320 	bic.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	2310      	movs	r3, #16
 800619c:	e7b0      	b.n	8006100 <_printf_i+0xfc>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f043 0320 	orr.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	2378      	movs	r3, #120	; 0x78
 80061a8:	4828      	ldr	r0, [pc, #160]	; (800624c <_printf_i+0x248>)
 80061aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ae:	e7e3      	b.n	8006178 <_printf_i+0x174>
 80061b0:	065e      	lsls	r6, r3, #25
 80061b2:	bf48      	it	mi
 80061b4:	b2ad      	uxthmi	r5, r5
 80061b6:	e7e6      	b.n	8006186 <_printf_i+0x182>
 80061b8:	4616      	mov	r6, r2
 80061ba:	e7bb      	b.n	8006134 <_printf_i+0x130>
 80061bc:	680b      	ldr	r3, [r1, #0]
 80061be:	6826      	ldr	r6, [r4, #0]
 80061c0:	6960      	ldr	r0, [r4, #20]
 80061c2:	1d1d      	adds	r5, r3, #4
 80061c4:	600d      	str	r5, [r1, #0]
 80061c6:	0635      	lsls	r5, r6, #24
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	d501      	bpl.n	80061d0 <_printf_i+0x1cc>
 80061cc:	6018      	str	r0, [r3, #0]
 80061ce:	e002      	b.n	80061d6 <_printf_i+0x1d2>
 80061d0:	0671      	lsls	r1, r6, #25
 80061d2:	d5fb      	bpl.n	80061cc <_printf_i+0x1c8>
 80061d4:	8018      	strh	r0, [r3, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	4616      	mov	r6, r2
 80061dc:	e7ba      	b.n	8006154 <_printf_i+0x150>
 80061de:	680b      	ldr	r3, [r1, #0]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	600a      	str	r2, [r1, #0]
 80061e4:	681e      	ldr	r6, [r3, #0]
 80061e6:	6862      	ldr	r2, [r4, #4]
 80061e8:	2100      	movs	r1, #0
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7fa f878 	bl	80002e0 <memchr>
 80061f0:	b108      	cbz	r0, 80061f6 <_printf_i+0x1f2>
 80061f2:	1b80      	subs	r0, r0, r6
 80061f4:	6060      	str	r0, [r4, #4]
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	2300      	movs	r3, #0
 80061fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006200:	e7a8      	b.n	8006154 <_printf_i+0x150>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	4632      	mov	r2, r6
 8006206:	4649      	mov	r1, r9
 8006208:	4640      	mov	r0, r8
 800620a:	47d0      	blx	sl
 800620c:	3001      	adds	r0, #1
 800620e:	d0ab      	beq.n	8006168 <_printf_i+0x164>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	079b      	lsls	r3, r3, #30
 8006214:	d413      	bmi.n	800623e <_printf_i+0x23a>
 8006216:	68e0      	ldr	r0, [r4, #12]
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	4298      	cmp	r0, r3
 800621c:	bfb8      	it	lt
 800621e:	4618      	movlt	r0, r3
 8006220:	e7a4      	b.n	800616c <_printf_i+0x168>
 8006222:	2301      	movs	r3, #1
 8006224:	4632      	mov	r2, r6
 8006226:	4649      	mov	r1, r9
 8006228:	4640      	mov	r0, r8
 800622a:	47d0      	blx	sl
 800622c:	3001      	adds	r0, #1
 800622e:	d09b      	beq.n	8006168 <_printf_i+0x164>
 8006230:	3501      	adds	r5, #1
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	9903      	ldr	r1, [sp, #12]
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	42ab      	cmp	r3, r5
 800623a:	dcf2      	bgt.n	8006222 <_printf_i+0x21e>
 800623c:	e7eb      	b.n	8006216 <_printf_i+0x212>
 800623e:	2500      	movs	r5, #0
 8006240:	f104 0619 	add.w	r6, r4, #25
 8006244:	e7f5      	b.n	8006232 <_printf_i+0x22e>
 8006246:	bf00      	nop
 8006248:	08008251 	.word	0x08008251
 800624c:	08008262 	.word	0x08008262

08006250 <memmove>:
 8006250:	4288      	cmp	r0, r1
 8006252:	b510      	push	{r4, lr}
 8006254:	eb01 0402 	add.w	r4, r1, r2
 8006258:	d902      	bls.n	8006260 <memmove+0x10>
 800625a:	4284      	cmp	r4, r0
 800625c:	4623      	mov	r3, r4
 800625e:	d807      	bhi.n	8006270 <memmove+0x20>
 8006260:	1e43      	subs	r3, r0, #1
 8006262:	42a1      	cmp	r1, r4
 8006264:	d008      	beq.n	8006278 <memmove+0x28>
 8006266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800626e:	e7f8      	b.n	8006262 <memmove+0x12>
 8006270:	4402      	add	r2, r0
 8006272:	4601      	mov	r1, r0
 8006274:	428a      	cmp	r2, r1
 8006276:	d100      	bne.n	800627a <memmove+0x2a>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800627e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006282:	e7f7      	b.n	8006274 <memmove+0x24>

08006284 <_free_r>:
 8006284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006286:	2900      	cmp	r1, #0
 8006288:	d048      	beq.n	800631c <_free_r+0x98>
 800628a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628e:	9001      	str	r0, [sp, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f1a1 0404 	sub.w	r4, r1, #4
 8006296:	bfb8      	it	lt
 8006298:	18e4      	addlt	r4, r4, r3
 800629a:	f000 f8d3 	bl	8006444 <__malloc_lock>
 800629e:	4a20      	ldr	r2, [pc, #128]	; (8006320 <_free_r+0x9c>)
 80062a0:	9801      	ldr	r0, [sp, #4]
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	4615      	mov	r5, r2
 80062a6:	b933      	cbnz	r3, 80062b6 <_free_r+0x32>
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6014      	str	r4, [r2, #0]
 80062ac:	b003      	add	sp, #12
 80062ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062b2:	f000 b8cd 	b.w	8006450 <__malloc_unlock>
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	d90b      	bls.n	80062d2 <_free_r+0x4e>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	1862      	adds	r2, r4, r1
 80062be:	4293      	cmp	r3, r2
 80062c0:	bf04      	itt	eq
 80062c2:	681a      	ldreq	r2, [r3, #0]
 80062c4:	685b      	ldreq	r3, [r3, #4]
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	bf04      	itt	eq
 80062ca:	1852      	addeq	r2, r2, r1
 80062cc:	6022      	streq	r2, [r4, #0]
 80062ce:	602c      	str	r4, [r5, #0]
 80062d0:	e7ec      	b.n	80062ac <_free_r+0x28>
 80062d2:	461a      	mov	r2, r3
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b10b      	cbz	r3, 80062dc <_free_r+0x58>
 80062d8:	42a3      	cmp	r3, r4
 80062da:	d9fa      	bls.n	80062d2 <_free_r+0x4e>
 80062dc:	6811      	ldr	r1, [r2, #0]
 80062de:	1855      	adds	r5, r2, r1
 80062e0:	42a5      	cmp	r5, r4
 80062e2:	d10b      	bne.n	80062fc <_free_r+0x78>
 80062e4:	6824      	ldr	r4, [r4, #0]
 80062e6:	4421      	add	r1, r4
 80062e8:	1854      	adds	r4, r2, r1
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	d1dd      	bne.n	80062ac <_free_r+0x28>
 80062f0:	681c      	ldr	r4, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	6053      	str	r3, [r2, #4]
 80062f6:	4421      	add	r1, r4
 80062f8:	6011      	str	r1, [r2, #0]
 80062fa:	e7d7      	b.n	80062ac <_free_r+0x28>
 80062fc:	d902      	bls.n	8006304 <_free_r+0x80>
 80062fe:	230c      	movs	r3, #12
 8006300:	6003      	str	r3, [r0, #0]
 8006302:	e7d3      	b.n	80062ac <_free_r+0x28>
 8006304:	6825      	ldr	r5, [r4, #0]
 8006306:	1961      	adds	r1, r4, r5
 8006308:	428b      	cmp	r3, r1
 800630a:	bf04      	itt	eq
 800630c:	6819      	ldreq	r1, [r3, #0]
 800630e:	685b      	ldreq	r3, [r3, #4]
 8006310:	6063      	str	r3, [r4, #4]
 8006312:	bf04      	itt	eq
 8006314:	1949      	addeq	r1, r1, r5
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	6054      	str	r4, [r2, #4]
 800631a:	e7c7      	b.n	80062ac <_free_r+0x28>
 800631c:	b003      	add	sp, #12
 800631e:	bd30      	pop	{r4, r5, pc}
 8006320:	24000a24 	.word	0x24000a24

08006324 <_malloc_r>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	1ccd      	adds	r5, r1, #3
 8006328:	f025 0503 	bic.w	r5, r5, #3
 800632c:	3508      	adds	r5, #8
 800632e:	2d0c      	cmp	r5, #12
 8006330:	bf38      	it	cc
 8006332:	250c      	movcc	r5, #12
 8006334:	2d00      	cmp	r5, #0
 8006336:	4606      	mov	r6, r0
 8006338:	db01      	blt.n	800633e <_malloc_r+0x1a>
 800633a:	42a9      	cmp	r1, r5
 800633c:	d903      	bls.n	8006346 <_malloc_r+0x22>
 800633e:	230c      	movs	r3, #12
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	2000      	movs	r0, #0
 8006344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006346:	f000 f87d 	bl	8006444 <__malloc_lock>
 800634a:	4921      	ldr	r1, [pc, #132]	; (80063d0 <_malloc_r+0xac>)
 800634c:	680a      	ldr	r2, [r1, #0]
 800634e:	4614      	mov	r4, r2
 8006350:	b99c      	cbnz	r4, 800637a <_malloc_r+0x56>
 8006352:	4f20      	ldr	r7, [pc, #128]	; (80063d4 <_malloc_r+0xb0>)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	b923      	cbnz	r3, 8006362 <_malloc_r+0x3e>
 8006358:	4621      	mov	r1, r4
 800635a:	4630      	mov	r0, r6
 800635c:	f000 f862 	bl	8006424 <_sbrk_r>
 8006360:	6038      	str	r0, [r7, #0]
 8006362:	4629      	mov	r1, r5
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f85d 	bl	8006424 <_sbrk_r>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	d123      	bne.n	80063b6 <_malloc_r+0x92>
 800636e:	230c      	movs	r3, #12
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f86c 	bl	8006450 <__malloc_unlock>
 8006378:	e7e3      	b.n	8006342 <_malloc_r+0x1e>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	1b5b      	subs	r3, r3, r5
 800637e:	d417      	bmi.n	80063b0 <_malloc_r+0x8c>
 8006380:	2b0b      	cmp	r3, #11
 8006382:	d903      	bls.n	800638c <_malloc_r+0x68>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	441c      	add	r4, r3
 8006388:	6025      	str	r5, [r4, #0]
 800638a:	e004      	b.n	8006396 <_malloc_r+0x72>
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	42a2      	cmp	r2, r4
 8006390:	bf0c      	ite	eq
 8006392:	600b      	streq	r3, [r1, #0]
 8006394:	6053      	strne	r3, [r2, #4]
 8006396:	4630      	mov	r0, r6
 8006398:	f000 f85a 	bl	8006450 <__malloc_unlock>
 800639c:	f104 000b 	add.w	r0, r4, #11
 80063a0:	1d23      	adds	r3, r4, #4
 80063a2:	f020 0007 	bic.w	r0, r0, #7
 80063a6:	1ac2      	subs	r2, r0, r3
 80063a8:	d0cc      	beq.n	8006344 <_malloc_r+0x20>
 80063aa:	1a1b      	subs	r3, r3, r0
 80063ac:	50a3      	str	r3, [r4, r2]
 80063ae:	e7c9      	b.n	8006344 <_malloc_r+0x20>
 80063b0:	4622      	mov	r2, r4
 80063b2:	6864      	ldr	r4, [r4, #4]
 80063b4:	e7cc      	b.n	8006350 <_malloc_r+0x2c>
 80063b6:	1cc4      	adds	r4, r0, #3
 80063b8:	f024 0403 	bic.w	r4, r4, #3
 80063bc:	42a0      	cmp	r0, r4
 80063be:	d0e3      	beq.n	8006388 <_malloc_r+0x64>
 80063c0:	1a21      	subs	r1, r4, r0
 80063c2:	4630      	mov	r0, r6
 80063c4:	f000 f82e 	bl	8006424 <_sbrk_r>
 80063c8:	3001      	adds	r0, #1
 80063ca:	d1dd      	bne.n	8006388 <_malloc_r+0x64>
 80063cc:	e7cf      	b.n	800636e <_malloc_r+0x4a>
 80063ce:	bf00      	nop
 80063d0:	24000a24 	.word	0x24000a24
 80063d4:	24000a28 	.word	0x24000a28

080063d8 <_realloc_r>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	4607      	mov	r7, r0
 80063dc:	4614      	mov	r4, r2
 80063de:	460e      	mov	r6, r1
 80063e0:	b921      	cbnz	r1, 80063ec <_realloc_r+0x14>
 80063e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063e6:	4611      	mov	r1, r2
 80063e8:	f7ff bf9c 	b.w	8006324 <_malloc_r>
 80063ec:	b922      	cbnz	r2, 80063f8 <_realloc_r+0x20>
 80063ee:	f7ff ff49 	bl	8006284 <_free_r>
 80063f2:	4625      	mov	r5, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f8:	f000 f830 	bl	800645c <_malloc_usable_size_r>
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d20f      	bcs.n	8006420 <_realloc_r+0x48>
 8006400:	4621      	mov	r1, r4
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ff8e 	bl	8006324 <_malloc_r>
 8006408:	4605      	mov	r5, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d0f2      	beq.n	80063f4 <_realloc_r+0x1c>
 800640e:	4631      	mov	r1, r6
 8006410:	4622      	mov	r2, r4
 8006412:	f7ff fbff 	bl	8005c14 <memcpy>
 8006416:	4631      	mov	r1, r6
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ff33 	bl	8006284 <_free_r>
 800641e:	e7e9      	b.n	80063f4 <_realloc_r+0x1c>
 8006420:	4635      	mov	r5, r6
 8006422:	e7e7      	b.n	80063f4 <_realloc_r+0x1c>

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d06      	ldr	r5, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa ff54 	bl	80012dc <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	24010bbc 	.word	0x24010bbc

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__malloc_lock+0x8>)
 8006446:	f000 b811 	b.w	800646c <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	24010bc4 	.word	0x24010bc4

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_unlock+0x8>)
 8006452:	f000 b80c 	b.w	800646e <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	24010bc4 	.word	0x24010bc4

0800645c <_malloc_usable_size_r>:
 800645c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006460:	1f18      	subs	r0, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	bfbc      	itt	lt
 8006466:	580b      	ldrlt	r3, [r1, r0]
 8006468:	18c0      	addlt	r0, r0, r3
 800646a:	4770      	bx	lr

0800646c <__retarget_lock_acquire_recursive>:
 800646c:	4770      	bx	lr

0800646e <__retarget_lock_release_recursive>:
 800646e:	4770      	bx	lr

08006470 <_init>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr

0800647c <_fini>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr
